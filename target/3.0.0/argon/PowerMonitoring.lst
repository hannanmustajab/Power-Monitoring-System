
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a600  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000944  2003f400  000de620  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003dc20  000def64  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000918  2003dee0  2003dee0  0002dee0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000df220  000df220  0001f220  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000df24c  000df24c  0001f24c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00237ff1  00000000  00000000  0001f250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000201ee  00000000  00000000  00257241  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00047a21  00000000  00000000  0027742f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003940  00000000  00000000  002bee50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bf48  00000000  00000000  002c2790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043429  00000000  00000000  002ce6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00056d65  00000000  00000000  00311b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001480d5  00000000  00000000  00368866  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ab5c  00000000  00000000  004b093c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fac1 	bl	db5b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fae3 	bl	db608 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc20 	.word	0x2003dc20
   d404c:	000def64 	.word	0x000def64
   d4050:	2003dedc 	.word	0x2003dedc
   d4054:	2003dee0 	.word	0x2003dee0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fb25 	bl	da6b0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de5e4 	.word	0x000de5e4
   d4080:	000de618 	.word	0x000de618

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bf6e 	b.w	d5f64 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f9f3 	bl	d5474 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bacf 	b.w	da634 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bd09 	b.w	d8aac <malloc>

000d409a <_Znaj>:
   d409a:	f004 bd07 	b.w	d8aac <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bd0d 	b.w	d8abc <free>

000d40a2 <_ZdaPv>:
   d40a2:	f004 bd0b 	b.w	d8abc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 fbb6 	bl	d8820 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d8551 	.word	0x000d8551

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN18CloudConfigStorage13getDataHeaderEv>:
     * 
     * This is only available in classes derived from CloudConfigStorageData, which is all
     * of them except CloudConfigDataStatic, which is not updateable and therefore does not
     * need the structure.
     */
    virtual CloudConfigDataHeader *getDataHeader() { return 0; };
   d40cc:	2000      	movs	r0, #0
   d40ce:	4770      	bx	lr

000d40d0 <_ZN18CloudConfigStorage4loopEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };

    /**
     * @brief Called from loop(). Optional. Only needed if the storage method wants loop processing time.
     */
    virtual void loop() {};
   d40d0:	4770      	bx	lr

000d40d2 <_ZN18CloudConfigStorage10updateDataEPKc>:
     * 
     * @param json The new JSON data to save
     * 
     * This is subclassed in CloudConfigStorageData.
     */
    virtual bool updateData(const char *json) { return false; };
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr

000d40d6 <_ZN22CloudConfigStorageData13getDataHeaderEv>:
    CloudConfigStorageData &withData(CloudConfigDataHeader *header, size_t dataSize);

    /**
     * @brief Gets a pointer to the CloudConfigDataHeader structure
     */
    virtual CloudConfigDataHeader *getDataHeader() { return header; };
   d40d6:	6900      	ldr	r0, [r0, #16]
   d40d8:	4770      	bx	lr

000d40da <_ZN26CloudConfigStorageRetained4saveEv>:
    virtual void setup() { validate(); };

    /**
     * @brief Retained data doesn't require an explict save
     */
    virtual bool save() { return true; };
   d40da:	2001      	movs	r0, #1
   d40dc:	4770      	bx	lr
	...

000d40e0 <_Z11watchdogISRv>:
  fram.put(FRAM::sensorConstantsAddr,sensorConstants);
}

void watchdogISR()
{
  watchdogFlag = true;
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z11watchdogISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e5f5 	.word	0x2003e5f5

000d40ec <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ec:	6803      	ldr	r3, [r0, #0]
   d40ee:	4718      	bx	r3

000d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f0:	2a01      	cmp	r2, #1
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f4:	2a02      	cmp	r2, #2
   d40f6:	d003      	beq.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f8:	2000      	movs	r0, #0
   d40fa:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40fc:	6001      	str	r1, [r0, #0]
	      break;
   d40fe:	e7fb      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4100:	680b      	ldr	r3, [r1, #0]
   d4102:	6003      	str	r3, [r0, #0]
	}
   d4104:	e7f8      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  switch (__op)
   d4106:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4108:	bf08      	it	eq
   d410a:	6001      	streq	r1, [r0, #0]
	}
   d410c:	2000      	movs	r0, #0
   d410e:	4770      	bx	lr

000d4110 <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
	    std::forward<_ArgTypes>(__args)...);
      }
   d4110:	4770      	bx	lr

000d4112 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlPKcE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d4112:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4114:	bf08      	it	eq
   d4116:	6001      	streq	r1, [r0, #0]
	}
   d4118:	2000      	movs	r0, #0
   d411a:	4770      	bx	lr

000d411c <_ZN26CloudConfigStorageRetained5setupEv>:
    virtual void setup() { validate(); };
   d411c:	f002 bb84 	b.w	d6828 <_ZN22CloudConfigStorageData8validateEv>

000d4120 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z10measureNow6String+0x14>)
   d4124:	f005 feb0 	bl	d9e88 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4128:	b118      	cbz	r0, d4132 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d412a:	4b03      	ldr	r3, [pc, #12]	; (d4138 <_Z10measureNow6String+0x18>)
   d412c:	2203      	movs	r2, #3
   d412e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dd4ab 	.word	0x000dd4ab
   d4138:	2003e5bd 	.word	0x2003e5bd

000d413c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d413c:	b510      	push	{r4, lr}
   d413e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	220a      	movs	r2, #10
   d4144:	a901      	add	r1, sp, #4
   d4146:	f008 f993 	bl	dc470 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d414a:	1e43      	subs	r3, r0, #1
   d414c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d414e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4150:	d831      	bhi.n	d41b6 <_Z12enableSensor6String+0x7a>
 
  if (tempSensor == 1){
   d4152:	2801      	cmp	r0, #1
   d4154:	d10a      	bne.n	d416c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d4156:	4b19      	ldr	r3, [pc, #100]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d4158:	4919      	ldr	r1, [pc, #100]	; (d41c0 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorOneConnected = true;
   d415a:	7718      	strb	r0, [r3, #28]
    sysStatusWriteNeeded = true;    
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d415c:	a802      	add	r0, sp, #8
   d415e:	f007 fa89 	bl	db674 <strcpy>
    sysStatusWriteNeeded = true; 
   d4162:	4b18      	ldr	r3, [pc, #96]	; (d41c4 <_Z12enableSensor6String+0x88>)
   d4164:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d4166:	4620      	mov	r0, r4
   d4168:	b042      	add	sp, #264	; 0x108
   d416a:	bd10      	pop	{r4, pc}
  } else if (tempSensor == 2){
   d416c:	2802      	cmp	r0, #2
   d416e:	d104      	bne.n	d417a <_Z12enableSensor6String+0x3e>
    sysStatus.sensorTwoConnected = true;
   d4170:	4b12      	ldr	r3, [pc, #72]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4172:	4915      	ldr	r1, [pc, #84]	; (d41c8 <_Z12enableSensor6String+0x8c>)
    sysStatus.sensorTwoConnected = true;
   d4174:	2401      	movs	r4, #1
   d4176:	775c      	strb	r4, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4178:	e7f0      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 3){
   d417a:	2803      	cmp	r0, #3
   d417c:	d104      	bne.n	d4188 <_Z12enableSensor6String+0x4c>
    sysStatus.sensorThreeConnected = true;
   d417e:	4b0f      	ldr	r3, [pc, #60]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4180:	4912      	ldr	r1, [pc, #72]	; (d41cc <_Z12enableSensor6String+0x90>)
    sysStatus.sensorThreeConnected = true;
   d4182:	2401      	movs	r4, #1
   d4184:	779c      	strb	r4, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4186:	e7e9      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 4){
   d4188:	2804      	cmp	r0, #4
   d418a:	d104      	bne.n	d4196 <_Z12enableSensor6String+0x5a>
    sysStatus.sensorFourConnected = true;
   d418c:	4b0b      	ldr	r3, [pc, #44]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d418e:	4910      	ldr	r1, [pc, #64]	; (d41d0 <_Z12enableSensor6String+0x94>)
    sysStatus.sensorFourConnected = true;
   d4190:	2401      	movs	r4, #1
   d4192:	77dc      	strb	r4, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4194:	e7e2      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 5){
   d4196:	2805      	cmp	r0, #5
   d4198:	d105      	bne.n	d41a6 <_Z12enableSensor6String+0x6a>
    sysStatus.sensorFiveConnected = true;
   d419a:	4b08      	ldr	r3, [pc, #32]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d419c:	490d      	ldr	r1, [pc, #52]	; (d41d4 <_Z12enableSensor6String+0x98>)
    sysStatus.sensorFiveConnected = true;
   d419e:	2401      	movs	r4, #1
   d41a0:	f883 4020 	strb.w	r4, [r3, #32]
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d41a4:	e7da      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 6){
   d41a6:	2806      	cmp	r0, #6
   d41a8:	d105      	bne.n	d41b6 <_Z12enableSensor6String+0x7a>
    sysStatus.sensorSixConnected = true;
   d41aa:	4b04      	ldr	r3, [pc, #16]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41ac:	490a      	ldr	r1, [pc, #40]	; (d41d8 <_Z12enableSensor6String+0x9c>)
    sysStatus.sensorSixConnected = true;
   d41ae:	2401      	movs	r4, #1
   d41b0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41b4:	e7d2      	b.n	d415c <_Z12enableSensor6String+0x20>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41b6:	2400      	movs	r4, #0
   d41b8:	e7d5      	b.n	d4166 <_Z12enableSensor6String+0x2a>
   d41ba:	bf00      	nop
   d41bc:	2003e5c0 	.word	0x2003e5c0
   d41c0:	000dd4ad 	.word	0x000dd4ad
   d41c4:	2003e5f4 	.word	0x2003e5f4
   d41c8:	000dd4c0 	.word	0x000dd4c0
   d41cc:	000dd4d3 	.word	0x000dd4d3
   d41d0:	000dd4e8 	.word	0x000dd4e8
   d41d4:	000dd4fc 	.word	0x000dd4fc
   d41d8:	000dd510 	.word	0x000dd510

000d41dc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41dc:	6943      	ldr	r3, [r0, #20]
   d41de:	b113      	cbz	r3, d41e6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41e0:	6983      	ldr	r3, [r0, #24]
   d41e2:	300c      	adds	r0, #12
   d41e4:	4718      	bx	r3
            callback();
        }
    }
   d41e6:	4770      	bx	lr

000d41e8 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4b03      	ldr	r3, [pc, #12]	; (d41f8 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41ec:	6003      	str	r3, [r0, #0]
   d41ee:	4604      	mov	r4, r0
   d41f0:	f003 fee0 	bl	d7fb4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	000ddc1c 	.word	0x000ddc1c

000d41fc <_ZN17PublishQueueAsyncD0Ev>:
   d41fc:	b510      	push	{r4, lr}
   d41fe:	4604      	mov	r4, r0
   d4200:	f7ff fff2 	bl	d41e8 <_ZN17PublishQueueAsyncD1Ev>
   d4204:	4620      	mov	r0, r4
   d4206:	2138      	movs	r1, #56	; 0x38
   d4208:	f006 fb61 	bl	da8ce <_ZdlPvj>
   d420c:	4620      	mov	r0, r4
   d420e:	bd10      	pop	{r4, pc}

000d4210 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4210:	b510      	push	{r4, lr}
   d4212:	4b03      	ldr	r3, [pc, #12]	; (d4220 <_ZN8MB85RC64D1Ev+0x10>)
   d4214:	6003      	str	r3, [r0, #0]
   d4216:	4604      	mov	r4, r0
   d4218:	f003 f8fc 	bl	d7414 <_ZN6MB85RCD1Ev>
   d421c:	4620      	mov	r0, r4
   d421e:	bd10      	pop	{r4, pc}
   d4220:	000ddc44 	.word	0x000ddc44

000d4224 <_ZN8MB85RC64D0Ev>:
   d4224:	b510      	push	{r4, lr}
   d4226:	4604      	mov	r4, r0
   d4228:	f7ff fff2 	bl	d4210 <_ZN8MB85RC64D1Ev>
   d422c:	4620      	mov	r0, r4
   d422e:	2110      	movs	r1, #16
   d4230:	f006 fb4d 	bl	da8ce <_ZdlPvj>
   d4234:	4620      	mov	r0, r4
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4238:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d423a:	2100      	movs	r1, #0
   d423c:	4604      	mov	r4, r0
   d423e:	4608      	mov	r0, r1
   d4240:	f004 f90e 	bl	d8460 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4244:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4246:	4620      	mov	r0, r4
   d4248:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d424a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d424c:	f004 f920 	bl	d8490 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4250:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4252:	b10c      	cbz	r4, d4258 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4254:	2301      	movs	r3, #1
   d4256:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4258:	2100      	movs	r1, #0
   d425a:	2001      	movs	r0, #1
   d425c:	f004 f900 	bl	d8460 <os_thread_scheduling>
            }
        }
        if (t) {
   d4260:	b12c      	cbz	r4, d426e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4262:	6823      	ldr	r3, [r4, #0]
   d4264:	4620      	mov	r0, r4
   d4266:	689b      	ldr	r3, [r3, #8]
   d4268:	4798      	blx	r3
            t->running = false;
   d426a:	2300      	movs	r3, #0
   d426c:	7123      	strb	r3, [r4, #4]
        }
    }
   d426e:	b002      	add	sp, #8
   d4270:	bd10      	pop	{r4, pc}

000d4272 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4272:	b510      	push	{r4, lr}
   d4274:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4276:	6800      	ldr	r0, [r0, #0]
   d4278:	b108      	cbz	r0, d427e <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d427a:	f004 fc1f 	bl	d8abc <free>
class SystemClass {
   d427e:	4620      	mov	r0, r4
   d4280:	bd10      	pop	{r4, pc}

000d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4282:	2300      	movs	r3, #0
   d4284:	2204      	movs	r2, #4
   d4286:	f004 bb49 	b.w	d891c <spark_variable>

000d428a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d428a:	b510      	push	{r4, lr}
      if (_M_manager)
   d428c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d428e:	4604      	mov	r4, r0
      if (_M_manager)
   d4290:	b113      	cbz	r3, d4298 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4292:	2203      	movs	r2, #3
   d4294:	4601      	mov	r1, r0
   d4296:	4798      	blx	r3
    }
   d4298:	4620      	mov	r0, r4
   d429a:	bd10      	pop	{r4, pc}

000d429c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d429e:	4b13      	ldr	r3, [pc, #76]	; (d42ec <_ZN5TimerD1Ev+0x50>)
   d42a0:	6003      	str	r3, [r0, #0]
   d42a2:	4604      	mov	r4, r0
        if (handle) {
   d42a4:	6880      	ldr	r0, [r0, #8]
   d42a6:	b1c8      	cbz	r0, d42dc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42a8:	2500      	movs	r5, #0
   d42aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42ae:	e9cd 3500 	strd	r3, r5, [sp]
   d42b2:	2102      	movs	r1, #2
   d42b4:	462b      	mov	r3, r5
   d42b6:	462a      	mov	r2, r5
   d42b8:	f004 f8f2 	bl	d84a0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42bc:	68a0      	ldr	r0, [r4, #8]
   d42be:	4629      	mov	r1, r5
   d42c0:	f004 f926 	bl	d8510 <os_timer_set_id>
            while (running) {
   d42c4:	7923      	ldrb	r3, [r4, #4]
   d42c6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42ca:	b113      	cbz	r3, d42d2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42cc:	f004 f8c0 	bl	d8450 <os_thread_yield>
            while (running) {
   d42d0:	e7f8      	b.n	d42c4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42d2:	68a0      	ldr	r0, [r4, #8]
   d42d4:	4629      	mov	r1, r5
   d42d6:	f004 f8d3 	bl	d8480 <os_timer_destroy>
            handle = nullptr;
   d42da:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42dc:	f104 000c 	add.w	r0, r4, #12
   d42e0:	f7ff ffd3 	bl	d428a <_ZNSt14_Function_baseD1Ev>
    }
   d42e4:	4620      	mov	r0, r4
   d42e6:	b003      	add	sp, #12
   d42e8:	bd30      	pop	{r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	000ddc08 	.word	0x000ddc08

000d42f0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d42f0:	b510      	push	{r4, lr}
   d42f2:	4604      	mov	r4, r0
    }
   d42f4:	f7ff ffd2 	bl	d429c <_ZN5TimerD1Ev>
   d42f8:	4620      	mov	r0, r4
   d42fa:	211c      	movs	r1, #28
   d42fc:	f006 fae7 	bl	da8ce <_ZdlPvj>
   d4300:	4620      	mov	r0, r4
   d4302:	bd10      	pop	{r4, pc}

000d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4304:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4306:	4801      	ldr	r0, [pc, #4]	; (d430c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4308:	f004 bcdd 	b.w	d8cc6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d430c:	000d8c7f 	.word	0x000d8c7f

000d4310 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4310:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4312:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4314:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4316:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d431a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d431e:	2201      	movs	r2, #1
   d4320:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4322:	4341      	muls	r1, r0
   d4324:	466a      	mov	r2, sp
   d4326:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4328:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d432c:	f004 fb4e 	bl	d89cc <spark_set_connection_property>
    }
   d4330:	b003      	add	sp, #12
   d4332:	f85d fb04 	ldr.w	pc, [sp], #4

000d4336 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4336:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4338:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d433a:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d433c:	2100      	movs	r1, #0
   d433e:	b140      	cbz	r0, d4352 <_ZN5Timer12changePeriodEjj+0x1c>
   d4340:	e9cd 2100 	strd	r2, r1, [sp]
   d4344:	460a      	mov	r2, r1
   d4346:	2103      	movs	r1, #3
   d4348:	f004 f8aa 	bl	d84a0 <os_timer_change>
   d434c:	fab0 f080 	clz	r0, r0
   d4350:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4352:	b003      	add	sp, #12
   d4354:	f85d fb04 	ldr.w	pc, [sp], #4

000d4358 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4358:	b513      	push	{r0, r1, r4, lr}
   d435a:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d435c:	4608      	mov	r0, r1
   d435e:	9101      	str	r1, [sp, #4]
   d4360:	f007 f9ad 	bl	db6be <strlen>
   d4364:	9901      	ldr	r1, [sp, #4]
   d4366:	4602      	mov	r2, r0
   d4368:	4620      	mov	r0, r4
}
   d436a:	b002      	add	sp, #8
   d436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d4370:	f005 bb3c 	b.w	d99ec <_ZN5spark10JSONWriter4nameEPKcj>

000d4374 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4374:	b513      	push	{r0, r1, r4, lr}
   d4376:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4378:	4608      	mov	r0, r1
   d437a:	9101      	str	r1, [sp, #4]
   d437c:	f007 f99f 	bl	db6be <strlen>
   d4380:	9901      	ldr	r1, [sp, #4]
   d4382:	4602      	mov	r2, r0
   d4384:	4620      	mov	r0, r4
}
   d4386:	b002      	add	sp, #8
   d4388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d438c:	f005 bb3e 	b.w	d9a0c <_ZN5spark10JSONWriter5valueEPKcj>

000d4390 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4390:	b40e      	push	{r1, r2, r3}
   d4392:	b510      	push	{r4, lr}
   d4394:	b08d      	sub	sp, #52	; 0x34
   d4396:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4398:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d439a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d439e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d43a0:	2300      	movs	r3, #0
   d43a2:	2020      	movs	r0, #32
   d43a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d43a8:	e9cd 4200 	strd	r4, r2, [sp]
   d43ac:	201e      	movs	r0, #30
   d43ae:	aa04      	add	r2, sp, #16
   d43b0:	f004 fa4e 	bl	d8850 <log_message_v>
}
   d43b4:	b00d      	add	sp, #52	; 0x34
   d43b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d43ba:	b003      	add	sp, #12
   d43bc:	4770      	bx	lr

000d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43be:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43c0:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43c2:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43c6:	f88d 3000 	strb.w	r3, [sp]
   d43ca:	f88d 5004 	strb.w	r5, [sp, #4]
   d43ce:	68e4      	ldr	r4, [r4, #12]
   d43d0:	233c      	movs	r3, #60	; 0x3c
   d43d2:	47a0      	blx	r4
	}
   d43d4:	b003      	add	sp, #12
   d43d6:	bd30      	pop	{r4, r5, pc}

000d43d8 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d43da:	780d      	ldrb	r5, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43dc:	b097      	sub	sp, #92	; 0x5c
   d43de:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d43e0:	bb25      	cbnz	r5, d442c <_Z14UbidotsHandlerPKcS0_+0x54>
    snprintf(responseString, sizeof(responseString),"No Data");
   d43e2:	4944      	ldr	r1, [pc, #272]	; (d44f4 <_Z14UbidotsHandlerPKcS0_+0x11c>)
   d43e4:	a806      	add	r0, sp, #24
   d43e6:	f007 f945 	bl	db674 <strcpy>
    if (sysStatus.verboseMode){
   d43ea:	4b43      	ldr	r3, [pc, #268]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0x120>)
   d43ec:	7a5b      	ldrb	r3, [r3, #9]
   d43ee:	2b00      	cmp	r3, #0
   d43f0:	d04e      	beq.n	d4490 <_Z14UbidotsHandlerPKcS0_+0xb8>
      publishQueue.publish("Response Event",responseString,PRIVATE);
   d43f2:	4e42      	ldr	r6, [pc, #264]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x124>)
   d43f4:	f88d 5000 	strb.w	r5, [sp]
   d43f8:	7833      	ldrb	r3, [r6, #0]
   d43fa:	4941      	ldr	r1, [pc, #260]	; (d4500 <_Z14UbidotsHandlerPKcS0_+0x128>)
   d43fc:	4841      	ldr	r0, [pc, #260]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x12c>)
   d43fe:	aa06      	add	r2, sp, #24
   d4400:	f7ff ffdd 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      publishQueue.publish("Response Code",String(atoi(data)),PRIVATE);
   d4404:	4620      	mov	r0, r4
   d4406:	f007 f8b2 	bl	db56e <atoi>
   d440a:	220a      	movs	r2, #10
   d440c:	4601      	mov	r1, r0
   d440e:	a802      	add	r0, sp, #8
   d4410:	f005 fd27 	bl	d9e62 <_ZN6StringC1Eih>
   d4414:	f88d 5000 	strb.w	r5, [sp]
   d4418:	7833      	ldrb	r3, [r6, #0]
      publishQueue.publish("Response Code",String(atoi(data)),PRIVATE);
   d441a:	9a02      	ldr	r2, [sp, #8]
   d441c:	493a      	ldr	r1, [pc, #232]	; (d4508 <_Z14UbidotsHandlerPKcS0_+0x130>)
   d441e:	4839      	ldr	r0, [pc, #228]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x12c>)
   d4420:	f7ff ffcd 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4424:	a802      	add	r0, sp, #8
   d4426:	f005 fc91 	bl	d9d4c <_ZN6StringD1Ev>
}
   d442a:	e031      	b.n	d4490 <_Z14UbidotsHandlerPKcS0_+0xb8>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d442c:	4608      	mov	r0, r1
   d442e:	f007 f89e 	bl	db56e <atoi>
   d4432:	28c8      	cmp	r0, #200	; 0xc8
   d4434:	d12e      	bne.n	d4494 <_Z14UbidotsHandlerPKcS0_+0xbc>
    if (sysStatus.verboseMode){
   d4436:	4d30      	ldr	r5, [pc, #192]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0x120>)
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4438:	4934      	ldr	r1, [pc, #208]	; (d450c <_Z14UbidotsHandlerPKcS0_+0x134>)
   d443a:	a806      	add	r0, sp, #24
   d443c:	f007 f91a 	bl	db674 <strcpy>
    if (sysStatus.verboseMode){
   d4440:	7a6a      	ldrb	r2, [r5, #9]
   d4442:	b1e2      	cbz	r2, d447e <_Z14UbidotsHandlerPKcS0_+0xa6>
      publishQueue.publish("Response Event",responseString,PRIVATE);
   d4444:	4e2d      	ldr	r6, [pc, #180]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x124>)
   d4446:	492e      	ldr	r1, [pc, #184]	; (d4500 <_Z14UbidotsHandlerPKcS0_+0x128>)
   d4448:	482e      	ldr	r0, [pc, #184]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x12c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d444a:	2700      	movs	r7, #0
   d444c:	f88d 7000 	strb.w	r7, [sp]
   d4450:	7833      	ldrb	r3, [r6, #0]
   d4452:	aa06      	add	r2, sp, #24
   d4454:	f7ff ffb3 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      publishQueue.publish("Response Code",String(atoi(data)),PRIVATE);
   d4458:	4620      	mov	r0, r4
   d445a:	f007 f888 	bl	db56e <atoi>
   d445e:	220a      	movs	r2, #10
   d4460:	4601      	mov	r1, r0
   d4462:	a802      	add	r0, sp, #8
   d4464:	f005 fcfd 	bl	d9e62 <_ZN6StringC1Eih>
   d4468:	f88d 7000 	strb.w	r7, [sp]
   d446c:	7833      	ldrb	r3, [r6, #0]
   d446e:	9a02      	ldr	r2, [sp, #8]
   d4470:	4925      	ldr	r1, [pc, #148]	; (d4508 <_Z14UbidotsHandlerPKcS0_+0x130>)
   d4472:	4824      	ldr	r0, [pc, #144]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x12c>)
   d4474:	f7ff ffa3 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4478:	a802      	add	r0, sp, #8
   d447a:	f005 fc67 	bl	d9d4c <_ZN6StringD1Ev>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d447e:	f005 fef2 	bl	da266 <_ZN9TimeClass3nowEv>
    sysStatusWriteNeeded = true;
   d4482:	4b23      	ldr	r3, [pc, #140]	; (d4510 <_Z14UbidotsHandlerPKcS0_+0x138>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4484:	61a8      	str	r0, [r5, #24]
    sysStatusWriteNeeded = true;
   d4486:	2201      	movs	r2, #1
   d4488:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d448a:	4b22      	ldr	r3, [pc, #136]	; (d4514 <_Z14UbidotsHandlerPKcS0_+0x13c>)
   d448c:	2200      	movs	r2, #0
   d448e:	701a      	strb	r2, [r3, #0]
}
   d4490:	b017      	add	sp, #92	; 0x5c
   d4492:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4494:	4620      	mov	r0, r4
   d4496:	f007 f86a 	bl	db56e <atoi>
   d449a:	28c9      	cmp	r0, #201	; 0xc9
   d449c:	d0cb      	beq.n	d4436 <_Z14UbidotsHandlerPKcS0_+0x5e>
  else if((atoi(data)) < 10000){
   d449e:	4620      	mov	r0, r4
   d44a0:	f007 f865 	bl	db56e <atoi>
   d44a4:	f242 730f 	movw	r3, #9999	; 0x270f
   d44a8:	4298      	cmp	r0, r3
   d44aa:	dcf1      	bgt.n	d4490 <_Z14UbidotsHandlerPKcS0_+0xb8>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d44ac:	4620      	mov	r0, r4
   d44ae:	f007 f85e 	bl	db56e <atoi>
   d44b2:	4a19      	ldr	r2, [pc, #100]	; (d4518 <_Z14UbidotsHandlerPKcS0_+0x140>)
   d44b4:	4603      	mov	r3, r0
   d44b6:	2140      	movs	r1, #64	; 0x40
   d44b8:	a806      	add	r0, sp, #24
   d44ba:	f004 fb17 	bl	d8aec <snprintf>
    if (sysStatus.verboseMode){
   d44be:	4b0e      	ldr	r3, [pc, #56]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0x120>)
   d44c0:	7a5b      	ldrb	r3, [r3, #9]
   d44c2:	2b00      	cmp	r3, #0
   d44c4:	d0e4      	beq.n	d4490 <_Z14UbidotsHandlerPKcS0_+0xb8>
      publishQueue.publish("Response Event",responseString,PRIVATE);
   d44c6:	4d0d      	ldr	r5, [pc, #52]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x124>)
   d44c8:	490d      	ldr	r1, [pc, #52]	; (d4500 <_Z14UbidotsHandlerPKcS0_+0x128>)
   d44ca:	480e      	ldr	r0, [pc, #56]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x12c>)
   d44cc:	2600      	movs	r6, #0
   d44ce:	f88d 6000 	strb.w	r6, [sp]
   d44d2:	782b      	ldrb	r3, [r5, #0]
   d44d4:	aa06      	add	r2, sp, #24
   d44d6:	f7ff ff72 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      publishQueue.publish("Response Code",String(atoi(data)),PRIVATE);
   d44da:	4620      	mov	r0, r4
   d44dc:	f007 f847 	bl	db56e <atoi>
   d44e0:	220a      	movs	r2, #10
   d44e2:	4601      	mov	r1, r0
   d44e4:	a802      	add	r0, sp, #8
   d44e6:	f005 fcbc 	bl	d9e62 <_ZN6StringC1Eih>
   d44ea:	f88d 6000 	strb.w	r6, [sp]
   d44ee:	782b      	ldrb	r3, [r5, #0]
   d44f0:	e793      	b.n	d441a <_Z14UbidotsHandlerPKcS0_+0x42>
   d44f2:	bf00      	nop
   d44f4:	000dd523 	.word	0x000dd523
   d44f8:	2003e5c0 	.word	0x2003e5c0
   d44fc:	2003df2d 	.word	0x2003df2d
   d4500:	000dd52b 	.word	0x000dd52b
   d4504:	2003e3d8 	.word	0x2003e3d8
   d4508:	000dd53a 	.word	0x000dd53a
   d450c:	000dd548 	.word	0x000dd548
   d4510:	2003e5f4 	.word	0x2003e5f4
   d4514:	2003df55 	.word	0x2003df55
   d4518:	000dd55a 	.word	0x000dd55a

000d451c <_Z16setThirdPartySim6String>:
{
   d451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d451e:	491c      	ldr	r1, [pc, #112]	; (d4590 <_Z16setThirdPartySim6String+0x74>)
   d4520:	4605      	mov	r5, r0
   d4522:	f005 fcb1 	bl	d9e88 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4526:	4604      	mov	r4, r0
   d4528:	b300      	cbz	r0, d456c <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d452a:	4c1a      	ldr	r4, [pc, #104]	; (d4594 <_Z16setThirdPartySim6String+0x78>)
   d452c:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d452e:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4530:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4532:	f7ff feed 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4536:	6863      	ldr	r3, [r4, #4]
   d4538:	4817      	ldr	r0, [pc, #92]	; (d4598 <_Z16setThirdPartySim6String+0x7c>)
   d453a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d453e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4542:	4359      	muls	r1, r3
   d4544:	f7ff fef7 	bl	d4336 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4548:	f004 fa08 	bl	d895c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d454c:	b148      	cbz	r0, d4562 <_Z16setThirdPartySim6String+0x46>
   d454e:	2300      	movs	r3, #0
   d4550:	f88d 3000 	strb.w	r3, [sp]
   d4554:	4b11      	ldr	r3, [pc, #68]	; (d459c <_Z16setThirdPartySim6String+0x80>)
   d4556:	4a12      	ldr	r2, [pc, #72]	; (d45a0 <_Z16setThirdPartySim6String+0x84>)
   d4558:	781b      	ldrb	r3, [r3, #0]
   d455a:	4912      	ldr	r1, [pc, #72]	; (d45a4 <_Z16setThirdPartySim6String+0x88>)
   d455c:	4812      	ldr	r0, [pc, #72]	; (d45a8 <_Z16setThirdPartySim6String+0x8c>)
   d455e:	f7ff ff2e 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4562:	4b12      	ldr	r3, [pc, #72]	; (d45ac <_Z16setThirdPartySim6String+0x90>)
   d4564:	2001      	movs	r0, #1
   d4566:	7018      	strb	r0, [r3, #0]
}
   d4568:	b003      	add	sp, #12
   d456a:	bd30      	pop	{r4, r5, pc}
   d456c:	4910      	ldr	r1, [pc, #64]	; (d45b0 <_Z16setThirdPartySim6String+0x94>)
   d456e:	4628      	mov	r0, r5
   d4570:	f005 fc8a 	bl	d9e88 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4574:	2800      	cmp	r0, #0
   d4576:	d0f7      	beq.n	d4568 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4578:	4b06      	ldr	r3, [pc, #24]	; (d4594 <_Z16setThirdPartySim6String+0x78>)
   d457a:	705c      	strb	r4, [r3, #1]
   d457c:	f004 f9ee 	bl	d895c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4580:	2800      	cmp	r0, #0
   d4582:	d0ee      	beq.n	d4562 <_Z16setThirdPartySim6String+0x46>
   d4584:	4b05      	ldr	r3, [pc, #20]	; (d459c <_Z16setThirdPartySim6String+0x80>)
   d4586:	f88d 4000 	strb.w	r4, [sp]
   d458a:	781b      	ldrb	r3, [r3, #0]
   d458c:	4a09      	ldr	r2, [pc, #36]	; (d45b4 <_Z16setThirdPartySim6String+0x98>)
   d458e:	e7e4      	b.n	d455a <_Z16setThirdPartySim6String+0x3e>
   d4590:	000dd4ab 	.word	0x000dd4ab
   d4594:	2003e5c0 	.word	0x2003e5c0
   d4598:	2003e3b8 	.word	0x2003e3b8
   d459c:	2003df2d 	.word	0x2003df2d
   d45a0:	000dd577 	.word	0x000dd577
   d45a4:	000dd607 	.word	0x000dd607
   d45a8:	2003e3d8 	.word	0x2003e3d8
   d45ac:	2003e5f4 	.word	0x2003e5f4
   d45b0:	000de1ba 	.word	0x000de1ba
   d45b4:	000dd58c 	.word	0x000dd58c

000d45b8 <_Z12setKeepAlive6String>:
{
   d45b8:	b510      	push	{r4, lr}
   d45ba:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d45bc:	6800      	ldr	r0, [r0, #0]
   d45be:	220a      	movs	r2, #10
   d45c0:	a903      	add	r1, sp, #12
   d45c2:	f007 ff55 	bl	dc470 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d45c6:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d45ca:	d822      	bhi.n	d4612 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d45cc:	4c12      	ldr	r4, [pc, #72]	; (d4618 <_Z12setKeepAlive6String+0x60>)
   d45ce:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d45d0:	f7ff fe9e 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d45d4:	6863      	ldr	r3, [r4, #4]
   d45d6:	4811      	ldr	r0, [pc, #68]	; (d461c <_Z12setKeepAlive6String+0x64>)
   d45d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d45dc:	4359      	muls	r1, r3
   d45de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d45e2:	f7ff fea8 	bl	d4336 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d45e6:	6863      	ldr	r3, [r4, #4]
   d45e8:	4a0d      	ldr	r2, [pc, #52]	; (d4620 <_Z12setKeepAlive6String+0x68>)
   d45ea:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45ee:	a804      	add	r0, sp, #16
   d45f0:	f004 fa7c 	bl	d8aec <snprintf>
   d45f4:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d45f6:	f88d 3000 	strb.w	r3, [sp]
   d45fa:	4b0a      	ldr	r3, [pc, #40]	; (d4624 <_Z12setKeepAlive6String+0x6c>)
   d45fc:	490a      	ldr	r1, [pc, #40]	; (d4628 <_Z12setKeepAlive6String+0x70>)
   d45fe:	781b      	ldrb	r3, [r3, #0]
   d4600:	480a      	ldr	r0, [pc, #40]	; (d462c <_Z12setKeepAlive6String+0x74>)
   d4602:	aa04      	add	r2, sp, #16
   d4604:	f7ff fedb 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4608:	4b09      	ldr	r3, [pc, #36]	; (d4630 <_Z12setKeepAlive6String+0x78>)
   d460a:	2001      	movs	r0, #1
   d460c:	7018      	strb	r0, [r3, #0]
}
   d460e:	b044      	add	sp, #272	; 0x110
   d4610:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4612:	2000      	movs	r0, #0
   d4614:	e7fb      	b.n	d460e <_Z12setKeepAlive6String+0x56>
   d4616:	bf00      	nop
   d4618:	2003e5c0 	.word	0x2003e5c0
   d461c:	2003e3b8 	.word	0x2003e3b8
   d4620:	000dd5a0 	.word	0x000dd5a0
   d4624:	2003df2d 	.word	0x2003df2d
   d4628:	000dd5b9 	.word	0x000dd5b9
   d462c:	2003e3d8 	.word	0x2003e3d8
   d4630:	2003e5f4 	.word	0x2003e5f4

000d4634 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d4634:	b500      	push	{lr}
   d4636:	b089      	sub	sp, #36	; 0x24
   d4638:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d463a:	f005 fc4f 	bl	d9edc <_ZNK6String7toFloatEv>
   d463e:	4b0e      	ldr	r3, [pc, #56]	; (d4678 <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4640:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d4642:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4646:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d4648:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d464c:	f005 fbec 	bl	d9e28 <_ZN6StringC1ERKS_>
   d4650:	2300      	movs	r3, #0
   d4652:	f88d 3000 	strb.w	r3, [sp]
   d4656:	4b09      	ldr	r3, [pc, #36]	; (d467c <_Z20setReportingDuration6String+0x48>)
   d4658:	9a04      	ldr	r2, [sp, #16]
   d465a:	781b      	ldrb	r3, [r3, #0]
   d465c:	4908      	ldr	r1, [pc, #32]	; (d4680 <_Z20setReportingDuration6String+0x4c>)
   d465e:	4809      	ldr	r0, [pc, #36]	; (d4684 <_Z20setReportingDuration6String+0x50>)
   d4660:	f7ff fead 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4664:	a804      	add	r0, sp, #16
   d4666:	f005 fb71 	bl	d9d4c <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d466a:	4b07      	ldr	r3, [pc, #28]	; (d4688 <_Z20setReportingDuration6String+0x54>)
   d466c:	2001      	movs	r0, #1
   d466e:	7018      	strb	r0, [r3, #0]
}
   d4670:	b009      	add	sp, #36	; 0x24
   d4672:	f85d fb04 	ldr.w	pc, [sp], #4
   d4676:	bf00      	nop
   d4678:	2003e5c0 	.word	0x2003e5c0
   d467c:	2003df2d 	.word	0x2003df2d
   d4680:	000dd5c4 	.word	0x000dd5c4
   d4684:	2003e3d8 	.word	0x2003e3d8
   d4688:	2003e5f4 	.word	0x2003e5f4

000d468c <_Z14setVerboseMode6String>:
{
   d468c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d468e:	4916      	ldr	r1, [pc, #88]	; (d46e8 <_Z14setVerboseMode6String+0x5c>)
   d4690:	4605      	mov	r5, r0
   d4692:	f005 fbf9 	bl	d9e88 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4696:	4604      	mov	r4, r0
   d4698:	b188      	cbz	r0, d46be <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d469a:	4b14      	ldr	r3, [pc, #80]	; (d46ec <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d469c:	4a14      	ldr	r2, [pc, #80]	; (d46f0 <_Z14setVerboseMode6String+0x64>)
   d469e:	4915      	ldr	r1, [pc, #84]	; (d46f4 <_Z14setVerboseMode6String+0x68>)
   d46a0:	4815      	ldr	r0, [pc, #84]	; (d46f8 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d46a2:	2401      	movs	r4, #1
   d46a4:	725c      	strb	r4, [r3, #9]
   d46a6:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d46a8:	f88d 3000 	strb.w	r3, [sp]
   d46ac:	4b13      	ldr	r3, [pc, #76]	; (d46fc <_Z14setVerboseMode6String+0x70>)
   d46ae:	781b      	ldrb	r3, [r3, #0]
   d46b0:	f7ff fe85 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d46b4:	4b12      	ldr	r3, [pc, #72]	; (d4700 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d46b6:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d46b8:	701c      	strb	r4, [r3, #0]
}
   d46ba:	b003      	add	sp, #12
   d46bc:	bd30      	pop	{r4, r5, pc}
   d46be:	4911      	ldr	r1, [pc, #68]	; (d4704 <_Z14setVerboseMode6String+0x78>)
   d46c0:	4628      	mov	r0, r5
   d46c2:	f005 fbe1 	bl	d9e88 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d46c6:	2800      	cmp	r0, #0
   d46c8:	d0f7      	beq.n	d46ba <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d46ca:	4b08      	ldr	r3, [pc, #32]	; (d46ec <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d46cc:	4a0e      	ldr	r2, [pc, #56]	; (d4708 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d46ce:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d46d0:	4b0a      	ldr	r3, [pc, #40]	; (d46fc <_Z14setVerboseMode6String+0x70>)
   d46d2:	f88d 4000 	strb.w	r4, [sp]
   d46d6:	781b      	ldrb	r3, [r3, #0]
   d46d8:	4906      	ldr	r1, [pc, #24]	; (d46f4 <_Z14setVerboseMode6String+0x68>)
   d46da:	4807      	ldr	r0, [pc, #28]	; (d46f8 <_Z14setVerboseMode6String+0x6c>)
   d46dc:	f7ff fe6f 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d46e0:	4b07      	ldr	r3, [pc, #28]	; (d4700 <_Z14setVerboseMode6String+0x74>)
   d46e2:	2001      	movs	r0, #1
   d46e4:	7018      	strb	r0, [r3, #0]
    return 1;
   d46e6:	e7e8      	b.n	d46ba <_Z14setVerboseMode6String+0x2e>
   d46e8:	000dd4ab 	.word	0x000dd4ab
   d46ec:	2003e5c0 	.word	0x2003e5c0
   d46f0:	000dd5e6 	.word	0x000dd5e6
   d46f4:	000dd607 	.word	0x000dd607
   d46f8:	2003e3d8 	.word	0x2003e3d8
   d46fc:	2003df2d 	.word	0x2003df2d
   d4700:	2003e5f4 	.word	0x2003e5f4
   d4704:	000de1ba 	.word	0x000de1ba
   d4708:	000dd5f7 	.word	0x000dd5f7

000d470c <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d470c:	b530      	push	{r4, r5, lr}
   d470e:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4710:	6800      	ldr	r0, [r0, #0]
   d4712:	220a      	movs	r2, #10
   d4714:	a903      	add	r1, sp, #12
   d4716:	f007 feab 	bl	dc470 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d471a:	1e43      	subs	r3, r0, #1
   d471c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d471e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4720:	f04f 0500 	mov.w	r5, #0
   d4724:	d842      	bhi.n	d47ac <_Z13disableSensor6String+0xa0>
 
  if (tempSensor == 1){
   d4726:	2801      	cmp	r0, #1
   d4728:	d113      	bne.n	d4752 <_Z13disableSensor6String+0x46>
    sysStatus.sensorOneConnected = false;
   d472a:	4b21      	ldr	r3, [pc, #132]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d472c:	4921      	ldr	r1, [pc, #132]	; (d47b4 <_Z13disableSensor6String+0xa8>)
    sysStatus.sensorOneConnected = false;
   d472e:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4730:	a804      	add	r0, sp, #16
   d4732:	f006 ff9f 	bl	db674 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d4736:	4b20      	ldr	r3, [pc, #128]	; (d47b8 <_Z13disableSensor6String+0xac>)
   d4738:	f88d 5000 	strb.w	r5, [sp]
   d473c:	781b      	ldrb	r3, [r3, #0]
   d473e:	491f      	ldr	r1, [pc, #124]	; (d47bc <_Z13disableSensor6String+0xb0>)
   d4740:	481f      	ldr	r0, [pc, #124]	; (d47c0 <_Z13disableSensor6String+0xb4>)
   d4742:	aa04      	add	r2, sp, #16
   d4744:	f7ff fe3b 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
   d4748:	4b1e      	ldr	r3, [pc, #120]	; (d47c4 <_Z13disableSensor6String+0xb8>)
   d474a:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d474c:	4620      	mov	r0, r4
   d474e:	b045      	add	sp, #276	; 0x114
   d4750:	bd30      	pop	{r4, r5, pc}
  } else if (tempSensor == 2){
   d4752:	2802      	cmp	r0, #2
   d4754:	d110      	bne.n	d4778 <_Z13disableSensor6String+0x6c>
    sysStatus.sensorTwoConnected = false;
   d4756:	4b16      	ldr	r3, [pc, #88]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d4758:	491b      	ldr	r1, [pc, #108]	; (d47c8 <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorTwoConnected = false;
   d475a:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d475c:	a804      	add	r0, sp, #16
   d475e:	f006 ff89 	bl	db674 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d4762:	4b15      	ldr	r3, [pc, #84]	; (d47b8 <_Z13disableSensor6String+0xac>)
   d4764:	f88d 5000 	strb.w	r5, [sp]
   d4768:	781b      	ldrb	r3, [r3, #0]
   d476a:	4914      	ldr	r1, [pc, #80]	; (d47bc <_Z13disableSensor6String+0xb0>)
   d476c:	4814      	ldr	r0, [pc, #80]	; (d47c0 <_Z13disableSensor6String+0xb4>)
   d476e:	aa04      	add	r2, sp, #16
   d4770:	f7ff fe25 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d4774:	2401      	movs	r4, #1
   d4776:	e7e7      	b.n	d4748 <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 3){
   d4778:	2803      	cmp	r0, #3
   d477a:	d103      	bne.n	d4784 <_Z13disableSensor6String+0x78>
    sysStatus.sensorThreeConnected = false;
   d477c:	4b0c      	ldr	r3, [pc, #48]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d477e:	4913      	ldr	r1, [pc, #76]	; (d47cc <_Z13disableSensor6String+0xc0>)
    sysStatus.sensorThreeConnected = false;
   d4780:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d4782:	e7eb      	b.n	d475c <_Z13disableSensor6String+0x50>
  else if (tempSensor == 4){
   d4784:	2804      	cmp	r0, #4
   d4786:	d103      	bne.n	d4790 <_Z13disableSensor6String+0x84>
    sysStatus.sensorFourConnected = false;
   d4788:	4b09      	ldr	r3, [pc, #36]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d478a:	4911      	ldr	r1, [pc, #68]	; (d47d0 <_Z13disableSensor6String+0xc4>)
    sysStatus.sensorFourConnected = false;
   d478c:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d478e:	e7e5      	b.n	d475c <_Z13disableSensor6String+0x50>
  else if (tempSensor == 5){
   d4790:	2805      	cmp	r0, #5
   d4792:	d104      	bne.n	d479e <_Z13disableSensor6String+0x92>
    sysStatus.sensorFiveConnected = false;
   d4794:	4b06      	ldr	r3, [pc, #24]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d4796:	490f      	ldr	r1, [pc, #60]	; (d47d4 <_Z13disableSensor6String+0xc8>)
    sysStatus.sensorFiveConnected = false;
   d4798:	f883 5020 	strb.w	r5, [r3, #32]
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d479c:	e7de      	b.n	d475c <_Z13disableSensor6String+0x50>
  else if (tempSensor == 6){
   d479e:	2806      	cmp	r0, #6
   d47a0:	d104      	bne.n	d47ac <_Z13disableSensor6String+0xa0>
    sysStatus.sensorSixConnected = false;
   d47a2:	4b03      	ldr	r3, [pc, #12]	; (d47b0 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d47a4:	490c      	ldr	r1, [pc, #48]	; (d47d8 <_Z13disableSensor6String+0xcc>)
    sysStatus.sensorSixConnected = false;
   d47a6:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d47aa:	e7d7      	b.n	d475c <_Z13disableSensor6String+0x50>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d47ac:	462c      	mov	r4, r5
   d47ae:	e7cd      	b.n	d474c <_Z13disableSensor6String+0x40>
   d47b0:	2003e5c0 	.word	0x2003e5c0
   d47b4:	000dd60c 	.word	0x000dd60c
   d47b8:	2003df2d 	.word	0x2003df2d
   d47bc:	000dd620 	.word	0x000dd620
   d47c0:	2003e3d8 	.word	0x2003e3d8
   d47c4:	2003e5f4 	.word	0x2003e5f4
   d47c8:	000dd62e 	.word	0x000dd62e
   d47cc:	000dd642 	.word	0x000dd642
   d47d0:	000dd658 	.word	0x000dd658
   d47d4:	000dd66d 	.word	0x000dd66d
   d47d8:	000dd682 	.word	0x000dd682

000d47dc <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d47dc:	b500      	push	{lr}
   d47de:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d47e0:	6800      	ldr	r0, [r0, #0]
   d47e2:	220a      	movs	r2, #10
   d47e4:	a903      	add	r1, sp, #12
   d47e6:	f007 fe43 	bl	dc470 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d47ea:	2804      	cmp	r0, #4
   d47ec:	d818      	bhi.n	d4820 <_Z16setOperatingMode6String+0x44>
  else{
    sysStatus.operatingMode = tempSensor;
   d47ee:	4b0d      	ldr	r3, [pc, #52]	; (d4824 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d47f0:	4a0d      	ldr	r2, [pc, #52]	; (d4828 <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d47f2:	62d8      	str	r0, [r3, #44]	; 0x2c
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d47f4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47f8:	4603      	mov	r3, r0
   d47fa:	a804      	add	r0, sp, #16
   d47fc:	f004 f976 	bl	d8aec <snprintf>
   d4800:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d4802:	f88d 3000 	strb.w	r3, [sp]
   d4806:	4b09      	ldr	r3, [pc, #36]	; (d482c <_Z16setOperatingMode6String+0x50>)
   d4808:	4909      	ldr	r1, [pc, #36]	; (d4830 <_Z16setOperatingMode6String+0x54>)
   d480a:	781b      	ldrb	r3, [r3, #0]
   d480c:	4809      	ldr	r0, [pc, #36]	; (d4834 <_Z16setOperatingMode6String+0x58>)
   d480e:	aa04      	add	r2, sp, #16
   d4810:	f7ff fdd5 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4814:	4b08      	ldr	r3, [pc, #32]	; (d4838 <_Z16setOperatingMode6String+0x5c>)
   d4816:	2001      	movs	r0, #1
   d4818:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d481a:	b045      	add	sp, #276	; 0x114
   d481c:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4820:	2000      	movs	r0, #0
   d4822:	e7fa      	b.n	d481a <_Z16setOperatingMode6String+0x3e>
   d4824:	2003e5c0 	.word	0x2003e5c0
   d4828:	000dd696 	.word	0x000dd696
   d482c:	2003df2d 	.word	0x2003df2d
   d4830:	000dd607 	.word	0x000dd607
   d4834:	2003e3d8 	.word	0x2003e3d8
   d4838:	2003e5f4 	.word	0x2003e5f4

000d483c <_Z11resetSystem6String>:

}

int resetSystem(String Command)

{
   d483c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d483e:	220a      	movs	r2, #10
   d4840:	6800      	ldr	r0, [r0, #0]
   d4842:	a903      	add	r1, sp, #12
   d4844:	f007 fe14 	bl	dc470 <strtol>
    if (command == 1) {
   d4848:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d484a:	4604      	mov	r4, r0
    if (command == 1) {
   d484c:	f04f 0300 	mov.w	r3, #0
   d4850:	d111      	bne.n	d4876 <_Z11resetSystem6String+0x3a>
      publishQueue.publish("Reset","Device Reset Success",PRIVATE);
   d4852:	f88d 3000 	strb.w	r3, [sp]
   d4856:	4b09      	ldr	r3, [pc, #36]	; (d487c <_Z11resetSystem6String+0x40>)
   d4858:	4a09      	ldr	r2, [pc, #36]	; (d4880 <_Z11resetSystem6String+0x44>)
   d485a:	781b      	ldrb	r3, [r3, #0]
   d485c:	4909      	ldr	r1, [pc, #36]	; (d4884 <_Z11resetSystem6String+0x48>)
   d485e:	480a      	ldr	r0, [pc, #40]	; (d4888 <_Z11resetSystem6String+0x4c>)
   d4860:	f7ff fdad 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(5000);
   d4864:	f241 3088 	movw	r0, #5000	; 0x1388
   d4868:	f004 f990 	bl	d8b8c <delay>
      System.reset();
   d486c:	f005 fb80 	bl	d9f70 <_ZN11SystemClass5resetEv>
      return 1;
      }
    else return 0;  
  }
   d4870:	4620      	mov	r0, r4
   d4872:	b004      	add	sp, #16
   d4874:	bd10      	pop	{r4, pc}
    else return 0;  
   d4876:	461c      	mov	r4, r3
   d4878:	e7fa      	b.n	d4870 <_Z11resetSystem6String+0x34>
   d487a:	bf00      	nop
   d487c:	2003df2d 	.word	0x2003df2d
   d4880:	000dd6a8 	.word	0x000dd6a8
   d4884:	000dd81d 	.word	0x000dd81d
   d4888:	2003e3d8 	.word	0x2003e3d8

000d488c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d488c:	b507      	push	{r0, r1, r2, lr}
   d488e:	f004 f865 	bl	d895c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4892:	b148      	cbz	r0, d48a8 <_Z18loadSystemDefaultsv+0x1c>
   d4894:	2300      	movs	r3, #0
   d4896:	f88d 3000 	strb.w	r3, [sp]
   d489a:	4b0e      	ldr	r3, [pc, #56]	; (d48d4 <_Z18loadSystemDefaultsv+0x48>)
   d489c:	4a0e      	ldr	r2, [pc, #56]	; (d48d8 <_Z18loadSystemDefaultsv+0x4c>)
   d489e:	781b      	ldrb	r3, [r3, #0]
   d48a0:	490e      	ldr	r1, [pc, #56]	; (d48dc <_Z18loadSystemDefaultsv+0x50>)
   d48a2:	480f      	ldr	r0, [pc, #60]	; (d48e0 <_Z18loadSystemDefaultsv+0x54>)
   d48a4:	f7ff fd8b 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d48a8:	4a0e      	ldr	r2, [pc, #56]	; (d48e4 <_Z18loadSystemDefaultsv+0x58>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d48aa:	480f      	ldr	r0, [pc, #60]	; (d48e8 <_Z18loadSystemDefaultsv+0x5c>)
   d48ac:	2378      	movs	r3, #120	; 0x78
   d48ae:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d48b0:	f240 1301 	movw	r3, #257	; 0x101
   d48b4:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d48b6:	2300      	movs	r3, #0
   d48b8:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d48ba:	7293      	strb	r3, [r2, #10]
  sysStatus.reportingBoundary = 10*60;
   d48bc:	f44f 7316 	mov.w	r3, #600	; 0x258
   d48c0:	6253      	str	r3, [r2, #36]	; 0x24
  sysStatus.operatingMode = 1;
   d48c2:	2101      	movs	r1, #1
   d48c4:	2334      	movs	r3, #52	; 0x34
   d48c6:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   d48c8:	b003      	add	sp, #12
   d48ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d48ce:	f002 be44 	b.w	d755a <_ZN6MB85RC9writeDataEjPKhj>
   d48d2:	bf00      	nop
   d48d4:	2003df2d 	.word	0x2003df2d
   d48d8:	000dd6bd 	.word	0x000dd6bd
   d48dc:	000dd607 	.word	0x000dd607
   d48e0:	2003e3d8 	.word	0x2003e3d8
   d48e4:	2003e5c0 	.word	0x2003e5c0
   d48e8:	2003e3a8 	.word	0x2003e3a8

000d48ec <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d48ec:	b507      	push	{r0, r1, r2, lr}
   d48ee:	f004 f835 	bl	d895c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d48f2:	b148      	cbz	r0, d4908 <_Z20loadConstantDefaultsv+0x1c>
   d48f4:	2300      	movs	r3, #0
   d48f6:	f88d 3000 	strb.w	r3, [sp]
   d48fa:	4b0b      	ldr	r3, [pc, #44]	; (d4928 <_Z20loadConstantDefaultsv+0x3c>)
   d48fc:	4a0b      	ldr	r2, [pc, #44]	; (d492c <_Z20loadConstantDefaultsv+0x40>)
   d48fe:	781b      	ldrb	r3, [r3, #0]
   d4900:	490b      	ldr	r1, [pc, #44]	; (d4930 <_Z20loadConstantDefaultsv+0x44>)
   d4902:	480c      	ldr	r0, [pc, #48]	; (d4934 <_Z20loadConstantDefaultsv+0x48>)
   d4904:	f7ff fd5b 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d4908:	4a0b      	ldr	r2, [pc, #44]	; (d4938 <_Z20loadConstantDefaultsv+0x4c>)
   d490a:	4b0c      	ldr	r3, [pc, #48]	; (d493c <_Z20loadConstantDefaultsv+0x50>)
   d490c:	480c      	ldr	r0, [pc, #48]	; (d4940 <_Z20loadConstantDefaultsv+0x54>)
   d490e:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d4910:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d4912:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d4914:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 90.9;
   d4916:	6113      	str	r3, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d4918:	6153      	str	r3, [r2, #20]
   d491a:	21a0      	movs	r1, #160	; 0xa0
   d491c:	2318      	movs	r3, #24
}
   d491e:	b003      	add	sp, #12
   d4920:	f85d eb04 	ldr.w	lr, [sp], #4
   d4924:	f002 be19 	b.w	d755a <_ZN6MB85RC9writeDataEjPKhj>
   d4928:	2003df2d 	.word	0x2003df2d
   d492c:	000dd6d5 	.word	0x000dd6d5
   d4930:	000dd607 	.word	0x000dd607
   d4934:	2003e3d8 	.word	0x2003e3d8
   d4938:	2003e430 	.word	0x2003e430
   d493c:	42b5cccd 	.word	0x42b5cccd
   d4940:	2003e3a8 	.word	0x2003e3a8

000d4944 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4944:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4946:	4c15      	ldr	r4, [pc, #84]	; (d499c <_Z17checkSystemValuesv+0x58>)
   d4948:	7a23      	ldrb	r3, [r4, #8]
   d494a:	2b01      	cmp	r3, #1
   d494c:	d904      	bls.n	d4958 <_Z17checkSystemValuesv+0x14>
   d494e:	f004 f805 	bl	d895c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4952:	b300      	cbz	r0, d4996 <_Z17checkSystemValuesv+0x52>
   d4954:	2301      	movs	r3, #1
   d4956:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4958:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d495a:	4a11      	ldr	r2, [pc, #68]	; (d49a0 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d495c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4960:	bf84      	itt	hi
   d4962:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4966:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d4968:	7a63      	ldrb	r3, [r4, #9]
   d496a:	2b01      	cmp	r3, #1
   d496c:	bf84      	itt	hi
   d496e:	2301      	movhi	r3, #1
   d4970:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4972:	7aa3      	ldrb	r3, [r4, #10]
   d4974:	2b01      	cmp	r3, #1
   d4976:	bf84      	itt	hi
   d4978:	2300      	movhi	r3, #0
   d497a:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d497c:	6963      	ldr	r3, [r4, #20]
   d497e:	2bff      	cmp	r3, #255	; 0xff
   d4980:	bf84      	itt	hi
   d4982:	2300      	movhi	r3, #0
   d4984:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d4988:	2b05      	cmp	r3, #5
   d498a:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d498e:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4990:	bf88      	it	hi
   d4992:	62e3      	strhi	r3, [r4, #44]	; 0x2c
}
   d4994:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4996:	7220      	strb	r0, [r4, #8]
   d4998:	e7de      	b.n	d4958 <_Z17checkSystemValuesv+0x14>
   d499a:	bf00      	nop
   d499c:	2003e5c0 	.word	0x2003e5c0
   d49a0:	2003e5f4 	.word	0x2003e5f4

000d49a4 <_Z19checkConstantValuesv>:
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d49a4:	4b33      	ldr	r3, [pc, #204]	; (d4a74 <_Z19checkConstantValuesv+0xd0>)
   d49a6:	edd3 7a00 	vldr	s15, [r3]
   d49aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d49ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49b2:	d406      	bmi.n	d49c2 <_Z19checkConstantValuesv+0x1e>
   d49b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d49b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49c0:	dd01      	ble.n	d49c6 <_Z19checkConstantValuesv+0x22>
   d49c2:	4a2e      	ldr	r2, [pc, #184]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d49c4:	601a      	str	r2, [r3, #0]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d49c6:	edd3 7a01 	vldr	s15, [r3, #4]
   d49ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d49ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49d2:	d406      	bmi.n	d49e2 <_Z19checkConstantValuesv+0x3e>
   d49d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d49d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49e0:	dd01      	ble.n	d49e6 <_Z19checkConstantValuesv+0x42>
   d49e2:	4a26      	ldr	r2, [pc, #152]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d49e4:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d49e6:	edd3 7a02 	vldr	s15, [r3, #8]
   d49ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d49ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49f2:	d406      	bmi.n	d4a02 <_Z19checkConstantValuesv+0x5e>
   d49f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d49f8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a00:	dd01      	ble.n	d4a06 <_Z19checkConstantValuesv+0x62>
   d4a02:	4a1e      	ldr	r2, [pc, #120]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d4a04:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d4a06:	edd3 7a03 	vldr	s15, [r3, #12]
   d4a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a12:	d406      	bmi.n	d4a22 <_Z19checkConstantValuesv+0x7e>
   d4a14:	ed9f 7a18 	vldr	s14, [pc, #96]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d4a18:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a20:	dd01      	ble.n	d4a26 <_Z19checkConstantValuesv+0x82>
   d4a22:	4a16      	ldr	r2, [pc, #88]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d4a24:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorFiveConstant < 0.0  || sensorConstants.sensorFiveConstant > 3000.0) sensorConstants.sensorFiveConstant = 90.91;
   d4a26:	edd3 7a04 	vldr	s15, [r3, #16]
   d4a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a32:	d406      	bmi.n	d4a42 <_Z19checkConstantValuesv+0x9e>
   d4a34:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d4a38:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a40:	dd01      	ble.n	d4a46 <_Z19checkConstantValuesv+0xa2>
   d4a42:	4a0e      	ldr	r2, [pc, #56]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d4a44:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
   d4a46:	edd3 7a05 	vldr	s15, [r3, #20]
   d4a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a52:	d406      	bmi.n	d4a62 <_Z19checkConstantValuesv+0xbe>
   d4a54:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4a78 <_Z19checkConstantValuesv+0xd4>
   d4a58:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a60:	dd01      	ble.n	d4a66 <_Z19checkConstantValuesv+0xc2>
   d4a62:	4a06      	ldr	r2, [pc, #24]	; (d4a7c <_Z19checkConstantValuesv+0xd8>)
   d4a64:	615a      	str	r2, [r3, #20]
   d4a66:	4a03      	ldr	r2, [pc, #12]	; (d4a74 <_Z19checkConstantValuesv+0xd0>)
   d4a68:	4805      	ldr	r0, [pc, #20]	; (d4a80 <_Z19checkConstantValuesv+0xdc>)
   d4a6a:	2318      	movs	r3, #24
   d4a6c:	21a0      	movs	r1, #160	; 0xa0
   d4a6e:	f002 bd74 	b.w	d755a <_ZN6MB85RC9writeDataEjPKhj>
   d4a72:	bf00      	nop
   d4a74:	2003e430 	.word	0x2003e430
   d4a78:	453b8000 	.word	0x453b8000
   d4a7c:	42b5d1ec 	.word	0x42b5d1ec
   d4a80:	2003e3a8 	.word	0x2003e3a8

000d4a84 <_Z11petWatchdogv>:
{
   d4a84:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d4a86:	2101      	movs	r1, #1
   d4a88:	2005      	movs	r0, #5
   d4a8a:	f005 feaa 	bl	da7e2 <digitalWrite>
  digitalWrite(donePin, LOW);
   d4a8e:	2100      	movs	r1, #0
   d4a90:	2005      	movs	r0, #5
   d4a92:	f005 fea6 	bl	da7e2 <digitalWrite>
  watchdogFlag = false;
   d4a96:	4a09      	ldr	r2, [pc, #36]	; (d4abc <_Z11petWatchdogv+0x38>)
   d4a98:	2300      	movs	r3, #0
   d4a9a:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d4a9c:	4a08      	ldr	r2, [pc, #32]	; (d4ac0 <_Z11petWatchdogv+0x3c>)
   d4a9e:	7a52      	ldrb	r2, [r2, #9]
   d4aa0:	b142      	cbz	r2, d4ab4 <_Z11petWatchdogv+0x30>
   d4aa2:	f88d 3000 	strb.w	r3, [sp]
   d4aa6:	4b07      	ldr	r3, [pc, #28]	; (d4ac4 <_Z11petWatchdogv+0x40>)
   d4aa8:	4a07      	ldr	r2, [pc, #28]	; (d4ac8 <_Z11petWatchdogv+0x44>)
   d4aaa:	781b      	ldrb	r3, [r3, #0]
   d4aac:	4907      	ldr	r1, [pc, #28]	; (d4acc <_Z11petWatchdogv+0x48>)
   d4aae:	4808      	ldr	r0, [pc, #32]	; (d4ad0 <_Z11petWatchdogv+0x4c>)
   d4ab0:	f7ff fc85 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4ab4:	b003      	add	sp, #12
   d4ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4aba:	bf00      	nop
   d4abc:	2003e5f5 	.word	0x2003e5f5
   d4ac0:	2003e5c0 	.word	0x2003e5c0
   d4ac4:	2003df2d 	.word	0x2003df2d
   d4ac8:	000dd6f4 	.word	0x000dd6f4
   d4acc:	000dd6fb 	.word	0x000dd6fb
   d4ad0:	2003e3d8 	.word	0x2003e3d8
   d4ad4:	00000000 	.word	0x00000000

000d4ad8 <_Z9sendEventv>:
{
   d4ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4adc:	ed2d 8b08 	vpush	{d8-d11}
   d4ae0:	b0cc      	sub	sp, #304	; 0x130
  memset(ubidots_hook, 0, sizeof(ubidots_hook));
   d4ae2:	ad0c      	add	r5, sp, #48	; 0x30
   d4ae4:	f44f 7480 	mov.w	r4, #256	; 0x100
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4ae8:	a803      	add	r0, sp, #12
   d4aea:	f003 ff3f 	bl	d896c <spark_deviceID>
      if (sysStatus.operatingMode == 1){
   d4aee:	4e3c      	ldr	r6, [pc, #240]	; (d4be0 <_Z9sendEventv+0x108>)
  memset(ubidots_hook, 0, sizeof(ubidots_hook));
   d4af0:	4622      	mov	r2, r4
   d4af2:	2100      	movs	r1, #0
   d4af4:	4628      	mov	r0, r5
   d4af6:	f006 fd87 	bl	db608 <memset>
        state_(BEGIN) {
   d4afa:	2300      	movs	r3, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d4afc:	4a39      	ldr	r2, [pc, #228]	; (d4be4 <_Z9sendEventv+0x10c>)
        state_(BEGIN) {
   d4afe:	f88d 3020 	strb.w	r3, [sp, #32]
  ubidotsPayLoad.beginObject();
   d4b02:	a807      	add	r0, sp, #28
        n_(0) {
   d4b04:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
   d4b08:	930b      	str	r3, [sp, #44]	; 0x2c
   d4b0a:	9207      	str	r2, [sp, #28]
   d4b0c:	f004 fecb 	bl	d98a6 <_ZN5spark10JSONWriter11beginObjectEv>
      if (sysStatus.operatingMode == 1){
   d4b10:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   d4b12:	4c35      	ldr	r4, [pc, #212]	; (d4be8 <_Z9sendEventv+0x110>)
   d4b14:	2b01      	cmp	r3, #1
   d4b16:	4635      	mov	r5, r6
   d4b18:	d176      	bne.n	d4c08 <_Z9sendEventv+0x130>
        if (sysStatus.sensorOneConnected) {
   d4b1a:	7f33      	ldrb	r3, [r6, #28]
   d4b1c:	b163      	cbz	r3, d4b38 <_Z9sendEventv+0x60>
          ubidotsPayLoad.name("sensorOne").value(sensorData.sensorOneCurrent);
   d4b1e:	4933      	ldr	r1, [pc, #204]	; (d4bec <_Z9sendEventv+0x114>)
   d4b20:	a807      	add	r0, sp, #28
   d4b22:	f7ff fc19 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b26:	4606      	mov	r6, r0
   d4b28:	6820      	ldr	r0, [r4, #0]
   d4b2a:	f006 f961 	bl	dadf0 <__aeabi_f2d>
   d4b2e:	ec41 0b10 	vmov	d0, r0, r1
   d4b32:	4630      	mov	r0, r6
   d4b34:	f004 feee 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorTwoConnected) {
   d4b38:	7f6b      	ldrb	r3, [r5, #29]
   d4b3a:	b163      	cbz	r3, d4b56 <_Z9sendEventv+0x7e>
          ubidotsPayLoad.name("sensorTwo").value(sensorData.sensorTwoCurrent);
   d4b3c:	492c      	ldr	r1, [pc, #176]	; (d4bf0 <_Z9sendEventv+0x118>)
   d4b3e:	a807      	add	r0, sp, #28
   d4b40:	f7ff fc0a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b44:	4606      	mov	r6, r0
   d4b46:	6860      	ldr	r0, [r4, #4]
   d4b48:	f006 f952 	bl	dadf0 <__aeabi_f2d>
   d4b4c:	ec41 0b10 	vmov	d0, r0, r1
   d4b50:	4630      	mov	r0, r6
   d4b52:	f004 fedf 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorThreeConnected) {
   d4b56:	7fab      	ldrb	r3, [r5, #30]
   d4b58:	b163      	cbz	r3, d4b74 <_Z9sendEventv+0x9c>
          ubidotsPayLoad.name("sensorThree").value(sensorData.sensorThreeCurrent);
   d4b5a:	4926      	ldr	r1, [pc, #152]	; (d4bf4 <_Z9sendEventv+0x11c>)
   d4b5c:	a807      	add	r0, sp, #28
   d4b5e:	f7ff fbfb 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b62:	4606      	mov	r6, r0
   d4b64:	68a0      	ldr	r0, [r4, #8]
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4b66:	f006 f943 	bl	dadf0 <__aeabi_f2d>
   d4b6a:	ec41 0b10 	vmov	d0, r0, r1
   d4b6e:	4630      	mov	r0, r6
   d4b70:	f004 fed0 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFourConnected) {
   d4b74:	7feb      	ldrb	r3, [r5, #31]
   d4b76:	b163      	cbz	r3, d4b92 <_Z9sendEventv+0xba>
          ubidotsPayLoad.name("sensorFour").value(sensorData.sensorFourCurrent);
   d4b78:	491f      	ldr	r1, [pc, #124]	; (d4bf8 <_Z9sendEventv+0x120>)
   d4b7a:	a807      	add	r0, sp, #28
   d4b7c:	f7ff fbec 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b80:	4606      	mov	r6, r0
   d4b82:	68e0      	ldr	r0, [r4, #12]
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d4b84:	f006 f934 	bl	dadf0 <__aeabi_f2d>
   d4b88:	ec41 0b10 	vmov	d0, r0, r1
   d4b8c:	4630      	mov	r0, r6
   d4b8e:	f004 fec1 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFiveConnected) {
   d4b92:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4b96:	b163      	cbz	r3, d4bb2 <_Z9sendEventv+0xda>
          ubidotsPayLoad.name("sensorFive").value(sensorData.sensorFiveCurrent);
   d4b98:	4918      	ldr	r1, [pc, #96]	; (d4bfc <_Z9sendEventv+0x124>)
   d4b9a:	a807      	add	r0, sp, #28
   d4b9c:	f7ff fbdc 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ba0:	4606      	mov	r6, r0
   d4ba2:	6920      	ldr	r0, [r4, #16]
   d4ba4:	f006 f924 	bl	dadf0 <__aeabi_f2d>
   d4ba8:	ec41 0b10 	vmov	d0, r0, r1
   d4bac:	4630      	mov	r0, r6
   d4bae:	f004 feb1 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorSixConnected) {
   d4bb2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4bb6:	b163      	cbz	r3, d4bd2 <_Z9sendEventv+0xfa>
          ubidotsPayLoad.name("sensorSix").value(sensorData.sensorSixCurrent);
   d4bb8:	4911      	ldr	r1, [pc, #68]	; (d4c00 <_Z9sendEventv+0x128>)
   d4bba:	a807      	add	r0, sp, #28
   d4bbc:	f7ff fbcc 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4bc0:	4606      	mov	r6, r0
   d4bc2:	6960      	ldr	r0, [r4, #20]
   d4bc4:	f006 f914 	bl	dadf0 <__aeabi_f2d>
   d4bc8:	ec41 0b10 	vmov	d0, r0, r1
   d4bcc:	4630      	mov	r0, r6
   d4bce:	f004 fea1 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4bd2:	490c      	ldr	r1, [pc, #48]	; (d4c04 <_Z9sendEventv+0x12c>)
   d4bd4:	a807      	add	r0, sp, #28
   d4bd6:	f7ff fbbf 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4bda:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d4bdc:	e06a      	b.n	d4cb4 <_Z9sendEventv+0x1dc>
   d4bde:	bf00      	nop
   d4be0:	2003e5c0 	.word	0x2003e5c0
   d4be4:	000de1f4 	.word	0x000de1f4
   d4be8:	2003e448 	.word	0x2003e448
   d4bec:	000dd704 	.word	0x000dd704
   d4bf0:	000dd70e 	.word	0x000dd70e
   d4bf4:	000dd718 	.word	0x000dd718
   d4bf8:	000dd724 	.word	0x000dd724
   d4bfc:	000dd72f 	.word	0x000dd72f
   d4c00:	000dd73a 	.word	0x000dd73a
   d4c04:	000dd607 	.word	0x000dd607
      else if (sysStatus.operatingMode == 2){
   d4c08:	2b02      	cmp	r3, #2
   d4c0a:	f040 812d 	bne.w	d4e68 <_Z9sendEventv+0x390>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d4c0e:	49c6      	ldr	r1, [pc, #792]	; (d4f28 <_Z9sendEventv+0x450>)
   d4c10:	a807      	add	r0, sp, #28
   d4c12:	f7ff fba1 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c16:	4605      	mov	r5, r0
   d4c18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4c1a:	f006 f8e9 	bl	dadf0 <__aeabi_f2d>
   d4c1e:	ec41 0b10 	vmov	d0, r0, r1
   d4c22:	4628      	mov	r0, r5
   d4c24:	f004 fe76 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d4c28:	49c0      	ldr	r1, [pc, #768]	; (d4f2c <_Z9sendEventv+0x454>)
   d4c2a:	a807      	add	r0, sp, #28
   d4c2c:	f7ff fb94 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c30:	4605      	mov	r5, r0
   d4c32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4c34:	f006 f8dc 	bl	dadf0 <__aeabi_f2d>
   d4c38:	ec41 0b10 	vmov	d0, r0, r1
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f004 fe69 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4c42:	49bb      	ldr	r1, [pc, #748]	; (d4f30 <_Z9sendEventv+0x458>)
   d4c44:	a807      	add	r0, sp, #28
   d4c46:	f7ff fb87 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c4a:	4605      	mov	r5, r0
   d4c4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4c4e:	f006 f8cf 	bl	dadf0 <__aeabi_f2d>
   d4c52:	ec41 0b10 	vmov	d0, r0, r1
   d4c56:	4628      	mov	r0, r5
   d4c58:	f004 fe5c 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoR").value(sensorData.I_ThreePhaseLoad_Two[0]);
   d4c5c:	49b5      	ldr	r1, [pc, #724]	; (d4f34 <_Z9sendEventv+0x45c>)
   d4c5e:	a807      	add	r0, sp, #28
   d4c60:	f7ff fb7a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c64:	4605      	mov	r5, r0
   d4c66:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d4c68:	f006 f8c2 	bl	dadf0 <__aeabi_f2d>
   d4c6c:	ec41 0b10 	vmov	d0, r0, r1
   d4c70:	4628      	mov	r0, r5
   d4c72:	f004 fe4f 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoS").value(sensorData.I_ThreePhaseLoad_Two[1]);
   d4c76:	49b0      	ldr	r1, [pc, #704]	; (d4f38 <_Z9sendEventv+0x460>)
   d4c78:	a807      	add	r0, sp, #28
   d4c7a:	f7ff fb6d 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c7e:	4605      	mov	r5, r0
   d4c80:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d4c82:	f006 f8b5 	bl	dadf0 <__aeabi_f2d>
   d4c86:	ec41 0b10 	vmov	d0, r0, r1
   d4c8a:	4628      	mov	r0, r5
   d4c8c:	f004 fe42 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoT").value(sensorData.I_ThreePhaseLoad_Two[2]);
   d4c90:	49aa      	ldr	r1, [pc, #680]	; (d4f3c <_Z9sendEventv+0x464>)
   d4c92:	a807      	add	r0, sp, #28
   d4c94:	f7ff fb60 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c98:	4605      	mov	r5, r0
   d4c9a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   d4c9c:	f006 f8a8 	bl	dadf0 <__aeabi_f2d>
   d4ca0:	ec41 0b10 	vmov	d0, r0, r1
   d4ca4:	4628      	mov	r0, r5
   d4ca6:	f004 fe35 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4caa:	49a5      	ldr	r1, [pc, #660]	; (d4f40 <_Z9sendEventv+0x468>)
   d4cac:	a807      	add	r0, sp, #28
   d4cae:	f7ff fb53 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4cb2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4cb4:	f004 fe1c 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
  ubidotsPayLoad.endObject();
   d4cb8:	a807      	add	r0, sp, #28
   d4cba:	f004 fdde 	bl	d987a <_ZN5spark10JSONWriter9endObjectEv>
  publishQueue.publish("powermonitoring_hook", ubidots_hook, PRIVATE);
   d4cbe:	2300      	movs	r3, #0
   d4cc0:	f88d 3000 	strb.w	r3, [sp]
   d4cc4:	4b9f      	ldr	r3, [pc, #636]	; (d4f44 <_Z9sendEventv+0x46c>)
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.6;
   d4cc6:	f8df a290 	ldr.w	sl, [pc, #656]	; d4f58 <_Z9sendEventv+0x480>
  publishQueue.publish("powermonitoring_hook", ubidots_hook, PRIVATE);
   d4cca:	781b      	ldrb	r3, [r3, #0]
   d4ccc:	499e      	ldr	r1, [pc, #632]	; (d4f48 <_Z9sendEventv+0x470>)
   d4cce:	489f      	ldr	r0, [pc, #636]	; (d4f4c <_Z9sendEventv+0x474>)
   d4cd0:	aa0c      	add	r2, sp, #48	; 0x30
   d4cd2:	f7ff fb74 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.6;
   d4cd6:	f8da 0000 	ldr.w	r0, [sl]
   d4cda:	f006 f889 	bl	dadf0 <__aeabi_f2d>
   d4cde:	a38e      	add	r3, pc, #568	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce4:	4680      	mov	r8, r0
   d4ce6:	4689      	mov	r9, r1
   d4ce8:	f006 f8da 	bl	daea0 <__aeabi_dmul>
   d4cec:	f006 fba8 	bl	db440 <__aeabi_d2f>
   d4cf0:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  sensorData.sensorTwoPreviousLow = (sensorData.sensorTwoCurrent)*0.6;
   d4cf4:	f8da 0004 	ldr.w	r0, [sl, #4]
   d4cf8:	f006 f87a 	bl	dadf0 <__aeabi_f2d>
   d4cfc:	4602      	mov	r2, r0
   d4cfe:	460b      	mov	r3, r1
   d4d00:	ec43 2b18 	vmov	d8, r2, r3
   d4d04:	a384      	add	r3, pc, #528	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d0a:	f006 f8c9 	bl	daea0 <__aeabi_dmul>
   d4d0e:	f006 fb97 	bl	db440 <__aeabi_d2f>
   d4d12:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
  sensorData.sensorThreePreviousLow = (sensorData.sensorThreeCurrent)*0.6;
   d4d16:	f8da 0008 	ldr.w	r0, [sl, #8]
   d4d1a:	f006 f869 	bl	dadf0 <__aeabi_f2d>
   d4d1e:	4602      	mov	r2, r0
   d4d20:	460b      	mov	r3, r1
   d4d22:	ec43 2b19 	vmov	d9, r2, r3
   d4d26:	a37c      	add	r3, pc, #496	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4d28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d2c:	f006 f8b8 	bl	daea0 <__aeabi_dmul>
   d4d30:	f006 fb86 	bl	db440 <__aeabi_d2f>
   d4d34:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  sensorData.sensorFourPreviousLow = (sensorData.sensorFourCurrent)*0.6;
   d4d38:	f8da 000c 	ldr.w	r0, [sl, #12]
   d4d3c:	f006 f858 	bl	dadf0 <__aeabi_f2d>
   d4d40:	4602      	mov	r2, r0
   d4d42:	460b      	mov	r3, r1
   d4d44:	ec43 2b1a 	vmov	d10, r2, r3
   d4d48:	a373      	add	r3, pc, #460	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d4e:	f006 f8a7 	bl	daea0 <__aeabi_dmul>
   d4d52:	f006 fb75 	bl	db440 <__aeabi_d2f>
   d4d56:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  sensorData.sensorFivePreviousLow = (sensorData.sensorFiveCurrent)*0.6;
   d4d5a:	f8da 0010 	ldr.w	r0, [sl, #16]
   d4d5e:	f006 f847 	bl	dadf0 <__aeabi_f2d>
   d4d62:	4602      	mov	r2, r0
   d4d64:	460b      	mov	r3, r1
   d4d66:	ec43 2b1b 	vmov	d11, r2, r3
   d4d6a:	a36b      	add	r3, pc, #428	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d70:	f006 f896 	bl	daea0 <__aeabi_dmul>
   d4d74:	f006 fb64 	bl	db440 <__aeabi_d2f>
   d4d78:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  sensorData.sensorSixPreviousLow = (sensorData.sensorSixCurrent)*0.6;
   d4d7c:	f8da 0014 	ldr.w	r0, [sl, #20]
   d4d80:	f006 f836 	bl	dadf0 <__aeabi_f2d>
   d4d84:	a364      	add	r3, pc, #400	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4d86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d8a:	4606      	mov	r6, r0
   d4d8c:	460f      	mov	r7, r1
   d4d8e:	f006 f887 	bl	daea0 <__aeabi_dmul>
   d4d92:	f006 fb55 	bl	db440 <__aeabi_d2f>
   d4d96:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  sensorData.ThreePhaseLoadOnePreviousLow = (sensorData.I_ThreePhaseLoad_One[0])*0.6;
   d4d9a:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
   d4d9e:	f006 f827 	bl	dadf0 <__aeabi_f2d>
   d4da2:	a35d      	add	r3, pc, #372	; (adr r3, d4f18 <_Z9sendEventv+0x440>)
   d4da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4da8:	4604      	mov	r4, r0
   d4daa:	460d      	mov	r5, r1
   d4dac:	f006 f878 	bl	daea0 <__aeabi_dmul>
   d4db0:	f006 fb46 	bl	db440 <__aeabi_d2f>
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4db4:	a35a      	add	r3, pc, #360	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4db6:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.ThreePhaseLoadOnePreviousLow = (sensorData.I_ThreePhaseLoad_One[0])*0.6;
   d4dba:	f8ca 0064 	str.w	r0, [sl, #100]	; 0x64
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4dbe:	4649      	mov	r1, r9
   d4dc0:	4640      	mov	r0, r8
   d4dc2:	f006 f86d 	bl	daea0 <__aeabi_dmul>
   d4dc6:	f006 fb3b 	bl	db440 <__aeabi_d2f>
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4dca:	a355      	add	r3, pc, #340	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4dd0:	f8ca 0018 	str.w	r0, [sl, #24]
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4dd4:	ec51 0b18 	vmov	r0, r1, d8
   d4dd8:	f006 f862 	bl	daea0 <__aeabi_dmul>
   d4ddc:	f006 fb30 	bl	db440 <__aeabi_d2f>
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4de0:	a34f      	add	r3, pc, #316	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4de2:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4de6:	f8ca 001c 	str.w	r0, [sl, #28]
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4dea:	ec51 0b19 	vmov	r0, r1, d9
   d4dee:	f006 f857 	bl	daea0 <__aeabi_dmul>
   d4df2:	f006 fb25 	bl	db440 <__aeabi_d2f>
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4df6:	a34a      	add	r3, pc, #296	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4df8:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4dfc:	f8ca 0020 	str.w	r0, [sl, #32]
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4e00:	ec51 0b1a 	vmov	r0, r1, d10
   d4e04:	f006 f84c 	bl	daea0 <__aeabi_dmul>
   d4e08:	f006 fb1a 	bl	db440 <__aeabi_d2f>
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4e0c:	a344      	add	r3, pc, #272	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4e12:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4e16:	ec51 0b1b 	vmov	r0, r1, d11
   d4e1a:	f006 f841 	bl	daea0 <__aeabi_dmul>
   d4e1e:	f006 fb0f 	bl	db440 <__aeabi_d2f>
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4e22:	a33f      	add	r3, pc, #252	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4e24:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4e28:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4e2c:	4639      	mov	r1, r7
   d4e2e:	4630      	mov	r0, r6
   d4e30:	f006 f836 	bl	daea0 <__aeabi_dmul>
   d4e34:	f006 fb04 	bl	db440 <__aeabi_d2f>
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4e38:	a339      	add	r3, pc, #228	; (adr r3, d4f20 <_Z9sendEventv+0x448>)
   d4e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4e3e:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4e42:	4629      	mov	r1, r5
   d4e44:	4620      	mov	r0, r4
   d4e46:	f006 f82b 	bl	daea0 <__aeabi_dmul>
   d4e4a:	f006 faf9 	bl	db440 <__aeabi_d2f>
  sensorDataWriteNeeded = true;
   d4e4e:	4b40      	ldr	r3, [pc, #256]	; (d4f50 <_Z9sendEventv+0x478>)
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4e50:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
  sensorDataWriteNeeded = true;
   d4e54:	2201      	movs	r2, #1
  String myDeviceID = System.deviceID();                                                        // Device ID
   d4e56:	a803      	add	r0, sp, #12
  sensorDataWriteNeeded = true;
   d4e58:	701a      	strb	r2, [r3, #0]
  String myDeviceID = System.deviceID();                                                        // Device ID
   d4e5a:	f004 ff77 	bl	d9d4c <_ZN6StringD1Ev>
}
   d4e5e:	b04c      	add	sp, #304	; 0x130
   d4e60:	ecbd 8b08 	vpop	{d8-d11}
   d4e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if (sysStatus.operatingMode == 3){
   d4e68:	2b03      	cmp	r3, #3
   d4e6a:	d120      	bne.n	d4eae <_Z9sendEventv+0x3d6>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d4e6c:	492e      	ldr	r1, [pc, #184]	; (d4f28 <_Z9sendEventv+0x450>)
   d4e6e:	a807      	add	r0, sp, #28
   d4e70:	f7ff fa72 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e74:	4606      	mov	r6, r0
   d4e76:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4e78:	f005 ffba 	bl	dadf0 <__aeabi_f2d>
   d4e7c:	ec41 0b10 	vmov	d0, r0, r1
   d4e80:	4630      	mov	r0, r6
   d4e82:	f004 fd47 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d4e86:	4929      	ldr	r1, [pc, #164]	; (d4f2c <_Z9sendEventv+0x454>)
   d4e88:	a807      	add	r0, sp, #28
   d4e8a:	f7ff fa65 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e8e:	4606      	mov	r6, r0
   d4e90:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4e92:	f005 ffad 	bl	dadf0 <__aeabi_f2d>
   d4e96:	ec41 0b10 	vmov	d0, r0, r1
   d4e9a:	4630      	mov	r0, r6
   d4e9c:	f004 fd3a 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4ea0:	4923      	ldr	r1, [pc, #140]	; (d4f30 <_Z9sendEventv+0x458>)
   d4ea2:	a807      	add	r0, sp, #28
   d4ea4:	f7ff fa58 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ea8:	4606      	mov	r6, r0
   d4eaa:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4eac:	e65b      	b.n	d4b66 <_Z9sendEventv+0x8e>
      else if (sysStatus.operatingMode == 4){
   d4eae:	2b04      	cmp	r3, #4
   d4eb0:	f47f af02 	bne.w	d4cb8 <_Z9sendEventv+0x1e0>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.Four_ThreePhaseLoad_I[0]);
   d4eb4:	491c      	ldr	r1, [pc, #112]	; (d4f28 <_Z9sendEventv+0x450>)
   d4eb6:	a807      	add	r0, sp, #28
   d4eb8:	f7ff fa4e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ebc:	4606      	mov	r6, r0
   d4ebe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d4ec2:	f005 ff95 	bl	dadf0 <__aeabi_f2d>
   d4ec6:	ec41 0b10 	vmov	d0, r0, r1
   d4eca:	4630      	mov	r0, r6
   d4ecc:	f004 fd22 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.Four_ThreePhaseLoad_I[1]);
   d4ed0:	4916      	ldr	r1, [pc, #88]	; (d4f2c <_Z9sendEventv+0x454>)
   d4ed2:	a807      	add	r0, sp, #28
   d4ed4:	f7ff fa40 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ed8:	4606      	mov	r6, r0
   d4eda:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   d4ede:	f005 ff87 	bl	dadf0 <__aeabi_f2d>
   d4ee2:	ec41 0b10 	vmov	d0, r0, r1
   d4ee6:	4630      	mov	r0, r6
   d4ee8:	f004 fd14 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.Four_ThreePhaseLoad_I[2]);
   d4eec:	4910      	ldr	r1, [pc, #64]	; (d4f30 <_Z9sendEventv+0x458>)
   d4eee:	a807      	add	r0, sp, #28
   d4ef0:	f7ff fa32 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ef4:	4606      	mov	r6, r0
   d4ef6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   d4efa:	f005 ff79 	bl	dadf0 <__aeabi_f2d>
   d4efe:	ec41 0b10 	vmov	d0, r0, r1
   d4f02:	4630      	mov	r0, r6
   d4f04:	f004 fd06 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d4f08:	4912      	ldr	r1, [pc, #72]	; (d4f54 <_Z9sendEventv+0x47c>)
   d4f0a:	a807      	add	r0, sp, #28
   d4f0c:	f7ff fa24 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4f10:	4606      	mov	r6, r0
   d4f12:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   d4f16:	e635      	b.n	d4b84 <_Z9sendEventv+0xac>
   d4f18:	33333333 	.word	0x33333333
   d4f1c:	3fe33333 	.word	0x3fe33333
   d4f20:	66666666 	.word	0x66666666
   d4f24:	3ff66666 	.word	0x3ff66666
   d4f28:	000dd744 	.word	0x000dd744
   d4f2c:	000dd74f 	.word	0x000dd74f
   d4f30:	000dd75a 	.word	0x000dd75a
   d4f34:	000dd765 	.word	0x000dd765
   d4f38:	000dd770 	.word	0x000dd770
   d4f3c:	000dd77b 	.word	0x000dd77b
   d4f40:	000dd607 	.word	0x000dd607
   d4f44:	2003df2d 	.word	0x2003df2d
   d4f48:	000dd791 	.word	0x000dd791
   d4f4c:	2003e3d8 	.word	0x2003e3d8
   d4f50:	2003e4fc 	.word	0x2003e4fc
   d4f54:	000dd786 	.word	0x000dd786
   d4f58:	2003e448 	.word	0x2003e448

000d4f5c <_Z22publishStateTransitionv>:
{
   d4f5c:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f5e:	4d11      	ldr	r5, [pc, #68]	; (d4fa4 <_Z22publishStateTransitionv+0x48>)
   d4f60:	4c11      	ldr	r4, [pc, #68]	; (d4fa8 <_Z22publishStateTransitionv+0x4c>)
   d4f62:	4912      	ldr	r1, [pc, #72]	; (d4fac <_Z22publishStateTransitionv+0x50>)
   d4f64:	782a      	ldrb	r2, [r5, #0]
   d4f66:	7820      	ldrb	r0, [r4, #0]
{
   d4f68:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f6a:	231a      	movs	r3, #26
   d4f6c:	fb03 1202 	mla	r2, r3, r2, r1
   d4f70:	9200      	str	r2, [sp, #0]
   d4f72:	fb03 1300 	mla	r3, r3, r0, r1
   d4f76:	4a0e      	ldr	r2, [pc, #56]	; (d4fb0 <_Z22publishStateTransitionv+0x54>)
   d4f78:	2128      	movs	r1, #40	; 0x28
   d4f7a:	a802      	add	r0, sp, #8
   d4f7c:	f003 fdb6 	bl	d8aec <snprintf>
  oldState = state;
   d4f80:	782b      	ldrb	r3, [r5, #0]
   d4f82:	7023      	strb	r3, [r4, #0]
   d4f84:	f003 fcea 	bl	d895c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4f88:	b148      	cbz	r0, d4f9e <_Z22publishStateTransitionv+0x42>
   d4f8a:	2300      	movs	r3, #0
   d4f8c:	f88d 3000 	strb.w	r3, [sp]
   d4f90:	4b08      	ldr	r3, [pc, #32]	; (d4fb4 <_Z22publishStateTransitionv+0x58>)
   d4f92:	4909      	ldr	r1, [pc, #36]	; (d4fb8 <_Z22publishStateTransitionv+0x5c>)
   d4f94:	781b      	ldrb	r3, [r3, #0]
   d4f96:	4809      	ldr	r0, [pc, #36]	; (d4fbc <_Z22publishStateTransitionv+0x60>)
   d4f98:	aa02      	add	r2, sp, #8
   d4f9a:	f7ff fa10 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4f9e:	b00d      	add	sp, #52	; 0x34
   d4fa0:	bd30      	pop	{r4, r5, pc}
   d4fa2:	bf00      	nop
   d4fa4:	2003e5bd 	.word	0x2003e5bd
   d4fa8:	2003e3d4 	.word	0x2003e3d4
   d4fac:	2003dc30 	.word	0x2003dc30
   d4fb0:	000dd7a6 	.word	0x000dd7a6
   d4fb4:	2003df2d 	.word	0x2003df2d
   d4fb8:	000dd7b4 	.word	0x000dd7b4
   d4fbc:	2003e3d8 	.word	0x2003e3d8

000d4fc0 <_Z17getBatteryContextv>:
{
   d4fc0:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4fc2:	4d0d      	ldr	r5, [pc, #52]	; (d4ff8 <_Z17getBatteryContextv+0x38>)
   d4fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4fc6:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4fc8:	ac01      	add	r4, sp, #4
   d4fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4fd0:	4b0a      	ldr	r3, [pc, #40]	; (d4ffc <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4fd6:	7c1b      	ldrb	r3, [r3, #16]
   d4fd8:	4809      	ldr	r0, [pc, #36]	; (d5000 <_Z17getBatteryContextv+0x40>)
   d4fda:	aa08      	add	r2, sp, #32
   d4fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4fe0:	2110      	movs	r1, #16
   d4fe2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4fe6:	4a07      	ldr	r2, [pc, #28]	; (d5004 <_Z17getBatteryContextv+0x44>)
   d4fe8:	f003 fd80 	bl	d8aec <snprintf>
  sysStatusWriteNeeded = true;
   d4fec:	4b06      	ldr	r3, [pc, #24]	; (d5008 <_Z17getBatteryContextv+0x48>)
   d4fee:	2201      	movs	r2, #1
   d4ff0:	701a      	strb	r2, [r3, #0]
}
   d4ff2:	b009      	add	sp, #36	; 0x24
   d4ff4:	bd30      	pop	{r4, r5, pc}
   d4ff6:	bf00      	nop
   d4ff8:	000ddcac 	.word	0x000ddcac
   d4ffc:	2003e5c0 	.word	0x2003e5c0
   d5000:	2003df34 	.word	0x2003df34
   d5004:	000ddf3c 	.word	0x000ddf3c
   d5008:	2003e5f4 	.word	0x2003e5f4

000d500c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d5010:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d5014:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d5018:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d501a:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d501e:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d5020:	ebad 0d04 	sub.w	sp, sp, r4
   d5024:	ad02      	add	r5, sp, #8
   d5026:	46ac      	mov	ip, r5
   d5028:	f04f 0e00 	mov.w	lr, #0
   d502c:	f84c eb04 	str.w	lr, [ip], #4
   d5030:	3802      	subs	r0, #2
   d5032:	2800      	cmp	r0, #0
   d5034:	da2a      	bge.n	d508c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d5036:	f8df b068 	ldr.w	fp, [pc, #104]	; d50a0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d503a:	f8df a068 	ldr.w	sl, [pc, #104]	; d50a4 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d503e:	460c      	mov	r4, r1
   d5040:	4690      	mov	r8, r2
   d5042:	461e      	mov	r6, r3
   d5044:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d5046:	454d      	cmp	r5, r9
   d5048:	d024      	beq.n	d5094 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d504a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d504e:	e88d 0003 	stmia.w	sp, {r0, r1}
   d5052:	4658      	mov	r0, fp
   d5054:	e894 000c 	ldmia.w	r4, {r2, r3}
   d5058:	f001 faa6 	bl	d65a8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d505c:	ec51 0b10 	vmov	r0, r1, d0
   d5060:	f006 f9ee 	bl	db440 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d5064:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d5068:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d506c:	f005 fec0 	bl	dadf0 <__aeabi_f2d>
   d5070:	e9da 2300 	ldrd	r2, r3, [sl]
   d5074:	f005 ff14 	bl	daea0 <__aeabi_dmul>
   d5078:	4b08      	ldr	r3, [pc, #32]	; (d509c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d507a:	2200      	movs	r2, #0
   d507c:	f006 f83a 	bl	db0f4 <__aeabi_ddiv>
   d5080:	f006 f9de 	bl	db440 <__aeabi_d2f>
   d5084:	3410      	adds	r4, #16
   d5086:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d508a:	e7dc      	b.n	d5046 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d508c:	f84c eb04 	str.w	lr, [ip], #4
   d5090:	3801      	subs	r0, #1
   d5092:	e7ce      	b.n	d5032 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d5094:	3704      	adds	r7, #4
   d5096:	46bd      	mov	sp, r7
   d5098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d509c:	408f4000 	.word	0x408f4000
   d50a0:	2003dee8 	.word	0x2003dee8
   d50a4:	2003dc28 	.word	0x2003dc28

000d50a8 <_Z16takeMeasurementsv>:
{   
   d50a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d50ac:	ed2d 8b06 	vpush	{d8-d10}
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d50b0:	4c8c      	ldr	r4, [pc, #560]	; (d52e4 <_Z16takeMeasurementsv+0x23c>)
   d50b2:	4b8d      	ldr	r3, [pc, #564]	; (d52e8 <_Z16takeMeasurementsv+0x240>)
   d50b4:	6820      	ldr	r0, [r4, #0]
   d50b6:	f893 a000 	ldrb.w	sl, [r3]
{   
   d50ba:	b0a8      	sub	sp, #160	; 0xa0
  };
   d50bc:	f8cd a000 	str.w	sl, [sp]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d50c0:	f005 fe96 	bl	dadf0 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d50c4:	4b89      	ldr	r3, [pc, #548]	; (d52ec <_Z16takeMeasurementsv+0x244>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d50c6:	ec41 0b1a 	vmov	d10, r0, r1
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d50ca:	f893 9000 	ldrb.w	r9, [r3]
  };
   d50ce:	f8cd 9010 	str.w	r9, [sp, #16]
   d50d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d50d6:	6860      	ldr	r0, [r4, #4]
   d50d8:	f005 fe8a 	bl	dadf0 <__aeabi_f2d>
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d50dc:	4b84      	ldr	r3, [pc, #528]	; (d52f0 <_Z16takeMeasurementsv+0x248>)
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d50de:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d50e2:	f893 8000 	ldrb.w	r8, [r3]
  };
   d50e6:	f8cd 8020 	str.w	r8, [sp, #32]
   d50ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d50ee:	68a0      	ldr	r0, [r4, #8]
   d50f0:	f005 fe7e 	bl	dadf0 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d50f4:	4b7f      	ldr	r3, [pc, #508]	; (d52f4 <_Z16takeMeasurementsv+0x24c>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d50f6:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d50fa:	781d      	ldrb	r5, [r3, #0]
  };
   d50fc:	950c      	str	r5, [sp, #48]	; 0x30
  };
   d50fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5102:	68e0      	ldr	r0, [r4, #12]
   d5104:	f005 fe74 	bl	dadf0 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5108:	4b7b      	ldr	r3, [pc, #492]	; (d52f8 <_Z16takeMeasurementsv+0x250>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d510a:	4606      	mov	r6, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d510c:	781b      	ldrb	r3, [r3, #0]
   d510e:	6920      	ldr	r0, [r4, #16]
   d5110:	9310      	str	r3, [sp, #64]	; 0x40
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5112:	460f      	mov	r7, r1
  };
   d5114:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5118:	f005 fe6a 	bl	dadf0 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d511c:	4b77      	ldr	r3, [pc, #476]	; (d52fc <_Z16takeMeasurementsv+0x254>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d511e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5122:	781b      	ldrb	r3, [r3, #0]
   d5124:	6960      	ldr	r0, [r4, #20]
   d5126:	9314      	str	r3, [sp, #80]	; 0x50
   d5128:	f005 fe62 	bl	dadf0 <__aeabi_f2d>
    sensorData.validData = false;
   d512c:	4c74      	ldr	r4, [pc, #464]	; (d5300 <_Z16takeMeasurementsv+0x258>)
   };
   d512e:	9524      	str	r5, [sp, #144]	; 0x90
    if ((sysStatus.operatingMode) == 1){
   d5130:	4d74      	ldr	r5, [pc, #464]	; (d5304 <_Z16takeMeasurementsv+0x25c>)
   };
   d5132:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    sensorData.validData = false;
   d5136:	2300      	movs	r3, #0
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5138:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   };
   d513c:	ed8d ab1a 	vstr	d10, [sp, #104]	; 0x68
   d5140:	ed8d 9b1e 	vstr	d9, [sp, #120]	; 0x78
   d5144:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
   d5148:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
   d514c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   d5150:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    sensorData.validData = false;
   d5154:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    getBatteryContext();     
   d5158:	f7ff ff32 	bl	d4fc0 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d515c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   d515e:	2801      	cmp	r0, #1
   d5160:	d14a      	bne.n	d51f8 <_Z16takeMeasurementsv+0x150>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d5162:	7f2b      	ldrb	r3, [r5, #28]
   d5164:	b14b      	cbz	r3, d517a <_Z16takeMeasurementsv+0xd2>
   d5166:	4868      	ldr	r0, [pc, #416]	; (d5308 <_Z16takeMeasurementsv+0x260>)
   d5168:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d516c:	f002 f8e8 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d5170:	ec51 0b10 	vmov	r0, r1, d0
   d5174:	f006 f964 	bl	db440 <__aeabi_d2f>
   d5178:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d517a:	7f6b      	ldrb	r3, [r5, #29]
   d517c:	b14b      	cbz	r3, d5192 <_Z16takeMeasurementsv+0xea>
   d517e:	4863      	ldr	r0, [pc, #396]	; (d530c <_Z16takeMeasurementsv+0x264>)
   d5180:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5184:	f002 f8dc 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d5188:	ec51 0b10 	vmov	r0, r1, d0
   d518c:	f006 f958 	bl	db440 <__aeabi_d2f>
   d5190:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d5192:	7fab      	ldrb	r3, [r5, #30]
   d5194:	b14b      	cbz	r3, d51aa <_Z16takeMeasurementsv+0x102>
   d5196:	485e      	ldr	r0, [pc, #376]	; (d5310 <_Z16takeMeasurementsv+0x268>)
   d5198:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d519c:	f002 f8d0 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d51a0:	ec51 0b10 	vmov	r0, r1, d0
   d51a4:	f006 f94c 	bl	db440 <__aeabi_d2f>
   d51a8:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d51aa:	7feb      	ldrb	r3, [r5, #31]
   d51ac:	b14b      	cbz	r3, d51c2 <_Z16takeMeasurementsv+0x11a>
   d51ae:	4859      	ldr	r0, [pc, #356]	; (d5314 <_Z16takeMeasurementsv+0x26c>)
   d51b0:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d51b4:	f002 f8c4 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d51b8:	ec51 0b10 	vmov	r0, r1, d0
   d51bc:	f006 f940 	bl	db440 <__aeabi_d2f>
   d51c0:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d51c2:	f895 3020 	ldrb.w	r3, [r5, #32]
   d51c6:	b14b      	cbz	r3, d51dc <_Z16takeMeasurementsv+0x134>
   d51c8:	4853      	ldr	r0, [pc, #332]	; (d5318 <_Z16takeMeasurementsv+0x270>)
   d51ca:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d51ce:	f002 f8b7 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d51d2:	ec51 0b10 	vmov	r0, r1, d0
   d51d6:	f006 f933 	bl	db440 <__aeabi_d2f>
   d51da:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d51dc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d51e0:	b1e3      	cbz	r3, d521c <_Z16takeMeasurementsv+0x174>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d51e2:	484e      	ldr	r0, [pc, #312]	; (d531c <_Z16takeMeasurementsv+0x274>)
   d51e4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d51e8:	f002 f8aa 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d51ec:	ec51 0b10 	vmov	r0, r1, d0
   d51f0:	f006 f926 	bl	db440 <__aeabi_d2f>
   d51f4:	6160      	str	r0, [r4, #20]
   d51f6:	e011      	b.n	d521c <_Z16takeMeasurementsv+0x174>
    else if ((sysStatus.operatingMode) == 2){
   d51f8:	2802      	cmp	r0, #2
   d51fa:	d13a      	bne.n	d5272 <_Z16takeMeasurementsv+0x1ca>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d51fc:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d5200:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d5204:	4669      	mov	r1, sp
   d5206:	2003      	movs	r0, #3
   d5208:	f7ff ff00 	bl	d500c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d520c:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   d5210:	f104 0270 	add.w	r2, r4, #112	; 0x70
   d5214:	a90c      	add	r1, sp, #48	; 0x30
   d5216:	2003      	movs	r0, #3
   d5218:	f7ff fef8 	bl	d500c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    sensorDataWriteNeeded = true;
   d521c:	4e40      	ldr	r6, [pc, #256]	; (d5320 <_Z16takeMeasurementsv+0x278>)
   d521e:	2201      	movs	r2, #1
   d5220:	7032      	strb	r2, [r6, #0]
    if ( ((sysStatus.sensorTwoConnected && sensorData.sensorTwoCurrent> 1) && ((sensorData.sensorTwoCurrent < sensorData.sensorTwoPreviousLow) || (sensorData.sensorTwoCurrent > sensorData.sensorTwoPreviousHigh))))  {
   d5222:	7f6a      	ldrb	r2, [r5, #29]
   d5224:	2a00      	cmp	r2, #0
   d5226:	d07d      	beq.n	d5324 <_Z16takeMeasurementsv+0x27c>
   d5228:	edd4 7a01 	vldr	s15, [r4, #4]
   d522c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5230:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5238:	dd74      	ble.n	d5324 <_Z16takeMeasurementsv+0x27c>
   d523a:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   d523e:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5246:	d406      	bmi.n	d5256 <_Z16takeMeasurementsv+0x1ae>
   d5248:	ed94 7a07 	vldr	s14, [r4, #28]
   d524c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5254:	dd66      	ble.n	d5324 <_Z16takeMeasurementsv+0x27c>
    sensorData.validData = true;
   d5256:	2501      	movs	r5, #1
   d5258:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
    sensorData.timeStamp = Time.now();
   d525c:	f005 f803 	bl	da266 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d5260:	7035      	strb	r5, [r6, #0]
    sensorData.timeStamp = Time.now();
   d5262:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    return 1;
   d5266:	4628      	mov	r0, r5
  }
   d5268:	b028      	add	sp, #160	; 0xa0
   d526a:	ecbd 8b06 	vpop	{d8-d10}
   d526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (sysStatus.operatingMode == 3){
   d5272:	2803      	cmp	r0, #3
   d5274:	d129      	bne.n	d52ca <_Z16takeMeasurementsv+0x222>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d5276:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d527a:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d527e:	4669      	mov	r1, sp
   d5280:	f7ff fec4 	bl	d500c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d5284:	7feb      	ldrb	r3, [r5, #31]
   d5286:	b1eb      	cbz	r3, d52c4 <_Z16takeMeasurementsv+0x21c>
   d5288:	4822      	ldr	r0, [pc, #136]	; (d5314 <_Z16takeMeasurementsv+0x26c>)
   d528a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d528e:	f002 f857 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d5292:	ec51 0b10 	vmov	r0, r1, d0
   d5296:	f006 f8d3 	bl	db440 <__aeabi_d2f>
   d529a:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);       
   d529c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d52a0:	b1eb      	cbz	r3, d52de <_Z16takeMeasurementsv+0x236>
   d52a2:	481d      	ldr	r0, [pc, #116]	; (d5318 <_Z16takeMeasurementsv+0x270>)
   d52a4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d52a8:	f002 f84a 	bl	d7340 <_ZN13EnergyMonitor8calcIrmsEj>
   d52ac:	ec51 0b10 	vmov	r0, r1, d0
   d52b0:	f006 f8c6 	bl	db440 <__aeabi_d2f>
   d52b4:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d52b6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d52ba:	2b00      	cmp	r3, #0
   d52bc:	d191      	bne.n	d51e2 <_Z16takeMeasurementsv+0x13a>
      else sensorData.sensorSixCurrent=0;
   d52be:	2300      	movs	r3, #0
   d52c0:	6163      	str	r3, [r4, #20]
   d52c2:	e7ab      	b.n	d521c <_Z16takeMeasurementsv+0x174>
      else sensorData.sensorFourCurrent=0;
   d52c4:	2300      	movs	r3, #0
   d52c6:	60e3      	str	r3, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d52c8:	e7e8      	b.n	d529c <_Z16takeMeasurementsv+0x1f4>
    else if (sysStatus.operatingMode == 4){
   d52ca:	2804      	cmp	r0, #4
   d52cc:	d1a6      	bne.n	d521c <_Z16takeMeasurementsv+0x174>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d52ce:	f104 0398 	add.w	r3, r4, #152	; 0x98
   d52d2:	f104 0288 	add.w	r2, r4, #136	; 0x88
   d52d6:	a918      	add	r1, sp, #96	; 0x60
   d52d8:	f7ff fe98 	bl	d500c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d52dc:	e7de      	b.n	d529c <_Z16takeMeasurementsv+0x1f4>
      else sensorData.sensorFiveCurrent=0;                  
   d52de:	2300      	movs	r3, #0
   d52e0:	6123      	str	r3, [r4, #16]
   d52e2:	e7e8      	b.n	d52b6 <_Z16takeMeasurementsv+0x20e>
   d52e4:	2003e430 	.word	0x2003e430
   d52e8:	2003dc20 	.word	0x2003dc20
   d52ec:	2003dc21 	.word	0x2003dc21
   d52f0:	2003dc22 	.word	0x2003dc22
   d52f4:	2003dc23 	.word	0x2003dc23
   d52f8:	2003dc24 	.word	0x2003dc24
   d52fc:	2003dc25 	.word	0x2003dc25
   d5300:	2003e448 	.word	0x2003e448
   d5304:	2003e5c0 	.word	0x2003e5c0
   d5308:	2003df58 	.word	0x2003df58
   d530c:	2003e010 	.word	0x2003e010
   d5310:	2003e0c8 	.word	0x2003e0c8
   d5314:	2003e180 	.word	0x2003e180
   d5318:	2003e238 	.word	0x2003e238
   d531c:	2003e2f0 	.word	0x2003e2f0
   d5320:	2003e4fc 	.word	0x2003e4fc
    } else if ( ((sysStatus.sensorOneConnected && sensorData.sensorOneCurrent> 1) && ((sensorData.sensorOneCurrent < sensorData.sensorOnePreviousLow) || (sensorData.sensorOneCurrent > sensorData.sensorOnePreviousHigh))) ){
   d5324:	7f2b      	ldrb	r3, [r5, #28]
   d5326:	b1bb      	cbz	r3, d5358 <_Z16takeMeasurementsv+0x2b0>
   d5328:	edd4 7a00 	vldr	s15, [r4]
   d532c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5330:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5338:	dd0e      	ble.n	d5358 <_Z16takeMeasurementsv+0x2b0>
   d533a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
   d533e:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5346:	d486      	bmi.n	d5256 <_Z16takeMeasurementsv+0x1ae>
   d5348:	ed94 7a06 	vldr	s14, [r4, #24]
   d534c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5354:	f73f af7f 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorThreeConnected && sensorData.sensorThreeCurrent >1) && ((sensorData.sensorThreeCurrent < sensorData.sensorThreePreviousLow) || (sensorData.sensorThreeCurrent > sensorData.sensorThreePreviousHigh))) ){
   d5358:	7fab      	ldrb	r3, [r5, #30]
   d535a:	b1c3      	cbz	r3, d538e <_Z16takeMeasurementsv+0x2e6>
   d535c:	edd4 7a02 	vldr	s15, [r4, #8]
   d5360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5364:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d536c:	dd0f      	ble.n	d538e <_Z16takeMeasurementsv+0x2e6>
   d536e:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d5372:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d537a:	f53f af6c 	bmi.w	d5256 <_Z16takeMeasurementsv+0x1ae>
   d537e:	ed94 7a08 	vldr	s14, [r4, #32]
   d5382:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d538a:	f73f af64 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFourConnected && sensorData.sensorFourCurrent> 1) && ((sensorData.sensorFourCurrent < sensorData.sensorFourPreviousLow) || (sensorData.sensorFourCurrent > sensorData.sensorFourPreviousHigh))) ){
   d538e:	7feb      	ldrb	r3, [r5, #31]
   d5390:	b1c3      	cbz	r3, d53c4 <_Z16takeMeasurementsv+0x31c>
   d5392:	edd4 7a03 	vldr	s15, [r4, #12]
   d5396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d539a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53a2:	dd0f      	ble.n	d53c4 <_Z16takeMeasurementsv+0x31c>
   d53a4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
   d53a8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53b0:	f53f af51 	bmi.w	d5256 <_Z16takeMeasurementsv+0x1ae>
   d53b4:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
   d53b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53c0:	f73f af49 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFiveConnected && sensorData.sensorFiveCurrent> 1) && ((sensorData.sensorFiveCurrent < sensorData.sensorFivePreviousLow) || (sensorData.sensorFiveCurrent > sensorData.sensorFivePreviousHigh))) ){
   d53c4:	f895 3020 	ldrb.w	r3, [r5, #32]
   d53c8:	b1c3      	cbz	r3, d53fc <_Z16takeMeasurementsv+0x354>
   d53ca:	edd4 7a04 	vldr	s15, [r4, #16]
   d53ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d53d2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53da:	dd0f      	ble.n	d53fc <_Z16takeMeasurementsv+0x354>
   d53dc:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   d53e0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53e8:	f53f af35 	bmi.w	d5256 <_Z16takeMeasurementsv+0x1ae>
   d53ec:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   d53f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53f8:	f73f af2d 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorSixConnected && sensorData.sensorSixCurrent> 1) && ((sensorData.sensorSixCurrent < sensorData.sensorSixPreviousLow) || (sensorData.sensorSixCurrent > sensorData.sensorSixPreviousHigh))) ){
   d53fc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d5400:	b1c3      	cbz	r3, d5434 <_Z16takeMeasurementsv+0x38c>
   d5402:	edd4 7a05 	vldr	s15, [r4, #20]
   d5406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d540a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5412:	dd0f      	ble.n	d5434 <_Z16takeMeasurementsv+0x38c>
   d5414:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
   d5418:	eef4 7ac7 	vcmpe.f32	s15, s14
   d541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5420:	f53f af19 	bmi.w	d5256 <_Z16takeMeasurementsv+0x1ae>
   d5424:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
   d5428:	eef4 7ac7 	vcmpe.f32	s15, s14
   d542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5430:	f73f af11 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else if ( (((sysStatus.operatingMode == 2 || sysStatus.operatingMode ==3) && sensorData.I_ThreePhaseLoad_One[0]> 1) && ((sensorData.I_ThreePhaseLoad_One[0] < sensorData.ThreePhaseLoadOnePreviousLow) || (sensorData.I_ThreePhaseLoad_One[0] > sensorData.ThreePhaseLoadOnePreviousHigh))) ){
   d5434:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d5436:	3b02      	subs	r3, #2
   d5438:	2b01      	cmp	r3, #1
   d543a:	d818      	bhi.n	d546e <_Z16takeMeasurementsv+0x3c6>
   d543c:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
   d5440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5444:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d544c:	dd0f      	ble.n	d546e <_Z16takeMeasurementsv+0x3c6>
   d544e:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
   d5452:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d545a:	f53f aefc 	bmi.w	d5256 <_Z16takeMeasurementsv+0x1ae>
   d545e:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
   d5462:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d546a:	f73f aef4 	bgt.w	d5256 <_Z16takeMeasurementsv+0x1ae>
    else return 0;
   d546e:	2000      	movs	r0, #0
   d5470:	e6fa      	b.n	d5268 <_Z16takeMeasurementsv+0x1c0>
   d5472:	bf00      	nop

000d5474 <loop>:
void loop() {
   d5474:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d5476:	4c87      	ldr	r4, [pc, #540]	; (d5694 <loop+0x220>)
   d5478:	7823      	ldrb	r3, [r4, #0]
   d547a:	3b01      	subs	r3, #1
void loop() {
   d547c:	b087      	sub	sp, #28
   d547e:	2b05      	cmp	r3, #5
   d5480:	d81b      	bhi.n	d54ba <loop+0x46>
   d5482:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5486:	00e2      	.short	0x00e2
   d5488:	00680006 	.word	0x00680006
   d548c:	004e0074 	.word	0x004e0074
   d5490:	0099      	.short	0x0099
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5492:	4b81      	ldr	r3, [pc, #516]	; (d5698 <loop+0x224>)
   d5494:	7a5b      	ldrb	r3, [r3, #9]
   d5496:	b12b      	cbz	r3, d54a4 <loop+0x30>
   d5498:	4b80      	ldr	r3, [pc, #512]	; (d569c <loop+0x228>)
   d549a:	781b      	ldrb	r3, [r3, #0]
   d549c:	2b02      	cmp	r3, #2
   d549e:	d001      	beq.n	d54a4 <loop+0x30>
   d54a0:	f7ff fd5c 	bl	d4f5c <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d54a4:	f004 fedf 	bl	da266 <_ZN9TimeClass3nowEv>
   d54a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d54ac:	fb90 f2f3 	sdiv	r2, r0, r3
   d54b0:	fb02 0313 	mls	r3, r2, r3, r0
   d54b4:	b90b      	cbnz	r3, d54ba <loop+0x46>
   d54b6:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d54b8:	7023      	strb	r3, [r4, #0]
  DeviceNameHelperRetained::instance().loop();
   d54ba:	f001 fd49 	bl	d6f50 <_ZN24DeviceNameHelperRetained8instanceEv>
   d54be:	f001 fd23 	bl	d6f08 <_ZN16DeviceNameHelper4loopEv>
  CloudConfig::instance().loop();
   d54c2:	f001 f9e7 	bl	d6894 <_ZN11CloudConfig8instanceEv>
   d54c6:	f001 fa00 	bl	d68ca <_ZN11CloudConfig4loopEv>
  rtc.loop();                                                                               // keeps the clock up to date
   d54ca:	4875      	ldr	r0, [pc, #468]	; (d56a0 <loop+0x22c>)
   d54cc:	f002 fc22 	bl	d7d14 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d54d0:	4b74      	ldr	r3, [pc, #464]	; (d56a4 <loop+0x230>)
   d54d2:	781b      	ldrb	r3, [r3, #0]
   d54d4:	b10b      	cbz	r3, d54da <loop+0x66>
   d54d6:	f7ff fad5 	bl	d4a84 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d54da:	4c73      	ldr	r4, [pc, #460]	; (d56a8 <loop+0x234>)
   d54dc:	7823      	ldrb	r3, [r4, #0]
   d54de:	b13b      	cbz	r3, d54f0 <loop+0x7c>
   d54e0:	2334      	movs	r3, #52	; 0x34
   d54e2:	4a6d      	ldr	r2, [pc, #436]	; (d5698 <loop+0x224>)
   d54e4:	4871      	ldr	r0, [pc, #452]	; (d56ac <loop+0x238>)
   d54e6:	2101      	movs	r1, #1
   d54e8:	f002 f837 	bl	d755a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d54ec:	2300      	movs	r3, #0
   d54ee:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d54f0:	4c6f      	ldr	r4, [pc, #444]	; (d56b0 <loop+0x23c>)
   d54f2:	7823      	ldrb	r3, [r4, #0]
   d54f4:	b143      	cbz	r3, d5508 <loop+0x94>
   d54f6:	23b4      	movs	r3, #180	; 0xb4
   d54f8:	4a6e      	ldr	r2, [pc, #440]	; (d56b4 <loop+0x240>)
   d54fa:	486c      	ldr	r0, [pc, #432]	; (d56ac <loop+0x238>)
   d54fc:	f44f 7100 	mov.w	r1, #512	; 0x200
   d5500:	f002 f82b 	bl	d755a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d5504:	2300      	movs	r3, #0
   d5506:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d5508:	4c6b      	ldr	r4, [pc, #428]	; (d56b8 <loop+0x244>)
   d550a:	7823      	ldrb	r3, [r4, #0]
   d550c:	b13b      	cbz	r3, d551e <loop+0xaa>
   d550e:	2318      	movs	r3, #24
   d5510:	4a6a      	ldr	r2, [pc, #424]	; (d56bc <loop+0x248>)
   d5512:	4866      	ldr	r0, [pc, #408]	; (d56ac <loop+0x238>)
   d5514:	21a0      	movs	r1, #160	; 0xa0
   d5516:	f002 f820 	bl	d755a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d551a:	2300      	movs	r3, #0
   d551c:	7023      	strb	r3, [r4, #0]
}
   d551e:	b007      	add	sp, #28
   d5520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5522:	4d5d      	ldr	r5, [pc, #372]	; (d5698 <loop+0x224>)
   d5524:	7a6a      	ldrb	r2, [r5, #9]
   d5526:	b12a      	cbz	r2, d5534 <loop+0xc0>
   d5528:	4b5c      	ldr	r3, [pc, #368]	; (d569c <loop+0x228>)
   d552a:	781b      	ldrb	r3, [r3, #0]
   d552c:	2b05      	cmp	r3, #5
   d552e:	d001      	beq.n	d5534 <loop+0xc0>
   d5530:	f7ff fd14 	bl	d4f5c <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d5534:	f7ff fdb8 	bl	d50a8 <_Z16takeMeasurementsv>
   d5538:	b108      	cbz	r0, d553e <loop+0xca>
    state = REPORTING_STATE;
   d553a:	2304      	movs	r3, #4
   d553c:	e7bc      	b.n	d54b8 <loop+0x44>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d553e:	f004 fe92 	bl	da266 <_ZN9TimeClass3nowEv>
   d5542:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5544:	fb90 f2f3 	sdiv	r2, r0, r3
   d5548:	fb02 0313 	mls	r3, r2, r3, r0
   d554c:	b90b      	cbnz	r3, d5552 <loop+0xde>
   d554e:	2303      	movs	r3, #3
   d5550:	e7b2      	b.n	d54b8 <loop+0x44>
    else state = IDLE_STATE;
   d5552:	2302      	movs	r3, #2
   d5554:	e7b0      	b.n	d54b8 <loop+0x44>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5556:	4b50      	ldr	r3, [pc, #320]	; (d5698 <loop+0x224>)
   d5558:	7a5b      	ldrb	r3, [r3, #9]
   d555a:	b12b      	cbz	r3, d5568 <loop+0xf4>
   d555c:	4b4f      	ldr	r3, [pc, #316]	; (d569c <loop+0x228>)
   d555e:	781b      	ldrb	r3, [r3, #0]
   d5560:	2b03      	cmp	r3, #3
   d5562:	d001      	beq.n	d5568 <loop+0xf4>
   d5564:	f7ff fcfa 	bl	d4f5c <_Z22publishStateTransitionv>
    takeMeasurements();
   d5568:	f7ff fd9e 	bl	d50a8 <_Z16takeMeasurementsv>
   d556c:	e7e5      	b.n	d553a <loop+0xc6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d556e:	4b4a      	ldr	r3, [pc, #296]	; (d5698 <loop+0x224>)
   d5570:	7a5b      	ldrb	r3, [r3, #9]
   d5572:	b12b      	cbz	r3, d5580 <loop+0x10c>
   d5574:	4b49      	ldr	r3, [pc, #292]	; (d569c <loop+0x228>)
   d5576:	781b      	ldrb	r3, [r3, #0]
   d5578:	2b04      	cmp	r3, #4
   d557a:	d001      	beq.n	d5580 <loop+0x10c>
   d557c:	f7ff fcee 	bl	d4f5c <_Z22publishStateTransitionv>
   d5580:	f003 f9ec 	bl	d895c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5584:	b168      	cbz	r0, d55a2 <loop+0x12e>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5586:	f004 fe7f 	bl	da288 <_ZN9TimeClass4hourEv>
   d558a:	280c      	cmp	r0, #12
   d558c:	d105      	bne.n	d559a <loop+0x126>
   d558e:	f003 f9e5 	bl	d895c <spark_cloud_flag_connected>
        if (!connected()) {
   d5592:	b110      	cbz	r0, d559a <loop+0x126>
        return spark_sync_time(NULL);
   d5594:	2000      	movs	r0, #0
   d5596:	f003 fa01 	bl	d899c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d559a:	f7ff fa9d 	bl	d4ad8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d559e:	2306      	movs	r3, #6
   d55a0:	e78a      	b.n	d54b8 <loop+0x44>
        spark_cloud_flag_connect();
   d55a2:	f003 f9d3 	bl	d894c <spark_cloud_flag_connect>
      sendEvent();    
   d55a6:	f7ff fa97 	bl	d4ad8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;
   d55aa:	2306      	movs	r3, #6
   d55ac:	7023      	strb	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d55ae:	f002 ffd7 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d55b2:	4b43      	ldr	r3, [pc, #268]	; (d56c0 <loop+0x24c>)
   d55b4:	6018      	str	r0, [r3, #0]
   d55b6:	e780      	b.n	d54ba <loop+0x46>
    if (state != oldState) {
   d55b8:	4b38      	ldr	r3, [pc, #224]	; (d569c <loop+0x228>)
   d55ba:	4d42      	ldr	r5, [pc, #264]	; (d56c4 <loop+0x250>)
   d55bc:	781b      	ldrb	r3, [r3, #0]
   d55be:	2b06      	cmp	r3, #6
   d55c0:	d00a      	beq.n	d55d8 <loop+0x164>
   d55c2:	f002 ffcd 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                     // We are connected and we have published, head to the response wait state
   d55c6:	4b40      	ldr	r3, [pc, #256]	; (d56c8 <loop+0x254>)
   d55c8:	6018      	str	r0, [r3, #0]
      dataInFlight = true;                                             // set the data inflight flag
   d55ca:	2301      	movs	r3, #1
   d55cc:	702b      	strb	r3, [r5, #0]
      if (sysStatus.verboseMode) publishStateTransition();
   d55ce:	4b32      	ldr	r3, [pc, #200]	; (d5698 <loop+0x224>)
   d55d0:	7a5b      	ldrb	r3, [r3, #9]
   d55d2:	b123      	cbz	r3, d55de <loop+0x16a>
   d55d4:	f7ff fcc2 	bl	d4f5c <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                   // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d55d8:	782b      	ldrb	r3, [r5, #0]
   d55da:	2b00      	cmp	r3, #0
   d55dc:	d0b9      	beq.n	d5552 <loop+0xde>
   d55de:	f002 ffbf 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d55e2:	4b39      	ldr	r3, [pc, #228]	; (d56c8 <loop+0x254>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	1ac0      	subs	r0, r0, r3
   d55e8:	f24c 3350 	movw	r3, #50000	; 0xc350
   d55ec:	4298      	cmp	r0, r3
   d55ee:	f67f af64 	bls.w	d54ba <loop+0x46>
      publishQueue.publish("InFlight",String(dataInFlight),PRIVATE);
   d55f2:	7829      	ldrb	r1, [r5, #0]
   d55f4:	4d35      	ldr	r5, [pc, #212]	; (d56cc <loop+0x258>)
      resetTimeStamp = millis();
   d55f6:	4f32      	ldr	r7, [pc, #200]	; (d56c0 <loop+0x24c>)
   d55f8:	2600      	movs	r6, #0
      publishQueue.publish("InFlight",String(dataInFlight),PRIVATE);
   d55fa:	220a      	movs	r2, #10
   d55fc:	a802      	add	r0, sp, #8
   d55fe:	f004 fc30 	bl	d9e62 <_ZN6StringC1Eih>
   d5602:	f88d 6000 	strb.w	r6, [sp]
   d5606:	782b      	ldrb	r3, [r5, #0]
   d5608:	9a02      	ldr	r2, [sp, #8]
   d560a:	4931      	ldr	r1, [pc, #196]	; (d56d0 <loop+0x25c>)
   d560c:	4831      	ldr	r0, [pc, #196]	; (d56d4 <loop+0x260>)
   d560e:	f7fe fed6 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5612:	a802      	add	r0, sp, #8
   d5614:	f004 fb9a 	bl	d9d4c <_ZN6StringD1Ev>
      publishQueue.publish("ERROR LOG","GOING TO ERROR FROM RESP WAIT",PRIVATE);
   d5618:	f88d 6000 	strb.w	r6, [sp]
   d561c:	782b      	ldrb	r3, [r5, #0]
   d561e:	4a2e      	ldr	r2, [pc, #184]	; (d56d8 <loop+0x264>)
   d5620:	492e      	ldr	r1, [pc, #184]	; (d56dc <loop+0x268>)
   d5622:	482c      	ldr	r0, [pc, #176]	; (d56d4 <loop+0x260>)
   d5624:	f7fe fecb 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5628:	f002 ff9a 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d562c:	f88d 6000 	strb.w	r6, [sp]
   d5630:	782b      	ldrb	r3, [r5, #0]
   d5632:	4a2b      	ldr	r2, [pc, #172]	; (d56e0 <loop+0x26c>)
   d5634:	492b      	ldr	r1, [pc, #172]	; (d56e4 <loop+0x270>)
      resetTimeStamp = millis();
   d5636:	6038      	str	r0, [r7, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5638:	4826      	ldr	r0, [pc, #152]	; (d56d4 <loop+0x260>)
   d563a:	f7fe fec0 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d563e:	2301      	movs	r3, #1
   d5640:	7023      	strb	r3, [r4, #0]
   d5642:	f002 ff8d 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5646:	6038      	str	r0, [r7, #0]
   d5648:	e737      	b.n	d54ba <loop+0x46>
    if (state != oldState) publishStateTransition();
   d564a:	4b14      	ldr	r3, [pc, #80]	; (d569c <loop+0x228>)
   d564c:	781b      	ldrb	r3, [r3, #0]
   d564e:	2b01      	cmp	r3, #1
   d5650:	d001      	beq.n	d5656 <loop+0x1e2>
   d5652:	f7ff fc83 	bl	d4f5c <_Z22publishStateTransitionv>
   d5656:	f002 ff83 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d565a:	4b19      	ldr	r3, [pc, #100]	; (d56c0 <loop+0x24c>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d5662:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d5666:	4283      	cmp	r3, r0
   d5668:	f4bf af27 	bcs.w	d54ba <loop+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d566c:	f003 f976 	bl	d895c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d5670:	b148      	cbz	r0, d5686 <loop+0x212>
   d5672:	2300      	movs	r3, #0
   d5674:	f88d 3000 	strb.w	r3, [sp]
   d5678:	4b14      	ldr	r3, [pc, #80]	; (d56cc <loop+0x258>)
   d567a:	4a1b      	ldr	r2, [pc, #108]	; (d56e8 <loop+0x274>)
   d567c:	781b      	ldrb	r3, [r3, #0]
   d567e:	491b      	ldr	r1, [pc, #108]	; (d56ec <loop+0x278>)
   d5680:	4814      	ldr	r0, [pc, #80]	; (d56d4 <loop+0x260>)
   d5682:	f7fe fe9c 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d5686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d568a:	f003 fa7f 	bl	d8b8c <delay>
      System.reset();
   d568e:	f004 fc6f 	bl	d9f70 <_ZN11SystemClass5resetEv>
   d5692:	e712      	b.n	d54ba <loop+0x46>
   d5694:	2003e5bd 	.word	0x2003e5bd
   d5698:	2003e5c0 	.word	0x2003e5c0
   d569c:	2003e3d4 	.word	0x2003e3d4
   d56a0:	2003e414 	.word	0x2003e414
   d56a4:	2003e5f5 	.word	0x2003e5f5
   d56a8:	2003e5f4 	.word	0x2003e5f4
   d56ac:	2003e3a8 	.word	0x2003e3a8
   d56b0:	2003e4fc 	.word	0x2003e4fc
   d56b4:	2003e448 	.word	0x2003e448
   d56b8:	2003df54 	.word	0x2003df54
   d56bc:	2003e430 	.word	0x2003e430
   d56c0:	2003e410 	.word	0x2003e410
   d56c4:	2003df55 	.word	0x2003df55
   d56c8:	2003df30 	.word	0x2003df30
   d56cc:	2003df2d 	.word	0x2003df2d
   d56d0:	000dd7c5 	.word	0x000dd7c5
   d56d4:	2003e3d8 	.word	0x2003e3d8
   d56d8:	000dd7ce 	.word	0x000dd7ce
   d56dc:	000dd7ec 	.word	0x000dd7ec
   d56e0:	000de334 	.word	0x000de334
   d56e4:	000dd7f6 	.word	0x000dd7f6
   d56e8:	000dd80f 	.word	0x000dd80f
   d56ec:	000dd823 	.word	0x000dd823

000d56f0 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d56f0:	b510      	push	{r4, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d56f2:	4c20      	ldr	r4, [pc, #128]	; (d5774 <_Z11loadEmonlibv+0x84>)
   d56f4:	6820      	ldr	r0, [r4, #0]
   d56f6:	f005 fb7b 	bl	dadf0 <__aeabi_f2d>
   d56fa:	4b1f      	ldr	r3, [pc, #124]	; (d5778 <_Z11loadEmonlibv+0x88>)
   d56fc:	ec41 0b10 	vmov	d0, r0, r1
   d5700:	7819      	ldrb	r1, [r3, #0]
   d5702:	481e      	ldr	r0, [pc, #120]	; (d577c <_Z11loadEmonlibv+0x8c>)
   d5704:	f001 fe12 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d5708:	6860      	ldr	r0, [r4, #4]
   d570a:	f005 fb71 	bl	dadf0 <__aeabi_f2d>
   d570e:	4b1c      	ldr	r3, [pc, #112]	; (d5780 <_Z11loadEmonlibv+0x90>)
   d5710:	ec41 0b10 	vmov	d0, r0, r1
   d5714:	7819      	ldrb	r1, [r3, #0]
   d5716:	481b      	ldr	r0, [pc, #108]	; (d5784 <_Z11loadEmonlibv+0x94>)
   d5718:	f001 fe08 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d571c:	68a0      	ldr	r0, [r4, #8]
   d571e:	f005 fb67 	bl	dadf0 <__aeabi_f2d>
   d5722:	4b19      	ldr	r3, [pc, #100]	; (d5788 <_Z11loadEmonlibv+0x98>)
   d5724:	ec41 0b10 	vmov	d0, r0, r1
   d5728:	7819      	ldrb	r1, [r3, #0]
   d572a:	4818      	ldr	r0, [pc, #96]	; (d578c <_Z11loadEmonlibv+0x9c>)
   d572c:	f001 fdfe 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5730:	68e0      	ldr	r0, [r4, #12]
   d5732:	f005 fb5d 	bl	dadf0 <__aeabi_f2d>
   d5736:	4b16      	ldr	r3, [pc, #88]	; (d5790 <_Z11loadEmonlibv+0xa0>)
   d5738:	ec41 0b10 	vmov	d0, r0, r1
   d573c:	7819      	ldrb	r1, [r3, #0]
   d573e:	4815      	ldr	r0, [pc, #84]	; (d5794 <_Z11loadEmonlibv+0xa4>)
   d5740:	f001 fdf4 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d5744:	6920      	ldr	r0, [r4, #16]
   d5746:	f005 fb53 	bl	dadf0 <__aeabi_f2d>
   d574a:	4b13      	ldr	r3, [pc, #76]	; (d5798 <_Z11loadEmonlibv+0xa8>)
   d574c:	ec41 0b10 	vmov	d0, r0, r1
   d5750:	7819      	ldrb	r1, [r3, #0]
   d5752:	4812      	ldr	r0, [pc, #72]	; (d579c <_Z11loadEmonlibv+0xac>)
   d5754:	f001 fdea 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d5758:	6960      	ldr	r0, [r4, #20]
   d575a:	f005 fb49 	bl	dadf0 <__aeabi_f2d>
   d575e:	4b10      	ldr	r3, [pc, #64]	; (d57a0 <_Z11loadEmonlibv+0xb0>)
   d5760:	ec41 0b10 	vmov	d0, r0, r1
   d5764:	7819      	ldrb	r1, [r3, #0]
   d5766:	480f      	ldr	r0, [pc, #60]	; (d57a4 <_Z11loadEmonlibv+0xb4>)
   d5768:	f001 fde0 	bl	d732c <_ZN13EnergyMonitor7currentEjd>
  constantsStatusWriteNeeded = true;
   d576c:	4b0e      	ldr	r3, [pc, #56]	; (d57a8 <_Z11loadEmonlibv+0xb8>)
   d576e:	2201      	movs	r2, #1
   d5770:	701a      	strb	r2, [r3, #0]
}
   d5772:	bd10      	pop	{r4, pc}
   d5774:	2003e430 	.word	0x2003e430
   d5778:	2003dc20 	.word	0x2003dc20
   d577c:	2003df58 	.word	0x2003df58
   d5780:	2003dc21 	.word	0x2003dc21
   d5784:	2003e010 	.word	0x2003e010
   d5788:	2003dc22 	.word	0x2003dc22
   d578c:	2003e0c8 	.word	0x2003e0c8
   d5790:	2003dc23 	.word	0x2003dc23
   d5794:	2003e180 	.word	0x2003e180
   d5798:	2003dc24 	.word	0x2003dc24
   d579c:	2003e238 	.word	0x2003e238
   d57a0:	2003dc25 	.word	0x2003dc25
   d57a4:	2003e2f0 	.word	0x2003e2f0
   d57a8:	2003df54 	.word	0x2003df54

000d57ac <_Z20updateConstantValuesv>:
{   
   d57ac:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d57ae:	4c22      	ldr	r4, [pc, #136]	; (d5838 <_Z20updateConstantValuesv+0x8c>)
   d57b0:	6820      	ldr	r0, [r4, #0]
   d57b2:	f005 fb1d 	bl	dadf0 <__aeabi_f2d>
   d57b6:	4a21      	ldr	r2, [pc, #132]	; (d583c <_Z20updateConstantValuesv+0x90>)
   d57b8:	e9cd 0100 	strd	r0, r1, [sp]
   d57bc:	2120      	movs	r1, #32
   d57be:	4820      	ldr	r0, [pc, #128]	; (d5840 <_Z20updateConstantValuesv+0x94>)
   d57c0:	f003 f994 	bl	d8aec <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d57c4:	6860      	ldr	r0, [r4, #4]
   d57c6:	f005 fb13 	bl	dadf0 <__aeabi_f2d>
   d57ca:	4a1e      	ldr	r2, [pc, #120]	; (d5844 <_Z20updateConstantValuesv+0x98>)
   d57cc:	e9cd 0100 	strd	r0, r1, [sp]
   d57d0:	2120      	movs	r1, #32
   d57d2:	481d      	ldr	r0, [pc, #116]	; (d5848 <_Z20updateConstantValuesv+0x9c>)
   d57d4:	f003 f98a 	bl	d8aec <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d57d8:	68a0      	ldr	r0, [r4, #8]
   d57da:	f005 fb09 	bl	dadf0 <__aeabi_f2d>
   d57de:	4a1b      	ldr	r2, [pc, #108]	; (d584c <_Z20updateConstantValuesv+0xa0>)
   d57e0:	e9cd 0100 	strd	r0, r1, [sp]
   d57e4:	2120      	movs	r1, #32
   d57e6:	481a      	ldr	r0, [pc, #104]	; (d5850 <_Z20updateConstantValuesv+0xa4>)
   d57e8:	f003 f980 	bl	d8aec <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d57ec:	68e0      	ldr	r0, [r4, #12]
   d57ee:	f005 faff 	bl	dadf0 <__aeabi_f2d>
   d57f2:	4a18      	ldr	r2, [pc, #96]	; (d5854 <_Z20updateConstantValuesv+0xa8>)
   d57f4:	e9cd 0100 	strd	r0, r1, [sp]
   d57f8:	2120      	movs	r1, #32
   d57fa:	4817      	ldr	r0, [pc, #92]	; (d5858 <_Z20updateConstantValuesv+0xac>)
   d57fc:	f003 f976 	bl	d8aec <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d5800:	6920      	ldr	r0, [r4, #16]
   d5802:	f005 faf5 	bl	dadf0 <__aeabi_f2d>
   d5806:	4a15      	ldr	r2, [pc, #84]	; (d585c <_Z20updateConstantValuesv+0xb0>)
   d5808:	e9cd 0100 	strd	r0, r1, [sp]
   d580c:	2120      	movs	r1, #32
   d580e:	4814      	ldr	r0, [pc, #80]	; (d5860 <_Z20updateConstantValuesv+0xb4>)
   d5810:	f003 f96c 	bl	d8aec <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d5814:	6960      	ldr	r0, [r4, #20]
   d5816:	f005 faeb 	bl	dadf0 <__aeabi_f2d>
   d581a:	4a12      	ldr	r2, [pc, #72]	; (d5864 <_Z20updateConstantValuesv+0xb8>)
   d581c:	e9cd 0100 	strd	r0, r1, [sp]
   d5820:	2120      	movs	r1, #32
   d5822:	4811      	ldr	r0, [pc, #68]	; (d5868 <_Z20updateConstantValuesv+0xbc>)
   d5824:	f003 f962 	bl	d8aec <snprintf>
    loadEmonlib();
   d5828:	f7ff ff62 	bl	d56f0 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d582c:	4b0f      	ldr	r3, [pc, #60]	; (d586c <_Z20updateConstantValuesv+0xc0>)
   d582e:	2201      	movs	r2, #1
   d5830:	701a      	strb	r2, [r3, #0]
} 
   d5832:	b002      	add	sp, #8
   d5834:	bd10      	pop	{r4, pc}
   d5836:	bf00      	nop
   d5838:	2003e430 	.word	0x2003e430
   d583c:	000dd829 	.word	0x000dd829
   d5840:	2003e53d 	.word	0x2003e53d
   d5844:	000dd837 	.word	0x000dd837
   d5848:	2003e59d 	.word	0x2003e59d
   d584c:	000dd844 	.word	0x000dd844
   d5850:	2003e57d 	.word	0x2003e57d
   d5854:	000dd854 	.word	0x000dd854
   d5858:	2003e51d 	.word	0x2003e51d
   d585c:	000dd871 	.word	0x000dd871
   d5860:	2003e4fd 	.word	0x2003e4fd
   d5864:	000dd88e 	.word	0x000dd88e
   d5868:	2003e55d 	.word	0x2003e55d
   d586c:	2003df54 	.word	0x2003df54

000d5870 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d5870:	b500      	push	{lr}
   d5872:	b089      	sub	sp, #36	; 0x24
   d5874:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d5876:	f004 fb31 	bl	d9edc <_ZNK6String7toFloatEv>
   d587a:	4b0d      	ldr	r3, [pc, #52]	; (d58b0 <_Z14setConstantOne6String+0x40>)
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d587c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d587e:	ed83 0a00 	vstr	s0, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d5882:	a804      	add	r0, sp, #16
   d5884:	f004 fad0 	bl	d9e28 <_ZN6StringC1ERKS_>
   d5888:	2300      	movs	r3, #0
   d588a:	f88d 3000 	strb.w	r3, [sp]
   d588e:	4b09      	ldr	r3, [pc, #36]	; (d58b4 <_Z14setConstantOne6String+0x44>)
   d5890:	9a04      	ldr	r2, [sp, #16]
   d5892:	781b      	ldrb	r3, [r3, #0]
   d5894:	4908      	ldr	r1, [pc, #32]	; (d58b8 <_Z14setConstantOne6String+0x48>)
   d5896:	4809      	ldr	r0, [pc, #36]	; (d58bc <_Z14setConstantOne6String+0x4c>)
   d5898:	f7fe fd91 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d589c:	a804      	add	r0, sp, #16
   d589e:	f004 fa55 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d58a2:	f7ff ff83 	bl	d57ac <_Z20updateConstantValuesv>
}
   d58a6:	2001      	movs	r0, #1
   d58a8:	b009      	add	sp, #36	; 0x24
   d58aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d58ae:	bf00      	nop
   d58b0:	2003e430 	.word	0x2003e430
   d58b4:	2003df2d 	.word	0x2003df2d
   d58b8:	000dd8aa 	.word	0x000dd8aa
   d58bc:	2003e3d8 	.word	0x2003e3d8

000d58c0 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d58c0:	b500      	push	{lr}
   d58c2:	b089      	sub	sp, #36	; 0x24
   d58c4:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d58c6:	f004 fb09 	bl	d9edc <_ZNK6String7toFloatEv>
   d58ca:	4b0d      	ldr	r3, [pc, #52]	; (d5900 <_Z14setConstantTwo6String+0x40>)
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d58cc:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d58ce:	ed83 0a01 	vstr	s0, [r3, #4]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d58d2:	a804      	add	r0, sp, #16
   d58d4:	f004 faa8 	bl	d9e28 <_ZN6StringC1ERKS_>
   d58d8:	2300      	movs	r3, #0
   d58da:	f88d 3000 	strb.w	r3, [sp]
   d58de:	4b09      	ldr	r3, [pc, #36]	; (d5904 <_Z14setConstantTwo6String+0x44>)
   d58e0:	9a04      	ldr	r2, [sp, #16]
   d58e2:	781b      	ldrb	r3, [r3, #0]
   d58e4:	4908      	ldr	r1, [pc, #32]	; (d5908 <_Z14setConstantTwo6String+0x48>)
   d58e6:	4809      	ldr	r0, [pc, #36]	; (d590c <_Z14setConstantTwo6String+0x4c>)
   d58e8:	f7fe fd69 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d58ec:	a804      	add	r0, sp, #16
   d58ee:	f004 fa2d 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d58f2:	f7ff ff5b 	bl	d57ac <_Z20updateConstantValuesv>
}
   d58f6:	2001      	movs	r0, #1
   d58f8:	b009      	add	sp, #36	; 0x24
   d58fa:	f85d fb04 	ldr.w	pc, [sp], #4
   d58fe:	bf00      	nop
   d5900:	2003e430 	.word	0x2003e430
   d5904:	2003df2d 	.word	0x2003df2d
   d5908:	000dd8c5 	.word	0x000dd8c5
   d590c:	2003e3d8 	.word	0x2003e3d8

000d5910 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5910:	b500      	push	{lr}
   d5912:	b089      	sub	sp, #36	; 0x24
   d5914:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5916:	f004 fae1 	bl	d9edc <_ZNK6String7toFloatEv>
   d591a:	4b0d      	ldr	r3, [pc, #52]	; (d5950 <_Z16setConstantThree6String+0x40>)
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d591c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d591e:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5922:	a804      	add	r0, sp, #16
   d5924:	f004 fa80 	bl	d9e28 <_ZN6StringC1ERKS_>
   d5928:	2300      	movs	r3, #0
   d592a:	f88d 3000 	strb.w	r3, [sp]
   d592e:	4b09      	ldr	r3, [pc, #36]	; (d5954 <_Z16setConstantThree6String+0x44>)
   d5930:	9a04      	ldr	r2, [sp, #16]
   d5932:	781b      	ldrb	r3, [r3, #0]
   d5934:	4908      	ldr	r1, [pc, #32]	; (d5958 <_Z16setConstantThree6String+0x48>)
   d5936:	4809      	ldr	r0, [pc, #36]	; (d595c <_Z16setConstantThree6String+0x4c>)
   d5938:	f7fe fd41 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d593c:	a804      	add	r0, sp, #16
   d593e:	f004 fa05 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d5942:	f7ff ff33 	bl	d57ac <_Z20updateConstantValuesv>
}
   d5946:	2001      	movs	r0, #1
   d5948:	b009      	add	sp, #36	; 0x24
   d594a:	f85d fb04 	ldr.w	pc, [sp], #4
   d594e:	bf00      	nop
   d5950:	2003e430 	.word	0x2003e430
   d5954:	2003df2d 	.word	0x2003df2d
   d5958:	000dd8e0 	.word	0x000dd8e0
   d595c:	2003e3d8 	.word	0x2003e3d8

000d5960 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d5960:	b500      	push	{lr}
   d5962:	b089      	sub	sp, #36	; 0x24
   d5964:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d5966:	f004 fab9 	bl	d9edc <_ZNK6String7toFloatEv>
   d596a:	4b0d      	ldr	r3, [pc, #52]	; (d59a0 <_Z15setConstantFour6String+0x40>)
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d596c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d596e:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d5972:	a804      	add	r0, sp, #16
   d5974:	f004 fa58 	bl	d9e28 <_ZN6StringC1ERKS_>
   d5978:	2300      	movs	r3, #0
   d597a:	f88d 3000 	strb.w	r3, [sp]
   d597e:	4b09      	ldr	r3, [pc, #36]	; (d59a4 <_Z15setConstantFour6String+0x44>)
   d5980:	9a04      	ldr	r2, [sp, #16]
   d5982:	781b      	ldrb	r3, [r3, #0]
   d5984:	4908      	ldr	r1, [pc, #32]	; (d59a8 <_Z15setConstantFour6String+0x48>)
   d5986:	4809      	ldr	r0, [pc, #36]	; (d59ac <_Z15setConstantFour6String+0x4c>)
   d5988:	f7fe fd19 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d598c:	a804      	add	r0, sp, #16
   d598e:	f004 f9dd 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d5992:	f7ff ff0b 	bl	d57ac <_Z20updateConstantValuesv>
}
   d5996:	2001      	movs	r0, #1
   d5998:	b009      	add	sp, #36	; 0x24
   d599a:	f85d fb04 	ldr.w	pc, [sp], #4
   d599e:	bf00      	nop
   d59a0:	2003e430 	.word	0x2003e430
   d59a4:	2003df2d 	.word	0x2003df2d
   d59a8:	000dd8fd 	.word	0x000dd8fd
   d59ac:	2003e3d8 	.word	0x2003e3d8

000d59b0 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d59b0:	b500      	push	{lr}
   d59b2:	b089      	sub	sp, #36	; 0x24
   d59b4:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d59b6:	f004 fa91 	bl	d9edc <_ZNK6String7toFloatEv>
   d59ba:	4b0d      	ldr	r3, [pc, #52]	; (d59f0 <_Z15setConstantFive6String+0x40>)
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d59bc:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d59be:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d59c2:	a804      	add	r0, sp, #16
   d59c4:	f004 fa30 	bl	d9e28 <_ZN6StringC1ERKS_>
   d59c8:	2300      	movs	r3, #0
   d59ca:	f88d 3000 	strb.w	r3, [sp]
   d59ce:	4b09      	ldr	r3, [pc, #36]	; (d59f4 <_Z15setConstantFive6String+0x44>)
   d59d0:	9a04      	ldr	r2, [sp, #16]
   d59d2:	781b      	ldrb	r3, [r3, #0]
   d59d4:	4908      	ldr	r1, [pc, #32]	; (d59f8 <_Z15setConstantFive6String+0x48>)
   d59d6:	4809      	ldr	r0, [pc, #36]	; (d59fc <_Z15setConstantFive6String+0x4c>)
   d59d8:	f7fe fcf1 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d59dc:	a804      	add	r0, sp, #16
   d59de:	f004 f9b5 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d59e2:	f7ff fee3 	bl	d57ac <_Z20updateConstantValuesv>
}
   d59e6:	2001      	movs	r0, #1
   d59e8:	b009      	add	sp, #36	; 0x24
   d59ea:	f85d fb04 	ldr.w	pc, [sp], #4
   d59ee:	bf00      	nop
   d59f0:	2003e430 	.word	0x2003e430
   d59f4:	2003df2d 	.word	0x2003df2d
   d59f8:	000dd919 	.word	0x000dd919
   d59fc:	2003e3d8 	.word	0x2003e3d8

000d5a00 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5a00:	b500      	push	{lr}
   d5a02:	b089      	sub	sp, #36	; 0x24
   d5a04:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5a06:	f004 fa69 	bl	d9edc <_ZNK6String7toFloatEv>
   d5a0a:	4b0d      	ldr	r3, [pc, #52]	; (d5a40 <_Z14setConstantSix6String+0x40>)
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5a0c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5a0e:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5a12:	a804      	add	r0, sp, #16
   d5a14:	f004 fa08 	bl	d9e28 <_ZN6StringC1ERKS_>
   d5a18:	2300      	movs	r3, #0
   d5a1a:	f88d 3000 	strb.w	r3, [sp]
   d5a1e:	4b09      	ldr	r3, [pc, #36]	; (d5a44 <_Z14setConstantSix6String+0x44>)
   d5a20:	9a04      	ldr	r2, [sp, #16]
   d5a22:	781b      	ldrb	r3, [r3, #0]
   d5a24:	4908      	ldr	r1, [pc, #32]	; (d5a48 <_Z14setConstantSix6String+0x48>)
   d5a26:	4809      	ldr	r0, [pc, #36]	; (d5a4c <_Z14setConstantSix6String+0x4c>)
   d5a28:	f7fe fcc9 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5a2c:	a804      	add	r0, sp, #16
   d5a2e:	f004 f98d 	bl	d9d4c <_ZN6StringD1Ev>
  updateConstantValues();
   d5a32:	f7ff febb 	bl	d57ac <_Z20updateConstantValuesv>
}
   d5a36:	2001      	movs	r0, #1
   d5a38:	b009      	add	sp, #36	; 0x24
   d5a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a3e:	bf00      	nop
   d5a40:	2003e430 	.word	0x2003e430
   d5a44:	2003df2d 	.word	0x2003df2d
   d5a48:	000dd935 	.word	0x000dd935
   d5a4c:	2003e3d8 	.word	0x2003e3d8

000d5a50 <_Z17sendConfigurationv>:
  }
  else return 0;
}

// This function is used for onsite checking and debugging. It sends device configuration as json data. 
void sendConfiguration(){
   d5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a52:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  char data[512];
  memset(data, 0, sizeof(data));
   d5a56:	f44f 7400 	mov.w	r4, #512	; 0x200
   d5a5a:	ae0c      	add	r6, sp, #48	; 0x30
   d5a5c:	4622      	mov	r2, r4
   d5a5e:	2100      	movs	r1, #0
   d5a60:	4630      	mov	r0, r6
   d5a62:	f005 fdd1 	bl	db608 <memset>
        state_(BEGIN) {
   d5a66:	2300      	movs	r3, #0
        n_(0) {
   d5a68:	4aa8      	ldr	r2, [pc, #672]	; (d5d0c <_Z17sendConfigurationv+0x2bc>)
        state_(BEGIN) {
   d5a6a:	f88d 3020 	strb.w	r3, [sp, #32]
  JSONBufferWriter writer(data, sizeof(data));
  writer.beginObject();
   d5a6e:	a807      	add	r0, sp, #28
        n_(0) {
   d5a70:	9207      	str	r2, [sp, #28]
   d5a72:	930b      	str	r3, [sp, #44]	; 0x2c
   d5a74:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
   d5a78:	f003 ff15 	bl	d98a6 <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("Name").value(DeviceNameHelperRetained::instance().getName());
   d5a7c:	49a4      	ldr	r1, [pc, #656]	; (d5d10 <_Z17sendConfigurationv+0x2c0>)
   d5a7e:	a807      	add	r0, sp, #28
   d5a80:	f7fe fc6a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a84:	4604      	mov	r4, r0
   d5a86:	f001 fa63 	bl	d6f50 <_ZN24DeviceNameHelperRetained8instanceEv>
   d5a8a:	6841      	ldr	r1, [r0, #4]
    /**
     * @brief Returns the device name as a c-string
     * 
     * May return an empty string if the name has not been retrieved yet
     */
    const char *getName() const { return data ? data->name : ""; };
   d5a8c:	2900      	cmp	r1, #0
   d5a8e:	f000 8097 	beq.w	d5bc0 <_Z17sendConfigurationv+0x170>
   d5a92:	310c      	adds	r1, #12
   d5a94:	4620      	mov	r0, r4
   d5a96:	f7fe fc6d 	bl	d4374 <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Release").value(releaseNumber);
   d5a9a:	499e      	ldr	r1, [pc, #632]	; (d5d14 <_Z17sendConfigurationv+0x2c4>)
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d5a9c:	4c9e      	ldr	r4, [pc, #632]	; (d5d18 <_Z17sendConfigurationv+0x2c8>)
    writer.name("Release").value(releaseNumber);
   d5a9e:	a807      	add	r0, sp, #28
   d5aa0:	f7fe fc5a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5aa4:	499d      	ldr	r1, [pc, #628]	; (d5d1c <_Z17sendConfigurationv+0x2cc>)
   d5aa6:	f7fe fc65 	bl	d4374 <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d5aaa:	499d      	ldr	r1, [pc, #628]	; (d5d20 <_Z17sendConfigurationv+0x2d0>)
   d5aac:	a807      	add	r0, sp, #28
   d5aae:	f7fe fc53 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5ab2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5ab4:	4605      	mov	r5, r0
   d5ab6:	220a      	movs	r2, #10
   d5ab8:	a803      	add	r0, sp, #12
   d5aba:	f004 f9d2 	bl	d9e62 <_ZN6StringC1Eih>
    return value(val.c_str(), val.length());
   d5abe:	9a05      	ldr	r2, [sp, #20]
   d5ac0:	9903      	ldr	r1, [sp, #12]
   d5ac2:	4628      	mov	r0, r5
   d5ac4:	f003 ffa2 	bl	d9a0c <_ZN5spark10JSONWriter5valueEPKcj>
   d5ac8:	a803      	add	r0, sp, #12
   d5aca:	f004 f93f 	bl	d9d4c <_ZN6StringD1Ev>
    writer.name("Sensors");
   d5ace:	4995      	ldr	r1, [pc, #596]	; (d5d24 <_Z17sendConfigurationv+0x2d4>)
   d5ad0:	a807      	add	r0, sp, #28
   d5ad2:	f7fe fc41 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
    writer.beginObject();
   d5ad6:	a807      	add	r0, sp, #28
   d5ad8:	f003 fee5 	bl	d98a6 <_ZN5spark10JSONWriter11beginObjectEv>
      if ((sysStatus.operatingMode) == 1){
   d5adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5ade:	2b01      	cmp	r3, #1
   d5ae0:	d170      	bne.n	d5bc4 <_Z17sendConfigurationv+0x174>
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d5ae2:	4991      	ldr	r1, [pc, #580]	; (d5d28 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5ae4:	4d91      	ldr	r5, [pc, #580]	; (d5d2c <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d5ae6:	a807      	add	r0, sp, #28
   d5ae8:	f7fe fc36 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5aec:	7f21      	ldrb	r1, [r4, #28]
   d5aee:	f003 fee7 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5af2:	498f      	ldr	r1, [pc, #572]	; (d5d30 <_Z17sendConfigurationv+0x2e0>)
   d5af4:	a807      	add	r0, sp, #28
   d5af6:	f7fe fc2f 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5afa:	4607      	mov	r7, r0
   d5afc:	6828      	ldr	r0, [r5, #0]
   d5afe:	f005 f977 	bl	dadf0 <__aeabi_f2d>
   d5b02:	ec41 0b10 	vmov	d0, r0, r1
   d5b06:	4638      	mov	r0, r7
   d5b08:	f003 ff04 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(sysStatus.sensorTwoConnected);
   d5b0c:	4989      	ldr	r1, [pc, #548]	; (d5d34 <_Z17sendConfigurationv+0x2e4>)
   d5b0e:	a807      	add	r0, sp, #28
   d5b10:	f7fe fc22 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b14:	7f61      	ldrb	r1, [r4, #29]
   d5b16:	f003 fed3 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5b1a:	4987      	ldr	r1, [pc, #540]	; (d5d38 <_Z17sendConfigurationv+0x2e8>)
   d5b1c:	a807      	add	r0, sp, #28
   d5b1e:	f7fe fc1b 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b22:	4607      	mov	r7, r0
   d5b24:	6868      	ldr	r0, [r5, #4]
   d5b26:	f005 f963 	bl	dadf0 <__aeabi_f2d>
   d5b2a:	ec41 0b10 	vmov	d0, r0, r1
   d5b2e:	4638      	mov	r0, r7
   d5b30:	f003 fef0 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(sysStatus.sensorThreeConnected);
   d5b34:	4981      	ldr	r1, [pc, #516]	; (d5d3c <_Z17sendConfigurationv+0x2ec>)
   d5b36:	a807      	add	r0, sp, #28
   d5b38:	f7fe fc0e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b3c:	7fa1      	ldrb	r1, [r4, #30]
   d5b3e:	f003 febf 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConnected").value(true);
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
        writer.name("SensorTwoConnected").value(true);
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
        writer.name("SensorThreeConnected").value(true);
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d5b42:	497f      	ldr	r1, [pc, #508]	; (d5d40 <_Z17sendConfigurationv+0x2f0>)
   d5b44:	a807      	add	r0, sp, #28
   d5b46:	f7fe fc07 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b4a:	4607      	mov	r7, r0
   d5b4c:	68a8      	ldr	r0, [r5, #8]
   d5b4e:	f005 f94f 	bl	dadf0 <__aeabi_f2d>
   d5b52:	ec41 0b10 	vmov	d0, r0, r1
   d5b56:	4638      	mov	r0, r7
   d5b58:	f003 fedc 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(sysStatus.sensorFourConnected);
   d5b5c:	4979      	ldr	r1, [pc, #484]	; (d5d44 <_Z17sendConfigurationv+0x2f4>)
   d5b5e:	a807      	add	r0, sp, #28
   d5b60:	f7fe fbfa 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b64:	7fe1      	ldrb	r1, [r4, #31]
   d5b66:	f003 feab 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d5b6a:	4977      	ldr	r1, [pc, #476]	; (d5d48 <_Z17sendConfigurationv+0x2f8>)
   d5b6c:	a807      	add	r0, sp, #28
   d5b6e:	f7fe fbf3 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b72:	4607      	mov	r7, r0
   d5b74:	68e8      	ldr	r0, [r5, #12]
   d5b76:	f005 f93b 	bl	dadf0 <__aeabi_f2d>
   d5b7a:	ec41 0b10 	vmov	d0, r0, r1
   d5b7e:	4638      	mov	r0, r7
   d5b80:	f003 fec8 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(sysStatus.sensorFiveConnected);
   d5b84:	4971      	ldr	r1, [pc, #452]	; (d5d4c <_Z17sendConfigurationv+0x2fc>)
   d5b86:	a807      	add	r0, sp, #28
   d5b88:	f7fe fbe6 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b8c:	f894 1020 	ldrb.w	r1, [r4, #32]
   d5b90:	f003 fe96 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d5b94:	496e      	ldr	r1, [pc, #440]	; (d5d50 <_Z17sendConfigurationv+0x300>)
   d5b96:	a807      	add	r0, sp, #28
   d5b98:	f7fe fbde 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b9c:	4607      	mov	r7, r0
   d5b9e:	6928      	ldr	r0, [r5, #16]
   d5ba0:	f005 f926 	bl	dadf0 <__aeabi_f2d>
   d5ba4:	ec41 0b10 	vmov	d0, r0, r1
   d5ba8:	4638      	mov	r0, r7
   d5baa:	f003 feb3 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(sysStatus.sensorSixConnected);
   d5bae:	4969      	ldr	r1, [pc, #420]	; (d5d54 <_Z17sendConfigurationv+0x304>)
   d5bb0:	a807      	add	r0, sp, #28
   d5bb2:	f7fe fbd1 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bb6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d5bba:	f003 fe81 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
   d5bbe:	e070      	b.n	d5ca2 <_Z17sendConfigurationv+0x252>
   d5bc0:	4965      	ldr	r1, [pc, #404]	; (d5d58 <_Z17sendConfigurationv+0x308>)
   d5bc2:	e767      	b.n	d5a94 <_Z17sendConfigurationv+0x44>
      else if ((sysStatus.operatingMode) == 2){
   d5bc4:	2b02      	cmp	r3, #2
   d5bc6:	f040 80d7 	bne.w	d5d78 <_Z17sendConfigurationv+0x328>
        writer.name("SensorOneConnected").value(true);
   d5bca:	4957      	ldr	r1, [pc, #348]	; (d5d28 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5bcc:	4d57      	ldr	r5, [pc, #348]	; (d5d2c <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(true);
   d5bce:	a807      	add	r0, sp, #28
   d5bd0:	f7fe fbc2 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bd4:	2101      	movs	r1, #1
   d5bd6:	f003 fe8b 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5bda:	4955      	ldr	r1, [pc, #340]	; (d5d30 <_Z17sendConfigurationv+0x2e0>)
   d5bdc:	a807      	add	r0, sp, #28
   d5bde:	f7fe fbbb 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5be2:	4607      	mov	r7, r0
   d5be4:	6828      	ldr	r0, [r5, #0]
   d5be6:	f005 f903 	bl	dadf0 <__aeabi_f2d>
   d5bea:	ec41 0b10 	vmov	d0, r0, r1
   d5bee:	4638      	mov	r0, r7
   d5bf0:	f003 fe90 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d5bf4:	494f      	ldr	r1, [pc, #316]	; (d5d34 <_Z17sendConfigurationv+0x2e4>)
   d5bf6:	a807      	add	r0, sp, #28
   d5bf8:	f7fe fbae 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bfc:	2101      	movs	r1, #1
   d5bfe:	f003 fe77 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5c02:	494d      	ldr	r1, [pc, #308]	; (d5d38 <_Z17sendConfigurationv+0x2e8>)
   d5c04:	a807      	add	r0, sp, #28
   d5c06:	f7fe fba7 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c0a:	4607      	mov	r7, r0
   d5c0c:	6868      	ldr	r0, [r5, #4]
   d5c0e:	f005 f8ef 	bl	dadf0 <__aeabi_f2d>
   d5c12:	ec41 0b10 	vmov	d0, r0, r1
   d5c16:	4638      	mov	r0, r7
   d5c18:	f003 fe7c 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d5c1c:	4947      	ldr	r1, [pc, #284]	; (d5d3c <_Z17sendConfigurationv+0x2ec>)
   d5c1e:	a807      	add	r0, sp, #28
   d5c20:	f7fe fb9a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c24:	2101      	movs	r1, #1
   d5c26:	f003 fe63 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d5c2a:	4945      	ldr	r1, [pc, #276]	; (d5d40 <_Z17sendConfigurationv+0x2f0>)
   d5c2c:	a807      	add	r0, sp, #28
   d5c2e:	f7fe fb93 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c32:	4607      	mov	r7, r0
   d5c34:	68a8      	ldr	r0, [r5, #8]
   d5c36:	f005 f8db 	bl	dadf0 <__aeabi_f2d>
   d5c3a:	ec41 0b10 	vmov	d0, r0, r1
   d5c3e:	4638      	mov	r0, r7
   d5c40:	f003 fe68 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(true);
   d5c44:	493f      	ldr	r1, [pc, #252]	; (d5d44 <_Z17sendConfigurationv+0x2f4>)
   d5c46:	a807      	add	r0, sp, #28
   d5c48:	f7fe fb86 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c4c:	2101      	movs	r1, #1
   d5c4e:	f003 fe4f 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d5c52:	493d      	ldr	r1, [pc, #244]	; (d5d48 <_Z17sendConfigurationv+0x2f8>)
   d5c54:	a807      	add	r0, sp, #28
   d5c56:	f7fe fb7f 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c5a:	4607      	mov	r7, r0
   d5c5c:	68e8      	ldr	r0, [r5, #12]
   d5c5e:	f005 f8c7 	bl	dadf0 <__aeabi_f2d>
   d5c62:	ec41 0b10 	vmov	d0, r0, r1
   d5c66:	4638      	mov	r0, r7
   d5c68:	f003 fe54 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(true);
   d5c6c:	4937      	ldr	r1, [pc, #220]	; (d5d4c <_Z17sendConfigurationv+0x2fc>)
   d5c6e:	a807      	add	r0, sp, #28
   d5c70:	f7fe fb72 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c74:	2101      	movs	r1, #1
   d5c76:	f003 fe3b 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d5c7a:	4935      	ldr	r1, [pc, #212]	; (d5d50 <_Z17sendConfigurationv+0x300>)
   d5c7c:	a807      	add	r0, sp, #28
   d5c7e:	f7fe fb6b 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c82:	4607      	mov	r7, r0
   d5c84:	6928      	ldr	r0, [r5, #16]
   d5c86:	f005 f8b3 	bl	dadf0 <__aeabi_f2d>
   d5c8a:	ec41 0b10 	vmov	d0, r0, r1
   d5c8e:	4638      	mov	r0, r7
   d5c90:	f003 fe40 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(true);
   d5c94:	492f      	ldr	r1, [pc, #188]	; (d5d54 <_Z17sendConfigurationv+0x304>)
   d5c96:	a807      	add	r0, sp, #28
   d5c98:	f7fe fb5e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c9c:	2101      	movs	r1, #1
   d5c9e:	f003 fe27 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorSixConstant").value(sensorConstants.sensorSixConstant);
   d5ca2:	492e      	ldr	r1, [pc, #184]	; (d5d5c <_Z17sendConfigurationv+0x30c>)
   d5ca4:	a807      	add	r0, sp, #28
   d5ca6:	f7fe fb57 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5caa:	4607      	mov	r7, r0
   d5cac:	6968      	ldr	r0, [r5, #20]
   d5cae:	f005 f89f 	bl	dadf0 <__aeabi_f2d>
   d5cb2:	ec41 0b10 	vmov	d0, r0, r1
   d5cb6:	4638      	mov	r0, r7
   d5cb8:	f003 fe2c 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
      }
    writer.endObject();
   d5cbc:	a807      	add	r0, sp, #28
   d5cbe:	f003 fddc 	bl	d987a <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("Third Party Sim").value(sysStatus.thirdPartySim);
   d5cc2:	4927      	ldr	r1, [pc, #156]	; (d5d60 <_Z17sendConfigurationv+0x310>)
   d5cc4:	a807      	add	r0, sp, #28
   d5cc6:	f7fe fb47 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5cca:	7861      	ldrb	r1, [r4, #1]
   d5ccc:	f003 fdf8 	bl	d98c0 <_ZN5spark10JSONWriter5valueEb>
    writer.name("KeepAlive").value(sysStatus.keepAlive);
   d5cd0:	4924      	ldr	r1, [pc, #144]	; (d5d64 <_Z17sendConfigurationv+0x314>)
   d5cd2:	a807      	add	r0, sp, #28
   d5cd4:	f7fe fb40 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5cd8:	6861      	ldr	r1, [r4, #4]
   d5cda:	f003 fe09 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
    writer.name("Reporting Duration").value(sysStatus.reportingBoundary);
   d5cde:	4922      	ldr	r1, [pc, #136]	; (d5d68 <_Z17sendConfigurationv+0x318>)
   d5ce0:	a807      	add	r0, sp, #28
   d5ce2:	f7fe fb39 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5ce6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d5ce8:	f003 fe02 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
  writer.endObject();
   d5cec:	a807      	add	r0, sp, #28
   d5cee:	f003 fdc4 	bl	d987a <_ZN5spark10JSONWriter9endObjectEv>
   d5cf2:	2300      	movs	r3, #0

  publishQueue.publish("System Configuration",data,PRIVATE);
   d5cf4:	f88d 3000 	strb.w	r3, [sp]
   d5cf8:	4b1c      	ldr	r3, [pc, #112]	; (d5d6c <_Z17sendConfigurationv+0x31c>)
   d5cfa:	491d      	ldr	r1, [pc, #116]	; (d5d70 <_Z17sendConfigurationv+0x320>)
   d5cfc:	781b      	ldrb	r3, [r3, #0]
   d5cfe:	481d      	ldr	r0, [pc, #116]	; (d5d74 <_Z17sendConfigurationv+0x324>)
   d5d00:	4632      	mov	r2, r6
   d5d02:	f7fe fb5c 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 
}
   d5d06:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   d5d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d0c:	000de1f4 	.word	0x000de1f4
   d5d10:	000dd950 	.word	0x000dd950
   d5d14:	000dd955 	.word	0x000dd955
   d5d18:	2003e5c0 	.word	0x2003e5c0
   d5d1c:	000ddd08 	.word	0x000ddd08
   d5d20:	000dd95d 	.word	0x000dd95d
   d5d24:	000dd96c 	.word	0x000dd96c
   d5d28:	000dd974 	.word	0x000dd974
   d5d2c:	2003e430 	.word	0x2003e430
   d5d30:	000dd987 	.word	0x000dd987
   d5d34:	000dd999 	.word	0x000dd999
   d5d38:	000dd9ac 	.word	0x000dd9ac
   d5d3c:	000dd9be 	.word	0x000dd9be
   d5d40:	000dd9d3 	.word	0x000dd9d3
   d5d44:	000dd9e7 	.word	0x000dd9e7
   d5d48:	000dd9fb 	.word	0x000dd9fb
   d5d4c:	000dda0e 	.word	0x000dda0e
   d5d50:	000dda22 	.word	0x000dda22
   d5d54:	000dda35 	.word	0x000dda35
   d5d58:	000de334 	.word	0x000de334
   d5d5c:	000dda48 	.word	0x000dda48
   d5d60:	000dda5a 	.word	0x000dda5a
   d5d64:	000dda6a 	.word	0x000dda6a
   d5d68:	000dda74 	.word	0x000dda74
   d5d6c:	2003df2d 	.word	0x2003df2d
   d5d70:	000dda87 	.word	0x000dda87
   d5d74:	2003e3d8 	.word	0x2003e3d8
      else if ((sysStatus.operatingMode) == 3){
   d5d78:	2b03      	cmp	r3, #3
   d5d7a:	d19f      	bne.n	d5cbc <_Z17sendConfigurationv+0x26c>
        writer.name("SensorOneConnected").value(true);
   d5d7c:	4918      	ldr	r1, [pc, #96]	; (d5de0 <_Z17sendConfigurationv+0x390>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5d7e:	4d19      	ldr	r5, [pc, #100]	; (d5de4 <_Z17sendConfigurationv+0x394>)
        writer.name("SensorOneConnected").value(true);
   d5d80:	a807      	add	r0, sp, #28
   d5d82:	f7fe fae9 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5d86:	2101      	movs	r1, #1
   d5d88:	f003 fdb2 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5d8c:	4916      	ldr	r1, [pc, #88]	; (d5de8 <_Z17sendConfigurationv+0x398>)
   d5d8e:	a807      	add	r0, sp, #28
   d5d90:	f7fe fae2 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5d94:	4607      	mov	r7, r0
   d5d96:	6828      	ldr	r0, [r5, #0]
   d5d98:	f005 f82a 	bl	dadf0 <__aeabi_f2d>
   d5d9c:	ec41 0b10 	vmov	d0, r0, r1
   d5da0:	4638      	mov	r0, r7
   d5da2:	f003 fdb7 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d5da6:	4911      	ldr	r1, [pc, #68]	; (d5dec <_Z17sendConfigurationv+0x39c>)
   d5da8:	a807      	add	r0, sp, #28
   d5daa:	f7fe fad5 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5dae:	2101      	movs	r1, #1
   d5db0:	f003 fd9e 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5db4:	490e      	ldr	r1, [pc, #56]	; (d5df0 <_Z17sendConfigurationv+0x3a0>)
   d5db6:	a807      	add	r0, sp, #28
   d5db8:	f7fe face 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5dbc:	4607      	mov	r7, r0
   d5dbe:	6868      	ldr	r0, [r5, #4]
   d5dc0:	f005 f816 	bl	dadf0 <__aeabi_f2d>
   d5dc4:	ec41 0b10 	vmov	d0, r0, r1
   d5dc8:	4638      	mov	r0, r7
   d5dca:	f003 fda3 	bl	d9914 <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d5dce:	4909      	ldr	r1, [pc, #36]	; (d5df4 <_Z17sendConfigurationv+0x3a4>)
   d5dd0:	a807      	add	r0, sp, #28
   d5dd2:	f7fe fac1 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5dd6:	2101      	movs	r1, #1
   d5dd8:	f003 fd8a 	bl	d98f0 <_ZN5spark10JSONWriter5valueEi>
   d5ddc:	e6b1      	b.n	d5b42 <_Z17sendConfigurationv+0xf2>
   d5dde:	bf00      	nop
   d5de0:	000dd974 	.word	0x000dd974
   d5de4:	2003e430 	.word	0x2003e430
   d5de8:	000dd987 	.word	0x000dd987
   d5dec:	000dd999 	.word	0x000dd999
   d5df0:	000dd9ac 	.word	0x000dd9ac
   d5df4:	000dd9be 	.word	0x000dd9be

000d5df8 <_Z25sendConfigurationFunction6String>:
{
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4904      	ldr	r1, [pc, #16]	; (d5e0c <_Z25sendConfigurationFunction6String+0x14>)
   d5dfc:	f004 f844 	bl	d9e88 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d5e00:	b110      	cbz	r0, d5e08 <_Z25sendConfigurationFunction6String+0x10>
    sendConfiguration();
   d5e02:	f7ff fe25 	bl	d5a50 <_Z17sendConfigurationv>
    return 1;
   d5e06:	2001      	movs	r0, #1
}
   d5e08:	bd08      	pop	{r3, pc}
   d5e0a:	bf00      	nop
   d5e0c:	000dd4ab 	.word	0x000dd4ab

000d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5e10:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5e12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5e14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5e16:	b17c      	cbz	r4, d5e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5e18:	6863      	ldr	r3, [r4, #4]
   d5e1a:	3b01      	subs	r3, #1
   d5e1c:	6063      	str	r3, [r4, #4]
   d5e1e:	b95b      	cbnz	r3, d5e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5e20:	6823      	ldr	r3, [r4, #0]
   d5e22:	4620      	mov	r0, r4
   d5e24:	689b      	ldr	r3, [r3, #8]
   d5e26:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e28:	68a3      	ldr	r3, [r4, #8]
   d5e2a:	3b01      	subs	r3, #1
   d5e2c:	60a3      	str	r3, [r4, #8]
   d5e2e:	b91b      	cbnz	r3, d5e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5e30:	6823      	ldr	r3, [r4, #0]
   d5e32:	4620      	mov	r0, r4
   d5e34:	68db      	ldr	r3, [r3, #12]
   d5e36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5e38:	4628      	mov	r0, r5
   d5e3a:	bd38      	pop	{r3, r4, r5, pc}

000d5e3c <_Z7logJsonv>:
void logJson() {
   d5e3c:	b510      	push	{r4, lr}
   d5e3e:	b086      	sub	sp, #24
    if (CloudConfig::instance().getJSONValueForKey("alias").isValid()) {}
   d5e40:	f000 fd28 	bl	d6894 <_ZN11CloudConfig8instanceEv>
   d5e44:	6842      	ldr	r2, [r0, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e46:	6853      	ldr	r3, [r2, #4]
   d5e48:	9303      	str	r3, [sp, #12]
      : _M_pi(__r._M_pi)
   d5e4a:	6893      	ldr	r3, [r2, #8]
   d5e4c:	9304      	str	r3, [sp, #16]
	if (_M_pi != 0)
   d5e4e:	b113      	cbz	r3, d5e56 <_Z7logJsonv+0x1a>
    { ++_M_use_count; }
   d5e50:	6859      	ldr	r1, [r3, #4]
   d5e52:	3101      	adds	r1, #1
   d5e54:	6059      	str	r1, [r3, #4]
class JSONValue {
   d5e56:	68d3      	ldr	r3, [r2, #12]
    JSONValue getJSONValueForKey(const char *key) { return getJSONValueForKey(jsonObj, key); }; 
   d5e58:	4a0b      	ldr	r2, [pc, #44]	; (d5e88 <_Z7logJsonv+0x4c>)
   d5e5a:	9305      	str	r3, [sp, #20]
   d5e5c:	a903      	add	r1, sp, #12
   d5e5e:	4668      	mov	r0, sp
   d5e60:	f000 fe37 	bl	d6ad2 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e64:	a804      	add	r0, sp, #16
   d5e66:	f7ff ffd3 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return type() != JSON_TYPE_INVALID;
   d5e6a:	4668      	mov	r0, sp
   d5e6c:	f003 fbae 	bl	d95cc <_ZNK5spark9JSONValue4typeEv>
   d5e70:	4604      	mov	r4, r0
   d5e72:	a801      	add	r0, sp, #4
   d5e74:	f7ff ffcc 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e78:	b91c      	cbnz	r4, d5e82 <_Z7logJsonv+0x46>
        Log.info("no config set");
   d5e7a:	4904      	ldr	r1, [pc, #16]	; (d5e8c <_Z7logJsonv+0x50>)
   d5e7c:	4804      	ldr	r0, [pc, #16]	; (d5e90 <_Z7logJsonv+0x54>)
   d5e7e:	f7fe fa87 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
}
   d5e82:	b006      	add	sp, #24
   d5e84:	bd10      	pop	{r4, pc}
   d5e86:	bf00      	nop
   d5e88:	000dda9c 	.word	0x000dda9c
   d5e8c:	000ddaa2 	.word	0x000ddaa2
   d5e90:	2003e618 	.word	0x2003e618

000d5e94 <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data>:
            logJson();
   d5e94:	f7ff bfd2 	b.w	d5e3c <_Z7logJsonv>

000d5e98 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d5e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d5e9a:	4b09      	ldr	r3, [pc, #36]	; (d5ec0 <_Z16keepAliveMessagev+0x28>)
   d5e9c:	4a09      	ldr	r2, [pc, #36]	; (d5ec4 <_Z16keepAliveMessagev+0x2c>)
   d5e9e:	781b      	ldrb	r3, [r3, #0]
   d5ea0:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5ea2:	4909      	ldr	r1, [pc, #36]	; (d5ec8 <_Z16keepAliveMessagev+0x30>)
   d5ea4:	4313      	orrs	r3, r2
   d5ea6:	f88d 3000 	strb.w	r3, [sp]
   d5eaa:	2200      	movs	r2, #0
   d5eac:	233c      	movs	r3, #60	; 0x3c
   d5eae:	a802      	add	r0, sp, #8
   d5eb0:	f002 fffc 	bl	d8eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5eb4:	a803      	add	r0, sp, #12
   d5eb6:	f7ff ffab 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5eba:	b005      	add	sp, #20
   d5ebc:	f85d fb04 	ldr.w	pc, [sp], #4
   d5ec0:	2003df2c 	.word	0x2003df2c
   d5ec4:	2003df2d 	.word	0x2003df2d
   d5ec8:	000ddab0 	.word	0x000ddab0

000d5ecc <_ZN18CloudConfigStorage5parseEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	6803      	ldr	r3, [r0, #0]
   d5ed0:	b088      	sub	sp, #32
   d5ed2:	685b      	ldr	r3, [r3, #4]
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	4798      	blx	r3
   d5ed8:	9001      	str	r0, [sp, #4]
    return parseCopy(json, strlen(json));
   d5eda:	f005 fbf0 	bl	db6be <strlen>
   d5ede:	9901      	ldr	r1, [sp, #4]
   d5ee0:	4602      	mov	r2, r0
   d5ee2:	a805      	add	r0, sp, #20
   d5ee4:	f003 fdb6 	bl	d9a54 <_ZN5spark9JSONValue9parseCopyEPKcj>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ee8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	__r._M_pi = _M_pi;
   d5eec:	2300      	movs	r3, #0

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5eee:	e9cd 3305 	strd	r3, r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ef2:	6863      	ldr	r3, [r4, #4]
   d5ef4:	9303      	str	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ef6:	6061      	str	r1, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ef8:	68a3      	ldr	r3, [r4, #8]
	__r._M_pi = _M_pi;
   d5efa:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5efc:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
   d5efe:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
   d5f00:	f7ff ff86 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class JSONValue {
   d5f04:	9b07      	ldr	r3, [sp, #28]
   d5f06:	60e3      	str	r3, [r4, #12]
   d5f08:	a806      	add	r0, sp, #24
   d5f0a:	f7ff ff81 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f0e:	b008      	add	sp, #32
   d5f10:	bd10      	pop	{r4, pc}
	...

000d5f14 <_ZN26CloudConfigStorageRetainedD1Ev>:
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5f14:	b510      	push	{r4, lr}
    virtual ~CloudConfigStorage() {};
   d5f16:	4b04      	ldr	r3, [pc, #16]	; (d5f28 <_ZN26CloudConfigStorageRetainedD1Ev+0x14>)
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5f18:	4604      	mov	r4, r0
    virtual ~CloudConfigStorage() {};
   d5f1a:	f840 3b04 	str.w	r3, [r0], #4
   d5f1e:	3004      	adds	r0, #4
   d5f20:	f7ff ff76 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}
   d5f28:	000ddc60 	.word	0x000ddc60

000d5f2c <_ZN26CloudConfigStorageRetainedD0Ev>:
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	4604      	mov	r4, r0
   d5f30:	f7ff fff0 	bl	d5f14 <_ZN26CloudConfigStorageRetainedD1Ev>
   d5f34:	4620      	mov	r0, r4
   d5f36:	2118      	movs	r1, #24
   d5f38:	f004 fcc9 	bl	da8ce <_ZdlPvj>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	bd10      	pop	{r4, pc}

000d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5f40:	b513      	push	{r0, r1, r4, lr}
   d5f42:	460b      	mov	r3, r1
   d5f44:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f46:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5f4a:	466c      	mov	r4, sp
   d5f4c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5f50:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5f54:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5f58:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5f5c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5f60:	b002      	add	sp, #8
   d5f62:	bd10      	pop	{r4, pc}

000d5f64 <setup>:
void setup() {
   d5f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5f68:	2100      	movs	r1, #0
void setup() {
   d5f6a:	b0be      	sub	sp, #248	; 0xf8
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5f6c:	2008      	movs	r0, #8
   d5f6e:	f004 fc27 	bl	da7c0 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d5f72:	2101      	movs	r1, #1
   d5f74:	2005      	movs	r0, #5
   d5f76:	f004 fc23 	bl	da7c0 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d5f7a:	f7fe fd83 	bl	d4a84 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d5f7e:	2300      	movs	r3, #0
   d5f80:	9300      	str	r3, [sp, #0]
   d5f82:	2201      	movs	r2, #1
   d5f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5f88:	49b3      	ldr	r1, [pc, #716]	; (d6258 <setup+0x2f4>)
   d5f8a:	2008      	movs	r0, #8
   d5f8c:	f003 f9ce 	bl	d932c <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5f90:	4bb2      	ldr	r3, [pc, #712]	; (d625c <setup+0x2f8>)
   d5f92:	aa0e      	add	r2, sp, #56	; 0x38
   d5f94:	f103 0510 	add.w	r5, r3, #16
   d5f98:	4617      	mov	r7, r2
   d5f9a:	6818      	ldr	r0, [r3, #0]
   d5f9c:	6859      	ldr	r1, [r3, #4]
   d5f9e:	4614      	mov	r4, r2
   d5fa0:	c403      	stmia	r4!, {r0, r1}
   d5fa2:	3308      	adds	r3, #8
   d5fa4:	42ab      	cmp	r3, r5
   d5fa6:	4622      	mov	r2, r4
   d5fa8:	d1f7      	bne.n	d5f9a <setup+0x36>
   d5faa:	8819      	ldrh	r1, [r3, #0]
   d5fac:	789b      	ldrb	r3, [r3, #2]
   d5fae:	70a3      	strb	r3, [r4, #2]
   d5fb0:	8021      	strh	r1, [r4, #0]
   d5fb2:	222d      	movs	r2, #45	; 0x2d
   d5fb4:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d5fb6:	4caa      	ldr	r4, [pc, #680]	; (d6260 <setup+0x2fc>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5fb8:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
  state = INITIALIZATION_STATE;
   d5fbc:	2500      	movs	r5, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5fbe:	f005 fb23 	bl	db608 <memset>
   d5fc2:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d5fc4:	7025      	strb	r5, [r4, #0]
   d5fc6:	f002 fcd1 	bl	d896c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5fca:	462b      	mov	r3, r5
   d5fcc:	227d      	movs	r2, #125	; 0x7d
   d5fce:	a91e      	add	r1, sp, #120	; 0x78
   d5fd0:	a802      	add	r0, sp, #8
   d5fd2:	f003 ff6b 	bl	d9eac <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5fd6:	462b      	mov	r3, r5
   d5fd8:	462a      	mov	r2, r5
   d5fda:	e9cd 5500 	strd	r5, r5, [sp]
   d5fde:	49a1      	ldr	r1, [pc, #644]	; (d6264 <setup+0x300>)
   d5fe0:	a81e      	add	r0, sp, #120	; 0x78
   d5fe2:	f002 fcd3 	bl	d898c <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5fe6:	49a0      	ldr	r1, [pc, #640]	; (d6268 <setup+0x304>)
   d5fe8:	48a0      	ldr	r0, [pc, #640]	; (d626c <setup+0x308>)
   d5fea:	f7fe f94a 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5fee:	49a0      	ldr	r1, [pc, #640]	; (d6270 <setup+0x30c>)
   d5ff0:	48a0      	ldr	r0, [pc, #640]	; (d6274 <setup+0x310>)
   d5ff2:	f7fe f946 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5ff6:	49a0      	ldr	r1, [pc, #640]	; (d6278 <setup+0x314>)
   d5ff8:	48a0      	ldr	r0, [pc, #640]	; (d627c <setup+0x318>)
   d5ffa:	f7fe f942 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5ffe:	462b      	mov	r3, r5
   d6000:	499f      	ldr	r1, [pc, #636]	; (d6280 <setup+0x31c>)
   d6002:	48a0      	ldr	r0, [pc, #640]	; (d6284 <setup+0x320>)
   d6004:	2202      	movs	r2, #2
   d6006:	f002 fc89 	bl	d891c <spark_variable>
   d600a:	462b      	mov	r3, r5
   d600c:	2201      	movs	r2, #1
   d600e:	499e      	ldr	r1, [pc, #632]	; (d6288 <setup+0x324>)
   d6010:	489e      	ldr	r0, [pc, #632]	; (d628c <setup+0x328>)
   d6012:	f002 fc83 	bl	d891c <spark_variable>
        return _variable(varKey, var, STRING);
   d6016:	499e      	ldr	r1, [pc, #632]	; (d6290 <setup+0x32c>)
   d6018:	489e      	ldr	r0, [pc, #632]	; (d6294 <setup+0x330>)
   d601a:	f7fe f932 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d601e:	499e      	ldr	r1, [pc, #632]	; (d6298 <setup+0x334>)
   d6020:	489e      	ldr	r0, [pc, #632]	; (d629c <setup+0x338>)
   d6022:	f7fe f92e 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6026:	499e      	ldr	r1, [pc, #632]	; (d62a0 <setup+0x33c>)
   d6028:	489e      	ldr	r0, [pc, #632]	; (d62a4 <setup+0x340>)
   d602a:	f7fe f92a 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d602e:	499e      	ldr	r1, [pc, #632]	; (d62a8 <setup+0x344>)
   d6030:	489e      	ldr	r0, [pc, #632]	; (d62ac <setup+0x348>)
   d6032:	f7fe f926 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6036:	499e      	ldr	r1, [pc, #632]	; (d62b0 <setup+0x34c>)
   d6038:	489e      	ldr	r0, [pc, #632]	; (d62b4 <setup+0x350>)
   d603a:	f7fe f922 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d603e:	499e      	ldr	r1, [pc, #632]	; (d62b8 <setup+0x354>)
   d6040:	489e      	ldr	r0, [pc, #632]	; (d62bc <setup+0x358>)
   d6042:	f7fe f91e 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d6046:	462b      	mov	r3, r5
   d6048:	499d      	ldr	r1, [pc, #628]	; (d62c0 <setup+0x35c>)
   d604a:	489e      	ldr	r0, [pc, #632]	; (d62c4 <setup+0x360>)
   d604c:	2202      	movs	r2, #2
   d604e:	f002 fc65 	bl	d891c <spark_variable>
   d6052:	462b      	mov	r3, r5
   d6054:	2202      	movs	r2, #2
   d6056:	499c      	ldr	r1, [pc, #624]	; (d62c8 <setup+0x364>)
   d6058:	489c      	ldr	r0, [pc, #624]	; (d62cc <setup+0x368>)
   d605a:	f002 fc5f 	bl	d891c <spark_variable>
        return _function(name, args...);
   d605e:	499c      	ldr	r1, [pc, #624]	; (d62d0 <setup+0x36c>)
   d6060:	489c      	ldr	r0, [pc, #624]	; (d62d4 <setup+0x370>)
   d6062:	f7fe f94f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6066:	499c      	ldr	r1, [pc, #624]	; (d62d8 <setup+0x374>)
   d6068:	489c      	ldr	r0, [pc, #624]	; (d62dc <setup+0x378>)
   d606a:	f7fe f94b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d606e:	499c      	ldr	r1, [pc, #624]	; (d62e0 <setup+0x37c>)
   d6070:	489c      	ldr	r0, [pc, #624]	; (d62e4 <setup+0x380>)
   d6072:	f7fe f947 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6076:	499c      	ldr	r1, [pc, #624]	; (d62e8 <setup+0x384>)
   d6078:	489c      	ldr	r0, [pc, #624]	; (d62ec <setup+0x388>)
   d607a:	f7fe f943 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d607e:	499c      	ldr	r1, [pc, #624]	; (d62f0 <setup+0x38c>)
   d6080:	4882      	ldr	r0, [pc, #520]	; (d628c <setup+0x328>)
   d6082:	f7fe f93f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6086:	499b      	ldr	r1, [pc, #620]	; (d62f4 <setup+0x390>)
   d6088:	489b      	ldr	r0, [pc, #620]	; (d62f8 <setup+0x394>)
   d608a:	f7fe f93b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d608e:	499b      	ldr	r1, [pc, #620]	; (d62fc <setup+0x398>)
   d6090:	489b      	ldr	r0, [pc, #620]	; (d6300 <setup+0x39c>)
   d6092:	f7fe f937 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6096:	499b      	ldr	r1, [pc, #620]	; (d6304 <setup+0x3a0>)
   d6098:	489b      	ldr	r0, [pc, #620]	; (d6308 <setup+0x3a4>)
   d609a:	f7fe f933 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d609e:	499b      	ldr	r1, [pc, #620]	; (d630c <setup+0x3a8>)
   d60a0:	489b      	ldr	r0, [pc, #620]	; (d6310 <setup+0x3ac>)
   d60a2:	f7fe f92f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60a6:	499b      	ldr	r1, [pc, #620]	; (d6314 <setup+0x3b0>)
   d60a8:	489b      	ldr	r0, [pc, #620]	; (d6318 <setup+0x3b4>)
   d60aa:	f7fe f92b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60ae:	499b      	ldr	r1, [pc, #620]	; (d631c <setup+0x3b8>)
   d60b0:	489b      	ldr	r0, [pc, #620]	; (d6320 <setup+0x3bc>)
   d60b2:	f7fe f927 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60b6:	499b      	ldr	r1, [pc, #620]	; (d6324 <setup+0x3c0>)
   d60b8:	489b      	ldr	r0, [pc, #620]	; (d6328 <setup+0x3c4>)
   d60ba:	f7fe f923 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60be:	499b      	ldr	r1, [pc, #620]	; (d632c <setup+0x3c8>)
   d60c0:	489b      	ldr	r0, [pc, #620]	; (d6330 <setup+0x3cc>)
   d60c2:	f7fe f91f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60c6:	499b      	ldr	r1, [pc, #620]	; (d6334 <setup+0x3d0>)
   d60c8:	489b      	ldr	r0, [pc, #620]	; (d6338 <setup+0x3d4>)
   d60ca:	f7fe f91b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60ce:	499b      	ldr	r1, [pc, #620]	; (d633c <setup+0x3d8>)
   d60d0:	489b      	ldr	r0, [pc, #620]	; (d6340 <setup+0x3dc>)
   d60d2:	f7fe f917 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d60d6:	499b      	ldr	r1, [pc, #620]	; (d6344 <setup+0x3e0>)
   d60d8:	489b      	ldr	r0, [pc, #620]	; (d6348 <setup+0x3e4>)
   d60da:	f7fe f913 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d60de:	489b      	ldr	r0, [pc, #620]	; (d634c <setup+0x3e8>)
   d60e0:	f001 fd12 	bl	d7b08 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d60e4:	4629      	mov	r1, r5
   d60e6:	4899      	ldr	r0, [pc, #612]	; (d634c <setup+0x3e8>)
   d60e8:	f001 fe4b 	bl	d7d82 <_ZN8MCP7941010clearAlarmEi>
    CloudConfig::instance()
   d60ec:	f000 fbd2 	bl	d6894 <_ZN11CloudConfig8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d60f0:	4b97      	ldr	r3, [pc, #604]	; (d6350 <setup+0x3ec>)
   d60f2:	9309      	str	r3, [sp, #36]	; 0x24
   d60f4:	4606      	mov	r6, r0
	    _M_manager = &_My_handler::_M_manager;
   d60f6:	4b97      	ldr	r3, [pc, #604]	; (d6354 <setup+0x3f0>)
   d60f8:	9308      	str	r3, [sp, #32]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d60fa:	2202      	movs	r2, #2
   d60fc:	a906      	add	r1, sp, #24
   d60fe:	a80a      	add	r0, sp, #40	; 0x28
    _Function_base() : _M_manager(nullptr) { }
   d6100:	950c      	str	r5, [sp, #48]	; 0x30
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6102:	f7fe f800 	bl	d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d6106:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6108:	930d      	str	r3, [sp, #52]	; 0x34
	std::swap(_M_functor, __x._M_functor);
   d610a:	f106 010c 	add.w	r1, r6, #12
	  _M_manager = __x._M_manager;
   d610e:	9b08      	ldr	r3, [sp, #32]
   d6110:	930c      	str	r3, [sp, #48]	; 0x30
	std::swap(_M_functor, __x._M_functor);
   d6112:	a80a      	add	r0, sp, #40	; 0x28
   d6114:	f7ff ff14 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   d611a:	6972      	ldr	r2, [r6, #20]
   d611c:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d611e:	6173      	str	r3, [r6, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __a = _GLIBCXX_MOVE(__b);
   d6122:	69b2      	ldr	r2, [r6, #24]
   d6124:	920d      	str	r2, [sp, #52]	; 0x34
    class function<_Res(_ArgTypes...)>
   d6126:	a80a      	add	r0, sp, #40	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   d6128:	61b3      	str	r3, [r6, #24]
   d612a:	f7fe f8ae 	bl	d428a <_ZNSt14_Function_baseD1Ev>
    CloudConfig &withUpdateFrequency(std::chrono::seconds chronoLiteral) { this->updateFrequency = chronoLiteral.count(); return *this; };
   d612e:	4b8a      	ldr	r3, [pc, #552]	; (d6358 <setup+0x3f4>)
   d6130:	61f3      	str	r3, [r6, #28]
        .withUpdateMethod(new CloudConfigUpdateWebhook("CloudConfigDeviceNotes"))
   d6132:	202c      	movs	r0, #44	; 0x2c
   d6134:	f7fd ffaf 	bl	d4096 <_Znwj>
   d6138:	4605      	mov	r5, r0
   d613a:	b110      	cbz	r0, d6142 <setup+0x1de>
   d613c:	4987      	ldr	r1, [pc, #540]	; (d635c <setup+0x3f8>)
   d613e:	f000 fbf7 	bl	d6930 <_ZN24CloudConfigUpdateWebhookC1EPKc>
    CloudConfig &withUpdateMethod(CloudConfigUpdate *updateMethod) { this->updateMethod = updateMethod; return *this; };
   d6142:	60b5      	str	r5, [r6, #8]
        .withStorageMethod(new CloudConfigStorageRetained(&retainedConfig, sizeof(retainedConfig)))
   d6144:	2018      	movs	r0, #24
   d6146:	f7fd ffa6 	bl	d4096 <_Znwj>
   d614a:	4605      	mov	r5, r0
   d614c:	b130      	cbz	r0, d615c <setup+0x1f8>
    CloudConfigStorageRetained(void *retainedData, size_t totalSize) : CloudConfigStorageData((CloudConfigDataHeader *)retainedData, totalSize - sizeof(CloudConfigDataHeader)) {};
   d614e:	4984      	ldr	r1, [pc, #528]	; (d6360 <setup+0x3fc>)
   d6150:	f44f 7280 	mov.w	r2, #256	; 0x100
   d6154:	f000 fb5c 	bl	d6810 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>
   d6158:	4b82      	ldr	r3, [pc, #520]	; (d6364 <setup+0x400>)
   d615a:	602b      	str	r3, [r5, #0]
        .setup();
   d615c:	4630      	mov	r0, r6
    CloudConfig &withStorageMethod(CloudConfigStorage *storageMethod) { this->storageMethod = storageMethod; return *this; };
   d615e:	6075      	str	r5, [r6, #4]
   d6160:	f000 fd26 	bl	d6bb0 <_ZN11CloudConfig5setupEv>
   d6164:	a806      	add	r0, sp, #24
   d6166:	f7fe f890 	bl	d428a <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().withNameCallback([](const char *name) {});
   d616a:	f000 fef1 	bl	d6f50 <_ZN24DeviceNameHelperRetained8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d616e:	4b7e      	ldr	r3, [pc, #504]	; (d6368 <setup+0x404>)
   d6170:	930d      	str	r3, [sp, #52]	; 0x34
   d6172:	a90a      	add	r1, sp, #40	; 0x28
	    _M_manager = &_My_handler::_M_manager;
   d6174:	4b7d      	ldr	r3, [pc, #500]	; (d636c <setup+0x408>)
   d6176:	930c      	str	r3, [sp, #48]	; 0x30
   d6178:	f000 ff06 	bl	d6f88 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>
    class function<_Res(_ArgTypes...)>
   d617c:	a80a      	add	r0, sp, #40	; 0x28
   d617e:	f7fe f884 	bl	d428a <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().setup(&deviceNameHelperRetained);
   d6182:	f000 fee5 	bl	d6f50 <_ZN24DeviceNameHelperRetained8instanceEv>
   d6186:	497a      	ldr	r1, [pc, #488]	; (d6370 <setup+0x40c>)
   d6188:	f000 ff68 	bl	d705c <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>
  fram.begin();                                                                             // Initialize the FRAM module
   d618c:	4879      	ldr	r0, [pc, #484]	; (d6374 <setup+0x410>)
   d618e:	f001 f957 	bl	d7440 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d6192:	2301      	movs	r3, #1
   d6194:	4877      	ldr	r0, [pc, #476]	; (d6374 <setup+0x410>)
   d6196:	aa0a      	add	r2, sp, #40	; 0x28
   d6198:	2100      	movs	r1, #0
   d619a:	f001 f993 	bl	d74c4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d619e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d61a2:	2b16      	cmp	r3, #22
   d61a4:	d04b      	beq.n	d623e <setup+0x2da>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d61a6:	4873      	ldr	r0, [pc, #460]	; (d6374 <setup+0x410>)
   d61a8:	f001 f954 	bl	d7454 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d61ac:	4a72      	ldr	r2, [pc, #456]	; (d6378 <setup+0x414>)
   d61ae:	4871      	ldr	r0, [pc, #452]	; (d6374 <setup+0x410>)
   d61b0:	2304      	movs	r3, #4
   d61b2:	2100      	movs	r1, #0
   d61b4:	f001 f9d1 	bl	d755a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d61b8:	2301      	movs	r3, #1
   d61ba:	486e      	ldr	r0, [pc, #440]	; (d6374 <setup+0x410>)
   d61bc:	aa0a      	add	r2, sp, #40	; 0x28
   d61be:	2100      	movs	r1, #0
   d61c0:	f001 f980 	bl	d74c4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d61c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d61c8:	2b16      	cmp	r3, #22
   d61ca:	d029      	beq.n	d6220 <setup+0x2bc>
   d61cc:	2301      	movs	r3, #1
   d61ce:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d61d0:	4d6a      	ldr	r5, [pc, #424]	; (d637c <setup+0x418>)
  checkConstantValues();
   d61d2:	f7fe fbe7 	bl	d49a4 <_Z19checkConstantValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d61d6:	f7fe fbb5 	bl	d4944 <_Z17checkSystemValuesv>
  loadEmonlib();                                                                            // Initialize the emon library modules.
   d61da:	f7ff fa89 	bl	d56f0 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d61de:	786b      	ldrb	r3, [r5, #1]
   d61e0:	2b00      	cmp	r3, #0
   d61e2:	f000 80e5 	beq.w	d63b0 <setup+0x44c>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d61e6:	2000      	movs	r0, #0
   d61e8:	f002 f9ca 	bl	d8580 <hal_timer_millis>
   d61ec:	f04f 0a00 	mov.w	sl, #0
   d61f0:	4606      	mov	r6, r0
   d61f2:	2000      	movs	r0, #0
   d61f4:	f002 f9c4 	bl	d8580 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d61f8:	ebb0 0806 	subs.w	r8, r0, r6
   d61fc:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d6200:	2300      	movs	r3, #0
   d6202:	f247 522f 	movw	r2, #29999	; 0x752f
   d6206:	454b      	cmp	r3, r9
   d6208:	bf08      	it	eq
   d620a:	4542      	cmpeq	r2, r8
   d620c:	f0c0 80c2 	bcc.w	d6394 <setup+0x430>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6210:	f002 fba4 	bl	d895c <spark_cloud_flag_connected>
   d6214:	2800      	cmp	r0, #0
   d6216:	f040 80bd 	bne.w	d6394 <setup+0x430>
            spark_process();
   d621a:	f002 fb8f 	bl	d893c <spark_process>
        while (_while() && !_condition()) {
   d621e:	e7e8      	b.n	d61f2 <setup+0x28e>
        val_(0) {
   d6220:	2300      	movs	r3, #0
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d6222:	f88d 3000 	strb.w	r3, [sp]
   d6226:	4b56      	ldr	r3, [pc, #344]	; (d6380 <setup+0x41c>)
   d6228:	4a56      	ldr	r2, [pc, #344]	; (d6384 <setup+0x420>)
   d622a:	781b      	ldrb	r3, [r3, #0]
   d622c:	4956      	ldr	r1, [pc, #344]	; (d6388 <setup+0x424>)
   d622e:	4857      	ldr	r0, [pc, #348]	; (d638c <setup+0x428>)
   d6230:	f7fe f8c5 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d6234:	f7fe fb2a 	bl	d488c <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d6238:	f7fe fb58 	bl	d48ec <_Z20loadConstantDefaultsv>
   d623c:	e7c8      	b.n	d61d0 <setup+0x26c>
   d623e:	4a54      	ldr	r2, [pc, #336]	; (d6390 <setup+0x42c>)
   d6240:	484c      	ldr	r0, [pc, #304]	; (d6374 <setup+0x410>)
   d6242:	2318      	movs	r3, #24
   d6244:	21a0      	movs	r1, #160	; 0xa0
   d6246:	f001 f93d 	bl	d74c4 <_ZN6MB85RC8readDataEjPhj>
   d624a:	4a4c      	ldr	r2, [pc, #304]	; (d637c <setup+0x418>)
   d624c:	4849      	ldr	r0, [pc, #292]	; (d6374 <setup+0x410>)
   d624e:	2334      	movs	r3, #52	; 0x34
   d6250:	2101      	movs	r1, #1
   d6252:	f001 f937 	bl	d74c4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d6256:	e7bb      	b.n	d61d0 <setup+0x26c>
   d6258:	000d40e1 	.word	0x000d40e1
   d625c:	000ddcc8 	.word	0x000ddcc8
   d6260:	2003e5bd 	.word	0x2003e5bd
   d6264:	000d43d9 	.word	0x000d43d9
   d6268:	000ddd08 	.word	0x000ddd08
   d626c:	000dd955 	.word	0x000dd955
   d6270:	2003df44 	.word	0x2003df44
   d6274:	000ddab2 	.word	0x000ddab2
   d6278:	2003df34 	.word	0x2003df34
   d627c:	000ddaba 	.word	0x000ddaba
   d6280:	2003e5c4 	.word	0x2003e5c4
   d6284:	000ddac9 	.word	0x000ddac9
   d6288:	2003e5c1 	.word	0x2003e5c1
   d628c:	000dd57e 	.word	0x000dd57e
   d6290:	2003e53d 	.word	0x2003e53d
   d6294:	000ddb18 	.word	0x000ddb18
   d6298:	2003e59d 	.word	0x2003e59d
   d629c:	000ddb29 	.word	0x000ddb29
   d62a0:	2003e57d 	.word	0x2003e57d
   d62a4:	000ddb3a 	.word	0x000ddb3a
   d62a8:	2003e51d 	.word	0x2003e51d
   d62ac:	000ddb4d 	.word	0x000ddb4d
   d62b0:	2003e4fd 	.word	0x2003e4fd
   d62b4:	000ddb5f 	.word	0x000ddb5f
   d62b8:	2003e55d 	.word	0x2003e55d
   d62bc:	000ddb71 	.word	0x000ddb71
   d62c0:	2003e5e4 	.word	0x2003e5e4
   d62c4:	000dda74 	.word	0x000dda74
   d62c8:	2003e5ec 	.word	0x2003e5ec
   d62cc:	000ddad8 	.word	0x000ddad8
   d62d0:	000d4121 	.word	0x000d4121
   d62d4:	000ddae7 	.word	0x000ddae7
   d62d8:	000d5df9 	.word	0x000d5df9
   d62dc:	000ddaf3 	.word	0x000ddaf3
   d62e0:	000d468d 	.word	0x000d468d
   d62e4:	000ddb07 	.word	0x000ddb07
   d62e8:	000d45b9 	.word	0x000d45b9
   d62ec:	000dd5b9 	.word	0x000dd5b9
   d62f0:	000d451d 	.word	0x000d451d
   d62f4:	000d5871 	.word	0x000d5871
   d62f8:	000ddb14 	.word	0x000ddb14
   d62fc:	000d58c1 	.word	0x000d58c1
   d6300:	000ddb25 	.word	0x000ddb25
   d6304:	000d5911 	.word	0x000d5911
   d6308:	000ddb36 	.word	0x000ddb36
   d630c:	000d5961 	.word	0x000d5961
   d6310:	000ddb49 	.word	0x000ddb49
   d6314:	000d59b1 	.word	0x000d59b1
   d6318:	000ddb5b 	.word	0x000ddb5b
   d631c:	000d5a01 	.word	0x000d5a01
   d6320:	000ddb6d 	.word	0x000ddb6d
   d6324:	000d413d 	.word	0x000d413d
   d6328:	000ddb7e 	.word	0x000ddb7e
   d632c:	000d470d 	.word	0x000d470d
   d6330:	000ddb8c 	.word	0x000ddb8c
   d6334:	000d47dd 	.word	0x000d47dd
   d6338:	000dd95d 	.word	0x000dd95d
   d633c:	000d4635 	.word	0x000d4635
   d6340:	000ddb9b 	.word	0x000ddb9b
   d6344:	000d483d 	.word	0x000d483d
   d6348:	000ddbb7 	.word	0x000ddbb7
   d634c:	2003e414 	.word	0x2003e414
   d6350:	000d5e95 	.word	0x000d5e95
   d6354:	000d4107 	.word	0x000d4107
   d6358:	00015180 	.word	0x00015180
   d635c:	000ddbc5 	.word	0x000ddbc5
   d6360:	2003f400 	.word	0x2003f400
   d6364:	000ddc88 	.word	0x000ddc88
   d6368:	000d4111 	.word	0x000d4111
   d636c:	000d4113 	.word	0x000d4113
   d6370:	2003f514 	.word	0x2003f514
   d6374:	2003e3a8 	.word	0x2003e3a8
   d6378:	000ddd10 	.word	0x000ddd10
   d637c:	2003e5c0 	.word	0x2003e5c0
   d6380:	2003df2d 	.word	0x2003df2d
   d6384:	000ddbdc 	.word	0x000ddbdc
   d6388:	000ddbe7 	.word	0x000ddbe7
   d638c:	2003e3d8 	.word	0x2003e3d8
   d6390:	2003e430 	.word	0x2003e430
   d6394:	f002 fae2 	bl	d895c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d6398:	6868      	ldr	r0, [r5, #4]
   d639a:	f7fd ffb9 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d639e:	686b      	ldr	r3, [r5, #4]
   d63a0:	4815      	ldr	r0, [pc, #84]	; (d63f8 <setup+0x494>)
   d63a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d63a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d63aa:	4359      	muls	r1, r3
   d63ac:	f7fd ffc3 	bl	d4336 <_ZN5Timer12changePeriodEjj>
  updateConstantValues();
   d63b0:	f7ff f9fc 	bl	d57ac <_Z20updateConstantValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d63b4:	f7fe fe78 	bl	d50a8 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d63b8:	7a6b      	ldrb	r3, [r5, #9]
   d63ba:	b14b      	cbz	r3, d63d0 <setup+0x46c>
   d63bc:	2300      	movs	r3, #0
   d63be:	f88d 3000 	strb.w	r3, [sp]
   d63c2:	4b0e      	ldr	r3, [pc, #56]	; (d63fc <setup+0x498>)
   d63c4:	490e      	ldr	r1, [pc, #56]	; (d6400 <setup+0x49c>)
   d63c6:	781b      	ldrb	r3, [r3, #0]
   d63c8:	480e      	ldr	r0, [pc, #56]	; (d6404 <setup+0x4a0>)
   d63ca:	463a      	mov	r2, r7
   d63cc:	f7fd fff7 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d63d0:	f002 fac4 	bl	d895c <spark_cloud_flag_connected>
   d63d4:	b910      	cbnz	r0, d63dc <setup+0x478>
            spark_process();
   d63d6:	f002 fab1 	bl	d893c <spark_process>
        while (_while() && !_condition()) {
   d63da:	e7f9      	b.n	d63d0 <setup+0x46c>
   d63dc:	f002 fabe 	bl	d895c <spark_cloud_flag_connected>
  sendConfiguration();
   d63e0:	f7ff fb36 	bl	d5a50 <_Z17sendConfigurationv>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d63e4:	7823      	ldrb	r3, [r4, #0]
   d63e6:	b90b      	cbnz	r3, d63ec <setup+0x488>
   d63e8:	2302      	movs	r3, #2
   d63ea:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d63ec:	a802      	add	r0, sp, #8
   d63ee:	f003 fcad 	bl	d9d4c <_ZN6StringD1Ev>
}
   d63f2:	b03e      	add	sp, #248	; 0xf8
   d63f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d63f8:	2003e3b8 	.word	0x2003e3b8
   d63fc:	2003df2d 	.word	0x2003df2d
   d6400:	000ddbf8 	.word	0x000ddbf8
   d6404:	2003e3d8 	.word	0x2003e3d8

000d6408 <_GLOBAL__sub_I___appProductID>:
}
   d6408:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d640a:	4b50      	ldr	r3, [pc, #320]	; (d654c <_GLOBAL__sub_I___appProductID+0x144>)
              error_(SYSTEM_ERROR_NONE) {
   d640c:	4d50      	ldr	r5, [pc, #320]	; (d6550 <_GLOBAL__sub_I___appProductID+0x148>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d640e:	4e51      	ldr	r6, [pc, #324]	; (d6554 <_GLOBAL__sub_I___appProductID+0x14c>)
   d6410:	2701      	movs	r7, #1
   d6412:	701f      	strb	r7, [r3, #0]
   d6414:	4b50      	ldr	r3, [pc, #320]	; (d6558 <_GLOBAL__sub_I___appProductID+0x150>)
   d6416:	2202      	movs	r2, #2
}
   d6418:	b087      	sub	sp, #28
   d641a:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d641c:	f004 f97a 	bl	da714 <spark_protocol_instance>
   d6420:	2300      	movs	r3, #0
   d6422:	461a      	mov	r2, r3
   d6424:	f643 1145 	movw	r1, #14661	; 0x3945
   d6428:	f004 f97c 	bl	da724 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d642c:	f004 f972 	bl	da714 <spark_protocol_instance>
   d6430:	2300      	movs	r3, #0
   d6432:	461a      	mov	r2, r3
   d6434:	2112      	movs	r1, #18
   d6436:	2400      	movs	r4, #0
   d6438:	f004 f97c 	bl	da734 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d643c:	4b47      	ldr	r3, [pc, #284]	; (d655c <_GLOBAL__sub_I___appProductID+0x154>)
   d643e:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6440:	602c      	str	r4, [r5, #0]
   d6442:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d6444:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d6446:	4638      	mov	r0, r7
   d6448:	f002 fa12 	bl	d8870 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d644c:	4632      	mov	r2, r6
   d644e:	4944      	ldr	r1, [pc, #272]	; (d6560 <_GLOBAL__sub_I___appProductID+0x158>)
   d6450:	4628      	mov	r0, r5
   d6452:	f004 fa37 	bl	da8c4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d6456:	4621      	mov	r1, r4
   d6458:	4638      	mov	r0, r7
   d645a:	f002 fa19 	bl	d8890 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d645e:	4639      	mov	r1, r7
   d6460:	2004      	movs	r0, #4
   d6462:	f002 f85d 	bl	d8520 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d6466:	f004 fa05 	bl	da874 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d646a:	4d3e      	ldr	r5, [pc, #248]	; (d6564 <_GLOBAL__sub_I___appProductID+0x15c>)
   d646c:	4601      	mov	r1, r0
   d646e:	4623      	mov	r3, r4
   d6470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d6474:	4628      	mov	r0, r5
   d6476:	f000 ffd9 	bl	d742c <_ZN6MB85RCC1ER7TwoWireji>
   d647a:	4b3b      	ldr	r3, [pc, #236]	; (d6568 <_GLOBAL__sub_I___appProductID+0x160>)
   d647c:	602b      	str	r3, [r5, #0]
   d647e:	4632      	mov	r2, r6
   d6480:	493a      	ldr	r1, [pc, #232]	; (d656c <_GLOBAL__sub_I___appProductID+0x164>)
   d6482:	4628      	mov	r0, r5
   d6484:	f004 fa1e 	bl	da8c4 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d6488:	f004 f9f4 	bl	da874 <_Z19__fetch_global_Wirev>
   d648c:	4d38      	ldr	r5, [pc, #224]	; (d6570 <_GLOBAL__sub_I___appProductID+0x168>)
   d648e:	4601      	mov	r1, r0
   d6490:	4628      	mov	r0, r5
   d6492:	f001 fa41 	bl	d7918 <_ZN8MCP79410C1ER7TwoWire>
   d6496:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d6498:	4d36      	ldr	r5, [pc, #216]	; (d6574 <_GLOBAL__sub_I___appProductID+0x16c>)
   d649a:	4937      	ldr	r1, [pc, #220]	; (d6578 <_GLOBAL__sub_I___appProductID+0x170>)
   d649c:	4632      	mov	r2, r6
   d649e:	f004 fa11 	bl	da8c4 <__aeabi_atexit>
   d64a2:	4936      	ldr	r1, [pc, #216]	; (d657c <_GLOBAL__sub_I___appProductID+0x174>)
   d64a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d64a8:	4628      	mov	r0, r5
   d64aa:	f001 feab 	bl	d8204 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d64ae:	4b34      	ldr	r3, [pc, #208]	; (d6580 <_GLOBAL__sub_I___appProductID+0x178>)
   d64b0:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d64b2:	4632      	mov	r2, r6
   d64b4:	4933      	ldr	r1, [pc, #204]	; (d6584 <_GLOBAL__sub_I___appProductID+0x17c>)
   d64b6:	4628      	mov	r0, r5
   d64b8:	f004 fa04 	bl	da8c4 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d64bc:	4b32      	ldr	r3, [pc, #200]	; (d6588 <_GLOBAL__sub_I___appProductID+0x180>)
   d64be:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d64c0:	4b32      	ldr	r3, [pc, #200]	; (d658c <_GLOBAL__sub_I___appProductID+0x184>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d64c2:	4d33      	ldr	r5, [pc, #204]	; (d6590 <_GLOBAL__sub_I___appProductID+0x188>)
   d64c4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d64c6:	4b33      	ldr	r3, [pc, #204]	; (d6594 <_GLOBAL__sub_I___appProductID+0x18c>)
   d64c8:	9304      	str	r3, [sp, #16]
   d64ca:	4b33      	ldr	r3, [pc, #204]	; (d6598 <_GLOBAL__sub_I___appProductID+0x190>)
   d64cc:	602b      	str	r3, [r5, #0]
   d64ce:	712c      	strb	r4, [r5, #4]
   d64d0:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   d64d2:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   d64d4:	f105 010c 	add.w	r1, r5, #12
   d64d8:	a802      	add	r0, sp, #8
   d64da:	f7ff fd31 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      __a = _GLIBCXX_MOVE(__b);
   d64de:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64e0:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d64e2:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64e4:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64e8:	69aa      	ldr	r2, [r5, #24]
   d64ea:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d64ec:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d64ee:	4a2b      	ldr	r2, [pc, #172]	; (d659c <_GLOBAL__sub_I___appProductID+0x194>)
   d64f0:	462b      	mov	r3, r5
   d64f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d64f6:	e9cd 4400 	strd	r4, r4, [sp]
   d64fa:	f105 0008 	add.w	r0, r5, #8
   d64fe:	f001 ffb7 	bl	d8470 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d6502:	a802      	add	r0, sp, #8
   d6504:	f7fd fec1 	bl	d428a <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d6508:	4628      	mov	r0, r5
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d650a:	4d25      	ldr	r5, [pc, #148]	; (d65a0 <_GLOBAL__sub_I___appProductID+0x198>)
Timer keepAliveTimer(1000, keepAliveMessage);
   d650c:	4925      	ldr	r1, [pc, #148]	; (d65a4 <_GLOBAL__sub_I___appProductID+0x19c>)
   d650e:	4632      	mov	r2, r6
   d6510:	f004 f9d8 	bl	da8c4 <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d6514:	4621      	mov	r1, r4
   d6516:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d651a:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d651e:	e9c5 441c 	strd	r4, r4, [r5, #112]	; 0x70
   d6522:	e9c5 441f 	strd	r4, r4, [r5, #124]	; 0x7c
   d6526:	652c      	str	r4, [r5, #80]	; 0x50
   d6528:	65ec      	str	r4, [r5, #92]	; 0x5c
   d652a:	67ac      	str	r4, [r5, #120]	; 0x78
   d652c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
   d6530:	2210      	movs	r2, #16
   d6532:	f105 0088 	add.w	r0, r5, #136	; 0x88
   d6536:	f005 f867 	bl	db608 <memset>
   d653a:	2210      	movs	r2, #16
   d653c:	4621      	mov	r1, r4
   d653e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   d6542:	f005 f861 	bl	db608 <memset>
}
   d6546:	b007      	add	sp, #28
   d6548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d654a:	bf00      	nop
   d654c:	2003df2d 	.word	0x2003df2d
   d6550:	2003df20 	.word	0x2003df20
   d6554:	2003dee0 	.word	0x2003dee0
   d6558:	2003df2c 	.word	0x2003df2c
   d655c:	ffff0000 	.word	0xffff0000
   d6560:	000d4273 	.word	0x000d4273
   d6564:	2003e3a8 	.word	0x2003e3a8
   d6568:	000ddc44 	.word	0x000ddc44
   d656c:	000d4211 	.word	0x000d4211
   d6570:	2003e414 	.word	0x2003e414
   d6574:	2003e3d8 	.word	0x2003e3d8
   d6578:	000d76a3 	.word	0x000d76a3
   d657c:	2003f540 	.word	0x2003f540
   d6580:	000ddc1c 	.word	0x000ddc1c
   d6584:	000d41e9 	.word	0x000d41e9
   d6588:	000d5e99 	.word	0x000d5e99
   d658c:	000d40ed 	.word	0x000d40ed
   d6590:	2003e3b8 	.word	0x2003e3b8
   d6594:	000d40f1 	.word	0x000d40f1
   d6598:	000ddc08 	.word	0x000ddc08
   d659c:	000d4239 	.word	0x000d4239
   d65a0:	2003e448 	.word	0x2003e448
   d65a4:	000d429d 	.word	0x000d429d

000d65a8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d65a8:	b082      	sub	sp, #8
   d65aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65ae:	a90a      	add	r1, sp, #40	; 0x28
   d65b0:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d65b4:	4b34      	ldr	r3, [pc, #208]	; (d6688 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d65b6:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d668c <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d65ba:	2200      	movs	r2, #0
   d65bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d65c0:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d65c2:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d65c6:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d65ca:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d65ce:	f004 f921 	bl	da814 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d65d2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d65d6:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d65d8:	f004 fbf8 	bl	dadcc <__aeabi_i2d>
   d65dc:	4642      	mov	r2, r8
   d65de:	464b      	mov	r3, r9
   d65e0:	4606      	mov	r6, r0
   d65e2:	460f      	mov	r7, r1
   d65e4:	f004 faa4 	bl	dab30 <__aeabi_dsub>
   d65e8:	4652      	mov	r2, sl
   d65ea:	465b      	mov	r3, fp
   d65ec:	f004 fc58 	bl	daea0 <__aeabi_dmul>
   d65f0:	4642      	mov	r2, r8
   d65f2:	464b      	mov	r3, r9
   d65f4:	f004 fa9e 	bl	dab34 <__adddf3>
   d65f8:	4602      	mov	r2, r0
   d65fa:	460b      	mov	r3, r1
   d65fc:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d6600:	4630      	mov	r0, r6
   d6602:	4639      	mov	r1, r7
   d6604:	f004 fa94 	bl	dab30 <__aeabi_dsub>
   d6608:	4602      	mov	r2, r0
   d660a:	460b      	mov	r3, r1
   d660c:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d6610:	f004 fc46 	bl	daea0 <__aeabi_dmul>
   d6614:	4602      	mov	r2, r0
   d6616:	460b      	mov	r3, r1
   d6618:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d661c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d6620:	f004 fa88 	bl	dab34 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d6624:	3d01      	subs	r5, #1
    sumI += sqI;
   d6626:	4606      	mov	r6, r0
   d6628:	460f      	mov	r7, r1
   d662a:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d662e:	d1cc      	bne.n	d65ca <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d6634:	a310      	add	r3, pc, #64	; (adr r3, d6678 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d6636:	e9d3 2300 	ldrd	r2, r3, [r3]
   d663a:	f004 fc31 	bl	daea0 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d663e:	a310      	add	r3, pc, #64	; (adr r3, d6680 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d6640:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6644:	4680      	mov	r8, r0
   d6646:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6648:	4630      	mov	r0, r6
   d664a:	4639      	mov	r1, r7
   d664c:	f004 fd52 	bl	db0f4 <__aeabi_ddiv>
   d6650:	ec41 0b10 	vmov	d0, r0, r1
   d6654:	f004 f944 	bl	da8e0 <sqrt>

  //Reset accumulators
  sumI = 0;
   d6658:	2200      	movs	r2, #0
   d665a:	2300      	movs	r3, #0
   d665c:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6660:	ec51 0b10 	vmov	r0, r1, d0
   d6664:	4642      	mov	r2, r8
   d6666:	464b      	mov	r3, r9
   d6668:	f004 fc1a 	bl	daea0 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d666c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6670:	ec41 0b10 	vmov	d0, r0, r1
   d6674:	b002      	add	sp, #8
   d6676:	4770      	bx	lr
   d6678:	66666666 	.word	0x66666666
   d667c:	3f4a6666 	.word	0x3f4a6666
   d6680:	00000000 	.word	0x00000000
   d6684:	4099f800 	.word	0x4099f800
   d6688:	40a00000 	.word	0x40a00000
   d668c:	3f300000 	.word	0x3f300000

000d6690 <_ZN17CloudConfigUpdate4loopEv>:
    virtual void loop() {};
   d6690:	4770      	bx	lr

000d6692 <_ZN17CloudConfigUpdate11startUpdateEv>:
    virtual void startUpdate() {};
   d6692:	4770      	bx	lr

000d6694 <_ZN22CloudConfigStorageData11getJsonDataEv>:

    parse();
}

const char * const CloudConfigStorageData::getJsonData() const {
    return &((const char * const)header)[sizeof(CloudConfigDataHeader)];
   d6694:	6900      	ldr	r0, [r0, #16]
}
   d6696:	3014      	adds	r0, #20
   d6698:	4770      	bx	lr

000d669a <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d669a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d669c:	4603      	mov	r3, r0
	switch (__op)
   d669e:	d102      	bne.n	d66a6 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d66a0:	6001      	str	r1, [r0, #0]
      }
   d66a2:	2000      	movs	r0, #0
   d66a4:	4770      	bx	lr
	  switch (__op)
   d66a6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d66a8:	bf04      	itt	eq
   d66aa:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d66ae:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d66b2:	e7f6      	b.n	d66a2 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d66b4 <_ZN29CloudConfigUpdateSubscriptionD1Ev>:
 * 
 * You will probably want to subclass this if you want to be able to have the device request an update
 * since there is no way for this class to know how to request it. See CloudConfigUpdateWebhook for
 * and example of using startUpdate() to make a request.
 */
class CloudConfigUpdateSubscription : public CloudConfigUpdate {
   d66b4:	b510      	push	{r4, lr}
   d66b6:	4b04      	ldr	r3, [pc, #16]	; (d66c8 <_ZN29CloudConfigUpdateSubscriptionD1Ev+0x14>)
   d66b8:	4604      	mov	r4, r0
   d66ba:	f840 3b0c 	str.w	r3, [r0], #12
   d66be:	f003 fb45 	bl	d9d4c <_ZN6StringD1Ev>
   d66c2:	4620      	mov	r0, r4
   d66c4:	bd10      	pop	{r4, pc}
   d66c6:	bf00      	nop
   d66c8:	000dde74 	.word	0x000dde74

000d66cc <_ZN29CloudConfigUpdateSubscriptionD0Ev>:
   d66cc:	b510      	push	{r4, lr}
   d66ce:	4604      	mov	r4, r0
   d66d0:	f7ff fff0 	bl	d66b4 <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d66d4:	4620      	mov	r0, r4
   d66d6:	211c      	movs	r1, #28
   d66d8:	f004 f8f9 	bl	da8ce <_ZdlPvj>
   d66dc:	4620      	mov	r0, r4
   d66de:	bd10      	pop	{r4, pc}

000d66e0 <_ZN24CloudConfigUpdateWebhookD1Ev>:
 * Two examples that use this are the Devices Notes example and Google Sheets example.
 * 
 * This is derived from CloudConfigUpdateSubscription but is different because it subscribes
 * to a webhook response event, not eventName.
 */
class CloudConfigUpdateWebhook : public CloudConfigUpdateSubscription {
   d66e0:	b510      	push	{r4, lr}
   d66e2:	4b05      	ldr	r3, [pc, #20]	; (d66f8 <_ZN24CloudConfigUpdateWebhookD1Ev+0x18>)
   d66e4:	4604      	mov	r4, r0
   d66e6:	f840 3b1c 	str.w	r3, [r0], #28
   d66ea:	f003 fb2f 	bl	d9d4c <_ZN6StringD1Ev>
   d66ee:	4620      	mov	r0, r4
   d66f0:	f7ff ffe0 	bl	d66b4 <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d66f4:	4620      	mov	r0, r4
   d66f6:	bd10      	pop	{r4, pc}
   d66f8:	000dde58 	.word	0x000dde58

000d66fc <_ZN24CloudConfigUpdateWebhookD0Ev>:
   d66fc:	b510      	push	{r4, lr}
   d66fe:	4604      	mov	r4, r0
   d6700:	f7ff ffee 	bl	d66e0 <_ZN24CloudConfigUpdateWebhookD1Ev>
   d6704:	4620      	mov	r0, r4
   d6706:	212c      	movs	r1, #44	; 0x2c
   d6708:	f004 f8e1 	bl	da8ce <_ZdlPvj>
   d670c:	4620      	mov	r0, r4
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZN22CloudConfigStorageData10updateDataEPKc>:

char *CloudConfigStorageData::getJsonData() {
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
}

bool CloudConfigStorageData::updateData(const char *json) {
   d6710:	b513      	push	{r0, r1, r4, lr}
   d6712:	4604      	mov	r4, r0
    size_t jsonLen = strlen(json);
   d6714:	4608      	mov	r0, r1
   d6716:	9101      	str	r1, [sp, #4]
   d6718:	f004 ffd1 	bl	db6be <strlen>
    if (jsonLen < (dataSize - 1)) {
   d671c:	6963      	ldr	r3, [r4, #20]
   d671e:	3b01      	subs	r3, #1
   d6720:	4283      	cmp	r3, r0
   d6722:	d90f      	bls.n	d6744 <_ZN22CloudConfigStorageData10updateDataEPKc+0x34>
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
   d6724:	6920      	ldr	r0, [r4, #16]
        strcpy(getJsonData(), json);
   d6726:	9901      	ldr	r1, [sp, #4]
   d6728:	3014      	adds	r0, #20
   d672a:	f004 ffa3 	bl	db674 <strcpy>
        parse();
   d672e:	6823      	ldr	r3, [r4, #0]
   d6730:	4620      	mov	r0, r4
   d6732:	68db      	ldr	r3, [r3, #12]
   d6734:	4798      	blx	r3
        return save();
   d6736:	6823      	ldr	r3, [r4, #0]
   d6738:	6a1b      	ldr	r3, [r3, #32]
   d673a:	4620      	mov	r0, r4
    }
    else {
        // Too long, reject
        return false;
    }
}
   d673c:	b002      	add	sp, #8
   d673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return save();
   d6742:	4718      	bx	r3
}
   d6744:	2000      	movs	r0, #0
   d6746:	b002      	add	sp, #8
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d674a:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d674c:	6842      	ldr	r2, [r0, #4]
   d674e:	4603      	mov	r3, r0
   d6750:	1054      	asrs	r4, r2, #1
   d6752:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6756:	07d2      	lsls	r2, r2, #31
   d6758:	bf48      	it	mi
   d675a:	590a      	ldrmi	r2, [r1, r4]
   d675c:	681b      	ldr	r3, [r3, #0]
      }
   d675e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6762:	bf48      	it	mi
   d6764:	58d3      	ldrmi	r3, [r2, r3]
   d6766:	4718      	bx	r3

000d6768 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6768:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d676a:	b538      	push	{r3, r4, r5, lr}
   d676c:	4604      	mov	r4, r0
	  switch (__op)
   d676e:	d007      	beq.n	d6780 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6770:	2a03      	cmp	r2, #3
   d6772:	d011      	beq.n	d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6774:	2a01      	cmp	r2, #1
   d6776:	d101      	bne.n	d677c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6778:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d677a:	6023      	str	r3, [r4, #0]
	}
   d677c:	2000      	movs	r0, #0
   d677e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6780:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d6782:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6784:	f7fd fc87 	bl	d4096 <_Znwj>
   d6788:	4603      	mov	r3, r0
   d678a:	2800      	cmp	r0, #0
   d678c:	d0f5      	beq.n	d677a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d678e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d6792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d6796:	e7f0      	b.n	d677a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6798:	6800      	ldr	r0, [r0, #0]
   d679a:	2800      	cmp	r0, #0
   d679c:	d0ee      	beq.n	d677c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d679e:	210c      	movs	r1, #12
   d67a0:	f004 f895 	bl	da8ce <_ZdlPvj>
   d67a4:	e7ea      	b.n	d677c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d67a6 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM29CloudConfigUpdateSubscriptionFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d67a6:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d67a8:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d67aa:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d67ac:	685c      	ldr	r4, [r3, #4]
   d67ae:	689d      	ldr	r5, [r3, #8]
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	6812      	ldr	r2, [r2, #0]
   d67b4:	1066      	asrs	r6, r4, #1
   d67b6:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d67ba:	07e4      	lsls	r4, r4, #31
   d67bc:	bf44      	itt	mi
   d67be:	59ac      	ldrmi	r4, [r5, r6]
   d67c0:	58e3      	ldrmi	r3, [r4, r3]
      }
   d67c2:	bc70      	pop	{r4, r5, r6}
   d67c4:	4718      	bx	r3
	...

000d67c8 <_ZN11CloudConfigD1Ev>:

CloudConfig::CloudConfig() {

}

CloudConfig::~CloudConfig() {
   d67c8:	b510      	push	{r4, lr}
   d67ca:	4b06      	ldr	r3, [pc, #24]	; (d67e4 <_ZN11CloudConfigD1Ev+0x1c>)
   d67cc:	4604      	mov	r4, r0
   d67ce:	f840 3b24 	str.w	r3, [r0], #36
    class function<_Res(_ArgTypes...)>
   d67d2:	f7fd fd5a 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d67d6:	f104 000c 	add.w	r0, r4, #12
   d67da:	f7fd fd56 	bl	d428a <_ZNSt14_Function_baseD1Ev>

}
   d67de:	4620      	mov	r0, r4
   d67e0:	bd10      	pop	{r4, pc}
   d67e2:	bf00      	nop
   d67e4:	000dde18 	.word	0x000dde18

000d67e8 <_ZN11CloudConfigD0Ev>:
CloudConfig::~CloudConfig() {
   d67e8:	b510      	push	{r4, lr}
   d67ea:	4604      	mov	r4, r0
}
   d67ec:	f7ff ffec 	bl	d67c8 <_ZN11CloudConfigD1Ev>
   d67f0:	4620      	mov	r0, r4
   d67f2:	2138      	movs	r1, #56	; 0x38
   d67f4:	f004 f86b 	bl	da8ce <_ZdlPvj>
   d67f8:	4620      	mov	r0, r4
   d67fa:	bd10      	pop	{r4, pc}

000d67fc <_ZNK18CloudConfigStorage11hasJsonDataEv>:
    bool hasJsonData() const { return getJsonData()[0] != 0; };
   d67fc:	b508      	push	{r3, lr}
   d67fe:	6803      	ldr	r3, [r0, #0]
   d6800:	685b      	ldr	r3, [r3, #4]
   d6802:	4798      	blx	r3
   d6804:	7800      	ldrb	r0, [r0, #0]
   d6806:	3800      	subs	r0, #0
   d6808:	bf18      	it	ne
   d680a:	2001      	movne	r0, #1
   d680c:	bd08      	pop	{r3, pc}
	...

000d6810 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>:
CloudConfigStorageData::CloudConfigStorageData(CloudConfigDataHeader *header, size_t dataSize) : header(header), dataSize(dataSize) {
   d6810:	b510      	push	{r4, lr}
      : _M_ptr(0), _M_refcount()
   d6812:	2400      	movs	r4, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6814:	e9c0 4401 	strd	r4, r4, [r0, #4]
        t_(nullptr) {
   d6818:	60c4      	str	r4, [r0, #12]
   d681a:	4c02      	ldr	r4, [pc, #8]	; (d6824 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj+0x14>)
   d681c:	6004      	str	r4, [r0, #0]
   d681e:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   d6822:	bd10      	pop	{r4, pc}
   d6824:	000dde2c 	.word	0x000dde2c

000d6828 <_ZN22CloudConfigStorageData8validateEv>:
void CloudConfigStorageData::validate() {
   d6828:	b570      	push	{r4, r5, r6, lr}
   d682a:	4604      	mov	r4, r0
    if (header->magic == CloudConfig::DATA_MAGIC &&
   d682c:	6900      	ldr	r0, [r0, #16]
   d682e:	4d11      	ldr	r5, [pc, #68]	; (d6874 <_ZN22CloudConfigStorageData8validateEv+0x4c>)
   d6830:	6802      	ldr	r2, [r0, #0]
   d6832:	42aa      	cmp	r2, r5
   d6834:	d106      	bne.n	d6844 <_ZN22CloudConfigStorageData8validateEv+0x1c>
   d6836:	7903      	ldrb	r3, [r0, #4]
   d6838:	2b14      	cmp	r3, #20
   d683a:	d103      	bne.n	d6844 <_ZN22CloudConfigStorageData8validateEv+0x1c>
        header->headerSize == (uint8_t)sizeof(CloudConfigDataHeader) &&
   d683c:	88c2      	ldrh	r2, [r0, #6]
   d683e:	8aa3      	ldrh	r3, [r4, #20]
   d6840:	429a      	cmp	r2, r3
   d6842:	d011      	beq.n	d6868 <_ZN22CloudConfigStorageData8validateEv+0x40>
        memset(header, 0, sizeof(CloudConfigDataHeader));
   d6844:	2614      	movs	r6, #20
   d6846:	4632      	mov	r2, r6
   d6848:	2100      	movs	r1, #0
   d684a:	f004 fedd 	bl	db608 <memset>
        header->magic = CloudConfig::DATA_MAGIC;
   d684e:	6923      	ldr	r3, [r4, #16]
   d6850:	601d      	str	r5, [r3, #0]
        header->headerSize = (uint8_t)sizeof(CloudConfigDataHeader);
   d6852:	6923      	ldr	r3, [r4, #16]
   d6854:	711e      	strb	r6, [r3, #4]
        header->dataSize = (uint16_t)dataSize;
   d6856:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d685a:	80da      	strh	r2, [r3, #6]
        memset(getJsonData(), 0, dataSize);
   d685c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   d6860:	2100      	movs	r1, #0
   d6862:	4430      	add	r0, r6
   d6864:	f004 fed0 	bl	db608 <memset>
    parse();
   d6868:	6823      	ldr	r3, [r4, #0]
   d686a:	4620      	mov	r0, r4
   d686c:	68db      	ldr	r3, [r3, #12]
}
   d686e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    parse();
   d6872:	4718      	bx	r3
   d6874:	7251dd53 	.word	0x7251dd53

000d6878 <_ZN11CloudConfigC1Ev>:
CloudConfig::CloudConfig() {
   d6878:	4a05      	ldr	r2, [pc, #20]	; (d6890 <_ZN11CloudConfigC1Ev+0x18>)
   d687a:	6002      	str	r2, [r0, #0]
   d687c:	2200      	movs	r2, #0
   d687e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   d6882:	e9c0 2207 	strd	r2, r2, [r0, #28]
    _Function_base() : _M_manager(nullptr) { }
   d6886:	6142      	str	r2, [r0, #20]
   d6888:	62c2      	str	r2, [r0, #44]	; 0x2c
   d688a:	6342      	str	r2, [r0, #52]	; 0x34
}
   d688c:	4770      	bx	lr
   d688e:	bf00      	nop
   d6890:	000dde18 	.word	0x000dde18

000d6894 <_ZN11CloudConfig8instanceEv>:
CloudConfig &CloudConfig::instance() {
   d6894:	b510      	push	{r4, lr}
    if (!_instance) {
   d6896:	4c06      	ldr	r4, [pc, #24]	; (d68b0 <_ZN11CloudConfig8instanceEv+0x1c>)
   d6898:	6823      	ldr	r3, [r4, #0]
   d689a:	b93b      	cbnz	r3, d68ac <_ZN11CloudConfig8instanceEv+0x18>
        _instance = new CloudConfig();
   d689c:	2038      	movs	r0, #56	; 0x38
   d689e:	f7fd fbfa 	bl	d4096 <_Znwj>
   d68a2:	4603      	mov	r3, r0
   d68a4:	b108      	cbz	r0, d68aa <_ZN11CloudConfig8instanceEv+0x16>
   d68a6:	f7ff ffe7 	bl	d6878 <_ZN11CloudConfigC1Ev>
   d68aa:	6023      	str	r3, [r4, #0]
}
   d68ac:	6820      	ldr	r0, [r4, #0]
   d68ae:	bd10      	pop	{r4, pc}
   d68b0:	2003e5f8 	.word	0x2003e5f8

000d68b4 <_ZN29CloudConfigUpdateSubscription19subscriptionHandlerEPKcS1_>:

void CloudConfigUpdateSubscription::setup() {
    Particle.subscribe(eventName, &CloudConfigUpdateSubscription::subscriptionHandler, this);
}

void CloudConfigUpdateSubscription::subscriptionHandler(const char *eventName, const char *eventData) {
   d68b4:	b507      	push	{r0, r1, r2, lr}
   d68b6:	9201      	str	r2, [sp, #4]
    CloudConfig::instance().updateData(eventData);
   d68b8:	f7ff ffec 	bl	d6894 <_ZN11CloudConfig8instanceEv>
   d68bc:	6803      	ldr	r3, [r0, #0]
   d68be:	9901      	ldr	r1, [sp, #4]
   d68c0:	681b      	ldr	r3, [r3, #0]
}
   d68c2:	b003      	add	sp, #12
   d68c4:	f85d eb04 	ldr.w	lr, [sp], #4
    CloudConfig::instance().updateData(eventData);
   d68c8:	4718      	bx	r3

000d68ca <_ZN11CloudConfig4loopEv>:
void CloudConfig::loop() {
   d68ca:	b510      	push	{r4, lr}
   d68cc:	4604      	mov	r4, r0
    storageMethod->loop();
   d68ce:	6840      	ldr	r0, [r0, #4]
   d68d0:	6803      	ldr	r3, [r0, #0]
   d68d2:	691b      	ldr	r3, [r3, #16]
   d68d4:	4798      	blx	r3
    if (updateMethod) {
   d68d6:	68a0      	ldr	r0, [r4, #8]
   d68d8:	b110      	cbz	r0, d68e0 <_ZN11CloudConfig4loopEv+0x16>
        updateMethod->loop();
   d68da:	6803      	ldr	r3, [r0, #0]
   d68dc:	685b      	ldr	r3, [r3, #4]
   d68de:	4798      	blx	r3
    if (stateHandler) {
   d68e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d68e2:	b133      	cbz	r3, d68f2 <_ZN11CloudConfig4loopEv+0x28>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d68e6:	4621      	mov	r1, r4
   d68e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   d68ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d68f0:	4718      	bx	r3
   d68f2:	bd10      	pop	{r4, pc}

000d68f4 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>:

    // This is the subscription event name (hook-response)
    withEventName(eventName);
}

CloudConfigUpdateWebhook &CloudConfigUpdateWebhook::withEventName(const char *eventName) {
   d68f4:	b510      	push	{r4, lr}
   d68f6:	b08a      	sub	sp, #40	; 0x28
   d68f8:	4604      	mov	r4, r0
        return spark_deviceID();
   d68fa:	a806      	add	r0, sp, #24
   d68fc:	9101      	str	r1, [sp, #4]
   d68fe:	f002 f835 	bl	d896c <spark_deviceID>
    // Response Template:
    // {{PARTICLE_DEVICE_ID}}/hook-response/{{PARTICLE_EVENT_NAME}}
    String s = String::format("%s/hook-response/%s/", System.deviceID().c_str(), eventName);
   d6902:	9b01      	ldr	r3, [sp, #4]
   d6904:	9a06      	ldr	r2, [sp, #24]
   d6906:	4909      	ldr	r1, [pc, #36]	; (d692c <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc+0x38>)
   d6908:	a802      	add	r0, sp, #8
   d690a:	f003 faf9 	bl	d9f00 <_ZN6String6formatEPKcz>
   d690e:	a806      	add	r0, sp, #24
   d6910:	f003 fa1c 	bl	d9d4c <_ZN6StringD1Ev>
    CloudConfigUpdateSubscription &withEventName(const char *eventName) { this->eventName = eventName; return *this; };
   d6914:	9902      	ldr	r1, [sp, #8]
   d6916:	f104 000c 	add.w	r0, r4, #12
   d691a:	f003 fa90 	bl	d9e3e <_ZN6StringaSEPKc>
   d691e:	a802      	add	r0, sp, #8
   d6920:	f003 fa14 	bl	d9d4c <_ZN6StringD1Ev>

    CloudConfigUpdateSubscription::withEventName(s);
    return *this;
}
   d6924:	4620      	mov	r0, r4
   d6926:	b00a      	add	sp, #40	; 0x28
   d6928:	bd10      	pop	{r4, pc}
   d692a:	bf00      	nop
   d692c:	000ddd14 	.word	0x000ddd14

000d6930 <_ZN24CloudConfigUpdateWebhookC1EPKc>:
    CloudConfigUpdate() {};
   d6930:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6934:	f64e 2360 	movw	r3, #60000	; 0xea60
CloudConfigUpdateWebhook::CloudConfigUpdateWebhook(const char *eventName) {
   d6938:	b570      	push	{r4, r5, r6, lr}
   d693a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   d693e:	4604      	mov	r4, r0
    CloudConfigUpdateSubscription() {};
   d6940:	4b0c      	ldr	r3, [pc, #48]	; (d6974 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x44>)
   d6942:	f840 3b0c 	str.w	r3, [r0], #12
   d6946:	460d      	mov	r5, r1
   d6948:	4626      	mov	r6, r4
   d694a:	490b      	ldr	r1, [pc, #44]	; (d6978 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d694c:	f003 fa49 	bl	d9de2 <_ZN6StringC1EPKc>
   d6950:	4b0a      	ldr	r3, [pc, #40]	; (d697c <_ZN24CloudConfigUpdateWebhookC1EPKc+0x4c>)
   d6952:	f846 3b1c 	str.w	r3, [r6], #28
   d6956:	4908      	ldr	r1, [pc, #32]	; (d6978 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d6958:	4630      	mov	r0, r6
   d695a:	f003 fa42 	bl	d9de2 <_ZN6StringC1EPKc>
    requestEventName = eventName;
   d695e:	4629      	mov	r1, r5
   d6960:	4630      	mov	r0, r6
   d6962:	f003 fa6c 	bl	d9e3e <_ZN6StringaSEPKc>
    withEventName(eventName);
   d6966:	4629      	mov	r1, r5
   d6968:	4620      	mov	r0, r4
   d696a:	f7ff ffc3 	bl	d68f4 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>
}
   d696e:	4620      	mov	r0, r4
   d6970:	bd70      	pop	{r4, r5, r6, pc}
   d6972:	bf00      	nop
   d6974:	000dde74 	.word	0x000dde74
   d6978:	000de334 	.word	0x000de334
   d697c:	000dde58 	.word	0x000dde58

000d6980 <_ZNKSt8functionIFvvEEclEv>:
      if (_M_empty())
   d6980:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6982:	b510      	push	{r4, lr}
      if (_M_empty())
   d6984:	b90a      	cbnz	r2, d698a <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d6986:	f003 ffa8 	bl	da8da <_ZSt25__throw_bad_function_callv>
    }
   d698a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d698e:	68c3      	ldr	r3, [r0, #12]
   d6990:	4718      	bx	r3
	...

000d6994 <_ZN11CloudConfig10updateDataEPKc>:
bool CloudConfig::updateData(const char *json) {
   d6994:	b538      	push	{r3, r4, r5, lr}
   d6996:	4604      	mov	r4, r0
    Log.info("updateData called %s", json);
   d6998:	460a      	mov	r2, r1
   d699a:	480a      	ldr	r0, [pc, #40]	; (d69c4 <_ZN11CloudConfig10updateDataEPKc+0x30>)
bool CloudConfig::updateData(const char *json) {
   d699c:	460d      	mov	r5, r1
    Log.info("updateData called %s", json);
   d699e:	490a      	ldr	r1, [pc, #40]	; (d69c8 <_ZN11CloudConfig10updateDataEPKc+0x34>)
   d69a0:	f7fd fcf6 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    if (storageMethod) {
   d69a4:	6860      	ldr	r0, [r4, #4]
    updateDataStatus = UpdateDataStatus::SUCCESS;
   d69a6:	2302      	movs	r3, #2
   d69a8:	6223      	str	r3, [r4, #32]
    if (storageMethod) {
   d69aa:	b148      	cbz	r0, d69c0 <_ZN11CloudConfig10updateDataEPKc+0x2c>
        storageMethod->updateData(json);
   d69ac:	6803      	ldr	r3, [r0, #0]
   d69ae:	4629      	mov	r1, r5
   d69b0:	695b      	ldr	r3, [r3, #20]
   d69b2:	4798      	blx	r3
        if (dataCallback) {
   d69b4:	6963      	ldr	r3, [r4, #20]
   d69b6:	b11b      	cbz	r3, d69c0 <_ZN11CloudConfig10updateDataEPKc+0x2c>
            dataCallback();
   d69b8:	f104 000c 	add.w	r0, r4, #12
   d69bc:	f7ff ffe0 	bl	d6980 <_ZNKSt8functionIFvvEEclEv>
}
   d69c0:	2001      	movs	r0, #1
   d69c2:	bd38      	pop	{r3, r4, r5, pc}
   d69c4:	2003e618 	.word	0x2003e618
   d69c8:	000ddd29 	.word	0x000ddd29

000d69cc <_ZN24CloudConfigUpdateWebhook11startUpdateEv>:

void CloudConfigUpdateWebhook::startUpdate() {
   d69cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d69ce:	4604      	mov	r4, r0
    Log.info("CloudConfigUpdateWebhook::startUpdate %s", requestEventName.c_str());
   d69d0:	69c2      	ldr	r2, [r0, #28]
   d69d2:	4909      	ldr	r1, [pc, #36]	; (d69f8 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x2c>)
   d69d4:	4809      	ldr	r0, [pc, #36]	; (d69fc <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x30>)
   d69d6:	f7fd fcdb 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d69da:	4b09      	ldr	r3, [pc, #36]	; (d6a00 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x34>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d69dc:	4a09      	ldr	r2, [pc, #36]	; (d6a04 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x38>)
   d69de:	781b      	ldrb	r3, [r3, #0]
   d69e0:	69e1      	ldr	r1, [r4, #28]
   d69e2:	f88d 3000 	strb.w	r3, [sp]
   d69e6:	a802      	add	r0, sp, #8
   d69e8:	233c      	movs	r3, #60	; 0x3c
   d69ea:	f002 fa5f 	bl	d8eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   d69ee:	a803      	add	r0, sp, #12
   d69f0:	f7ff fa0e 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    Particle.publish(requestEventName, "");
}
   d69f4:	b004      	add	sp, #16
   d69f6:	bd10      	pop	{r4, pc}
   d69f8:	000ddd3e 	.word	0x000ddd3e
   d69fc:	2003e618 	.word	0x2003e618
   d6a00:	2003e5f6 	.word	0x2003e5f6
   d6a04:	000de334 	.word	0x000de334

000d6a08 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6a08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a0a:	2300      	movs	r3, #0
   d6a0c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6a0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6a10:	4604      	mov	r4, r0
   d6a12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6a14:	b12b      	cbz	r3, d6a22 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a16:	2202      	movs	r2, #2
   d6a18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a1a:	68eb      	ldr	r3, [r5, #12]
   d6a1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a1e:	68ab      	ldr	r3, [r5, #8]
   d6a20:	60a3      	str	r3, [r4, #8]
    }
   d6a22:	4620      	mov	r0, r4
   d6a24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a28 <_ZN29CloudConfigUpdateSubscription5setupEv>:
void CloudConfigUpdateSubscription::setup() {
   d6a28:	b570      	push	{r4, r5, r6, lr}
   d6a2a:	b08a      	sub	sp, #40	; 0x28
        operator const char*() const { return c_str(); }
   d6a2c:	68c6      	ldr	r6, [r0, #12]
   d6a2e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6a30:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a32:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d6a34:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a36:	f7fd fb2e 	bl	d4096 <_Znwj>
   d6a3a:	b118      	cbz	r0, d6a44 <_ZN29CloudConfigUpdateSubscription5setupEv+0x1c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6a3c:	4b13      	ldr	r3, [pc, #76]	; (d6a8c <_ZN29CloudConfigUpdateSubscription5setupEv+0x64>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a3e:	6084      	str	r4, [r0, #8]
   d6a40:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d6a44:	4b12      	ldr	r3, [pc, #72]	; (d6a90 <_ZN29CloudConfigUpdateSubscription5setupEv+0x68>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a46:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6a48:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d6a4a:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d6a4c:	4b11      	ldr	r3, [pc, #68]	; (d6a94 <_ZN29CloudConfigUpdateSubscription5setupEv+0x6c>)
   d6a4e:	9304      	str	r3, [sp, #16]
   d6a50:	a806      	add	r0, sp, #24
   d6a52:	f7ff ffd9 	bl	d6a08 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d6a56:	9b08      	ldr	r3, [sp, #32]
   d6a58:	b183      	cbz	r3, d6a7c <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d6a5a:	2010      	movs	r0, #16
   d6a5c:	f7fd fb1b 	bl	d4096 <_Znwj>
   d6a60:	4604      	mov	r4, r0
   d6a62:	b158      	cbz	r0, d6a7c <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
   d6a64:	a906      	add	r1, sp, #24
   d6a66:	f7ff ffcf 	bl	d6a08 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d6a6a:	2300      	movs	r3, #0
   d6a6c:	e9cd 3300 	strd	r3, r3, [sp]
   d6a70:	4909      	ldr	r1, [pc, #36]	; (d6a98 <_ZN29CloudConfigUpdateSubscription5setupEv+0x70>)
   d6a72:	2301      	movs	r3, #1
   d6a74:	4622      	mov	r2, r4
   d6a76:	4630      	mov	r0, r6
   d6a78:	f001 ff88 	bl	d898c <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d6a7c:	a806      	add	r0, sp, #24
   d6a7e:	f7fd fc04 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d6a82:	a802      	add	r0, sp, #8
   d6a84:	f7fd fc01 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d6a88:	b00a      	add	sp, #40	; 0x28
   d6a8a:	bd70      	pop	{r4, r5, r6, pc}
   d6a8c:	000d68b5 	.word	0x000d68b5
   d6a90:	000d67a7 	.word	0x000d67a7
   d6a94:	000d6769 	.word	0x000d6769
   d6a98:	000d8cab 	.word	0x000d8cab

000d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6a9c:	680b      	ldr	r3, [r1, #0]
   d6a9e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6aa0:	b113      	cbz	r3, d6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6aa2:	685a      	ldr	r2, [r3, #4]
   d6aa4:	3201      	adds	r2, #1
   d6aa6:	605a      	str	r2, [r3, #4]
      }
   d6aa8:	4770      	bx	lr

000d6aaa <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6aac:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6aae:	f851 3b04 	ldr.w	r3, [r1], #4
   d6ab2:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6ab4:	4604      	mov	r4, r0
   d6ab6:	a801      	add	r0, sp, #4
   d6ab8:	f7ff fff0 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6abc:	466a      	mov	r2, sp
   d6abe:	4629      	mov	r1, r5
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f002 feaf 	bl	d9824 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6ac6:	a801      	add	r0, sp, #4
   d6ac8:	f7ff f9a2 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6acc:	4620      	mov	r0, r4
   d6ace:	b003      	add	sp, #12
   d6ad0:	bd30      	pop	{r4, r5, pc}

000d6ad2 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>:
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6ad2:	b570      	push	{r4, r5, r6, lr}
   d6ad4:	b08c      	sub	sp, #48	; 0x30
   d6ad6:	4604      	mov	r4, r0
    JSONObjectIterator iter(parentObj);
   d6ad8:	a806      	add	r0, sp, #24
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6ada:	4616      	mov	r6, r2
    JSONObjectIterator iter(parentObj);
   d6adc:	f7ff ffe5 	bl	d6aaa <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while(iter.next()) {
   d6ae0:	a806      	add	r0, sp, #24
   d6ae2:	f002 feb7 	bl	d9854 <_ZN5spark18JSONObjectIterator4nextEv>
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	d02d      	beq.n	d6b46 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x74>
    return JSONString(k_, d_);
   d6aea:	9d09      	ldr	r5, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6aec:	9b06      	ldr	r3, [sp, #24]
   d6aee:	9300      	str	r3, [sp, #0]
   d6af0:	a907      	add	r1, sp, #28
   d6af2:	a801      	add	r0, sp, #4
   d6af4:	f7ff ffd2 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6af8:	4629      	mov	r1, r5
   d6afa:	466a      	mov	r2, sp
   d6afc:	a802      	add	r0, sp, #8
   d6afe:	f002 fe6d 	bl	d97dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6b02:	a801      	add	r0, sp, #4
   d6b04:	f7ff f984 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (strcmp((const char *)iter.name(), key) == 0) {
   d6b08:	9804      	ldr	r0, [sp, #16]
   d6b0a:	4631      	mov	r1, r6
   d6b0c:	f004 fda8 	bl	db660 <strcmp>
   d6b10:	4605      	mov	r5, r0
   d6b12:	a803      	add	r0, sp, #12
   d6b14:	f7ff f97c 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b18:	2d00      	cmp	r5, #0
   d6b1a:	d1e1      	bne.n	d6ae0 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0xe>
    return JSONValue(v_, d_);
   d6b1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b1e:	9b06      	ldr	r3, [sp, #24]
   d6b20:	9302      	str	r3, [sp, #8]
   d6b22:	a907      	add	r1, sp, #28
   d6b24:	a803      	add	r0, sp, #12
   d6b26:	f7ff ffb9 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6b2a:	aa02      	add	r2, sp, #8
   d6b2c:	4629      	mov	r1, r5
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f002 fd3e 	bl	d95b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6b34:	a803      	add	r0, sp, #12
   d6b36:	f7ff f96b 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b3a:	a807      	add	r0, sp, #28
   d6b3c:	f7ff f968 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b40:	4620      	mov	r0, r4
   d6b42:	b00c      	add	sp, #48	; 0x30
   d6b44:	bd70      	pop	{r4, r5, r6, pc}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b46:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
   d6b4a:	60a0      	str	r0, [r4, #8]
}
   d6b4c:	e7f5      	b.n	d6b3a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x68>
	...

000d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6b50:	b510      	push	{r4, lr}
   d6b52:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6b56:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6b58:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6b5a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6b5c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6b5e:	b90a      	cbnz	r2, d6b64 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6b60:	07d9      	lsls	r1, r3, #31
   d6b62:	d505      	bpl.n	d6b70 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6b68:	4b0f      	ldr	r3, [pc, #60]	; (d6ba8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6b6a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6b6c:	4b0f      	ldr	r3, [pc, #60]	; (d6bac <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6b6e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b70:	ab02      	add	r3, sp, #8
   d6b72:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6b76:	466a      	mov	r2, sp
   d6b78:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6b7c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6b80:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6b84:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b88:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b8a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6b8e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b90:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b92:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b94:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6b96:	4618      	mov	r0, r3
   d6b98:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b9a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6b9c:	9105      	str	r1, [sp, #20]
   d6b9e:	f7fd fb74 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	b006      	add	sp, #24
   d6ba6:	bd10      	pop	{r4, pc}
   d6ba8:	000d674b 	.word	0x000d674b
   d6bac:	000d669b 	.word	0x000d669b

000d6bb0 <_ZN11CloudConfig5setupEv>:
void CloudConfig::setup() {
   d6bb0:	b513      	push	{r0, r1, r4, lr}
   d6bb2:	4604      	mov	r4, r0
    if (!storageMethod) {
   d6bb4:	6840      	ldr	r0, [r0, #4]
   d6bb6:	b180      	cbz	r0, d6bda <_ZN11CloudConfig5setupEv+0x2a>
    storageMethod->setup();
   d6bb8:	6803      	ldr	r3, [r0, #0]
   d6bba:	689b      	ldr	r3, [r3, #8]
   d6bbc:	4798      	blx	r3
    if (updateMethod) {
   d6bbe:	68a0      	ldr	r0, [r4, #8]
   d6bc0:	b158      	cbz	r0, d6bda <_ZN11CloudConfig5setupEv+0x2a>
        updateMethod->setup();
   d6bc2:	6803      	ldr	r3, [r0, #0]
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	4798      	blx	r3
        stateHandler = &CloudConfig::stateStart;
   d6bc8:	4b05      	ldr	r3, [pc, #20]	; (d6be0 <_ZN11CloudConfig5setupEv+0x30>)
   d6bca:	9300      	str	r3, [sp, #0]
   d6bcc:	4669      	mov	r1, sp
   d6bce:	2300      	movs	r3, #0
   d6bd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	f7ff ffbb 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6bda:	b002      	add	sp, #8
   d6bdc:	bd10      	pop	{r4, pc}
   d6bde:	bf00      	nop
   d6be0:	000d6be5 	.word	0x000d6be5

000d6be4 <_ZN11CloudConfig10stateStartEv>:
void CloudConfig::stateStart() {
   d6be4:	b513      	push	{r0, r1, r4, lr}
   d6be6:	4604      	mov	r4, r0
    if (storageMethod->hasJsonData() && dataCallback) {
   d6be8:	6840      	ldr	r0, [r0, #4]
   d6bea:	f7ff fe07 	bl	d67fc <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6bee:	b128      	cbz	r0, d6bfc <_ZN11CloudConfig10stateStartEv+0x18>
   d6bf0:	6963      	ldr	r3, [r4, #20]
   d6bf2:	b11b      	cbz	r3, d6bfc <_ZN11CloudConfig10stateStartEv+0x18>
        dataCallback();
   d6bf4:	f104 000c 	add.w	r0, r4, #12
   d6bf8:	f7ff fec2 	bl	d6980 <_ZNKSt8functionIFvvEEclEv>
    stateHandler = &CloudConfig::stateWaitCloudConnected;
   d6bfc:	4b05      	ldr	r3, [pc, #20]	; (d6c14 <_ZN11CloudConfig10stateStartEv+0x30>)
   d6bfe:	9300      	str	r3, [sp, #0]
   d6c00:	4669      	mov	r1, sp
   d6c02:	2300      	movs	r3, #0
   d6c04:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	f7ff ffa1 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6c0e:	b002      	add	sp, #8
   d6c10:	bd10      	pop	{r4, pc}
   d6c12:	bf00      	nop
   d6c14:	000d6c19 	.word	0x000d6c19

000d6c18 <_ZN11CloudConfig23stateWaitCloudConnectedEv>:
void CloudConfig::stateWaitCloudConnected() {
   d6c18:	b513      	push	{r0, r1, r4, lr}
   d6c1a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c1c:	f001 fe9e 	bl	d895c <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d6c20:	b190      	cbz	r0, d6c48 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
   d6c22:	f003 fb03 	bl	da22c <_ZN9TimeClass7isValidEv>
   d6c26:	b178      	cbz	r0, d6c48 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
    Log.info("cloud connected");
   d6c28:	4908      	ldr	r1, [pc, #32]	; (d6c4c <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x34>)
   d6c2a:	4809      	ldr	r0, [pc, #36]	; (d6c50 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x38>)
   d6c2c:	f7fd fbb0 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &CloudConfig::stateWaitAfterCloudConnected;
   d6c30:	4b08      	ldr	r3, [pc, #32]	; (d6c54 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x3c>)
   d6c32:	9300      	str	r3, [sp, #0]
   d6c34:	4669      	mov	r1, sp
   d6c36:	2300      	movs	r3, #0
   d6c38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	f7ff ff87 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6c42:	f001 fc8d 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d6c46:	6360      	str	r0, [r4, #52]	; 0x34
}
   d6c48:	b002      	add	sp, #8
   d6c4a:	bd10      	pop	{r4, pc}
   d6c4c:	000ddd67 	.word	0x000ddd67
   d6c50:	2003e618 	.word	0x2003e618
   d6c54:	000d6c59 	.word	0x000d6c59

000d6c58 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv>:
void CloudConfig::stateWaitAfterCloudConnected() {
   d6c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c5a:	4604      	mov	r4, r0
   d6c5c:	f001 fc80 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < updateMethod->waitAfterCloudConnectedMs) {
   d6c60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6c62:	1ac0      	subs	r0, r0, r3
   d6c64:	68a3      	ldr	r3, [r4, #8]
   d6c66:	685b      	ldr	r3, [r3, #4]
   d6c68:	4298      	cmp	r0, r3
   d6c6a:	d317      	bcc.n	d6c9c <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x44>
    if (!storageMethod->hasJsonData() || updateFrequency == UPDATE_AT_RESTART) {
   d6c6c:	6860      	ldr	r0, [r4, #4]
   d6c6e:	f7ff fdc5 	bl	d67fc <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6c72:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d6c76:	b198      	cbz	r0, d6ca0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
   d6c78:	69e3      	ldr	r3, [r4, #28]
   d6c7a:	3301      	adds	r3, #1
   d6c7c:	d010      	beq.n	d6ca0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
        Log.info("wait for update");
   d6c7e:	490b      	ldr	r1, [pc, #44]	; (d6cac <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x54>)
   d6c80:	480b      	ldr	r0, [pc, #44]	; (d6cb0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6c82:	f7fd fb85 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d6c86:	f001 fc6b 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &CloudConfig::stateWaitToUpdate;
   d6c8a:	4b0a      	ldr	r3, [pc, #40]	; (d6cb4 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x5c>)
        stateTime = millis();
   d6c8c:	6360      	str	r0, [r4, #52]	; 0x34
        stateHandler = &CloudConfig::stateStartUpdate;
   d6c8e:	9300      	str	r3, [sp, #0]
   d6c90:	4669      	mov	r1, sp
   d6c92:	2300      	movs	r3, #0
   d6c94:	4628      	mov	r0, r5
   d6c96:	9301      	str	r3, [sp, #4]
   d6c98:	f7ff ff5a 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6c9c:	b003      	add	sp, #12
   d6c9e:	bd30      	pop	{r4, r5, pc}
        Log.info("no data or update at restart");
   d6ca0:	4905      	ldr	r1, [pc, #20]	; (d6cb8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x60>)
   d6ca2:	4803      	ldr	r0, [pc, #12]	; (d6cb0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6ca4:	f7fd fb74 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &CloudConfig::stateStartUpdate;
   d6ca8:	4b04      	ldr	r3, [pc, #16]	; (d6cbc <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x64>)
   d6caa:	e7f0      	b.n	d6c8e <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x36>
   d6cac:	000ddd77 	.word	0x000ddd77
   d6cb0:	2003e618 	.word	0x2003e618
   d6cb4:	000d6cc1 	.word	0x000d6cc1
   d6cb8:	000ddd87 	.word	0x000ddd87
   d6cbc:	000d6d25 	.word	0x000d6d25

000d6cc0 <_ZN11CloudConfig17stateWaitToUpdateEv>:
void CloudConfig::stateWaitToUpdate() {
   d6cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6cc2:	4604      	mov	r4, r0
   d6cc4:	f001 fc4c 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d6cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6cca:	1ac0      	subs	r0, r0, r3
   d6ccc:	f242 730f 	movw	r3, #9999	; 0x270f
   d6cd0:	4298      	cmp	r0, r3
   d6cd2:	d91e      	bls.n	d6d12 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
    if (Time.isValid() && updateFrequency > 0) {
   d6cd4:	f003 faaa 	bl	da22c <_ZN9TimeClass7isValidEv>
   d6cd8:	b1d8      	cbz	r0, d6d12 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
   d6cda:	69e3      	ldr	r3, [r4, #28]
   d6cdc:	2b00      	cmp	r3, #0
   d6cde:	dd18      	ble.n	d6d12 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
        if (Time.now() - storageMethod->getDataHeader()->lastCheck > updateFrequency) {
   d6ce0:	f003 fac1 	bl	da266 <_ZN9TimeClass3nowEv>
   d6ce4:	4605      	mov	r5, r0
   d6ce6:	6860      	ldr	r0, [r4, #4]
   d6ce8:	6803      	ldr	r3, [r0, #0]
   d6cea:	681b      	ldr	r3, [r3, #0]
   d6cec:	4798      	blx	r3
   d6cee:	6880      	ldr	r0, [r0, #8]
   d6cf0:	69e3      	ldr	r3, [r4, #28]
   d6cf2:	1a2d      	subs	r5, r5, r0
   d6cf4:	429d      	cmp	r5, r3
   d6cf6:	dd0c      	ble.n	d6d12 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
            Log.info("checking for time update");
   d6cf8:	4907      	ldr	r1, [pc, #28]	; (d6d18 <_ZN11CloudConfig17stateWaitToUpdateEv+0x58>)
   d6cfa:	4808      	ldr	r0, [pc, #32]	; (d6d1c <_ZN11CloudConfig17stateWaitToUpdateEv+0x5c>)
   d6cfc:	f7fd fb48 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
            stateHandler = &CloudConfig::stateStartUpdate;
   d6d00:	4b07      	ldr	r3, [pc, #28]	; (d6d20 <_ZN11CloudConfig17stateWaitToUpdateEv+0x60>)
   d6d02:	9300      	str	r3, [sp, #0]
   d6d04:	4669      	mov	r1, sp
   d6d06:	2300      	movs	r3, #0
   d6d08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	f7ff ff1f 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6d12:	b003      	add	sp, #12
   d6d14:	bd30      	pop	{r4, r5, pc}
   d6d16:	bf00      	nop
   d6d18:	000ddda4 	.word	0x000ddda4
   d6d1c:	2003e618 	.word	0x2003e618
   d6d20:	000d6d25 	.word	0x000d6d25

000d6d24 <_ZN11CloudConfig16stateStartUpdateEv>:
void CloudConfig::stateStartUpdate() {
   d6d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6d26:	4604      	mov	r4, r0
    Log.info("stateStartUpdate");
   d6d28:	490f      	ldr	r1, [pc, #60]	; (d6d68 <_ZN11CloudConfig16stateStartUpdateEv+0x44>)
   d6d2a:	4810      	ldr	r0, [pc, #64]	; (d6d6c <_ZN11CloudConfig16stateStartUpdateEv+0x48>)
   d6d2c:	f7fd fb30 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6d30:	6860      	ldr	r0, [r4, #4]
   d6d32:	6803      	ldr	r3, [r0, #0]
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	4798      	blx	r3
   d6d38:	4605      	mov	r5, r0
   d6d3a:	f003 fa94 	bl	da266 <_ZN9TimeClass3nowEv>
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6d3e:	2301      	movs	r3, #1
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6d40:	60a8      	str	r0, [r5, #8]
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6d42:	6223      	str	r3, [r4, #32]
   d6d44:	f001 fc0c 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6d48:	4b09      	ldr	r3, [pc, #36]	; (d6d70 <_ZN11CloudConfig16stateStartUpdateEv+0x4c>)
    stateTime = millis();
   d6d4a:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6d4c:	9300      	str	r3, [sp, #0]
   d6d4e:	4669      	mov	r1, sp
   d6d50:	2300      	movs	r3, #0
   d6d52:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d56:	9301      	str	r3, [sp, #4]
   d6d58:	f7ff fefa 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    updateMethod->startUpdate();
   d6d5c:	68a0      	ldr	r0, [r4, #8]
   d6d5e:	6803      	ldr	r3, [r0, #0]
   d6d60:	689b      	ldr	r3, [r3, #8]
   d6d62:	4798      	blx	r3
}
   d6d64:	b003      	add	sp, #12
   d6d66:	bd30      	pop	{r4, r5, pc}
   d6d68:	000dddbd 	.word	0x000dddbd
   d6d6c:	2003e618 	.word	0x2003e618
   d6d70:	000d6d75 	.word	0x000d6d75

000d6d74 <_ZN11CloudConfig23stateWaitUpdateCompleteEv>:
void CloudConfig::stateWaitUpdateComplete() {
   d6d74:	b513      	push	{r0, r1, r4, lr}
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6d76:	6a03      	ldr	r3, [r0, #32]
   d6d78:	2b01      	cmp	r3, #1
void CloudConfig::stateWaitUpdateComplete() {
   d6d7a:	4604      	mov	r4, r0
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6d7c:	d11b      	bne.n	d6db6 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x42>
   d6d7e:	f001 fbef 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime > updateMethod->updateTimeoutMs) {
   d6d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6d84:	1ac0      	subs	r0, r0, r3
   d6d86:	68a3      	ldr	r3, [r4, #8]
   d6d88:	689b      	ldr	r3, [r3, #8]
   d6d8a:	4298      	cmp	r0, r3
   d6d8c:	d911      	bls.n	d6db2 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x3e>
            Log.info("stateWaitUpdateComplete timeout");
   d6d8e:	490c      	ldr	r1, [pc, #48]	; (d6dc0 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x4c>)
   d6d90:	480c      	ldr	r0, [pc, #48]	; (d6dc4 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d6d92:	f7fd fafd 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
            updateDataStatus = UpdateDataStatus::TIMEOUT;
   d6d96:	2304      	movs	r3, #4
   d6d98:	6223      	str	r3, [r4, #32]
   d6d9a:	f001 fbe1 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d6d9e:	4b0a      	ldr	r3, [pc, #40]	; (d6dc8 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x54>)
    stateTime = millis();
   d6da0:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d6da2:	9300      	str	r3, [sp, #0]
   d6da4:	4669      	mov	r1, sp
   d6da6:	2300      	movs	r3, #0
   d6da8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6dac:	9301      	str	r3, [sp, #4]
   d6dae:	f7ff fecf 	bl	d6b50 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6db2:	b002      	add	sp, #8
   d6db4:	bd10      	pop	{r4, pc}
    Log.info("stateWaitUpdateComplete complete");
   d6db6:	4905      	ldr	r1, [pc, #20]	; (d6dcc <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x58>)
   d6db8:	4802      	ldr	r0, [pc, #8]	; (d6dc4 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d6dba:	f7fd fae9 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d6dbe:	e7ec      	b.n	d6d9a <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x26>
   d6dc0:	000dddce 	.word	0x000dddce
   d6dc4:	2003e618 	.word	0x2003e618
   d6dc8:	000d6cc1 	.word	0x000d6cc1
   d6dcc:	000dddee 	.word	0x000dddee

000d6dd0 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE>:
        val_(val) {
   d6dd0:	4b01      	ldr	r3, [pc, #4]	; (d6dd8 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE+0x8>)
   d6dd2:	2200      	movs	r2, #0
   d6dd4:	701a      	strb	r2, [r3, #0]
}
   d6dd6:	4770      	bx	lr
   d6dd8:	2003e5f6 	.word	0x2003e5f6

000d6ddc <_ZN16DeviceNameHelper4saveEv>:
}


void DeviceNameHelper::save() {
    // Overridden by DeviceNameHelperEEPROM
}
   d6ddc:	4770      	bx	lr

000d6dde <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6dde:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6de0:	4603      	mov	r3, r0
	switch (__op)
   d6de2:	d102      	bne.n	d6dea <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6de4:	6001      	str	r1, [r0, #0]
      }
   d6de6:	2000      	movs	r0, #0
   d6de8:	4770      	bx	lr
	  switch (__op)
   d6dea:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6dec:	bf04      	itt	eq
   d6dee:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6df2:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6df6:	e7f6      	b.n	d6de6 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6df8 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_>:
    }
}



void DeviceNameHelper::subscriptionHandler(const char *eventName, const char *eventData) {
   d6df8:	b513      	push	{r0, r1, r4, lr}
   d6dfa:	4604      	mov	r4, r0

    if (strlen(eventData) < DEVICENAMEHELPER_MAX_NAME_LEN) {
   d6dfc:	4610      	mov	r0, r2
   d6dfe:	9201      	str	r2, [sp, #4]
   d6e00:	f004 fc5d 	bl	db6be <strlen>
   d6e04:	6863      	ldr	r3, [r4, #4]
   d6e06:	9901      	ldr	r1, [sp, #4]
   d6e08:	4602      	mov	r2, r0
   d6e0a:	2a1e      	cmp	r2, #30
   d6e0c:	f103 000c 	add.w	r0, r3, #12
   d6e10:	d806      	bhi.n	d6e20 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x28>
        // Fits
        strcpy(data->name, eventData);
   d6e12:	f004 fc2f 	bl	db674 <strcpy>
    else {
        // Need to truncate
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
    }
    gotResponse = true;
   d6e16:	2301      	movs	r3, #1
   d6e18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   d6e1c:	b002      	add	sp, #8
   d6e1e:	bd10      	pop	{r4, pc}
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
   d6e20:	221f      	movs	r2, #31
   d6e22:	f004 fc66 	bl	db6f2 <strncpy>
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
   d6e26:	6863      	ldr	r3, [r4, #4]
   d6e28:	2200      	movs	r2, #0
   d6e2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   d6e2e:	e7f2      	b.n	d6e16 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x1e>

000d6e30 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6e30:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6e32:	6842      	ldr	r2, [r0, #4]
   d6e34:	4603      	mov	r3, r0
   d6e36:	1054      	asrs	r4, r2, #1
   d6e38:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6e3c:	07d2      	lsls	r2, r2, #31
   d6e3e:	bf48      	it	mi
   d6e40:	590a      	ldrmi	r2, [r1, r4]
   d6e42:	681b      	ldr	r3, [r3, #0]
      }
   d6e44:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6e48:	bf48      	it	mi
   d6e4a:	58d3      	ldrmi	r3, [r2, r3]
   d6e4c:	4718      	bx	r3

000d6e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6e4e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6e50:	b538      	push	{r3, r4, r5, lr}
   d6e52:	4604      	mov	r4, r0
	  switch (__op)
   d6e54:	d007      	beq.n	d6e66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6e56:	2a03      	cmp	r2, #3
   d6e58:	d011      	beq.n	d6e7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6e5a:	2a01      	cmp	r2, #1
   d6e5c:	d101      	bne.n	d6e62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6e5e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6e60:	6023      	str	r3, [r4, #0]
	}
   d6e62:	2000      	movs	r0, #0
   d6e64:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e66:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d6e68:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e6a:	f7fd f914 	bl	d4096 <_Znwj>
   d6e6e:	4603      	mov	r3, r0
   d6e70:	2800      	cmp	r0, #0
   d6e72:	d0f5      	beq.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d6e78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d6e7c:	e7f0      	b.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6e7e:	6800      	ldr	r0, [r0, #0]
   d6e80:	2800      	cmp	r0, #0
   d6e82:	d0ee      	beq.n	d6e62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6e84:	210c      	movs	r1, #12
   d6e86:	f003 fd22 	bl	da8ce <_ZdlPvj>
   d6e8a:	e7ea      	b.n	d6e62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6e8c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM16DeviceNameHelperFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6e8c:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d6e8e:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
   d6e90:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d6e92:	685c      	ldr	r4, [r3, #4]
   d6e94:	689d      	ldr	r5, [r3, #8]
   d6e96:	681b      	ldr	r3, [r3, #0]
   d6e98:	6812      	ldr	r2, [r2, #0]
   d6e9a:	1066      	asrs	r6, r4, #1
   d6e9c:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d6ea0:	07e4      	lsls	r4, r4, #31
   d6ea2:	bf44      	itt	mi
   d6ea4:	59ac      	ldrmi	r4, [r5, r6]
   d6ea6:	58e3      	ldrmi	r3, [r4, r3]
      }
   d6ea8:	bc70      	pop	{r4, r5, r6}
   d6eaa:	4718      	bx	r3

000d6eac <_ZN16DeviceNameHelperD1Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6eac:	b510      	push	{r4, lr}
   d6eae:	4b06      	ldr	r3, [pc, #24]	; (d6ec8 <_ZN16DeviceNameHelperD1Ev+0x1c>)
   d6eb0:	4604      	mov	r4, r0
   d6eb2:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d6eb6:	f7fd f9e8 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d6eba:	f104 0010 	add.w	r0, r4, #16
   d6ebe:	f7fd f9e4 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	bd10      	pop	{r4, pc}
   d6ec6:	bf00      	nop
   d6ec8:	000ddea8 	.word	0x000ddea8

000d6ecc <_ZN16DeviceNameHelperD0Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6ecc:	b510      	push	{r4, lr}
   d6ece:	4604      	mov	r4, r0
}
   d6ed0:	f7ff ffec 	bl	d6eac <_ZN16DeviceNameHelperD1Ev>
   d6ed4:	4620      	mov	r0, r4
   d6ed6:	2138      	movs	r1, #56	; 0x38
   d6ed8:	f003 fcf9 	bl	da8ce <_ZdlPvj>
   d6edc:	4620      	mov	r0, r4
   d6ede:	bd10      	pop	{r4, pc}

000d6ee0 <_ZN24DeviceNameHelperRetainedD1Ev>:

DeviceNameHelperRetained::DeviceNameHelperRetained() {

}

DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d6ee0:	b510      	push	{r4, lr}
   d6ee2:	4b03      	ldr	r3, [pc, #12]	; (d6ef0 <_ZN24DeviceNameHelperRetainedD1Ev+0x10>)
   d6ee4:	6003      	str	r3, [r0, #0]
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	f7ff ffe0 	bl	d6eac <_ZN16DeviceNameHelperD1Ev>

}
   d6eec:	4620      	mov	r0, r4
   d6eee:	bd10      	pop	{r4, pc}
   d6ef0:	000ddebc 	.word	0x000ddebc

000d6ef4 <_ZN24DeviceNameHelperRetainedD0Ev>:
DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d6ef4:	b510      	push	{r4, lr}
   d6ef6:	4604      	mov	r4, r0
}
   d6ef8:	f7ff fff2 	bl	d6ee0 <_ZN24DeviceNameHelperRetainedD1Ev>
   d6efc:	4620      	mov	r0, r4
   d6efe:	2138      	movs	r1, #56	; 0x38
   d6f00:	f003 fce5 	bl	da8ce <_ZdlPvj>
   d6f04:	4620      	mov	r0, r4
   d6f06:	bd10      	pop	{r4, pc}

000d6f08 <_ZN16DeviceNameHelper4loopEv>:
    if (stateHandler) {
   d6f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
void DeviceNameHelper::loop() {
   d6f0a:	4601      	mov	r1, r0
    if (stateHandler) {
   d6f0c:	b113      	cbz	r3, d6f14 <_ZN16DeviceNameHelper4loopEv+0xc>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6f10:	3020      	adds	r0, #32
   d6f12:	4718      	bx	r3
}
   d6f14:	4770      	bx	lr
	...

000d6f18 <_ZN16DeviceNameHelperC1Ev>:
DeviceNameHelper::DeviceNameHelper() {
   d6f18:	b530      	push	{r4, r5, lr}
   d6f1a:	4a07      	ldr	r2, [pc, #28]	; (d6f38 <_ZN16DeviceNameHelperC1Ev+0x20>)
   d6f1c:	6002      	str	r2, [r0, #0]
   d6f1e:	2400      	movs	r4, #0
   d6f20:	2200      	movs	r2, #0
   d6f22:	2500      	movs	r5, #0
   d6f24:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d6f28:	6042      	str	r2, [r0, #4]
    _Function_base() : _M_manager(nullptr) { }
   d6f2a:	6182      	str	r2, [r0, #24]
   d6f2c:	6282      	str	r2, [r0, #40]	; 0x28
   d6f2e:	6302      	str	r2, [r0, #48]	; 0x30
   d6f30:	8682      	strh	r2, [r0, #52]	; 0x34
   d6f32:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
}
   d6f36:	bd30      	pop	{r4, r5, pc}
   d6f38:	000ddea8 	.word	0x000ddea8

000d6f3c <_ZN24DeviceNameHelperRetainedC1Ev>:
DeviceNameHelperRetained::DeviceNameHelperRetained() {
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4603      	mov	r3, r0
   d6f40:	f7ff ffea 	bl	d6f18 <_ZN16DeviceNameHelperC1Ev>
   d6f44:	4a01      	ldr	r2, [pc, #4]	; (d6f4c <_ZN24DeviceNameHelperRetainedC1Ev+0x10>)
   d6f46:	601a      	str	r2, [r3, #0]
}
   d6f48:	4618      	mov	r0, r3
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	000ddebc 	.word	0x000ddebc

000d6f50 <_ZN24DeviceNameHelperRetained8instanceEv>:
DeviceNameHelperRetained &DeviceNameHelperRetained::instance() {
   d6f50:	b510      	push	{r4, lr}
    if (!_instance) {
   d6f52:	4c06      	ldr	r4, [pc, #24]	; (d6f6c <_ZN24DeviceNameHelperRetained8instanceEv+0x1c>)
   d6f54:	6823      	ldr	r3, [r4, #0]
   d6f56:	b93b      	cbnz	r3, d6f68 <_ZN24DeviceNameHelperRetained8instanceEv+0x18>
        _instance = new DeviceNameHelperRetained();
   d6f58:	2038      	movs	r0, #56	; 0x38
   d6f5a:	f7fd f89c 	bl	d4096 <_Znwj>
   d6f5e:	4601      	mov	r1, r0
   d6f60:	b108      	cbz	r0, d6f66 <_ZN24DeviceNameHelperRetained8instanceEv+0x16>
   d6f62:	f7ff ffeb 	bl	d6f3c <_ZN24DeviceNameHelperRetainedC1Ev>
   d6f66:	6021      	str	r1, [r4, #0]
}
   d6f68:	6820      	ldr	r0, [r4, #0]
   d6f6a:	bd10      	pop	{r4, pc}
   d6f6c:	2003e600 	.word	0x2003e600

000d6f70 <_ZNKSt8functionIFvPKcEEclES1_>:
    function<_Res(_ArgTypes...)>::
   d6f70:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d6f72:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6f74:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d6f76:	b90a      	cbnz	r2, d6f7c <_ZNKSt8functionIFvPKcEEclES1_+0xc>
	__throw_bad_function_call();
   d6f78:	f003 fcaf 	bl	da8da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f7c:	68c3      	ldr	r3, [r0, #12]
   d6f7e:	a901      	add	r1, sp, #4
   d6f80:	4798      	blx	r3
    }
   d6f82:	b003      	add	sp, #12
   d6f84:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f88 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>:
DeviceNameHelper &DeviceNameHelper::withNameCallback(std::function<void(const char *)> nameCallback) {
   d6f88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6f8e:	688b      	ldr	r3, [r1, #8]
   d6f90:	4604      	mov	r4, r0
   d6f92:	460d      	mov	r5, r1
    this->nameCallback = nameCallback;
   d6f94:	f100 0610 	add.w	r6, r0, #16
      if (static_cast<bool>(__x))
   d6f98:	b133      	cbz	r3, d6fa8 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f9a:	2202      	movs	r2, #2
   d6f9c:	4668      	mov	r0, sp
   d6f9e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6fa0:	68eb      	ldr	r3, [r5, #12]
   d6fa2:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6fa4:	68ab      	ldr	r3, [r5, #8]
   d6fa6:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6fa8:	4631      	mov	r1, r6
   d6faa:	4668      	mov	r0, sp
   d6fac:	f7fe ffc8 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fb0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6fb2:	69a2      	ldr	r2, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fb4:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fb6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6fb8:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6fba:	4668      	mov	r0, sp
   d6fbc:	69e2      	ldr	r2, [r4, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fbe:	61e3      	str	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6fc0:	9203      	str	r2, [sp, #12]
   d6fc2:	f7fd f962 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	b004      	add	sp, #16
   d6fca:	bd70      	pop	{r4, r5, r6, pc}

000d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6fce:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d6fd2:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6fd4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6fd6:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d6fd8:	b90a      	cbnz	r2, d6fde <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d6fda:	07d9      	lsls	r1, r3, #31
   d6fdc:	d505      	bpl.n	d6fea <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6fde:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d6fe2:	4b0b      	ldr	r3, [pc, #44]	; (d7010 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d6fe4:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6fe6:	4b0b      	ldr	r3, [pc, #44]	; (d7014 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d6fe8:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6fea:	4621      	mov	r1, r4
   d6fec:	4668      	mov	r0, sp
   d6fee:	f7fe ffa7 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ff2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6ff4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ff6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ff8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6ffa:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6ffc:	4668      	mov	r0, sp
   d6ffe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7000:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7002:	9203      	str	r2, [sp, #12]
   d7004:	f7fd f941 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d7008:	4620      	mov	r0, r4
   d700a:	b004      	add	sp, #16
   d700c:	bd10      	pop	{r4, pc}
   d700e:	bf00      	nop
   d7010:	000d6e31 	.word	0x000d6e31
   d7014:	000d6ddf 	.word	0x000d6ddf

000d7018 <_ZN16DeviceNameHelper11commonSetupEv>:
void DeviceNameHelper::commonSetup() {
   d7018:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d701a:	4604      	mov	r4, r0
    if (data->magic != DATA_MAGIC || data->size != sizeof(DeviceNameHelperData)) {
   d701c:	6840      	ldr	r0, [r0, #4]
   d701e:	4d0d      	ldr	r5, [pc, #52]	; (d7054 <_ZN16DeviceNameHelper11commonSetupEv+0x3c>)
   d7020:	6802      	ldr	r2, [r0, #0]
   d7022:	42aa      	cmp	r2, r5
   d7024:	d102      	bne.n	d702c <_ZN16DeviceNameHelper11commonSetupEv+0x14>
   d7026:	7903      	ldrb	r3, [r0, #4]
   d7028:	2b2c      	cmp	r3, #44	; 0x2c
   d702a:	d008      	beq.n	d703e <_ZN16DeviceNameHelper11commonSetupEv+0x26>
        memset(data, 0, sizeof(DeviceNameHelperData));     
   d702c:	262c      	movs	r6, #44	; 0x2c
   d702e:	4632      	mov	r2, r6
   d7030:	2100      	movs	r1, #0
   d7032:	f004 fae9 	bl	db608 <memset>
        data->magic = DATA_MAGIC;
   d7036:	6863      	ldr	r3, [r4, #4]
   d7038:	601d      	str	r5, [r3, #0]
        data->size = (uint8_t) sizeof(DeviceNameHelperData);
   d703a:	6863      	ldr	r3, [r4, #4]
   d703c:	711e      	strb	r6, [r3, #4]
    stateHandler = &DeviceNameHelper::stateStart;
   d703e:	4b06      	ldr	r3, [pc, #24]	; (d7058 <_ZN16DeviceNameHelper11commonSetupEv+0x40>)
   d7040:	9300      	str	r3, [sp, #0]
   d7042:	4669      	mov	r1, sp
   d7044:	2300      	movs	r3, #0
   d7046:	f104 0020 	add.w	r0, r4, #32
   d704a:	9301      	str	r3, [sp, #4]
   d704c:	f7ff ffbe 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7050:	b002      	add	sp, #8
   d7052:	bd70      	pop	{r4, r5, r6, pc}
   d7054:	7787a2f2 	.word	0x7787a2f2
   d7058:	000d7065 	.word	0x000d7065

000d705c <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>:
    this->data = retainedData;
   d705c:	6041      	str	r1, [r0, #4]
    commonSetup();
   d705e:	f7ff bfdb 	b.w	d7018 <_ZN16DeviceNameHelper11commonSetupEv>
	...

000d7064 <_ZN16DeviceNameHelper10stateStartEv>:
void DeviceNameHelper::stateStart() {
   d7064:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (data->name[0]) {
   d7066:	6841      	ldr	r1, [r0, #4]
   d7068:	7b0b      	ldrb	r3, [r1, #12]
void DeviceNameHelper::stateStart() {
   d706a:	4604      	mov	r4, r0
   d706c:	f100 0520 	add.w	r5, r0, #32
    if (data->name[0]) {
   d7070:	b193      	cbz	r3, d7098 <_ZN16DeviceNameHelper10stateStartEv+0x34>
        if (nameCallback) {
   d7072:	6983      	ldr	r3, [r0, #24]
   d7074:	b11b      	cbz	r3, d707e <_ZN16DeviceNameHelper10stateStartEv+0x1a>
            nameCallback(data->name);
   d7076:	310c      	adds	r1, #12
   d7078:	3010      	adds	r0, #16
   d707a:	f7ff ff79 	bl	d6f70 <_ZNKSt8functionIFvPKcEEclES1_>
        stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d707e:	4b0a      	ldr	r3, [pc, #40]	; (d70a8 <_ZN16DeviceNameHelper10stateStartEv+0x44>)
   d7080:	9300      	str	r3, [sp, #0]
   d7082:	4669      	mov	r1, sp
   d7084:	2300      	movs	r3, #0
   d7086:	4628      	mov	r0, r5
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	f7ff ff9f 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d708e:	f001 fa67 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d7092:	6320      	str	r0, [r4, #48]	; 0x30
}
   d7094:	b003      	add	sp, #12
   d7096:	bd30      	pop	{r4, r5, pc}
    stateHandler = &DeviceNameHelper::stateSubscribe;
   d7098:	4a04      	ldr	r2, [pc, #16]	; (d70ac <_ZN16DeviceNameHelper10stateStartEv+0x48>)
   d709a:	4669      	mov	r1, sp
   d709c:	4628      	mov	r0, r5
   d709e:	e9cd 2300 	strd	r2, r3, [sp]
   d70a2:	f7ff ff93 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d70a6:	e7f5      	b.n	d7094 <_ZN16DeviceNameHelper10stateStartEv+0x30>
   d70a8:	000d7201 	.word	0x000d7201
   d70ac:	000d7289 	.word	0x000d7289

000d70b0 <_ZN16DeviceNameHelper18stateWaitConnectedEv>:
void DeviceNameHelper::stateWaitConnected() {
   d70b0:	b513      	push	{r0, r1, r4, lr}
   d70b2:	4604      	mov	r4, r0
   d70b4:	f001 fc52 	bl	d895c <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d70b8:	b170      	cbz	r0, d70d8 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
   d70ba:	f003 f8b7 	bl	da22c <_ZN9TimeClass7isValidEv>
   d70be:	b158      	cbz	r0, d70d8 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
    stateHandler = &DeviceNameHelper::stateWaitRequest;
   d70c0:	4b06      	ldr	r3, [pc, #24]	; (d70dc <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x2c>)
   d70c2:	9300      	str	r3, [sp, #0]
   d70c4:	4669      	mov	r1, sp
   d70c6:	2300      	movs	r3, #0
   d70c8:	f104 0020 	add.w	r0, r4, #32
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	f7ff ff7d 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d70d2:	f001 fa45 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d70d6:	6320      	str	r0, [r4, #48]	; 0x30
}
   d70d8:	b002      	add	sp, #8
   d70da:	bd10      	pop	{r4, pc}
   d70dc:	000d70e1 	.word	0x000d70e1

000d70e0 <_ZN16DeviceNameHelper16stateWaitRequestEv>:
void DeviceNameHelper::stateWaitRequest() {
   d70e0:	b530      	push	{r4, r5, lr}
   d70e2:	4605      	mov	r5, r0
   d70e4:	b085      	sub	sp, #20
   d70e6:	f001 fa3b 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < POST_CONNECT_WAIT_MS) {
   d70ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d70ec:	1ac0      	subs	r0, r0, r3
   d70ee:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d70f2:	d329      	bcc.n	d7148 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x68>
    gotResponse = false;
   d70f4:	4b15      	ldr	r3, [pc, #84]	; (d714c <_ZN16DeviceNameHelper16stateWaitRequestEv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d70f6:	4916      	ldr	r1, [pc, #88]	; (d7150 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x70>)
   d70f8:	781b      	ldrb	r3, [r3, #0]
   d70fa:	f88d 3000 	strb.w	r3, [sp]
   d70fe:	2200      	movs	r2, #0
   d7100:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
   d7104:	233c      	movs	r3, #60	; 0x3c
   d7106:	a802      	add	r0, sp, #8
   d7108:	f001 fed0 	bl	d8eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d710c:	9c03      	ldr	r4, [sp, #12]
   d710e:	b17c      	cbz	r4, d7130 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
      if (--_M_use_count == 0)
   d7110:	6863      	ldr	r3, [r4, #4]
   d7112:	3b01      	subs	r3, #1
   d7114:	6063      	str	r3, [r4, #4]
   d7116:	b95b      	cbnz	r3, d7130 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
          _M_dispose();
   d7118:	6823      	ldr	r3, [r4, #0]
   d711a:	4620      	mov	r0, r4
   d711c:	689b      	ldr	r3, [r3, #8]
   d711e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7120:	68a3      	ldr	r3, [r4, #8]
   d7122:	3b01      	subs	r3, #1
   d7124:	60a3      	str	r3, [r4, #8]
   d7126:	b91b      	cbnz	r3, d7130 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
            _M_destroy();
   d7128:	6823      	ldr	r3, [r4, #0]
   d712a:	4620      	mov	r0, r4
   d712c:	68db      	ldr	r3, [r3, #12]
   d712e:	4798      	blx	r3
    stateHandler = &DeviceNameHelper::stateWaitResponse;
   d7130:	4b08      	ldr	r3, [pc, #32]	; (d7154 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x74>)
   d7132:	9302      	str	r3, [sp, #8]
   d7134:	a902      	add	r1, sp, #8
   d7136:	2300      	movs	r3, #0
   d7138:	f105 0020 	add.w	r0, r5, #32
   d713c:	9303      	str	r3, [sp, #12]
   d713e:	f7ff ff45 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7142:	f001 fa0d 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d7146:	6328      	str	r0, [r5, #48]	; 0x30
}
   d7148:	b005      	add	sp, #20
   d714a:	bd30      	pop	{r4, r5, pc}
   d714c:	2003e5fc 	.word	0x2003e5fc
   d7150:	000dde88 	.word	0x000dde88
   d7154:	000d7159 	.word	0x000d7159

000d7158 <_ZN16DeviceNameHelper17stateWaitResponseEv>:
void DeviceNameHelper::stateWaitResponse() {
   d7158:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (gotResponse) {
   d715a:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
void DeviceNameHelper::stateWaitResponse() {
   d715e:	4604      	mov	r4, r0
    if (gotResponse) {
   d7160:	b31d      	cbz	r5, d71aa <_ZN16DeviceNameHelper17stateWaitResponseEv+0x52>
        if (data->name[0]) {
   d7162:	6846      	ldr	r6, [r0, #4]
   d7164:	7b33      	ldrb	r3, [r6, #12]
   d7166:	f100 0520 	add.w	r5, r0, #32
   d716a:	b1db      	cbz	r3, d71a4 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x4c>
            data->lastCheck = Time.now();
   d716c:	f003 f87b 	bl	da266 <_ZN9TimeClass3nowEv>
   d7170:	60b0      	str	r0, [r6, #8]
            save();
   d7172:	6823      	ldr	r3, [r4, #0]
   d7174:	4620      	mov	r0, r4
   d7176:	689b      	ldr	r3, [r3, #8]
   d7178:	4798      	blx	r3
            if (nameCallback) {
   d717a:	69a3      	ldr	r3, [r4, #24]
   d717c:	b12b      	cbz	r3, d718a <_ZN16DeviceNameHelper17stateWaitResponseEv+0x32>
                nameCallback(data->name);
   d717e:	6861      	ldr	r1, [r4, #4]
   d7180:	f104 0010 	add.w	r0, r4, #16
   d7184:	310c      	adds	r1, #12
   d7186:	f7ff fef3 	bl	d6f70 <_ZNKSt8functionIFvPKcEEclES1_>
            stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d718a:	4b0f      	ldr	r3, [pc, #60]	; (d71c8 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x70>)
   d718c:	9300      	str	r3, [sp, #0]
   d718e:	2300      	movs	r3, #0
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d7190:	9301      	str	r3, [sp, #4]
   d7192:	4669      	mov	r1, sp
   d7194:	4628      	mov	r0, r5
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d7196:	f7ff ff19 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d719a:	f001 f9e1 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d719e:	6320      	str	r0, [r4, #48]	; 0x30
}
   d71a0:	b002      	add	sp, #8
   d71a2:	bd70      	pop	{r4, r5, r6, pc}
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d71a4:	4a09      	ldr	r2, [pc, #36]	; (d71cc <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d71a6:	9200      	str	r2, [sp, #0]
   d71a8:	e7f2      	b.n	d7190 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x38>
   d71aa:	f001 f9d9 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RESPONSE_WAIT_MS) {
   d71ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d71b0:	1ac0      	subs	r0, r0, r3
   d71b2:	f643 2397 	movw	r3, #14999	; 0x3a97
   d71b6:	4298      	cmp	r0, r3
   d71b8:	d9f2      	bls.n	d71a0 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x48>
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d71ba:	4b04      	ldr	r3, [pc, #16]	; (d71cc <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d71bc:	4669      	mov	r1, sp
   d71be:	e9cd 3500 	strd	r3, r5, [sp]
   d71c2:	f104 0020 	add.w	r0, r4, #32
   d71c6:	e7e6      	b.n	d7196 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x3e>
   d71c8:	000d7201 	.word	0x000d7201
   d71cc:	000d71d1 	.word	0x000d71d1

000d71d0 <_ZN16DeviceNameHelper14stateWaitRetryEv>:
void DeviceNameHelper::stateWaitRetry() {
   d71d0:	b513      	push	{r0, r1, r4, lr}
   d71d2:	4604      	mov	r4, r0
   d71d4:	f001 f9c4 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RETRY_WAIT_MS) {
   d71d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d71da:	1ac0      	subs	r0, r0, r3
   d71dc:	4b06      	ldr	r3, [pc, #24]	; (d71f8 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x28>)
   d71de:	4298      	cmp	r0, r3
   d71e0:	d908      	bls.n	d71f4 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x24>
        stateHandler = &DeviceNameHelper::stateWaitConnected;
   d71e2:	4b06      	ldr	r3, [pc, #24]	; (d71fc <_ZN16DeviceNameHelper14stateWaitRetryEv+0x2c>)
   d71e4:	9300      	str	r3, [sp, #0]
   d71e6:	4669      	mov	r1, sp
   d71e8:	2300      	movs	r3, #0
   d71ea:	f104 0020 	add.w	r0, r4, #32
   d71ee:	9301      	str	r3, [sp, #4]
   d71f0:	f7ff feec 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d71f4:	b002      	add	sp, #8
   d71f6:	bd10      	pop	{r4, pc}
   d71f8:	000493df 	.word	0x000493df
   d71fc:	000d70b1 	.word	0x000d70b1

000d7200 <_ZN16DeviceNameHelper16stateWaitRecheckEv>:
void DeviceNameHelper::stateWaitRecheck() {
   d7200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7202:	4604      	mov	r4, r0
   d7204:	f001 f9ac 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d7208:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d720a:	1ac0      	subs	r0, r0, r3
   d720c:	f242 730f 	movw	r3, #9999	; 0x270f
   d7210:	4298      	cmp	r0, r3
   d7212:	d91e      	bls.n	d7252 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d7214:	f001 f9a4 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
    if (forceCheck) {
   d7218:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
    stateTime = millis();
   d721c:	6320      	str	r0, [r4, #48]	; 0x30
    if (forceCheck) {
   d721e:	b15d      	cbz	r5, d7238 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x38>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d7220:	4a18      	ldr	r2, [pc, #96]	; (d7284 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
        forceCheck = false;
   d7222:	2300      	movs	r3, #0
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d7224:	e9cd 2300 	strd	r2, r3, [sp]
        forceCheck = false;
   d7228:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d722c:	4669      	mov	r1, sp
   d722e:	f104 0020 	add.w	r0, r4, #32
   d7232:	f7ff fecb 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d7236:	e00c      	b.n	d7252 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
    if (checkPeriod.count() == 0) {
   d7238:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d723c:	4313      	orrs	r3, r2
   d723e:	d10a      	bne.n	d7256 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x56>
	if (_M_manager)
   d7240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7242:	b133      	cbz	r3, d7252 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = 0;
   d7244:	f104 0120 	add.w	r1, r4, #32
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d7248:	2203      	movs	r2, #3
   d724a:	4608      	mov	r0, r1
   d724c:	4798      	blx	r3
	    _M_invoker = nullptr;
   d724e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
}
   d7252:	b003      	add	sp, #12
   d7254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Time.isValid() && (data->lastCheck + checkPeriod.count()) < Time.now()) {
   d7256:	f002 ffe9 	bl	da22c <_ZN9TimeClass7isValidEv>
   d725a:	2800      	cmp	r0, #0
   d725c:	d0f9      	beq.n	d7252 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d725e:	6863      	ldr	r3, [r4, #4]
   d7260:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
   d7264:	689b      	ldr	r3, [r3, #8]
   d7266:	18f6      	adds	r6, r6, r3
   d7268:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   d726c:	f002 fffb 	bl	da266 <_ZN9TimeClass3nowEv>
   d7270:	17c1      	asrs	r1, r0, #31
   d7272:	4286      	cmp	r6, r0
   d7274:	eb77 0301 	sbcs.w	r3, r7, r1
   d7278:	daeb      	bge.n	d7252 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d727a:	4b02      	ldr	r3, [pc, #8]	; (d7284 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
   d727c:	e9cd 3500 	strd	r3, r5, [sp]
   d7280:	e7d4      	b.n	d722c <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x2c>
   d7282:	bf00      	nop
   d7284:	000d7289 	.word	0x000d7289

000d7288 <_ZN16DeviceNameHelper14stateSubscribeEv>:
void DeviceNameHelper::stateSubscribe() {
   d7288:	b530      	push	{r4, r5, lr}
    if (!hasSubscribed) {
   d728a:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
void DeviceNameHelper::stateSubscribe() {
   d728e:	b08b      	sub	sp, #44	; 0x2c
   d7290:	4604      	mov	r4, r0
    if (!hasSubscribed) {
   d7292:	bb6d      	cbnz	r5, d72f0 <_ZN16DeviceNameHelper14stateSubscribeEv+0x68>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7294:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d7296:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7298:	f7fc fefd 	bl	d4096 <_Znwj>
   d729c:	b118      	cbz	r0, d72a6 <_ZN16DeviceNameHelper14stateSubscribeEv+0x1e>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d729e:	4b1a      	ldr	r3, [pc, #104]	; (d7308 <_ZN16DeviceNameHelper14stateSubscribeEv+0x80>)
   d72a0:	6084      	str	r4, [r0, #8]
   d72a2:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d72a6:	4b19      	ldr	r3, [pc, #100]	; (d730c <_ZN16DeviceNameHelper14stateSubscribeEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d72a8:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d72aa:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d72ac:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d72ae:	4b18      	ldr	r3, [pc, #96]	; (d7310 <_ZN16DeviceNameHelper14stateSubscribeEv+0x88>)
   d72b0:	9304      	str	r3, [sp, #16]
   d72b2:	a806      	add	r0, sp, #24
   d72b4:	f7ff fba8 	bl	d6a08 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d72b8:	9b08      	ldr	r3, [sp, #32]
   d72ba:	b183      	cbz	r3, d72de <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
            auto wrapper = new wiring_event_handler_t(handler);
   d72bc:	2010      	movs	r0, #16
   d72be:	f7fc feea 	bl	d4096 <_Znwj>
   d72c2:	4605      	mov	r5, r0
   d72c4:	b158      	cbz	r0, d72de <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
   d72c6:	a906      	add	r1, sp, #24
   d72c8:	f7ff fb9e 	bl	d6a08 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d72cc:	2300      	movs	r3, #0
   d72ce:	e9cd 3300 	strd	r3, r3, [sp]
   d72d2:	4910      	ldr	r1, [pc, #64]	; (d7314 <_ZN16DeviceNameHelper14stateSubscribeEv+0x8c>)
   d72d4:	4810      	ldr	r0, [pc, #64]	; (d7318 <_ZN16DeviceNameHelper14stateSubscribeEv+0x90>)
   d72d6:	2301      	movs	r3, #1
   d72d8:	462a      	mov	r2, r5
   d72da:	f001 fb57 	bl	d898c <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d72de:	a806      	add	r0, sp, #24
   d72e0:	f7fc ffd3 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d72e4:	a802      	add	r0, sp, #8
   d72e6:	f7fc ffd0 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        hasSubscribed = true;
   d72ea:	2301      	movs	r3, #1
   d72ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    stateHandler = &DeviceNameHelper::stateWaitConnected;
   d72f0:	4b0a      	ldr	r3, [pc, #40]	; (d731c <_ZN16DeviceNameHelper14stateSubscribeEv+0x94>)
   d72f2:	9306      	str	r3, [sp, #24]
   d72f4:	a906      	add	r1, sp, #24
   d72f6:	2300      	movs	r3, #0
   d72f8:	f104 0020 	add.w	r0, r4, #32
   d72fc:	9307      	str	r3, [sp, #28]
   d72fe:	f7ff fe65 	bl	d6fcc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7302:	b00b      	add	sp, #44	; 0x2c
   d7304:	bd30      	pop	{r4, r5, pc}
   d7306:	bf00      	nop
   d7308:	000d6df9 	.word	0x000d6df9
   d730c:	000d6e8d 	.word	0x000d6e8d
   d7310:	000d6e4f 	.word	0x000d6e4f
   d7314:	000d8cab 	.word	0x000d8cab
   d7318:	000dde88 	.word	0x000dde88
   d731c:	000d70b1 	.word	0x000d70b1

000d7320 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d7320:	4b01      	ldr	r3, [pc, #4]	; (d7328 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d7322:	2200      	movs	r2, #0
   d7324:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d7326:	4770      	bx	lr
   d7328:	2003e5fc 	.word	0x2003e5fc

000d732c <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d732c:	4b03      	ldr	r3, [pc, #12]	; (d733c <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d732e:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d7330:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d7332:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d7336:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d733a:	4770      	bx	lr
   d733c:	40a00000 	.word	0x40a00000

000d7340 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d7340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d7344:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d7410 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d7348:	9101      	str	r1, [sp, #4]
   d734a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d734c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d734e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d7352:	9b01      	ldr	r3, [sp, #4]
   d7354:	429d      	cmp	r5, r3
   d7356:	d02f      	beq.n	d73b8 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d7358:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d735a:	f003 fa5b 	bl	da814 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d735e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d7362:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d7364:	f003 fd32 	bl	dadcc <__aeabi_i2d>
   d7368:	4642      	mov	r2, r8
   d736a:	464b      	mov	r3, r9
   d736c:	4606      	mov	r6, r0
   d736e:	460f      	mov	r7, r1
   d7370:	f003 fbde 	bl	dab30 <__aeabi_dsub>
   d7374:	4652      	mov	r2, sl
   d7376:	465b      	mov	r3, fp
   d7378:	f003 fd92 	bl	daea0 <__aeabi_dmul>
   d737c:	4642      	mov	r2, r8
   d737e:	464b      	mov	r3, r9
   d7380:	f003 fbd8 	bl	dab34 <__adddf3>
   d7384:	4602      	mov	r2, r0
   d7386:	460b      	mov	r3, r1
   d7388:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d738c:	4630      	mov	r0, r6
   d738e:	4639      	mov	r1, r7
   d7390:	f003 fbce 	bl	dab30 <__aeabi_dsub>
   d7394:	4602      	mov	r2, r0
   d7396:	460b      	mov	r3, r1
   d7398:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d739c:	f003 fd80 	bl	daea0 <__aeabi_dmul>
   d73a0:	4602      	mov	r2, r0
   d73a2:	460b      	mov	r3, r1
   d73a4:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d73a8:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d73ac:	f003 fbc2 	bl	dab34 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d73b0:	3501      	adds	r5, #1
    sumI += sqI;
   d73b2:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d73b6:	e7cc      	b.n	d7352 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d73b8:	a313      	add	r3, pc, #76	; (adr r3, d7408 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d73ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73be:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d73c2:	f003 fd6d 	bl	daea0 <__aeabi_dmul>
   d73c6:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d73c8:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d73ca:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d73cc:	f003 fcee 	bl	dadac <__aeabi_ui2d>
   d73d0:	4602      	mov	r2, r0
   d73d2:	460b      	mov	r3, r1
   d73d4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d73d8:	f003 fe8c 	bl	db0f4 <__aeabi_ddiv>
   d73dc:	ec41 0b10 	vmov	d0, r0, r1
   d73e0:	f003 fa7e 	bl	da8e0 <sqrt>
   d73e4:	4632      	mov	r2, r6
   d73e6:	463b      	mov	r3, r7
   d73e8:	ec51 0b10 	vmov	r0, r1, d0
   d73ec:	f003 fd58 	bl	daea0 <__aeabi_dmul>
   d73f0:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d73f4:	2200      	movs	r2, #0
   d73f6:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d73f8:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d73fc:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d7400:	b003      	add	sp, #12
   d7402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7406:	bf00      	nop
   d7408:	66666666 	.word	0x66666666
   d740c:	3f4a6666 	.word	0x3f4a6666
   d7410:	3f300000 	.word	0x3f300000

000d7414 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7414:	4770      	bx	lr

000d7416 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7416:	b510      	push	{r4, lr}
}
   d7418:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d741a:	4604      	mov	r4, r0
}
   d741c:	f003 fa57 	bl	da8ce <_ZdlPvj>
   d7420:	4620      	mov	r0, r4
   d7422:	bd10      	pop	{r4, pc}

000d7424 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7424:	6803      	ldr	r3, [r0, #0]
   d7426:	b2c9      	uxtb	r1, r1
   d7428:	689b      	ldr	r3, [r3, #8]
   d742a:	4718      	bx	r3

000d742c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d742c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d742e:	4d03      	ldr	r5, [pc, #12]	; (d743c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7430:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7434:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7438:	bd30      	pop	{r4, r5, pc}
   d743a:	bf00      	nop
   d743c:	000ddefc 	.word	0x000ddefc

000d7440 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7440:	6840      	ldr	r0, [r0, #4]
   d7442:	f001 bf25 	b.w	d9290 <_ZN7TwoWire5beginEv>

000d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7446:	b510      	push	{r4, lr}
   d7448:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d744a:	6800      	ldr	r0, [r0, #0]
   d744c:	f001 ff63 	bl	d9316 <_ZN7TwoWire6unlockEv>
   d7450:	4620      	mov	r0, r4
   d7452:	bd10      	pop	{r4, pc}

000d7454 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7458:	b08a      	sub	sp, #40	; 0x28
   d745a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d745c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d745e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7460:	f001 ff50 	bl	d9304 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7464:	221e      	movs	r2, #30
   d7466:	2100      	movs	r1, #0
   d7468:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d746a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d746c:	f004 f8cc 	bl	db608 <memset>
		size_t framAddr = 0;
   d7470:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7472:	b1ef      	cbz	r7, d74b0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7474:	6823      	ldr	r3, [r4, #0]
   d7476:	2f1e      	cmp	r7, #30
   d7478:	46b8      	mov	r8, r7
   d747a:	bf28      	it	cs
   d747c:	f04f 081e 	movcs.w	r8, #30
   d7480:	68dd      	ldr	r5, [r3, #12]
   d7482:	aa02      	add	r2, sp, #8
   d7484:	4643      	mov	r3, r8
   d7486:	4631      	mov	r1, r6
   d7488:	4620      	mov	r0, r4
   d748a:	47a8      	blx	r5
			if (!result) {
   d748c:	4605      	mov	r5, r0
   d748e:	b958      	cbnz	r0, d74a8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7490:	480a      	ldr	r0, [pc, #40]	; (d74bc <_ZN6MB85RC5eraseEv+0x68>)
   d7492:	490b      	ldr	r1, [pc, #44]	; (d74c0 <_ZN6MB85RC5eraseEv+0x6c>)
   d7494:	4632      	mov	r2, r6
   d7496:	f7fc ff7b 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d749a:	a801      	add	r0, sp, #4
   d749c:	f7ff ffd3 	bl	d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d74a0:	4628      	mov	r0, r5
   d74a2:	b00a      	add	sp, #40	; 0x28
   d74a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d74a8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d74ac:	4446      	add	r6, r8
		while(totalLen > 0) {
   d74ae:	e7e0      	b.n	d7472 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d74b0:	a801      	add	r0, sp, #4
   d74b2:	f7ff ffc8 	bl	d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d74b6:	2501      	movs	r5, #1
   d74b8:	e7f2      	b.n	d74a0 <_ZN6MB85RC5eraseEv+0x4c>
   d74ba:	bf00      	nop
   d74bc:	2003e618 	.word	0x2003e618
   d74c0:	000ddec8 	.word	0x000ddec8

000d74c4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d74c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d74c8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d74ca:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d74cc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d74ce:	460d      	mov	r5, r1
   d74d0:	4616      	mov	r6, r2
   d74d2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d74d4:	f001 ff16 	bl	d9304 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d74d8:	b1a7      	cbz	r7, d7504 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d74da:	68e1      	ldr	r1, [r4, #12]
   d74dc:	6860      	ldr	r0, [r4, #4]
   d74de:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d74e2:	f001 ff08 	bl	d92f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d74e6:	0a29      	lsrs	r1, r5, #8
   d74e8:	6860      	ldr	r0, [r4, #4]
   d74ea:	f7ff ff9b 	bl	d7424 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d74ee:	4629      	mov	r1, r5
   d74f0:	6860      	ldr	r0, [r4, #4]
   d74f2:	f7ff ff97 	bl	d7424 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d74f6:	6860      	ldr	r0, [r4, #4]
   d74f8:	2100      	movs	r1, #0
   d74fa:	f001 feff 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d74fe:	b148      	cbz	r0, d7514 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7500:	2400      	movs	r4, #0
   d7502:	e000      	b.n	d7506 <_ZN6MB85RC8readDataEjPhj+0x42>
   d7504:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7506:	a801      	add	r0, sp, #4
   d7508:	f7ff ff9d 	bl	d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d750c:	4620      	mov	r0, r4
   d750e:	b003      	add	sp, #12
   d7510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7514:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7516:	7b21      	ldrb	r1, [r4, #12]
   d7518:	6860      	ldr	r0, [r4, #4]
   d751a:	46b8      	mov	r8, r7
   d751c:	bf28      	it	cs
   d751e:	f04f 0820 	movcs.w	r8, #32
   d7522:	2301      	movs	r3, #1
   d7524:	4642      	mov	r2, r8
   d7526:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d752a:	f001 fece 	bl	d92ca <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d752e:	f003 f9a1 	bl	da874 <_Z19__fetch_global_Wirev>
   d7532:	6803      	ldr	r3, [r0, #0]
   d7534:	691b      	ldr	r3, [r3, #16]
   d7536:	4798      	blx	r3
   d7538:	4540      	cmp	r0, r8
   d753a:	dbe1      	blt.n	d7500 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d753c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7540:	f003 f998 	bl	da874 <_Z19__fetch_global_Wirev>
   d7544:	6803      	ldr	r3, [r0, #0]
   d7546:	695b      	ldr	r3, [r3, #20]
   d7548:	4798      	blx	r3
   d754a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d754e:	454e      	cmp	r6, r9
   d7550:	d1f6      	bne.n	d7540 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7552:	4445      	add	r5, r8
   d7554:	eba7 0708 	sub.w	r7, r7, r8
   d7558:	e7be      	b.n	d74d8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d755a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d755a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d755e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7560:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7562:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7564:	460e      	mov	r6, r1
   d7566:	4690      	mov	r8, r2
   d7568:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d756a:	f001 fecb 	bl	d9304 <_ZN7TwoWire4lockEv>
   d756e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7572:	f1b9 0f00 	cmp.w	r9, #0
   d7576:	d02a      	beq.n	d75ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7578:	b34d      	cbz	r5, d75ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d757a:	68e1      	ldr	r1, [r4, #12]
   d757c:	6860      	ldr	r0, [r4, #4]
   d757e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7582:	f001 feb8 	bl	d92f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7586:	0a31      	lsrs	r1, r6, #8
   d7588:	6860      	ldr	r0, [r4, #4]
   d758a:	f7ff ff4b 	bl	d7424 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d758e:	6860      	ldr	r0, [r4, #4]
   d7590:	4631      	mov	r1, r6
   d7592:	f7ff ff47 	bl	d7424 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7596:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d759a:	4647      	mov	r7, r8
   d759c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d75a0:	6860      	ldr	r0, [r4, #4]
   d75a2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d75a6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d75a8:	3d01      	subs	r5, #1
				wire.write(*data);
   d75aa:	689b      	ldr	r3, [r3, #8]
   d75ac:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d75ae:	4555      	cmp	r5, sl
   d75b0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d75b4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d75b6:	d001      	beq.n	d75bc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d75b8:	2d00      	cmp	r5, #0
   d75ba:	d1f1      	bne.n	d75a0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d75bc:	6860      	ldr	r0, [r4, #4]
   d75be:	2101      	movs	r1, #1
   d75c0:	f001 fe9c 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d75c4:	2800      	cmp	r0, #0
   d75c6:	d0d7      	beq.n	d7578 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d75c8:	f04f 0900 	mov.w	r9, #0
   d75cc:	e7d1      	b.n	d7572 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d75ce:	a801      	add	r0, sp, #4
   d75d0:	f7ff ff39 	bl	d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d75d4:	4648      	mov	r0, r9
   d75d6:	b003      	add	sp, #12
   d75d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d75dc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75e0:	b08b      	sub	sp, #44	; 0x2c
   d75e2:	460e      	mov	r6, r1
   d75e4:	4615      	mov	r5, r2
   d75e6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d75e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75ea:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75ec:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d75ee:	f001 fe89 	bl	d9304 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d75f2:	42ae      	cmp	r6, r5
   d75f4:	d229      	bcs.n	d764a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d75f6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d75f8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d75fa:	b18c      	cbz	r4, d7620 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d75fc:	2c1e      	cmp	r4, #30
   d75fe:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7600:	f8d8 3000 	ldr.w	r3, [r8]
   d7604:	bf28      	it	cs
   d7606:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7608:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d760a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d760e:	aa02      	add	r2, sp, #8
   d7610:	463b      	mov	r3, r7
   d7612:	4631      	mov	r1, r6
   d7614:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7616:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7618:	47c8      	blx	r9
				if (!result) {
   d761a:	b948      	cbnz	r0, d7630 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d761c:	2400      	movs	r4, #0
   d761e:	e000      	b.n	d7622 <_ZN6MB85RC8moveDataEjjj+0x46>
   d7620:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7622:	a801      	add	r0, sp, #4
   d7624:	f7ff ff0f 	bl	d7446 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7628:	4620      	mov	r0, r4
   d762a:	b00b      	add	sp, #44	; 0x2c
   d762c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7630:	f8d8 3000 	ldr.w	r3, [r8]
   d7634:	aa02      	add	r2, sp, #8
   d7636:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d763a:	4629      	mov	r1, r5
   d763c:	463b      	mov	r3, r7
   d763e:	4640      	mov	r0, r8
   d7640:	47c8      	blx	r9
				if (!result) {
   d7642:	2800      	cmp	r0, #0
   d7644:	d0ea      	beq.n	d761c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7646:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7648:	e7d7      	b.n	d75fa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d764a:	d9e9      	bls.n	d7620 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d764c:	2c00      	cmp	r4, #0
   d764e:	d0e7      	beq.n	d7620 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7650:	f8d8 3000 	ldr.w	r3, [r8]
   d7654:	2c1e      	cmp	r4, #30
   d7656:	4627      	mov	r7, r4
   d7658:	bf28      	it	cs
   d765a:	271e      	movcs	r7, #30
   d765c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7660:	aa02      	add	r2, sp, #8
   d7662:	463b      	mov	r3, r7
   d7664:	4631      	mov	r1, r6
   d7666:	4640      	mov	r0, r8
   d7668:	47c8      	blx	r9
				if (!result) {
   d766a:	2800      	cmp	r0, #0
   d766c:	d0d6      	beq.n	d761c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d766e:	f8d8 3000 	ldr.w	r3, [r8]
   d7672:	aa02      	add	r2, sp, #8
   d7674:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7678:	4629      	mov	r1, r5
   d767a:	463b      	mov	r3, r7
   d767c:	4640      	mov	r0, r8
   d767e:	47c8      	blx	r9
				if (!result) {
   d7680:	2800      	cmp	r0, #0
   d7682:	d0cb      	beq.n	d761c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7684:	443e      	add	r6, r7
				framAddrTo += count;
   d7686:	443d      	add	r5, r7
				numBytes -= count;
   d7688:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d768a:	e7df      	b.n	d764c <_ZN6MB85RC8moveDataEjjj+0x70>

000d768c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d768c:	2040      	movs	r0, #64	; 0x40
   d768e:	4770      	bx	lr

000d7690 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d7690:	2000      	movs	r0, #0
   d7692:	4770      	bx	lr

000d7694 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d7694:	2080      	movs	r0, #128	; 0x80
   d7696:	4770      	bx	lr

000d7698 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d7698:	20ff      	movs	r0, #255	; 0xff
   d769a:	4770      	bx	lr

000d769c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d769c:	4770      	bx	lr

000d769e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d769e:	4770      	bx	lr

000d76a0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d76a0:	4770      	bx	lr

000d76a2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d76a2:	4770      	bx	lr

000d76a4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d76a4:	b510      	push	{r4, lr}
}
   d76a6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d76a8:	4604      	mov	r4, r0
}
   d76aa:	f003 f910 	bl	da8ce <_ZdlPvj>
   d76ae:	4620      	mov	r0, r4
   d76b0:	bd10      	pop	{r4, pc}

000d76b2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d76b2:	b510      	push	{r4, lr}
}
   d76b4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d76b6:	4604      	mov	r4, r0
}
   d76b8:	f003 f909 	bl	da8ce <_ZdlPvj>
   d76bc:	4620      	mov	r0, r4
   d76be:	bd10      	pop	{r4, pc}

000d76c0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d76c0:	b510      	push	{r4, lr}
}
   d76c2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d76c4:	4604      	mov	r4, r0
}
   d76c6:	f003 f902 	bl	da8ce <_ZdlPvj>
   d76ca:	4620      	mov	r0, r4
   d76cc:	bd10      	pop	{r4, pc}

000d76ce <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d76ce:	b510      	push	{r4, lr}
}
   d76d0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d76d2:	4604      	mov	r4, r0
}
   d76d4:	f003 f8fb 	bl	da8ce <_ZdlPvj>
   d76d8:	4620      	mov	r0, r4
   d76da:	bd10      	pop	{r4, pc}

000d76dc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d76dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d76e0:	6803      	ldr	r3, [r0, #0]
   d76e2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d76e4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d76e6:	4798      	blx	r3
   d76e8:	2210      	movs	r2, #16
   d76ea:	4601      	mov	r1, r0
   d76ec:	4668      	mov	r0, sp
   d76ee:	f003 ff8b 	bl	db608 <memset>
	size_t len = length();
   d76f2:	6823      	ldr	r3, [r4, #0]
   d76f4:	4620      	mov	r0, r4
   d76f6:	689b      	ldr	r3, [r3, #8]
   d76f8:	4798      	blx	r3
	size_t offset = 0;
   d76fa:	2500      	movs	r5, #0
	size_t len = length();
   d76fc:	4607      	mov	r7, r0
	bool bResult = false;
   d76fe:	4628      	mov	r0, r5
	while(offset < len) {
   d7700:	42bd      	cmp	r5, r7
   d7702:	d20e      	bcs.n	d7722 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d7704:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d7706:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d7708:	2e10      	cmp	r6, #16
   d770a:	bf28      	it	cs
   d770c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d770e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d7712:	466a      	mov	r2, sp
   d7714:	4633      	mov	r3, r6
   d7716:	4629      	mov	r1, r5
   d7718:	4620      	mov	r0, r4
   d771a:	47c0      	blx	r8
		if (!bResult) {
   d771c:	b108      	cbz	r0, d7722 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d771e:	4435      	add	r5, r6
	while(offset < len) {
   d7720:	e7ee      	b.n	d7700 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d7722:	b004      	add	sp, #16
   d7724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7728 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d7728:	f44f 7380 	mov.w	r3, #256	; 0x100
   d772c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d772e:	f240 1301 	movw	r3, #257	; 0x101
   d7732:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d7734:	2300      	movs	r3, #0
   d7736:	8203      	strh	r3, [r0, #16]
}
   d7738:	4770      	bx	lr
	...

000d773c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d773c:	b508      	push	{r3, lr}
   d773e:	4b06      	ldr	r3, [pc, #24]	; (d7758 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d7740:	6003      	str	r3, [r0, #0]
   d7742:	4b06      	ldr	r3, [pc, #24]	; (d775c <_ZN12MCP79410TimeC1Ev+0x20>)
   d7744:	6043      	str	r3, [r0, #4]
   d7746:	f240 7304 	movw	r3, #1796	; 0x704
   d774a:	8103      	strh	r3, [r0, #8]
   d774c:	2300      	movs	r3, #0
   d774e:	7443      	strb	r3, [r0, #17]
	clear();
   d7750:	f7ff ffea 	bl	d7728 <_ZN12MCP79410Time5clearEv>
}
   d7754:	bd08      	pop	{r3, pc}
   d7756:	bf00      	nop
   d7758:	000ddfdc 	.word	0x000ddfdc
   d775c:	03020100 	.word	0x03020100

000d7760 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d7760:	0903      	lsrs	r3, r0, #4
}
   d7762:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d7764:	f000 000f 	and.w	r0, r0, #15
}
   d7768:	fb02 0003 	mla	r0, r2, r3, r0
   d776c:	4770      	bx	lr

000d776e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d776e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d7770:	7a80      	ldrb	r0, [r0, #10]
   d7772:	f7ff fff5 	bl	d7760 <_ZN12MCP79410Time8bcdToIntEh>
}
   d7776:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d777a:	bd08      	pop	{r3, pc}

000d777c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d777c:	7ac0      	ldrb	r0, [r0, #11]
   d777e:	f000 001f 	and.w	r0, r0, #31
   d7782:	f7ff bfed 	b.w	d7760 <_ZN12MCP79410Time8bcdToIntEh>

000d7786 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d7786:	7b00      	ldrb	r0, [r0, #12]
   d7788:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d778c:	f7ff bfe8 	b.w	d7760 <_ZN12MCP79410Time8bcdToIntEh>

000d7790 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d7790:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d7792:	7b81      	ldrb	r1, [r0, #14]
   d7794:	064a      	lsls	r2, r1, #25
   d7796:	d50d      	bpl.n	d77b4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d7798:	f001 001f 	and.w	r0, r1, #31
   d779c:	f7ff ffe0 	bl	d7760 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d77a0:	068b      	lsls	r3, r1, #26
   d77a2:	d503      	bpl.n	d77ac <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d77a4:	280c      	cmp	r0, #12
   d77a6:	d000      	beq.n	d77aa <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d77a8:	300c      	adds	r0, #12
}
   d77aa:	bd08      	pop	{r3, pc}
				return 0;
   d77ac:	280c      	cmp	r0, #12
   d77ae:	bf08      	it	eq
   d77b0:	2000      	moveq	r0, #0
   d77b2:	e7fa      	b.n	d77aa <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d77b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d77b8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d77bc:	f7ff bfd0 	b.w	d7760 <_ZN12MCP79410Time8bcdToIntEh>

000d77c0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d77c0:	7bc0      	ldrb	r0, [r0, #15]
   d77c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d77c6:	f7ff bfcb 	b.w	d7760 <_ZN12MCP79410Time8bcdToIntEh>

000d77ca <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d77ca:	7c00      	ldrb	r0, [r0, #16]
   d77cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d77d0:	f7ff bfc6 	b.w	d7760 <_ZN12MCP79410Time8bcdToIntEh>

000d77d4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d77d4:	b510      	push	{r4, lr}
   d77d6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d77d8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d77da:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d77dc:	2100      	movs	r1, #0
   d77de:	a801      	add	r0, sp, #4
   d77e0:	f003 ff12 	bl	db608 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d77e4:	4620      	mov	r0, r4
   d77e6:	f7ff ffc2 	bl	d776e <_ZNK12MCP79410Time7getYearEv>
   d77ea:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d77ee:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d77f0:	4620      	mov	r0, r4
   d77f2:	f7ff ffc3 	bl	d777c <_ZNK12MCP79410Time8getMonthEv>
   d77f6:	3801      	subs	r0, #1
   d77f8:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d77fa:	4620      	mov	r0, r4
   d77fc:	f7ff ffc3 	bl	d7786 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d7800:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d7802:	4620      	mov	r0, r4
   d7804:	f7ff ffc4 	bl	d7790 <_ZNK12MCP79410Time7getHourEv>
   d7808:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d780a:	4620      	mov	r0, r4
   d780c:	f7ff ffd8 	bl	d77c0 <_ZNK12MCP79410Time9getMinuteEv>
   d7810:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d7812:	4620      	mov	r0, r4
   d7814:	f7ff ffd9 	bl	d77ca <_ZNK12MCP79410Time9getSecondEv>
   d7818:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d781a:	a801      	add	r0, sp, #4
   d781c:	f001 f9ae 	bl	d8b7c <mktime>
}
   d7820:	b00a      	add	sp, #40	; 0x28
   d7822:	bd10      	pop	{r4, pc}

000d7824 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d7824:	210a      	movs	r1, #10
   d7826:	fb90 f2f1 	sdiv	r2, r0, r1
   d782a:	fb92 f3f1 	sdiv	r3, r2, r1
   d782e:	fb01 2313 	mls	r3, r1, r3, r2
   d7832:	011b      	lsls	r3, r3, #4
   d7834:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d7836:	fb01 0012 	mls	r0, r1, r2, r0
   d783a:	4318      	orrs	r0, r3
}
   d783c:	b2c0      	uxtb	r0, r0
   d783e:	4770      	bx	lr

000d7840 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d7840:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d7842:	b510      	push	{r4, lr}
   d7844:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d7846:	fb91 f0f3 	sdiv	r0, r1, r3
   d784a:	fb00 1013 	mls	r0, r0, r3, r1
   d784e:	f7ff ffe9 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
   d7852:	72a0      	strb	r0, [r4, #10]
}
   d7854:	bd10      	pop	{r4, pc}

000d7856 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d7856:	b510      	push	{r4, lr}
   d7858:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d785a:	4608      	mov	r0, r1
   d785c:	f7ff ffe2 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
   d7860:	72e0      	strb	r0, [r4, #11]
}
   d7862:	bd10      	pop	{r4, pc}

000d7864 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d7864:	b510      	push	{r4, lr}
   d7866:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d7868:	4608      	mov	r0, r1
   d786a:	f7ff ffdb 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d786e:	7b23      	ldrb	r3, [r4, #12]
   d7870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d7874:	4318      	orrs	r0, r3
   d7876:	7320      	strb	r0, [r4, #12]
}
   d7878:	bd10      	pop	{r4, pc}

000d787a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d787a:	b510      	push	{r4, lr}
   d787c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d787e:	1c48      	adds	r0, r1, #1
   d7880:	f7ff ffd0 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d7884:	7b63      	ldrb	r3, [r4, #13]
   d7886:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d788a:	4318      	orrs	r0, r3
   d788c:	7360      	strb	r0, [r4, #13]
}
   d788e:	bd10      	pop	{r4, pc}

000d7890 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d7890:	b510      	push	{r4, lr}
   d7892:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d7894:	4608      	mov	r0, r1
   d7896:	f7ff ffc5 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
   d789a:	73a0      	strb	r0, [r4, #14]
}
   d789c:	bd10      	pop	{r4, pc}

000d789e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d789e:	b510      	push	{r4, lr}
   d78a0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d78a2:	4608      	mov	r0, r1
   d78a4:	f7ff ffbe 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
   d78a8:	73e0      	strb	r0, [r4, #15]
}
   d78aa:	bd10      	pop	{r4, pc}

000d78ac <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d78ac:	b510      	push	{r4, lr}
   d78ae:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d78b0:	4608      	mov	r0, r1
   d78b2:	f7ff ffb7 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d78b6:	7c23      	ldrb	r3, [r4, #16]
   d78b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d78bc:	4318      	orrs	r0, r3
   d78be:	7420      	strb	r0, [r4, #16]
}
   d78c0:	bd10      	pop	{r4, pc}

000d78c2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d78c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78c4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d78c6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d78c8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d78cc:	f003 fe62 	bl	db594 <gmtime>
   d78d0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d78d2:	6941      	ldr	r1, [r0, #20]
   d78d4:	4620      	mov	r0, r4
   d78d6:	f7ff ffb3 	bl	d7840 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d78da:	6929      	ldr	r1, [r5, #16]
   d78dc:	4620      	mov	r0, r4
   d78de:	3101      	adds	r1, #1
   d78e0:	f7ff ffb9 	bl	d7856 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d78e4:	68e9      	ldr	r1, [r5, #12]
   d78e6:	4620      	mov	r0, r4
   d78e8:	f7ff ffbc 	bl	d7864 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d78ec:	69a9      	ldr	r1, [r5, #24]
   d78ee:	4620      	mov	r0, r4
   d78f0:	f7ff ffc3 	bl	d787a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d78f4:	68a9      	ldr	r1, [r5, #8]
   d78f6:	4620      	mov	r0, r4
   d78f8:	f7ff ffca 	bl	d7890 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d78fc:	6869      	ldr	r1, [r5, #4]
   d78fe:	4620      	mov	r0, r4
   d7900:	f7ff ffcd 	bl	d789e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d7904:	6829      	ldr	r1, [r5, #0]
   d7906:	293b      	cmp	r1, #59	; 0x3b
   d7908:	bfa8      	it	ge
   d790a:	213b      	movge	r1, #59	; 0x3b
   d790c:	4620      	mov	r0, r4
   d790e:	f7ff ffcd 	bl	d78ac <_ZN12MCP79410Time9setSecondEi>
}
   d7912:	b003      	add	sp, #12
   d7914:	bd30      	pop	{r4, r5, pc}
	...

000d7918 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d7918:	4a05      	ldr	r2, [pc, #20]	; (d7930 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d791a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d791c:	e9c0 2100 	strd	r2, r1, [r0]
   d7920:	4a04      	ldr	r2, [pc, #16]	; (d7934 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d7922:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7924:	4a04      	ldr	r2, [pc, #16]	; (d7938 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d7926:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7928:	4a04      	ldr	r2, [pc, #16]	; (d793c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d792a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d792c:	6142      	str	r2, [r0, #20]
}
   d792e:	4770      	bx	lr
   d7930:	000de010 	.word	0x000de010
   d7934:	03010000 	.word	0x03010000
   d7938:	000ddfb8 	.word	0x000ddfb8
   d793c:	000ddfec 	.word	0x000ddfec

000d7940 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d7940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7944:	4604      	mov	r4, r0
   d7946:	460f      	mov	r7, r1
   d7948:	4690      	mov	r8, r2
   d794a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d794c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7950:	429e      	cmp	r6, r3
   d7952:	d231      	bcs.n	d79b8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d7954:	6860      	ldr	r0, [r4, #4]
   d7956:	4639      	mov	r1, r7
   d7958:	f001 fcc9 	bl	d92ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d795c:	eb08 0106 	add.w	r1, r8, r6
   d7960:	6860      	ldr	r0, [r4, #4]
   d7962:	f7ff fd5f 	bl	d7424 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d7966:	6860      	ldr	r0, [r4, #4]
   d7968:	2100      	movs	r1, #0
   d796a:	f001 fcc7 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d796e:	4605      	mov	r5, r0
   d7970:	b9d0      	cbnz	r0, d79a8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d7972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d7974:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d7976:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d7978:	2a20      	cmp	r2, #32
   d797a:	f04f 0301 	mov.w	r3, #1
   d797e:	bf28      	it	cs
   d7980:	2220      	movcs	r2, #32
   d7982:	4639      	mov	r1, r7
   d7984:	f001 fca1 	bl	d92ca <_ZN7TwoWire11requestFromEhjh>
   d7988:	eb09 0b06 	add.w	fp, r9, r6
   d798c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d798e:	eb0b 0a00 	add.w	sl, fp, r0
   d7992:	45da      	cmp	sl, fp
   d7994:	d006      	beq.n	d79a4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d7996:	6860      	ldr	r0, [r4, #4]
   d7998:	6803      	ldr	r3, [r0, #0]
   d799a:	695b      	ldr	r3, [r3, #20]
   d799c:	4798      	blx	r3
   d799e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d79a2:	e7f6      	b.n	d7992 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d79a4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d79a6:	e7d2      	b.n	d794e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d79a8:	4602      	mov	r2, r0
   d79aa:	4904      	ldr	r1, [pc, #16]	; (d79bc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d79ac:	4804      	ldr	r0, [pc, #16]	; (d79c0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d79ae:	f7fc fcef 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d79b2:	4628      	mov	r0, r5
   d79b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d79b8:	2500      	movs	r5, #0
	return stat;
   d79ba:	e7fa      	b.n	d79b2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d79bc:	000ddf10 	.word	0x000ddf10
   d79c0:	2003e604 	.word	0x2003e604

000d79c4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d79c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d79c8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d79cc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d79ce:	6803      	ldr	r3, [r0, #0]
   d79d0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d79d2:	4605      	mov	r5, r0
   d79d4:	460c      	mov	r4, r1
   d79d6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d79d8:	4798      	blx	r3
   d79da:	4580      	cmp	r8, r0
   d79dc:	d80d      	bhi.n	d79fa <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d79de:	3420      	adds	r4, #32
   d79e0:	6868      	ldr	r0, [r5, #4]
   d79e2:	9600      	str	r6, [sp, #0]
   d79e4:	463b      	mov	r3, r7
   d79e6:	b2e2      	uxtb	r2, r4
   d79e8:	216f      	movs	r1, #111	; 0x6f
   d79ea:	f7ff ffa9 	bl	d7940 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d79ee:	fab0 f080 	clz	r0, r0
   d79f2:	0940      	lsrs	r0, r0, #5
}
   d79f4:	b002      	add	sp, #8
   d79f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d79fa:	2000      	movs	r0, #0
   d79fc:	e7fa      	b.n	d79f4 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d79fe <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d79fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7a02:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7a06:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7a08:	6803      	ldr	r3, [r0, #0]
   d7a0a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7a0c:	4604      	mov	r4, r0
   d7a0e:	460d      	mov	r5, r1
   d7a10:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7a12:	4798      	blx	r3
   d7a14:	4580      	cmp	r8, r0
   d7a16:	d80c      	bhi.n	d7a32 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d7a18:	6860      	ldr	r0, [r4, #4]
   d7a1a:	9600      	str	r6, [sp, #0]
   d7a1c:	463b      	mov	r3, r7
   d7a1e:	b2ea      	uxtb	r2, r5
   d7a20:	2157      	movs	r1, #87	; 0x57
   d7a22:	f7ff ff8d 	bl	d7940 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d7a26:	fab0 f080 	clz	r0, r0
   d7a2a:	0940      	lsrs	r0, r0, #5
}
   d7a2c:	b002      	add	sp, #8
   d7a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7a32:	2000      	movs	r0, #0
   d7a34:	e7fa      	b.n	d7a2c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d7a36 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d7a36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d7a38:	1e1e      	subs	r6, r3, #0
   d7a3a:	bf0c      	ite	eq
   d7a3c:	2307      	moveq	r3, #7
   d7a3e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d7a40:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d7a42:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d7a44:	ab02      	add	r3, sp, #8
   d7a46:	460a      	mov	r2, r1
   d7a48:	216f      	movs	r1, #111	; 0x6f
   d7a4a:	f7ff ff79 	bl	d7940 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d7a4e:	4605      	mov	r5, r0
   d7a50:	b9a8      	cbnz	r0, d7a7e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d7a52:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7a56:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d7a58:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d7a5c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d7a5e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d7a62:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d7a64:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7a68:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d7a6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d7a6e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d7a70:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d7a74:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d7a76:	b92e      	cbnz	r6, d7a84 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d7a78:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d7a7c:	72a3      	strb	r3, [r4, #10]
}
   d7a7e:	4628      	mov	r0, r5
   d7a80:	b004      	add	sp, #16
   d7a82:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d7a84:	f002 fc0c 	bl	da2a0 <_ZN9TimeClass4yearEv>
   d7a88:	f7ff fecc 	bl	d7824 <_ZN12MCP79410Time8intToBcdEi>
   d7a8c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d7a8e:	e7f6      	b.n	d7a7e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d7a90 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d7a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d7a92:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d7a94:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d7a96:	9300      	str	r3, [sp, #0]
   d7a98:	216f      	movs	r1, #111	; 0x6f
   d7a9a:	ab03      	add	r3, sp, #12
   d7a9c:	f7ff ff50 	bl	d7940 <_ZNK8MCP7941010deviceReadEhhPhj>
   d7aa0:	b920      	cbnz	r0, d7aac <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d7aa2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7aa6:	b005      	add	sp, #20
   d7aa8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d7aac:	2000      	movs	r0, #0
   d7aae:	e7fa      	b.n	d7aa6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d7ab0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d7ab0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d7ab2:	2103      	movs	r1, #3
   d7ab4:	f7ff ffec 	bl	d7a90 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d7ab8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d7abc:	bd08      	pop	{r3, pc}

000d7abe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d7abe:	b538      	push	{r3, r4, r5, lr}
   d7ac0:	2300      	movs	r3, #0
   d7ac2:	460c      	mov	r4, r1
   d7ac4:	460a      	mov	r2, r1
   d7ac6:	4619      	mov	r1, r3
   d7ac8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d7aca:	f7ff ffb4 	bl	d7a36 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d7ace:	b930      	cbnz	r0, d7ade <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7ad0:	7aa3      	ldrb	r3, [r4, #10]
   d7ad2:	b123      	cbz	r3, d7ade <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d7ad4:	4628      	mov	r0, r5
}
   d7ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7ada:	f7ff bfe9 	b.w	d7ab0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d7ade:	2000      	movs	r0, #0
   d7ae0:	bd38      	pop	{r3, r4, r5, pc}

000d7ae2 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d7ae2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7ae4:	4602      	mov	r2, r0
	MCP79410Time time;
   d7ae6:	a801      	add	r0, sp, #4
   d7ae8:	f7ff fe28 	bl	d773c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d7aec:	a901      	add	r1, sp, #4
   d7aee:	4610      	mov	r0, r2
   d7af0:	f7ff ffe5 	bl	d7abe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d7af4:	b128      	cbz	r0, d7b02 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d7af6:	a801      	add	r0, sp, #4
   d7af8:	f7ff fe6c 	bl	d77d4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d7afc:	b007      	add	sp, #28
   d7afe:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d7b02:	2000      	movs	r0, #0
   d7b04:	4601      	mov	r1, r0
   d7b06:	e7f9      	b.n	d7afc <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d7b08 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d7b08:	b5d0      	push	{r4, r6, r7, lr}
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	b086      	sub	sp, #24
	wire.begin();
   d7b0e:	6840      	ldr	r0, [r0, #4]
   d7b10:	f001 fbbe 	bl	d9290 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d7b14:	f002 fb8a 	bl	da22c <_ZN9TimeClass7isValidEv>
   d7b18:	b9e8      	cbnz	r0, d7b56 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d7b1a:	7ae3      	ldrb	r3, [r4, #11]
   d7b1c:	079b      	lsls	r3, r3, #30
   d7b1e:	d51a      	bpl.n	d7b56 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d7b20:	4620      	mov	r0, r4
   d7b22:	f7ff ffde 	bl	d7ae2 <_ZNK8MCP7941010getRTCTimeEv>
   d7b26:	4606      	mov	r6, r0
   d7b28:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d7b2a:	ea56 0307 	orrs.w	r3, r6, r7
   d7b2e:	d012      	beq.n	d7b56 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d7b30:	f002 fa83 	bl	da03a <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d7b34:	4b0a      	ldr	r3, [pc, #40]	; (d7b60 <_ZN8MCP794105setupEv+0x58>)
   d7b36:	490b      	ldr	r1, [pc, #44]	; (d7b64 <_ZN8MCP794105setupEv+0x5c>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	9300      	str	r3, [sp, #0]
   d7b3c:	4632      	mov	r2, r6
   d7b3e:	463b      	mov	r3, r7
   d7b40:	a802      	add	r0, sp, #8
   d7b42:	f002 fb31 	bl	da1a8 <_ZN9TimeClass6formatExPKc>
   d7b46:	4808      	ldr	r0, [pc, #32]	; (d7b68 <_ZN8MCP794105setupEv+0x60>)
   d7b48:	9a02      	ldr	r2, [sp, #8]
   d7b4a:	4908      	ldr	r1, [pc, #32]	; (d7b6c <_ZN8MCP794105setupEv+0x64>)
   d7b4c:	f7fc fc20 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7b50:	a802      	add	r0, sp, #8
   d7b52:	f002 f8fb 	bl	d9d4c <_ZN6StringD1Ev>
	setupDone = true;
   d7b56:	2301      	movs	r3, #1
   d7b58:	7223      	strb	r3, [r4, #8]
}
   d7b5a:	b006      	add	sp, #24
   d7b5c:	bdd0      	pop	{r4, r6, r7, pc}
   d7b5e:	bf00      	nop
   d7b60:	2003dd00 	.word	0x2003dd00
   d7b64:	2003e644 	.word	0x2003e644
   d7b68:	2003e604 	.word	0x2003e604
   d7b6c:	000ddf2a 	.word	0x000ddf2a

000d7b70 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b74:	4606      	mov	r6, r0
   d7b76:	4688      	mov	r8, r1
   d7b78:	4691      	mov	r9, r2
   d7b7a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d7b7c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d7b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b80:	429d      	cmp	r5, r3
   d7b82:	d229      	bcs.n	d7bd8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d7b84:	6870      	ldr	r0, [r6, #4]
   d7b86:	4641      	mov	r1, r8
   d7b88:	f001 fbb1 	bl	d92ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7b8c:	6870      	ldr	r0, [r6, #4]
   d7b8e:	eb09 0105 	add.w	r1, r9, r5
   d7b92:	f7ff fc47 	bl	d7424 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d7b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b98:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d7b9a:	2f1f      	cmp	r7, #31
   d7b9c:	bf28      	it	cs
   d7b9e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d7ba0:	eb0a 0405 	add.w	r4, sl, r5
   d7ba4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d7ba8:	6870      	ldr	r0, [r6, #4]
   d7baa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7bae:	6802      	ldr	r2, [r0, #0]
   d7bb0:	6892      	ldr	r2, [r2, #8]
   d7bb2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d7bb4:	45a3      	cmp	fp, r4
   d7bb6:	d1f7      	bne.n	d7ba8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d7bb8:	6870      	ldr	r0, [r6, #4]
   d7bba:	2101      	movs	r1, #1
   d7bbc:	f001 fb9e 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7bc0:	4604      	mov	r4, r0
   d7bc2:	b138      	cbz	r0, d7bd4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d7bc4:	4602      	mov	r2, r0
   d7bc6:	4905      	ldr	r1, [pc, #20]	; (d7bdc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d7bc8:	4805      	ldr	r0, [pc, #20]	; (d7be0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d7bca:	f7fc fbe1 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d7bce:	4620      	mov	r0, r4
   d7bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d7bd4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d7bd6:	e7d2      	b.n	d7b7e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d7bd8:	2400      	movs	r4, #0
	return stat;
   d7bda:	e7f8      	b.n	d7bce <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d7bdc:	000ddf3f 	.word	0x000ddf3f
   d7be0:	2003e604 	.word	0x2003e604

000d7be4 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7be4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7be8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7bec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7bee:	6803      	ldr	r3, [r0, #0]
   d7bf0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7bf2:	4605      	mov	r5, r0
   d7bf4:	460c      	mov	r4, r1
   d7bf6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7bf8:	4798      	blx	r3
   d7bfa:	4580      	cmp	r8, r0
   d7bfc:	d80d      	bhi.n	d7c1a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7bfe:	3420      	adds	r4, #32
   d7c00:	6868      	ldr	r0, [r5, #4]
   d7c02:	9600      	str	r6, [sp, #0]
   d7c04:	463b      	mov	r3, r7
   d7c06:	b2e2      	uxtb	r2, r4
   d7c08:	216f      	movs	r1, #111	; 0x6f
   d7c0a:	f7ff ffb1 	bl	d7b70 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d7c0e:	fab0 f080 	clz	r0, r0
   d7c12:	0940      	lsrs	r0, r0, #5
}
   d7c14:	b002      	add	sp, #8
   d7c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7c1a:	2000      	movs	r0, #0
   d7c1c:	e7fa      	b.n	d7c14 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d7c1e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d7c1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d7c20:	7c13      	ldrb	r3, [r2, #16]
   d7c22:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d7c26:	7bd3      	ldrb	r3, [r2, #15]
   d7c28:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d7c2c:	7b93      	ldrb	r3, [r2, #14]
   d7c2e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d7c32:	7b53      	ldrb	r3, [r2, #13]
   d7c34:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d7c38:	7b13      	ldrb	r3, [r2, #12]
   d7c3a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d7c3e:	7ad3      	ldrb	r3, [r2, #11]
   d7c40:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d7c44:	7a93      	ldrb	r3, [r2, #10]
   d7c46:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d7c4a:	2307      	movs	r3, #7
   d7c4c:	9300      	str	r3, [sp, #0]
   d7c4e:	460a      	mov	r2, r1
   d7c50:	ab02      	add	r3, sp, #8
   d7c52:	216f      	movs	r1, #111	; 0x6f
   d7c54:	f7ff ff8c 	bl	d7b70 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7c58:	b005      	add	sp, #20
   d7c5a:	f85d fb04 	ldr.w	pc, [sp], #4

000d7c5e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d7c5e:	b510      	push	{r4, lr}
   d7c60:	b088      	sub	sp, #32
   d7c62:	4604      	mov	r4, r0
	MCP79410Time time;
   d7c64:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d7c66:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d7c68:	f7ff fd68 	bl	d773c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d7c6c:	9b01      	ldr	r3, [sp, #4]
   d7c6e:	a803      	add	r0, sp, #12
   d7c70:	f7ff fe27 	bl	d78c2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7c74:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7c78:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d7c7e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7c82:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d7c86:	b16a      	cbz	r2, d7ca4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d7c88:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d7c8c:	aa03      	add	r2, sp, #12
   d7c8e:	2100      	movs	r1, #0
   d7c90:	4620      	mov	r0, r4
   d7c92:	f88d 3019 	strb.w	r3, [sp, #25]
   d7c96:	f7ff ffc2 	bl	d7c1e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d7c9a:	fab0 f080 	clz	r0, r0
   d7c9e:	0940      	lsrs	r0, r0, #5
   d7ca0:	b008      	add	sp, #32
   d7ca2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7ca4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d7ca8:	e7f0      	b.n	d7c8c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d7cac <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d7cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7cae:	b087      	sub	sp, #28
   d7cb0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d7cb2:	f002 fabb 	bl	da22c <_ZN9TimeClass7isValidEv>
   d7cb6:	4604      	mov	r4, r0
   d7cb8:	b1e8      	cbz	r0, d7cf6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d7cba:	f002 fad4 	bl	da266 <_ZN9TimeClass3nowEv>
   d7cbe:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d7cc0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d7cc2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d7cc4:	463b      	mov	r3, r7
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	f7ff ffc9 	bl	d7c5e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7ccc:	4b0c      	ldr	r3, [pc, #48]	; (d7d00 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d7cce:	490d      	ldr	r1, [pc, #52]	; (d7d04 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d7cd0:	681b      	ldr	r3, [r3, #0]
   d7cd2:	9300      	str	r3, [sp, #0]
   d7cd4:	4632      	mov	r2, r6
   d7cd6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d7cd8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7cda:	a802      	add	r0, sp, #8
   d7cdc:	f002 fa64 	bl	da1a8 <_ZN9TimeClass6formatExPKc>
   d7ce0:	4809      	ldr	r0, [pc, #36]	; (d7d08 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7ce2:	9a02      	ldr	r2, [sp, #8]
   d7ce4:	4909      	ldr	r1, [pc, #36]	; (d7d0c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d7ce6:	f7fc fb53 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7cea:	a802      	add	r0, sp, #8
   d7cec:	f002 f82e 	bl	d9d4c <_ZN6StringD1Ev>
}
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	b007      	add	sp, #28
   d7cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d7cf6:	4906      	ldr	r1, [pc, #24]	; (d7d10 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d7cf8:	4803      	ldr	r0, [pc, #12]	; (d7d08 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7cfa:	f7fc fb49 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7cfe:	e7f7      	b.n	d7cf0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d7d00:	2003dd00 	.word	0x2003dd00
   d7d04:	2003e644 	.word	0x2003e644
   d7d08:	2003e604 	.word	0x2003e604
   d7d0c:	000ddf5a 	.word	0x000ddf5a
   d7d10:	000ddf70 	.word	0x000ddf70

000d7d14 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d7d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d7d16:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d7d18:	4604      	mov	r4, r0
	if (!timeSet) {
   d7d1a:	b99d      	cbnz	r5, d7d44 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d7d1c:	f002 fa86 	bl	da22c <_ZN9TimeClass7isValidEv>
   d7d20:	b180      	cbz	r0, d7d44 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d7d22:	2200      	movs	r2, #0
   d7d24:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d7d26:	4669      	mov	r1, sp
   d7d28:	4628      	mov	r0, r5
        tm = 0;
   d7d2a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d7d2e:	f000 fe45 	bl	d89bc <spark_sync_time_last>
			if (lastSync != 0) {
   d7d32:	b138      	cbz	r0, d7d44 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7d34:	7ae3      	ldrb	r3, [r4, #11]
   d7d36:	07db      	lsls	r3, r3, #31
   d7d38:	d502      	bpl.n	d7d40 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	f7ff ffb6 	bl	d7cac <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d7d40:	2301      	movs	r3, #1
   d7d42:	7263      	strb	r3, [r4, #9]
}
   d7d44:	b003      	add	sp, #12
   d7d46:	bd30      	pop	{r4, r5, pc}

000d7d48 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d7d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7d4a:	2301      	movs	r3, #1
	buf[0] = value;
   d7d4c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7d50:	9300      	str	r3, [sp, #0]
   d7d52:	460a      	mov	r2, r1
   d7d54:	ab03      	add	r3, sp, #12
   d7d56:	216f      	movs	r1, #111	; 0x6f
   d7d58:	f7ff ff0a 	bl	d7b70 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7d5c:	b005      	add	sp, #20
   d7d5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d62 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d7d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d64:	4604      	mov	r4, r0
   d7d66:	460d      	mov	r5, r1
   d7d68:	4617      	mov	r7, r2
   d7d6a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d7d6c:	f7ff fe90 	bl	d7a90 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d7d70:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7d74:	4332      	orrs	r2, r6
   d7d76:	4629      	mov	r1, r5
   d7d78:	4620      	mov	r0, r4
}
   d7d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d7d7e:	f7ff bfe3 	b.w	d7d48 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d7d82 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d7d82:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d7d84:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7d86:	d80c      	bhi.n	d7da2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7d88:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d7d8a:	f04f 0300 	mov.w	r3, #0
   d7d8e:	bf14      	ite	ne
   d7d90:	22df      	movne	r2, #223	; 0xdf
   d7d92:	22ef      	moveq	r2, #239	; 0xef
   d7d94:	2107      	movs	r1, #7
   d7d96:	f7ff ffe4 	bl	d7d62 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d7d9a:	fab0 f080 	clz	r0, r0
   d7d9e:	0940      	lsrs	r0, r0, #5
}
   d7da0:	bd08      	pop	{r3, pc}
		return false;
   d7da2:	2000      	movs	r0, #0
   d7da4:	e7fc      	b.n	d7da0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d7da6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7da6:	b538      	push	{r3, r4, r5, lr}
   d7da8:	4604      	mov	r4, r0
   d7daa:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7dac:	6860      	ldr	r0, [r4, #4]
   d7dae:	2157      	movs	r1, #87	; 0x57
   d7db0:	f001 fa9d 	bl	d92ee <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7db4:	6860      	ldr	r0, [r4, #4]
   d7db6:	2101      	movs	r1, #1
   d7db8:	f001 faa0 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d7dbc:	b108      	cbz	r0, d7dc2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d7dbe:	3d01      	subs	r5, #1
   d7dc0:	d1f4      	bne.n	d7dac <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d7dc2:	bd38      	pop	{r3, r4, r5, pc}

000d7dc4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7dc8:	4604      	mov	r4, r0
   d7dca:	460f      	mov	r7, r1
   d7dcc:	4616      	mov	r6, r2
   d7dce:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d7dd2:	45b0      	cmp	r8, r6
   d7dd4:	d020      	beq.n	d7e18 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7dd6:	6860      	ldr	r0, [r4, #4]
   d7dd8:	2157      	movs	r1, #87	; 0x57
   d7dda:	f001 fa88 	bl	d92ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7dde:	4639      	mov	r1, r7
   d7de0:	6860      	ldr	r0, [r4, #4]
   d7de2:	f7ff fb1f 	bl	d7424 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d7de6:	6860      	ldr	r0, [r4, #4]
   d7de8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7dec:	6803      	ldr	r3, [r0, #0]
   d7dee:	689b      	ldr	r3, [r3, #8]
   d7df0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d7df2:	6860      	ldr	r0, [r4, #4]
   d7df4:	2101      	movs	r1, #1
   d7df6:	f001 fa81 	bl	d92fc <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7dfa:	3701      	adds	r7, #1
   d7dfc:	4605      	mov	r5, r0
   d7dfe:	b138      	cbz	r0, d7e10 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d7e00:	4602      	mov	r2, r0
   d7e02:	4906      	ldr	r1, [pc, #24]	; (d7e1c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d7e04:	4806      	ldr	r0, [pc, #24]	; (d7e20 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d7e06:	f7fc fac3 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
}
   d7e0a:	4628      	mov	r0, r5
   d7e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d7e10:	4620      	mov	r0, r4
   d7e12:	f7ff ffc8 	bl	d7da6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d7e16:	e7dc      	b.n	d7dd2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d7e18:	2500      	movs	r5, #0
	return stat;
   d7e1a:	e7f6      	b.n	d7e0a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d7e1c:	000ddf85 	.word	0x000ddf85
   d7e20:	2003e604 	.word	0x2003e604

000d7e24 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d7e26:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e28:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7e2a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e2c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d7e2e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e30:	4604      	mov	r4, r0
   d7e32:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d7e34:	4798      	blx	r3
   d7e36:	4287      	cmp	r7, r0
   d7e38:	d80a      	bhi.n	d7e50 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d7e3a:	9a01      	ldr	r2, [sp, #4]
   d7e3c:	6860      	ldr	r0, [r4, #4]
   d7e3e:	4633      	mov	r3, r6
   d7e40:	b2e9      	uxtb	r1, r5
   d7e42:	f7ff ffbf 	bl	d7dc4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d7e46:	fab0 f080 	clz	r0, r0
   d7e4a:	0940      	lsrs	r0, r0, #5
}
   d7e4c:	b003      	add	sp, #12
   d7e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7e50:	2000      	movs	r0, #0
   d7e52:	e7fb      	b.n	d7e4c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d7e54 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d7e54:	4b01      	ldr	r3, [pc, #4]	; (d7e5c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d7e56:	4a02      	ldr	r2, [pc, #8]	; (d7e60 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d7e58:	601a      	str	r2, [r3, #0]
}
   d7e5a:	4770      	bx	lr
   d7e5c:	2003e604 	.word	0x2003e604
   d7e60:	000ddfa6 	.word	0x000ddfa6

000d7e64 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7e64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7e66:	4603      	mov	r3, r0
	switch (__op)
   d7e68:	d102      	bne.n	d7e70 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7e6a:	6001      	str	r1, [r0, #0]
      }
   d7e6c:	2000      	movs	r0, #0
   d7e6e:	4770      	bx	lr
	  switch (__op)
   d7e70:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7e72:	bf04      	itt	eq
   d7e74:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7e78:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7e7c:	e7f6      	b.n	d7e6c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7e7e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7e7e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7e80:	2301      	movs	r3, #1
   d7e82:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7e84:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7e86:	4604      	mov	r4, r0
        if (th->func) {
   d7e88:	b143      	cbz	r3, d7e9c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d7e8a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e8c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d7e8e:	2301      	movs	r3, #1
   d7e90:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7e92:	2000      	movs	r0, #0
    }
   d7e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d7e98:	f000 bb32 	b.w	d8500 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7e9c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d7e9e:	2800      	cmp	r0, #0
   d7ea0:	d0f5      	beq.n	d7e8e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d7ea2:	6883      	ldr	r3, [r0, #8]
   d7ea4:	b90b      	cbnz	r3, d7eaa <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7ea6:	f002 fd18 	bl	da8da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7eaa:	68c3      	ldr	r3, [r0, #12]
   d7eac:	e7ee      	b.n	d7e8c <_ZN6Thread3runEPv+0xe>

000d7eae <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7eae:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7eb0:	6842      	ldr	r2, [r0, #4]
   d7eb2:	4603      	mov	r3, r0
   d7eb4:	1054      	asrs	r4, r2, #1
   d7eb6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7eba:	07d2      	lsls	r2, r2, #31
   d7ebc:	bf48      	it	mi
   d7ebe:	590a      	ldrmi	r2, [r1, r4]
   d7ec0:	681b      	ldr	r3, [r3, #0]
      }
   d7ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7ec6:	bf48      	it	mi
   d7ec8:	58d3      	ldrmi	r3, [r2, r3]
   d7eca:	4718      	bx	r3

000d7ecc <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7ecc:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7ed0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7ed4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7ed6:	3008      	adds	r0, #8
   d7ed8:	f000 faea 	bl	d84b0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7edc:	2004      	movs	r0, #4
   d7ede:	f7fc f8da 	bl	d4096 <_Znwj>
   d7ee2:	4605      	mov	r5, r0
   d7ee4:	b398      	cbz	r0, d7f4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7ee6:	491b      	ldr	r1, [pc, #108]	; (d7f54 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7ee8:	2014      	movs	r0, #20
   d7eea:	f002 fcf2 	bl	da8d2 <_ZnwjRKSt9nothrow_t>
   d7eee:	b130      	cbz	r0, d7efe <_ZN21PublishQueueAsyncBase5setupEv+0x32>
      : _M_head_impl() { }
   d7ef0:	2300      	movs	r3, #0
            exited(false) {
   d7ef2:	e9c0 3300 	strd	r3, r3, [r0]
   d7ef6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7efa:	7403      	strb	r3, [r0, #16]
   d7efc:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7efe:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7f00:	b1a0      	cbz	r0, d7f2c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7f02:	4b15      	ldr	r3, [pc, #84]	; (d7f58 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7f04:	4915      	ldr	r1, [pc, #84]	; (d7f5c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d7f06:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7f0e:	e9cd 0300 	strd	r0, r3, [sp]
   d7f12:	2202      	movs	r2, #2
   d7f14:	4b12      	ldr	r3, [pc, #72]	; (d7f60 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d7f16:	3004      	adds	r0, #4
   d7f18:	f000 fa92 	bl	d8440 <os_thread_create>
   d7f1c:	b930      	cbnz	r0, d7f2c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7f1e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7f20:	7c1b      	ldrb	r3, [r3, #16]
   d7f22:	b9a3      	cbnz	r3, d7f4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7f24:	2001      	movs	r0, #1
   d7f26:	f000 fb0b 	bl	d8540 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d7f2a:	e7f8      	b.n	d7f1e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f2c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7f2e:	2300      	movs	r3, #0
   d7f30:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7f32:	b164      	cbz	r4, d7f4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7f34:	6827      	ldr	r7, [r4, #0]
   d7f36:	b137      	cbz	r7, d7f46 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7f38:	4638      	mov	r0, r7
   d7f3a:	f7fc f9a6 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7f3e:	2110      	movs	r1, #16
   d7f40:	4638      	mov	r0, r7
   d7f42:	f002 fcc4 	bl	da8ce <_ZdlPvj>
   d7f46:	2114      	movs	r1, #20
   d7f48:	4620      	mov	r0, r4
   d7f4a:	f002 fcc0 	bl	da8ce <_ZdlPvj>
   d7f4e:	6075      	str	r5, [r6, #4]
}
   d7f50:	b003      	add	sp, #12
   d7f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f54:	000de30c 	.word	0x000de30c
   d7f58:	000d816b 	.word	0x000d816b
   d7f5c:	000de018 	.word	0x000de018
   d7f60:	000d7e7f 	.word	0x000d7e7f

000d7f64 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7f64:	f247 5130 	movw	r1, #30000	; 0x7530
   d7f68:	4a08      	ldr	r2, [pc, #32]	; (d7f8c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7f6a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7f6c:	4908      	ldr	r1, [pc, #32]	; (d7f90 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7f6e:	6002      	str	r2, [r0, #0]
   d7f70:	2200      	movs	r2, #0
   d7f72:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7f76:	4907      	ldr	r1, [pc, #28]	; (d7f94 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7f78:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7f7a:	4907      	ldr	r1, [pc, #28]	; (d7f98 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7f7c:	6042      	str	r2, [r0, #4]
   d7f7e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7f82:	6181      	str	r1, [r0, #24]
   d7f84:	8502      	strh	r2, [r0, #40]	; 0x28
   d7f86:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7f8a:	4770      	bx	lr
   d7f8c:	000de0dc 	.word	0x000de0dc
   d7f90:	000d82d5 	.word	0x000d82d5
   d7f94:	000d7eaf 	.word	0x000d7eaf
   d7f98:	000d7e65 	.word	0x000d7e65

000d7f9c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7f9c:	b510      	push	{r4, lr}
   d7f9e:	4b04      	ldr	r3, [pc, #16]	; (d7fb0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7fa0:	4604      	mov	r4, r0
   d7fa2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7fa6:	f7fc f970 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d7faa:	4620      	mov	r0, r4
   d7fac:	bd10      	pop	{r4, pc}
   d7fae:	bf00      	nop
   d7fb0:	000de0dc 	.word	0x000de0dc

000d7fb4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7fb4:	b510      	push	{r4, lr}
   d7fb6:	4b03      	ldr	r3, [pc, #12]	; (d7fc4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7fb8:	6003      	str	r3, [r0, #0]
   d7fba:	4604      	mov	r4, r0
   d7fbc:	f7ff ffee 	bl	d7f9c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	bd10      	pop	{r4, pc}
   d7fc4:	000de104 	.word	0x000de104

000d7fc8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7fc8:	b510      	push	{r4, lr}
   d7fca:	4604      	mov	r4, r0
}
   d7fcc:	f7ff fff2 	bl	d7fb4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	2138      	movs	r1, #56	; 0x38
   d7fd4:	f002 fc7b 	bl	da8ce <_ZdlPvj>
   d7fd8:	4620      	mov	r0, r4
   d7fda:	bd10      	pop	{r4, pc}

000d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7fdc:	6880      	ldr	r0, [r0, #8]
   d7fde:	f000 ba6f 	b.w	d84c0 <os_mutex_lock>

000d7fe2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7fe2:	6880      	ldr	r0, [r0, #8]
   d7fe4:	f000 ba74 	b.w	d84d0 <os_mutex_unlock>

000d7fe8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7fe8:	b510      	push	{r4, lr}
   d7fea:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7fec:	6800      	ldr	r0, [r0, #0]
   d7fee:	f7ff fff8 	bl	d7fe2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	bd10      	pop	{r4, pc}

000d7ff6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7ff6:	b513      	push	{r0, r1, r4, lr}
   d7ff8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7ffa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7ffc:	f7ff ffee 	bl	d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d8000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d8002:	88dc      	ldrh	r4, [r3, #6]
   d8004:	b2a4      	uxth	r4, r4
   d8006:	b10c      	cbz	r4, d800c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d8008:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d800c:	a801      	add	r0, sp, #4
   d800e:	f7ff ffeb 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d8012:	4620      	mov	r0, r4
   d8014:	b002      	add	sp, #8
   d8016:	bd10      	pop	{r4, pc}

000d8018 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d8018:	b513      	push	{r0, r1, r4, lr}
   d801a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d801c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d801e:	f7ff ffdd 	bl	d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d8022:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d8026:	b943      	cbnz	r3, d803a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d8028:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d802a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d802c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d802e:	a801      	add	r0, sp, #4
   d8030:	f7ff ffda 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d8034:	4620      	mov	r0, r4
   d8036:	b002      	add	sp, #8
   d8038:	bd10      	pop	{r4, pc}
	bool result = false;
   d803a:	2400      	movs	r4, #0
   d803c:	e7f7      	b.n	d802e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d803e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d803e:	b513      	push	{r0, r1, r4, lr}
   d8040:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d8042:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d8044:	f7ff ffca 	bl	d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d8048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d804a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d804c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d804e:	f7ff ffcb 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d8052:	4620      	mov	r0, r4
   d8054:	b002      	add	sp, #8
   d8056:	bd10      	pop	{r4, pc}

000d8058 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d805c:	4699      	mov	r9, r3
   d805e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d8060:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d8064:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d8068:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d806c:	4604      	mov	r4, r0
   d806e:	460f      	mov	r7, r1
   d8070:	4616      	mov	r6, r2
	if (!haveSetup) {
   d8072:	b913      	cbnz	r3, d807a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d8074:	6803      	ldr	r3, [r0, #0]
   d8076:	689b      	ldr	r3, [r3, #8]
   d8078:	4798      	blx	r3
		data = "";
   d807a:	4b31      	ldr	r3, [pc, #196]	; (d8140 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d807c:	4638      	mov	r0, r7
		data = "";
   d807e:	2e00      	cmp	r6, #0
   d8080:	bf08      	it	eq
   d8082:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d8084:	f003 fb1b 	bl	db6be <strlen>
   d8088:	4605      	mov	r5, r0
   d808a:	4630      	mov	r0, r6
   d808c:	f003 fb17 	bl	db6be <strlen>
   d8090:	4428      	add	r0, r5
   d8092:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d8096:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d8098:	bf1c      	itt	ne
   d809a:	f025 0503 	bicne.w	r5, r5, #3
   d809e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d80a0:	4633      	mov	r3, r6
   d80a2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d80a6:	e9cd 9a00 	strd	r9, sl, [sp]
   d80aa:	4926      	ldr	r1, [pc, #152]	; (d8144 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d80ac:	4826      	ldr	r0, [pc, #152]	; (d8148 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d80ae:	463a      	mov	r2, r7
   d80b0:	f7fc f96e 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d80b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d80b6:	3b08      	subs	r3, #8
   d80b8:	42ab      	cmp	r3, r5
   d80ba:	d212      	bcs.n	d80e2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d80bc:	2400      	movs	r4, #0
}
   d80be:	4620      	mov	r0, r4
   d80c0:	b006      	add	sp, #24
   d80c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d80c6:	88cb      	ldrh	r3, [r1, #6]
   d80c8:	2b01      	cmp	r3, #1
   d80ca:	d036      	beq.n	d813a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d80cc:	a805      	add	r0, sp, #20
   d80ce:	f7ff ff8b 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d80d2:	6823      	ldr	r3, [r4, #0]
   d80d4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d80d8:	699b      	ldr	r3, [r3, #24]
   d80da:	4620      	mov	r0, r4
   d80dc:	4798      	blx	r3
   d80de:	2800      	cmp	r0, #0
   d80e0:	d0ec      	beq.n	d80bc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d80e2:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d80e4:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d80e6:	f7ff ff79 	bl	d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d80ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d80ec:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d80ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d80f0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d80f2:	1ad2      	subs	r2, r2, r3
   d80f4:	42aa      	cmp	r2, r5
   d80f6:	d3e6      	bcc.n	d80c6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d80f8:	ea48 080a 	orr.w	r8, r8, sl
   d80fc:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d8100:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d8104:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d8106:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d810a:	4639      	mov	r1, r7
   d810c:	4640      	mov	r0, r8
   d810e:	f003 fab1 	bl	db674 <strcpy>
				cp += strlen(cp) + 1;
   d8112:	4640      	mov	r0, r8
   d8114:	f003 fad3 	bl	db6be <strlen>
   d8118:	3001      	adds	r0, #1
				strcpy(cp, data);
   d811a:	4631      	mov	r1, r6
   d811c:	4440      	add	r0, r8
   d811e:	f003 faa9 	bl	db674 <strcpy>
				nextFree += size;
   d8122:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d8124:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d8126:	441d      	add	r5, r3
   d8128:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d812a:	88d3      	ldrh	r3, [r2, #6]
   d812c:	3301      	adds	r3, #1
   d812e:	80d3      	strh	r3, [r2, #6]
				return true;
   d8130:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d8132:	a805      	add	r0, sp, #20
   d8134:	f7ff ff58 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
   d8138:	e7c1      	b.n	d80be <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d813a:	2400      	movs	r4, #0
   d813c:	e7f9      	b.n	d8132 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d813e:	bf00      	nop
   d8140:	000de334 	.word	0x000de334
   d8144:	000de02a 	.word	0x000de02a
   d8148:	2003e608 	.word	0x2003e608

000d814c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d814c:	b508      	push	{r3, lr}
   d814e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8150:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d8154:	69a3      	ldr	r3, [r4, #24]
   d8156:	b90b      	cbnz	r3, d815c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d8158:	f002 fbbf 	bl	da8da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d815c:	69e3      	ldr	r3, [r4, #28]
   d815e:	4621      	mov	r1, r4
   d8160:	4628      	mov	r0, r5
   d8162:	4798      	blx	r3
		os_thread_yield();
   d8164:	f000 f974 	bl	d8450 <os_thread_yield>
	while(true) {
   d8168:	e7f4      	b.n	d8154 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d816a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d816a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d816c:	f7ff ffee 	bl	d814c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d8170 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d8170:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d8172:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d8176:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d8178:	4628      	mov	r0, r5
   d817a:	f003 faa0 	bl	db6be <strlen>
   d817e:	3001      	adds	r0, #1
   d8180:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d8182:	4628      	mov	r0, r5
   d8184:	f003 fa9b 	bl	db6be <strlen>
	size_t offset = start - retainedBuffer;
   d8188:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d818a:	3001      	adds	r0, #1
   d818c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d818e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d8190:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d8194:	bf1c      	itt	ne
   d8196:	f1c3 0304 	rsbne	r3, r3, #4
   d819a:	18c0      	addne	r0, r0, r3
}
   d819c:	bd68      	pop	{r3, r5, r6, pc}

000d819e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d819e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d81a0:	4604      	mov	r4, r0
   d81a2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d81a4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d81a6:	f7ff ff19 	bl	d7fdc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d81aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d81ac:	88fb      	ldrh	r3, [r7, #6]
   d81ae:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d81b2:	b1e6      	cbz	r6, d81ee <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d81b4:	2b01      	cmp	r3, #1
   d81b6:	d922      	bls.n	d81fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d81b8:	4629      	mov	r1, r5
   d81ba:	4620      	mov	r0, r4
   d81bc:	f7ff ffd8 	bl	d8170 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d81c0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d81c2:	4629      	mov	r1, r5
   d81c4:	4620      	mov	r0, r4
   d81c6:	f7ff ffd3 	bl	d8170 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d81ca:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d81cc:	443a      	add	r2, r7
	if (after > 0) {
   d81ce:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d81d0:	4601      	mov	r1, r0
	size_t len = next - start;
   d81d2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d81d6:	d002      	beq.n	d81de <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d81d8:	4628      	mov	r0, r5
   d81da:	f003 f9fb 	bl	db5d4 <memmove>
	nextFree -= len;
   d81de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d81e0:	1b9b      	subs	r3, r3, r6
   d81e2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d81e4:	88fb      	ldrh	r3, [r7, #6]
   d81e6:	3b01      	subs	r3, #1
   d81e8:	80fb      	strh	r3, [r7, #6]
	return true;
   d81ea:	2601      	movs	r6, #1
   d81ec:	e001      	b.n	d81f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d81ee:	2b00      	cmp	r3, #0
   d81f0:	d1e7      	bne.n	d81c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d81f2:	a801      	add	r0, sp, #4
   d81f4:	f7ff fef8 	bl	d7fe8 <_ZN11StMutexLockD1Ev>
}
   d81f8:	4630      	mov	r0, r6
   d81fa:	b003      	add	sp, #12
   d81fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d81fe:	2600      	movs	r6, #0
   d8200:	e7f7      	b.n	d81f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d8204 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d8204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8208:	460d      	mov	r5, r1
   d820a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d820c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d820e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8210:	f7ff fea8 	bl	d7f64 <_ZN21PublishQueueAsyncBaseC1Ev>
   d8214:	4b15      	ldr	r3, [pc, #84]	; (d826c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8216:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d821a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d821c:	4b14      	ldr	r3, [pc, #80]	; (d8270 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d821e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8220:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8222:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8224:	4698      	mov	r8, r3
   d8226:	d117      	bne.n	d8258 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d8228:	88ab      	ldrh	r3, [r5, #4]
   d822a:	b29b      	uxth	r3, r3
   d822c:	42b3      	cmp	r3, r6
   d822e:	d113      	bne.n	d8258 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8230:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d8234:	6367      	str	r7, [r4, #52]	; 0x34
   d8236:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d823a:	88eb      	ldrh	r3, [r5, #6]
   d823c:	fa1f f289 	uxth.w	r2, r9
   d8240:	b29b      	uxth	r3, r3
   d8242:	429a      	cmp	r2, r3
   d8244:	d20e      	bcs.n	d8264 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d8246:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d8248:	4620      	mov	r0, r4
   d824a:	f7ff ff91 	bl	d8170 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d824e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d8250:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d8252:	f109 0901 	add.w	r9, r9, #1
   d8256:	d9f0      	bls.n	d823a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d8258:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d825a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d825e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d8260:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d8262:	80eb      	strh	r3, [r5, #6]
}
   d8264:	4620      	mov	r0, r4
   d8266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d826a:	bf00      	nop
   d826c:	000de104 	.word	0x000de104
   d8270:	d19cab61 	.word	0xd19cab61

000d8274 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8274:	b510      	push	{r4, lr}
   d8276:	e9d1 2300 	ldrd	r2, r3, [r1]
   d827a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d827c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d827e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8280:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d8282:	b90a      	cbnz	r2, d8288 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8284:	07d9      	lsls	r1, r3, #31
   d8286:	d505      	bpl.n	d8294 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8288:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d828c:	4b0f      	ldr	r3, [pc, #60]	; (d82cc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d828e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8290:	4b0f      	ldr	r3, [pc, #60]	; (d82d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d8292:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8294:	ab02      	add	r3, sp, #8
   d8296:	e893 0003 	ldmia.w	r3, {r0, r1}
   d829a:	466a      	mov	r2, sp
   d829c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d82a0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d82a4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d82a8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82ac:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d82ae:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d82b2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d82b4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82b6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d82b8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d82ba:	4618      	mov	r0, r3
   d82bc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d82be:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d82c0:	9105      	str	r1, [sp, #20]
   d82c2:	f7fb ffe2 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d82c6:	4620      	mov	r0, r4
   d82c8:	b006      	add	sp, #24
   d82ca:	bd10      	pop	{r4, pc}
   d82cc:	000d7eaf 	.word	0x000d7eaf
   d82d0:	000d7e65 	.word	0x000d7e65

000d82d4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d82d4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d82d6:	4b05      	ldr	r3, [pc, #20]	; (d82ec <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d82d8:	9300      	str	r3, [sp, #0]
   d82da:	4669      	mov	r1, sp
   d82dc:	2300      	movs	r3, #0
   d82de:	3010      	adds	r0, #16
   d82e0:	9301      	str	r3, [sp, #4]
   d82e2:	f7ff ffc7 	bl	d8274 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d82e6:	b003      	add	sp, #12
   d82e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d82ec:	000d831d 	.word	0x000d831d

000d82f0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d82f0:	b513      	push	{r0, r1, r4, lr}
   d82f2:	4604      	mov	r4, r0
   d82f4:	f000 f934 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d82f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d82fa:	1ac0      	subs	r0, r0, r3
   d82fc:	68e3      	ldr	r3, [r4, #12]
   d82fe:	4298      	cmp	r0, r3
   d8300:	d308      	bcc.n	d8314 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d8302:	4b05      	ldr	r3, [pc, #20]	; (d8318 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d8304:	9300      	str	r3, [sp, #0]
   d8306:	4669      	mov	r1, sp
   d8308:	2300      	movs	r3, #0
   d830a:	f104 0010 	add.w	r0, r4, #16
   d830e:	9301      	str	r3, [sp, #4]
   d8310:	f7ff ffb0 	bl	d8274 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8314:	b002      	add	sp, #8
   d8316:	bd10      	pop	{r4, pc}
   d8318:	000d831d 	.word	0x000d831d

000d831c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d8320:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d8324:	b086      	sub	sp, #24
   d8326:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d8328:	2b00      	cmp	r3, #0
   d832a:	d164      	bne.n	d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d832c:	f000 fb16 	bl	d895c <spark_cloud_flag_connected>
   d8330:	2800      	cmp	r0, #0
   d8332:	d060      	beq.n	d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d8334:	f000 f914 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
   d8338:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d833a:	1ac0      	subs	r0, r0, r3
   d833c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d8340:	4298      	cmp	r0, r3
   d8342:	d958      	bls.n	d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d8344:	6823      	ldr	r3, [r4, #0]
   d8346:	4620      	mov	r0, r4
   d8348:	695b      	ldr	r3, [r3, #20]
   d834a:	4798      	blx	r3
		if (data) {
   d834c:	4605      	mov	r5, r0
   d834e:	2800      	cmp	r0, #0
   d8350:	d051      	beq.n	d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d8352:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d8356:	2301      	movs	r3, #1
   d8358:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d835c:	4638      	mov	r0, r7
   d835e:	f003 f9ae 	bl	db6be <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d8362:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d8366:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d836a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d836c:	682b      	ldr	r3, [r5, #0]
   d836e:	492b      	ldr	r1, [pc, #172]	; (d841c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d8370:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d8372:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d8374:	4633      	mov	r3, r6
   d8376:	482a      	ldr	r0, [pc, #168]	; (d8420 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8378:	463a      	mov	r2, r7
   d837a:	f7fc f809 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d837e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d8380:	f88d 8000 	strb.w	r8, [sp]
   d8384:	4632      	mov	r2, r6
   d8386:	4639      	mov	r1, r7
   d8388:	a802      	add	r0, sp, #8
   d838a:	f000 fd8f 	bl	d8eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d838e:	9d02      	ldr	r5, [sp, #8]
   d8390:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d8392:	b91b      	cbnz	r3, d839c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d8394:	2001      	movs	r0, #1
   d8396:	f000 fbf9 	bl	d8b8c <delay>
			while(!request.isDone()) {
   d839a:	e7f8      	b.n	d838e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d839c:	2000      	movs	r0, #0
   d839e:	f000 fa7f 	bl	d88a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d83a2:	b120      	cbz	r0, d83ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d83a4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d83a6:	b913      	cbnz	r3, d83ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d83a8:	f000 fac8 	bl	d893c <spark_process>
    }
   d83ac:	e7fa      	b.n	d83a4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d83ae:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d83b0:	2b01      	cmp	r3, #1
   d83b2:	d123      	bne.n	d83fc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d83b4:	491b      	ldr	r1, [pc, #108]	; (d8424 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d83b6:	481a      	ldr	r0, [pc, #104]	; (d8420 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d83b8:	f7fb ffea 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d83bc:	6823      	ldr	r3, [r4, #0]
   d83be:	2100      	movs	r1, #0
   d83c0:	699b      	ldr	r3, [r3, #24]
   d83c2:	4620      	mov	r0, r4
   d83c4:	4798      	blx	r3
			isSending = false;
   d83c6:	2300      	movs	r3, #0
   d83c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d83cc:	f000 f8c8 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d83d0:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d83d2:	9c03      	ldr	r4, [sp, #12]
   d83d4:	b17c      	cbz	r4, d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d83d6:	6863      	ldr	r3, [r4, #4]
   d83d8:	3b01      	subs	r3, #1
   d83da:	6063      	str	r3, [r4, #4]
   d83dc:	b95b      	cbnz	r3, d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d83de:	6823      	ldr	r3, [r4, #0]
   d83e0:	4620      	mov	r0, r4
   d83e2:	689b      	ldr	r3, [r3, #8]
   d83e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d83e6:	68a3      	ldr	r3, [r4, #8]
   d83e8:	3b01      	subs	r3, #1
   d83ea:	60a3      	str	r3, [r4, #8]
   d83ec:	b91b      	cbnz	r3, d83f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d83ee:	6823      	ldr	r3, [r4, #0]
   d83f0:	4620      	mov	r0, r4
   d83f2:	68db      	ldr	r3, [r3, #12]
   d83f4:	4798      	blx	r3
}
   d83f6:	b006      	add	sp, #24
   d83f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d83fc:	68e2      	ldr	r2, [r4, #12]
   d83fe:	490a      	ldr	r1, [pc, #40]	; (d8428 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d8400:	4807      	ldr	r0, [pc, #28]	; (d8420 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8402:	f7fb ffc5 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d8406:	4b09      	ldr	r3, [pc, #36]	; (d842c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d8408:	9304      	str	r3, [sp, #16]
   d840a:	a904      	add	r1, sp, #16
   d840c:	2300      	movs	r3, #0
   d840e:	f104 0010 	add.w	r0, r4, #16
   d8412:	9305      	str	r3, [sp, #20]
   d8414:	f7ff ff2e 	bl	d8274 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8418:	e7d5      	b.n	d83c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d841a:	bf00      	nop
   d841c:	000de06b 	.word	0x000de06b
   d8420:	2003e608 	.word	0x2003e608
   d8424:	000de08c 	.word	0x000de08c
   d8428:	000de0a3 	.word	0x000de0a3
   d842c:	000d82f1 	.word	0x000d82f1

000d8430 <_GLOBAL__sub_I_pubqLogger>:
   d8430:	4b01      	ldr	r3, [pc, #4]	; (d8438 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d8432:	4a02      	ldr	r2, [pc, #8]	; (d843c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d8434:	601a      	str	r2, [r3, #0]
}
   d8436:	4770      	bx	lr
   d8438:	2003e608 	.word	0x2003e608
   d843c:	000de0ca 	.word	0x000de0ca

000d8440 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d8440:	b508      	push	{r3, lr}
   d8442:	4b02      	ldr	r3, [pc, #8]	; (d844c <os_thread_create+0xc>)
   d8444:	681b      	ldr	r3, [r3, #0]
   d8446:	685b      	ldr	r3, [r3, #4]
   d8448:	9301      	str	r3, [sp, #4]
   d844a:	bd08      	pop	{r3, pc}
   d844c:	00030248 	.word	0x00030248

000d8450 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8450:	b508      	push	{r3, lr}
   d8452:	4b02      	ldr	r3, [pc, #8]	; (d845c <os_thread_yield+0xc>)
   d8454:	681b      	ldr	r3, [r3, #0]
   d8456:	68db      	ldr	r3, [r3, #12]
   d8458:	9301      	str	r3, [sp, #4]
   d845a:	bd08      	pop	{r3, pc}
   d845c:	00030248 	.word	0x00030248

000d8460 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d8460:	b508      	push	{r3, lr}
   d8462:	4b02      	ldr	r3, [pc, #8]	; (d846c <os_thread_scheduling+0xc>)
   d8464:	681b      	ldr	r3, [r3, #0]
   d8466:	69db      	ldr	r3, [r3, #28]
   d8468:	9301      	str	r3, [sp, #4]
   d846a:	bd08      	pop	{r3, pc}
   d846c:	00030248 	.word	0x00030248

000d8470 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d8470:	b508      	push	{r3, lr}
   d8472:	4b02      	ldr	r3, [pc, #8]	; (d847c <os_timer_create+0xc>)
   d8474:	681b      	ldr	r3, [r3, #0]
   d8476:	6a1b      	ldr	r3, [r3, #32]
   d8478:	9301      	str	r3, [sp, #4]
   d847a:	bd08      	pop	{r3, pc}
   d847c:	00030248 	.word	0x00030248

000d8480 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d8480:	b508      	push	{r3, lr}
   d8482:	4b02      	ldr	r3, [pc, #8]	; (d848c <os_timer_destroy+0xc>)
   d8484:	681b      	ldr	r3, [r3, #0]
   d8486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8488:	9301      	str	r3, [sp, #4]
   d848a:	bd08      	pop	{r3, pc}
   d848c:	00030248 	.word	0x00030248

000d8490 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d8490:	b508      	push	{r3, lr}
   d8492:	4b02      	ldr	r3, [pc, #8]	; (d849c <os_timer_get_id+0xc>)
   d8494:	681b      	ldr	r3, [r3, #0]
   d8496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8498:	9301      	str	r3, [sp, #4]
   d849a:	bd08      	pop	{r3, pc}
   d849c:	00030248 	.word	0x00030248

000d84a0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d84a0:	b508      	push	{r3, lr}
   d84a2:	4b02      	ldr	r3, [pc, #8]	; (d84ac <os_timer_change+0xc>)
   d84a4:	681b      	ldr	r3, [r3, #0]
   d84a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d84a8:	9301      	str	r3, [sp, #4]
   d84aa:	bd08      	pop	{r3, pc}
   d84ac:	00030248 	.word	0x00030248

000d84b0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d84b0:	b508      	push	{r3, lr}
   d84b2:	4b02      	ldr	r3, [pc, #8]	; (d84bc <os_mutex_create+0xc>)
   d84b4:	681b      	ldr	r3, [r3, #0]
   d84b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d84b8:	9301      	str	r3, [sp, #4]
   d84ba:	bd08      	pop	{r3, pc}
   d84bc:	00030248 	.word	0x00030248

000d84c0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d84c0:	b508      	push	{r3, lr}
   d84c2:	4b02      	ldr	r3, [pc, #8]	; (d84cc <os_mutex_lock+0xc>)
   d84c4:	681b      	ldr	r3, [r3, #0]
   d84c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d84c8:	9301      	str	r3, [sp, #4]
   d84ca:	bd08      	pop	{r3, pc}
   d84cc:	00030248 	.word	0x00030248

000d84d0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d84d0:	b508      	push	{r3, lr}
   d84d2:	4b02      	ldr	r3, [pc, #8]	; (d84dc <os_mutex_unlock+0xc>)
   d84d4:	681b      	ldr	r3, [r3, #0]
   d84d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d84d8:	9301      	str	r3, [sp, #4]
   d84da:	bd08      	pop	{r3, pc}
   d84dc:	00030248 	.word	0x00030248

000d84e0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d84e0:	b508      	push	{r3, lr}
   d84e2:	4b02      	ldr	r3, [pc, #8]	; (d84ec <os_mutex_recursive_create+0xc>)
   d84e4:	681b      	ldr	r3, [r3, #0]
   d84e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d84e8:	9301      	str	r3, [sp, #4]
   d84ea:	bd08      	pop	{r3, pc}
   d84ec:	00030248 	.word	0x00030248

000d84f0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d84f0:	b508      	push	{r3, lr}
   d84f2:	4b02      	ldr	r3, [pc, #8]	; (d84fc <os_mutex_recursive_destroy+0xc>)
   d84f4:	681b      	ldr	r3, [r3, #0]
   d84f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d84f8:	9301      	str	r3, [sp, #4]
   d84fa:	bd08      	pop	{r3, pc}
   d84fc:	00030248 	.word	0x00030248

000d8500 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d8500:	b508      	push	{r3, lr}
   d8502:	4b02      	ldr	r3, [pc, #8]	; (d850c <os_thread_exit+0xc>)
   d8504:	681b      	ldr	r3, [r3, #0]
   d8506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8508:	9301      	str	r3, [sp, #4]
   d850a:	bd08      	pop	{r3, pc}
   d850c:	00030248 	.word	0x00030248

000d8510 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8510:	b508      	push	{r3, lr}
   d8512:	4b02      	ldr	r3, [pc, #8]	; (d851c <os_timer_set_id+0xc>)
   d8514:	681b      	ldr	r3, [r3, #0]
   d8516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8518:	9301      	str	r3, [sp, #4]
   d851a:	bd08      	pop	{r3, pc}
   d851c:	00030248 	.word	0x00030248

000d8520 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d8520:	b508      	push	{r3, lr}
   d8522:	4b02      	ldr	r3, [pc, #8]	; (d852c <HAL_Feature_Set+0xc>)
   d8524:	681b      	ldr	r3, [r3, #0]
   d8526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8528:	9301      	str	r3, [sp, #4]
   d852a:	bd08      	pop	{r3, pc}
   d852c:	00030234 	.word	0x00030234

000d8530 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8530:	b508      	push	{r3, lr}
   d8532:	4b02      	ldr	r3, [pc, #8]	; (d853c <HAL_RNG_GetRandomNumber+0xc>)
   d8534:	681b      	ldr	r3, [r3, #0]
   d8536:	685b      	ldr	r3, [r3, #4]
   d8538:	9301      	str	r3, [sp, #4]
   d853a:	bd08      	pop	{r3, pc}
   d853c:	00030218 	.word	0x00030218

000d8540 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d8540:	b508      	push	{r3, lr}
   d8542:	4b02      	ldr	r3, [pc, #8]	; (d854c <HAL_Delay_Milliseconds+0xc>)
   d8544:	681b      	ldr	r3, [r3, #0]
   d8546:	689b      	ldr	r3, [r3, #8]
   d8548:	9301      	str	r3, [sp, #4]
   d854a:	bd08      	pop	{r3, pc}
   d854c:	00030218 	.word	0x00030218

000d8550 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8550:	b508      	push	{r3, lr}
   d8552:	4b02      	ldr	r3, [pc, #8]	; (d855c <HAL_Delay_Microseconds+0xc>)
   d8554:	681b      	ldr	r3, [r3, #0]
   d8556:	68db      	ldr	r3, [r3, #12]
   d8558:	9301      	str	r3, [sp, #4]
   d855a:	bd08      	pop	{r3, pc}
   d855c:	00030218 	.word	0x00030218

000d8560 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8560:	b508      	push	{r3, lr}
   d8562:	4b02      	ldr	r3, [pc, #8]	; (d856c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8564:	681b      	ldr	r3, [r3, #0]
   d8566:	695b      	ldr	r3, [r3, #20]
   d8568:	9301      	str	r3, [sp, #4]
   d856a:	bd08      	pop	{r3, pc}
   d856c:	00030218 	.word	0x00030218

000d8570 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8570:	b508      	push	{r3, lr}
   d8572:	4b02      	ldr	r3, [pc, #8]	; (d857c <hal_rtc_time_is_valid+0xc>)
   d8574:	681b      	ldr	r3, [r3, #0]
   d8576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8578:	9301      	str	r3, [sp, #4]
   d857a:	bd08      	pop	{r3, pc}
   d857c:	00030218 	.word	0x00030218

000d8580 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d8580:	b508      	push	{r3, lr}
   d8582:	4b02      	ldr	r3, [pc, #8]	; (d858c <hal_timer_millis+0xc>)
   d8584:	681b      	ldr	r3, [r3, #0]
   d8586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8588:	9301      	str	r3, [sp, #4]
   d858a:	bd08      	pop	{r3, pc}
   d858c:	00030218 	.word	0x00030218

000d8590 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8590:	b508      	push	{r3, lr}
   d8592:	4b02      	ldr	r3, [pc, #8]	; (d859c <hal_rtc_get_time+0xc>)
   d8594:	681b      	ldr	r3, [r3, #0]
   d8596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8598:	9301      	str	r3, [sp, #4]
   d859a:	bd08      	pop	{r3, pc}
   d859c:	00030218 	.word	0x00030218

000d85a0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d85a0:	b508      	push	{r3, lr}
   d85a2:	4b02      	ldr	r3, [pc, #8]	; (d85ac <hal_rtc_set_time+0xc>)
   d85a4:	681b      	ldr	r3, [r3, #0]
   d85a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d85a8:	9301      	str	r3, [sp, #4]
   d85aa:	bd08      	pop	{r3, pc}
   d85ac:	00030218 	.word	0x00030218

000d85b0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d85b0:	b508      	push	{r3, lr}
   d85b2:	4b02      	ldr	r3, [pc, #8]	; (d85bc <HAL_Validate_Pin_Function+0xc>)
   d85b4:	681b      	ldr	r3, [r3, #0]
   d85b6:	685b      	ldr	r3, [r3, #4]
   d85b8:	9301      	str	r3, [sp, #4]
   d85ba:	bd08      	pop	{r3, pc}
   d85bc:	0003022c 	.word	0x0003022c

000d85c0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d85c0:	b508      	push	{r3, lr}
   d85c2:	4b02      	ldr	r3, [pc, #8]	; (d85cc <HAL_Pin_Mode+0xc>)
   d85c4:	681b      	ldr	r3, [r3, #0]
   d85c6:	689b      	ldr	r3, [r3, #8]
   d85c8:	9301      	str	r3, [sp, #4]
   d85ca:	bd08      	pop	{r3, pc}
   d85cc:	0003022c 	.word	0x0003022c

000d85d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d85d0:	b508      	push	{r3, lr}
   d85d2:	4b02      	ldr	r3, [pc, #8]	; (d85dc <HAL_Get_Pin_Mode+0xc>)
   d85d4:	681b      	ldr	r3, [r3, #0]
   d85d6:	68db      	ldr	r3, [r3, #12]
   d85d8:	9301      	str	r3, [sp, #4]
   d85da:	bd08      	pop	{r3, pc}
   d85dc:	0003022c 	.word	0x0003022c

000d85e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d85e0:	b508      	push	{r3, lr}
   d85e2:	4b02      	ldr	r3, [pc, #8]	; (d85ec <HAL_GPIO_Write+0xc>)
   d85e4:	681b      	ldr	r3, [r3, #0]
   d85e6:	691b      	ldr	r3, [r3, #16]
   d85e8:	9301      	str	r3, [sp, #4]
   d85ea:	bd08      	pop	{r3, pc}
   d85ec:	0003022c 	.word	0x0003022c

000d85f0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d85f0:	b508      	push	{r3, lr}
   d85f2:	4b02      	ldr	r3, [pc, #8]	; (d85fc <HAL_Interrupts_Attach+0xc>)
   d85f4:	681b      	ldr	r3, [r3, #0]
   d85f6:	699b      	ldr	r3, [r3, #24]
   d85f8:	9301      	str	r3, [sp, #4]
   d85fa:	bd08      	pop	{r3, pc}
   d85fc:	0003022c 	.word	0x0003022c

000d8600 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d8600:	b508      	push	{r3, lr}
   d8602:	4b02      	ldr	r3, [pc, #8]	; (d860c <HAL_Interrupts_Detach+0xc>)
   d8604:	681b      	ldr	r3, [r3, #0]
   d8606:	69db      	ldr	r3, [r3, #28]
   d8608:	9301      	str	r3, [sp, #4]
   d860a:	bd08      	pop	{r3, pc}
   d860c:	0003022c 	.word	0x0003022c

000d8610 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d8610:	b508      	push	{r3, lr}
   d8612:	4b02      	ldr	r3, [pc, #8]	; (d861c <hal_adc_read+0xc>)
   d8614:	681b      	ldr	r3, [r3, #0]
   d8616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8618:	9301      	str	r3, [sp, #4]
   d861a:	bd08      	pop	{r3, pc}
   d861c:	0003022c 	.word	0x0003022c

000d8620 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8620:	b508      	push	{r3, lr}
   d8622:	4b02      	ldr	r3, [pc, #8]	; (d862c <hal_i2c_begin+0xc>)
   d8624:	681b      	ldr	r3, [r3, #0]
   d8626:	68db      	ldr	r3, [r3, #12]
   d8628:	9301      	str	r3, [sp, #4]
   d862a:	bd08      	pop	{r3, pc}
   d862c:	00030228 	.word	0x00030228

000d8630 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8630:	b508      	push	{r3, lr}
   d8632:	4b02      	ldr	r3, [pc, #8]	; (d863c <hal_i2c_begin_transmission+0xc>)
   d8634:	681b      	ldr	r3, [r3, #0]
   d8636:	699b      	ldr	r3, [r3, #24]
   d8638:	9301      	str	r3, [sp, #4]
   d863a:	bd08      	pop	{r3, pc}
   d863c:	00030228 	.word	0x00030228

000d8640 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8640:	b508      	push	{r3, lr}
   d8642:	4b02      	ldr	r3, [pc, #8]	; (d864c <hal_i2c_end_transmission+0xc>)
   d8644:	681b      	ldr	r3, [r3, #0]
   d8646:	69db      	ldr	r3, [r3, #28]
   d8648:	9301      	str	r3, [sp, #4]
   d864a:	bd08      	pop	{r3, pc}
   d864c:	00030228 	.word	0x00030228

000d8650 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8650:	b508      	push	{r3, lr}
   d8652:	4b02      	ldr	r3, [pc, #8]	; (d865c <hal_i2c_write+0xc>)
   d8654:	681b      	ldr	r3, [r3, #0]
   d8656:	6a1b      	ldr	r3, [r3, #32]
   d8658:	9301      	str	r3, [sp, #4]
   d865a:	bd08      	pop	{r3, pc}
   d865c:	00030228 	.word	0x00030228

000d8660 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8660:	b508      	push	{r3, lr}
   d8662:	4b02      	ldr	r3, [pc, #8]	; (d866c <hal_i2c_available+0xc>)
   d8664:	681b      	ldr	r3, [r3, #0]
   d8666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8668:	9301      	str	r3, [sp, #4]
   d866a:	bd08      	pop	{r3, pc}
   d866c:	00030228 	.word	0x00030228

000d8670 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8670:	b508      	push	{r3, lr}
   d8672:	4b02      	ldr	r3, [pc, #8]	; (d867c <hal_i2c_read+0xc>)
   d8674:	681b      	ldr	r3, [r3, #0]
   d8676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8678:	9301      	str	r3, [sp, #4]
   d867a:	bd08      	pop	{r3, pc}
   d867c:	00030228 	.word	0x00030228

000d8680 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8680:	b508      	push	{r3, lr}
   d8682:	4b02      	ldr	r3, [pc, #8]	; (d868c <hal_i2c_peek+0xc>)
   d8684:	681b      	ldr	r3, [r3, #0]
   d8686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8688:	9301      	str	r3, [sp, #4]
   d868a:	bd08      	pop	{r3, pc}
   d868c:	00030228 	.word	0x00030228

000d8690 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8690:	b508      	push	{r3, lr}
   d8692:	4b02      	ldr	r3, [pc, #8]	; (d869c <hal_i2c_flush+0xc>)
   d8694:	681b      	ldr	r3, [r3, #0]
   d8696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8698:	9301      	str	r3, [sp, #4]
   d869a:	bd08      	pop	{r3, pc}
   d869c:	00030228 	.word	0x00030228

000d86a0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d86a0:	b508      	push	{r3, lr}
   d86a2:	4b02      	ldr	r3, [pc, #8]	; (d86ac <hal_i2c_is_enabled+0xc>)
   d86a4:	681b      	ldr	r3, [r3, #0]
   d86a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d86a8:	9301      	str	r3, [sp, #4]
   d86aa:	bd08      	pop	{r3, pc}
   d86ac:	00030228 	.word	0x00030228

000d86b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d86b0:	b508      	push	{r3, lr}
   d86b2:	4b02      	ldr	r3, [pc, #8]	; (d86bc <hal_i2c_init+0xc>)
   d86b4:	681b      	ldr	r3, [r3, #0]
   d86b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d86b8:	9301      	str	r3, [sp, #4]
   d86ba:	bd08      	pop	{r3, pc}
   d86bc:	00030228 	.word	0x00030228

000d86c0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d86c0:	b508      	push	{r3, lr}
   d86c2:	4b02      	ldr	r3, [pc, #8]	; (d86cc <hal_i2c_lock+0xc>)
   d86c4:	681b      	ldr	r3, [r3, #0]
   d86c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d86c8:	9301      	str	r3, [sp, #4]
   d86ca:	bd08      	pop	{r3, pc}
   d86cc:	00030228 	.word	0x00030228

000d86d0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d86d0:	b508      	push	{r3, lr}
   d86d2:	4b02      	ldr	r3, [pc, #8]	; (d86dc <hal_i2c_unlock+0xc>)
   d86d4:	681b      	ldr	r3, [r3, #0]
   d86d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d86d8:	9301      	str	r3, [sp, #4]
   d86da:	bd08      	pop	{r3, pc}
   d86dc:	00030228 	.word	0x00030228

000d86e0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d86e0:	b508      	push	{r3, lr}
   d86e2:	4b02      	ldr	r3, [pc, #8]	; (d86ec <hal_i2c_request_ex+0xc>)
   d86e4:	681b      	ldr	r3, [r3, #0]
   d86e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d86e8:	9301      	str	r3, [sp, #4]
   d86ea:	bd08      	pop	{r3, pc}
   d86ec:	00030228 	.word	0x00030228

000d86f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d86f0:	b508      	push	{r3, lr}
   d86f2:	4b02      	ldr	r3, [pc, #8]	; (d86fc <inet_inet_ntop+0xc>)
   d86f4:	681b      	ldr	r3, [r3, #0]
   d86f6:	695b      	ldr	r3, [r3, #20]
   d86f8:	9301      	str	r3, [sp, #4]
   d86fa:	bd08      	pop	{r3, pc}
   d86fc:	00030264 	.word	0x00030264

000d8700 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8700:	b508      	push	{r3, lr}
   d8702:	4b02      	ldr	r3, [pc, #8]	; (d870c <netdb_freeaddrinfo+0xc>)
   d8704:	681b      	ldr	r3, [r3, #0]
   d8706:	689b      	ldr	r3, [r3, #8]
   d8708:	9301      	str	r3, [sp, #4]
   d870a:	bd08      	pop	{r3, pc}
   d870c:	00030268 	.word	0x00030268

000d8710 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8710:	b508      	push	{r3, lr}
   d8712:	4b02      	ldr	r3, [pc, #8]	; (d871c <netdb_getaddrinfo+0xc>)
   d8714:	681b      	ldr	r3, [r3, #0]
   d8716:	68db      	ldr	r3, [r3, #12]
   d8718:	9301      	str	r3, [sp, #4]
   d871a:	bd08      	pop	{r3, pc}
   d871c:	00030268 	.word	0x00030268

000d8720 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8720:	b508      	push	{r3, lr}
   d8722:	4b02      	ldr	r3, [pc, #8]	; (d872c <hal_spi_init+0xc>)
   d8724:	681b      	ldr	r3, [r3, #0]
   d8726:	69db      	ldr	r3, [r3, #28]
   d8728:	9301      	str	r3, [sp, #4]
   d872a:	bd08      	pop	{r3, pc}
   d872c:	00030230 	.word	0x00030230

000d8730 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8730:	b508      	push	{r3, lr}
   d8732:	4b02      	ldr	r3, [pc, #8]	; (d873c <hal_spi_is_enabled+0xc>)
   d8734:	681b      	ldr	r3, [r3, #0]
   d8736:	6a1b      	ldr	r3, [r3, #32]
   d8738:	9301      	str	r3, [sp, #4]
   d873a:	bd08      	pop	{r3, pc}
   d873c:	00030230 	.word	0x00030230

000d8740 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8740:	b508      	push	{r3, lr}
   d8742:	4b02      	ldr	r3, [pc, #8]	; (d874c <hal_usart_init+0xc>)
   d8744:	681b      	ldr	r3, [r3, #0]
   d8746:	681b      	ldr	r3, [r3, #0]
   d8748:	9301      	str	r3, [sp, #4]
   d874a:	bd08      	pop	{r3, pc}
   d874c:	0003023c 	.word	0x0003023c

000d8750 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8750:	b508      	push	{r3, lr}
   d8752:	4b02      	ldr	r3, [pc, #8]	; (d875c <hal_usart_write+0xc>)
   d8754:	681b      	ldr	r3, [r3, #0]
   d8756:	68db      	ldr	r3, [r3, #12]
   d8758:	9301      	str	r3, [sp, #4]
   d875a:	bd08      	pop	{r3, pc}
   d875c:	0003023c 	.word	0x0003023c

000d8760 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8760:	b508      	push	{r3, lr}
   d8762:	4b02      	ldr	r3, [pc, #8]	; (d876c <hal_usart_available+0xc>)
   d8764:	681b      	ldr	r3, [r3, #0]
   d8766:	691b      	ldr	r3, [r3, #16]
   d8768:	9301      	str	r3, [sp, #4]
   d876a:	bd08      	pop	{r3, pc}
   d876c:	0003023c 	.word	0x0003023c

000d8770 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8770:	b508      	push	{r3, lr}
   d8772:	4b02      	ldr	r3, [pc, #8]	; (d877c <hal_usart_read+0xc>)
   d8774:	681b      	ldr	r3, [r3, #0]
   d8776:	695b      	ldr	r3, [r3, #20]
   d8778:	9301      	str	r3, [sp, #4]
   d877a:	bd08      	pop	{r3, pc}
   d877c:	0003023c 	.word	0x0003023c

000d8780 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8780:	b508      	push	{r3, lr}
   d8782:	4b02      	ldr	r3, [pc, #8]	; (d878c <hal_usart_peek+0xc>)
   d8784:	681b      	ldr	r3, [r3, #0]
   d8786:	699b      	ldr	r3, [r3, #24]
   d8788:	9301      	str	r3, [sp, #4]
   d878a:	bd08      	pop	{r3, pc}
   d878c:	0003023c 	.word	0x0003023c

000d8790 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8790:	b508      	push	{r3, lr}
   d8792:	4b02      	ldr	r3, [pc, #8]	; (d879c <hal_usart_flush+0xc>)
   d8794:	681b      	ldr	r3, [r3, #0]
   d8796:	69db      	ldr	r3, [r3, #28]
   d8798:	9301      	str	r3, [sp, #4]
   d879a:	bd08      	pop	{r3, pc}
   d879c:	0003023c 	.word	0x0003023c

000d87a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d87a0:	b508      	push	{r3, lr}
   d87a2:	4b02      	ldr	r3, [pc, #8]	; (d87ac <hal_usart_is_enabled+0xc>)
   d87a4:	681b      	ldr	r3, [r3, #0]
   d87a6:	6a1b      	ldr	r3, [r3, #32]
   d87a8:	9301      	str	r3, [sp, #4]
   d87aa:	bd08      	pop	{r3, pc}
   d87ac:	0003023c 	.word	0x0003023c

000d87b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d87b0:	b508      	push	{r3, lr}
   d87b2:	4b02      	ldr	r3, [pc, #8]	; (d87bc <hal_usart_available_data_for_write+0xc>)
   d87b4:	681b      	ldr	r3, [r3, #0]
   d87b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d87b8:	9301      	str	r3, [sp, #4]
   d87ba:	bd08      	pop	{r3, pc}
   d87bc:	0003023c 	.word	0x0003023c

000d87c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d87c0:	b508      	push	{r3, lr}
   d87c2:	4b02      	ldr	r3, [pc, #8]	; (d87cc <HAL_USB_USART_Init+0xc>)
   d87c4:	681b      	ldr	r3, [r3, #0]
   d87c6:	681b      	ldr	r3, [r3, #0]
   d87c8:	9301      	str	r3, [sp, #4]
   d87ca:	bd08      	pop	{r3, pc}
   d87cc:	0003024c 	.word	0x0003024c

000d87d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d87d0:	b508      	push	{r3, lr}
   d87d2:	4b02      	ldr	r3, [pc, #8]	; (d87dc <HAL_USB_USART_Available_Data+0xc>)
   d87d4:	681b      	ldr	r3, [r3, #0]
   d87d6:	691b      	ldr	r3, [r3, #16]
   d87d8:	9301      	str	r3, [sp, #4]
   d87da:	bd08      	pop	{r3, pc}
   d87dc:	0003024c 	.word	0x0003024c

000d87e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d87e0:	b508      	push	{r3, lr}
   d87e2:	4b02      	ldr	r3, [pc, #8]	; (d87ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d87e4:	681b      	ldr	r3, [r3, #0]
   d87e6:	695b      	ldr	r3, [r3, #20]
   d87e8:	9301      	str	r3, [sp, #4]
   d87ea:	bd08      	pop	{r3, pc}
   d87ec:	0003024c 	.word	0x0003024c

000d87f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d87f0:	b508      	push	{r3, lr}
   d87f2:	4b02      	ldr	r3, [pc, #8]	; (d87fc <HAL_USB_USART_Receive_Data+0xc>)
   d87f4:	681b      	ldr	r3, [r3, #0]
   d87f6:	699b      	ldr	r3, [r3, #24]
   d87f8:	9301      	str	r3, [sp, #4]
   d87fa:	bd08      	pop	{r3, pc}
   d87fc:	0003024c 	.word	0x0003024c

000d8800 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8800:	b508      	push	{r3, lr}
   d8802:	4b02      	ldr	r3, [pc, #8]	; (d880c <HAL_USB_USART_Send_Data+0xc>)
   d8804:	681b      	ldr	r3, [r3, #0]
   d8806:	69db      	ldr	r3, [r3, #28]
   d8808:	9301      	str	r3, [sp, #4]
   d880a:	bd08      	pop	{r3, pc}
   d880c:	0003024c 	.word	0x0003024c

000d8810 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8810:	b508      	push	{r3, lr}
   d8812:	4b02      	ldr	r3, [pc, #8]	; (d881c <HAL_USB_USART_Flush_Data+0xc>)
   d8814:	681b      	ldr	r3, [r3, #0]
   d8816:	6a1b      	ldr	r3, [r3, #32]
   d8818:	9301      	str	r3, [sp, #4]
   d881a:	bd08      	pop	{r3, pc}
   d881c:	0003024c 	.word	0x0003024c

000d8820 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8820:	b508      	push	{r3, lr}
   d8822:	4b02      	ldr	r3, [pc, #8]	; (d882c <panic_+0xc>)
   d8824:	681b      	ldr	r3, [r3, #0]
   d8826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8828:	9301      	str	r3, [sp, #4]
   d882a:	bd08      	pop	{r3, pc}
   d882c:	00030260 	.word	0x00030260

000d8830 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d8830:	b508      	push	{r3, lr}
   d8832:	4b02      	ldr	r3, [pc, #8]	; (d883c <jsmn_init+0xc>)
   d8834:	681b      	ldr	r3, [r3, #0]
   d8836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8838:	9301      	str	r3, [sp, #4]
   d883a:	bd08      	pop	{r3, pc}
   d883c:	00030260 	.word	0x00030260

000d8840 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d8840:	b508      	push	{r3, lr}
   d8842:	4b02      	ldr	r3, [pc, #8]	; (d884c <jsmn_parse+0xc>)
   d8844:	681b      	ldr	r3, [r3, #0]
   d8846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8848:	9301      	str	r3, [sp, #4]
   d884a:	bd08      	pop	{r3, pc}
   d884c:	00030260 	.word	0x00030260

000d8850 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8850:	b508      	push	{r3, lr}
   d8852:	4b02      	ldr	r3, [pc, #8]	; (d885c <log_message_v+0xc>)
   d8854:	681b      	ldr	r3, [r3, #0]
   d8856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8858:	9301      	str	r3, [sp, #4]
   d885a:	bd08      	pop	{r3, pc}
   d885c:	00030260 	.word	0x00030260

000d8860 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8860:	b508      	push	{r3, lr}
   d8862:	4b02      	ldr	r3, [pc, #8]	; (d886c <system_mode+0xc>)
   d8864:	681b      	ldr	r3, [r3, #0]
   d8866:	681b      	ldr	r3, [r3, #0]
   d8868:	9301      	str	r3, [sp, #4]
   d886a:	bd08      	pop	{r3, pc}
   d886c:	00030220 	.word	0x00030220

000d8870 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8870:	b508      	push	{r3, lr}
   d8872:	4b02      	ldr	r3, [pc, #8]	; (d887c <set_system_mode+0xc>)
   d8874:	681b      	ldr	r3, [r3, #0]
   d8876:	685b      	ldr	r3, [r3, #4]
   d8878:	9301      	str	r3, [sp, #4]
   d887a:	bd08      	pop	{r3, pc}
   d887c:	00030220 	.word	0x00030220

000d8880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8880:	b508      	push	{r3, lr}
   d8882:	4b02      	ldr	r3, [pc, #8]	; (d888c <system_delay_ms+0xc>)
   d8884:	681b      	ldr	r3, [r3, #0]
   d8886:	695b      	ldr	r3, [r3, #20]
   d8888:	9301      	str	r3, [sp, #4]
   d888a:	bd08      	pop	{r3, pc}
   d888c:	00030220 	.word	0x00030220

000d8890 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8890:	b508      	push	{r3, lr}
   d8892:	4b02      	ldr	r3, [pc, #8]	; (d889c <system_thread_set_state+0xc>)
   d8894:	681b      	ldr	r3, [r3, #0]
   d8896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8898:	9301      	str	r3, [sp, #4]
   d889a:	bd08      	pop	{r3, pc}
   d889c:	00030220 	.word	0x00030220

000d88a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d88a0:	b508      	push	{r3, lr}
   d88a2:	4b02      	ldr	r3, [pc, #8]	; (d88ac <application_thread_current+0xc>)
   d88a4:	681b      	ldr	r3, [r3, #0]
   d88a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d88a8:	9301      	str	r3, [sp, #4]
   d88aa:	bd08      	pop	{r3, pc}
   d88ac:	00030220 	.word	0x00030220

000d88b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d88b0:	b508      	push	{r3, lr}
   d88b2:	4b02      	ldr	r3, [pc, #8]	; (d88bc <application_thread_invoke+0xc>)
   d88b4:	681b      	ldr	r3, [r3, #0]
   d88b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d88b8:	9301      	str	r3, [sp, #4]
   d88ba:	bd08      	pop	{r3, pc}
   d88bc:	00030220 	.word	0x00030220

000d88c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d88c0:	b508      	push	{r3, lr}
   d88c2:	4b02      	ldr	r3, [pc, #8]	; (d88cc <system_thread_get_state+0xc>)
   d88c4:	681b      	ldr	r3, [r3, #0]
   d88c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d88c8:	9301      	str	r3, [sp, #4]
   d88ca:	bd08      	pop	{r3, pc}
   d88cc:	00030220 	.word	0x00030220

000d88d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d88d0:	b508      	push	{r3, lr}
   d88d2:	4b02      	ldr	r3, [pc, #8]	; (d88dc <system_notify_time_changed+0xc>)
   d88d4:	681b      	ldr	r3, [r3, #0]
   d88d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d88d8:	9301      	str	r3, [sp, #4]
   d88da:	bd08      	pop	{r3, pc}
   d88dc:	00030220 	.word	0x00030220

000d88e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d88e0:	b508      	push	{r3, lr}
   d88e2:	4b03      	ldr	r3, [pc, #12]	; (d88f0 <system_ctrl_set_app_request_handler+0x10>)
   d88e4:	681b      	ldr	r3, [r3, #0]
   d88e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d88ea:	9301      	str	r3, [sp, #4]
   d88ec:	bd08      	pop	{r3, pc}
   d88ee:	0000      	.short	0x0000
   d88f0:	00030220 	.word	0x00030220

000d88f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d88f4:	b508      	push	{r3, lr}
   d88f6:	4b03      	ldr	r3, [pc, #12]	; (d8904 <system_ctrl_set_result+0x10>)
   d88f8:	681b      	ldr	r3, [r3, #0]
   d88fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d88fe:	9301      	str	r3, [sp, #4]
   d8900:	bd08      	pop	{r3, pc}
   d8902:	0000      	.short	0x0000
   d8904:	00030220 	.word	0x00030220

000d8908 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8908:	b508      	push	{r3, lr}
   d890a:	4b03      	ldr	r3, [pc, #12]	; (d8918 <system_reset+0x10>)
   d890c:	681b      	ldr	r3, [r3, #0]
   d890e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d8912:	9301      	str	r3, [sp, #4]
   d8914:	bd08      	pop	{r3, pc}
   d8916:	0000      	.short	0x0000
   d8918:	00030220 	.word	0x00030220

000d891c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d891c:	b508      	push	{r3, lr}
   d891e:	4b02      	ldr	r3, [pc, #8]	; (d8928 <spark_variable+0xc>)
   d8920:	681b      	ldr	r3, [r3, #0]
   d8922:	681b      	ldr	r3, [r3, #0]
   d8924:	9301      	str	r3, [sp, #4]
   d8926:	bd08      	pop	{r3, pc}
   d8928:	00030244 	.word	0x00030244

000d892c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d892c:	b508      	push	{r3, lr}
   d892e:	4b02      	ldr	r3, [pc, #8]	; (d8938 <spark_function+0xc>)
   d8930:	681b      	ldr	r3, [r3, #0]
   d8932:	685b      	ldr	r3, [r3, #4]
   d8934:	9301      	str	r3, [sp, #4]
   d8936:	bd08      	pop	{r3, pc}
   d8938:	00030244 	.word	0x00030244

000d893c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d893c:	b508      	push	{r3, lr}
   d893e:	4b02      	ldr	r3, [pc, #8]	; (d8948 <spark_process+0xc>)
   d8940:	681b      	ldr	r3, [r3, #0]
   d8942:	689b      	ldr	r3, [r3, #8]
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	bd08      	pop	{r3, pc}
   d8948:	00030244 	.word	0x00030244

000d894c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d894c:	b508      	push	{r3, lr}
   d894e:	4b02      	ldr	r3, [pc, #8]	; (d8958 <spark_cloud_flag_connect+0xc>)
   d8950:	681b      	ldr	r3, [r3, #0]
   d8952:	68db      	ldr	r3, [r3, #12]
   d8954:	9301      	str	r3, [sp, #4]
   d8956:	bd08      	pop	{r3, pc}
   d8958:	00030244 	.word	0x00030244

000d895c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d895c:	b508      	push	{r3, lr}
   d895e:	4b02      	ldr	r3, [pc, #8]	; (d8968 <spark_cloud_flag_connected+0xc>)
   d8960:	681b      	ldr	r3, [r3, #0]
   d8962:	695b      	ldr	r3, [r3, #20]
   d8964:	9301      	str	r3, [sp, #4]
   d8966:	bd08      	pop	{r3, pc}
   d8968:	00030244 	.word	0x00030244

000d896c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d896c:	b508      	push	{r3, lr}
   d896e:	4b02      	ldr	r3, [pc, #8]	; (d8978 <spark_deviceID+0xc>)
   d8970:	681b      	ldr	r3, [r3, #0]
   d8972:	69db      	ldr	r3, [r3, #28]
   d8974:	9301      	str	r3, [sp, #4]
   d8976:	bd08      	pop	{r3, pc}
   d8978:	00030244 	.word	0x00030244

000d897c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d897c:	b508      	push	{r3, lr}
   d897e:	4b02      	ldr	r3, [pc, #8]	; (d8988 <spark_send_event+0xc>)
   d8980:	681b      	ldr	r3, [r3, #0]
   d8982:	6a1b      	ldr	r3, [r3, #32]
   d8984:	9301      	str	r3, [sp, #4]
   d8986:	bd08      	pop	{r3, pc}
   d8988:	00030244 	.word	0x00030244

000d898c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d898c:	b508      	push	{r3, lr}
   d898e:	4b02      	ldr	r3, [pc, #8]	; (d8998 <spark_subscribe+0xc>)
   d8990:	681b      	ldr	r3, [r3, #0]
   d8992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8994:	9301      	str	r3, [sp, #4]
   d8996:	bd08      	pop	{r3, pc}
   d8998:	00030244 	.word	0x00030244

000d899c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d899c:	b508      	push	{r3, lr}
   d899e:	4b02      	ldr	r3, [pc, #8]	; (d89a8 <spark_sync_time+0xc>)
   d89a0:	681b      	ldr	r3, [r3, #0]
   d89a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d89a4:	9301      	str	r3, [sp, #4]
   d89a6:	bd08      	pop	{r3, pc}
   d89a8:	00030244 	.word	0x00030244

000d89ac <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d89ac:	b508      	push	{r3, lr}
   d89ae:	4b02      	ldr	r3, [pc, #8]	; (d89b8 <spark_sync_time_pending+0xc>)
   d89b0:	681b      	ldr	r3, [r3, #0]
   d89b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d89b4:	9301      	str	r3, [sp, #4]
   d89b6:	bd08      	pop	{r3, pc}
   d89b8:	00030244 	.word	0x00030244

000d89bc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d89bc:	b508      	push	{r3, lr}
   d89be:	4b02      	ldr	r3, [pc, #8]	; (d89c8 <spark_sync_time_last+0xc>)
   d89c0:	681b      	ldr	r3, [r3, #0]
   d89c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d89c4:	9301      	str	r3, [sp, #4]
   d89c6:	bd08      	pop	{r3, pc}
   d89c8:	00030244 	.word	0x00030244

000d89cc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d89cc:	b508      	push	{r3, lr}
   d89ce:	4b02      	ldr	r3, [pc, #8]	; (d89d8 <spark_set_connection_property+0xc>)
   d89d0:	681b      	ldr	r3, [r3, #0]
   d89d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d89d4:	9301      	str	r3, [sp, #4]
   d89d6:	bd08      	pop	{r3, pc}
   d89d8:	00030244 	.word	0x00030244

000d89dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d89dc:	b508      	push	{r3, lr}
   d89de:	4b02      	ldr	r3, [pc, #8]	; (d89e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d89e0:	681b      	ldr	r3, [r3, #0]
   d89e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d89e4:	9301      	str	r3, [sp, #4]
   d89e6:	bd08      	pop	{r3, pc}
   d89e8:	00030244 	.word	0x00030244

000d89ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d89ec:	b508      	push	{r3, lr}
   d89ee:	4b02      	ldr	r3, [pc, #8]	; (d89f8 <network_connect+0xc>)
   d89f0:	681b      	ldr	r3, [r3, #0]
   d89f2:	685b      	ldr	r3, [r3, #4]
   d89f4:	9301      	str	r3, [sp, #4]
   d89f6:	bd08      	pop	{r3, pc}
   d89f8:	00030240 	.word	0x00030240

000d89fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d89fc:	b508      	push	{r3, lr}
   d89fe:	4b02      	ldr	r3, [pc, #8]	; (d8a08 <network_connecting+0xc>)
   d8a00:	681b      	ldr	r3, [r3, #0]
   d8a02:	689b      	ldr	r3, [r3, #8]
   d8a04:	9301      	str	r3, [sp, #4]
   d8a06:	bd08      	pop	{r3, pc}
   d8a08:	00030240 	.word	0x00030240

000d8a0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8a0c:	b508      	push	{r3, lr}
   d8a0e:	4b02      	ldr	r3, [pc, #8]	; (d8a18 <network_disconnect+0xc>)
   d8a10:	681b      	ldr	r3, [r3, #0]
   d8a12:	68db      	ldr	r3, [r3, #12]
   d8a14:	9301      	str	r3, [sp, #4]
   d8a16:	bd08      	pop	{r3, pc}
   d8a18:	00030240 	.word	0x00030240

000d8a1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8a1c:	b508      	push	{r3, lr}
   d8a1e:	4b02      	ldr	r3, [pc, #8]	; (d8a28 <network_ready+0xc>)
   d8a20:	681b      	ldr	r3, [r3, #0]
   d8a22:	691b      	ldr	r3, [r3, #16]
   d8a24:	9301      	str	r3, [sp, #4]
   d8a26:	bd08      	pop	{r3, pc}
   d8a28:	00030240 	.word	0x00030240

000d8a2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8a2c:	b508      	push	{r3, lr}
   d8a2e:	4b02      	ldr	r3, [pc, #8]	; (d8a38 <network_on+0xc>)
   d8a30:	681b      	ldr	r3, [r3, #0]
   d8a32:	695b      	ldr	r3, [r3, #20]
   d8a34:	9301      	str	r3, [sp, #4]
   d8a36:	bd08      	pop	{r3, pc}
   d8a38:	00030240 	.word	0x00030240

000d8a3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8a3c:	b508      	push	{r3, lr}
   d8a3e:	4b02      	ldr	r3, [pc, #8]	; (d8a48 <network_off+0xc>)
   d8a40:	681b      	ldr	r3, [r3, #0]
   d8a42:	699b      	ldr	r3, [r3, #24]
   d8a44:	9301      	str	r3, [sp, #4]
   d8a46:	bd08      	pop	{r3, pc}
   d8a48:	00030240 	.word	0x00030240

000d8a4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8a4c:	b508      	push	{r3, lr}
   d8a4e:	4b02      	ldr	r3, [pc, #8]	; (d8a58 <network_listen+0xc>)
   d8a50:	681b      	ldr	r3, [r3, #0]
   d8a52:	69db      	ldr	r3, [r3, #28]
   d8a54:	9301      	str	r3, [sp, #4]
   d8a56:	bd08      	pop	{r3, pc}
   d8a58:	00030240 	.word	0x00030240

000d8a5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8a5c:	b508      	push	{r3, lr}
   d8a5e:	4b02      	ldr	r3, [pc, #8]	; (d8a68 <network_listening+0xc>)
   d8a60:	681b      	ldr	r3, [r3, #0]
   d8a62:	6a1b      	ldr	r3, [r3, #32]
   d8a64:	9301      	str	r3, [sp, #4]
   d8a66:	bd08      	pop	{r3, pc}
   d8a68:	00030240 	.word	0x00030240

000d8a6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8a6c:	b508      	push	{r3, lr}
   d8a6e:	4b02      	ldr	r3, [pc, #8]	; (d8a78 <network_set_listen_timeout+0xc>)
   d8a70:	681b      	ldr	r3, [r3, #0]
   d8a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a74:	9301      	str	r3, [sp, #4]
   d8a76:	bd08      	pop	{r3, pc}
   d8a78:	00030240 	.word	0x00030240

000d8a7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8a7c:	b508      	push	{r3, lr}
   d8a7e:	4b02      	ldr	r3, [pc, #8]	; (d8a88 <network_get_listen_timeout+0xc>)
   d8a80:	681b      	ldr	r3, [r3, #0]
   d8a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8a84:	9301      	str	r3, [sp, #4]
   d8a86:	bd08      	pop	{r3, pc}
   d8a88:	00030240 	.word	0x00030240

000d8a8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8a8c:	b508      	push	{r3, lr}
   d8a8e:	4b02      	ldr	r3, [pc, #8]	; (d8a98 <network_is_on+0xc>)
   d8a90:	681b      	ldr	r3, [r3, #0]
   d8a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8a94:	9301      	str	r3, [sp, #4]
   d8a96:	bd08      	pop	{r3, pc}
   d8a98:	00030240 	.word	0x00030240

000d8a9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8a9c:	b508      	push	{r3, lr}
   d8a9e:	4b02      	ldr	r3, [pc, #8]	; (d8aa8 <network_is_off+0xc>)
   d8aa0:	681b      	ldr	r3, [r3, #0]
   d8aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8aa4:	9301      	str	r3, [sp, #4]
   d8aa6:	bd08      	pop	{r3, pc}
   d8aa8:	00030240 	.word	0x00030240

000d8aac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8aac:	b508      	push	{r3, lr}
   d8aae:	4b02      	ldr	r3, [pc, #8]	; (d8ab8 <malloc+0xc>)
   d8ab0:	681b      	ldr	r3, [r3, #0]
   d8ab2:	681b      	ldr	r3, [r3, #0]
   d8ab4:	9301      	str	r3, [sp, #4]
   d8ab6:	bd08      	pop	{r3, pc}
   d8ab8:	0003021c 	.word	0x0003021c

000d8abc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8abc:	b508      	push	{r3, lr}
   d8abe:	4b02      	ldr	r3, [pc, #8]	; (d8ac8 <free+0xc>)
   d8ac0:	681b      	ldr	r3, [r3, #0]
   d8ac2:	685b      	ldr	r3, [r3, #4]
   d8ac4:	9301      	str	r3, [sp, #4]
   d8ac6:	bd08      	pop	{r3, pc}
   d8ac8:	0003021c 	.word	0x0003021c

000d8acc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8acc:	b508      	push	{r3, lr}
   d8ace:	4b02      	ldr	r3, [pc, #8]	; (d8ad8 <realloc+0xc>)
   d8ad0:	681b      	ldr	r3, [r3, #0]
   d8ad2:	689b      	ldr	r3, [r3, #8]
   d8ad4:	9301      	str	r3, [sp, #4]
   d8ad6:	bd08      	pop	{r3, pc}
   d8ad8:	0003021c 	.word	0x0003021c

000d8adc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8adc:	b508      	push	{r3, lr}
   d8ade:	4b02      	ldr	r3, [pc, #8]	; (d8ae8 <siprintf+0xc>)
   d8ae0:	681b      	ldr	r3, [r3, #0]
   d8ae2:	691b      	ldr	r3, [r3, #16]
   d8ae4:	9301      	str	r3, [sp, #4]
   d8ae6:	bd08      	pop	{r3, pc}
   d8ae8:	0003021c 	.word	0x0003021c

000d8aec <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8aec:	b508      	push	{r3, lr}
   d8aee:	4b02      	ldr	r3, [pc, #8]	; (d8af8 <snprintf+0xc>)
   d8af0:	681b      	ldr	r3, [r3, #0]
   d8af2:	69db      	ldr	r3, [r3, #28]
   d8af4:	9301      	str	r3, [sp, #4]
   d8af6:	bd08      	pop	{r3, pc}
   d8af8:	0003021c 	.word	0x0003021c

000d8afc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8afc:	b508      	push	{r3, lr}
   d8afe:	4b02      	ldr	r3, [pc, #8]	; (d8b08 <vsnprintf+0xc>)
   d8b00:	681b      	ldr	r3, [r3, #0]
   d8b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8b04:	9301      	str	r3, [sp, #4]
   d8b06:	bd08      	pop	{r3, pc}
   d8b08:	0003021c 	.word	0x0003021c

000d8b0c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8b0c:	b508      	push	{r3, lr}
   d8b0e:	4b02      	ldr	r3, [pc, #8]	; (d8b18 <abort+0xc>)
   d8b10:	681b      	ldr	r3, [r3, #0]
   d8b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8b14:	9301      	str	r3, [sp, #4]
   d8b16:	bd08      	pop	{r3, pc}
   d8b18:	0003021c 	.word	0x0003021c

000d8b1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8b1c:	b508      	push	{r3, lr}
   d8b1e:	4b02      	ldr	r3, [pc, #8]	; (d8b28 <_malloc_r+0xc>)
   d8b20:	681b      	ldr	r3, [r3, #0]
   d8b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8b24:	9301      	str	r3, [sp, #4]
   d8b26:	bd08      	pop	{r3, pc}
   d8b28:	0003021c 	.word	0x0003021c

000d8b2c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8b2c:	b508      	push	{r3, lr}
   d8b2e:	4b02      	ldr	r3, [pc, #8]	; (d8b38 <__errno+0xc>)
   d8b30:	681b      	ldr	r3, [r3, #0]
   d8b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8b34:	9301      	str	r3, [sp, #4]
   d8b36:	bd08      	pop	{r3, pc}
   d8b38:	0003021c 	.word	0x0003021c

000d8b3c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8b3c:	b508      	push	{r3, lr}
   d8b3e:	4b02      	ldr	r3, [pc, #8]	; (d8b48 <newlib_impure_ptr_callback+0xc>)
   d8b40:	681b      	ldr	r3, [r3, #0]
   d8b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8b44:	9301      	str	r3, [sp, #4]
   d8b46:	bd08      	pop	{r3, pc}
   d8b48:	0003021c 	.word	0x0003021c

000d8b4c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8b4c:	b508      	push	{r3, lr}
   d8b4e:	4b02      	ldr	r3, [pc, #8]	; (d8b58 <strftime+0xc>)
   d8b50:	681b      	ldr	r3, [r3, #0]
   d8b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8b54:	9301      	str	r3, [sp, #4]
   d8b56:	bd08      	pop	{r3, pc}
   d8b58:	0003021c 	.word	0x0003021c

000d8b5c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8b5c:	b508      	push	{r3, lr}
   d8b5e:	4b02      	ldr	r3, [pc, #8]	; (d8b68 <localtime_r+0xc>)
   d8b60:	681b      	ldr	r3, [r3, #0]
   d8b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8b64:	9301      	str	r3, [sp, #4]
   d8b66:	bd08      	pop	{r3, pc}
   d8b68:	0003021c 	.word	0x0003021c

000d8b6c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8b6c:	b508      	push	{r3, lr}
   d8b6e:	4b02      	ldr	r3, [pc, #8]	; (d8b78 <gmtime_r+0xc>)
   d8b70:	681b      	ldr	r3, [r3, #0]
   d8b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8b74:	9301      	str	r3, [sp, #4]
   d8b76:	bd08      	pop	{r3, pc}
   d8b78:	0003021c 	.word	0x0003021c

000d8b7c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8b7c:	b508      	push	{r3, lr}
   d8b7e:	4b02      	ldr	r3, [pc, #8]	; (d8b88 <mktime+0xc>)
   d8b80:	681b      	ldr	r3, [r3, #0]
   d8b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8b84:	9301      	str	r3, [sp, #4]
   d8b86:	bd08      	pop	{r3, pc}
   d8b88:	0003021c 	.word	0x0003021c

000d8b8c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8b8c:	2100      	movs	r1, #0
   d8b8e:	f7ff be77 	b.w	d8880 <system_delay_ms>

000d8b92 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8b92:	b510      	push	{r4, lr}
      if (_M_empty())
   d8b94:	6883      	ldr	r3, [r0, #8]
   d8b96:	4604      	mov	r4, r0
   d8b98:	b90b      	cbnz	r3, d8b9e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8b9a:	f001 fe9e 	bl	da8da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8b9e:	68c3      	ldr	r3, [r0, #12]
   d8ba0:	4798      	blx	r3
      if (_M_manager)
   d8ba2:	68a3      	ldr	r3, [r4, #8]
   d8ba4:	b11b      	cbz	r3, d8bae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8ba6:	2203      	movs	r2, #3
   d8ba8:	4621      	mov	r1, r4
   d8baa:	4620      	mov	r0, r4
   d8bac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8bae:	4620      	mov	r0, r4
   d8bb0:	2110      	movs	r1, #16
}
   d8bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8bb6:	f001 be8a 	b.w	da8ce <_ZdlPvj>

000d8bba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8bba:	b510      	push	{r4, lr}
   d8bbc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8bbe:	6800      	ldr	r0, [r0, #0]
   d8bc0:	b108      	cbz	r0, d8bc6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8bc2:	f7ff fc95 	bl	d84f0 <os_mutex_recursive_destroy>
    }
   d8bc6:	4620      	mov	r0, r4
   d8bc8:	bd10      	pop	{r4, pc}
	...

000d8bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d8bcc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d8bce:	4c06      	ldr	r4, [pc, #24]	; (d8be8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8bd0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8bd2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8bd4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8bd6:	f7ff fc83 	bl	d84e0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8bda:	4620      	mov	r0, r4
   d8bdc:	4a03      	ldr	r2, [pc, #12]	; (d8bec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8bde:	4904      	ldr	r1, [pc, #16]	; (d8bf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8be4:	f001 be6e 	b.w	da8c4 <__aeabi_atexit>
   d8be8:	2003e60c 	.word	0x2003e60c
   d8bec:	2003dee0 	.word	0x2003dee0
   d8bf0:	000d8bbb 	.word	0x000d8bbb

000d8bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8bf4:	4770      	bx	lr

000d8bf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8bf6:	2000      	movs	r0, #0
   d8bf8:	4770      	bx	lr

000d8bfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8bfa:	b510      	push	{r4, lr}
   d8bfc:	2110      	movs	r1, #16
   d8bfe:	4604      	mov	r4, r0
   d8c00:	f001 fe65 	bl	da8ce <_ZdlPvj>
   d8c04:	4620      	mov	r0, r4
   d8c06:	bd10      	pop	{r4, pc}

000d8c08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8c08:	b508      	push	{r3, lr}
      { delete this; }
   d8c0a:	f7ff fff6 	bl	d8bfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8c0e:	bd08      	pop	{r3, pc}

000d8c10 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8c10:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8c12:	2200      	movs	r2, #0
   d8c14:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8c18:	6002      	str	r2, [r0, #0]
   d8c1a:	8084      	strh	r4, [r0, #4]
   d8c1c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c1e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8c20:	680c      	ldr	r4, [r1, #0]
   d8c22:	8085      	strh	r5, [r0, #4]
   d8c24:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c26:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8c28:	bd30      	pop	{r4, r5, pc}

000d8c2a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8c2a:	b510      	push	{r4, lr}
   d8c2c:	4604      	mov	r4, r0
    free((void*)msg_);
   d8c2e:	6800      	ldr	r0, [r0, #0]
   d8c30:	f7ff ff44 	bl	d8abc <free>
}
   d8c34:	4620      	mov	r0, r4
   d8c36:	bd10      	pop	{r4, pc}

000d8c38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8c38:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8c3a:	68c4      	ldr	r4, [r0, #12]
   d8c3c:	b1f4      	cbz	r4, d8c7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8c3e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8c40:	2b02      	cmp	r3, #2
   d8c42:	d103      	bne.n	d8c4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8c44:	f104 000c 	add.w	r0, r4, #12
   d8c48:	f7ff ffef 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8c4c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8c4e:	b135      	cbz	r5, d8c5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8c50:	4628      	mov	r0, r5
   d8c52:	f7fb fb1a 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d8c56:	2110      	movs	r1, #16
   d8c58:	4628      	mov	r0, r5
   d8c5a:	f001 fe38 	bl	da8ce <_ZdlPvj>
   d8c5e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8c60:	b135      	cbz	r5, d8c70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8c62:	4628      	mov	r0, r5
   d8c64:	f7fb fb11 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d8c68:	2110      	movs	r1, #16
   d8c6a:	4628      	mov	r0, r5
   d8c6c:	f001 fe2f 	bl	da8ce <_ZdlPvj>
   d8c70:	4620      	mov	r0, r4
   d8c72:	2114      	movs	r1, #20
   d8c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8c78:	f001 be29 	b.w	da8ce <_ZdlPvj>
   d8c7c:	bd38      	pop	{r3, r4, r5, pc}

000d8c7e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8c7e:	b510      	push	{r4, lr}
   d8c80:	b088      	sub	sp, #32
   d8c82:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8c84:	4668      	mov	r0, sp
   d8c86:	f001 f8ac 	bl	d9de2 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8c8a:	4669      	mov	r1, sp
   d8c8c:	a804      	add	r0, sp, #16
   d8c8e:	f001 f8cb 	bl	d9e28 <_ZN6StringC1ERKS_>
   d8c92:	a804      	add	r0, sp, #16
   d8c94:	47a0      	blx	r4
   d8c96:	4604      	mov	r4, r0
   d8c98:	a804      	add	r0, sp, #16
   d8c9a:	f001 f857 	bl	d9d4c <_ZN6StringD1Ev>
    String p(param);
   d8c9e:	4668      	mov	r0, sp
   d8ca0:	f001 f854 	bl	d9d4c <_ZN6StringD1Ev>
}
   d8ca4:	4620      	mov	r0, r4
   d8ca6:	b008      	add	sp, #32
   d8ca8:	bd10      	pop	{r4, pc}

000d8caa <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d8caa:	b507      	push	{r0, r1, r2, lr}
   d8cac:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d8cb0:	6882      	ldr	r2, [r0, #8]
   d8cb2:	b90a      	cbnz	r2, d8cb8 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d8cb4:	f001 fe11 	bl	da8da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8cb8:	68c3      	ldr	r3, [r0, #12]
   d8cba:	aa01      	add	r2, sp, #4
   d8cbc:	4669      	mov	r1, sp
   d8cbe:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d8cc0:	b003      	add	sp, #12
   d8cc2:	f85d fb04 	ldr.w	pc, [sp], #4

000d8cc6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8cc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8cc8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8cce:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8cd0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8cd2:	461a      	mov	r2, r3
   d8cd4:	4669      	mov	r1, sp
   d8cd6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8cd8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8cdc:	f8ad 4000 	strh.w	r4, [sp]
   d8ce0:	f7ff fe24 	bl	d892c <spark_function>
}
   d8ce4:	b004      	add	sp, #16
   d8ce6:	bd10      	pop	{r4, pc}

000d8ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8cea:	460e      	mov	r6, r1
   d8cec:	4604      	mov	r4, r0
   d8cee:	f856 3b04 	ldr.w	r3, [r6], #4
   d8cf2:	9300      	str	r3, [sp, #0]
   d8cf4:	460d      	mov	r5, r1
   d8cf6:	a801      	add	r0, sp, #4
   d8cf8:	4631      	mov	r1, r6
   d8cfa:	f7fd fecf 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8cfe:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8d00:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8d02:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8d04:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8d06:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8d08:	2300      	movs	r3, #0
   d8d0a:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d8d0c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8d0e:	f7fd f87f 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d12:	4630      	mov	r0, r6
   d8d14:	f7fd f87c 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8d18:	4628      	mov	r0, r5
   d8d1a:	2108      	movs	r1, #8
   d8d1c:	f001 fdd7 	bl	da8ce <_ZdlPvj>
        return p;
    }
   d8d20:	4620      	mov	r0, r4
   d8d22:	b002      	add	sp, #8
   d8d24:	bd70      	pop	{r4, r5, r6, pc}

000d8d26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8d26:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8d28:	b510      	push	{r4, lr}
      if (_M_empty())
   d8d2a:	b90a      	cbnz	r2, d8d30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8d2c:	f001 fdd5 	bl	da8da <_ZSt25__throw_bad_function_callv>
    }
   d8d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8d34:	68c3      	ldr	r3, [r0, #12]
   d8d36:	4718      	bx	r3

000d8d38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8d38:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8d3a:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8d3c:	f100 0110 	add.w	r1, r0, #16
   d8d40:	f7ff fff1 	bl	d8d26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8d44:	bd08      	pop	{r3, pc}

000d8d46 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8d46:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8d48:	b510      	push	{r4, lr}
      if (_M_empty())
   d8d4a:	b90a      	cbnz	r2, d8d50 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8d4c:	f001 fdc5 	bl	da8da <_ZSt25__throw_bad_function_callv>
    }
   d8d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8d54:	68c3      	ldr	r3, [r0, #12]
   d8d56:	4718      	bx	r3

000d8d58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8d58:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8d5a:	6800      	ldr	r0, [r0, #0]
   d8d5c:	f100 0110 	add.w	r1, r0, #16
   d8d60:	f7ff fff1 	bl	d8d46 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8d64:	bd08      	pop	{r3, pc}
	...

000d8d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8d68:	b538      	push	{r3, r4, r5, lr}
   d8d6a:	2300      	movs	r3, #0
   d8d6c:	4604      	mov	r4, r0
   d8d6e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d70:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8d72:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d74:	f7fb f98f 	bl	d4096 <_Znwj>
   d8d78:	b128      	cbz	r0, d8d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8d7a:	2301      	movs	r3, #1
   d8d7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8d80:	4b02      	ldr	r3, [pc, #8]	; (d8d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8d82:	6003      	str	r3, [r0, #0]
   d8d84:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d86:	6020      	str	r0, [r4, #0]
	}
   d8d88:	4620      	mov	r0, r4
   d8d8a:	bd38      	pop	{r3, r4, r5, pc}
   d8d8c:	000de12c 	.word	0x000de12c

000d8d90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8d90:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8d92:	2300      	movs	r3, #0
   d8d94:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8d96:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8d98:	4604      	mov	r4, r0
   d8d9a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8d9c:	b12b      	cbz	r3, d8daa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8d9e:	2202      	movs	r2, #2
   d8da0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8da2:	68eb      	ldr	r3, [r5, #12]
   d8da4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8da6:	68ab      	ldr	r3, [r5, #8]
   d8da8:	60a3      	str	r3, [r4, #8]
    }
   d8daa:	4620      	mov	r0, r4
   d8dac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8db2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8db4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8db6:	4668      	mov	r0, sp
   d8db8:	f7ff ff2a 	bl	d8c10 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8dbc:	f04f 0302 	mov.w	r3, #2
   d8dc0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8dc4:	2a00      	cmp	r2, #0
   d8dc6:	d103      	bne.n	d8dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8dc8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8dcc:	2900      	cmp	r1, #0
   d8dce:	d1f7      	bne.n	d8dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8dd0:	d125      	bne.n	d8e1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8dd2:	f104 050c 	add.w	r5, r4, #12
   d8dd6:	4669      	mov	r1, sp
   d8dd8:	4628      	mov	r0, r5
   d8dda:	f7ff ff19 	bl	d8c10 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8dde:	f3bf 8f5b 	dmb	ish
   d8de2:	2301      	movs	r3, #1
   d8de4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8de6:	2000      	movs	r0, #0
   d8de8:	f104 0308 	add.w	r3, r4, #8
   d8dec:	f3bf 8f5b 	dmb	ish
   d8df0:	e853 6f00 	ldrex	r6, [r3]
   d8df4:	e843 0200 	strex	r2, r0, [r3]
   d8df8:	2a00      	cmp	r2, #0
   d8dfa:	d1f9      	bne.n	d8df0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8dfc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8e00:	b16e      	cbz	r6, d8e1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8e02:	f7ff fd4d 	bl	d88a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8e06:	b178      	cbz	r0, d8e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8e08:	4629      	mov	r1, r5
   d8e0a:	4630      	mov	r0, r6
   d8e0c:	f7ff ff8b 	bl	d8d26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8e10:	4630      	mov	r0, r6
   d8e12:	f7fb fa3a 	bl	d428a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8e16:	2110      	movs	r1, #16
   d8e18:	4630      	mov	r0, r6
   d8e1a:	f001 fd58 	bl	da8ce <_ZdlPvj>
        p_->setError(std::move(error));
   d8e1e:	4668      	mov	r0, sp
   d8e20:	f7ff ff03 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
    }
   d8e24:	b009      	add	sp, #36	; 0x24
   d8e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8e28:	4631      	mov	r1, r6
   d8e2a:	a802      	add	r0, sp, #8
   d8e2c:	f7ff ffb0 	bl	d8d90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8e30:	68e0      	ldr	r0, [r4, #12]
   d8e32:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8e36:	b108      	cbz	r0, d8e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8e38:	f002 fc24 	bl	db684 <strdup>
        type_(type) {
   d8e3c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8e3e:	2010      	movs	r0, #16
   d8e40:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8e44:	f7fb f927 	bl	d4096 <_Znwj>
   d8e48:	4605      	mov	r5, r0
   d8e4a:	b1e8      	cbz	r0, d8e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8e4c:	2700      	movs	r7, #0
   d8e4e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e50:	2018      	movs	r0, #24
   d8e52:	f7fb f920 	bl	d4096 <_Znwj>
   d8e56:	4604      	mov	r4, r0
   d8e58:	b188      	cbz	r0, d8e7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8e5a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8e5c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8e5e:	a802      	add	r0, sp, #8
   d8e60:	f7fd f86e 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e64:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8e66:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8e6c:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8e6e:	a906      	add	r1, sp, #24
   d8e70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e72:	60e3      	str	r3, [r4, #12]
   d8e74:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8e78:	9205      	str	r2, [sp, #20]
   d8e7a:	f7ff fec9 	bl	d8c10 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8e7e:	4b08      	ldr	r3, [pc, #32]	; (d8ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8e80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8e82:	4b08      	ldr	r3, [pc, #32]	; (d8ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e84:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8e86:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8e88:	a806      	add	r0, sp, #24
   d8e8a:	f7ff fece 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8e8e:	a802      	add	r0, sp, #8
   d8e90:	f7fb f9fb 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8e94:	2200      	movs	r2, #0
   d8e96:	4629      	mov	r1, r5
   d8e98:	4803      	ldr	r0, [pc, #12]	; (d8ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8e9a:	f7ff fd09 	bl	d88b0 <application_thread_invoke>
   d8e9e:	e7b7      	b.n	d8e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8ea0:	000d8d39 	.word	0x000d8d39
   d8ea4:	000d8fd1 	.word	0x000d8fd1
   d8ea8:	000d8b93 	.word	0x000d8b93

000d8eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8eb0:	b08a      	sub	sp, #40	; 0x28
   d8eb2:	4605      	mov	r5, r0
   d8eb4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8eb8:	460c      	mov	r4, r1
   d8eba:	4617      	mov	r7, r2
   d8ebc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8ebe:	f7ff fd4d 	bl	d895c <spark_cloud_flag_connected>
   d8ec2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8ec4:	4682      	mov	sl, r0
   d8ec6:	bb38      	cbnz	r0, d8f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8ec8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8ecc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8ece:	a905      	add	r1, sp, #20
   d8ed0:	4630      	mov	r0, r6
   d8ed2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8ed6:	f7ff fe9b 	bl	d8c10 <_ZN8particle5ErrorC1EOS0_>
   d8eda:	2014      	movs	r0, #20
   d8edc:	f7fb f8db 	bl	d4096 <_Znwj>
   d8ee0:	4604      	mov	r4, r0
   d8ee2:	b148      	cbz	r0, d8ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8ee4:	2302      	movs	r3, #2
   d8ee6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ee8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8eea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8eee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8ef0:	4631      	mov	r1, r6
   d8ef2:	300c      	adds	r0, #12
   d8ef4:	f7ff fe8c 	bl	d8c10 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ef8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8efa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8efc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8f00:	f7ff ff32 	bl	d8d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8f04:	4630      	mov	r0, r6
   d8f06:	f7ff fe90 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8f0a:	a805      	add	r0, sp, #20
   d8f0c:	f7ff fe8d 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8f10:	4628      	mov	r0, r5
   d8f12:	b00a      	add	sp, #40	; 0x28
   d8f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8f18:	230c      	movs	r3, #12
   d8f1a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8f1e:	2014      	movs	r0, #20
   d8f20:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8f24:	9307      	str	r3, [sp, #28]
   d8f26:	f7fb f8b6 	bl	d4096 <_Znwj>
   d8f2a:	4601      	mov	r1, r0
   d8f2c:	b128      	cbz	r0, d8f3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8f2e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8f32:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8f36:	f880 a001 	strb.w	sl, [r0, #1]
   d8f3a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8f3c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8f3e:	f7ff ff13 	bl	d8d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8f42:	4b22      	ldr	r3, [pc, #136]	; (d8fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8f44:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8f46:	2008      	movs	r0, #8
   d8f48:	f7fb f8a5 	bl	d4096 <_Znwj>
   d8f4c:	4682      	mov	sl, r0
   d8f4e:	b128      	cbz	r0, d8f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f50:	9b03      	ldr	r3, [sp, #12]
   d8f52:	f840 3b04 	str.w	r3, [r0], #4
   d8f56:	a904      	add	r1, sp, #16
   d8f58:	f7fd fda0 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8f5c:	9600      	str	r6, [sp, #0]
   d8f5e:	fa5f f389 	uxtb.w	r3, r9
   d8f62:	4642      	mov	r2, r8
   d8f64:	4639      	mov	r1, r7
   d8f66:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8f68:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8f6c:	f7ff fd06 	bl	d897c <spark_send_event>
   d8f70:	b9b8      	cbnz	r0, d8fa2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8f72:	9b03      	ldr	r3, [sp, #12]
   d8f74:	785b      	ldrb	r3, [r3, #1]
   d8f76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8f7a:	b993      	cbnz	r3, d8fa2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8f7c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8f80:	a905      	add	r1, sp, #20
   d8f82:	a803      	add	r0, sp, #12
   d8f84:	9205      	str	r2, [sp, #20]
   d8f86:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8f8a:	f7ff ff11 	bl	d8db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8f8e:	a805      	add	r0, sp, #20
   d8f90:	f7ff fe4b 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8f94:	a805      	add	r0, sp, #20
   d8f96:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f98:	f7ff fea6 	bl	d8ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8f9c:	a806      	add	r0, sp, #24
   d8f9e:	f7fc ff37 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8fa2:	9b03      	ldr	r3, [sp, #12]
   d8fa4:	9305      	str	r3, [sp, #20]
   d8fa6:	a904      	add	r1, sp, #16
   d8fa8:	a806      	add	r0, sp, #24
   d8faa:	f7fd fd77 	bl	d6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8fae:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8fb0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8fb2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8fb4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8fb6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8fb8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8fba:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8fbc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8fbe:	f7fc ff27 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8fc2:	a804      	add	r0, sp, #16
   d8fc4:	f7fc ff24 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8fc8:	e7a2      	b.n	d8f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8fca:	bf00      	nop
   d8fcc:	000d9095 	.word	0x000d9095

000d8fd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8fd0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fd4:	4605      	mov	r5, r0
	  switch (__op)
   d8fd6:	d007      	beq.n	d8fe8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8fd8:	2a03      	cmp	r2, #3
   d8fda:	d018      	beq.n	d900e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8fdc:	2a01      	cmp	r2, #1
   d8fde:	d101      	bne.n	d8fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8fe0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8fe2:	6003      	str	r3, [r0, #0]
	}
   d8fe4:	2000      	movs	r0, #0
   d8fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8fe8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8fea:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8fec:	f7fb f853 	bl	d4096 <_Znwj>
   d8ff0:	4604      	mov	r4, r0
   d8ff2:	b150      	cbz	r0, d900a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d8ff4:	4631      	mov	r1, r6
   d8ff6:	f7ff fecb 	bl	d8d90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8ffa:	6930      	ldr	r0, [r6, #16]
   d8ffc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9000:	b108      	cbz	r0, d9006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d9002:	f002 fb3f 	bl	db684 <strdup>
        type_(type) {
   d9006:	6120      	str	r0, [r4, #16]
   d9008:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d900a:	602c      	str	r4, [r5, #0]
	}
   d900c:	e7ea      	b.n	d8fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d900e:	6804      	ldr	r4, [r0, #0]
   d9010:	2c00      	cmp	r4, #0
   d9012:	d0e7      	beq.n	d8fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9014:	f104 0010 	add.w	r0, r4, #16
   d9018:	f7ff fe07 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d901c:	4620      	mov	r0, r4
   d901e:	f7fb f934 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9022:	2118      	movs	r1, #24
   d9024:	4620      	mov	r0, r4
   d9026:	f001 fc52 	bl	da8ce <_ZdlPvj>
   d902a:	e7db      	b.n	d8fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d902c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d902c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d902e:	2300      	movs	r3, #0
   d9030:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9032:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9034:	4604      	mov	r4, r0
   d9036:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9038:	b12b      	cbz	r3, d9046 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d903a:	2202      	movs	r2, #2
   d903c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d903e:	68eb      	ldr	r3, [r5, #12]
   d9040:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9042:	68ab      	ldr	r3, [r5, #8]
   d9044:	60a3      	str	r3, [r4, #8]
    }
   d9046:	4620      	mov	r0, r4
   d9048:	bd38      	pop	{r3, r4, r5, pc}

000d904a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d904a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d904c:	b570      	push	{r4, r5, r6, lr}
   d904e:	4604      	mov	r4, r0
	  switch (__op)
   d9050:	d007      	beq.n	d9062 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d9052:	2a03      	cmp	r2, #3
   d9054:	d012      	beq.n	d907c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d9056:	2a01      	cmp	r2, #1
   d9058:	d101      	bne.n	d905e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d905a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d905c:	6003      	str	r3, [r0, #0]
	}
   d905e:	2000      	movs	r0, #0
   d9060:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9062:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9064:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9066:	f7fb f816 	bl	d4096 <_Znwj>
   d906a:	4605      	mov	r5, r0
   d906c:	b120      	cbz	r0, d9078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d906e:	4631      	mov	r1, r6
   d9070:	f7ff ffdc 	bl	d902c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9074:	7c33      	ldrb	r3, [r6, #16]
   d9076:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9078:	6025      	str	r5, [r4, #0]
	}
   d907a:	e7f0      	b.n	d905e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d907c:	6804      	ldr	r4, [r0, #0]
   d907e:	2c00      	cmp	r4, #0
   d9080:	d0ed      	beq.n	d905e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d9082:	4620      	mov	r0, r4
   d9084:	f7fb f901 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9088:	2114      	movs	r1, #20
   d908a:	4620      	mov	r0, r4
   d908c:	f001 fc1f 	bl	da8ce <_ZdlPvj>
   d9090:	e7e5      	b.n	d905e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d9094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9094:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9096:	b089      	sub	sp, #36	; 0x24
   d9098:	4604      	mov	r4, r0
   d909a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d909c:	a801      	add	r0, sp, #4
   d909e:	4611      	mov	r1, r2
   d90a0:	f7ff fe22 	bl	d8ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d90a4:	b1a4      	cbz	r4, d90d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d90a6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d90a8:	b11d      	cbz	r5, d90b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d90aa:	4628      	mov	r0, r5
   d90ac:	f002 faea 	bl	db684 <strdup>
   d90b0:	4605      	mov	r5, r0
   d90b2:	a801      	add	r0, sp, #4
   d90b4:	a903      	add	r1, sp, #12
        type_(type) {
   d90b6:	9503      	str	r5, [sp, #12]
   d90b8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d90bc:	f7ff fe78 	bl	d8db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d90c0:	a803      	add	r0, sp, #12
   d90c2:	f7ff fdb2 	bl	d8c2a <_ZN8particle5ErrorD1Ev>
   d90c6:	a802      	add	r0, sp, #8
   d90c8:	f7fc fea2 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d90cc:	b009      	add	sp, #36	; 0x24
   d90ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d90d0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d90d2:	2301      	movs	r3, #1
   d90d4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d90d8:	2a00      	cmp	r2, #0
   d90da:	d103      	bne.n	d90e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d90dc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d90e0:	2900      	cmp	r1, #0
   d90e2:	d1f7      	bne.n	d90d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d90e4:	d1ef      	bne.n	d90c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d90e6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d90e8:	f3bf 8f5b 	dmb	ish
   d90ec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d90ee:	1d2b      	adds	r3, r5, #4
   d90f0:	f3bf 8f5b 	dmb	ish
   d90f4:	e853 6f00 	ldrex	r6, [r3]
   d90f8:	e843 4200 	strex	r2, r4, [r3]
   d90fc:	2a00      	cmp	r2, #0
   d90fe:	d1f9      	bne.n	d90f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9100:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9104:	2e00      	cmp	r6, #0
   d9106:	d0de      	beq.n	d90c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9108:	4620      	mov	r0, r4
   d910a:	f7ff fbc9 	bl	d88a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d910e:	4607      	mov	r7, r0
   d9110:	b160      	cbz	r0, d912c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9112:	f105 010c 	add.w	r1, r5, #12
   d9116:	4630      	mov	r0, r6
   d9118:	f7ff fe15 	bl	d8d46 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d911c:	4630      	mov	r0, r6
   d911e:	f7fb f8b4 	bl	d428a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9122:	2110      	movs	r1, #16
   d9124:	4630      	mov	r0, r6
   d9126:	f001 fbd2 	bl	da8ce <_ZdlPvj>
   d912a:	e7cc      	b.n	d90c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d912c:	4631      	mov	r1, r6
   d912e:	a803      	add	r0, sp, #12
   d9130:	f7ff ff7c 	bl	d902c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9134:	7b2b      	ldrb	r3, [r5, #12]
   d9136:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d913a:	2010      	movs	r0, #16
   d913c:	f7fa ffab 	bl	d4096 <_Znwj>
   d9140:	4605      	mov	r5, r0
   d9142:	b1d0      	cbz	r0, d917a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9144:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9146:	2014      	movs	r0, #20
   d9148:	f7fa ffa5 	bl	d4096 <_Znwj>
   d914c:	4604      	mov	r4, r0
   d914e:	b178      	cbz	r0, d9170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9150:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9152:	4601      	mov	r1, r0
   d9154:	a803      	add	r0, sp, #12
   d9156:	f7fc fef3 	bl	d5f40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d915a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d915c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d915e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9160:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d9162:	9205      	str	r2, [sp, #20]
   d9164:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9166:	60e3      	str	r3, [r4, #12]
   d9168:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d916c:	9206      	str	r2, [sp, #24]
   d916e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9170:	4b06      	ldr	r3, [pc, #24]	; (d918c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9172:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9174:	4b06      	ldr	r3, [pc, #24]	; (d9190 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9176:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9178:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d917a:	a803      	add	r0, sp, #12
   d917c:	f7fb f885 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9180:	2200      	movs	r2, #0
   d9182:	4629      	mov	r1, r5
   d9184:	4803      	ldr	r0, [pc, #12]	; (d9194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d9186:	f7ff fb93 	bl	d88b0 <application_thread_invoke>
   d918a:	e7c7      	b.n	d911c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d918c:	000d8d59 	.word	0x000d8d59
   d9190:	000d904b 	.word	0x000d904b
   d9194:	000d8b93 	.word	0x000d8b93

000d9198 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9198:	2200      	movs	r2, #0
   d919a:	6840      	ldr	r0, [r0, #4]
   d919c:	4611      	mov	r1, r2
   d919e:	f7ff bc5d 	b.w	d8a5c <network_listening>

000d91a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d91a2:	2200      	movs	r2, #0
   d91a4:	6840      	ldr	r0, [r0, #4]
   d91a6:	4611      	mov	r1, r2
   d91a8:	f7ff bc68 	b.w	d8a7c <network_get_listen_timeout>

000d91ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d91ac:	6840      	ldr	r0, [r0, #4]
   d91ae:	2200      	movs	r2, #0
   d91b0:	f7ff bc5c 	b.w	d8a6c <network_set_listen_timeout>

000d91b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d91b4:	6840      	ldr	r0, [r0, #4]
   d91b6:	2200      	movs	r2, #0
   d91b8:	f081 0101 	eor.w	r1, r1, #1
   d91bc:	f7ff bc46 	b.w	d8a4c <network_listen>

000d91c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d91c0:	2300      	movs	r3, #0
   d91c2:	6840      	ldr	r0, [r0, #4]
   d91c4:	461a      	mov	r2, r3
   d91c6:	4619      	mov	r1, r3
   d91c8:	f7ff bc38 	b.w	d8a3c <network_off>

000d91cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d91cc:	2300      	movs	r3, #0
   d91ce:	6840      	ldr	r0, [r0, #4]
   d91d0:	461a      	mov	r2, r3
   d91d2:	4619      	mov	r1, r3
   d91d4:	f7ff bc2a 	b.w	d8a2c <network_on>

000d91d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d91d8:	2200      	movs	r2, #0
   d91da:	6840      	ldr	r0, [r0, #4]
   d91dc:	4611      	mov	r1, r2
   d91de:	f7ff bc1d 	b.w	d8a1c <network_ready>

000d91e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d91e2:	2200      	movs	r2, #0
   d91e4:	6840      	ldr	r0, [r0, #4]
   d91e6:	4611      	mov	r1, r2
   d91e8:	f7ff bc08 	b.w	d89fc <network_connecting>

000d91ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d91ec:	6840      	ldr	r0, [r0, #4]
   d91ee:	2200      	movs	r2, #0
   d91f0:	2102      	movs	r1, #2
   d91f2:	f7ff bc0b 	b.w	d8a0c <network_disconnect>

000d91f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d91f6:	2300      	movs	r3, #0
   d91f8:	6840      	ldr	r0, [r0, #4]
   d91fa:	461a      	mov	r2, r3
   d91fc:	f7ff bbf6 	b.w	d89ec <network_connect>

000d9200 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9200:	4b02      	ldr	r3, [pc, #8]	; (d920c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9202:	2203      	movs	r2, #3
   d9204:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9206:	4a02      	ldr	r2, [pc, #8]	; (d9210 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9208:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d920a:	4770      	bx	lr
   d920c:	2003e610 	.word	0x2003e610
   d9210:	000de148 	.word	0x000de148

000d9214 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9214:	4770      	bx	lr

000d9216 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9218:	4606      	mov	r6, r0
   d921a:	4615      	mov	r5, r2
   d921c:	460c      	mov	r4, r1
   d921e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9220:	42bc      	cmp	r4, r7
   d9222:	d006      	beq.n	d9232 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9224:	6833      	ldr	r3, [r6, #0]
   d9226:	f814 1b01 	ldrb.w	r1, [r4], #1
   d922a:	689b      	ldr	r3, [r3, #8]
   d922c:	4630      	mov	r0, r6
   d922e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9230:	e7f6      	b.n	d9220 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9232:	4628      	mov	r0, r5
   d9234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9236 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9236:	7c00      	ldrb	r0, [r0, #16]
   d9238:	2200      	movs	r2, #0
   d923a:	f7ff ba09 	b.w	d8650 <hal_i2c_write>

000d923e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d923e:	7c00      	ldrb	r0, [r0, #16]
   d9240:	2100      	movs	r1, #0
   d9242:	f7ff ba0d 	b.w	d8660 <hal_i2c_available>

000d9246 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9246:	7c00      	ldrb	r0, [r0, #16]
   d9248:	2100      	movs	r1, #0
   d924a:	f7ff ba11 	b.w	d8670 <hal_i2c_read>

000d924e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d924e:	7c00      	ldrb	r0, [r0, #16]
   d9250:	2100      	movs	r1, #0
   d9252:	f7ff ba15 	b.w	d8680 <hal_i2c_peek>

000d9256 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9256:	7c00      	ldrb	r0, [r0, #16]
   d9258:	2100      	movs	r1, #0
   d925a:	f7ff ba19 	b.w	d8690 <hal_i2c_flush>

000d925e <_ZN7TwoWireD0Ev>:
   d925e:	b510      	push	{r4, lr}
   d9260:	2114      	movs	r1, #20
   d9262:	4604      	mov	r4, r0
   d9264:	f001 fb33 	bl	da8ce <_ZdlPvj>
   d9268:	4620      	mov	r0, r4
   d926a:	bd10      	pop	{r4, pc}

000d926c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d926c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d926e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9272:	4604      	mov	r4, r0
   d9274:	4608      	mov	r0, r1
   d9276:	2100      	movs	r1, #0
   d9278:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d927c:	4b03      	ldr	r3, [pc, #12]	; (d928c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d927e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9280:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9282:	4611      	mov	r1, r2
   d9284:	f7ff fa14 	bl	d86b0 <hal_i2c_init>
}
   d9288:	4620      	mov	r0, r4
   d928a:	bd10      	pop	{r4, pc}
   d928c:	000de184 	.word	0x000de184

000d9290 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9290:	2300      	movs	r3, #0
   d9292:	7c00      	ldrb	r0, [r0, #16]
   d9294:	461a      	mov	r2, r3
   d9296:	4619      	mov	r1, r3
   d9298:	f7ff b9c2 	b.w	d8620 <hal_i2c_begin>

000d929c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d929c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d929e:	2200      	movs	r2, #0
   d92a0:	2314      	movs	r3, #20
   d92a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d92a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d92aa:	780b      	ldrb	r3, [r1, #0]
   d92ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d92b0:	684b      	ldr	r3, [r1, #4]
   d92b2:	9303      	str	r3, [sp, #12]
   d92b4:	68cb      	ldr	r3, [r1, #12]
   d92b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d92b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d92ba:	7a0b      	ldrb	r3, [r1, #8]
   d92bc:	9305      	str	r3, [sp, #20]
   d92be:	a901      	add	r1, sp, #4
   d92c0:	f7ff fa0e 	bl	d86e0 <hal_i2c_request_ex>
}
   d92c4:	b007      	add	sp, #28
   d92c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d92ca <_ZN7TwoWire11requestFromEhjh>:
{
   d92ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d92cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d92ce:	f88d 1000 	strb.w	r1, [sp]
   d92d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d92d6:	9103      	str	r1, [sp, #12]
   d92d8:	bf18      	it	ne
   d92da:	2301      	movne	r3, #1
   d92dc:	4669      	mov	r1, sp
    size_ = size;
   d92de:	9201      	str	r2, [sp, #4]
   d92e0:	f88d 3008 	strb.w	r3, [sp, #8]
   d92e4:	f7ff ffda 	bl	d929c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d92e8:	b005      	add	sp, #20
   d92ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d92ee <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d92ee:	7c00      	ldrb	r0, [r0, #16]
   d92f0:	2200      	movs	r2, #0
   d92f2:	f7ff b99d 	b.w	d8630 <hal_i2c_begin_transmission>

000d92f6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d92f6:	b2c9      	uxtb	r1, r1
   d92f8:	f7ff bff9 	b.w	d92ee <_ZN7TwoWire17beginTransmissionEh>

000d92fc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d92fc:	7c00      	ldrb	r0, [r0, #16]
   d92fe:	2200      	movs	r2, #0
   d9300:	f7ff b99e 	b.w	d8640 <hal_i2c_end_transmission>

000d9304 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9304:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9306:	2100      	movs	r1, #0
   d9308:	7c00      	ldrb	r0, [r0, #16]
   d930a:	f7ff f9d9 	bl	d86c0 <hal_i2c_lock>
}
   d930e:	fab0 f080 	clz	r0, r0
   d9312:	0940      	lsrs	r0, r0, #5
   d9314:	bd08      	pop	{r3, pc}

000d9316 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9316:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9318:	2100      	movs	r1, #0
   d931a:	7c00      	ldrb	r0, [r0, #16]
   d931c:	f7ff f9d8 	bl	d86d0 <hal_i2c_unlock>
}
   d9320:	fab0 f080 	clz	r0, r0
   d9324:	0940      	lsrs	r0, r0, #5
   d9326:	bd08      	pop	{r3, pc}

000d9328 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9328:	4700      	bx	r0
	...

000d932c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d932c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9330:	2400      	movs	r4, #0
{
   d9332:	461d      	mov	r5, r3
   d9334:	460f      	mov	r7, r1
   d9336:	4690      	mov	r8, r2
   d9338:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d933a:	f7ff f961 	bl	d8600 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d933e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9340:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9344:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9348:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d934c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9350:	bfa2      	ittt	ge
   d9352:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9356:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d935a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d935c:	4907      	ldr	r1, [pc, #28]	; (d937c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d935e:	9400      	str	r4, [sp, #0]
   d9360:	4643      	mov	r3, r8
   d9362:	463a      	mov	r2, r7
   d9364:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9366:	bfa8      	it	ge
   d9368:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d936c:	f7ff f940 	bl	d85f0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9370:	fab0 f080 	clz	r0, r0
   d9374:	0940      	lsrs	r0, r0, #5
   d9376:	b004      	add	sp, #16
   d9378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d937c:	000d9329 	.word	0x000d9329

000d9380 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9380:	4770      	bx	lr

000d9382 <_ZN9IPAddressD0Ev>:
   d9382:	b510      	push	{r4, lr}
   d9384:	2118      	movs	r1, #24
   d9386:	4604      	mov	r4, r0
   d9388:	f001 faa1 	bl	da8ce <_ZdlPvj>
   d938c:	4620      	mov	r0, r4
   d938e:	bd10      	pop	{r4, pc}

000d9390 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9390:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9392:	7d03      	ldrb	r3, [r0, #20]
   d9394:	2b06      	cmp	r3, #6
{
   d9396:	b08d      	sub	sp, #52	; 0x34
   d9398:	460e      	mov	r6, r1
   d939a:	f100 0704 	add.w	r7, r0, #4
   d939e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d93a2:	d012      	beq.n	d93ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d93a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d93a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d93ac:	220a      	movs	r2, #10
   d93ae:	4630      	mov	r0, r6
   d93b0:	f000 fc8f 	bl	d9cd2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d93b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d93b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d93b8:	d019      	beq.n	d93ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d93ba:	2c00      	cmp	r4, #0
   d93bc:	d0f4      	beq.n	d93a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d93be:	212e      	movs	r1, #46	; 0x2e
   d93c0:	4630      	mov	r0, r6
   d93c2:	f000 fc83 	bl	d9ccc <_ZN5Print5printEc>
   d93c6:	4404      	add	r4, r0
   d93c8:	e7ee      	b.n	d93a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d93ca:	232f      	movs	r3, #47	; 0x2f
   d93cc:	466a      	mov	r2, sp
   d93ce:	4639      	mov	r1, r7
   d93d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d93d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d93d6:	f7ff f98b 	bl	d86f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d93da:	4668      	mov	r0, sp
   d93dc:	f002 f96f 	bl	db6be <strlen>
   d93e0:	6833      	ldr	r3, [r6, #0]
   d93e2:	4602      	mov	r2, r0
   d93e4:	68db      	ldr	r3, [r3, #12]
   d93e6:	4669      	mov	r1, sp
   d93e8:	4630      	mov	r0, r6
   d93ea:	4798      	blx	r3
   d93ec:	4604      	mov	r4, r0
    }
    return n;
}
   d93ee:	4620      	mov	r0, r4
   d93f0:	b00d      	add	sp, #52	; 0x34
   d93f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d93f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d93f4:	b510      	push	{r4, lr}
   d93f6:	4b05      	ldr	r3, [pc, #20]	; (d940c <_ZN9IPAddressC1Ev+0x18>)
   d93f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d93fa:	2211      	movs	r2, #17
   d93fc:	f840 3b04 	str.w	r3, [r0], #4
   d9400:	2100      	movs	r1, #0
   d9402:	f002 f901 	bl	db608 <memset>
}
   d9406:	4620      	mov	r0, r4
   d9408:	bd10      	pop	{r4, pc}
   d940a:	bf00      	nop
   d940c:	000de1ac 	.word	0x000de1ac

000d9410 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9410:	4603      	mov	r3, r0
   d9412:	4a07      	ldr	r2, [pc, #28]	; (d9430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9414:	b510      	push	{r4, lr}
   d9416:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d941a:	f101 0210 	add.w	r2, r1, #16
   d941e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9422:	f843 4b04 	str.w	r4, [r3], #4
   d9426:	4291      	cmp	r1, r2
   d9428:	d1f9      	bne.n	d941e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d942a:	780a      	ldrb	r2, [r1, #0]
   d942c:	701a      	strb	r2, [r3, #0]
}
   d942e:	bd10      	pop	{r4, pc}
   d9430:	000de1ac 	.word	0x000de1ac

000d9434 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9434:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9436:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d943a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d943e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9442:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9446:	2304      	movs	r3, #4
   d9448:	6041      	str	r1, [r0, #4]
   d944a:	7503      	strb	r3, [r0, #20]
}
   d944c:	bd10      	pop	{r4, pc}
	...

000d9450 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d9450:	b513      	push	{r0, r1, r4, lr}
   d9452:	4b05      	ldr	r3, [pc, #20]	; (d9468 <_ZN9IPAddressC1EPKh+0x18>)
   d9454:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d9456:	78cb      	ldrb	r3, [r1, #3]
   d9458:	9300      	str	r3, [sp, #0]
   d945a:	788b      	ldrb	r3, [r1, #2]
   d945c:	784a      	ldrb	r2, [r1, #1]
   d945e:	7809      	ldrb	r1, [r1, #0]
   d9460:	f7ff ffe8 	bl	d9434 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9464:	b002      	add	sp, #8
   d9466:	bd10      	pop	{r4, pc}
   d9468:	000de1ac 	.word	0x000de1ac

000d946c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d946c:	f100 0310 	add.w	r3, r0, #16
   d9470:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9472:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9476:	2901      	cmp	r1, #1
   d9478:	4618      	mov	r0, r3
   d947a:	d108      	bne.n	d948e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d947c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d9480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d9484:	3a01      	subs	r2, #1
   d9486:	f103 0310 	add.w	r3, r3, #16
   d948a:	d1f2      	bne.n	d9472 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d948c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d948e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9490:	bf04      	itt	eq
   d9492:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9496:	1852      	addeq	r2, r2, r1
   d9498:	e7f4      	b.n	d9484 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d949a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d949a:	4770      	bx	lr

000d949c <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d949c:	4770      	bx	lr

000d949e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d949e:	2000      	movs	r0, #0
   d94a0:	4770      	bx	lr

000d94a2 <_ZN5spark16JSONBufferWriterD0Ev>:
   d94a2:	b510      	push	{r4, lr}
   d94a4:	2114      	movs	r1, #20
   d94a6:	4604      	mov	r4, r0
   d94a8:	f001 fa11 	bl	da8ce <_ZdlPvj>
   d94ac:	4620      	mov	r0, r4
   d94ae:	bd10      	pop	{r4, pc}

000d94b0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d94b0:	b510      	push	{r4, lr}
   d94b2:	2110      	movs	r1, #16
   d94b4:	4604      	mov	r4, r0
   d94b6:	f001 fa0a 	bl	da8ce <_ZdlPvj>
   d94ba:	4620      	mov	r0, r4
   d94bc:	bd10      	pop	{r4, pc}

000d94be <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d94be:	b508      	push	{r3, lr}
      { delete this; }
   d94c0:	f7ff fff6 	bl	d94b0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d94c4:	bd08      	pop	{r3, pc}

000d94c6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d94c6:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d94c8:	68c4      	ldr	r4, [r0, #12]
   d94ca:	b17c      	cbz	r4, d94ec <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d94cc:	6820      	ldr	r0, [r4, #0]
   d94ce:	b108      	cbz	r0, d94d4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d94d0:	f7fa fde7 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d94d4:	7a23      	ldrb	r3, [r4, #8]
   d94d6:	b11b      	cbz	r3, d94e0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d94d8:	6860      	ldr	r0, [r4, #4]
   d94da:	b108      	cbz	r0, d94e0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d94dc:	f7fa fde1 	bl	d40a2 <_ZdaPv>
   d94e0:	4620      	mov	r0, r4
   d94e2:	210c      	movs	r1, #12
   d94e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d94e8:	f001 b9f1 	b.w	da8ce <_ZdlPvj>
   d94ec:	bd10      	pop	{r4, pc}

000d94ee <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d94ee:	b538      	push	{r3, r4, r5, lr}
   d94f0:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d94f2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   d94f6:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d94f8:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d94fa:	d207      	bcs.n	d950c <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d94fc:	1ad2      	subs	r2, r2, r3
   d94fe:	6880      	ldr	r0, [r0, #8]
   d9500:	42aa      	cmp	r2, r5
   d9502:	bf28      	it	cs
   d9504:	462a      	movcs	r2, r5
   d9506:	4418      	add	r0, r3
   d9508:	f002 f856 	bl	db5b8 <memcpy>
    }
    n_ += size;
   d950c:	6922      	ldr	r2, [r4, #16]
   d950e:	442a      	add	r2, r5
   d9510:	6122      	str	r2, [r4, #16]
}
   d9512:	bd38      	pop	{r3, r4, r5, pc}

000d9514 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d9514:	b40e      	push	{r1, r2, r3}
   d9516:	b517      	push	{r0, r1, r2, r4, lr}
   d9518:	ab05      	add	r3, sp, #20
   d951a:	4604      	mov	r4, r0
   d951c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d9520:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   d9522:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d9524:	6903      	ldr	r3, [r0, #16]
   d9526:	6880      	ldr	r0, [r0, #8]
   d9528:	428b      	cmp	r3, r1
   d952a:	bf38      	it	cc
   d952c:	1ac9      	subcc	r1, r1, r3
   d952e:	4418      	add	r0, r3
   d9530:	bf28      	it	cs
   d9532:	2100      	movcs	r1, #0
   d9534:	9b01      	ldr	r3, [sp, #4]
   d9536:	f7ff fae1 	bl	d8afc <vsnprintf>
    va_end(args);
    n_ += n;
   d953a:	6923      	ldr	r3, [r4, #16]
   d953c:	4418      	add	r0, r3
   d953e:	6120      	str	r0, [r4, #16]
}
   d9540:	b003      	add	sp, #12
   d9542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9546:	b003      	add	sp, #12
   d9548:	4770      	bx	lr

000d954a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d954a:	b510      	push	{r4, lr}
          _M_dispose();
   d954c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d954e:	4604      	mov	r4, r0
          _M_dispose();
   d9550:	689b      	ldr	r3, [r3, #8]
   d9552:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9554:	68a3      	ldr	r3, [r4, #8]
   d9556:	3b01      	subs	r3, #1
   d9558:	60a3      	str	r3, [r4, #8]
   d955a:	b92b      	cbnz	r3, d9568 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d955c:	6823      	ldr	r3, [r4, #0]
   d955e:	4620      	mov	r0, r4
   d9560:	68db      	ldr	r3, [r3, #12]
    }
   d9562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9566:	4718      	bx	r3
    }
   d9568:	bd10      	pop	{r4, pc}

000d956a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d956a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d956c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d956e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9572:	689b      	ldr	r3, [r3, #8]
   d9574:	2201      	movs	r2, #1
   d9576:	f10d 0107 	add.w	r1, sp, #7
   d957a:	4798      	blx	r3
}
   d957c:	b003      	add	sp, #12
   d957e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9582 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9582:	b538      	push	{r3, r4, r5, lr}
   d9584:	680b      	ldr	r3, [r1, #0]
   d9586:	6003      	str	r3, [r0, #0]
   d9588:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d958a:	6843      	ldr	r3, [r0, #4]
   d958c:	429d      	cmp	r5, r3
    class __shared_ptr
   d958e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9590:	d00c      	beq.n	d95ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9592:	b115      	cbz	r5, d959a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d9594:	686b      	ldr	r3, [r5, #4]
   d9596:	3301      	adds	r3, #1
   d9598:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d959a:	6860      	ldr	r0, [r4, #4]
   d959c:	b128      	cbz	r0, d95aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d959e:	6843      	ldr	r3, [r0, #4]
   d95a0:	3b01      	subs	r3, #1
   d95a2:	6043      	str	r3, [r0, #4]
   d95a4:	b90b      	cbnz	r3, d95aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d95a6:	f7ff ffd0 	bl	d954a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d95aa:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d95ac:	4620      	mov	r0, r4
   d95ae:	bd38      	pop	{r3, r4, r5, pc}

000d95b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d95b0:	460b      	mov	r3, r1
   d95b2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d95b4:	2200      	movs	r2, #0
   d95b6:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d95b8:	e9c0 2200 	strd	r2, r2, [r0]
   d95bc:	4604      	mov	r4, r0
        t_ = t;
   d95be:	6083      	str	r3, [r0, #8]
    if (t) {
   d95c0:	b90b      	cbnz	r3, d95c6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d95c2:	4620      	mov	r0, r4
   d95c4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d95c6:	f7ff ffdc 	bl	d9582 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d95ca:	e7fa      	b.n	d95c2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d95cc <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d95cc:	6883      	ldr	r3, [r0, #8]
   d95ce:	b1eb      	cbz	r3, d960c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d95d0:	781a      	ldrb	r2, [r3, #0]
   d95d2:	2a03      	cmp	r2, #3
   d95d4:	d81a      	bhi.n	d960c <_ZNK5spark9JSONValue4typeEv+0x40>
   d95d6:	e8df f002 	tbb	[pc, r2]
   d95da:	1704      	.short	0x1704
   d95dc:	1b02      	.short	0x1b02
   d95de:	2005      	movs	r0, #5
   d95e0:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d95e2:	6802      	ldr	r2, [r0, #0]
   d95e4:	685b      	ldr	r3, [r3, #4]
   d95e6:	6852      	ldr	r2, [r2, #4]
   d95e8:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d95ea:	282d      	cmp	r0, #45	; 0x2d
   d95ec:	d012      	beq.n	d9614 <_ZNK5spark9JSONValue4typeEv+0x48>
   d95ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d95f2:	2b09      	cmp	r3, #9
   d95f4:	d90e      	bls.n	d9614 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d95f6:	2874      	cmp	r0, #116	; 0x74
   d95f8:	d00e      	beq.n	d9618 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d95fa:	2866      	cmp	r0, #102	; 0x66
   d95fc:	d00c      	beq.n	d9618 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d95fe:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9602:	4258      	negs	r0, r3
   d9604:	4158      	adcs	r0, r3
   d9606:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9608:	2006      	movs	r0, #6
   d960a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d960c:	2000      	movs	r0, #0
   d960e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9610:	2004      	movs	r0, #4
   d9612:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d9614:	2003      	movs	r0, #3
   d9616:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9618:	2002      	movs	r0, #2
}
   d961a:	4770      	bx	lr

000d961c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9620:	b086      	sub	sp, #24
   d9622:	4607      	mov	r7, r0
   d9624:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d9626:	a802      	add	r0, sp, #8
   d9628:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d962a:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d962c:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d962e:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d9630:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d9632:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d9634:	f7ff f8fc 	bl	d8830 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d9638:	e9cd 4400 	strd	r4, r4, [sp]
   d963c:	4623      	mov	r3, r4
   d963e:	4642      	mov	r2, r8
   d9640:	4639      	mov	r1, r7
   d9642:	a802      	add	r0, sp, #8
   d9644:	f7ff f8fc 	bl	d8840 <jsmn_parse>
    if (n <= 0) {
   d9648:	1e06      	subs	r6, r0, #0
   d964a:	dd1e      	ble.n	d968a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d964c:	4910      	ldr	r1, [pc, #64]	; (d9690 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d964e:	0130      	lsls	r0, r6, #4
   d9650:	f001 f941 	bl	da8d6 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d9654:	4605      	mov	r5, r0
   d9656:	b190      	cbz	r0, d967e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
    jsmn_init(&parser, nullptr); // Reset parser
   d9658:	4621      	mov	r1, r4
   d965a:	a802      	add	r0, sp, #8
   d965c:	f7ff f8e8 	bl	d8830 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d9660:	e9cd 6400 	strd	r6, r4, [sp]
   d9664:	462b      	mov	r3, r5
   d9666:	4642      	mov	r2, r8
   d9668:	4639      	mov	r1, r7
   d966a:	a802      	add	r0, sp, #8
   d966c:	f7ff f8e8 	bl	d8840 <jsmn_parse>
   d9670:	42a0      	cmp	r0, r4
   d9672:	dd07      	ble.n	d9684 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
    *tokens = t.release();
   d9674:	f8ca 5000 	str.w	r5, [sl]
    return true;
   d9678:	2001      	movs	r0, #1
    *count = n;
   d967a:	f8c9 6000 	str.w	r6, [r9]
}
   d967e:	b006      	add	sp, #24
   d9680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   d9684:	4628      	mov	r0, r5
   d9686:	f7fa fd0c 	bl	d40a2 <_ZdaPv>
      }
   d968a:	4620      	mov	r0, r4
   d968c:	e7f7      	b.n	d967e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d968e:	bf00      	nop
   d9690:	000de30c 	.word	0x000de30c

000d9694 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d9694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d9698:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d969a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d969c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d969e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d96a0:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d96a2:	4607      	mov	r7, r0
    const char *s = s1;
   d96a4:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d96a6:	4619      	mov	r1, r3
                    *str = 0x0d;
   d96a8:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d96ac:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d96b0:	42b4      	cmp	r4, r6
   d96b2:	d063      	beq.n	d977c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d96b4:	4625      	mov	r5, r4
   d96b6:	f815 2b01 	ldrb.w	r2, [r5], #1
   d96ba:	2a5c      	cmp	r2, #92	; 0x5c
   d96bc:	d12b      	bne.n	d9716 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d96be:	42a1      	cmp	r1, r4
   d96c0:	d007      	beq.n	d96d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d96c2:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d96c6:	4618      	mov	r0, r3
   d96c8:	465a      	mov	r2, fp
   d96ca:	f001 ff83 	bl	db5d4 <memmove>
   d96ce:	4603      	mov	r3, r0
                str += n;
   d96d0:	445b      	add	r3, fp
            if (s == end) {
   d96d2:	42b5      	cmp	r5, r6
   d96d4:	d039      	beq.n	d974a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d96d6:	7862      	ldrb	r2, [r4, #1]
   d96d8:	2a75      	cmp	r2, #117	; 0x75
   d96da:	d12a      	bne.n	d9732 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d96dc:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d96de:	1ab2      	subs	r2, r6, r2
   d96e0:	2a03      	cmp	r2, #3
   d96e2:	dd32      	ble.n	d974a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d96e4:	1da0      	adds	r0, r4, #6
   d96e6:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d96ea:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d96ee:	45ae      	cmp	lr, r5
   d96f0:	d053      	beq.n	d979a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d96f2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d96f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d96fa:	fa5f fb82 	uxtb.w	fp, r2
   d96fe:	f1bb 0f09 	cmp.w	fp, #9
   d9702:	d905      	bls.n	d9710 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d9704:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d9708:	2a05      	cmp	r2, #5
   d970a:	d807      	bhi.n	d971c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d970c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d9710:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d9714:	e7eb      	b.n	d96ee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d9716:	4628      	mov	r0, r5
   d9718:	4604      	mov	r4, r0
   d971a:	e7c9      	b.n	d96b0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d971c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d9720:	2a05      	cmp	r2, #5
   d9722:	d812      	bhi.n	d974a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d9724:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d9728:	e7f2      	b.n	d9710 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d972a:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d972e:	4601      	mov	r1, r0
   d9730:	e7f2      	b.n	d9718 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d9732:	2a6e      	cmp	r2, #110	; 0x6e
   d9734:	d01c      	beq.n	d9770 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d9736:	d80e      	bhi.n	d9756 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d9738:	2a62      	cmp	r2, #98	; 0x62
   d973a:	d013      	beq.n	d9764 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d973c:	d807      	bhi.n	d974e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d973e:	2a2f      	cmp	r2, #47	; 0x2f
   d9740:	d011      	beq.n	d9766 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d9742:	2a5c      	cmp	r2, #92	; 0x5c
   d9744:	d00f      	beq.n	d9766 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d9746:	2a22      	cmp	r2, #34	; 0x22
   d9748:	d00d      	beq.n	d9766 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d974a:	2000      	movs	r0, #0
   d974c:	e023      	b.n	d9796 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d974e:	2a66      	cmp	r2, #102	; 0x66
   d9750:	d1fb      	bne.n	d974a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d9752:	220c      	movs	r2, #12
   d9754:	e007      	b.n	d9766 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d9756:	2a72      	cmp	r2, #114	; 0x72
   d9758:	d00d      	beq.n	d9776 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d975a:	2a74      	cmp	r2, #116	; 0x74
   d975c:	d1f5      	bne.n	d974a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d975e:	f883 a000 	strb.w	sl, [r3]
                    break;
   d9762:	e001      	b.n	d9768 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d9764:	2208      	movs	r2, #8
   d9766:	701a      	strb	r2, [r3, #0]
                ++s;
   d9768:	1ca1      	adds	r1, r4, #2
                ++str;
   d976a:	3301      	adds	r3, #1
                ++s;
   d976c:	4608      	mov	r0, r1
   d976e:	e7d3      	b.n	d9718 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d9770:	f04f 020a 	mov.w	r2, #10
   d9774:	e7f7      	b.n	d9766 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d9776:	f883 9000 	strb.w	r9, [r3]
                    break;
   d977a:	e7f5      	b.n	d9768 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   d977c:	42a1      	cmp	r1, r4
   d977e:	d006      	beq.n	d978e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d9780:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d9782:	4618      	mov	r0, r3
   d9784:	4622      	mov	r2, r4
   d9786:	f001 ff25 	bl	db5d4 <memmove>
   d978a:	4603      	mov	r3, r0
        str += n;
   d978c:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   d978e:	eba3 0308 	sub.w	r3, r3, r8
   d9792:	60bb      	str	r3, [r7, #8]
    return true;
   d9794:	2001      	movs	r0, #1
}
   d9796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d979a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d979e:	d9c4      	bls.n	d972a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d97a0:	4621      	mov	r1, r4
   d97a2:	e7b9      	b.n	d9718 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d97a4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d97a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97a6:	4604      	mov	r4, r0
   d97a8:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d97aa:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d97ae:	2700      	movs	r7, #0
    while (t != end) {
   d97b0:	42b4      	cmp	r4, r6
   d97b2:	d010      	beq.n	d97d6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d97b4:	7823      	ldrb	r3, [r4, #0]
   d97b6:	2b03      	cmp	r3, #3
   d97b8:	d108      	bne.n	d97cc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d97ba:	4629      	mov	r1, r5
   d97bc:	4620      	mov	r0, r4
   d97be:	f7ff ff69 	bl	d9694 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d97c2:	b148      	cbz	r0, d97d8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d97c4:	68a3      	ldr	r3, [r4, #8]
   d97c6:	54ef      	strb	r7, [r5, r3]
        ++t;
   d97c8:	3410      	adds	r4, #16
    while (t != end) {
   d97ca:	e7f1      	b.n	d97b0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d97cc:	2b00      	cmp	r3, #0
   d97ce:	d1fb      	bne.n	d97c8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d97d0:	68a2      	ldr	r2, [r4, #8]
   d97d2:	54ab      	strb	r3, [r5, r2]
   d97d4:	e7f8      	b.n	d97c8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d97d6:	2001      	movs	r0, #1
}
   d97d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d97dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d97dc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d97de:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d97e0:	e9c0 3300 	strd	r3, r3, [r0]
   d97e4:	4604      	mov	r4, r0
        n_(0) {
   d97e6:	480e      	ldr	r0, [pc, #56]	; (d9820 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d97e8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d97ec:	b1a9      	cbz	r1, d981a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d97ee:	780b      	ldrb	r3, [r1, #0]
   d97f0:	2b03      	cmp	r3, #3
   d97f2:	d006      	beq.n	d9802 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d97f4:	b98b      	cbnz	r3, d981a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d97f6:	6813      	ldr	r3, [r2, #0]
   d97f8:	6858      	ldr	r0, [r3, #4]
   d97fa:	684b      	ldr	r3, [r1, #4]
   d97fc:	5cc3      	ldrb	r3, [r0, r3]
   d97fe:	2b6e      	cmp	r3, #110	; 0x6e
   d9800:	d007      	beq.n	d9812 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d9802:	6813      	ldr	r3, [r2, #0]
   d9804:	684d      	ldr	r5, [r1, #4]
   d9806:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9808:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d980a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d980c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d980e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9810:	60e3      	str	r3, [r4, #12]
   d9812:	4611      	mov	r1, r2
   d9814:	4620      	mov	r0, r4
   d9816:	f7ff feb4 	bl	d9582 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d981a:	4620      	mov	r0, r4
   d981c:	bd38      	pop	{r3, r4, r5, pc}
   d981e:	bf00      	nop
   d9820:	000de334 	.word	0x000de334

000d9824 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9824:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9826:	2500      	movs	r5, #0
   d9828:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d982a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d982e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9832:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9836:	4604      	mov	r4, r0
   d9838:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d983a:	b14b      	cbz	r3, d9850 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d983c:	781a      	ldrb	r2, [r3, #0]
   d983e:	2a01      	cmp	r2, #1
   d9840:	d106      	bne.n	d9850 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d9842:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9846:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9848:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d984a:	6143      	str	r3, [r0, #20]
   d984c:	f7ff fe99 	bl	d9582 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9850:	4620      	mov	r0, r4
   d9852:	bd38      	pop	{r3, r4, r5, pc}

000d9854 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9854:	b510      	push	{r4, lr}
    if (!n_) {
   d9856:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9858:	4604      	mov	r4, r0
    if (!n_) {
   d985a:	b163      	cbz	r3, d9876 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d985c:	6880      	ldr	r0, [r0, #8]
   d985e:	60e0      	str	r0, [r4, #12]
    --n_;
   d9860:	3b01      	subs	r3, #1
    ++t_;
   d9862:	3010      	adds	r0, #16
   d9864:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9866:	6120      	str	r0, [r4, #16]
    --n_;
   d9868:	6163      	str	r3, [r4, #20]
    if (n_) {
   d986a:	b113      	cbz	r3, d9872 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d986c:	f7ff fdfe 	bl	d946c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9870:	60a0      	str	r0, [r4, #8]
    return true;
   d9872:	2001      	movs	r0, #1
   d9874:	e000      	b.n	d9878 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9876:	4618      	mov	r0, r3
}
   d9878:	bd10      	pop	{r4, pc}

000d987a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d987a:	b510      	push	{r4, lr}
    write('}');
   d987c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d987e:	4604      	mov	r4, r0
    write('}');
   d9880:	f7ff fe73 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9884:	2301      	movs	r3, #1
   d9886:	7123      	strb	r3, [r4, #4]
}
   d9888:	4620      	mov	r0, r4
   d988a:	bd10      	pop	{r4, pc}

000d988c <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   d988c:	b508      	push	{r3, lr}
    switch (state_) {
   d988e:	7903      	ldrb	r3, [r0, #4]
   d9890:	2b01      	cmp	r3, #1
   d9892:	d002      	beq.n	d989a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9894:	2b02      	cmp	r3, #2
   d9896:	d004      	beq.n	d98a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   d9898:	bd08      	pop	{r3, pc}
        write(',');
   d989a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d989c:	f7ff fe65 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
}
   d98a0:	e7fa      	b.n	d9898 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d98a2:	213a      	movs	r1, #58	; 0x3a
   d98a4:	e7fa      	b.n	d989c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d98a6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d98a6:	b510      	push	{r4, lr}
   d98a8:	4604      	mov	r4, r0
    writeSeparator();
   d98aa:	f7ff ffef 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d98ae:	4620      	mov	r0, r4
   d98b0:	217b      	movs	r1, #123	; 0x7b
   d98b2:	f7ff fe5a 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d98b6:	2300      	movs	r3, #0
   d98b8:	7123      	strb	r3, [r4, #4]
}
   d98ba:	4620      	mov	r0, r4
   d98bc:	bd10      	pop	{r4, pc}
	...

000d98c0 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   d98c0:	b538      	push	{r3, r4, r5, lr}
   d98c2:	4604      	mov	r4, r0
   d98c4:	460d      	mov	r5, r1
    writeSeparator();
   d98c6:	f7ff ffe1 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   d98ca:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   d98cc:	689b      	ldr	r3, [r3, #8]
    if (val) {
   d98ce:	b13d      	cbz	r5, d98e0 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   d98d0:	4905      	ldr	r1, [pc, #20]	; (d98e8 <_ZN5spark10JSONWriter5valueEb+0x28>)
   d98d2:	2204      	movs	r2, #4
        write("false", 5);
   d98d4:	4620      	mov	r0, r4
   d98d6:	4798      	blx	r3
    state_ = NEXT;
   d98d8:	2301      	movs	r3, #1
   d98da:	7123      	strb	r3, [r4, #4]
}
   d98dc:	4620      	mov	r0, r4
   d98de:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   d98e0:	4902      	ldr	r1, [pc, #8]	; (d98ec <_ZN5spark10JSONWriter5valueEb+0x2c>)
   d98e2:	2205      	movs	r2, #5
   d98e4:	e7f6      	b.n	d98d4 <_ZN5spark10JSONWriter5valueEb+0x14>
   d98e6:	bf00      	nop
   d98e8:	000de1c2 	.word	0x000de1c2
   d98ec:	000de1bc 	.word	0x000de1bc

000d98f0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d98f0:	b513      	push	{r0, r1, r4, lr}
   d98f2:	4604      	mov	r4, r0
   d98f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d98f6:	f7ff ffc9 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d98fa:	6823      	ldr	r3, [r4, #0]
   d98fc:	9a01      	ldr	r2, [sp, #4]
   d98fe:	68db      	ldr	r3, [r3, #12]
   d9900:	4903      	ldr	r1, [pc, #12]	; (d9910 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9902:	4620      	mov	r0, r4
   d9904:	4798      	blx	r3
    state_ = NEXT;
   d9906:	2301      	movs	r3, #1
}
   d9908:	4620      	mov	r0, r4
    state_ = NEXT;
   d990a:	7123      	strb	r3, [r4, #4]
}
   d990c:	b002      	add	sp, #8
   d990e:	bd10      	pop	{r4, pc}
   d9910:	000de068 	.word	0x000de068

000d9914 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   d9914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9916:	4604      	mov	r4, r0
   d9918:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   d991c:	f7ff ffb6 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   d9920:	6823      	ldr	r3, [r4, #0]
   d9922:	4905      	ldr	r1, [pc, #20]	; (d9938 <_ZN5spark10JSONWriter5valueEd+0x24>)
   d9924:	68dd      	ldr	r5, [r3, #12]
   d9926:	4620      	mov	r0, r4
   d9928:	463b      	mov	r3, r7
   d992a:	4632      	mov	r2, r6
   d992c:	47a8      	blx	r5
    state_ = NEXT;
   d992e:	2301      	movs	r3, #1
   d9930:	7123      	strb	r3, [r4, #4]
}
   d9932:	4620      	mov	r0, r4
   d9934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9936:	bf00      	nop
   d9938:	000de1c7 	.word	0x000de1c7

000d993c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9940:	460d      	mov	r5, r1
   d9942:	4617      	mov	r7, r2
    write('"');
   d9944:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   d9946:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d99e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d994a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d994c:	442f      	add	r7, r5
    write('"');
   d994e:	f7ff fe0c 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d9952:	4629      	mov	r1, r5
    while (s != end) {
   d9954:	42bd      	cmp	r5, r7
   d9956:	462a      	mov	r2, r5
   d9958:	d038      	beq.n	d99cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d995a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d995e:	2e22      	cmp	r6, #34	; 0x22
   d9960:	d003      	beq.n	d996a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9962:	2e5c      	cmp	r6, #92	; 0x5c
   d9964:	d001      	beq.n	d996a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9966:	2e1f      	cmp	r6, #31
   d9968:	d8f4      	bhi.n	d9954 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d996a:	6823      	ldr	r3, [r4, #0]
   d996c:	1a52      	subs	r2, r2, r1
   d996e:	689b      	ldr	r3, [r3, #8]
   d9970:	4620      	mov	r0, r4
   d9972:	4798      	blx	r3
            write('\\');
   d9974:	215c      	movs	r1, #92	; 0x5c
   d9976:	4620      	mov	r0, r4
   d9978:	f7ff fdf7 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d997c:	2e0d      	cmp	r6, #13
   d997e:	d80a      	bhi.n	d9996 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d9980:	2e07      	cmp	r6, #7
   d9982:	d91c      	bls.n	d99be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9984:	f1a6 0308 	sub.w	r3, r6, #8
   d9988:	2b05      	cmp	r3, #5
   d998a:	d818      	bhi.n	d99be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d998c:	e8df f003 	tbb	[pc, r3]
   d9990:	17110f0d 	.word	0x17110f0d
   d9994:	1513      	.short	0x1513
   d9996:	2e22      	cmp	r6, #34	; 0x22
   d9998:	d001      	beq.n	d999e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d999a:	2e5c      	cmp	r6, #92	; 0x5c
   d999c:	d10f      	bne.n	d99be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d999e:	4631      	mov	r1, r6
                write('b');
   d99a0:	4620      	mov	r0, r4
   d99a2:	f7ff fde2 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   d99a6:	4629      	mov	r1, r5
    while (s != end) {
   d99a8:	e7d4      	b.n	d9954 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d99aa:	2162      	movs	r1, #98	; 0x62
   d99ac:	e7f8      	b.n	d99a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d99ae:	2174      	movs	r1, #116	; 0x74
   d99b0:	e7f6      	b.n	d99a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d99b2:	216e      	movs	r1, #110	; 0x6e
   d99b4:	e7f4      	b.n	d99a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d99b6:	2166      	movs	r1, #102	; 0x66
   d99b8:	e7f2      	b.n	d99a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d99ba:	2172      	movs	r1, #114	; 0x72
   d99bc:	e7f0      	b.n	d99a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d99be:	6823      	ldr	r3, [r4, #0]
   d99c0:	4632      	mov	r2, r6
   d99c2:	68db      	ldr	r3, [r3, #12]
   d99c4:	4641      	mov	r1, r8
   d99c6:	4620      	mov	r0, r4
   d99c8:	4798      	blx	r3
                break;
   d99ca:	e7ec      	b.n	d99a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   d99cc:	428d      	cmp	r5, r1
   d99ce:	d004      	beq.n	d99da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d99d0:	6823      	ldr	r3, [r4, #0]
   d99d2:	1a6a      	subs	r2, r5, r1
   d99d4:	689b      	ldr	r3, [r3, #8]
   d99d6:	4620      	mov	r0, r4
   d99d8:	4798      	blx	r3
    write('"');
   d99da:	2122      	movs	r1, #34	; 0x22
   d99dc:	4620      	mov	r0, r4
   d99de:	f7ff fdc4 	bl	d956a <_ZN5spark10JSONWriter5writeEc>
}
   d99e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d99e6:	bf00      	nop
   d99e8:	000de1ca 	.word	0x000de1ca

000d99ec <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d99ec:	b513      	push	{r0, r1, r4, lr}
   d99ee:	4604      	mov	r4, r0
   d99f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d99f4:	f7ff ff4a 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d99f8:	4620      	mov	r0, r4
   d99fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d99fe:	f7ff ff9d 	bl	d993c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9a02:	2302      	movs	r3, #2
}
   d9a04:	4620      	mov	r0, r4
    state_ = VALUE;
   d9a06:	7123      	strb	r3, [r4, #4]
}
   d9a08:	b002      	add	sp, #8
   d9a0a:	bd10      	pop	{r4, pc}

000d9a0c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9a0c:	b513      	push	{r0, r1, r4, lr}
   d9a0e:	4604      	mov	r4, r0
   d9a10:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9a14:	f7ff ff3a 	bl	d988c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9a18:	4620      	mov	r0, r4
   d9a1a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9a1e:	f7ff ff8d 	bl	d993c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9a22:	2301      	movs	r3, #1
}
   d9a24:	4620      	mov	r0, r4
    state_ = NEXT;
   d9a26:	7123      	strb	r3, [r4, #4]
}
   d9a28:	b002      	add	sp, #8
   d9a2a:	bd10      	pop	{r4, pc}

000d9a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9a2c:	b538      	push	{r3, r4, r5, lr}
   d9a2e:	2300      	movs	r3, #0
   d9a30:	4604      	mov	r4, r0
   d9a32:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a34:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d9a36:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a38:	f7fa fb2d 	bl	d4096 <_Znwj>
   d9a3c:	b128      	cbz	r0, d9a4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d9a3e:	2301      	movs	r3, #1
   d9a40:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d9a44:	4b02      	ldr	r3, [pc, #8]	; (d9a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d9a46:	6003      	str	r3, [r0, #0]
   d9a48:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a4a:	6020      	str	r0, [r4, #0]
	}
   d9a4c:	4620      	mov	r0, r4
   d9a4e:	bd38      	pop	{r3, r4, r5, pc}
   d9a50:	000de1d8 	.word	0x000de1d8

000d9a54 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d9a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a56:	4604      	mov	r4, r0
   d9a58:	b087      	sub	sp, #28
   d9a5a:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d9a5c:	200c      	movs	r0, #12
   d9a5e:	4927      	ldr	r1, [pc, #156]	; (d9afc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d9a60:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d9a62:	f000 ff36 	bl	da8d2 <_ZnwjRKSt9nothrow_t>
   d9a66:	4601      	mov	r1, r0
   d9a68:	b118      	cbz	r0, d9a72 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d9a6a:	2300      	movs	r3, #0
   d9a6c:	e9c0 3300 	strd	r3, r3, [r0]
   d9a70:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d9a72:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9a74:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d9a76:	f7ff ffd9 	bl	d9a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d9a7a:	9a02      	ldr	r2, [sp, #8]
   d9a7c:	b942      	cbnz	r2, d9a90 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9a7e:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d9a82:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d9a84:	a803      	add	r0, sp, #12
   d9a86:	f7fc f9c3 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9a8a:	4620      	mov	r0, r4
   d9a8c:	b007      	add	sp, #28
   d9a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d9a90:	2300      	movs	r3, #0
   d9a92:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d9a94:	4629      	mov	r1, r5
   d9a96:	ab01      	add	r3, sp, #4
   d9a98:	4630      	mov	r0, r6
   d9a9a:	f7ff fdbf 	bl	d961c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d9a9e:	b918      	cbnz	r0, d9aa8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9aa0:	e9c4 0000 	strd	r0, r0, [r4]
   d9aa4:	60a0      	str	r0, [r4, #8]
}
   d9aa6:	e7ed      	b.n	d9a84 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d9aa8:	4914      	ldr	r1, [pc, #80]	; (d9afc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9aaa:	9f02      	ldr	r7, [sp, #8]
   d9aac:	1c68      	adds	r0, r5, #1
   d9aae:	f000 ff12 	bl	da8d6 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d9ab2:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d9ab4:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d9ab6:	6858      	ldr	r0, [r3, #4]
   d9ab8:	2800      	cmp	r0, #0
   d9aba:	d0f1      	beq.n	d9aa0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d9abc:	462a      	mov	r2, r5
   d9abe:	4631      	mov	r1, r6
   d9ac0:	f001 fd7a 	bl	db5b8 <memcpy>
   d9ac4:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9ac6:	9901      	ldr	r1, [sp, #4]
   d9ac8:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d9aca:	2201      	movs	r2, #1
   d9acc:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9ace:	685a      	ldr	r2, [r3, #4]
   d9ad0:	f7ff fe68 	bl	d97a4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d9ad4:	2800      	cmp	r0, #0
   d9ad6:	d0e3      	beq.n	d9aa0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d9ad8:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d9ada:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9adc:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d9ade:	9b03      	ldr	r3, [sp, #12]
   d9ae0:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d9ae2:	b113      	cbz	r3, d9aea <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d9ae4:	685a      	ldr	r2, [r3, #4]
   d9ae6:	3201      	adds	r2, #1
   d9ae8:	605a      	str	r2, [r3, #4]
   d9aea:	aa04      	add	r2, sp, #16
   d9aec:	4620      	mov	r0, r4
   d9aee:	f7ff fd5f 	bl	d95b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9af2:	a805      	add	r0, sp, #20
   d9af4:	f7fc f98c 	bl	d5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9af8:	e7c4      	b.n	d9a84 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d9afa:	bf00      	nop
   d9afc:	000de30c 	.word	0x000de30c

000d9b00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9b00:	4b01      	ldr	r3, [pc, #4]	; (d9b08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9b02:	4a02      	ldr	r2, [pc, #8]	; (d9b0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9b04:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9b06:	4770      	bx	lr
   d9b08:	2003e618 	.word	0x2003e618
   d9b0c:	000de204 	.word	0x000de204

000d9b10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9b10:	2300      	movs	r3, #0
   d9b12:	6840      	ldr	r0, [r0, #4]
   d9b14:	461a      	mov	r2, r3
   d9b16:	f7fe bf69 	b.w	d89ec <network_connect>

000d9b1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9b1a:	6840      	ldr	r0, [r0, #4]
   d9b1c:	2200      	movs	r2, #0
   d9b1e:	2102      	movs	r1, #2
   d9b20:	f7fe bf74 	b.w	d8a0c <network_disconnect>

000d9b24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9b24:	2200      	movs	r2, #0
   d9b26:	6840      	ldr	r0, [r0, #4]
   d9b28:	4611      	mov	r1, r2
   d9b2a:	f7fe bf67 	b.w	d89fc <network_connecting>

000d9b2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9b2e:	2200      	movs	r2, #0
   d9b30:	6840      	ldr	r0, [r0, #4]
   d9b32:	4611      	mov	r1, r2
   d9b34:	f7fe bf72 	b.w	d8a1c <network_ready>

000d9b38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9b38:	2300      	movs	r3, #0
   d9b3a:	6840      	ldr	r0, [r0, #4]
   d9b3c:	461a      	mov	r2, r3
   d9b3e:	4619      	mov	r1, r3
   d9b40:	f7fe bf74 	b.w	d8a2c <network_on>

000d9b44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9b44:	2300      	movs	r3, #0
   d9b46:	6840      	ldr	r0, [r0, #4]
   d9b48:	461a      	mov	r2, r3
   d9b4a:	4619      	mov	r1, r3
   d9b4c:	f7fe bf76 	b.w	d8a3c <network_off>

000d9b50 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9b50:	6840      	ldr	r0, [r0, #4]
   d9b52:	2100      	movs	r1, #0
   d9b54:	f7fe bf9a 	b.w	d8a8c <network_is_on>

000d9b58 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9b58:	6840      	ldr	r0, [r0, #4]
   d9b5a:	2100      	movs	r1, #0
   d9b5c:	f7fe bf9e 	b.w	d8a9c <network_is_off>

000d9b60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9b60:	6840      	ldr	r0, [r0, #4]
   d9b62:	2200      	movs	r2, #0
   d9b64:	f081 0101 	eor.w	r1, r1, #1
   d9b68:	f7fe bf70 	b.w	d8a4c <network_listen>

000d9b6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9b6c:	6840      	ldr	r0, [r0, #4]
   d9b6e:	2200      	movs	r2, #0
   d9b70:	f7fe bf7c 	b.w	d8a6c <network_set_listen_timeout>

000d9b74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9b74:	2200      	movs	r2, #0
   d9b76:	6840      	ldr	r0, [r0, #4]
   d9b78:	4611      	mov	r1, r2
   d9b7a:	f7fe bf7f 	b.w	d8a7c <network_get_listen_timeout>

000d9b7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9b7e:	2200      	movs	r2, #0
   d9b80:	6840      	ldr	r0, [r0, #4]
   d9b82:	4611      	mov	r1, r2
   d9b84:	f7fe bf6a 	b.w	d8a5c <network_listening>

000d9b88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9b8c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9b8e:	b095      	sub	sp, #84	; 0x54
   d9b90:	4616      	mov	r6, r2
   d9b92:	460d      	mov	r5, r1
   d9b94:	4607      	mov	r7, r0
    IPAddress addr;
   d9b96:	f7ff fc2d 	bl	d93f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9b9a:	4621      	mov	r1, r4
   d9b9c:	2218      	movs	r2, #24
   d9b9e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9ba0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9ba2:	f001 fd31 	bl	db608 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9ba6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9ba8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9bac:	4621      	mov	r1, r4
   d9bae:	466b      	mov	r3, sp
   d9bb0:	aa0c      	add	r2, sp, #48	; 0x30
   d9bb2:	4630      	mov	r0, r6
   d9bb4:	f7fe fdac 	bl	d8710 <netdb_getaddrinfo>
    if (!r) {
   d9bb8:	4604      	mov	r4, r0
   d9bba:	2800      	cmp	r0, #0
   d9bbc:	d14c      	bne.n	d9c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9bbe:	4602      	mov	r2, r0
   d9bc0:	2101      	movs	r1, #1
   d9bc2:	6868      	ldr	r0, [r5, #4]
   d9bc4:	f7fe ff2a 	bl	d8a1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9bc8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9bca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9bcc:	4622      	mov	r2, r4
   d9bce:	6868      	ldr	r0, [r5, #4]
   d9bd0:	f7fe ff24 	bl	d8a1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9bd4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9bd6:	4681      	mov	r9, r0
        bool ok = false;
   d9bd8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9bda:	2e00      	cmp	r6, #0
   d9bdc:	d03c      	beq.n	d9c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d9bde:	2900      	cmp	r1, #0
   d9be0:	d13a      	bne.n	d9c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9be2:	6873      	ldr	r3, [r6, #4]
   d9be4:	2b02      	cmp	r3, #2
   d9be6:	d003      	beq.n	d9bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9be8:	2b0a      	cmp	r3, #10
   d9bea:	d011      	beq.n	d9c10 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9bec:	69f6      	ldr	r6, [r6, #28]
   d9bee:	e7f4      	b.n	d9bda <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9bf0:	f1b8 0f00 	cmp.w	r8, #0
   d9bf4:	d00a      	beq.n	d9c0c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9bf6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d9bf8:	a806      	add	r0, sp, #24
   d9bfa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d9bfc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d9bfe:	f7ff fc27 	bl	d9450 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d9c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9c04:	1d3c      	adds	r4, r7, #4
   d9c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9c08:	682b      	ldr	r3, [r5, #0]
   d9c0a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d9c0c:	4641      	mov	r1, r8
   d9c0e:	e7ed      	b.n	d9bec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9c10:	f1b9 0f00 	cmp.w	r9, #0
   d9c14:	d101      	bne.n	d9c1a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9c16:	4649      	mov	r1, r9
   d9c18:	e7e8      	b.n	d9bec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9c1a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9c1c:	2210      	movs	r2, #16
   d9c1e:	a801      	add	r0, sp, #4
   d9c20:	f001 fcf2 	bl	db608 <memset>
                    a.v = 6;
   d9c24:	2306      	movs	r3, #6
   d9c26:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9c2a:	ad01      	add	r5, sp, #4
   d9c2c:	f104 0308 	add.w	r3, r4, #8
   d9c30:	3418      	adds	r4, #24
   d9c32:	6818      	ldr	r0, [r3, #0]
   d9c34:	6859      	ldr	r1, [r3, #4]
   d9c36:	462a      	mov	r2, r5
   d9c38:	c203      	stmia	r2!, {r0, r1}
   d9c3a:	3308      	adds	r3, #8
   d9c3c:	42a3      	cmp	r3, r4
   d9c3e:	4615      	mov	r5, r2
   d9c40:	d1f7      	bne.n	d9c32 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9c42:	a901      	add	r1, sp, #4
   d9c44:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9c46:	ad07      	add	r5, sp, #28
   d9c48:	f7ff fbe2 	bl	d9410 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9c4e:	1d3c      	adds	r4, r7, #4
   d9c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9c52:	682b      	ldr	r3, [r5, #0]
   d9c54:	7023      	strb	r3, [r4, #0]
   d9c56:	e7de      	b.n	d9c16 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9c58:	9800      	ldr	r0, [sp, #0]
   d9c5a:	f7fe fd51 	bl	d8700 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9c5e:	4638      	mov	r0, r7
   d9c60:	b015      	add	sp, #84	; 0x54
   d9c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9c68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9c68:	4b02      	ldr	r3, [pc, #8]	; (d9c74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9c6a:	4a03      	ldr	r2, [pc, #12]	; (d9c78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9c6c:	601a      	str	r2, [r3, #0]
   d9c6e:	2200      	movs	r2, #0
   d9c70:	605a      	str	r2, [r3, #4]

} // spark
   d9c72:	4770      	bx	lr
   d9c74:	2003e61c 	.word	0x2003e61c
   d9c78:	000de210 	.word	0x000de210

000d9c7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c7e:	4606      	mov	r6, r0
   d9c80:	460d      	mov	r5, r1
  size_t n = 0;
   d9c82:	188f      	adds	r7, r1, r2
   d9c84:	2400      	movs	r4, #0
  while (size--) {
   d9c86:	42bd      	cmp	r5, r7
   d9c88:	d00c      	beq.n	d9ca4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9c8a:	6833      	ldr	r3, [r6, #0]
   d9c8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9c90:	689b      	ldr	r3, [r3, #8]
   d9c92:	4630      	mov	r0, r6
   d9c94:	4798      	blx	r3
     if (chunk>=0)
   d9c96:	1e03      	subs	r3, r0, #0
   d9c98:	db01      	blt.n	d9c9e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9c9a:	441c      	add	r4, r3
  while (size--) {
   d9c9c:	e7f3      	b.n	d9c86 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9c9e:	2c00      	cmp	r4, #0
   d9ca0:	bf08      	it	eq
   d9ca2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9ca4:	4620      	mov	r0, r4
   d9ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ca8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9ca8:	b513      	push	{r0, r1, r4, lr}
   d9caa:	4604      	mov	r4, r0
    }
   d9cac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9cae:	b159      	cbz	r1, d9cc8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9cb0:	9101      	str	r1, [sp, #4]
   d9cb2:	f001 fd04 	bl	db6be <strlen>
   d9cb6:	6823      	ldr	r3, [r4, #0]
   d9cb8:	9901      	ldr	r1, [sp, #4]
   d9cba:	68db      	ldr	r3, [r3, #12]
   d9cbc:	4602      	mov	r2, r0
   d9cbe:	4620      	mov	r0, r4
    }
   d9cc0:	b002      	add	sp, #8
   d9cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9cc6:	4718      	bx	r3
    }
   d9cc8:	b002      	add	sp, #8
   d9cca:	bd10      	pop	{r4, pc}

000d9ccc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9ccc:	6803      	ldr	r3, [r0, #0]
   d9cce:	689b      	ldr	r3, [r3, #8]
   d9cd0:	4718      	bx	r3

000d9cd2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9cd2:	b530      	push	{r4, r5, lr}
   d9cd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9cd6:	2300      	movs	r3, #0
   d9cd8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9cdc:	2a01      	cmp	r2, #1
   d9cde:	bf98      	it	ls
   d9ce0:	220a      	movls	r2, #10
   d9ce2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9ce4:	460d      	mov	r5, r1
   d9ce6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9cea:	fb01 5312 	mls	r3, r1, r2, r5
   d9cee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9cf2:	2b09      	cmp	r3, #9
   d9cf4:	bf94      	ite	ls
   d9cf6:	3330      	addls	r3, #48	; 0x30
   d9cf8:	3337      	addhi	r3, #55	; 0x37
   d9cfa:	b2db      	uxtb	r3, r3
  } while(n);
   d9cfc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9cfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9d02:	d9ef      	bls.n	d9ce4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9d04:	4621      	mov	r1, r4
   d9d06:	f7ff ffcf 	bl	d9ca8 <_ZN5Print5writeEPKc>
}
   d9d0a:	b00b      	add	sp, #44	; 0x2c
   d9d0c:	bd30      	pop	{r4, r5, pc}

000d9d0e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9d0e:	b510      	push	{r4, lr}
   d9d10:	4604      	mov	r4, r0
   d9d12:	f7fa faba 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d9d16:	4620      	mov	r0, r4
   d9d18:	bd10      	pop	{r4, pc}
	...

000d9d1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9d1c:	4803      	ldr	r0, [pc, #12]	; (d9d2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9d1e:	4a04      	ldr	r2, [pc, #16]	; (d9d30 <_GLOBAL__sub_I_RGB+0x14>)
   d9d20:	4904      	ldr	r1, [pc, #16]	; (d9d34 <_GLOBAL__sub_I_RGB+0x18>)
   d9d22:	2300      	movs	r3, #0
   d9d24:	6083      	str	r3, [r0, #8]
   d9d26:	f000 bdcd 	b.w	da8c4 <__aeabi_atexit>
   d9d2a:	bf00      	nop
   d9d2c:	2003e624 	.word	0x2003e624
   d9d30:	2003dee0 	.word	0x2003dee0
   d9d34:	000d9d0f 	.word	0x000d9d0f

000d9d38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9d38:	b510      	push	{r4, lr}
   d9d3a:	4604      	mov	r4, r0
   d9d3c:	4608      	mov	r0, r1
{
    _spi = spi;
   d9d3e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9d40:	f7fe fcee 	bl	d8720 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9d44:	2300      	movs	r3, #0
   d9d46:	6063      	str	r3, [r4, #4]
}
   d9d48:	4620      	mov	r0, r4
   d9d4a:	bd10      	pop	{r4, pc}

000d9d4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9d4c:	b510      	push	{r4, lr}
   d9d4e:	4604      	mov	r4, r0
{
	free(buffer);
   d9d50:	6800      	ldr	r0, [r0, #0]
   d9d52:	f7fe feb3 	bl	d8abc <free>
}
   d9d56:	4620      	mov	r0, r4
   d9d58:	bd10      	pop	{r4, pc}

000d9d5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9d5a:	b510      	push	{r4, lr}
   d9d5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9d5e:	6800      	ldr	r0, [r0, #0]
   d9d60:	b108      	cbz	r0, d9d66 <_ZN6String10invalidateEv+0xc>
   d9d62:	f7fe feab 	bl	d8abc <free>
	buffer = NULL;
   d9d66:	2300      	movs	r3, #0
	capacity = len = 0;
   d9d68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9d6c:	6023      	str	r3, [r4, #0]
}
   d9d6e:	bd10      	pop	{r4, pc}

000d9d70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9d70:	b538      	push	{r3, r4, r5, lr}
   d9d72:	4604      	mov	r4, r0
   d9d74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9d76:	6800      	ldr	r0, [r0, #0]
   d9d78:	3101      	adds	r1, #1
   d9d7a:	f7fe fea7 	bl	d8acc <realloc>
	if (newbuffer) {
   d9d7e:	b110      	cbz	r0, d9d86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9d80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9d84:	2001      	movs	r0, #1
	}
	return 0;
}
   d9d86:	bd38      	pop	{r3, r4, r5, pc}

000d9d88 <_ZN6String7reserveEj>:
{
   d9d88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9d8a:	6803      	ldr	r3, [r0, #0]
{
   d9d8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9d8e:	b123      	cbz	r3, d9d9a <_ZN6String7reserveEj+0x12>
   d9d90:	6843      	ldr	r3, [r0, #4]
   d9d92:	428b      	cmp	r3, r1
   d9d94:	d301      	bcc.n	d9d9a <_ZN6String7reserveEj+0x12>
   d9d96:	2001      	movs	r0, #1
}
   d9d98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9d9a:	4620      	mov	r0, r4
   d9d9c:	f7ff ffe8 	bl	d9d70 <_ZN6String12changeBufferEj>
   d9da0:	2800      	cmp	r0, #0
   d9da2:	d0f9      	beq.n	d9d98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9da4:	68a3      	ldr	r3, [r4, #8]
   d9da6:	2b00      	cmp	r3, #0
   d9da8:	d1f5      	bne.n	d9d96 <_ZN6String7reserveEj+0xe>
   d9daa:	6822      	ldr	r2, [r4, #0]
   d9dac:	7013      	strb	r3, [r2, #0]
   d9dae:	e7f2      	b.n	d9d96 <_ZN6String7reserveEj+0xe>

000d9db0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9db2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9db4:	4611      	mov	r1, r2
   d9db6:	9201      	str	r2, [sp, #4]
{
   d9db8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9dba:	f7ff ffe5 	bl	d9d88 <_ZN6String7reserveEj>
   d9dbe:	9a01      	ldr	r2, [sp, #4]
   d9dc0:	b928      	cbnz	r0, d9dce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9dc2:	4620      	mov	r0, r4
   d9dc4:	f7ff ffc9 	bl	d9d5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9dc8:	4620      	mov	r0, r4
   d9dca:	b003      	add	sp, #12
   d9dcc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9dce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9dd0:	4629      	mov	r1, r5
   d9dd2:	6820      	ldr	r0, [r4, #0]
   d9dd4:	f001 fbf0 	bl	db5b8 <memcpy>
	buffer[len] = 0;
   d9dd8:	6822      	ldr	r2, [r4, #0]
   d9dda:	68a3      	ldr	r3, [r4, #8]
   d9ddc:	2100      	movs	r1, #0
   d9dde:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9de0:	e7f2      	b.n	d9dc8 <_ZN6String4copyEPKcj+0x18>

000d9de2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9de2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9de4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9de6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9dea:	4604      	mov	r4, r0
	len = 0;
   d9dec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9dee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9df0:	b141      	cbz	r1, d9e04 <_ZN6StringC1EPKc+0x22>
   d9df2:	4608      	mov	r0, r1
   d9df4:	9101      	str	r1, [sp, #4]
   d9df6:	f001 fc62 	bl	db6be <strlen>
   d9dfa:	9901      	ldr	r1, [sp, #4]
   d9dfc:	4602      	mov	r2, r0
   d9dfe:	4620      	mov	r0, r4
   d9e00:	f7ff ffd6 	bl	d9db0 <_ZN6String4copyEPKcj>
}
   d9e04:	4620      	mov	r0, r4
   d9e06:	b002      	add	sp, #8
   d9e08:	bd10      	pop	{r4, pc}

000d9e0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9e0a:	4288      	cmp	r0, r1
{
   d9e0c:	b510      	push	{r4, lr}
   d9e0e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9e10:	d005      	beq.n	d9e1e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9e12:	680b      	ldr	r3, [r1, #0]
   d9e14:	b12b      	cbz	r3, d9e22 <_ZN6StringaSERKS_+0x18>
   d9e16:	688a      	ldr	r2, [r1, #8]
   d9e18:	4619      	mov	r1, r3
   d9e1a:	f7ff ffc9 	bl	d9db0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9e1e:	4620      	mov	r0, r4
   d9e20:	bd10      	pop	{r4, pc}
	else invalidate();
   d9e22:	f7ff ff9a 	bl	d9d5a <_ZN6String10invalidateEv>
   d9e26:	e7fa      	b.n	d9e1e <_ZN6StringaSERKS_+0x14>

000d9e28 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9e28:	b510      	push	{r4, lr}
	buffer = NULL;
   d9e2a:	2300      	movs	r3, #0
String::String(const String &value)
   d9e2c:	4604      	mov	r4, r0
	capacity = 0;
   d9e2e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9e32:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e34:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9e36:	f7ff ffe8 	bl	d9e0a <_ZN6StringaSERKS_>
}
   d9e3a:	4620      	mov	r0, r4
   d9e3c:	bd10      	pop	{r4, pc}

000d9e3e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9e3e:	b513      	push	{r0, r1, r4, lr}
   d9e40:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9e42:	b159      	cbz	r1, d9e5c <_ZN6StringaSEPKc+0x1e>
   d9e44:	4608      	mov	r0, r1
   d9e46:	9101      	str	r1, [sp, #4]
   d9e48:	f001 fc39 	bl	db6be <strlen>
   d9e4c:	9901      	ldr	r1, [sp, #4]
   d9e4e:	4602      	mov	r2, r0
   d9e50:	4620      	mov	r0, r4
   d9e52:	f7ff ffad 	bl	d9db0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9e56:	4620      	mov	r0, r4
   d9e58:	b002      	add	sp, #8
   d9e5a:	bd10      	pop	{r4, pc}
	else invalidate();
   d9e5c:	f7ff ff7d 	bl	d9d5a <_ZN6String10invalidateEv>
   d9e60:	e7f9      	b.n	d9e56 <_ZN6StringaSEPKc+0x18>

000d9e62 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d9e62:	b510      	push	{r4, lr}
   d9e64:	4604      	mov	r4, r0
   d9e66:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d9e68:	2300      	movs	r3, #0
	capacity = 0;
   d9e6a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9e6e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9e70:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d9e72:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d9e74:	a901      	add	r1, sp, #4
   d9e76:	f000 fba5 	bl	da5c4 <itoa>
	*this = buf;
   d9e7a:	a901      	add	r1, sp, #4
   d9e7c:	4620      	mov	r0, r4
   d9e7e:	f7ff ffde 	bl	d9e3e <_ZN6StringaSEPKc>
}
   d9e82:	4620      	mov	r0, r4
   d9e84:	b00a      	add	sp, #40	; 0x28
   d9e86:	bd10      	pop	{r4, pc}

000d9e88 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9e88:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9e8a:	6882      	ldr	r2, [r0, #8]
   d9e8c:	b93a      	cbnz	r2, d9e9e <_ZNK6String6equalsEPKc+0x16>
   d9e8e:	b121      	cbz	r1, d9e9a <_ZNK6String6equalsEPKc+0x12>
   d9e90:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9e92:	fab0 f080 	clz	r0, r0
   d9e96:	0940      	lsrs	r0, r0, #5
   d9e98:	e000      	b.n	d9e9c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9e9a:	2001      	movs	r0, #1
}
   d9e9c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9e9e:	6800      	ldr	r0, [r0, #0]
   d9ea0:	b909      	cbnz	r1, d9ea6 <_ZNK6String6equalsEPKc+0x1e>
   d9ea2:	7800      	ldrb	r0, [r0, #0]
   d9ea4:	e7f5      	b.n	d9e92 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d9ea6:	f001 fbdb 	bl	db660 <strcmp>
   d9eaa:	e7f2      	b.n	d9e92 <_ZNK6String6equalsEPKc+0xa>

000d9eac <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9eac:	b558      	push	{r3, r4, r6, lr}
   d9eae:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9eb0:	b12a      	cbz	r2, d9ebe <_ZNK6String8getBytesEPhjj+0x12>
   d9eb2:	b121      	cbz	r1, d9ebe <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d9eb4:	6884      	ldr	r4, [r0, #8]
   d9eb6:	42a3      	cmp	r3, r4
   d9eb8:	d302      	bcc.n	d9ec0 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9eba:	2300      	movs	r3, #0
   d9ebc:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9ebe:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9ec0:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9ec2:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d9ec4:	6801      	ldr	r1, [r0, #0]
   d9ec6:	4294      	cmp	r4, r2
   d9ec8:	bf28      	it	cs
   d9eca:	4614      	movcs	r4, r2
   d9ecc:	4419      	add	r1, r3
   d9ece:	4622      	mov	r2, r4
   d9ed0:	4630      	mov	r0, r6
   d9ed2:	f001 fc0e 	bl	db6f2 <strncpy>
	buf[n] = 0;
   d9ed6:	2300      	movs	r3, #0
   d9ed8:	5533      	strb	r3, [r6, r4]
   d9eda:	e7f0      	b.n	d9ebe <_ZNK6String8getBytesEPhjj+0x12>

000d9edc <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d9edc:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d9ede:	6800      	ldr	r0, [r0, #0]
   d9ee0:	b140      	cbz	r0, d9ef4 <_ZNK6String7toFloatEv+0x18>
   d9ee2:	f001 fb41 	bl	db568 <atof>
   d9ee6:	ec51 0b10 	vmov	r0, r1, d0
   d9eea:	f001 faa9 	bl	db440 <__aeabi_d2f>
   d9eee:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d9ef2:	bd08      	pop	{r3, pc}
	return 0;
   d9ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9efc <_ZNK6String7toFloatEv+0x20>
   d9ef8:	e7fb      	b.n	d9ef2 <_ZNK6String7toFloatEv+0x16>
   d9efa:	bf00      	nop
   d9efc:	00000000 	.word	0x00000000

000d9f00 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9f00:	b40e      	push	{r1, r2, r3}
   d9f02:	b570      	push	{r4, r5, r6, lr}
   d9f04:	b087      	sub	sp, #28
   d9f06:	ad0b      	add	r5, sp, #44	; 0x2c
   d9f08:	4604      	mov	r4, r0
   d9f0a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f0e:	9201      	str	r2, [sp, #4]
   d9f10:	462b      	mov	r3, r5
   d9f12:	2105      	movs	r1, #5
   d9f14:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d9f16:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f18:	f7fe fdf0 	bl	d8afc <vsnprintf>
    va_end(marker);

    String result;
   d9f1c:	490b      	ldr	r1, [pc, #44]	; (d9f4c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f1e:	4606      	mov	r6, r0
    String result;
   d9f20:	4620      	mov	r0, r4
   d9f22:	f7ff ff5e 	bl	d9de2 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d9f26:	4631      	mov	r1, r6
   d9f28:	4620      	mov	r0, r4
   d9f2a:	f7ff ff2d 	bl	d9d88 <_ZN6String7reserveEj>
    if (result.buffer) {
   d9f2e:	6820      	ldr	r0, [r4, #0]
   d9f30:	b130      	cbz	r0, d9f40 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9f32:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d9f34:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9f36:	462b      	mov	r3, r5
   d9f38:	1c71      	adds	r1, r6, #1
   d9f3a:	f7fe fddf 	bl	d8afc <vsnprintf>
        va_end(marker);
        result.len = n;
   d9f3e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d9f40:	4620      	mov	r0, r4
   d9f42:	b007      	add	sp, #28
   d9f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9f48:	b003      	add	sp, #12
   d9f4a:	4770      	bx	lr
   d9f4c:	000de334 	.word	0x000de334

000d9f50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d9f50:	b507      	push	{r0, r1, r2, lr}
   d9f52:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9f54:	2100      	movs	r1, #0
{
   d9f56:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9f58:	9100      	str	r1, [sp, #0]
   d9f5a:	2001      	movs	r0, #1
   d9f5c:	218c      	movs	r1, #140	; 0x8c
   d9f5e:	f7fe fcd3 	bl	d8908 <system_reset>
}
   d9f62:	b003      	add	sp, #12
   d9f64:	f85d fb04 	ldr.w	pc, [sp], #4

000d9f68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d9f68:	4601      	mov	r1, r0
    reset(0, flags);
   d9f6a:	2000      	movs	r0, #0
   d9f6c:	f7ff bff0 	b.w	d9f50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9f70 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9f70:	2000      	movs	r0, #0
   d9f72:	f7ff bff9 	b.w	d9f68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9f78 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9f78:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9f7a:	4b09      	ldr	r3, [pc, #36]	; (d9fa0 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9f7c:	4c09      	ldr	r4, [pc, #36]	; (d9fa4 <_GLOBAL__sub_I_System+0x2c>)
   d9f7e:	2202      	movs	r2, #2
   d9f80:	2000      	movs	r0, #0
   d9f82:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9f84:	4b08      	ldr	r3, [pc, #32]	; (d9fa8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9f86:	6020      	str	r0, [r4, #0]
   d9f88:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9f8a:	71a0      	strb	r0, [r4, #6]
   d9f8c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9f8e:	f7fe fc6f 	bl	d8870 <set_system_mode>
SystemClass System;
   d9f92:	4620      	mov	r0, r4
   d9f94:	4a05      	ldr	r2, [pc, #20]	; (d9fac <_GLOBAL__sub_I_System+0x34>)
   d9f96:	4906      	ldr	r1, [pc, #24]	; (d9fb0 <_GLOBAL__sub_I_System+0x38>)
   d9f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9f9c:	f000 bc92 	b.w	da8c4 <__aeabi_atexit>
   d9fa0:	2003e640 	.word	0x2003e640
   d9fa4:	2003e634 	.word	0x2003e634
   d9fa8:	ffff0000 	.word	0xffff0000
   d9fac:	2003dee0 	.word	0x2003dee0
   d9fb0:	000d4273 	.word	0x000d4273

000d9fb4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9fb8:	4a15      	ldr	r2, [pc, #84]	; (da010 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9fba:	f8df 8060 	ldr.w	r8, [pc, #96]	; da01c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9fbe:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9fc2:	18c0      	adds	r0, r0, r3
   d9fc4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9fc8:	4a12      	ldr	r2, [pc, #72]	; (da014 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9fca:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9fce:	18c6      	adds	r6, r0, r3
   d9fd0:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9fd4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9fd8:	42bb      	cmp	r3, r7
   d9fda:	bf08      	it	eq
   d9fdc:	42b2      	cmpeq	r2, r6
{
   d9fde:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9fe0:	d013      	beq.n	da00a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d9fe2:	a903      	add	r1, sp, #12
   d9fe4:	4668      	mov	r0, sp
   d9fe6:	e9cd 6700 	strd	r6, r7, [sp]
   d9fea:	f7fe fdb7 	bl	d8b5c <localtime_r>
	calendar_time.tm_year += 1900;
   d9fee:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9ff0:	4d09      	ldr	r5, [pc, #36]	; (da018 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d9ff2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9ff6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9ff8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da002:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da006:	6823      	ldr	r3, [r4, #0]
   da008:	602b      	str	r3, [r5, #0]
    }
}
   da00a:	b00c      	add	sp, #48	; 0x30
   da00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da010:	2003e678 	.word	0x2003e678
   da014:	2003e670 	.word	0x2003e670
   da018:	2003e64c 	.word	0x2003e64c
   da01c:	2003e680 	.word	0x2003e680

000da020 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da020:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da022:	2000      	movs	r0, #0
   da024:	f7fe fcc2 	bl	d89ac <spark_sync_time_pending>
   da028:	b128      	cbz	r0, da036 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da02a:	f7fe fc97 	bl	d895c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da02e:	f080 0001 	eor.w	r0, r0, #1
   da032:	b2c0      	uxtb	r0, r0
    }
   da034:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da036:	2001      	movs	r0, #1
   da038:	e7fc      	b.n	da034 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000da03a <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da03a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da03c:	4602      	mov	r2, r0
   da03e:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da040:	4668      	mov	r0, sp
    struct timeval tv = {
   da042:	2100      	movs	r1, #0
    };
   da044:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da048:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da04c:	f7fe faa8 	bl	d85a0 <hal_rtc_set_time>
   da050:	4602      	mov	r2, r0
   da052:	b910      	cbnz	r0, da05a <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da054:	4601      	mov	r1, r0
   da056:	f7fe fc3b 	bl	d88d0 <system_notify_time_changed>
    }
}
   da05a:	b005      	add	sp, #20
   da05c:	f85d fb04 	ldr.w	pc, [sp], #4

000da060 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da060:	b530      	push	{r4, r5, lr}
   da062:	4604      	mov	r4, r0
    t += time_zone_cache;
   da064:	4818      	ldr	r0, [pc, #96]	; (da0c8 <_ZN9TimeClass7timeStrEx+0x68>)
   da066:	e9d0 1000 	ldrd	r1, r0, [r0]
   da06a:	1852      	adds	r2, r2, r1
   da06c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da070:	4816      	ldr	r0, [pc, #88]	; (da0cc <_ZN9TimeClass7timeStrEx+0x6c>)
   da072:	e9d0 1000 	ldrd	r1, r0, [r0]
   da076:	1852      	adds	r2, r2, r1
{
   da078:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da07a:	eb40 0303 	adc.w	r3, r0, r3
   da07e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da082:	2224      	movs	r2, #36	; 0x24
   da084:	eb0d 0002 	add.w	r0, sp, r2
   da088:	2100      	movs	r1, #0
   da08a:	f001 fabd 	bl	db608 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da08e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da090:	a909      	add	r1, sp, #36	; 0x24
   da092:	4668      	mov	r0, sp
   da094:	f7fe fd62 	bl	d8b5c <localtime_r>
    char ascstr[26] = {};
   da098:	2216      	movs	r2, #22
   da09a:	4629      	mov	r1, r5
   da09c:	a803      	add	r0, sp, #12
   da09e:	9502      	str	r5, [sp, #8]
   da0a0:	f001 fab2 	bl	db608 <memset>
    asctime_r(&calendar_time, ascstr);
   da0a4:	a902      	add	r1, sp, #8
   da0a6:	a809      	add	r0, sp, #36	; 0x24
   da0a8:	f001 fa38 	bl	db51c <asctime_r>
    int len = strlen(ascstr);
   da0ac:	a802      	add	r0, sp, #8
   da0ae:	f001 fb06 	bl	db6be <strlen>
    ascstr[len-1] = 0; // remove final newline
   da0b2:	ab12      	add	r3, sp, #72	; 0x48
   da0b4:	4418      	add	r0, r3
    return String(ascstr);
   da0b6:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da0b8:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da0bc:	4620      	mov	r0, r4
   da0be:	f7ff fe90 	bl	d9de2 <_ZN6StringC1EPKc>
}
   da0c2:	4620      	mov	r0, r4
   da0c4:	b013      	add	sp, #76	; 0x4c
   da0c6:	bd30      	pop	{r4, r5, pc}
   da0c8:	2003e678 	.word	0x2003e678
   da0cc:	2003e670 	.word	0x2003e670

000da0d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0d4:	b0a5      	sub	sp, #148	; 0x94
   da0d6:	4607      	mov	r7, r0
   da0d8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da0da:	a814      	add	r0, sp, #80	; 0x50
{
   da0dc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da0de:	223f      	movs	r2, #63	; 0x3f
{
   da0e0:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da0e2:	f001 fb06 	bl	db6f2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da0e6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da0e8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da0ea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da0ee:	f001 fae6 	bl	db6be <strlen>
   da0f2:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da0f4:	bb5d      	cbnz	r5, da14e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da0f6:	492a      	ldr	r1, [pc, #168]	; (da1a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da0f8:	a803      	add	r0, sp, #12
   da0fa:	f001 fabb 	bl	db674 <strcpy>
   da0fe:	ae14      	add	r6, sp, #80	; 0x50
{
   da100:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da102:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da106:	45ab      	cmp	fp, r5
   da108:	d936      	bls.n	da178 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da10a:	46b1      	mov	r9, r6
   da10c:	f105 0a01 	add.w	sl, r5, #1
   da110:	f819 3b01 	ldrb.w	r3, [r9], #1
   da114:	2b25      	cmp	r3, #37	; 0x25
   da116:	d117      	bne.n	da148 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da118:	7873      	ldrb	r3, [r6, #1]
   da11a:	2b7a      	cmp	r3, #122	; 0x7a
   da11c:	d114      	bne.n	da148 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da11e:	a803      	add	r0, sp, #12
   da120:	f001 facd 	bl	db6be <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da124:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da126:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da128:	1828      	adds	r0, r5, r0
   da12a:	4418      	add	r0, r3
   da12c:	ebab 0205 	sub.w	r2, fp, r5
   da130:	1cb1      	adds	r1, r6, #2
   da132:	f001 fa41 	bl	db5b8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da136:	4622      	mov	r2, r4
   da138:	a903      	add	r1, sp, #12
   da13a:	4630      	mov	r0, r6
   da13c:	f001 fa3c 	bl	db5b8 <memcpy>
            len = strlen(format_str);
   da140:	a814      	add	r0, sp, #80	; 0x50
   da142:	f001 fabc 	bl	db6be <strlen>
   da146:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da148:	464e      	mov	r6, r9
   da14a:	4655      	mov	r5, sl
   da14c:	e7d9      	b.n	da102 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da14e:	213c      	movs	r1, #60	; 0x3c
   da150:	fb95 f3f1 	sdiv	r3, r5, r1
   da154:	2b00      	cmp	r3, #0
   da156:	bfb8      	it	lt
   da158:	425b      	neglt	r3, r3
   da15a:	fbb3 f2f1 	udiv	r2, r3, r1
   da15e:	fb01 3312 	mls	r3, r1, r2, r3
   da162:	9300      	str	r3, [sp, #0]
   da164:	4a0f      	ldr	r2, [pc, #60]	; (da1a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da166:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da16a:	2110      	movs	r1, #16
   da16c:	a803      	add	r0, sp, #12
   da16e:	fb95 f3f3 	sdiv	r3, r5, r3
   da172:	f7fe fcbb 	bl	d8aec <snprintf>
   da176:	e7c2      	b.n	da0fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da178:	2100      	movs	r1, #0
   da17a:	222e      	movs	r2, #46	; 0x2e
   da17c:	a808      	add	r0, sp, #32
   da17e:	9107      	str	r1, [sp, #28]
   da180:	f001 fa42 	bl	db608 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da184:	4643      	mov	r3, r8
   da186:	aa14      	add	r2, sp, #80	; 0x50
   da188:	2132      	movs	r1, #50	; 0x32
   da18a:	a807      	add	r0, sp, #28
   da18c:	f7fe fcde 	bl	d8b4c <strftime>
    return String(buf);
   da190:	a907      	add	r1, sp, #28
   da192:	4638      	mov	r0, r7
   da194:	f7ff fe25 	bl	d9de2 <_ZN6StringC1EPKc>
}
   da198:	4638      	mov	r0, r7
   da19a:	b025      	add	sp, #148	; 0x94
   da19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da1a0:	000de244 	.word	0x000de244
   da1a4:	000de246 	.word	0x000de246

000da1a8 <_ZN9TimeClass6formatExPKc>:
{
   da1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da1aa:	b08d      	sub	sp, #52	; 0x34
   da1ac:	e9cd 2300 	strd	r2, r3, [sp]
   da1b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da1b2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da1b4:	b915      	cbnz	r5, da1bc <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da1b6:	4b19      	ldr	r3, [pc, #100]	; (da21c <_ZN9TimeClass6formatExPKc+0x74>)
   da1b8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da1ba:	b12d      	cbz	r5, da1c8 <_ZN9TimeClass6formatExPKc+0x20>
   da1bc:	4b18      	ldr	r3, [pc, #96]	; (da220 <_ZN9TimeClass6formatExPKc+0x78>)
   da1be:	4628      	mov	r0, r5
   da1c0:	6819      	ldr	r1, [r3, #0]
   da1c2:	f001 fa4d 	bl	db660 <strcmp>
   da1c6:	b938      	cbnz	r0, da1d8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   da1cc:	4620      	mov	r0, r4
   da1ce:	f7ff ff47 	bl	da060 <_ZN9TimeClass7timeStrEx>
}
   da1d2:	4620      	mov	r0, r4
   da1d4:	b00d      	add	sp, #52	; 0x34
   da1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da1d8:	4e12      	ldr	r6, [pc, #72]	; (da224 <_ZN9TimeClass6formatExPKc+0x7c>)
   da1da:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da1dc:	4f12      	ldr	r7, [pc, #72]	; (da228 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da1de:	e9d6 3200 	ldrd	r3, r2, [r6]
   da1e2:	185b      	adds	r3, r3, r1
   da1e4:	9901      	ldr	r1, [sp, #4]
   da1e6:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da1ea:	e9d7 0100 	ldrd	r0, r1, [r7]
   da1ee:	181b      	adds	r3, r3, r0
   da1f0:	eb41 0202 	adc.w	r2, r1, r2
   da1f4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da1f8:	2100      	movs	r1, #0
   da1fa:	2224      	movs	r2, #36	; 0x24
   da1fc:	a803      	add	r0, sp, #12
   da1fe:	f001 fa03 	bl	db608 <memset>
    localtime_r(&t, &calendar_time);
   da202:	a903      	add	r1, sp, #12
   da204:	4668      	mov	r0, sp
   da206:	f7fe fca9 	bl	d8b5c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da20a:	6832      	ldr	r2, [r6, #0]
   da20c:	683b      	ldr	r3, [r7, #0]
   da20e:	a903      	add	r1, sp, #12
   da210:	4413      	add	r3, r2
   da212:	4620      	mov	r0, r4
   da214:	462a      	mov	r2, r5
   da216:	f7ff ff5b 	bl	da0d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da21a:	e7da      	b.n	da1d2 <_ZN9TimeClass6formatExPKc+0x2a>
   da21c:	2003e648 	.word	0x2003e648
   da220:	2003dd00 	.word	0x2003dd00
   da224:	2003e678 	.word	0x2003e678
   da228:	2003e670 	.word	0x2003e670

000da22c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da22c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da22e:	2000      	movs	r0, #0
   da230:	f7fe f99e 	bl	d8570 <hal_rtc_time_is_valid>
    if (rtcstate)
   da234:	4604      	mov	r4, r0
   da236:	b9a0      	cbnz	r0, da262 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da238:	f7fe fb12 	bl	d8860 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da23c:	2801      	cmp	r0, #1
   da23e:	d110      	bne.n	da262 <_ZN9TimeClass7isValidEv+0x36>
   da240:	4620      	mov	r0, r4
   da242:	f7fe fb3d 	bl	d88c0 <system_thread_get_state>
   da246:	b960      	cbnz	r0, da262 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da248:	f7ff feea 	bl	da020 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da24c:	b910      	cbnz	r0, da254 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da24e:	f7fe fb75 	bl	d893c <spark_process>
        while (_while() && !_condition()) {
   da252:	e7f9      	b.n	da248 <_ZN9TimeClass7isValidEv+0x1c>
   da254:	f7ff fee4 	bl	da020 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da25c:	2000      	movs	r0, #0
   da25e:	f7fe b987 	b.w	d8570 <hal_rtc_time_is_valid>
}
   da262:	4620      	mov	r0, r4
   da264:	bd10      	pop	{r4, pc}

000da266 <_ZN9TimeClass3nowEv>:
{
   da266:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da268:	f7ff ffe0 	bl	da22c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da26c:	2210      	movs	r2, #16
   da26e:	2100      	movs	r1, #0
   da270:	4668      	mov	r0, sp
   da272:	f001 f9c9 	bl	db608 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da276:	2100      	movs	r1, #0
   da278:	4668      	mov	r0, sp
   da27a:	f7fe f989 	bl	d8590 <hal_rtc_get_time>
}
   da27e:	9800      	ldr	r0, [sp, #0]
   da280:	b005      	add	sp, #20
   da282:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da288 <_ZN9TimeClass4hourEv>:
{
   da288:	b508      	push	{r3, lr}
	return hour(now());
   da28a:	f7ff ffec 	bl	da266 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da28e:	17c1      	asrs	r1, r0, #31
   da290:	f7ff fe90 	bl	d9fb4 <_ZL22Refresh_UnixTime_Cachex>
}
   da294:	4b01      	ldr	r3, [pc, #4]	; (da29c <_ZN9TimeClass4hourEv+0x14>)
   da296:	6898      	ldr	r0, [r3, #8]
   da298:	bd08      	pop	{r3, pc}
   da29a:	bf00      	nop
   da29c:	2003e64c 	.word	0x2003e64c

000da2a0 <_ZN9TimeClass4yearEv>:
{
   da2a0:	b508      	push	{r3, lr}
	return year(now());
   da2a2:	f7ff ffe0 	bl	da266 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da2a6:	17c1      	asrs	r1, r0, #31
   da2a8:	f7ff fe84 	bl	d9fb4 <_ZL22Refresh_UnixTime_Cachex>
}
   da2ac:	4b01      	ldr	r3, [pc, #4]	; (da2b4 <_ZN9TimeClass4yearEv+0x14>)
   da2ae:	6958      	ldr	r0, [r3, #20]
   da2b0:	bd08      	pop	{r3, pc}
   da2b2:	bf00      	nop
   da2b4:	2003e64c 	.word	0x2003e64c

000da2b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da2b8:	4b02      	ldr	r3, [pc, #8]	; (da2c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da2ba:	681a      	ldr	r2, [r3, #0]
   da2bc:	4b02      	ldr	r3, [pc, #8]	; (da2c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da2be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da2c0:	4770      	bx	lr
   da2c2:	bf00      	nop
   da2c4:	2003dd00 	.word	0x2003dd00
   da2c8:	2003e648 	.word	0x2003e648

000da2cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da2cc:	4770      	bx	lr

000da2ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da2ce:	7441      	strb	r1, [r0, #17]
}
   da2d0:	4770      	bx	lr

000da2d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   da2d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da2d4:	7c00      	ldrb	r0, [r0, #16]
   da2d6:	f7fe fa6b 	bl	d87b0 <hal_usart_available_data_for_write>
}
   da2da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da2de:	bd08      	pop	{r3, pc}

000da2e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   da2e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da2e2:	7c00      	ldrb	r0, [r0, #16]
   da2e4:	f7fe fa3c 	bl	d8760 <hal_usart_available>
}
   da2e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da2ec:	bd08      	pop	{r3, pc}

000da2ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   da2ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da2f0:	7c00      	ldrb	r0, [r0, #16]
   da2f2:	f7fe fa45 	bl	d8780 <hal_usart_peek>
}
   da2f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da2fa:	bd08      	pop	{r3, pc}

000da2fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   da2fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da2fe:	7c00      	ldrb	r0, [r0, #16]
   da300:	f7fe fa36 	bl	d8770 <hal_usart_read>
}
   da304:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da308:	bd08      	pop	{r3, pc}

000da30a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   da30a:	7c00      	ldrb	r0, [r0, #16]
   da30c:	f7fe ba40 	b.w	d8790 <hal_usart_flush>

000da310 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   da310:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da312:	7c45      	ldrb	r5, [r0, #17]
{
   da314:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da316:	b12d      	cbz	r5, da324 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   da318:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   da31a:	b003      	add	sp, #12
   da31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da320:	f7fe ba16 	b.w	d8750 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da324:	7c00      	ldrb	r0, [r0, #16]
   da326:	9101      	str	r1, [sp, #4]
   da328:	f7fe fa42 	bl	d87b0 <hal_usart_available_data_for_write>
   da32c:	2800      	cmp	r0, #0
   da32e:	9901      	ldr	r1, [sp, #4]
   da330:	dcf2      	bgt.n	da318 <_ZN11USARTSerial5writeEh+0x8>
}
   da332:	4628      	mov	r0, r5
   da334:	b003      	add	sp, #12
   da336:	bd30      	pop	{r4, r5, pc}

000da338 <_ZN11USARTSerialD0Ev>:
   da338:	b510      	push	{r4, lr}
   da33a:	2114      	movs	r1, #20
   da33c:	4604      	mov	r4, r0
   da33e:	f000 fac6 	bl	da8ce <_ZdlPvj>
   da342:	4620      	mov	r0, r4
   da344:	bd10      	pop	{r4, pc}
	...

000da348 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da348:	b510      	push	{r4, lr}
   da34a:	f04f 0c00 	mov.w	ip, #0
   da34e:	4604      	mov	r4, r0
   da350:	4608      	mov	r0, r1
   da352:	4611      	mov	r1, r2
   da354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da358:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da35c:	4a04      	ldr	r2, [pc, #16]	; (da370 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da35e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da360:	2201      	movs	r2, #1
  _serial = serial;
   da362:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da364:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da366:	461a      	mov	r2, r3
   da368:	f7fe f9ea 	bl	d8740 <hal_usart_init>
}
   da36c:	4620      	mov	r0, r4
   da36e:	bd10      	pop	{r4, pc}
   da370:	000de278 	.word	0x000de278

000da374 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da374:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da376:	4c0e      	ldr	r4, [pc, #56]	; (da3b0 <_Z22__fetch_global_Serial1v+0x3c>)
   da378:	7821      	ldrb	r1, [r4, #0]
   da37a:	f3bf 8f5b 	dmb	ish
   da37e:	f011 0101 	ands.w	r1, r1, #1
   da382:	d112      	bne.n	da3aa <_Z22__fetch_global_Serial1v+0x36>
   da384:	4620      	mov	r0, r4
   da386:	9101      	str	r1, [sp, #4]
   da388:	f7f9 fe98 	bl	d40bc <__cxa_guard_acquire>
   da38c:	9901      	ldr	r1, [sp, #4]
   da38e:	b160      	cbz	r0, da3aa <_Z22__fetch_global_Serial1v+0x36>
   da390:	4a08      	ldr	r2, [pc, #32]	; (da3b4 <_Z22__fetch_global_Serial1v+0x40>)
   da392:	4b09      	ldr	r3, [pc, #36]	; (da3b8 <_Z22__fetch_global_Serial1v+0x44>)
   da394:	4809      	ldr	r0, [pc, #36]	; (da3bc <_Z22__fetch_global_Serial1v+0x48>)
   da396:	f7ff ffd7 	bl	da348 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da39a:	4620      	mov	r0, r4
   da39c:	f7f9 fe93 	bl	d40c6 <__cxa_guard_release>
   da3a0:	4a07      	ldr	r2, [pc, #28]	; (da3c0 <_Z22__fetch_global_Serial1v+0x4c>)
   da3a2:	4908      	ldr	r1, [pc, #32]	; (da3c4 <_Z22__fetch_global_Serial1v+0x50>)
   da3a4:	4805      	ldr	r0, [pc, #20]	; (da3bc <_Z22__fetch_global_Serial1v+0x48>)
   da3a6:	f000 fa8d 	bl	da8c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da3aa:	4804      	ldr	r0, [pc, #16]	; (da3bc <_Z22__fetch_global_Serial1v+0x48>)
   da3ac:	b002      	add	sp, #8
   da3ae:	bd10      	pop	{r4, pc}
   da3b0:	2003e688 	.word	0x2003e688
   da3b4:	2003e68c 	.word	0x2003e68c
   da3b8:	2003e710 	.word	0x2003e710
   da3bc:	2003e794 	.word	0x2003e794
   da3c0:	2003dee0 	.word	0x2003dee0
   da3c4:	000da2cd 	.word	0x000da2cd

000da3c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da3c8:	7441      	strb	r1, [r0, #17]
}
   da3ca:	4770      	bx	lr

000da3cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da3cc:	4770      	bx	lr

000da3ce <_ZN9USBSerial4readEv>:
{
   da3ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da3d0:	2100      	movs	r1, #0
   da3d2:	7c00      	ldrb	r0, [r0, #16]
   da3d4:	f7fe fa0c 	bl	d87f0 <HAL_USB_USART_Receive_Data>
}
   da3d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da3dc:	bd08      	pop	{r3, pc}

000da3de <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   da3de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da3e0:	2101      	movs	r1, #1
   da3e2:	7c00      	ldrb	r0, [r0, #16]
   da3e4:	f7fe fa04 	bl	d87f0 <HAL_USB_USART_Receive_Data>
}
   da3e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da3ec:	bd08      	pop	{r3, pc}

000da3ee <_ZN9USBSerial17availableForWriteEv>:
{
   da3ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da3f0:	7c00      	ldrb	r0, [r0, #16]
   da3f2:	f7fe f9f5 	bl	d87e0 <HAL_USB_USART_Available_Data_For_Write>
}
   da3f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da3fa:	bd08      	pop	{r3, pc}

000da3fc <_ZN9USBSerial9availableEv>:
{
   da3fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da3fe:	7c00      	ldrb	r0, [r0, #16]
   da400:	f7fe f9e6 	bl	d87d0 <HAL_USB_USART_Available_Data>
}
   da404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da408:	bd08      	pop	{r3, pc}

000da40a <_ZN9USBSerial5writeEh>:
{
   da40a:	b513      	push	{r0, r1, r4, lr}
   da40c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da40e:	7c00      	ldrb	r0, [r0, #16]
{
   da410:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da412:	f7fe f9e5 	bl	d87e0 <HAL_USB_USART_Available_Data_For_Write>
   da416:	2800      	cmp	r0, #0
   da418:	9901      	ldr	r1, [sp, #4]
   da41a:	dc01      	bgt.n	da420 <_ZN9USBSerial5writeEh+0x16>
   da41c:	7c60      	ldrb	r0, [r4, #17]
   da41e:	b120      	cbz	r0, da42a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da420:	7c20      	ldrb	r0, [r4, #16]
   da422:	f7fe f9ed 	bl	d8800 <HAL_USB_USART_Send_Data>
   da426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da42a:	b002      	add	sp, #8
   da42c:	bd10      	pop	{r4, pc}

000da42e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da42e:	7c00      	ldrb	r0, [r0, #16]
   da430:	f7fe b9ee 	b.w	d8810 <HAL_USB_USART_Flush_Data>

000da434 <_ZN9USBSerialD0Ev>:
   da434:	b510      	push	{r4, lr}
   da436:	2114      	movs	r1, #20
   da438:	4604      	mov	r4, r0
   da43a:	f000 fa48 	bl	da8ce <_ZdlPvj>
   da43e:	4620      	mov	r0, r4
   da440:	bd10      	pop	{r4, pc}
	...

000da444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da444:	b510      	push	{r4, lr}
   da446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da44a:	4604      	mov	r4, r0
   da44c:	4608      	mov	r0, r1
   da44e:	2100      	movs	r1, #0
   da450:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da454:	4b04      	ldr	r3, [pc, #16]	; (da468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da456:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da458:	2301      	movs	r3, #1
  _serial = serial;
   da45a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da45c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da45e:	4611      	mov	r1, r2
   da460:	f7fe f9ae 	bl	d87c0 <HAL_USB_USART_Init>
}
   da464:	4620      	mov	r0, r4
   da466:	bd10      	pop	{r4, pc}
   da468:	000de2a8 	.word	0x000de2a8

000da46c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da46c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da46e:	2214      	movs	r2, #20
{
   da470:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da472:	2100      	movs	r1, #0
   da474:	f001 f8c8 	bl	db608 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da478:	4620      	mov	r0, r4
   da47a:	bd10      	pop	{r4, pc}

000da47c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da47c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da47e:	4c10      	ldr	r4, [pc, #64]	; (da4c0 <_Z16_fetch_usbserialv+0x44>)
{
   da480:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da482:	a803      	add	r0, sp, #12
   da484:	f7ff fff2 	bl	da46c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da488:	7821      	ldrb	r1, [r4, #0]
   da48a:	f3bf 8f5b 	dmb	ish
   da48e:	f011 0101 	ands.w	r1, r1, #1
   da492:	d111      	bne.n	da4b8 <_Z16_fetch_usbserialv+0x3c>
   da494:	4620      	mov	r0, r4
   da496:	9101      	str	r1, [sp, #4]
   da498:	f7f9 fe10 	bl	d40bc <__cxa_guard_acquire>
   da49c:	9901      	ldr	r1, [sp, #4]
   da49e:	b158      	cbz	r0, da4b8 <_Z16_fetch_usbserialv+0x3c>
   da4a0:	aa03      	add	r2, sp, #12
   da4a2:	4808      	ldr	r0, [pc, #32]	; (da4c4 <_Z16_fetch_usbserialv+0x48>)
   da4a4:	f7ff ffce 	bl	da444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da4a8:	4620      	mov	r0, r4
   da4aa:	f7f9 fe0c 	bl	d40c6 <__cxa_guard_release>
   da4ae:	4a06      	ldr	r2, [pc, #24]	; (da4c8 <_Z16_fetch_usbserialv+0x4c>)
   da4b0:	4906      	ldr	r1, [pc, #24]	; (da4cc <_Z16_fetch_usbserialv+0x50>)
   da4b2:	4804      	ldr	r0, [pc, #16]	; (da4c4 <_Z16_fetch_usbserialv+0x48>)
   da4b4:	f000 fa06 	bl	da8c4 <__aeabi_atexit>
	return _usbserial;
}
   da4b8:	4802      	ldr	r0, [pc, #8]	; (da4c4 <_Z16_fetch_usbserialv+0x48>)
   da4ba:	b008      	add	sp, #32
   da4bc:	bd10      	pop	{r4, pc}
   da4be:	bf00      	nop
   da4c0:	2003e7a8 	.word	0x2003e7a8
   da4c4:	2003e7ac 	.word	0x2003e7ac
   da4c8:	2003dee0 	.word	0x2003dee0
   da4cc:	000da3cd 	.word	0x000da3cd

000da4d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   da4d0:	2200      	movs	r2, #0
   da4d2:	6840      	ldr	r0, [r0, #4]
   da4d4:	4611      	mov	r1, r2
   da4d6:	f7fe baa1 	b.w	d8a1c <network_ready>

000da4da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da4da:	2200      	movs	r2, #0
   da4dc:	6840      	ldr	r0, [r0, #4]
   da4de:	4611      	mov	r1, r2
   da4e0:	f7fe babc 	b.w	d8a5c <network_listening>

000da4e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   da4e4:	2200      	movs	r2, #0
   da4e6:	6840      	ldr	r0, [r0, #4]
   da4e8:	4611      	mov	r1, r2
   da4ea:	f7fe bac7 	b.w	d8a7c <network_get_listen_timeout>

000da4ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   da4ee:	6840      	ldr	r0, [r0, #4]
   da4f0:	2200      	movs	r2, #0
   da4f2:	f7fe babb 	b.w	d8a6c <network_set_listen_timeout>

000da4f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   da4f6:	6840      	ldr	r0, [r0, #4]
   da4f8:	2200      	movs	r2, #0
   da4fa:	f081 0101 	eor.w	r1, r1, #1
   da4fe:	f7fe baa5 	b.w	d8a4c <network_listen>

000da502 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   da502:	2300      	movs	r3, #0
   da504:	6840      	ldr	r0, [r0, #4]
   da506:	461a      	mov	r2, r3
   da508:	4619      	mov	r1, r3
   da50a:	f7fe ba97 	b.w	d8a3c <network_off>

000da50e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   da50e:	2300      	movs	r3, #0
   da510:	6840      	ldr	r0, [r0, #4]
   da512:	461a      	mov	r2, r3
   da514:	4619      	mov	r1, r3
   da516:	f7fe ba89 	b.w	d8a2c <network_on>

000da51a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   da51a:	2200      	movs	r2, #0
   da51c:	6840      	ldr	r0, [r0, #4]
   da51e:	4611      	mov	r1, r2
   da520:	f7fe ba6c 	b.w	d89fc <network_connecting>

000da524 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da524:	6840      	ldr	r0, [r0, #4]
   da526:	2200      	movs	r2, #0
   da528:	2102      	movs	r1, #2
   da52a:	f7fe ba6f 	b.w	d8a0c <network_disconnect>

000da52e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   da52e:	2300      	movs	r3, #0
   da530:	6840      	ldr	r0, [r0, #4]
   da532:	461a      	mov	r2, r3
   da534:	f7fe ba5a 	b.w	d89ec <network_connect>

000da538 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   da538:	4b02      	ldr	r3, [pc, #8]	; (da544 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   da53a:	2204      	movs	r2, #4
   da53c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   da53e:	4a02      	ldr	r2, [pc, #8]	; (da548 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   da540:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   da542:	4770      	bx	lr
   da544:	2003e7c0 	.word	0x2003e7c0
   da548:	000de2d8 	.word	0x000de2d8

000da54c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   da54c:	b510      	push	{r4, lr}
   da54e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   da550:	f001 f8b5 	bl	db6be <strlen>
   da554:	3801      	subs	r0, #1
   da556:	1823      	adds	r3, r4, r0
   da558:	4620      	mov	r0, r4
	while(i<j){
   da55a:	4283      	cmp	r3, r0
   da55c:	d906      	bls.n	da56c <_Z11str_reversePc+0x20>
		c = *i;
   da55e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   da560:	7819      	ldrb	r1, [r3, #0]
   da562:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   da566:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   da56a:	e7f6      	b.n	da55a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   da56c:	bd10      	pop	{r4, pc}

000da56e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da56e:	b570      	push	{r4, r5, r6, lr}
   da570:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   da572:	1e91      	subs	r1, r2, #2
   da574:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da576:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   da578:	d822      	bhi.n	da5c0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   da57a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   da57c:	b16d      	cbz	r5, da59a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   da57e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   da582:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   da586:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   da588:	2d09      	cmp	r5, #9
                *ptr += '0';
   da58a:	bf94      	ite	ls
   da58c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   da58e:	3157      	addhi	r1, #87	; 0x57
   da590:	b2c9      	uxtb	r1, r1
   da592:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   da596:	4635      	mov	r5, r6
	while(a){
   da598:	e7f0      	b.n	da57c <ultoa+0xe>
   da59a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   da59c:	4423      	add	r3, r4
            *ptr++ = '0';
   da59e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   da5a0:	4293      	cmp	r3, r2
   da5a2:	d902      	bls.n	da5aa <ultoa+0x3c>
            *ptr++ = '0';
   da5a4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   da5a8:	e7fa      	b.n	da5a0 <ultoa+0x32>
   da5aa:	1a1a      	subs	r2, r3, r0
   da5ac:	4283      	cmp	r3, r0
   da5ae:	bf38      	it	cc
   da5b0:	2200      	movcc	r2, #0

	*ptr = '\0';
   da5b2:	2300      	movs	r3, #0
   da5b4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   da5b6:	4620      	mov	r0, r4
   da5b8:	f7ff ffc8 	bl	da54c <_Z11str_reversePc>
	return buffer;
   da5bc:	4620      	mov	r0, r4
}
   da5be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   da5c0:	2000      	movs	r0, #0
   da5c2:	e7fc      	b.n	da5be <ultoa+0x50>

000da5c4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da5c4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   da5c6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da5c8:	460c      	mov	r4, r1
   da5ca:	4615      	mov	r5, r2
	if(a<0){
   da5cc:	da0e      	bge.n	da5ec <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da5ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   da5d2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da5d6:	bf14      	ite	ne
   da5d8:	4258      	negne	r0, r3
   da5da:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   da5dc:	2301      	movs	r3, #1
		*buffer = '-';
   da5de:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   da5e0:	462a      	mov	r2, r5
   da5e2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   da5e4:	f7ff ffc3 	bl	da56e <ultoa>
	}
	return buffer;
}
   da5e8:	4620      	mov	r0, r4
   da5ea:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   da5ec:	2301      	movs	r3, #1
   da5ee:	e7f9      	b.n	da5e4 <itoa+0x20>

000da5f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da5f0:	4b01      	ldr	r3, [pc, #4]	; (da5f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da5f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da5f4:	4770      	bx	lr
   da5f6:	bf00      	nop
   da5f8:	2003dd08 	.word	0x2003dd08

000da5fc <serialEventRun>:
{
   da5fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da5fe:	4b0b      	ldr	r3, [pc, #44]	; (da62c <serialEventRun+0x30>)
   da600:	b143      	cbz	r3, da614 <serialEventRun+0x18>
   da602:	f7ff ff3b 	bl	da47c <_Z16_fetch_usbserialv>
   da606:	6803      	ldr	r3, [r0, #0]
   da608:	691b      	ldr	r3, [r3, #16]
   da60a:	4798      	blx	r3
   da60c:	2800      	cmp	r0, #0
   da60e:	dd01      	ble.n	da614 <serialEventRun+0x18>
        serialEvent();
   da610:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da614:	4b06      	ldr	r3, [pc, #24]	; (da630 <serialEventRun+0x34>)
   da616:	b143      	cbz	r3, da62a <serialEventRun+0x2e>
   da618:	f7ff feac 	bl	da374 <_Z22__fetch_global_Serial1v>
   da61c:	6803      	ldr	r3, [r0, #0]
   da61e:	691b      	ldr	r3, [r3, #16]
   da620:	4798      	blx	r3
   da622:	2800      	cmp	r0, #0
   da624:	dd01      	ble.n	da62a <serialEventRun+0x2e>
        serialEvent1();
   da626:	f3af 8000 	nop.w
}
   da62a:	bd08      	pop	{r3, pc}
	...

000da634 <_post_loop>:
{
   da634:	b508      	push	{r3, lr}
	serialEventRun();
   da636:	f7ff ffe1 	bl	da5fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da63a:	f7fd ff91 	bl	d8560 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da63e:	4b01      	ldr	r3, [pc, #4]	; (da644 <_post_loop+0x10>)
   da640:	6018      	str	r0, [r3, #0]
}
   da642:	bd08      	pop	{r3, pc}
   da644:	2003e7dc 	.word	0x2003e7dc

000da648 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da648:	4802      	ldr	r0, [pc, #8]	; (da654 <_Z33system_initialize_user_backup_ramv+0xc>)
   da64a:	4a03      	ldr	r2, [pc, #12]	; (da658 <_Z33system_initialize_user_backup_ramv+0x10>)
   da64c:	4903      	ldr	r1, [pc, #12]	; (da65c <_Z33system_initialize_user_backup_ramv+0x14>)
   da64e:	1a12      	subs	r2, r2, r0
   da650:	f000 bfb2 	b.w	db5b8 <memcpy>
   da654:	2003f400 	.word	0x2003f400
   da658:	2003fd44 	.word	0x2003fd44
   da65c:	000de620 	.word	0x000de620

000da660 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da660:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da662:	2300      	movs	r3, #0
   da664:	9300      	str	r3, [sp, #0]
   da666:	461a      	mov	r2, r3
   da668:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da66c:	f7fe f942 	bl	d88f4 <system_ctrl_set_result>
}
   da670:	b003      	add	sp, #12
   da672:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da678 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da678:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da67a:	8843      	ldrh	r3, [r0, #2]
   da67c:	2b0a      	cmp	r3, #10
   da67e:	d008      	beq.n	da692 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da680:	2b50      	cmp	r3, #80	; 0x50
   da682:	d10b      	bne.n	da69c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da684:	4b09      	ldr	r3, [pc, #36]	; (da6ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da686:	681b      	ldr	r3, [r3, #0]
   da688:	b14b      	cbz	r3, da69e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da68a:	b003      	add	sp, #12
   da68c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da690:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da692:	f7ff ffe5 	bl	da660 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da696:	b003      	add	sp, #12
   da698:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da69c:	2300      	movs	r3, #0
   da69e:	9300      	str	r3, [sp, #0]
   da6a0:	461a      	mov	r2, r3
   da6a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da6a6:	f7fe f925 	bl	d88f4 <system_ctrl_set_result>
}
   da6aa:	e7f4      	b.n	da696 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da6ac:	2003e7cc 	.word	0x2003e7cc

000da6b0 <module_user_init_hook>:
{
   da6b0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da6b2:	4c12      	ldr	r4, [pc, #72]	; (da6fc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da6b4:	4812      	ldr	r0, [pc, #72]	; (da700 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da6b6:	4d13      	ldr	r5, [pc, #76]	; (da704 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da6b8:	2100      	movs	r1, #0
   da6ba:	f7fe fa3f 	bl	d8b3c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da6be:	6823      	ldr	r3, [r4, #0]
   da6c0:	42ab      	cmp	r3, r5
   da6c2:	4b11      	ldr	r3, [pc, #68]	; (da708 <module_user_init_hook+0x58>)
   da6c4:	bf0c      	ite	eq
   da6c6:	2201      	moveq	r2, #1
   da6c8:	2200      	movne	r2, #0
   da6ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da6cc:	d002      	beq.n	da6d4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da6ce:	f7ff ffbb 	bl	da648 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da6d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da6d4:	f7fd ff2c 	bl	d8530 <HAL_RNG_GetRandomNumber>
   da6d8:	4604      	mov	r4, r0
    srand(seed);
   da6da:	f000 ff9d 	bl	db618 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da6de:	4b0b      	ldr	r3, [pc, #44]	; (da70c <module_user_init_hook+0x5c>)
   da6e0:	b113      	cbz	r3, da6e8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da6e2:	4620      	mov	r0, r4
   da6e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da6e8:	2100      	movs	r1, #0
   da6ea:	4808      	ldr	r0, [pc, #32]	; (da70c <module_user_init_hook+0x5c>)
   da6ec:	f7fe f976 	bl	d89dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da6f4:	4806      	ldr	r0, [pc, #24]	; (da710 <module_user_init_hook+0x60>)
   da6f6:	2100      	movs	r1, #0
   da6f8:	f7fe b8f2 	b.w	d88e0 <system_ctrl_set_app_request_handler>
   da6fc:	2003fd40 	.word	0x2003fd40
   da700:	000da5f1 	.word	0x000da5f1
   da704:	9a271c1e 	.word	0x9a271c1e
   da708:	2003e7c8 	.word	0x2003e7c8
   da70c:	00000000 	.word	0x00000000
   da710:	000da679 	.word	0x000da679

000da714 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da714:	b508      	push	{r3, lr}
   da716:	4b02      	ldr	r3, [pc, #8]	; (da720 <spark_protocol_instance+0xc>)
   da718:	681b      	ldr	r3, [r3, #0]
   da71a:	681b      	ldr	r3, [r3, #0]
   da71c:	9301      	str	r3, [sp, #4]
   da71e:	bd08      	pop	{r3, pc}
   da720:	0003025c 	.word	0x0003025c

000da724 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da724:	b508      	push	{r3, lr}
   da726:	4b02      	ldr	r3, [pc, #8]	; (da730 <spark_protocol_set_product_id+0xc>)
   da728:	681b      	ldr	r3, [r3, #0]
   da72a:	685b      	ldr	r3, [r3, #4]
   da72c:	9301      	str	r3, [sp, #4]
   da72e:	bd08      	pop	{r3, pc}
   da730:	0003025c 	.word	0x0003025c

000da734 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da734:	b508      	push	{r3, lr}
   da736:	4b02      	ldr	r3, [pc, #8]	; (da740 <spark_protocol_set_product_firmware_version+0xc>)
   da738:	681b      	ldr	r3, [r3, #0]
   da73a:	689b      	ldr	r3, [r3, #8]
   da73c:	9301      	str	r3, [sp, #4]
   da73e:	bd08      	pop	{r3, pc}
   da740:	0003025c 	.word	0x0003025c

000da744 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da744:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da746:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da748:	d902      	bls.n	da750 <pinAvailable+0xc>
    return false;
   da74a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da74c:	b002      	add	sp, #8
   da74e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da750:	f1a0 030b 	sub.w	r3, r0, #11
   da754:	2b02      	cmp	r3, #2
   da756:	d81a      	bhi.n	da78e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da758:	4c17      	ldr	r4, [pc, #92]	; (da7b8 <pinAvailable+0x74>)
   da75a:	7821      	ldrb	r1, [r4, #0]
   da75c:	f3bf 8f5b 	dmb	ish
   da760:	f011 0101 	ands.w	r1, r1, #1
   da764:	d10b      	bne.n	da77e <pinAvailable+0x3a>
   da766:	4620      	mov	r0, r4
   da768:	9101      	str	r1, [sp, #4]
   da76a:	f7f9 fca7 	bl	d40bc <__cxa_guard_acquire>
   da76e:	9901      	ldr	r1, [sp, #4]
   da770:	b128      	cbz	r0, da77e <pinAvailable+0x3a>
   da772:	4812      	ldr	r0, [pc, #72]	; (da7bc <pinAvailable+0x78>)
   da774:	f7ff fae0 	bl	d9d38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da778:	4620      	mov	r0, r4
   da77a:	f7f9 fca4 	bl	d40c6 <__cxa_guard_release>
   da77e:	4b0f      	ldr	r3, [pc, #60]	; (da7bc <pinAvailable+0x78>)
   da780:	7818      	ldrb	r0, [r3, #0]
   da782:	f7fd ffd5 	bl	d8730 <hal_spi_is_enabled>
   da786:	2800      	cmp	r0, #0
   da788:	d1df      	bne.n	da74a <pinAvailable+0x6>
  return true; // 'pin' is available
   da78a:	2001      	movs	r0, #1
   da78c:	e7de      	b.n	da74c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da78e:	2801      	cmp	r0, #1
   da790:	d809      	bhi.n	da7a6 <pinAvailable+0x62>
   da792:	f000 f86f 	bl	da874 <_Z19__fetch_global_Wirev>
   da796:	2100      	movs	r1, #0
   da798:	7c00      	ldrb	r0, [r0, #16]
   da79a:	f7fd ff81 	bl	d86a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da79e:	f080 0001 	eor.w	r0, r0, #1
   da7a2:	b2c0      	uxtb	r0, r0
   da7a4:	e7d2      	b.n	da74c <pinAvailable+0x8>
   da7a6:	3809      	subs	r0, #9
   da7a8:	2801      	cmp	r0, #1
   da7aa:	d8ee      	bhi.n	da78a <pinAvailable+0x46>
   da7ac:	f7ff fde2 	bl	da374 <_Z22__fetch_global_Serial1v>
   da7b0:	7c00      	ldrb	r0, [r0, #16]
   da7b2:	f7fd fff5 	bl	d87a0 <hal_usart_is_enabled>
   da7b6:	e7f2      	b.n	da79e <pinAvailable+0x5a>
   da7b8:	2003e7d0 	.word	0x2003e7d0
   da7bc:	2003e7d4 	.word	0x2003e7d4

000da7c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da7c0:	2823      	cmp	r0, #35	; 0x23
{
   da7c2:	b538      	push	{r3, r4, r5, lr}
   da7c4:	4604      	mov	r4, r0
   da7c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da7c8:	d80a      	bhi.n	da7e0 <pinMode+0x20>
   da7ca:	29ff      	cmp	r1, #255	; 0xff
   da7cc:	d008      	beq.n	da7e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da7ce:	f7ff ffb9 	bl	da744 <pinAvailable>
   da7d2:	b128      	cbz	r0, da7e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da7d4:	4629      	mov	r1, r5
   da7d6:	4620      	mov	r0, r4
}
   da7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da7dc:	f7fd bef0 	b.w	d85c0 <HAL_Pin_Mode>
}
   da7e0:	bd38      	pop	{r3, r4, r5, pc}

000da7e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da7e2:	b538      	push	{r3, r4, r5, lr}
   da7e4:	4604      	mov	r4, r0
   da7e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da7e8:	f7fd fef2 	bl	d85d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da7ec:	28ff      	cmp	r0, #255	; 0xff
   da7ee:	d010      	beq.n	da812 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da7f0:	2806      	cmp	r0, #6
   da7f2:	d804      	bhi.n	da7fe <digitalWrite+0x1c>
   da7f4:	234d      	movs	r3, #77	; 0x4d
   da7f6:	fa23 f000 	lsr.w	r0, r3, r0
   da7fa:	07c3      	lsls	r3, r0, #31
   da7fc:	d409      	bmi.n	da812 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da7fe:	4620      	mov	r0, r4
   da800:	f7ff ffa0 	bl	da744 <pinAvailable>
   da804:	b128      	cbz	r0, da812 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da806:	4629      	mov	r1, r5
   da808:	4620      	mov	r0, r4
}
   da80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da80e:	f7fd bee7 	b.w	d85e0 <HAL_GPIO_Write>
}
   da812:	bd38      	pop	{r3, r4, r5, pc}

000da814 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   da814:	280d      	cmp	r0, #13
{
   da816:	b510      	push	{r4, lr}
   da818:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   da81a:	bf9c      	itt	ls
   da81c:	340e      	addls	r4, #14
   da81e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da820:	4620      	mov	r0, r4
   da822:	f7ff ff8f 	bl	da744 <pinAvailable>
   da826:	b150      	cbz	r0, da83e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   da828:	2103      	movs	r1, #3
   da82a:	4620      	mov	r0, r4
   da82c:	f7fd fec0 	bl	d85b0 <HAL_Validate_Pin_Function>
   da830:	2803      	cmp	r0, #3
   da832:	d104      	bne.n	da83e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   da834:	4620      	mov	r0, r4
}
   da836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   da83a:	f7fd bee9 	b.w	d8610 <hal_adc_read>
}
   da83e:	2000      	movs	r0, #0
   da840:	bd10      	pop	{r4, pc}
	...

000da844 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   da844:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da846:	2300      	movs	r3, #0
   da848:	2520      	movs	r5, #32
   da84a:	8043      	strh	r3, [r0, #2]
   da84c:	2314      	movs	r3, #20
{
   da84e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da850:	8003      	strh	r3, [r0, #0]
   da852:	6085      	str	r5, [r0, #8]
   da854:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da856:	4906      	ldr	r1, [pc, #24]	; (da870 <_Z17acquireWireBufferv+0x2c>)
   da858:	4628      	mov	r0, r5
   da85a:	f000 f83c 	bl	da8d6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da85e:	4904      	ldr	r1, [pc, #16]	; (da870 <_Z17acquireWireBufferv+0x2c>)
	};
   da860:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da862:	4628      	mov	r0, r5
   da864:	f000 f837 	bl	da8d6 <_ZnajRKSt9nothrow_t>
	};
   da868:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   da86a:	4620      	mov	r0, r4
   da86c:	bd38      	pop	{r3, r4, r5, pc}
   da86e:	bf00      	nop
   da870:	000de30c 	.word	0x000de30c

000da874 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da874:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da876:	4d0f      	ldr	r5, [pc, #60]	; (da8b4 <_Z19__fetch_global_Wirev+0x40>)
   da878:	7829      	ldrb	r1, [r5, #0]
   da87a:	f3bf 8f5b 	dmb	ish
   da87e:	f011 0401 	ands.w	r4, r1, #1
{
   da882:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da884:	d113      	bne.n	da8ae <_Z19__fetch_global_Wirev+0x3a>
   da886:	4628      	mov	r0, r5
   da888:	f7f9 fc18 	bl	d40bc <__cxa_guard_acquire>
   da88c:	b178      	cbz	r0, da8ae <_Z19__fetch_global_Wirev+0x3a>
   da88e:	a801      	add	r0, sp, #4
   da890:	f7ff ffd8 	bl	da844 <_Z17acquireWireBufferv>
   da894:	aa01      	add	r2, sp, #4
   da896:	4621      	mov	r1, r4
   da898:	4807      	ldr	r0, [pc, #28]	; (da8b8 <_Z19__fetch_global_Wirev+0x44>)
   da89a:	f7fe fce7 	bl	d926c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da89e:	4628      	mov	r0, r5
   da8a0:	f7f9 fc11 	bl	d40c6 <__cxa_guard_release>
   da8a4:	4a05      	ldr	r2, [pc, #20]	; (da8bc <_Z19__fetch_global_Wirev+0x48>)
   da8a6:	4906      	ldr	r1, [pc, #24]	; (da8c0 <_Z19__fetch_global_Wirev+0x4c>)
   da8a8:	4803      	ldr	r0, [pc, #12]	; (da8b8 <_Z19__fetch_global_Wirev+0x44>)
   da8aa:	f000 f80b 	bl	da8c4 <__aeabi_atexit>
	return wire;
}
   da8ae:	4802      	ldr	r0, [pc, #8]	; (da8b8 <_Z19__fetch_global_Wirev+0x44>)
   da8b0:	b007      	add	sp, #28
   da8b2:	bd30      	pop	{r4, r5, pc}
   da8b4:	2003e7e0 	.word	0x2003e7e0
   da8b8:	2003e7e4 	.word	0x2003e7e4
   da8bc:	2003dee0 	.word	0x2003dee0
   da8c0:	000d9215 	.word	0x000d9215

000da8c4 <__aeabi_atexit>:
   da8c4:	460b      	mov	r3, r1
   da8c6:	4601      	mov	r1, r0
   da8c8:	4618      	mov	r0, r3
   da8ca:	f000 be55 	b.w	db578 <__cxa_atexit>

000da8ce <_ZdlPvj>:
   da8ce:	f7f9 bbe6 	b.w	d409e <_ZdlPv>

000da8d2 <_ZnwjRKSt9nothrow_t>:
   da8d2:	f7f9 bbe0 	b.w	d4096 <_Znwj>

000da8d6 <_ZnajRKSt9nothrow_t>:
   da8d6:	f7f9 bbe0 	b.w	d409a <_Znaj>

000da8da <_ZSt25__throw_bad_function_callv>:
   da8da:	b508      	push	{r3, lr}
   da8dc:	f7fe f916 	bl	d8b0c <abort>

000da8e0 <sqrt>:
   da8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da8e4:	ed2d 8b02 	vpush	{d8}
   da8e8:	b08b      	sub	sp, #44	; 0x2c
   da8ea:	ec55 4b10 	vmov	r4, r5, d0
   da8ee:	f000 f855 	bl	da99c <__ieee754_sqrt>
   da8f2:	4b28      	ldr	r3, [pc, #160]	; (da994 <sqrt+0xb4>)
   da8f4:	eeb0 8a40 	vmov.f32	s16, s0
   da8f8:	eef0 8a60 	vmov.f32	s17, s1
   da8fc:	f993 7000 	ldrsb.w	r7, [r3]
   da900:	1c7b      	adds	r3, r7, #1
   da902:	d012      	beq.n	da92a <sqrt+0x4a>
   da904:	4622      	mov	r2, r4
   da906:	462b      	mov	r3, r5
   da908:	4620      	mov	r0, r4
   da90a:	4629      	mov	r1, r5
   da90c:	f000 fd62 	bl	db3d4 <__aeabi_dcmpun>
   da910:	4606      	mov	r6, r0
   da912:	b950      	cbnz	r0, da92a <sqrt+0x4a>
   da914:	f04f 0800 	mov.w	r8, #0
   da918:	f04f 0900 	mov.w	r9, #0
   da91c:	4620      	mov	r0, r4
   da91e:	4629      	mov	r1, r5
   da920:	4642      	mov	r2, r8
   da922:	464b      	mov	r3, r9
   da924:	f000 fd2e 	bl	db384 <__aeabi_dcmplt>
   da928:	b940      	cbnz	r0, da93c <sqrt+0x5c>
   da92a:	eeb0 0a48 	vmov.f32	s0, s16
   da92e:	eef0 0a68 	vmov.f32	s1, s17
   da932:	b00b      	add	sp, #44	; 0x2c
   da934:	ecbd 8b02 	vpop	{d8}
   da938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da93c:	4b16      	ldr	r3, [pc, #88]	; (da998 <sqrt+0xb8>)
   da93e:	9608      	str	r6, [sp, #32]
   da940:	2201      	movs	r2, #1
   da942:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da946:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da94a:	9200      	str	r2, [sp, #0]
   da94c:	9301      	str	r3, [sp, #4]
   da94e:	b197      	cbz	r7, da976 <sqrt+0x96>
   da950:	4642      	mov	r2, r8
   da952:	464b      	mov	r3, r9
   da954:	4640      	mov	r0, r8
   da956:	4649      	mov	r1, r9
   da958:	f000 fbcc 	bl	db0f4 <__aeabi_ddiv>
   da95c:	2f02      	cmp	r7, #2
   da95e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da962:	d10a      	bne.n	da97a <sqrt+0x9a>
   da964:	f7fe f8e2 	bl	d8b2c <__errno>
   da968:	2321      	movs	r3, #33	; 0x21
   da96a:	6003      	str	r3, [r0, #0]
   da96c:	9b08      	ldr	r3, [sp, #32]
   da96e:	b963      	cbnz	r3, da98a <sqrt+0xaa>
   da970:	ed9d 8b06 	vldr	d8, [sp, #24]
   da974:	e7d9      	b.n	da92a <sqrt+0x4a>
   da976:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da97a:	4668      	mov	r0, sp
   da97c:	f000 f8d2 	bl	dab24 <matherr>
   da980:	2800      	cmp	r0, #0
   da982:	d0ef      	beq.n	da964 <sqrt+0x84>
   da984:	9b08      	ldr	r3, [sp, #32]
   da986:	2b00      	cmp	r3, #0
   da988:	d0f2      	beq.n	da970 <sqrt+0x90>
   da98a:	f7fe f8cf 	bl	d8b2c <__errno>
   da98e:	9b08      	ldr	r3, [sp, #32]
   da990:	6003      	str	r3, [r0, #0]
   da992:	e7ed      	b.n	da970 <sqrt+0x90>
   da994:	2003dd04 	.word	0x2003dd04
   da998:	000de310 	.word	0x000de310

000da99c <__ieee754_sqrt>:
   da99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da9a0:	4a5f      	ldr	r2, [pc, #380]	; (dab20 <__ieee754_sqrt+0x184>)
   da9a2:	ec57 6b10 	vmov	r6, r7, d0
   da9a6:	43ba      	bics	r2, r7
   da9a8:	f000 8098 	beq.w	daadc <__ieee754_sqrt+0x140>
   da9ac:	2f00      	cmp	r7, #0
   da9ae:	ee10 4a10 	vmov	r4, s0
   da9b2:	463b      	mov	r3, r7
   da9b4:	dd4e      	ble.n	daa54 <__ieee754_sqrt+0xb8>
   da9b6:	1539      	asrs	r1, r7, #20
   da9b8:	d05b      	beq.n	daa72 <__ieee754_sqrt+0xd6>
   da9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da9be:	07ca      	lsls	r2, r1, #31
   da9c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da9c4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   da9c8:	d403      	bmi.n	da9d2 <__ieee754_sqrt+0x36>
   da9ca:	005b      	lsls	r3, r3, #1
   da9cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da9d0:	0064      	lsls	r4, r4, #1
   da9d2:	0fe2      	lsrs	r2, r4, #31
   da9d4:	f04f 0c00 	mov.w	ip, #0
   da9d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   da9dc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   da9e0:	0064      	lsls	r4, r4, #1
   da9e2:	4666      	mov	r6, ip
   da9e4:	2516      	movs	r5, #22
   da9e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   da9ea:	18b1      	adds	r1, r6, r2
   da9ec:	4299      	cmp	r1, r3
   da9ee:	dc02      	bgt.n	da9f6 <__ieee754_sqrt+0x5a>
   da9f0:	1a5b      	subs	r3, r3, r1
   da9f2:	188e      	adds	r6, r1, r2
   da9f4:	4494      	add	ip, r2
   da9f6:	005b      	lsls	r3, r3, #1
   da9f8:	3d01      	subs	r5, #1
   da9fa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da9fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daa02:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daa06:	d1f0      	bne.n	da9ea <__ieee754_sqrt+0x4e>
   daa08:	462f      	mov	r7, r5
   daa0a:	2020      	movs	r0, #32
   daa0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   daa10:	e009      	b.n	daa26 <__ieee754_sqrt+0x8a>
   daa12:	d03e      	beq.n	daa92 <__ieee754_sqrt+0xf6>
   daa14:	0fe1      	lsrs	r1, r4, #31
   daa16:	3801      	subs	r0, #1
   daa18:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daa1c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   daa20:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daa24:	d03e      	beq.n	daaa4 <__ieee754_sqrt+0x108>
   daa26:	42b3      	cmp	r3, r6
   daa28:	eb02 0105 	add.w	r1, r2, r5
   daa2c:	ddf1      	ble.n	daa12 <__ieee754_sqrt+0x76>
   daa2e:	2900      	cmp	r1, #0
   daa30:	eb01 0502 	add.w	r5, r1, r2
   daa34:	db09      	blt.n	daa4a <__ieee754_sqrt+0xae>
   daa36:	46b0      	mov	r8, r6
   daa38:	1b9b      	subs	r3, r3, r6
   daa3a:	42a1      	cmp	r1, r4
   daa3c:	bf88      	it	hi
   daa3e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   daa42:	1a64      	subs	r4, r4, r1
   daa44:	4417      	add	r7, r2
   daa46:	4646      	mov	r6, r8
   daa48:	e7e4      	b.n	daa14 <__ieee754_sqrt+0x78>
   daa4a:	2d00      	cmp	r5, #0
   daa4c:	dbf3      	blt.n	daa36 <__ieee754_sqrt+0x9a>
   daa4e:	f106 0801 	add.w	r8, r6, #1
   daa52:	e7f1      	b.n	daa38 <__ieee754_sqrt+0x9c>
   daa54:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   daa58:	4332      	orrs	r2, r6
   daa5a:	d036      	beq.n	daaca <__ieee754_sqrt+0x12e>
   daa5c:	2f00      	cmp	r7, #0
   daa5e:	d14d      	bne.n	daafc <__ieee754_sqrt+0x160>
   daa60:	4639      	mov	r1, r7
   daa62:	0ae2      	lsrs	r2, r4, #11
   daa64:	3915      	subs	r1, #21
   daa66:	0564      	lsls	r4, r4, #21
   daa68:	4613      	mov	r3, r2
   daa6a:	2a00      	cmp	r2, #0
   daa6c:	d0f9      	beq.n	daa62 <__ieee754_sqrt+0xc6>
   daa6e:	02d7      	lsls	r7, r2, #11
   daa70:	d451      	bmi.n	dab16 <__ieee754_sqrt+0x17a>
   daa72:	2000      	movs	r0, #0
   daa74:	005b      	lsls	r3, r3, #1
   daa76:	02de      	lsls	r6, r3, #11
   daa78:	4605      	mov	r5, r0
   daa7a:	f100 0001 	add.w	r0, r0, #1
   daa7e:	d5f9      	bpl.n	daa74 <__ieee754_sqrt+0xd8>
   daa80:	461a      	mov	r2, r3
   daa82:	4623      	mov	r3, r4
   daa84:	4084      	lsls	r4, r0
   daa86:	f1c0 0020 	rsb	r0, r0, #32
   daa8a:	40c3      	lsrs	r3, r0
   daa8c:	4313      	orrs	r3, r2
   daa8e:	1b49      	subs	r1, r1, r5
   daa90:	e793      	b.n	da9ba <__ieee754_sqrt+0x1e>
   daa92:	42a1      	cmp	r1, r4
   daa94:	d8be      	bhi.n	daa14 <__ieee754_sqrt+0x78>
   daa96:	2900      	cmp	r1, #0
   daa98:	eb01 0502 	add.w	r5, r1, r2
   daa9c:	dbd5      	blt.n	daa4a <__ieee754_sqrt+0xae>
   daa9e:	4698      	mov	r8, r3
   daaa0:	2300      	movs	r3, #0
   daaa2:	e7ce      	b.n	daa42 <__ieee754_sqrt+0xa6>
   daaa4:	4323      	orrs	r3, r4
   daaa6:	d112      	bne.n	daace <__ieee754_sqrt+0x132>
   daaa8:	0878      	lsrs	r0, r7, #1
   daaaa:	ea4f 016c 	mov.w	r1, ip, asr #1
   daaae:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   daab2:	f01c 0f01 	tst.w	ip, #1
   daab6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   daaba:	bf18      	it	ne
   daabc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   daac0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   daac4:	4602      	mov	r2, r0
   daac6:	ec43 2b10 	vmov	d0, r2, r3
   daaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daace:	1c7b      	adds	r3, r7, #1
   daad0:	bf16      	itet	ne
   daad2:	1c78      	addne	r0, r7, #1
   daad4:	f10c 0c01 	addeq.w	ip, ip, #1
   daad8:	0840      	lsrne	r0, r0, #1
   daada:	e7e6      	b.n	daaaa <__ieee754_sqrt+0x10e>
   daadc:	ee10 2a10 	vmov	r2, s0
   daae0:	ee10 0a10 	vmov	r0, s0
   daae4:	463b      	mov	r3, r7
   daae6:	4639      	mov	r1, r7
   daae8:	f000 f9da 	bl	daea0 <__aeabi_dmul>
   daaec:	4632      	mov	r2, r6
   daaee:	463b      	mov	r3, r7
   daaf0:	f000 f820 	bl	dab34 <__adddf3>
   daaf4:	ec41 0b10 	vmov	d0, r0, r1
   daaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daafc:	ee10 2a10 	vmov	r2, s0
   dab00:	4630      	mov	r0, r6
   dab02:	4639      	mov	r1, r7
   dab04:	f000 f814 	bl	dab30 <__aeabi_dsub>
   dab08:	4602      	mov	r2, r0
   dab0a:	460b      	mov	r3, r1
   dab0c:	f000 faf2 	bl	db0f4 <__aeabi_ddiv>
   dab10:	ec41 0b10 	vmov	d0, r0, r1
   dab14:	e7d9      	b.n	daaca <__ieee754_sqrt+0x12e>
   dab16:	4623      	mov	r3, r4
   dab18:	2020      	movs	r0, #32
   dab1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dab1e:	e7b4      	b.n	daa8a <__ieee754_sqrt+0xee>
   dab20:	7ff00000 	.word	0x7ff00000

000dab24 <matherr>:
   dab24:	2000      	movs	r0, #0
   dab26:	4770      	bx	lr

000dab28 <__aeabi_drsub>:
   dab28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dab2c:	e002      	b.n	dab34 <__adddf3>
   dab2e:	bf00      	nop

000dab30 <__aeabi_dsub>:
   dab30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dab34 <__adddf3>:
   dab34:	b530      	push	{r4, r5, lr}
   dab36:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dab3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dab3e:	ea94 0f05 	teq	r4, r5
   dab42:	bf08      	it	eq
   dab44:	ea90 0f02 	teqeq	r0, r2
   dab48:	bf1f      	itttt	ne
   dab4a:	ea54 0c00 	orrsne.w	ip, r4, r0
   dab4e:	ea55 0c02 	orrsne.w	ip, r5, r2
   dab52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dab56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dab5a:	f000 80e2 	beq.w	dad22 <__adddf3+0x1ee>
   dab5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dab62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dab66:	bfb8      	it	lt
   dab68:	426d      	neglt	r5, r5
   dab6a:	dd0c      	ble.n	dab86 <__adddf3+0x52>
   dab6c:	442c      	add	r4, r5
   dab6e:	ea80 0202 	eor.w	r2, r0, r2
   dab72:	ea81 0303 	eor.w	r3, r1, r3
   dab76:	ea82 0000 	eor.w	r0, r2, r0
   dab7a:	ea83 0101 	eor.w	r1, r3, r1
   dab7e:	ea80 0202 	eor.w	r2, r0, r2
   dab82:	ea81 0303 	eor.w	r3, r1, r3
   dab86:	2d36      	cmp	r5, #54	; 0x36
   dab88:	bf88      	it	hi
   dab8a:	bd30      	pophi	{r4, r5, pc}
   dab8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dab90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dab94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dab98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dab9c:	d002      	beq.n	daba4 <__adddf3+0x70>
   dab9e:	4240      	negs	r0, r0
   daba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daba4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   daba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dabac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dabb0:	d002      	beq.n	dabb8 <__adddf3+0x84>
   dabb2:	4252      	negs	r2, r2
   dabb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dabb8:	ea94 0f05 	teq	r4, r5
   dabbc:	f000 80a7 	beq.w	dad0e <__adddf3+0x1da>
   dabc0:	f1a4 0401 	sub.w	r4, r4, #1
   dabc4:	f1d5 0e20 	rsbs	lr, r5, #32
   dabc8:	db0d      	blt.n	dabe6 <__adddf3+0xb2>
   dabca:	fa02 fc0e 	lsl.w	ip, r2, lr
   dabce:	fa22 f205 	lsr.w	r2, r2, r5
   dabd2:	1880      	adds	r0, r0, r2
   dabd4:	f141 0100 	adc.w	r1, r1, #0
   dabd8:	fa03 f20e 	lsl.w	r2, r3, lr
   dabdc:	1880      	adds	r0, r0, r2
   dabde:	fa43 f305 	asr.w	r3, r3, r5
   dabe2:	4159      	adcs	r1, r3
   dabe4:	e00e      	b.n	dac04 <__adddf3+0xd0>
   dabe6:	f1a5 0520 	sub.w	r5, r5, #32
   dabea:	f10e 0e20 	add.w	lr, lr, #32
   dabee:	2a01      	cmp	r2, #1
   dabf0:	fa03 fc0e 	lsl.w	ip, r3, lr
   dabf4:	bf28      	it	cs
   dabf6:	f04c 0c02 	orrcs.w	ip, ip, #2
   dabfa:	fa43 f305 	asr.w	r3, r3, r5
   dabfe:	18c0      	adds	r0, r0, r3
   dac00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dac04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dac08:	d507      	bpl.n	dac1a <__adddf3+0xe6>
   dac0a:	f04f 0e00 	mov.w	lr, #0
   dac0e:	f1dc 0c00 	rsbs	ip, ip, #0
   dac12:	eb7e 0000 	sbcs.w	r0, lr, r0
   dac16:	eb6e 0101 	sbc.w	r1, lr, r1
   dac1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dac1e:	d31b      	bcc.n	dac58 <__adddf3+0x124>
   dac20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dac24:	d30c      	bcc.n	dac40 <__adddf3+0x10c>
   dac26:	0849      	lsrs	r1, r1, #1
   dac28:	ea5f 0030 	movs.w	r0, r0, rrx
   dac2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dac30:	f104 0401 	add.w	r4, r4, #1
   dac34:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dac38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dac3c:	f080 809a 	bcs.w	dad74 <__adddf3+0x240>
   dac40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dac44:	bf08      	it	eq
   dac46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dac4a:	f150 0000 	adcs.w	r0, r0, #0
   dac4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dac52:	ea41 0105 	orr.w	r1, r1, r5
   dac56:	bd30      	pop	{r4, r5, pc}
   dac58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dac5c:	4140      	adcs	r0, r0
   dac5e:	eb41 0101 	adc.w	r1, r1, r1
   dac62:	3c01      	subs	r4, #1
   dac64:	bf28      	it	cs
   dac66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dac6a:	d2e9      	bcs.n	dac40 <__adddf3+0x10c>
   dac6c:	f091 0f00 	teq	r1, #0
   dac70:	bf04      	itt	eq
   dac72:	4601      	moveq	r1, r0
   dac74:	2000      	moveq	r0, #0
   dac76:	fab1 f381 	clz	r3, r1
   dac7a:	bf08      	it	eq
   dac7c:	3320      	addeq	r3, #32
   dac7e:	f1a3 030b 	sub.w	r3, r3, #11
   dac82:	f1b3 0220 	subs.w	r2, r3, #32
   dac86:	da0c      	bge.n	daca2 <__adddf3+0x16e>
   dac88:	320c      	adds	r2, #12
   dac8a:	dd08      	ble.n	dac9e <__adddf3+0x16a>
   dac8c:	f102 0c14 	add.w	ip, r2, #20
   dac90:	f1c2 020c 	rsb	r2, r2, #12
   dac94:	fa01 f00c 	lsl.w	r0, r1, ip
   dac98:	fa21 f102 	lsr.w	r1, r1, r2
   dac9c:	e00c      	b.n	dacb8 <__adddf3+0x184>
   dac9e:	f102 0214 	add.w	r2, r2, #20
   daca2:	bfd8      	it	le
   daca4:	f1c2 0c20 	rsble	ip, r2, #32
   daca8:	fa01 f102 	lsl.w	r1, r1, r2
   dacac:	fa20 fc0c 	lsr.w	ip, r0, ip
   dacb0:	bfdc      	itt	le
   dacb2:	ea41 010c 	orrle.w	r1, r1, ip
   dacb6:	4090      	lslle	r0, r2
   dacb8:	1ae4      	subs	r4, r4, r3
   dacba:	bfa2      	ittt	ge
   dacbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dacc0:	4329      	orrge	r1, r5
   dacc2:	bd30      	popge	{r4, r5, pc}
   dacc4:	ea6f 0404 	mvn.w	r4, r4
   dacc8:	3c1f      	subs	r4, #31
   dacca:	da1c      	bge.n	dad06 <__adddf3+0x1d2>
   daccc:	340c      	adds	r4, #12
   dacce:	dc0e      	bgt.n	dacee <__adddf3+0x1ba>
   dacd0:	f104 0414 	add.w	r4, r4, #20
   dacd4:	f1c4 0220 	rsb	r2, r4, #32
   dacd8:	fa20 f004 	lsr.w	r0, r0, r4
   dacdc:	fa01 f302 	lsl.w	r3, r1, r2
   dace0:	ea40 0003 	orr.w	r0, r0, r3
   dace4:	fa21 f304 	lsr.w	r3, r1, r4
   dace8:	ea45 0103 	orr.w	r1, r5, r3
   dacec:	bd30      	pop	{r4, r5, pc}
   dacee:	f1c4 040c 	rsb	r4, r4, #12
   dacf2:	f1c4 0220 	rsb	r2, r4, #32
   dacf6:	fa20 f002 	lsr.w	r0, r0, r2
   dacfa:	fa01 f304 	lsl.w	r3, r1, r4
   dacfe:	ea40 0003 	orr.w	r0, r0, r3
   dad02:	4629      	mov	r1, r5
   dad04:	bd30      	pop	{r4, r5, pc}
   dad06:	fa21 f004 	lsr.w	r0, r1, r4
   dad0a:	4629      	mov	r1, r5
   dad0c:	bd30      	pop	{r4, r5, pc}
   dad0e:	f094 0f00 	teq	r4, #0
   dad12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dad16:	bf06      	itte	eq
   dad18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dad1c:	3401      	addeq	r4, #1
   dad1e:	3d01      	subne	r5, #1
   dad20:	e74e      	b.n	dabc0 <__adddf3+0x8c>
   dad22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dad26:	bf18      	it	ne
   dad28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dad2c:	d029      	beq.n	dad82 <__adddf3+0x24e>
   dad2e:	ea94 0f05 	teq	r4, r5
   dad32:	bf08      	it	eq
   dad34:	ea90 0f02 	teqeq	r0, r2
   dad38:	d005      	beq.n	dad46 <__adddf3+0x212>
   dad3a:	ea54 0c00 	orrs.w	ip, r4, r0
   dad3e:	bf04      	itt	eq
   dad40:	4619      	moveq	r1, r3
   dad42:	4610      	moveq	r0, r2
   dad44:	bd30      	pop	{r4, r5, pc}
   dad46:	ea91 0f03 	teq	r1, r3
   dad4a:	bf1e      	ittt	ne
   dad4c:	2100      	movne	r1, #0
   dad4e:	2000      	movne	r0, #0
   dad50:	bd30      	popne	{r4, r5, pc}
   dad52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dad56:	d105      	bne.n	dad64 <__adddf3+0x230>
   dad58:	0040      	lsls	r0, r0, #1
   dad5a:	4149      	adcs	r1, r1
   dad5c:	bf28      	it	cs
   dad5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dad62:	bd30      	pop	{r4, r5, pc}
   dad64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dad68:	bf3c      	itt	cc
   dad6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dad6e:	bd30      	popcc	{r4, r5, pc}
   dad70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dad74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dad78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dad7c:	f04f 0000 	mov.w	r0, #0
   dad80:	bd30      	pop	{r4, r5, pc}
   dad82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dad86:	bf1a      	itte	ne
   dad88:	4619      	movne	r1, r3
   dad8a:	4610      	movne	r0, r2
   dad8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dad90:	bf1c      	itt	ne
   dad92:	460b      	movne	r3, r1
   dad94:	4602      	movne	r2, r0
   dad96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dad9a:	bf06      	itte	eq
   dad9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dada0:	ea91 0f03 	teqeq	r1, r3
   dada4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dada8:	bd30      	pop	{r4, r5, pc}
   dadaa:	bf00      	nop

000dadac <__aeabi_ui2d>:
   dadac:	f090 0f00 	teq	r0, #0
   dadb0:	bf04      	itt	eq
   dadb2:	2100      	moveq	r1, #0
   dadb4:	4770      	bxeq	lr
   dadb6:	b530      	push	{r4, r5, lr}
   dadb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dadbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dadc0:	f04f 0500 	mov.w	r5, #0
   dadc4:	f04f 0100 	mov.w	r1, #0
   dadc8:	e750      	b.n	dac6c <__adddf3+0x138>
   dadca:	bf00      	nop

000dadcc <__aeabi_i2d>:
   dadcc:	f090 0f00 	teq	r0, #0
   dadd0:	bf04      	itt	eq
   dadd2:	2100      	moveq	r1, #0
   dadd4:	4770      	bxeq	lr
   dadd6:	b530      	push	{r4, r5, lr}
   dadd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dade0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dade4:	bf48      	it	mi
   dade6:	4240      	negmi	r0, r0
   dade8:	f04f 0100 	mov.w	r1, #0
   dadec:	e73e      	b.n	dac6c <__adddf3+0x138>
   dadee:	bf00      	nop

000dadf0 <__aeabi_f2d>:
   dadf0:	0042      	lsls	r2, r0, #1
   dadf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dadf6:	ea4f 0131 	mov.w	r1, r1, rrx
   dadfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dadfe:	bf1f      	itttt	ne
   dae00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dae04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dae08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dae0c:	4770      	bxne	lr
   dae0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dae12:	bf08      	it	eq
   dae14:	4770      	bxeq	lr
   dae16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dae1a:	bf04      	itt	eq
   dae1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dae20:	4770      	bxeq	lr
   dae22:	b530      	push	{r4, r5, lr}
   dae24:	f44f 7460 	mov.w	r4, #896	; 0x380
   dae28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dae2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dae30:	e71c      	b.n	dac6c <__adddf3+0x138>
   dae32:	bf00      	nop

000dae34 <__aeabi_ul2d>:
   dae34:	ea50 0201 	orrs.w	r2, r0, r1
   dae38:	bf08      	it	eq
   dae3a:	4770      	bxeq	lr
   dae3c:	b530      	push	{r4, r5, lr}
   dae3e:	f04f 0500 	mov.w	r5, #0
   dae42:	e00a      	b.n	dae5a <__aeabi_l2d+0x16>

000dae44 <__aeabi_l2d>:
   dae44:	ea50 0201 	orrs.w	r2, r0, r1
   dae48:	bf08      	it	eq
   dae4a:	4770      	bxeq	lr
   dae4c:	b530      	push	{r4, r5, lr}
   dae4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dae52:	d502      	bpl.n	dae5a <__aeabi_l2d+0x16>
   dae54:	4240      	negs	r0, r0
   dae56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dae5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dae5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dae62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dae66:	f43f aed8 	beq.w	dac1a <__adddf3+0xe6>
   dae6a:	f04f 0203 	mov.w	r2, #3
   dae6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dae72:	bf18      	it	ne
   dae74:	3203      	addne	r2, #3
   dae76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dae7a:	bf18      	it	ne
   dae7c:	3203      	addne	r2, #3
   dae7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dae82:	f1c2 0320 	rsb	r3, r2, #32
   dae86:	fa00 fc03 	lsl.w	ip, r0, r3
   dae8a:	fa20 f002 	lsr.w	r0, r0, r2
   dae8e:	fa01 fe03 	lsl.w	lr, r1, r3
   dae92:	ea40 000e 	orr.w	r0, r0, lr
   dae96:	fa21 f102 	lsr.w	r1, r1, r2
   dae9a:	4414      	add	r4, r2
   dae9c:	e6bd      	b.n	dac1a <__adddf3+0xe6>
   dae9e:	bf00      	nop

000daea0 <__aeabi_dmul>:
   daea0:	b570      	push	{r4, r5, r6, lr}
   daea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daeaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daeae:	bf1d      	ittte	ne
   daeb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daeb4:	ea94 0f0c 	teqne	r4, ip
   daeb8:	ea95 0f0c 	teqne	r5, ip
   daebc:	f000 f8de 	bleq	db07c <__aeabi_dmul+0x1dc>
   daec0:	442c      	add	r4, r5
   daec2:	ea81 0603 	eor.w	r6, r1, r3
   daec6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   daeca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   daece:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   daed2:	bf18      	it	ne
   daed4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   daed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daee0:	d038      	beq.n	daf54 <__aeabi_dmul+0xb4>
   daee2:	fba0 ce02 	umull	ip, lr, r0, r2
   daee6:	f04f 0500 	mov.w	r5, #0
   daeea:	fbe1 e502 	umlal	lr, r5, r1, r2
   daeee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   daef2:	fbe0 e503 	umlal	lr, r5, r0, r3
   daef6:	f04f 0600 	mov.w	r6, #0
   daefa:	fbe1 5603 	umlal	r5, r6, r1, r3
   daefe:	f09c 0f00 	teq	ip, #0
   daf02:	bf18      	it	ne
   daf04:	f04e 0e01 	orrne.w	lr, lr, #1
   daf08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   daf0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   daf10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   daf14:	d204      	bcs.n	daf20 <__aeabi_dmul+0x80>
   daf16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   daf1a:	416d      	adcs	r5, r5
   daf1c:	eb46 0606 	adc.w	r6, r6, r6
   daf20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   daf24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   daf28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   daf2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   daf30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   daf34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daf38:	bf88      	it	hi
   daf3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daf3e:	d81e      	bhi.n	daf7e <__aeabi_dmul+0xde>
   daf40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   daf44:	bf08      	it	eq
   daf46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   daf4a:	f150 0000 	adcs.w	r0, r0, #0
   daf4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daf52:	bd70      	pop	{r4, r5, r6, pc}
   daf54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daf58:	ea46 0101 	orr.w	r1, r6, r1
   daf5c:	ea40 0002 	orr.w	r0, r0, r2
   daf60:	ea81 0103 	eor.w	r1, r1, r3
   daf64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   daf68:	bfc2      	ittt	gt
   daf6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   daf6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daf72:	bd70      	popgt	{r4, r5, r6, pc}
   daf74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daf78:	f04f 0e00 	mov.w	lr, #0
   daf7c:	3c01      	subs	r4, #1
   daf7e:	f300 80ab 	bgt.w	db0d8 <__aeabi_dmul+0x238>
   daf82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   daf86:	bfde      	ittt	le
   daf88:	2000      	movle	r0, #0
   daf8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   daf8e:	bd70      	pople	{r4, r5, r6, pc}
   daf90:	f1c4 0400 	rsb	r4, r4, #0
   daf94:	3c20      	subs	r4, #32
   daf96:	da35      	bge.n	db004 <__aeabi_dmul+0x164>
   daf98:	340c      	adds	r4, #12
   daf9a:	dc1b      	bgt.n	dafd4 <__aeabi_dmul+0x134>
   daf9c:	f104 0414 	add.w	r4, r4, #20
   dafa0:	f1c4 0520 	rsb	r5, r4, #32
   dafa4:	fa00 f305 	lsl.w	r3, r0, r5
   dafa8:	fa20 f004 	lsr.w	r0, r0, r4
   dafac:	fa01 f205 	lsl.w	r2, r1, r5
   dafb0:	ea40 0002 	orr.w	r0, r0, r2
   dafb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dafb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dafbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dafc0:	fa21 f604 	lsr.w	r6, r1, r4
   dafc4:	eb42 0106 	adc.w	r1, r2, r6
   dafc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dafcc:	bf08      	it	eq
   dafce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dafd2:	bd70      	pop	{r4, r5, r6, pc}
   dafd4:	f1c4 040c 	rsb	r4, r4, #12
   dafd8:	f1c4 0520 	rsb	r5, r4, #32
   dafdc:	fa00 f304 	lsl.w	r3, r0, r4
   dafe0:	fa20 f005 	lsr.w	r0, r0, r5
   dafe4:	fa01 f204 	lsl.w	r2, r1, r4
   dafe8:	ea40 0002 	orr.w	r0, r0, r2
   dafec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daff0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daff4:	f141 0100 	adc.w	r1, r1, #0
   daff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daffc:	bf08      	it	eq
   daffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db002:	bd70      	pop	{r4, r5, r6, pc}
   db004:	f1c4 0520 	rsb	r5, r4, #32
   db008:	fa00 f205 	lsl.w	r2, r0, r5
   db00c:	ea4e 0e02 	orr.w	lr, lr, r2
   db010:	fa20 f304 	lsr.w	r3, r0, r4
   db014:	fa01 f205 	lsl.w	r2, r1, r5
   db018:	ea43 0302 	orr.w	r3, r3, r2
   db01c:	fa21 f004 	lsr.w	r0, r1, r4
   db020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db024:	fa21 f204 	lsr.w	r2, r1, r4
   db028:	ea20 0002 	bic.w	r0, r0, r2
   db02c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db034:	bf08      	it	eq
   db036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db03a:	bd70      	pop	{r4, r5, r6, pc}
   db03c:	f094 0f00 	teq	r4, #0
   db040:	d10f      	bne.n	db062 <__aeabi_dmul+0x1c2>
   db042:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db046:	0040      	lsls	r0, r0, #1
   db048:	eb41 0101 	adc.w	r1, r1, r1
   db04c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db050:	bf08      	it	eq
   db052:	3c01      	subeq	r4, #1
   db054:	d0f7      	beq.n	db046 <__aeabi_dmul+0x1a6>
   db056:	ea41 0106 	orr.w	r1, r1, r6
   db05a:	f095 0f00 	teq	r5, #0
   db05e:	bf18      	it	ne
   db060:	4770      	bxne	lr
   db062:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db066:	0052      	lsls	r2, r2, #1
   db068:	eb43 0303 	adc.w	r3, r3, r3
   db06c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db070:	bf08      	it	eq
   db072:	3d01      	subeq	r5, #1
   db074:	d0f7      	beq.n	db066 <__aeabi_dmul+0x1c6>
   db076:	ea43 0306 	orr.w	r3, r3, r6
   db07a:	4770      	bx	lr
   db07c:	ea94 0f0c 	teq	r4, ip
   db080:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db084:	bf18      	it	ne
   db086:	ea95 0f0c 	teqne	r5, ip
   db08a:	d00c      	beq.n	db0a6 <__aeabi_dmul+0x206>
   db08c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db090:	bf18      	it	ne
   db092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db096:	d1d1      	bne.n	db03c <__aeabi_dmul+0x19c>
   db098:	ea81 0103 	eor.w	r1, r1, r3
   db09c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db0a0:	f04f 0000 	mov.w	r0, #0
   db0a4:	bd70      	pop	{r4, r5, r6, pc}
   db0a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db0aa:	bf06      	itte	eq
   db0ac:	4610      	moveq	r0, r2
   db0ae:	4619      	moveq	r1, r3
   db0b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db0b4:	d019      	beq.n	db0ea <__aeabi_dmul+0x24a>
   db0b6:	ea94 0f0c 	teq	r4, ip
   db0ba:	d102      	bne.n	db0c2 <__aeabi_dmul+0x222>
   db0bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db0c0:	d113      	bne.n	db0ea <__aeabi_dmul+0x24a>
   db0c2:	ea95 0f0c 	teq	r5, ip
   db0c6:	d105      	bne.n	db0d4 <__aeabi_dmul+0x234>
   db0c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db0cc:	bf1c      	itt	ne
   db0ce:	4610      	movne	r0, r2
   db0d0:	4619      	movne	r1, r3
   db0d2:	d10a      	bne.n	db0ea <__aeabi_dmul+0x24a>
   db0d4:	ea81 0103 	eor.w	r1, r1, r3
   db0d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db0dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db0e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db0e4:	f04f 0000 	mov.w	r0, #0
   db0e8:	bd70      	pop	{r4, r5, r6, pc}
   db0ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db0ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db0f2:	bd70      	pop	{r4, r5, r6, pc}

000db0f4 <__aeabi_ddiv>:
   db0f4:	b570      	push	{r4, r5, r6, lr}
   db0f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db0fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db0fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db102:	bf1d      	ittte	ne
   db104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db108:	ea94 0f0c 	teqne	r4, ip
   db10c:	ea95 0f0c 	teqne	r5, ip
   db110:	f000 f8a7 	bleq	db262 <__aeabi_ddiv+0x16e>
   db114:	eba4 0405 	sub.w	r4, r4, r5
   db118:	ea81 0e03 	eor.w	lr, r1, r3
   db11c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db120:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db124:	f000 8088 	beq.w	db238 <__aeabi_ddiv+0x144>
   db128:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db12c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db130:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db134:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db138:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db13c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db140:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db144:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db148:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db14c:	429d      	cmp	r5, r3
   db14e:	bf08      	it	eq
   db150:	4296      	cmpeq	r6, r2
   db152:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db156:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db15a:	d202      	bcs.n	db162 <__aeabi_ddiv+0x6e>
   db15c:	085b      	lsrs	r3, r3, #1
   db15e:	ea4f 0232 	mov.w	r2, r2, rrx
   db162:	1ab6      	subs	r6, r6, r2
   db164:	eb65 0503 	sbc.w	r5, r5, r3
   db168:	085b      	lsrs	r3, r3, #1
   db16a:	ea4f 0232 	mov.w	r2, r2, rrx
   db16e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db172:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db176:	ebb6 0e02 	subs.w	lr, r6, r2
   db17a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db17e:	bf22      	ittt	cs
   db180:	1ab6      	subcs	r6, r6, r2
   db182:	4675      	movcs	r5, lr
   db184:	ea40 000c 	orrcs.w	r0, r0, ip
   db188:	085b      	lsrs	r3, r3, #1
   db18a:	ea4f 0232 	mov.w	r2, r2, rrx
   db18e:	ebb6 0e02 	subs.w	lr, r6, r2
   db192:	eb75 0e03 	sbcs.w	lr, r5, r3
   db196:	bf22      	ittt	cs
   db198:	1ab6      	subcs	r6, r6, r2
   db19a:	4675      	movcs	r5, lr
   db19c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db1a0:	085b      	lsrs	r3, r3, #1
   db1a2:	ea4f 0232 	mov.w	r2, r2, rrx
   db1a6:	ebb6 0e02 	subs.w	lr, r6, r2
   db1aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   db1ae:	bf22      	ittt	cs
   db1b0:	1ab6      	subcs	r6, r6, r2
   db1b2:	4675      	movcs	r5, lr
   db1b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db1b8:	085b      	lsrs	r3, r3, #1
   db1ba:	ea4f 0232 	mov.w	r2, r2, rrx
   db1be:	ebb6 0e02 	subs.w	lr, r6, r2
   db1c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   db1c6:	bf22      	ittt	cs
   db1c8:	1ab6      	subcs	r6, r6, r2
   db1ca:	4675      	movcs	r5, lr
   db1cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db1d0:	ea55 0e06 	orrs.w	lr, r5, r6
   db1d4:	d018      	beq.n	db208 <__aeabi_ddiv+0x114>
   db1d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db1da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db1de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db1e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db1e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db1ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db1ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db1f2:	d1c0      	bne.n	db176 <__aeabi_ddiv+0x82>
   db1f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db1f8:	d10b      	bne.n	db212 <__aeabi_ddiv+0x11e>
   db1fa:	ea41 0100 	orr.w	r1, r1, r0
   db1fe:	f04f 0000 	mov.w	r0, #0
   db202:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db206:	e7b6      	b.n	db176 <__aeabi_ddiv+0x82>
   db208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db20c:	bf04      	itt	eq
   db20e:	4301      	orreq	r1, r0
   db210:	2000      	moveq	r0, #0
   db212:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db216:	bf88      	it	hi
   db218:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db21c:	f63f aeaf 	bhi.w	daf7e <__aeabi_dmul+0xde>
   db220:	ebb5 0c03 	subs.w	ip, r5, r3
   db224:	bf04      	itt	eq
   db226:	ebb6 0c02 	subseq.w	ip, r6, r2
   db22a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db22e:	f150 0000 	adcs.w	r0, r0, #0
   db232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db236:	bd70      	pop	{r4, r5, r6, pc}
   db238:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db23c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db240:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db244:	bfc2      	ittt	gt
   db246:	ebd4 050c 	rsbsgt	r5, r4, ip
   db24a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db24e:	bd70      	popgt	{r4, r5, r6, pc}
   db250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db254:	f04f 0e00 	mov.w	lr, #0
   db258:	3c01      	subs	r4, #1
   db25a:	e690      	b.n	daf7e <__aeabi_dmul+0xde>
   db25c:	ea45 0e06 	orr.w	lr, r5, r6
   db260:	e68d      	b.n	daf7e <__aeabi_dmul+0xde>
   db262:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db266:	ea94 0f0c 	teq	r4, ip
   db26a:	bf08      	it	eq
   db26c:	ea95 0f0c 	teqeq	r5, ip
   db270:	f43f af3b 	beq.w	db0ea <__aeabi_dmul+0x24a>
   db274:	ea94 0f0c 	teq	r4, ip
   db278:	d10a      	bne.n	db290 <__aeabi_ddiv+0x19c>
   db27a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db27e:	f47f af34 	bne.w	db0ea <__aeabi_dmul+0x24a>
   db282:	ea95 0f0c 	teq	r5, ip
   db286:	f47f af25 	bne.w	db0d4 <__aeabi_dmul+0x234>
   db28a:	4610      	mov	r0, r2
   db28c:	4619      	mov	r1, r3
   db28e:	e72c      	b.n	db0ea <__aeabi_dmul+0x24a>
   db290:	ea95 0f0c 	teq	r5, ip
   db294:	d106      	bne.n	db2a4 <__aeabi_ddiv+0x1b0>
   db296:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db29a:	f43f aefd 	beq.w	db098 <__aeabi_dmul+0x1f8>
   db29e:	4610      	mov	r0, r2
   db2a0:	4619      	mov	r1, r3
   db2a2:	e722      	b.n	db0ea <__aeabi_dmul+0x24a>
   db2a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db2a8:	bf18      	it	ne
   db2aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db2ae:	f47f aec5 	bne.w	db03c <__aeabi_dmul+0x19c>
   db2b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db2b6:	f47f af0d 	bne.w	db0d4 <__aeabi_dmul+0x234>
   db2ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db2be:	f47f aeeb 	bne.w	db098 <__aeabi_dmul+0x1f8>
   db2c2:	e712      	b.n	db0ea <__aeabi_dmul+0x24a>

000db2c4 <__gedf2>:
   db2c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db2c8:	e006      	b.n	db2d8 <__cmpdf2+0x4>
   db2ca:	bf00      	nop

000db2cc <__ledf2>:
   db2cc:	f04f 0c01 	mov.w	ip, #1
   db2d0:	e002      	b.n	db2d8 <__cmpdf2+0x4>
   db2d2:	bf00      	nop

000db2d4 <__cmpdf2>:
   db2d4:	f04f 0c01 	mov.w	ip, #1
   db2d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   db2dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db2e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db2e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db2e8:	bf18      	it	ne
   db2ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db2ee:	d01b      	beq.n	db328 <__cmpdf2+0x54>
   db2f0:	b001      	add	sp, #4
   db2f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db2f6:	bf0c      	ite	eq
   db2f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db2fc:	ea91 0f03 	teqne	r1, r3
   db300:	bf02      	ittt	eq
   db302:	ea90 0f02 	teqeq	r0, r2
   db306:	2000      	moveq	r0, #0
   db308:	4770      	bxeq	lr
   db30a:	f110 0f00 	cmn.w	r0, #0
   db30e:	ea91 0f03 	teq	r1, r3
   db312:	bf58      	it	pl
   db314:	4299      	cmppl	r1, r3
   db316:	bf08      	it	eq
   db318:	4290      	cmpeq	r0, r2
   db31a:	bf2c      	ite	cs
   db31c:	17d8      	asrcs	r0, r3, #31
   db31e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db322:	f040 0001 	orr.w	r0, r0, #1
   db326:	4770      	bx	lr
   db328:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db32c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db330:	d102      	bne.n	db338 <__cmpdf2+0x64>
   db332:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db336:	d107      	bne.n	db348 <__cmpdf2+0x74>
   db338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db33c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db340:	d1d6      	bne.n	db2f0 <__cmpdf2+0x1c>
   db342:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db346:	d0d3      	beq.n	db2f0 <__cmpdf2+0x1c>
   db348:	f85d 0b04 	ldr.w	r0, [sp], #4
   db34c:	4770      	bx	lr
   db34e:	bf00      	nop

000db350 <__aeabi_cdrcmple>:
   db350:	4684      	mov	ip, r0
   db352:	4610      	mov	r0, r2
   db354:	4662      	mov	r2, ip
   db356:	468c      	mov	ip, r1
   db358:	4619      	mov	r1, r3
   db35a:	4663      	mov	r3, ip
   db35c:	e000      	b.n	db360 <__aeabi_cdcmpeq>
   db35e:	bf00      	nop

000db360 <__aeabi_cdcmpeq>:
   db360:	b501      	push	{r0, lr}
   db362:	f7ff ffb7 	bl	db2d4 <__cmpdf2>
   db366:	2800      	cmp	r0, #0
   db368:	bf48      	it	mi
   db36a:	f110 0f00 	cmnmi.w	r0, #0
   db36e:	bd01      	pop	{r0, pc}

000db370 <__aeabi_dcmpeq>:
   db370:	f84d ed08 	str.w	lr, [sp, #-8]!
   db374:	f7ff fff4 	bl	db360 <__aeabi_cdcmpeq>
   db378:	bf0c      	ite	eq
   db37a:	2001      	moveq	r0, #1
   db37c:	2000      	movne	r0, #0
   db37e:	f85d fb08 	ldr.w	pc, [sp], #8
   db382:	bf00      	nop

000db384 <__aeabi_dcmplt>:
   db384:	f84d ed08 	str.w	lr, [sp, #-8]!
   db388:	f7ff ffea 	bl	db360 <__aeabi_cdcmpeq>
   db38c:	bf34      	ite	cc
   db38e:	2001      	movcc	r0, #1
   db390:	2000      	movcs	r0, #0
   db392:	f85d fb08 	ldr.w	pc, [sp], #8
   db396:	bf00      	nop

000db398 <__aeabi_dcmple>:
   db398:	f84d ed08 	str.w	lr, [sp, #-8]!
   db39c:	f7ff ffe0 	bl	db360 <__aeabi_cdcmpeq>
   db3a0:	bf94      	ite	ls
   db3a2:	2001      	movls	r0, #1
   db3a4:	2000      	movhi	r0, #0
   db3a6:	f85d fb08 	ldr.w	pc, [sp], #8
   db3aa:	bf00      	nop

000db3ac <__aeabi_dcmpge>:
   db3ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   db3b0:	f7ff ffce 	bl	db350 <__aeabi_cdrcmple>
   db3b4:	bf94      	ite	ls
   db3b6:	2001      	movls	r0, #1
   db3b8:	2000      	movhi	r0, #0
   db3ba:	f85d fb08 	ldr.w	pc, [sp], #8
   db3be:	bf00      	nop

000db3c0 <__aeabi_dcmpgt>:
   db3c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db3c4:	f7ff ffc4 	bl	db350 <__aeabi_cdrcmple>
   db3c8:	bf34      	ite	cc
   db3ca:	2001      	movcc	r0, #1
   db3cc:	2000      	movcs	r0, #0
   db3ce:	f85d fb08 	ldr.w	pc, [sp], #8
   db3d2:	bf00      	nop

000db3d4 <__aeabi_dcmpun>:
   db3d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db3d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db3dc:	d102      	bne.n	db3e4 <__aeabi_dcmpun+0x10>
   db3de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db3e2:	d10a      	bne.n	db3fa <__aeabi_dcmpun+0x26>
   db3e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db3e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db3ec:	d102      	bne.n	db3f4 <__aeabi_dcmpun+0x20>
   db3ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db3f2:	d102      	bne.n	db3fa <__aeabi_dcmpun+0x26>
   db3f4:	f04f 0000 	mov.w	r0, #0
   db3f8:	4770      	bx	lr
   db3fa:	f04f 0001 	mov.w	r0, #1
   db3fe:	4770      	bx	lr

000db400 <__aeabi_d2uiz>:
   db400:	004a      	lsls	r2, r1, #1
   db402:	d211      	bcs.n	db428 <__aeabi_d2uiz+0x28>
   db404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db408:	d211      	bcs.n	db42e <__aeabi_d2uiz+0x2e>
   db40a:	d50d      	bpl.n	db428 <__aeabi_d2uiz+0x28>
   db40c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db414:	d40e      	bmi.n	db434 <__aeabi_d2uiz+0x34>
   db416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db41a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db41e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db422:	fa23 f002 	lsr.w	r0, r3, r2
   db426:	4770      	bx	lr
   db428:	f04f 0000 	mov.w	r0, #0
   db42c:	4770      	bx	lr
   db42e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db432:	d102      	bne.n	db43a <__aeabi_d2uiz+0x3a>
   db434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db438:	4770      	bx	lr
   db43a:	f04f 0000 	mov.w	r0, #0
   db43e:	4770      	bx	lr

000db440 <__aeabi_d2f>:
   db440:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db444:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db448:	bf24      	itt	cs
   db44a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db44e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db452:	d90d      	bls.n	db470 <__aeabi_d2f+0x30>
   db454:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db458:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db45c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db460:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db464:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db468:	bf08      	it	eq
   db46a:	f020 0001 	biceq.w	r0, r0, #1
   db46e:	4770      	bx	lr
   db470:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db474:	d121      	bne.n	db4ba <__aeabi_d2f+0x7a>
   db476:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db47a:	bfbc      	itt	lt
   db47c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db480:	4770      	bxlt	lr
   db482:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db486:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db48a:	f1c2 0218 	rsb	r2, r2, #24
   db48e:	f1c2 0c20 	rsb	ip, r2, #32
   db492:	fa10 f30c 	lsls.w	r3, r0, ip
   db496:	fa20 f002 	lsr.w	r0, r0, r2
   db49a:	bf18      	it	ne
   db49c:	f040 0001 	orrne.w	r0, r0, #1
   db4a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db4a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db4a8:	fa03 fc0c 	lsl.w	ip, r3, ip
   db4ac:	ea40 000c 	orr.w	r0, r0, ip
   db4b0:	fa23 f302 	lsr.w	r3, r3, r2
   db4b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db4b8:	e7cc      	b.n	db454 <__aeabi_d2f+0x14>
   db4ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db4be:	d107      	bne.n	db4d0 <__aeabi_d2f+0x90>
   db4c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db4c4:	bf1e      	ittt	ne
   db4c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db4ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db4ce:	4770      	bxne	lr
   db4d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db4d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db4d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db4dc:	4770      	bx	lr
   db4de:	bf00      	nop

000db4e0 <__aeabi_d2ulz>:
   db4e0:	b5d0      	push	{r4, r6, r7, lr}
   db4e2:	4b0c      	ldr	r3, [pc, #48]	; (db514 <__aeabi_d2ulz+0x34>)
   db4e4:	2200      	movs	r2, #0
   db4e6:	4606      	mov	r6, r0
   db4e8:	460f      	mov	r7, r1
   db4ea:	f7ff fcd9 	bl	daea0 <__aeabi_dmul>
   db4ee:	f7ff ff87 	bl	db400 <__aeabi_d2uiz>
   db4f2:	4604      	mov	r4, r0
   db4f4:	f7ff fc5a 	bl	dadac <__aeabi_ui2d>
   db4f8:	4b07      	ldr	r3, [pc, #28]	; (db518 <__aeabi_d2ulz+0x38>)
   db4fa:	2200      	movs	r2, #0
   db4fc:	f7ff fcd0 	bl	daea0 <__aeabi_dmul>
   db500:	4602      	mov	r2, r0
   db502:	460b      	mov	r3, r1
   db504:	4630      	mov	r0, r6
   db506:	4639      	mov	r1, r7
   db508:	f7ff fb12 	bl	dab30 <__aeabi_dsub>
   db50c:	f7ff ff78 	bl	db400 <__aeabi_d2uiz>
   db510:	4621      	mov	r1, r4
   db512:	bdd0      	pop	{r4, r6, r7, pc}
   db514:	3df00000 	.word	0x3df00000
   db518:	41f00000 	.word	0x41f00000

000db51c <asctime_r>:
   db51c:	b510      	push	{r4, lr}
   db51e:	460c      	mov	r4, r1
   db520:	6941      	ldr	r1, [r0, #20]
   db522:	6903      	ldr	r3, [r0, #16]
   db524:	6982      	ldr	r2, [r0, #24]
   db526:	b086      	sub	sp, #24
   db528:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db52c:	9104      	str	r1, [sp, #16]
   db52e:	6801      	ldr	r1, [r0, #0]
   db530:	9103      	str	r1, [sp, #12]
   db532:	6841      	ldr	r1, [r0, #4]
   db534:	9102      	str	r1, [sp, #8]
   db536:	6881      	ldr	r1, [r0, #8]
   db538:	9101      	str	r1, [sp, #4]
   db53a:	68c1      	ldr	r1, [r0, #12]
   db53c:	9100      	str	r1, [sp, #0]
   db53e:	4907      	ldr	r1, [pc, #28]	; (db55c <asctime_r+0x40>)
   db540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db544:	440b      	add	r3, r1
   db546:	4906      	ldr	r1, [pc, #24]	; (db560 <asctime_r+0x44>)
   db548:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db54c:	440a      	add	r2, r1
   db54e:	4620      	mov	r0, r4
   db550:	4904      	ldr	r1, [pc, #16]	; (db564 <asctime_r+0x48>)
   db552:	f7fd fac3 	bl	d8adc <siprintf>
   db556:	4620      	mov	r0, r4
   db558:	b006      	add	sp, #24
   db55a:	bd10      	pop	{r4, pc}
   db55c:	000de34a 	.word	0x000de34a
   db560:	000de335 	.word	0x000de335
   db564:	000de315 	.word	0x000de315

000db568 <atof>:
   db568:	2100      	movs	r1, #0
   db56a:	f000 befb 	b.w	dc364 <strtod>

000db56e <atoi>:
   db56e:	220a      	movs	r2, #10
   db570:	2100      	movs	r1, #0
   db572:	f000 bf7d 	b.w	dc470 <strtol>
	...

000db578 <__cxa_atexit>:
   db578:	b510      	push	{r4, lr}
   db57a:	4c05      	ldr	r4, [pc, #20]	; (db590 <__cxa_atexit+0x18>)
   db57c:	4613      	mov	r3, r2
   db57e:	b12c      	cbz	r4, db58c <__cxa_atexit+0x14>
   db580:	460a      	mov	r2, r1
   db582:	4601      	mov	r1, r0
   db584:	2002      	movs	r0, #2
   db586:	f3af 8000 	nop.w
   db58a:	bd10      	pop	{r4, pc}
   db58c:	4620      	mov	r0, r4
   db58e:	e7fc      	b.n	db58a <__cxa_atexit+0x12>
   db590:	00000000 	.word	0x00000000

000db594 <gmtime>:
   db594:	b538      	push	{r3, r4, r5, lr}
   db596:	4b07      	ldr	r3, [pc, #28]	; (db5b4 <gmtime+0x20>)
   db598:	681d      	ldr	r5, [r3, #0]
   db59a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   db59c:	4604      	mov	r4, r0
   db59e:	b91b      	cbnz	r3, db5a8 <gmtime+0x14>
   db5a0:	2024      	movs	r0, #36	; 0x24
   db5a2:	f7fd fa83 	bl	d8aac <malloc>
   db5a6:	63e8      	str	r0, [r5, #60]	; 0x3c
   db5a8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   db5aa:	4620      	mov	r0, r4
   db5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db5b0:	f7fd badc 	b.w	d8b6c <gmtime_r>
   db5b4:	2003dd08 	.word	0x2003dd08

000db5b8 <memcpy>:
   db5b8:	440a      	add	r2, r1
   db5ba:	4291      	cmp	r1, r2
   db5bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db5c0:	d100      	bne.n	db5c4 <memcpy+0xc>
   db5c2:	4770      	bx	lr
   db5c4:	b510      	push	{r4, lr}
   db5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   db5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   db5ce:	4291      	cmp	r1, r2
   db5d0:	d1f9      	bne.n	db5c6 <memcpy+0xe>
   db5d2:	bd10      	pop	{r4, pc}

000db5d4 <memmove>:
   db5d4:	4288      	cmp	r0, r1
   db5d6:	b510      	push	{r4, lr}
   db5d8:	eb01 0402 	add.w	r4, r1, r2
   db5dc:	d902      	bls.n	db5e4 <memmove+0x10>
   db5de:	4284      	cmp	r4, r0
   db5e0:	4623      	mov	r3, r4
   db5e2:	d807      	bhi.n	db5f4 <memmove+0x20>
   db5e4:	1e43      	subs	r3, r0, #1
   db5e6:	42a1      	cmp	r1, r4
   db5e8:	d008      	beq.n	db5fc <memmove+0x28>
   db5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   db5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
   db5f2:	e7f8      	b.n	db5e6 <memmove+0x12>
   db5f4:	4402      	add	r2, r0
   db5f6:	4601      	mov	r1, r0
   db5f8:	428a      	cmp	r2, r1
   db5fa:	d100      	bne.n	db5fe <memmove+0x2a>
   db5fc:	bd10      	pop	{r4, pc}
   db5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db602:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db606:	e7f7      	b.n	db5f8 <memmove+0x24>

000db608 <memset>:
   db608:	4402      	add	r2, r0
   db60a:	4603      	mov	r3, r0
   db60c:	4293      	cmp	r3, r2
   db60e:	d100      	bne.n	db612 <memset+0xa>
   db610:	4770      	bx	lr
   db612:	f803 1b01 	strb.w	r1, [r3], #1
   db616:	e7f9      	b.n	db60c <memset+0x4>

000db618 <srand>:
   db618:	b538      	push	{r3, r4, r5, lr}
   db61a:	4b0d      	ldr	r3, [pc, #52]	; (db650 <srand+0x38>)
   db61c:	681d      	ldr	r5, [r3, #0]
   db61e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db620:	4604      	mov	r4, r0
   db622:	b97b      	cbnz	r3, db644 <srand+0x2c>
   db624:	2018      	movs	r0, #24
   db626:	f7fd fa41 	bl	d8aac <malloc>
   db62a:	4a0a      	ldr	r2, [pc, #40]	; (db654 <srand+0x3c>)
   db62c:	4b0a      	ldr	r3, [pc, #40]	; (db658 <srand+0x40>)
   db62e:	63a8      	str	r0, [r5, #56]	; 0x38
   db630:	e9c0 2300 	strd	r2, r3, [r0]
   db634:	4b09      	ldr	r3, [pc, #36]	; (db65c <srand+0x44>)
   db636:	6083      	str	r3, [r0, #8]
   db638:	230b      	movs	r3, #11
   db63a:	8183      	strh	r3, [r0, #12]
   db63c:	2201      	movs	r2, #1
   db63e:	2300      	movs	r3, #0
   db640:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db644:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db646:	2200      	movs	r2, #0
   db648:	611c      	str	r4, [r3, #16]
   db64a:	615a      	str	r2, [r3, #20]
   db64c:	bd38      	pop	{r3, r4, r5, pc}
   db64e:	bf00      	nop
   db650:	2003dd08 	.word	0x2003dd08
   db654:	abcd330e 	.word	0xabcd330e
   db658:	e66d1234 	.word	0xe66d1234
   db65c:	0005deec 	.word	0x0005deec

000db660 <strcmp>:
   db660:	f810 2b01 	ldrb.w	r2, [r0], #1
   db664:	f811 3b01 	ldrb.w	r3, [r1], #1
   db668:	2a01      	cmp	r2, #1
   db66a:	bf28      	it	cs
   db66c:	429a      	cmpcs	r2, r3
   db66e:	d0f7      	beq.n	db660 <strcmp>
   db670:	1ad0      	subs	r0, r2, r3
   db672:	4770      	bx	lr

000db674 <strcpy>:
   db674:	4603      	mov	r3, r0
   db676:	f811 2b01 	ldrb.w	r2, [r1], #1
   db67a:	f803 2b01 	strb.w	r2, [r3], #1
   db67e:	2a00      	cmp	r2, #0
   db680:	d1f9      	bne.n	db676 <strcpy+0x2>
   db682:	4770      	bx	lr

000db684 <strdup>:
   db684:	4b02      	ldr	r3, [pc, #8]	; (db690 <strdup+0xc>)
   db686:	4601      	mov	r1, r0
   db688:	6818      	ldr	r0, [r3, #0]
   db68a:	f000 b803 	b.w	db694 <_strdup_r>
   db68e:	bf00      	nop
   db690:	2003dd08 	.word	0x2003dd08

000db694 <_strdup_r>:
   db694:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db696:	4604      	mov	r4, r0
   db698:	4608      	mov	r0, r1
   db69a:	460d      	mov	r5, r1
   db69c:	f000 f80f 	bl	db6be <strlen>
   db6a0:	1c42      	adds	r2, r0, #1
   db6a2:	4611      	mov	r1, r2
   db6a4:	4620      	mov	r0, r4
   db6a6:	9201      	str	r2, [sp, #4]
   db6a8:	f7fd fa38 	bl	d8b1c <_malloc_r>
   db6ac:	4604      	mov	r4, r0
   db6ae:	b118      	cbz	r0, db6b8 <_strdup_r+0x24>
   db6b0:	9a01      	ldr	r2, [sp, #4]
   db6b2:	4629      	mov	r1, r5
   db6b4:	f7ff ff80 	bl	db5b8 <memcpy>
   db6b8:	4620      	mov	r0, r4
   db6ba:	b003      	add	sp, #12
   db6bc:	bd30      	pop	{r4, r5, pc}

000db6be <strlen>:
   db6be:	4603      	mov	r3, r0
   db6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   db6c4:	2a00      	cmp	r2, #0
   db6c6:	d1fb      	bne.n	db6c0 <strlen+0x2>
   db6c8:	1a18      	subs	r0, r3, r0
   db6ca:	3801      	subs	r0, #1
   db6cc:	4770      	bx	lr

000db6ce <strncmp>:
   db6ce:	b510      	push	{r4, lr}
   db6d0:	b16a      	cbz	r2, db6ee <strncmp+0x20>
   db6d2:	3901      	subs	r1, #1
   db6d4:	1884      	adds	r4, r0, r2
   db6d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   db6da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db6de:	4293      	cmp	r3, r2
   db6e0:	d103      	bne.n	db6ea <strncmp+0x1c>
   db6e2:	42a0      	cmp	r0, r4
   db6e4:	d001      	beq.n	db6ea <strncmp+0x1c>
   db6e6:	2b00      	cmp	r3, #0
   db6e8:	d1f5      	bne.n	db6d6 <strncmp+0x8>
   db6ea:	1a98      	subs	r0, r3, r2
   db6ec:	bd10      	pop	{r4, pc}
   db6ee:	4610      	mov	r0, r2
   db6f0:	e7fc      	b.n	db6ec <strncmp+0x1e>

000db6f2 <strncpy>:
   db6f2:	b510      	push	{r4, lr}
   db6f4:	3901      	subs	r1, #1
   db6f6:	4603      	mov	r3, r0
   db6f8:	b132      	cbz	r2, db708 <strncpy+0x16>
   db6fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db6fe:	f803 4b01 	strb.w	r4, [r3], #1
   db702:	3a01      	subs	r2, #1
   db704:	2c00      	cmp	r4, #0
   db706:	d1f7      	bne.n	db6f8 <strncpy+0x6>
   db708:	441a      	add	r2, r3
   db70a:	2100      	movs	r1, #0
   db70c:	4293      	cmp	r3, r2
   db70e:	d100      	bne.n	db712 <strncpy+0x20>
   db710:	bd10      	pop	{r4, pc}
   db712:	f803 1b01 	strb.w	r1, [r3], #1
   db716:	e7f9      	b.n	db70c <strncpy+0x1a>

000db718 <sulp>:
   db718:	b570      	push	{r4, r5, r6, lr}
   db71a:	4604      	mov	r4, r0
   db71c:	460d      	mov	r5, r1
   db71e:	ec45 4b10 	vmov	d0, r4, r5
   db722:	4616      	mov	r6, r2
   db724:	f001 fd1a 	bl	dd15c <__ulp>
   db728:	ec51 0b10 	vmov	r0, r1, d0
   db72c:	b17e      	cbz	r6, db74e <sulp+0x36>
   db72e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db736:	2b00      	cmp	r3, #0
   db738:	dd09      	ble.n	db74e <sulp+0x36>
   db73a:	051b      	lsls	r3, r3, #20
   db73c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db740:	2400      	movs	r4, #0
   db742:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db746:	4622      	mov	r2, r4
   db748:	462b      	mov	r3, r5
   db74a:	f7ff fba9 	bl	daea0 <__aeabi_dmul>
   db74e:	bd70      	pop	{r4, r5, r6, pc}

000db750 <_strtod_l>:
   db750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db754:	b0a3      	sub	sp, #140	; 0x8c
   db756:	461f      	mov	r7, r3
   db758:	2300      	movs	r3, #0
   db75a:	931e      	str	r3, [sp, #120]	; 0x78
   db75c:	4ba4      	ldr	r3, [pc, #656]	; (db9f0 <_strtod_l+0x2a0>)
   db75e:	9219      	str	r2, [sp, #100]	; 0x64
   db760:	681b      	ldr	r3, [r3, #0]
   db762:	9307      	str	r3, [sp, #28]
   db764:	4604      	mov	r4, r0
   db766:	4618      	mov	r0, r3
   db768:	4688      	mov	r8, r1
   db76a:	f7ff ffa8 	bl	db6be <strlen>
   db76e:	f04f 0a00 	mov.w	sl, #0
   db772:	4605      	mov	r5, r0
   db774:	f04f 0b00 	mov.w	fp, #0
   db778:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db77c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db77e:	781a      	ldrb	r2, [r3, #0]
   db780:	2a2b      	cmp	r2, #43	; 0x2b
   db782:	d04c      	beq.n	db81e <_strtod_l+0xce>
   db784:	d839      	bhi.n	db7fa <_strtod_l+0xaa>
   db786:	2a0d      	cmp	r2, #13
   db788:	d832      	bhi.n	db7f0 <_strtod_l+0xa0>
   db78a:	2a08      	cmp	r2, #8
   db78c:	d832      	bhi.n	db7f4 <_strtod_l+0xa4>
   db78e:	2a00      	cmp	r2, #0
   db790:	d03c      	beq.n	db80c <_strtod_l+0xbc>
   db792:	2300      	movs	r3, #0
   db794:	930e      	str	r3, [sp, #56]	; 0x38
   db796:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   db798:	7833      	ldrb	r3, [r6, #0]
   db79a:	2b30      	cmp	r3, #48	; 0x30
   db79c:	f040 80b4 	bne.w	db908 <_strtod_l+0x1b8>
   db7a0:	7873      	ldrb	r3, [r6, #1]
   db7a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db7a6:	2b58      	cmp	r3, #88	; 0x58
   db7a8:	d16c      	bne.n	db884 <_strtod_l+0x134>
   db7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db7ac:	9301      	str	r3, [sp, #4]
   db7ae:	ab1e      	add	r3, sp, #120	; 0x78
   db7b0:	9702      	str	r7, [sp, #8]
   db7b2:	9300      	str	r3, [sp, #0]
   db7b4:	4a8f      	ldr	r2, [pc, #572]	; (db9f4 <_strtod_l+0x2a4>)
   db7b6:	ab1f      	add	r3, sp, #124	; 0x7c
   db7b8:	a91d      	add	r1, sp, #116	; 0x74
   db7ba:	4620      	mov	r0, r4
   db7bc:	f000 feca 	bl	dc554 <__gethex>
   db7c0:	f010 0707 	ands.w	r7, r0, #7
   db7c4:	4605      	mov	r5, r0
   db7c6:	d005      	beq.n	db7d4 <_strtod_l+0x84>
   db7c8:	2f06      	cmp	r7, #6
   db7ca:	d12a      	bne.n	db822 <_strtod_l+0xd2>
   db7cc:	3601      	adds	r6, #1
   db7ce:	2300      	movs	r3, #0
   db7d0:	961d      	str	r6, [sp, #116]	; 0x74
   db7d2:	930e      	str	r3, [sp, #56]	; 0x38
   db7d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db7d6:	2b00      	cmp	r3, #0
   db7d8:	f040 8596 	bne.w	dc308 <_strtod_l+0xbb8>
   db7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db7de:	b1db      	cbz	r3, db818 <_strtod_l+0xc8>
   db7e0:	4652      	mov	r2, sl
   db7e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db7e6:	ec43 2b10 	vmov	d0, r2, r3
   db7ea:	b023      	add	sp, #140	; 0x8c
   db7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db7f0:	2a20      	cmp	r2, #32
   db7f2:	d1ce      	bne.n	db792 <_strtod_l+0x42>
   db7f4:	3301      	adds	r3, #1
   db7f6:	931d      	str	r3, [sp, #116]	; 0x74
   db7f8:	e7c0      	b.n	db77c <_strtod_l+0x2c>
   db7fa:	2a2d      	cmp	r2, #45	; 0x2d
   db7fc:	d1c9      	bne.n	db792 <_strtod_l+0x42>
   db7fe:	2201      	movs	r2, #1
   db800:	920e      	str	r2, [sp, #56]	; 0x38
   db802:	1c5a      	adds	r2, r3, #1
   db804:	921d      	str	r2, [sp, #116]	; 0x74
   db806:	785b      	ldrb	r3, [r3, #1]
   db808:	2b00      	cmp	r3, #0
   db80a:	d1c4      	bne.n	db796 <_strtod_l+0x46>
   db80c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db80e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db812:	2b00      	cmp	r3, #0
   db814:	f040 8576 	bne.w	dc304 <_strtod_l+0xbb4>
   db818:	4652      	mov	r2, sl
   db81a:	465b      	mov	r3, fp
   db81c:	e7e3      	b.n	db7e6 <_strtod_l+0x96>
   db81e:	2200      	movs	r2, #0
   db820:	e7ee      	b.n	db800 <_strtod_l+0xb0>
   db822:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db824:	b13a      	cbz	r2, db836 <_strtod_l+0xe6>
   db826:	2135      	movs	r1, #53	; 0x35
   db828:	a820      	add	r0, sp, #128	; 0x80
   db82a:	f001 fd96 	bl	dd35a <__copybits>
   db82e:	991e      	ldr	r1, [sp, #120]	; 0x78
   db830:	4620      	mov	r0, r4
   db832:	f001 f9cb 	bl	dcbcc <_Bfree>
   db836:	3f01      	subs	r7, #1
   db838:	2f05      	cmp	r7, #5
   db83a:	d807      	bhi.n	db84c <_strtod_l+0xfc>
   db83c:	e8df f007 	tbb	[pc, r7]
   db840:	1d180b0e 	.word	0x1d180b0e
   db844:	030e      	.short	0x030e
   db846:	f04f 0b00 	mov.w	fp, #0
   db84a:	46da      	mov	sl, fp
   db84c:	0728      	lsls	r0, r5, #28
   db84e:	d5c1      	bpl.n	db7d4 <_strtod_l+0x84>
   db850:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db854:	e7be      	b.n	db7d4 <_strtod_l+0x84>
   db856:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   db85a:	e7f7      	b.n	db84c <_strtod_l+0xfc>
   db85c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   db860:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   db862:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db866:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db86a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db86e:	e7ed      	b.n	db84c <_strtod_l+0xfc>
   db870:	f8df b184 	ldr.w	fp, [pc, #388]	; db9f8 <_strtod_l+0x2a8>
   db874:	f04f 0a00 	mov.w	sl, #0
   db878:	e7e8      	b.n	db84c <_strtod_l+0xfc>
   db87a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db87e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db882:	e7e3      	b.n	db84c <_strtod_l+0xfc>
   db884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db886:	1c5a      	adds	r2, r3, #1
   db888:	921d      	str	r2, [sp, #116]	; 0x74
   db88a:	785b      	ldrb	r3, [r3, #1]
   db88c:	2b30      	cmp	r3, #48	; 0x30
   db88e:	d0f9      	beq.n	db884 <_strtod_l+0x134>
   db890:	2b00      	cmp	r3, #0
   db892:	d09f      	beq.n	db7d4 <_strtod_l+0x84>
   db894:	2301      	movs	r3, #1
   db896:	f04f 0900 	mov.w	r9, #0
   db89a:	9304      	str	r3, [sp, #16]
   db89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db89e:	930a      	str	r3, [sp, #40]	; 0x28
   db8a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db8a4:	464f      	mov	r7, r9
   db8a6:	220a      	movs	r2, #10
   db8a8:	981d      	ldr	r0, [sp, #116]	; 0x74
   db8aa:	7806      	ldrb	r6, [r0, #0]
   db8ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db8b0:	b2d9      	uxtb	r1, r3
   db8b2:	2909      	cmp	r1, #9
   db8b4:	d92a      	bls.n	db90c <_strtod_l+0x1bc>
   db8b6:	9907      	ldr	r1, [sp, #28]
   db8b8:	462a      	mov	r2, r5
   db8ba:	f7ff ff08 	bl	db6ce <strncmp>
   db8be:	b398      	cbz	r0, db928 <_strtod_l+0x1d8>
   db8c0:	2000      	movs	r0, #0
   db8c2:	4633      	mov	r3, r6
   db8c4:	463d      	mov	r5, r7
   db8c6:	9007      	str	r0, [sp, #28]
   db8c8:	4602      	mov	r2, r0
   db8ca:	2b65      	cmp	r3, #101	; 0x65
   db8cc:	d001      	beq.n	db8d2 <_strtod_l+0x182>
   db8ce:	2b45      	cmp	r3, #69	; 0x45
   db8d0:	d118      	bne.n	db904 <_strtod_l+0x1b4>
   db8d2:	b91d      	cbnz	r5, db8dc <_strtod_l+0x18c>
   db8d4:	9b04      	ldr	r3, [sp, #16]
   db8d6:	4303      	orrs	r3, r0
   db8d8:	d098      	beq.n	db80c <_strtod_l+0xbc>
   db8da:	2500      	movs	r5, #0
   db8dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db8e0:	f108 0301 	add.w	r3, r8, #1
   db8e4:	931d      	str	r3, [sp, #116]	; 0x74
   db8e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   db8ea:	2b2b      	cmp	r3, #43	; 0x2b
   db8ec:	d075      	beq.n	db9da <_strtod_l+0x28a>
   db8ee:	2b2d      	cmp	r3, #45	; 0x2d
   db8f0:	d07b      	beq.n	db9ea <_strtod_l+0x29a>
   db8f2:	f04f 0c00 	mov.w	ip, #0
   db8f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db8fa:	2909      	cmp	r1, #9
   db8fc:	f240 8082 	bls.w	dba04 <_strtod_l+0x2b4>
   db900:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db904:	2600      	movs	r6, #0
   db906:	e09d      	b.n	dba44 <_strtod_l+0x2f4>
   db908:	2300      	movs	r3, #0
   db90a:	e7c4      	b.n	db896 <_strtod_l+0x146>
   db90c:	2f08      	cmp	r7, #8
   db90e:	bfd8      	it	le
   db910:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db912:	f100 0001 	add.w	r0, r0, #1
   db916:	bfda      	itte	le
   db918:	fb02 3301 	mlale	r3, r2, r1, r3
   db91c:	9309      	strle	r3, [sp, #36]	; 0x24
   db91e:	fb02 3909 	mlagt	r9, r2, r9, r3
   db922:	3701      	adds	r7, #1
   db924:	901d      	str	r0, [sp, #116]	; 0x74
   db926:	e7bf      	b.n	db8a8 <_strtod_l+0x158>
   db928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db92a:	195a      	adds	r2, r3, r5
   db92c:	921d      	str	r2, [sp, #116]	; 0x74
   db92e:	5d5b      	ldrb	r3, [r3, r5]
   db930:	2f00      	cmp	r7, #0
   db932:	d037      	beq.n	db9a4 <_strtod_l+0x254>
   db934:	9007      	str	r0, [sp, #28]
   db936:	463d      	mov	r5, r7
   db938:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db93c:	2a09      	cmp	r2, #9
   db93e:	d912      	bls.n	db966 <_strtod_l+0x216>
   db940:	2201      	movs	r2, #1
   db942:	e7c2      	b.n	db8ca <_strtod_l+0x17a>
   db944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db946:	1c5a      	adds	r2, r3, #1
   db948:	921d      	str	r2, [sp, #116]	; 0x74
   db94a:	785b      	ldrb	r3, [r3, #1]
   db94c:	3001      	adds	r0, #1
   db94e:	2b30      	cmp	r3, #48	; 0x30
   db950:	d0f8      	beq.n	db944 <_strtod_l+0x1f4>
   db952:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db956:	2a08      	cmp	r2, #8
   db958:	f200 84db 	bhi.w	dc312 <_strtod_l+0xbc2>
   db95c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db95e:	9007      	str	r0, [sp, #28]
   db960:	2000      	movs	r0, #0
   db962:	920a      	str	r2, [sp, #40]	; 0x28
   db964:	4605      	mov	r5, r0
   db966:	3b30      	subs	r3, #48	; 0x30
   db968:	f100 0201 	add.w	r2, r0, #1
   db96c:	d014      	beq.n	db998 <_strtod_l+0x248>
   db96e:	9907      	ldr	r1, [sp, #28]
   db970:	4411      	add	r1, r2
   db972:	9107      	str	r1, [sp, #28]
   db974:	462a      	mov	r2, r5
   db976:	eb00 0e05 	add.w	lr, r0, r5
   db97a:	210a      	movs	r1, #10
   db97c:	4572      	cmp	r2, lr
   db97e:	d113      	bne.n	db9a8 <_strtod_l+0x258>
   db980:	182a      	adds	r2, r5, r0
   db982:	2a08      	cmp	r2, #8
   db984:	f105 0501 	add.w	r5, r5, #1
   db988:	4405      	add	r5, r0
   db98a:	dc1c      	bgt.n	db9c6 <_strtod_l+0x276>
   db98c:	9909      	ldr	r1, [sp, #36]	; 0x24
   db98e:	220a      	movs	r2, #10
   db990:	fb02 3301 	mla	r3, r2, r1, r3
   db994:	9309      	str	r3, [sp, #36]	; 0x24
   db996:	2200      	movs	r2, #0
   db998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db99a:	1c59      	adds	r1, r3, #1
   db99c:	911d      	str	r1, [sp, #116]	; 0x74
   db99e:	785b      	ldrb	r3, [r3, #1]
   db9a0:	4610      	mov	r0, r2
   db9a2:	e7c9      	b.n	db938 <_strtod_l+0x1e8>
   db9a4:	4638      	mov	r0, r7
   db9a6:	e7d2      	b.n	db94e <_strtod_l+0x1fe>
   db9a8:	2a08      	cmp	r2, #8
   db9aa:	dc04      	bgt.n	db9b6 <_strtod_l+0x266>
   db9ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db9ae:	434e      	muls	r6, r1
   db9b0:	9609      	str	r6, [sp, #36]	; 0x24
   db9b2:	3201      	adds	r2, #1
   db9b4:	e7e2      	b.n	db97c <_strtod_l+0x22c>
   db9b6:	f102 0c01 	add.w	ip, r2, #1
   db9ba:	f1bc 0f10 	cmp.w	ip, #16
   db9be:	bfd8      	it	le
   db9c0:	fb01 f909 	mulle.w	r9, r1, r9
   db9c4:	e7f5      	b.n	db9b2 <_strtod_l+0x262>
   db9c6:	2d10      	cmp	r5, #16
   db9c8:	bfdc      	itt	le
   db9ca:	220a      	movle	r2, #10
   db9cc:	fb02 3909 	mlale	r9, r2, r9, r3
   db9d0:	e7e1      	b.n	db996 <_strtod_l+0x246>
   db9d2:	2300      	movs	r3, #0
   db9d4:	9307      	str	r3, [sp, #28]
   db9d6:	2201      	movs	r2, #1
   db9d8:	e77c      	b.n	db8d4 <_strtod_l+0x184>
   db9da:	f04f 0c00 	mov.w	ip, #0
   db9de:	f108 0302 	add.w	r3, r8, #2
   db9e2:	931d      	str	r3, [sp, #116]	; 0x74
   db9e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   db9e8:	e785      	b.n	db8f6 <_strtod_l+0x1a6>
   db9ea:	f04f 0c01 	mov.w	ip, #1
   db9ee:	e7f6      	b.n	db9de <_strtod_l+0x28e>
   db9f0:	000de4d4 	.word	0x000de4d4
   db9f4:	000de37c 	.word	0x000de37c
   db9f8:	7ff00000 	.word	0x7ff00000
   db9fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db9fe:	1c59      	adds	r1, r3, #1
   dba00:	911d      	str	r1, [sp, #116]	; 0x74
   dba02:	785b      	ldrb	r3, [r3, #1]
   dba04:	2b30      	cmp	r3, #48	; 0x30
   dba06:	d0f9      	beq.n	db9fc <_strtod_l+0x2ac>
   dba08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dba0c:	2908      	cmp	r1, #8
   dba0e:	f63f af79 	bhi.w	db904 <_strtod_l+0x1b4>
   dba12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dba16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba18:	9308      	str	r3, [sp, #32]
   dba1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba1c:	1c59      	adds	r1, r3, #1
   dba1e:	911d      	str	r1, [sp, #116]	; 0x74
   dba20:	785b      	ldrb	r3, [r3, #1]
   dba22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dba26:	2e09      	cmp	r6, #9
   dba28:	d937      	bls.n	dba9a <_strtod_l+0x34a>
   dba2a:	9e08      	ldr	r6, [sp, #32]
   dba2c:	1b89      	subs	r1, r1, r6
   dba2e:	2908      	cmp	r1, #8
   dba30:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dba34:	dc02      	bgt.n	dba3c <_strtod_l+0x2ec>
   dba36:	4576      	cmp	r6, lr
   dba38:	bfa8      	it	ge
   dba3a:	4676      	movge	r6, lr
   dba3c:	f1bc 0f00 	cmp.w	ip, #0
   dba40:	d000      	beq.n	dba44 <_strtod_l+0x2f4>
   dba42:	4276      	negs	r6, r6
   dba44:	2d00      	cmp	r5, #0
   dba46:	d14f      	bne.n	dbae8 <_strtod_l+0x398>
   dba48:	9904      	ldr	r1, [sp, #16]
   dba4a:	4301      	orrs	r1, r0
   dba4c:	f47f aec2 	bne.w	db7d4 <_strtod_l+0x84>
   dba50:	2a00      	cmp	r2, #0
   dba52:	f47f aedb 	bne.w	db80c <_strtod_l+0xbc>
   dba56:	2b69      	cmp	r3, #105	; 0x69
   dba58:	d027      	beq.n	dbaaa <_strtod_l+0x35a>
   dba5a:	dc24      	bgt.n	dbaa6 <_strtod_l+0x356>
   dba5c:	2b49      	cmp	r3, #73	; 0x49
   dba5e:	d024      	beq.n	dbaaa <_strtod_l+0x35a>
   dba60:	2b4e      	cmp	r3, #78	; 0x4e
   dba62:	f47f aed3 	bne.w	db80c <_strtod_l+0xbc>
   dba66:	499e      	ldr	r1, [pc, #632]	; (dbce0 <_strtod_l+0x590>)
   dba68:	a81d      	add	r0, sp, #116	; 0x74
   dba6a:	f000 ffb9 	bl	dc9e0 <__match>
   dba6e:	2800      	cmp	r0, #0
   dba70:	f43f aecc 	beq.w	db80c <_strtod_l+0xbc>
   dba74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba76:	781b      	ldrb	r3, [r3, #0]
   dba78:	2b28      	cmp	r3, #40	; 0x28
   dba7a:	d12d      	bne.n	dbad8 <_strtod_l+0x388>
   dba7c:	4999      	ldr	r1, [pc, #612]	; (dbce4 <_strtod_l+0x594>)
   dba7e:	aa20      	add	r2, sp, #128	; 0x80
   dba80:	a81d      	add	r0, sp, #116	; 0x74
   dba82:	f000 ffc1 	bl	dca08 <__hexnan>
   dba86:	2805      	cmp	r0, #5
   dba88:	d126      	bne.n	dbad8 <_strtod_l+0x388>
   dba8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dba8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dba90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dba94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dba98:	e69c      	b.n	db7d4 <_strtod_l+0x84>
   dba9a:	210a      	movs	r1, #10
   dba9c:	fb01 3e0e 	mla	lr, r1, lr, r3
   dbaa0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dbaa4:	e7b9      	b.n	dba1a <_strtod_l+0x2ca>
   dbaa6:	2b6e      	cmp	r3, #110	; 0x6e
   dbaa8:	e7db      	b.n	dba62 <_strtod_l+0x312>
   dbaaa:	498f      	ldr	r1, [pc, #572]	; (dbce8 <_strtod_l+0x598>)
   dbaac:	a81d      	add	r0, sp, #116	; 0x74
   dbaae:	f000 ff97 	bl	dc9e0 <__match>
   dbab2:	2800      	cmp	r0, #0
   dbab4:	f43f aeaa 	beq.w	db80c <_strtod_l+0xbc>
   dbab8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbaba:	498c      	ldr	r1, [pc, #560]	; (dbcec <_strtod_l+0x59c>)
   dbabc:	3b01      	subs	r3, #1
   dbabe:	a81d      	add	r0, sp, #116	; 0x74
   dbac0:	931d      	str	r3, [sp, #116]	; 0x74
   dbac2:	f000 ff8d 	bl	dc9e0 <__match>
   dbac6:	b910      	cbnz	r0, dbace <_strtod_l+0x37e>
   dbac8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbaca:	3301      	adds	r3, #1
   dbacc:	931d      	str	r3, [sp, #116]	; 0x74
   dbace:	f8df b22c 	ldr.w	fp, [pc, #556]	; dbcfc <_strtod_l+0x5ac>
   dbad2:	f04f 0a00 	mov.w	sl, #0
   dbad6:	e67d      	b.n	db7d4 <_strtod_l+0x84>
   dbad8:	4885      	ldr	r0, [pc, #532]	; (dbcf0 <_strtod_l+0x5a0>)
   dbada:	f001 fc91 	bl	dd400 <nan>
   dbade:	ed8d 0b04 	vstr	d0, [sp, #16]
   dbae2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dbae6:	e675      	b.n	db7d4 <_strtod_l+0x84>
   dbae8:	9b07      	ldr	r3, [sp, #28]
   dbaea:	9809      	ldr	r0, [sp, #36]	; 0x24
   dbaec:	1af3      	subs	r3, r6, r3
   dbaee:	2f00      	cmp	r7, #0
   dbaf0:	bf08      	it	eq
   dbaf2:	462f      	moveq	r7, r5
   dbaf4:	2d10      	cmp	r5, #16
   dbaf6:	9308      	str	r3, [sp, #32]
   dbaf8:	46a8      	mov	r8, r5
   dbafa:	bfa8      	it	ge
   dbafc:	f04f 0810 	movge.w	r8, #16
   dbb00:	f7ff f954 	bl	dadac <__aeabi_ui2d>
   dbb04:	2d09      	cmp	r5, #9
   dbb06:	4682      	mov	sl, r0
   dbb08:	468b      	mov	fp, r1
   dbb0a:	dd13      	ble.n	dbb34 <_strtod_l+0x3e4>
   dbb0c:	4b79      	ldr	r3, [pc, #484]	; (dbcf4 <_strtod_l+0x5a4>)
   dbb0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dbb12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dbb16:	f7ff f9c3 	bl	daea0 <__aeabi_dmul>
   dbb1a:	4682      	mov	sl, r0
   dbb1c:	4648      	mov	r0, r9
   dbb1e:	468b      	mov	fp, r1
   dbb20:	f7ff f944 	bl	dadac <__aeabi_ui2d>
   dbb24:	4602      	mov	r2, r0
   dbb26:	460b      	mov	r3, r1
   dbb28:	4650      	mov	r0, sl
   dbb2a:	4659      	mov	r1, fp
   dbb2c:	f7ff f802 	bl	dab34 <__adddf3>
   dbb30:	4682      	mov	sl, r0
   dbb32:	468b      	mov	fp, r1
   dbb34:	2d0f      	cmp	r5, #15
   dbb36:	dc38      	bgt.n	dbbaa <_strtod_l+0x45a>
   dbb38:	9b08      	ldr	r3, [sp, #32]
   dbb3a:	2b00      	cmp	r3, #0
   dbb3c:	f43f ae4a 	beq.w	db7d4 <_strtod_l+0x84>
   dbb40:	dd24      	ble.n	dbb8c <_strtod_l+0x43c>
   dbb42:	2b16      	cmp	r3, #22
   dbb44:	dc0b      	bgt.n	dbb5e <_strtod_l+0x40e>
   dbb46:	4d6b      	ldr	r5, [pc, #428]	; (dbcf4 <_strtod_l+0x5a4>)
   dbb48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dbb4c:	e9d5 0100 	ldrd	r0, r1, [r5]
   dbb50:	4652      	mov	r2, sl
   dbb52:	465b      	mov	r3, fp
   dbb54:	f7ff f9a4 	bl	daea0 <__aeabi_dmul>
   dbb58:	4682      	mov	sl, r0
   dbb5a:	468b      	mov	fp, r1
   dbb5c:	e63a      	b.n	db7d4 <_strtod_l+0x84>
   dbb5e:	9a08      	ldr	r2, [sp, #32]
   dbb60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dbb64:	4293      	cmp	r3, r2
   dbb66:	db20      	blt.n	dbbaa <_strtod_l+0x45a>
   dbb68:	4c62      	ldr	r4, [pc, #392]	; (dbcf4 <_strtod_l+0x5a4>)
   dbb6a:	f1c5 050f 	rsb	r5, r5, #15
   dbb6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dbb72:	4652      	mov	r2, sl
   dbb74:	465b      	mov	r3, fp
   dbb76:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbb7a:	f7ff f991 	bl	daea0 <__aeabi_dmul>
   dbb7e:	9b08      	ldr	r3, [sp, #32]
   dbb80:	1b5d      	subs	r5, r3, r5
   dbb82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dbb86:	e9d4 2300 	ldrd	r2, r3, [r4]
   dbb8a:	e7e3      	b.n	dbb54 <_strtod_l+0x404>
   dbb8c:	9b08      	ldr	r3, [sp, #32]
   dbb8e:	3316      	adds	r3, #22
   dbb90:	db0b      	blt.n	dbbaa <_strtod_l+0x45a>
   dbb92:	9b07      	ldr	r3, [sp, #28]
   dbb94:	4a57      	ldr	r2, [pc, #348]	; (dbcf4 <_strtod_l+0x5a4>)
   dbb96:	1b9e      	subs	r6, r3, r6
   dbb98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dbb9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dbba0:	4650      	mov	r0, sl
   dbba2:	4659      	mov	r1, fp
   dbba4:	f7ff faa6 	bl	db0f4 <__aeabi_ddiv>
   dbba8:	e7d6      	b.n	dbb58 <_strtod_l+0x408>
   dbbaa:	9b08      	ldr	r3, [sp, #32]
   dbbac:	eba5 0808 	sub.w	r8, r5, r8
   dbbb0:	4498      	add	r8, r3
   dbbb2:	f1b8 0f00 	cmp.w	r8, #0
   dbbb6:	dd71      	ble.n	dbc9c <_strtod_l+0x54c>
   dbbb8:	f018 030f 	ands.w	r3, r8, #15
   dbbbc:	d00a      	beq.n	dbbd4 <_strtod_l+0x484>
   dbbbe:	494d      	ldr	r1, [pc, #308]	; (dbcf4 <_strtod_l+0x5a4>)
   dbbc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dbbc4:	4652      	mov	r2, sl
   dbbc6:	465b      	mov	r3, fp
   dbbc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbbcc:	f7ff f968 	bl	daea0 <__aeabi_dmul>
   dbbd0:	4682      	mov	sl, r0
   dbbd2:	468b      	mov	fp, r1
   dbbd4:	f038 080f 	bics.w	r8, r8, #15
   dbbd8:	d04d      	beq.n	dbc76 <_strtod_l+0x526>
   dbbda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dbbde:	dd22      	ble.n	dbc26 <_strtod_l+0x4d6>
   dbbe0:	2500      	movs	r5, #0
   dbbe2:	462e      	mov	r6, r5
   dbbe4:	9509      	str	r5, [sp, #36]	; 0x24
   dbbe6:	9507      	str	r5, [sp, #28]
   dbbe8:	2322      	movs	r3, #34	; 0x22
   dbbea:	f8df b110 	ldr.w	fp, [pc, #272]	; dbcfc <_strtod_l+0x5ac>
   dbbee:	6023      	str	r3, [r4, #0]
   dbbf0:	f04f 0a00 	mov.w	sl, #0
   dbbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbbf6:	2b00      	cmp	r3, #0
   dbbf8:	f43f adec 	beq.w	db7d4 <_strtod_l+0x84>
   dbbfc:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbbfe:	4620      	mov	r0, r4
   dbc00:	f000 ffe4 	bl	dcbcc <_Bfree>
   dbc04:	9907      	ldr	r1, [sp, #28]
   dbc06:	4620      	mov	r0, r4
   dbc08:	f000 ffe0 	bl	dcbcc <_Bfree>
   dbc0c:	4631      	mov	r1, r6
   dbc0e:	4620      	mov	r0, r4
   dbc10:	f000 ffdc 	bl	dcbcc <_Bfree>
   dbc14:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbc16:	4620      	mov	r0, r4
   dbc18:	f000 ffd8 	bl	dcbcc <_Bfree>
   dbc1c:	4629      	mov	r1, r5
   dbc1e:	4620      	mov	r0, r4
   dbc20:	f000 ffd4 	bl	dcbcc <_Bfree>
   dbc24:	e5d6      	b.n	db7d4 <_strtod_l+0x84>
   dbc26:	2300      	movs	r3, #0
   dbc28:	ea4f 1828 	mov.w	r8, r8, asr #4
   dbc2c:	4650      	mov	r0, sl
   dbc2e:	4659      	mov	r1, fp
   dbc30:	4699      	mov	r9, r3
   dbc32:	f1b8 0f01 	cmp.w	r8, #1
   dbc36:	dc21      	bgt.n	dbc7c <_strtod_l+0x52c>
   dbc38:	b10b      	cbz	r3, dbc3e <_strtod_l+0x4ee>
   dbc3a:	4682      	mov	sl, r0
   dbc3c:	468b      	mov	fp, r1
   dbc3e:	4b2e      	ldr	r3, [pc, #184]	; (dbcf8 <_strtod_l+0x5a8>)
   dbc40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dbc44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dbc48:	4652      	mov	r2, sl
   dbc4a:	465b      	mov	r3, fp
   dbc4c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dbc50:	f7ff f926 	bl	daea0 <__aeabi_dmul>
   dbc54:	4b29      	ldr	r3, [pc, #164]	; (dbcfc <_strtod_l+0x5ac>)
   dbc56:	460a      	mov	r2, r1
   dbc58:	400b      	ands	r3, r1
   dbc5a:	4929      	ldr	r1, [pc, #164]	; (dbd00 <_strtod_l+0x5b0>)
   dbc5c:	428b      	cmp	r3, r1
   dbc5e:	4682      	mov	sl, r0
   dbc60:	d8be      	bhi.n	dbbe0 <_strtod_l+0x490>
   dbc62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dbc66:	428b      	cmp	r3, r1
   dbc68:	bf86      	itte	hi
   dbc6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dbd04 <_strtod_l+0x5b4>
   dbc6e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dbc72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dbc76:	2300      	movs	r3, #0
   dbc78:	9304      	str	r3, [sp, #16]
   dbc7a:	e081      	b.n	dbd80 <_strtod_l+0x630>
   dbc7c:	f018 0f01 	tst.w	r8, #1
   dbc80:	d007      	beq.n	dbc92 <_strtod_l+0x542>
   dbc82:	4b1d      	ldr	r3, [pc, #116]	; (dbcf8 <_strtod_l+0x5a8>)
   dbc84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dbc88:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc8c:	f7ff f908 	bl	daea0 <__aeabi_dmul>
   dbc90:	2301      	movs	r3, #1
   dbc92:	f109 0901 	add.w	r9, r9, #1
   dbc96:	ea4f 0868 	mov.w	r8, r8, asr #1
   dbc9a:	e7ca      	b.n	dbc32 <_strtod_l+0x4e2>
   dbc9c:	d0eb      	beq.n	dbc76 <_strtod_l+0x526>
   dbc9e:	f1c8 0800 	rsb	r8, r8, #0
   dbca2:	f018 020f 	ands.w	r2, r8, #15
   dbca6:	d00a      	beq.n	dbcbe <_strtod_l+0x56e>
   dbca8:	4b12      	ldr	r3, [pc, #72]	; (dbcf4 <_strtod_l+0x5a4>)
   dbcaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dbcae:	4650      	mov	r0, sl
   dbcb0:	4659      	mov	r1, fp
   dbcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcb6:	f7ff fa1d 	bl	db0f4 <__aeabi_ddiv>
   dbcba:	4682      	mov	sl, r0
   dbcbc:	468b      	mov	fp, r1
   dbcbe:	ea5f 1828 	movs.w	r8, r8, asr #4
   dbcc2:	d0d8      	beq.n	dbc76 <_strtod_l+0x526>
   dbcc4:	f1b8 0f1f 	cmp.w	r8, #31
   dbcc8:	dd1e      	ble.n	dbd08 <_strtod_l+0x5b8>
   dbcca:	2500      	movs	r5, #0
   dbccc:	462e      	mov	r6, r5
   dbcce:	9509      	str	r5, [sp, #36]	; 0x24
   dbcd0:	9507      	str	r5, [sp, #28]
   dbcd2:	2322      	movs	r3, #34	; 0x22
   dbcd4:	f04f 0a00 	mov.w	sl, #0
   dbcd8:	f04f 0b00 	mov.w	fp, #0
   dbcdc:	6023      	str	r3, [r4, #0]
   dbcde:	e789      	b.n	dbbf4 <_strtod_l+0x4a4>
   dbce0:	000de377 	.word	0x000de377
   dbce4:	000de390 	.word	0x000de390
   dbce8:	000de36e 	.word	0x000de36e
   dbcec:	000de371 	.word	0x000de371
   dbcf0:	000de334 	.word	0x000de334
   dbcf4:	000de510 	.word	0x000de510
   dbcf8:	000de4e8 	.word	0x000de4e8
   dbcfc:	7ff00000 	.word	0x7ff00000
   dbd00:	7ca00000 	.word	0x7ca00000
   dbd04:	7fefffff 	.word	0x7fefffff
   dbd08:	f018 0310 	ands.w	r3, r8, #16
   dbd0c:	bf18      	it	ne
   dbd0e:	236a      	movne	r3, #106	; 0x6a
   dbd10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc0c8 <_strtod_l+0x978>
   dbd14:	9304      	str	r3, [sp, #16]
   dbd16:	4650      	mov	r0, sl
   dbd18:	4659      	mov	r1, fp
   dbd1a:	2300      	movs	r3, #0
   dbd1c:	f018 0f01 	tst.w	r8, #1
   dbd20:	d004      	beq.n	dbd2c <_strtod_l+0x5dc>
   dbd22:	e9d9 2300 	ldrd	r2, r3, [r9]
   dbd26:	f7ff f8bb 	bl	daea0 <__aeabi_dmul>
   dbd2a:	2301      	movs	r3, #1
   dbd2c:	ea5f 0868 	movs.w	r8, r8, asr #1
   dbd30:	f109 0908 	add.w	r9, r9, #8
   dbd34:	d1f2      	bne.n	dbd1c <_strtod_l+0x5cc>
   dbd36:	b10b      	cbz	r3, dbd3c <_strtod_l+0x5ec>
   dbd38:	4682      	mov	sl, r0
   dbd3a:	468b      	mov	fp, r1
   dbd3c:	9b04      	ldr	r3, [sp, #16]
   dbd3e:	b1bb      	cbz	r3, dbd70 <_strtod_l+0x620>
   dbd40:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dbd44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbd48:	2b00      	cmp	r3, #0
   dbd4a:	4659      	mov	r1, fp
   dbd4c:	dd10      	ble.n	dbd70 <_strtod_l+0x620>
   dbd4e:	2b1f      	cmp	r3, #31
   dbd50:	f340 8128 	ble.w	dbfa4 <_strtod_l+0x854>
   dbd54:	2b34      	cmp	r3, #52	; 0x34
   dbd56:	bfde      	ittt	le
   dbd58:	3b20      	suble	r3, #32
   dbd5a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dbd5e:	fa02 f303 	lslle.w	r3, r2, r3
   dbd62:	f04f 0a00 	mov.w	sl, #0
   dbd66:	bfcc      	ite	gt
   dbd68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dbd6c:	ea03 0b01 	andle.w	fp, r3, r1
   dbd70:	2200      	movs	r2, #0
   dbd72:	2300      	movs	r3, #0
   dbd74:	4650      	mov	r0, sl
   dbd76:	4659      	mov	r1, fp
   dbd78:	f7ff fafa 	bl	db370 <__aeabi_dcmpeq>
   dbd7c:	2800      	cmp	r0, #0
   dbd7e:	d1a4      	bne.n	dbcca <_strtod_l+0x57a>
   dbd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd82:	9300      	str	r3, [sp, #0]
   dbd84:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbd86:	462b      	mov	r3, r5
   dbd88:	463a      	mov	r2, r7
   dbd8a:	4620      	mov	r0, r4
   dbd8c:	f000 ff73 	bl	dcc76 <__s2b>
   dbd90:	9009      	str	r0, [sp, #36]	; 0x24
   dbd92:	2800      	cmp	r0, #0
   dbd94:	f43f af24 	beq.w	dbbe0 <_strtod_l+0x490>
   dbd98:	9b07      	ldr	r3, [sp, #28]
   dbd9a:	1b9e      	subs	r6, r3, r6
   dbd9c:	9b08      	ldr	r3, [sp, #32]
   dbd9e:	2b00      	cmp	r3, #0
   dbda0:	bfb4      	ite	lt
   dbda2:	4633      	movlt	r3, r6
   dbda4:	2300      	movge	r3, #0
   dbda6:	9310      	str	r3, [sp, #64]	; 0x40
   dbda8:	9b08      	ldr	r3, [sp, #32]
   dbdaa:	2500      	movs	r5, #0
   dbdac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dbdb0:	9318      	str	r3, [sp, #96]	; 0x60
   dbdb2:	462e      	mov	r6, r5
   dbdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbdb6:	4620      	mov	r0, r4
   dbdb8:	6859      	ldr	r1, [r3, #4]
   dbdba:	f000 fed3 	bl	dcb64 <_Balloc>
   dbdbe:	9007      	str	r0, [sp, #28]
   dbdc0:	2800      	cmp	r0, #0
   dbdc2:	f43f af11 	beq.w	dbbe8 <_strtod_l+0x498>
   dbdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbdc8:	691a      	ldr	r2, [r3, #16]
   dbdca:	3202      	adds	r2, #2
   dbdcc:	f103 010c 	add.w	r1, r3, #12
   dbdd0:	0092      	lsls	r2, r2, #2
   dbdd2:	300c      	adds	r0, #12
   dbdd4:	f7ff fbf0 	bl	db5b8 <memcpy>
   dbdd8:	ec4b ab10 	vmov	d0, sl, fp
   dbddc:	aa20      	add	r2, sp, #128	; 0x80
   dbdde:	a91f      	add	r1, sp, #124	; 0x7c
   dbde0:	4620      	mov	r0, r4
   dbde2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dbde6:	f001 fa35 	bl	dd254 <__d2b>
   dbdea:	901e      	str	r0, [sp, #120]	; 0x78
   dbdec:	2800      	cmp	r0, #0
   dbdee:	f43f aefb 	beq.w	dbbe8 <_strtod_l+0x498>
   dbdf2:	2101      	movs	r1, #1
   dbdf4:	4620      	mov	r0, r4
   dbdf6:	f000 ffcc 	bl	dcd92 <__i2b>
   dbdfa:	4606      	mov	r6, r0
   dbdfc:	2800      	cmp	r0, #0
   dbdfe:	f43f aef3 	beq.w	dbbe8 <_strtod_l+0x498>
   dbe02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dbe04:	9904      	ldr	r1, [sp, #16]
   dbe06:	2b00      	cmp	r3, #0
   dbe08:	bfab      	itete	ge
   dbe0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dbe0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dbe0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dbe10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dbe14:	bfac      	ite	ge
   dbe16:	eb03 0902 	addge.w	r9, r3, r2
   dbe1a:	1ad7      	sublt	r7, r2, r3
   dbe1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dbe1e:	eba3 0801 	sub.w	r8, r3, r1
   dbe22:	4490      	add	r8, r2
   dbe24:	4ba3      	ldr	r3, [pc, #652]	; (dc0b4 <_strtod_l+0x964>)
   dbe26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbe2a:	4598      	cmp	r8, r3
   dbe2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dbe30:	f280 80cc 	bge.w	dbfcc <_strtod_l+0x87c>
   dbe34:	eba3 0308 	sub.w	r3, r3, r8
   dbe38:	2b1f      	cmp	r3, #31
   dbe3a:	eba2 0203 	sub.w	r2, r2, r3
   dbe3e:	f04f 0101 	mov.w	r1, #1
   dbe42:	f300 80b6 	bgt.w	dbfb2 <_strtod_l+0x862>
   dbe46:	fa01 f303 	lsl.w	r3, r1, r3
   dbe4a:	9311      	str	r3, [sp, #68]	; 0x44
   dbe4c:	2300      	movs	r3, #0
   dbe4e:	930c      	str	r3, [sp, #48]	; 0x30
   dbe50:	eb09 0802 	add.w	r8, r9, r2
   dbe54:	9b04      	ldr	r3, [sp, #16]
   dbe56:	45c1      	cmp	r9, r8
   dbe58:	4417      	add	r7, r2
   dbe5a:	441f      	add	r7, r3
   dbe5c:	464b      	mov	r3, r9
   dbe5e:	bfa8      	it	ge
   dbe60:	4643      	movge	r3, r8
   dbe62:	42bb      	cmp	r3, r7
   dbe64:	bfa8      	it	ge
   dbe66:	463b      	movge	r3, r7
   dbe68:	2b00      	cmp	r3, #0
   dbe6a:	bfc2      	ittt	gt
   dbe6c:	eba8 0803 	subgt.w	r8, r8, r3
   dbe70:	1aff      	subgt	r7, r7, r3
   dbe72:	eba9 0903 	subgt.w	r9, r9, r3
   dbe76:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dbe78:	2b00      	cmp	r3, #0
   dbe7a:	dd17      	ble.n	dbeac <_strtod_l+0x75c>
   dbe7c:	4631      	mov	r1, r6
   dbe7e:	461a      	mov	r2, r3
   dbe80:	4620      	mov	r0, r4
   dbe82:	f001 f82b 	bl	dcedc <__pow5mult>
   dbe86:	4606      	mov	r6, r0
   dbe88:	2800      	cmp	r0, #0
   dbe8a:	f43f aead 	beq.w	dbbe8 <_strtod_l+0x498>
   dbe8e:	4601      	mov	r1, r0
   dbe90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbe92:	4620      	mov	r0, r4
   dbe94:	f000 ff86 	bl	dcda4 <__multiply>
   dbe98:	900f      	str	r0, [sp, #60]	; 0x3c
   dbe9a:	2800      	cmp	r0, #0
   dbe9c:	f43f aea4 	beq.w	dbbe8 <_strtod_l+0x498>
   dbea0:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbea2:	4620      	mov	r0, r4
   dbea4:	f000 fe92 	bl	dcbcc <_Bfree>
   dbea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbeaa:	931e      	str	r3, [sp, #120]	; 0x78
   dbeac:	f1b8 0f00 	cmp.w	r8, #0
   dbeb0:	f300 8091 	bgt.w	dbfd6 <_strtod_l+0x886>
   dbeb4:	9b08      	ldr	r3, [sp, #32]
   dbeb6:	2b00      	cmp	r3, #0
   dbeb8:	dd08      	ble.n	dbecc <_strtod_l+0x77c>
   dbeba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dbebc:	9907      	ldr	r1, [sp, #28]
   dbebe:	4620      	mov	r0, r4
   dbec0:	f001 f80c 	bl	dcedc <__pow5mult>
   dbec4:	9007      	str	r0, [sp, #28]
   dbec6:	2800      	cmp	r0, #0
   dbec8:	f43f ae8e 	beq.w	dbbe8 <_strtod_l+0x498>
   dbecc:	2f00      	cmp	r7, #0
   dbece:	dd08      	ble.n	dbee2 <_strtod_l+0x792>
   dbed0:	9907      	ldr	r1, [sp, #28]
   dbed2:	463a      	mov	r2, r7
   dbed4:	4620      	mov	r0, r4
   dbed6:	f001 f84f 	bl	dcf78 <__lshift>
   dbeda:	9007      	str	r0, [sp, #28]
   dbedc:	2800      	cmp	r0, #0
   dbede:	f43f ae83 	beq.w	dbbe8 <_strtod_l+0x498>
   dbee2:	f1b9 0f00 	cmp.w	r9, #0
   dbee6:	dd08      	ble.n	dbefa <_strtod_l+0x7aa>
   dbee8:	4631      	mov	r1, r6
   dbeea:	464a      	mov	r2, r9
   dbeec:	4620      	mov	r0, r4
   dbeee:	f001 f843 	bl	dcf78 <__lshift>
   dbef2:	4606      	mov	r6, r0
   dbef4:	2800      	cmp	r0, #0
   dbef6:	f43f ae77 	beq.w	dbbe8 <_strtod_l+0x498>
   dbefa:	9a07      	ldr	r2, [sp, #28]
   dbefc:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbefe:	4620      	mov	r0, r4
   dbf00:	f001 f8b5 	bl	dd06e <__mdiff>
   dbf04:	4605      	mov	r5, r0
   dbf06:	2800      	cmp	r0, #0
   dbf08:	f43f ae6e 	beq.w	dbbe8 <_strtod_l+0x498>
   dbf0c:	68c3      	ldr	r3, [r0, #12]
   dbf0e:	930f      	str	r3, [sp, #60]	; 0x3c
   dbf10:	2300      	movs	r3, #0
   dbf12:	60c3      	str	r3, [r0, #12]
   dbf14:	4631      	mov	r1, r6
   dbf16:	f001 f88e 	bl	dd036 <__mcmp>
   dbf1a:	2800      	cmp	r0, #0
   dbf1c:	da65      	bge.n	dbfea <_strtod_l+0x89a>
   dbf1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbf20:	ea53 030a 	orrs.w	r3, r3, sl
   dbf24:	f040 8087 	bne.w	dc036 <_strtod_l+0x8e6>
   dbf28:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbf2c:	2b00      	cmp	r3, #0
   dbf2e:	f040 8082 	bne.w	dc036 <_strtod_l+0x8e6>
   dbf32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbf36:	0d1b      	lsrs	r3, r3, #20
   dbf38:	051b      	lsls	r3, r3, #20
   dbf3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dbf3e:	d97a      	bls.n	dc036 <_strtod_l+0x8e6>
   dbf40:	696b      	ldr	r3, [r5, #20]
   dbf42:	b913      	cbnz	r3, dbf4a <_strtod_l+0x7fa>
   dbf44:	692b      	ldr	r3, [r5, #16]
   dbf46:	2b01      	cmp	r3, #1
   dbf48:	dd75      	ble.n	dc036 <_strtod_l+0x8e6>
   dbf4a:	4629      	mov	r1, r5
   dbf4c:	2201      	movs	r2, #1
   dbf4e:	4620      	mov	r0, r4
   dbf50:	f001 f812 	bl	dcf78 <__lshift>
   dbf54:	4631      	mov	r1, r6
   dbf56:	4605      	mov	r5, r0
   dbf58:	f001 f86d 	bl	dd036 <__mcmp>
   dbf5c:	2800      	cmp	r0, #0
   dbf5e:	dd6a      	ble.n	dc036 <_strtod_l+0x8e6>
   dbf60:	9904      	ldr	r1, [sp, #16]
   dbf62:	4a55      	ldr	r2, [pc, #340]	; (dc0b8 <_strtod_l+0x968>)
   dbf64:	465b      	mov	r3, fp
   dbf66:	2900      	cmp	r1, #0
   dbf68:	f000 8085 	beq.w	dc076 <_strtod_l+0x926>
   dbf6c:	ea02 010b 	and.w	r1, r2, fp
   dbf70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dbf74:	dc7f      	bgt.n	dc076 <_strtod_l+0x926>
   dbf76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dbf7a:	f77f aeaa 	ble.w	dbcd2 <_strtod_l+0x582>
   dbf7e:	4a4f      	ldr	r2, [pc, #316]	; (dc0bc <_strtod_l+0x96c>)
   dbf80:	2300      	movs	r3, #0
   dbf82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dbf86:	4650      	mov	r0, sl
   dbf88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dbf8c:	4659      	mov	r1, fp
   dbf8e:	f7fe ff87 	bl	daea0 <__aeabi_dmul>
   dbf92:	460b      	mov	r3, r1
   dbf94:	4303      	orrs	r3, r0
   dbf96:	bf08      	it	eq
   dbf98:	2322      	moveq	r3, #34	; 0x22
   dbf9a:	4682      	mov	sl, r0
   dbf9c:	468b      	mov	fp, r1
   dbf9e:	bf08      	it	eq
   dbfa0:	6023      	streq	r3, [r4, #0]
   dbfa2:	e62b      	b.n	dbbfc <_strtod_l+0x4ac>
   dbfa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbfa8:	fa02 f303 	lsl.w	r3, r2, r3
   dbfac:	ea03 0a0a 	and.w	sl, r3, sl
   dbfb0:	e6de      	b.n	dbd70 <_strtod_l+0x620>
   dbfb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dbfb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dbfba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dbfbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dbfc2:	fa01 f308 	lsl.w	r3, r1, r8
   dbfc6:	930c      	str	r3, [sp, #48]	; 0x30
   dbfc8:	9111      	str	r1, [sp, #68]	; 0x44
   dbfca:	e741      	b.n	dbe50 <_strtod_l+0x700>
   dbfcc:	2300      	movs	r3, #0
   dbfce:	930c      	str	r3, [sp, #48]	; 0x30
   dbfd0:	2301      	movs	r3, #1
   dbfd2:	9311      	str	r3, [sp, #68]	; 0x44
   dbfd4:	e73c      	b.n	dbe50 <_strtod_l+0x700>
   dbfd6:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbfd8:	4642      	mov	r2, r8
   dbfda:	4620      	mov	r0, r4
   dbfdc:	f000 ffcc 	bl	dcf78 <__lshift>
   dbfe0:	901e      	str	r0, [sp, #120]	; 0x78
   dbfe2:	2800      	cmp	r0, #0
   dbfe4:	f47f af66 	bne.w	dbeb4 <_strtod_l+0x764>
   dbfe8:	e5fe      	b.n	dbbe8 <_strtod_l+0x498>
   dbfea:	465f      	mov	r7, fp
   dbfec:	d16e      	bne.n	dc0cc <_strtod_l+0x97c>
   dbfee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dbff0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbff4:	b342      	cbz	r2, dc048 <_strtod_l+0x8f8>
   dbff6:	4a32      	ldr	r2, [pc, #200]	; (dc0c0 <_strtod_l+0x970>)
   dbff8:	4293      	cmp	r3, r2
   dbffa:	d128      	bne.n	dc04e <_strtod_l+0x8fe>
   dbffc:	9b04      	ldr	r3, [sp, #16]
   dbffe:	4650      	mov	r0, sl
   dc000:	b1eb      	cbz	r3, dc03e <_strtod_l+0x8ee>
   dc002:	4a2d      	ldr	r2, [pc, #180]	; (dc0b8 <_strtod_l+0x968>)
   dc004:	403a      	ands	r2, r7
   dc006:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc00a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc00e:	d819      	bhi.n	dc044 <_strtod_l+0x8f4>
   dc010:	0d12      	lsrs	r2, r2, #20
   dc012:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc016:	fa01 f303 	lsl.w	r3, r1, r3
   dc01a:	4298      	cmp	r0, r3
   dc01c:	d117      	bne.n	dc04e <_strtod_l+0x8fe>
   dc01e:	4b29      	ldr	r3, [pc, #164]	; (dc0c4 <_strtod_l+0x974>)
   dc020:	429f      	cmp	r7, r3
   dc022:	d102      	bne.n	dc02a <_strtod_l+0x8da>
   dc024:	3001      	adds	r0, #1
   dc026:	f43f addf 	beq.w	dbbe8 <_strtod_l+0x498>
   dc02a:	4b23      	ldr	r3, [pc, #140]	; (dc0b8 <_strtod_l+0x968>)
   dc02c:	403b      	ands	r3, r7
   dc02e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc032:	f04f 0a00 	mov.w	sl, #0
   dc036:	9b04      	ldr	r3, [sp, #16]
   dc038:	2b00      	cmp	r3, #0
   dc03a:	d1a0      	bne.n	dbf7e <_strtod_l+0x82e>
   dc03c:	e5de      	b.n	dbbfc <_strtod_l+0x4ac>
   dc03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc042:	e7ea      	b.n	dc01a <_strtod_l+0x8ca>
   dc044:	460b      	mov	r3, r1
   dc046:	e7e8      	b.n	dc01a <_strtod_l+0x8ca>
   dc048:	ea53 030a 	orrs.w	r3, r3, sl
   dc04c:	d088      	beq.n	dbf60 <_strtod_l+0x810>
   dc04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc050:	b1db      	cbz	r3, dc08a <_strtod_l+0x93a>
   dc052:	423b      	tst	r3, r7
   dc054:	d0ef      	beq.n	dc036 <_strtod_l+0x8e6>
   dc056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc058:	9a04      	ldr	r2, [sp, #16]
   dc05a:	4650      	mov	r0, sl
   dc05c:	4659      	mov	r1, fp
   dc05e:	b1c3      	cbz	r3, dc092 <_strtod_l+0x942>
   dc060:	f7ff fb5a 	bl	db718 <sulp>
   dc064:	4602      	mov	r2, r0
   dc066:	460b      	mov	r3, r1
   dc068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc06c:	f7fe fd62 	bl	dab34 <__adddf3>
   dc070:	4682      	mov	sl, r0
   dc072:	468b      	mov	fp, r1
   dc074:	e7df      	b.n	dc036 <_strtod_l+0x8e6>
   dc076:	4013      	ands	r3, r2
   dc078:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc07c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc080:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc084:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc088:	e7d5      	b.n	dc036 <_strtod_l+0x8e6>
   dc08a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc08c:	ea13 0f0a 	tst.w	r3, sl
   dc090:	e7e0      	b.n	dc054 <_strtod_l+0x904>
   dc092:	f7ff fb41 	bl	db718 <sulp>
   dc096:	4602      	mov	r2, r0
   dc098:	460b      	mov	r3, r1
   dc09a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc09e:	f7fe fd47 	bl	dab30 <__aeabi_dsub>
   dc0a2:	2200      	movs	r2, #0
   dc0a4:	2300      	movs	r3, #0
   dc0a6:	4682      	mov	sl, r0
   dc0a8:	468b      	mov	fp, r1
   dc0aa:	f7ff f961 	bl	db370 <__aeabi_dcmpeq>
   dc0ae:	2800      	cmp	r0, #0
   dc0b0:	d0c1      	beq.n	dc036 <_strtod_l+0x8e6>
   dc0b2:	e60e      	b.n	dbcd2 <_strtod_l+0x582>
   dc0b4:	fffffc02 	.word	0xfffffc02
   dc0b8:	7ff00000 	.word	0x7ff00000
   dc0bc:	39500000 	.word	0x39500000
   dc0c0:	000fffff 	.word	0x000fffff
   dc0c4:	7fefffff 	.word	0x7fefffff
   dc0c8:	000de3a8 	.word	0x000de3a8
   dc0cc:	4631      	mov	r1, r6
   dc0ce:	4628      	mov	r0, r5
   dc0d0:	f001 f910 	bl	dd2f4 <__ratio>
   dc0d4:	ec59 8b10 	vmov	r8, r9, d0
   dc0d8:	ee10 0a10 	vmov	r0, s0
   dc0dc:	2200      	movs	r2, #0
   dc0de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc0e2:	4649      	mov	r1, r9
   dc0e4:	f7ff f958 	bl	db398 <__aeabi_dcmple>
   dc0e8:	2800      	cmp	r0, #0
   dc0ea:	d07c      	beq.n	dc1e6 <_strtod_l+0xa96>
   dc0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc0ee:	2b00      	cmp	r3, #0
   dc0f0:	d04c      	beq.n	dc18c <_strtod_l+0xa3c>
   dc0f2:	4b95      	ldr	r3, [pc, #596]	; (dc348 <_strtod_l+0xbf8>)
   dc0f4:	2200      	movs	r2, #0
   dc0f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc0fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; dc348 <_strtod_l+0xbf8>
   dc0fe:	f04f 0800 	mov.w	r8, #0
   dc102:	4b92      	ldr	r3, [pc, #584]	; (dc34c <_strtod_l+0xbfc>)
   dc104:	403b      	ands	r3, r7
   dc106:	9311      	str	r3, [sp, #68]	; 0x44
   dc108:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc10a:	4b91      	ldr	r3, [pc, #580]	; (dc350 <_strtod_l+0xc00>)
   dc10c:	429a      	cmp	r2, r3
   dc10e:	f040 80b2 	bne.w	dc276 <_strtod_l+0xb26>
   dc112:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc11a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc11e:	ec4b ab10 	vmov	d0, sl, fp
   dc122:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc126:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc12a:	f001 f817 	bl	dd15c <__ulp>
   dc12e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc132:	ec53 2b10 	vmov	r2, r3, d0
   dc136:	f7fe feb3 	bl	daea0 <__aeabi_dmul>
   dc13a:	4652      	mov	r2, sl
   dc13c:	465b      	mov	r3, fp
   dc13e:	f7fe fcf9 	bl	dab34 <__adddf3>
   dc142:	460b      	mov	r3, r1
   dc144:	4981      	ldr	r1, [pc, #516]	; (dc34c <_strtod_l+0xbfc>)
   dc146:	4a83      	ldr	r2, [pc, #524]	; (dc354 <_strtod_l+0xc04>)
   dc148:	4019      	ands	r1, r3
   dc14a:	4291      	cmp	r1, r2
   dc14c:	4682      	mov	sl, r0
   dc14e:	d95e      	bls.n	dc20e <_strtod_l+0xabe>
   dc150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc152:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc156:	4293      	cmp	r3, r2
   dc158:	d103      	bne.n	dc162 <_strtod_l+0xa12>
   dc15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc15c:	3301      	adds	r3, #1
   dc15e:	f43f ad43 	beq.w	dbbe8 <_strtod_l+0x498>
   dc162:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dc360 <_strtod_l+0xc10>
   dc166:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc16a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc16c:	4620      	mov	r0, r4
   dc16e:	f000 fd2d 	bl	dcbcc <_Bfree>
   dc172:	9907      	ldr	r1, [sp, #28]
   dc174:	4620      	mov	r0, r4
   dc176:	f000 fd29 	bl	dcbcc <_Bfree>
   dc17a:	4631      	mov	r1, r6
   dc17c:	4620      	mov	r0, r4
   dc17e:	f000 fd25 	bl	dcbcc <_Bfree>
   dc182:	4629      	mov	r1, r5
   dc184:	4620      	mov	r0, r4
   dc186:	f000 fd21 	bl	dcbcc <_Bfree>
   dc18a:	e613      	b.n	dbdb4 <_strtod_l+0x664>
   dc18c:	f1ba 0f00 	cmp.w	sl, #0
   dc190:	d11b      	bne.n	dc1ca <_strtod_l+0xa7a>
   dc192:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc196:	b9f3      	cbnz	r3, dc1d6 <_strtod_l+0xa86>
   dc198:	4b6b      	ldr	r3, [pc, #428]	; (dc348 <_strtod_l+0xbf8>)
   dc19a:	2200      	movs	r2, #0
   dc19c:	4640      	mov	r0, r8
   dc19e:	4649      	mov	r1, r9
   dc1a0:	f7ff f8f0 	bl	db384 <__aeabi_dcmplt>
   dc1a4:	b9d0      	cbnz	r0, dc1dc <_strtod_l+0xa8c>
   dc1a6:	4640      	mov	r0, r8
   dc1a8:	4649      	mov	r1, r9
   dc1aa:	4b6b      	ldr	r3, [pc, #428]	; (dc358 <_strtod_l+0xc08>)
   dc1ac:	2200      	movs	r2, #0
   dc1ae:	f7fe fe77 	bl	daea0 <__aeabi_dmul>
   dc1b2:	4680      	mov	r8, r0
   dc1b4:	4689      	mov	r9, r1
   dc1b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc1ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc1be:	931b      	str	r3, [sp, #108]	; 0x6c
   dc1c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc1c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc1c8:	e79b      	b.n	dc102 <_strtod_l+0x9b2>
   dc1ca:	f1ba 0f01 	cmp.w	sl, #1
   dc1ce:	d102      	bne.n	dc1d6 <_strtod_l+0xa86>
   dc1d0:	2f00      	cmp	r7, #0
   dc1d2:	f43f ad7e 	beq.w	dbcd2 <_strtod_l+0x582>
   dc1d6:	4b61      	ldr	r3, [pc, #388]	; (dc35c <_strtod_l+0xc0c>)
   dc1d8:	2200      	movs	r2, #0
   dc1da:	e78c      	b.n	dc0f6 <_strtod_l+0x9a6>
   dc1dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; dc358 <_strtod_l+0xc08>
   dc1e0:	f04f 0800 	mov.w	r8, #0
   dc1e4:	e7e7      	b.n	dc1b6 <_strtod_l+0xa66>
   dc1e6:	4b5c      	ldr	r3, [pc, #368]	; (dc358 <_strtod_l+0xc08>)
   dc1e8:	4640      	mov	r0, r8
   dc1ea:	4649      	mov	r1, r9
   dc1ec:	2200      	movs	r2, #0
   dc1ee:	f7fe fe57 	bl	daea0 <__aeabi_dmul>
   dc1f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc1f4:	4680      	mov	r8, r0
   dc1f6:	4689      	mov	r9, r1
   dc1f8:	b933      	cbnz	r3, dc208 <_strtod_l+0xab8>
   dc1fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc1fe:	9012      	str	r0, [sp, #72]	; 0x48
   dc200:	9313      	str	r3, [sp, #76]	; 0x4c
   dc202:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc206:	e7dd      	b.n	dc1c4 <_strtod_l+0xa74>
   dc208:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc20c:	e7f9      	b.n	dc202 <_strtod_l+0xab2>
   dc20e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc212:	9b04      	ldr	r3, [sp, #16]
   dc214:	2b00      	cmp	r3, #0
   dc216:	d1a8      	bne.n	dc16a <_strtod_l+0xa1a>
   dc218:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc21c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc21e:	0d1b      	lsrs	r3, r3, #20
   dc220:	051b      	lsls	r3, r3, #20
   dc222:	429a      	cmp	r2, r3
   dc224:	d1a1      	bne.n	dc16a <_strtod_l+0xa1a>
   dc226:	4640      	mov	r0, r8
   dc228:	4649      	mov	r1, r9
   dc22a:	f001 f8ff 	bl	dd42c <__aeabi_d2lz>
   dc22e:	f7fe fe09 	bl	dae44 <__aeabi_l2d>
   dc232:	4602      	mov	r2, r0
   dc234:	460b      	mov	r3, r1
   dc236:	4640      	mov	r0, r8
   dc238:	4649      	mov	r1, r9
   dc23a:	f7fe fc79 	bl	dab30 <__aeabi_dsub>
   dc23e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc240:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc244:	ea43 030a 	orr.w	r3, r3, sl
   dc248:	4313      	orrs	r3, r2
   dc24a:	4680      	mov	r8, r0
   dc24c:	4689      	mov	r9, r1
   dc24e:	d053      	beq.n	dc2f8 <_strtod_l+0xba8>
   dc250:	a335      	add	r3, pc, #212	; (adr r3, dc328 <_strtod_l+0xbd8>)
   dc252:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc256:	f7ff f895 	bl	db384 <__aeabi_dcmplt>
   dc25a:	2800      	cmp	r0, #0
   dc25c:	f47f acce 	bne.w	dbbfc <_strtod_l+0x4ac>
   dc260:	a333      	add	r3, pc, #204	; (adr r3, dc330 <_strtod_l+0xbe0>)
   dc262:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc266:	4640      	mov	r0, r8
   dc268:	4649      	mov	r1, r9
   dc26a:	f7ff f8a9 	bl	db3c0 <__aeabi_dcmpgt>
   dc26e:	2800      	cmp	r0, #0
   dc270:	f43f af7b 	beq.w	dc16a <_strtod_l+0xa1a>
   dc274:	e4c2      	b.n	dbbfc <_strtod_l+0x4ac>
   dc276:	9b04      	ldr	r3, [sp, #16]
   dc278:	b333      	cbz	r3, dc2c8 <_strtod_l+0xb78>
   dc27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc27c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dc280:	d822      	bhi.n	dc2c8 <_strtod_l+0xb78>
   dc282:	a32d      	add	r3, pc, #180	; (adr r3, dc338 <_strtod_l+0xbe8>)
   dc284:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc288:	4640      	mov	r0, r8
   dc28a:	4649      	mov	r1, r9
   dc28c:	f7ff f884 	bl	db398 <__aeabi_dcmple>
   dc290:	b1a0      	cbz	r0, dc2bc <_strtod_l+0xb6c>
   dc292:	4649      	mov	r1, r9
   dc294:	4640      	mov	r0, r8
   dc296:	f7ff f8b3 	bl	db400 <__aeabi_d2uiz>
   dc29a:	2801      	cmp	r0, #1
   dc29c:	bf38      	it	cc
   dc29e:	2001      	movcc	r0, #1
   dc2a0:	f7fe fd84 	bl	dadac <__aeabi_ui2d>
   dc2a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc2a6:	4680      	mov	r8, r0
   dc2a8:	4689      	mov	r9, r1
   dc2aa:	bb13      	cbnz	r3, dc2f2 <_strtod_l+0xba2>
   dc2ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc2b0:	9014      	str	r0, [sp, #80]	; 0x50
   dc2b2:	9315      	str	r3, [sp, #84]	; 0x54
   dc2b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dc2b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dc2be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc2c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dc2c4:	1a9b      	subs	r3, r3, r2
   dc2c6:	930d      	str	r3, [sp, #52]	; 0x34
   dc2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc2cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dc2d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc2d4:	f000 ff42 	bl	dd15c <__ulp>
   dc2d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc2dc:	ec53 2b10 	vmov	r2, r3, d0
   dc2e0:	f7fe fdde 	bl	daea0 <__aeabi_dmul>
   dc2e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc2e8:	f7fe fc24 	bl	dab34 <__adddf3>
   dc2ec:	4682      	mov	sl, r0
   dc2ee:	468b      	mov	fp, r1
   dc2f0:	e78f      	b.n	dc212 <_strtod_l+0xac2>
   dc2f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dc2f6:	e7dd      	b.n	dc2b4 <_strtod_l+0xb64>
   dc2f8:	a311      	add	r3, pc, #68	; (adr r3, dc340 <_strtod_l+0xbf0>)
   dc2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc2fe:	f7ff f841 	bl	db384 <__aeabi_dcmplt>
   dc302:	e7b4      	b.n	dc26e <_strtod_l+0xb1e>
   dc304:	2300      	movs	r3, #0
   dc306:	930e      	str	r3, [sp, #56]	; 0x38
   dc308:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc30a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc30c:	6013      	str	r3, [r2, #0]
   dc30e:	f7ff ba65 	b.w	db7dc <_strtod_l+0x8c>
   dc312:	2b65      	cmp	r3, #101	; 0x65
   dc314:	f43f ab5d 	beq.w	db9d2 <_strtod_l+0x282>
   dc318:	2b45      	cmp	r3, #69	; 0x45
   dc31a:	f43f ab5a 	beq.w	db9d2 <_strtod_l+0x282>
   dc31e:	2201      	movs	r2, #1
   dc320:	f7ff bb92 	b.w	dba48 <_strtod_l+0x2f8>
   dc324:	f3af 8000 	nop.w
   dc328:	94a03595 	.word	0x94a03595
   dc32c:	3fdfffff 	.word	0x3fdfffff
   dc330:	35afe535 	.word	0x35afe535
   dc334:	3fe00000 	.word	0x3fe00000
   dc338:	ffc00000 	.word	0xffc00000
   dc33c:	41dfffff 	.word	0x41dfffff
   dc340:	94a03595 	.word	0x94a03595
   dc344:	3fcfffff 	.word	0x3fcfffff
   dc348:	3ff00000 	.word	0x3ff00000
   dc34c:	7ff00000 	.word	0x7ff00000
   dc350:	7fe00000 	.word	0x7fe00000
   dc354:	7c9fffff 	.word	0x7c9fffff
   dc358:	3fe00000 	.word	0x3fe00000
   dc35c:	bff00000 	.word	0xbff00000
   dc360:	7fefffff 	.word	0x7fefffff

000dc364 <strtod>:
   dc364:	460a      	mov	r2, r1
   dc366:	4601      	mov	r1, r0
   dc368:	4802      	ldr	r0, [pc, #8]	; (dc374 <strtod+0x10>)
   dc36a:	4b03      	ldr	r3, [pc, #12]	; (dc378 <strtod+0x14>)
   dc36c:	6800      	ldr	r0, [r0, #0]
   dc36e:	f7ff b9ef 	b.w	db750 <_strtod_l>
   dc372:	bf00      	nop
   dc374:	2003dd08 	.word	0x2003dd08
   dc378:	2003dd70 	.word	0x2003dd70

000dc37c <_strtol_l.isra.0>:
   dc37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc380:	4e3a      	ldr	r6, [pc, #232]	; (dc46c <_strtol_l.isra.0+0xf0>)
   dc382:	4686      	mov	lr, r0
   dc384:	468c      	mov	ip, r1
   dc386:	4660      	mov	r0, ip
   dc388:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc38c:	5da5      	ldrb	r5, [r4, r6]
   dc38e:	f015 0508 	ands.w	r5, r5, #8
   dc392:	d1f8      	bne.n	dc386 <_strtol_l.isra.0+0xa>
   dc394:	2c2d      	cmp	r4, #45	; 0x2d
   dc396:	d133      	bne.n	dc400 <_strtol_l.isra.0+0x84>
   dc398:	f89c 4000 	ldrb.w	r4, [ip]
   dc39c:	f04f 0801 	mov.w	r8, #1
   dc3a0:	f100 0c02 	add.w	ip, r0, #2
   dc3a4:	2b00      	cmp	r3, #0
   dc3a6:	d05c      	beq.n	dc462 <_strtol_l.isra.0+0xe6>
   dc3a8:	2b10      	cmp	r3, #16
   dc3aa:	d10c      	bne.n	dc3c6 <_strtol_l.isra.0+0x4a>
   dc3ac:	2c30      	cmp	r4, #48	; 0x30
   dc3ae:	d10a      	bne.n	dc3c6 <_strtol_l.isra.0+0x4a>
   dc3b0:	f89c 0000 	ldrb.w	r0, [ip]
   dc3b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc3b8:	2858      	cmp	r0, #88	; 0x58
   dc3ba:	d14d      	bne.n	dc458 <_strtol_l.isra.0+0xdc>
   dc3bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc3c0:	2310      	movs	r3, #16
   dc3c2:	f10c 0c02 	add.w	ip, ip, #2
   dc3c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc3ca:	3f01      	subs	r7, #1
   dc3cc:	2600      	movs	r6, #0
   dc3ce:	fbb7 f9f3 	udiv	r9, r7, r3
   dc3d2:	4630      	mov	r0, r6
   dc3d4:	fb03 7a19 	mls	sl, r3, r9, r7
   dc3d8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc3dc:	2d09      	cmp	r5, #9
   dc3de:	d818      	bhi.n	dc412 <_strtol_l.isra.0+0x96>
   dc3e0:	462c      	mov	r4, r5
   dc3e2:	42a3      	cmp	r3, r4
   dc3e4:	dd24      	ble.n	dc430 <_strtol_l.isra.0+0xb4>
   dc3e6:	1c75      	adds	r5, r6, #1
   dc3e8:	d007      	beq.n	dc3fa <_strtol_l.isra.0+0x7e>
   dc3ea:	4581      	cmp	r9, r0
   dc3ec:	d31d      	bcc.n	dc42a <_strtol_l.isra.0+0xae>
   dc3ee:	d101      	bne.n	dc3f4 <_strtol_l.isra.0+0x78>
   dc3f0:	45a2      	cmp	sl, r4
   dc3f2:	db1a      	blt.n	dc42a <_strtol_l.isra.0+0xae>
   dc3f4:	fb00 4003 	mla	r0, r0, r3, r4
   dc3f8:	2601      	movs	r6, #1
   dc3fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc3fe:	e7eb      	b.n	dc3d8 <_strtol_l.isra.0+0x5c>
   dc400:	2c2b      	cmp	r4, #43	; 0x2b
   dc402:	bf08      	it	eq
   dc404:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc408:	46a8      	mov	r8, r5
   dc40a:	bf08      	it	eq
   dc40c:	f100 0c02 	addeq.w	ip, r0, #2
   dc410:	e7c8      	b.n	dc3a4 <_strtol_l.isra.0+0x28>
   dc412:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc416:	2d19      	cmp	r5, #25
   dc418:	d801      	bhi.n	dc41e <_strtol_l.isra.0+0xa2>
   dc41a:	3c37      	subs	r4, #55	; 0x37
   dc41c:	e7e1      	b.n	dc3e2 <_strtol_l.isra.0+0x66>
   dc41e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc422:	2d19      	cmp	r5, #25
   dc424:	d804      	bhi.n	dc430 <_strtol_l.isra.0+0xb4>
   dc426:	3c57      	subs	r4, #87	; 0x57
   dc428:	e7db      	b.n	dc3e2 <_strtol_l.isra.0+0x66>
   dc42a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc42e:	e7e4      	b.n	dc3fa <_strtol_l.isra.0+0x7e>
   dc430:	1c73      	adds	r3, r6, #1
   dc432:	d106      	bne.n	dc442 <_strtol_l.isra.0+0xc6>
   dc434:	2322      	movs	r3, #34	; 0x22
   dc436:	f8ce 3000 	str.w	r3, [lr]
   dc43a:	4638      	mov	r0, r7
   dc43c:	b942      	cbnz	r2, dc450 <_strtol_l.isra.0+0xd4>
   dc43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc442:	f1b8 0f00 	cmp.w	r8, #0
   dc446:	d000      	beq.n	dc44a <_strtol_l.isra.0+0xce>
   dc448:	4240      	negs	r0, r0
   dc44a:	2a00      	cmp	r2, #0
   dc44c:	d0f7      	beq.n	dc43e <_strtol_l.isra.0+0xc2>
   dc44e:	b10e      	cbz	r6, dc454 <_strtol_l.isra.0+0xd8>
   dc450:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc454:	6011      	str	r1, [r2, #0]
   dc456:	e7f2      	b.n	dc43e <_strtol_l.isra.0+0xc2>
   dc458:	2430      	movs	r4, #48	; 0x30
   dc45a:	2b00      	cmp	r3, #0
   dc45c:	d1b3      	bne.n	dc3c6 <_strtol_l.isra.0+0x4a>
   dc45e:	2308      	movs	r3, #8
   dc460:	e7b1      	b.n	dc3c6 <_strtol_l.isra.0+0x4a>
   dc462:	2c30      	cmp	r4, #48	; 0x30
   dc464:	d0a4      	beq.n	dc3b0 <_strtol_l.isra.0+0x34>
   dc466:	230a      	movs	r3, #10
   dc468:	e7ad      	b.n	dc3c6 <_strtol_l.isra.0+0x4a>
   dc46a:	bf00      	nop
   dc46c:	000de3d1 	.word	0x000de3d1

000dc470 <strtol>:
   dc470:	4613      	mov	r3, r2
   dc472:	460a      	mov	r2, r1
   dc474:	4601      	mov	r1, r0
   dc476:	4802      	ldr	r0, [pc, #8]	; (dc480 <strtol+0x10>)
   dc478:	6800      	ldr	r0, [r0, #0]
   dc47a:	f7ff bf7f 	b.w	dc37c <_strtol_l.isra.0>
   dc47e:	bf00      	nop
   dc480:	2003dd08 	.word	0x2003dd08

000dc484 <rshift>:
   dc484:	6903      	ldr	r3, [r0, #16]
   dc486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dc48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc48e:	ea4f 1261 	mov.w	r2, r1, asr #5
   dc492:	f100 0414 	add.w	r4, r0, #20
   dc496:	dd45      	ble.n	dc524 <rshift+0xa0>
   dc498:	f011 011f 	ands.w	r1, r1, #31
   dc49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dc4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dc4a4:	d10c      	bne.n	dc4c0 <rshift+0x3c>
   dc4a6:	f100 0710 	add.w	r7, r0, #16
   dc4aa:	4629      	mov	r1, r5
   dc4ac:	42b1      	cmp	r1, r6
   dc4ae:	d334      	bcc.n	dc51a <rshift+0x96>
   dc4b0:	1a9b      	subs	r3, r3, r2
   dc4b2:	009b      	lsls	r3, r3, #2
   dc4b4:	1eea      	subs	r2, r5, #3
   dc4b6:	4296      	cmp	r6, r2
   dc4b8:	bf38      	it	cc
   dc4ba:	2300      	movcc	r3, #0
   dc4bc:	4423      	add	r3, r4
   dc4be:	e015      	b.n	dc4ec <rshift+0x68>
   dc4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dc4c4:	f1c1 0820 	rsb	r8, r1, #32
   dc4c8:	40cf      	lsrs	r7, r1
   dc4ca:	f105 0e04 	add.w	lr, r5, #4
   dc4ce:	46a1      	mov	r9, r4
   dc4d0:	4576      	cmp	r6, lr
   dc4d2:	46f4      	mov	ip, lr
   dc4d4:	d815      	bhi.n	dc502 <rshift+0x7e>
   dc4d6:	1a9b      	subs	r3, r3, r2
   dc4d8:	009a      	lsls	r2, r3, #2
   dc4da:	3a04      	subs	r2, #4
   dc4dc:	3501      	adds	r5, #1
   dc4de:	42ae      	cmp	r6, r5
   dc4e0:	bf38      	it	cc
   dc4e2:	2200      	movcc	r2, #0
   dc4e4:	18a3      	adds	r3, r4, r2
   dc4e6:	50a7      	str	r7, [r4, r2]
   dc4e8:	b107      	cbz	r7, dc4ec <rshift+0x68>
   dc4ea:	3304      	adds	r3, #4
   dc4ec:	1b1a      	subs	r2, r3, r4
   dc4ee:	42a3      	cmp	r3, r4
   dc4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dc4f4:	bf08      	it	eq
   dc4f6:	2300      	moveq	r3, #0
   dc4f8:	6102      	str	r2, [r0, #16]
   dc4fa:	bf08      	it	eq
   dc4fc:	6143      	streq	r3, [r0, #20]
   dc4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc502:	f8dc c000 	ldr.w	ip, [ip]
   dc506:	fa0c fc08 	lsl.w	ip, ip, r8
   dc50a:	ea4c 0707 	orr.w	r7, ip, r7
   dc50e:	f849 7b04 	str.w	r7, [r9], #4
   dc512:	f85e 7b04 	ldr.w	r7, [lr], #4
   dc516:	40cf      	lsrs	r7, r1
   dc518:	e7da      	b.n	dc4d0 <rshift+0x4c>
   dc51a:	f851 cb04 	ldr.w	ip, [r1], #4
   dc51e:	f847 cf04 	str.w	ip, [r7, #4]!
   dc522:	e7c3      	b.n	dc4ac <rshift+0x28>
   dc524:	4623      	mov	r3, r4
   dc526:	e7e1      	b.n	dc4ec <rshift+0x68>

000dc528 <__hexdig_fun>:
   dc528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc52c:	2b09      	cmp	r3, #9
   dc52e:	d802      	bhi.n	dc536 <__hexdig_fun+0xe>
   dc530:	3820      	subs	r0, #32
   dc532:	b2c0      	uxtb	r0, r0
   dc534:	4770      	bx	lr
   dc536:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc53a:	2b05      	cmp	r3, #5
   dc53c:	d801      	bhi.n	dc542 <__hexdig_fun+0x1a>
   dc53e:	3847      	subs	r0, #71	; 0x47
   dc540:	e7f7      	b.n	dc532 <__hexdig_fun+0xa>
   dc542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc546:	2b05      	cmp	r3, #5
   dc548:	d801      	bhi.n	dc54e <__hexdig_fun+0x26>
   dc54a:	3827      	subs	r0, #39	; 0x27
   dc54c:	e7f1      	b.n	dc532 <__hexdig_fun+0xa>
   dc54e:	2000      	movs	r0, #0
   dc550:	4770      	bx	lr
	...

000dc554 <__gethex>:
   dc554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc558:	ed2d 8b02 	vpush	{d8}
   dc55c:	b089      	sub	sp, #36	; 0x24
   dc55e:	ee08 0a10 	vmov	s16, r0
   dc562:	9304      	str	r3, [sp, #16]
   dc564:	4bbc      	ldr	r3, [pc, #752]	; (dc858 <__gethex+0x304>)
   dc566:	681b      	ldr	r3, [r3, #0]
   dc568:	9301      	str	r3, [sp, #4]
   dc56a:	4618      	mov	r0, r3
   dc56c:	468b      	mov	fp, r1
   dc56e:	4690      	mov	r8, r2
   dc570:	f7ff f8a5 	bl	db6be <strlen>
   dc574:	9b01      	ldr	r3, [sp, #4]
   dc576:	f8db 2000 	ldr.w	r2, [fp]
   dc57a:	4403      	add	r3, r0
   dc57c:	4682      	mov	sl, r0
   dc57e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc582:	9305      	str	r3, [sp, #20]
   dc584:	1c93      	adds	r3, r2, #2
   dc586:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dc58a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dc58e:	32fe      	adds	r2, #254	; 0xfe
   dc590:	18d1      	adds	r1, r2, r3
   dc592:	461f      	mov	r7, r3
   dc594:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc598:	9100      	str	r1, [sp, #0]
   dc59a:	2830      	cmp	r0, #48	; 0x30
   dc59c:	d0f8      	beq.n	dc590 <__gethex+0x3c>
   dc59e:	f7ff ffc3 	bl	dc528 <__hexdig_fun>
   dc5a2:	4604      	mov	r4, r0
   dc5a4:	2800      	cmp	r0, #0
   dc5a6:	d13a      	bne.n	dc61e <__gethex+0xca>
   dc5a8:	9901      	ldr	r1, [sp, #4]
   dc5aa:	4652      	mov	r2, sl
   dc5ac:	4638      	mov	r0, r7
   dc5ae:	f7ff f88e 	bl	db6ce <strncmp>
   dc5b2:	4605      	mov	r5, r0
   dc5b4:	2800      	cmp	r0, #0
   dc5b6:	d168      	bne.n	dc68a <__gethex+0x136>
   dc5b8:	f817 000a 	ldrb.w	r0, [r7, sl]
   dc5bc:	eb07 060a 	add.w	r6, r7, sl
   dc5c0:	f7ff ffb2 	bl	dc528 <__hexdig_fun>
   dc5c4:	2800      	cmp	r0, #0
   dc5c6:	d062      	beq.n	dc68e <__gethex+0x13a>
   dc5c8:	4633      	mov	r3, r6
   dc5ca:	7818      	ldrb	r0, [r3, #0]
   dc5cc:	2830      	cmp	r0, #48	; 0x30
   dc5ce:	461f      	mov	r7, r3
   dc5d0:	f103 0301 	add.w	r3, r3, #1
   dc5d4:	d0f9      	beq.n	dc5ca <__gethex+0x76>
   dc5d6:	f7ff ffa7 	bl	dc528 <__hexdig_fun>
   dc5da:	2301      	movs	r3, #1
   dc5dc:	fab0 f480 	clz	r4, r0
   dc5e0:	0964      	lsrs	r4, r4, #5
   dc5e2:	4635      	mov	r5, r6
   dc5e4:	9300      	str	r3, [sp, #0]
   dc5e6:	463a      	mov	r2, r7
   dc5e8:	4616      	mov	r6, r2
   dc5ea:	3201      	adds	r2, #1
   dc5ec:	7830      	ldrb	r0, [r6, #0]
   dc5ee:	f7ff ff9b 	bl	dc528 <__hexdig_fun>
   dc5f2:	2800      	cmp	r0, #0
   dc5f4:	d1f8      	bne.n	dc5e8 <__gethex+0x94>
   dc5f6:	9901      	ldr	r1, [sp, #4]
   dc5f8:	4652      	mov	r2, sl
   dc5fa:	4630      	mov	r0, r6
   dc5fc:	f7ff f867 	bl	db6ce <strncmp>
   dc600:	b980      	cbnz	r0, dc624 <__gethex+0xd0>
   dc602:	b94d      	cbnz	r5, dc618 <__gethex+0xc4>
   dc604:	eb06 050a 	add.w	r5, r6, sl
   dc608:	462a      	mov	r2, r5
   dc60a:	4616      	mov	r6, r2
   dc60c:	3201      	adds	r2, #1
   dc60e:	7830      	ldrb	r0, [r6, #0]
   dc610:	f7ff ff8a 	bl	dc528 <__hexdig_fun>
   dc614:	2800      	cmp	r0, #0
   dc616:	d1f8      	bne.n	dc60a <__gethex+0xb6>
   dc618:	1bad      	subs	r5, r5, r6
   dc61a:	00ad      	lsls	r5, r5, #2
   dc61c:	e004      	b.n	dc628 <__gethex+0xd4>
   dc61e:	2400      	movs	r4, #0
   dc620:	4625      	mov	r5, r4
   dc622:	e7e0      	b.n	dc5e6 <__gethex+0x92>
   dc624:	2d00      	cmp	r5, #0
   dc626:	d1f7      	bne.n	dc618 <__gethex+0xc4>
   dc628:	7833      	ldrb	r3, [r6, #0]
   dc62a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc62e:	2b50      	cmp	r3, #80	; 0x50
   dc630:	d13b      	bne.n	dc6aa <__gethex+0x156>
   dc632:	7873      	ldrb	r3, [r6, #1]
   dc634:	2b2b      	cmp	r3, #43	; 0x2b
   dc636:	d02c      	beq.n	dc692 <__gethex+0x13e>
   dc638:	2b2d      	cmp	r3, #45	; 0x2d
   dc63a:	d02e      	beq.n	dc69a <__gethex+0x146>
   dc63c:	1c71      	adds	r1, r6, #1
   dc63e:	f04f 0900 	mov.w	r9, #0
   dc642:	7808      	ldrb	r0, [r1, #0]
   dc644:	f7ff ff70 	bl	dc528 <__hexdig_fun>
   dc648:	1e43      	subs	r3, r0, #1
   dc64a:	b2db      	uxtb	r3, r3
   dc64c:	2b18      	cmp	r3, #24
   dc64e:	d82c      	bhi.n	dc6aa <__gethex+0x156>
   dc650:	f1a0 0210 	sub.w	r2, r0, #16
   dc654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc658:	f7ff ff66 	bl	dc528 <__hexdig_fun>
   dc65c:	1e43      	subs	r3, r0, #1
   dc65e:	b2db      	uxtb	r3, r3
   dc660:	2b18      	cmp	r3, #24
   dc662:	d91d      	bls.n	dc6a0 <__gethex+0x14c>
   dc664:	f1b9 0f00 	cmp.w	r9, #0
   dc668:	d000      	beq.n	dc66c <__gethex+0x118>
   dc66a:	4252      	negs	r2, r2
   dc66c:	4415      	add	r5, r2
   dc66e:	f8cb 1000 	str.w	r1, [fp]
   dc672:	b1e4      	cbz	r4, dc6ae <__gethex+0x15a>
   dc674:	9b00      	ldr	r3, [sp, #0]
   dc676:	2b00      	cmp	r3, #0
   dc678:	bf14      	ite	ne
   dc67a:	2700      	movne	r7, #0
   dc67c:	2706      	moveq	r7, #6
   dc67e:	4638      	mov	r0, r7
   dc680:	b009      	add	sp, #36	; 0x24
   dc682:	ecbd 8b02 	vpop	{d8}
   dc686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc68a:	463e      	mov	r6, r7
   dc68c:	4625      	mov	r5, r4
   dc68e:	2401      	movs	r4, #1
   dc690:	e7ca      	b.n	dc628 <__gethex+0xd4>
   dc692:	f04f 0900 	mov.w	r9, #0
   dc696:	1cb1      	adds	r1, r6, #2
   dc698:	e7d3      	b.n	dc642 <__gethex+0xee>
   dc69a:	f04f 0901 	mov.w	r9, #1
   dc69e:	e7fa      	b.n	dc696 <__gethex+0x142>
   dc6a0:	230a      	movs	r3, #10
   dc6a2:	fb03 0202 	mla	r2, r3, r2, r0
   dc6a6:	3a10      	subs	r2, #16
   dc6a8:	e7d4      	b.n	dc654 <__gethex+0x100>
   dc6aa:	4631      	mov	r1, r6
   dc6ac:	e7df      	b.n	dc66e <__gethex+0x11a>
   dc6ae:	1bf3      	subs	r3, r6, r7
   dc6b0:	3b01      	subs	r3, #1
   dc6b2:	4621      	mov	r1, r4
   dc6b4:	2b07      	cmp	r3, #7
   dc6b6:	dc52      	bgt.n	dc75e <__gethex+0x20a>
   dc6b8:	ee18 0a10 	vmov	r0, s16
   dc6bc:	f000 fa52 	bl	dcb64 <_Balloc>
   dc6c0:	f04f 0b00 	mov.w	fp, #0
   dc6c4:	f100 0914 	add.w	r9, r0, #20
   dc6c8:	f1ca 0301 	rsb	r3, sl, #1
   dc6cc:	4604      	mov	r4, r0
   dc6ce:	f8cd 9008 	str.w	r9, [sp, #8]
   dc6d2:	f8cd b000 	str.w	fp, [sp]
   dc6d6:	9306      	str	r3, [sp, #24]
   dc6d8:	42b7      	cmp	r7, r6
   dc6da:	d343      	bcc.n	dc764 <__gethex+0x210>
   dc6dc:	9802      	ldr	r0, [sp, #8]
   dc6de:	9b00      	ldr	r3, [sp, #0]
   dc6e0:	f840 3b04 	str.w	r3, [r0], #4
   dc6e4:	eba0 0009 	sub.w	r0, r0, r9
   dc6e8:	1080      	asrs	r0, r0, #2
   dc6ea:	0146      	lsls	r6, r0, #5
   dc6ec:	6120      	str	r0, [r4, #16]
   dc6ee:	4618      	mov	r0, r3
   dc6f0:	f000 faff 	bl	dccf2 <__hi0bits>
   dc6f4:	1a30      	subs	r0, r6, r0
   dc6f6:	f8d8 6000 	ldr.w	r6, [r8]
   dc6fa:	42b0      	cmp	r0, r6
   dc6fc:	dd66      	ble.n	dc7cc <__gethex+0x278>
   dc6fe:	1b87      	subs	r7, r0, r6
   dc700:	4639      	mov	r1, r7
   dc702:	4620      	mov	r0, r4
   dc704:	f000 fe4c 	bl	dd3a0 <__any_on>
   dc708:	4682      	mov	sl, r0
   dc70a:	b1a8      	cbz	r0, dc738 <__gethex+0x1e4>
   dc70c:	1e7b      	subs	r3, r7, #1
   dc70e:	1159      	asrs	r1, r3, #5
   dc710:	f003 021f 	and.w	r2, r3, #31
   dc714:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc718:	f04f 0a01 	mov.w	sl, #1
   dc71c:	fa0a f202 	lsl.w	r2, sl, r2
   dc720:	420a      	tst	r2, r1
   dc722:	d009      	beq.n	dc738 <__gethex+0x1e4>
   dc724:	4553      	cmp	r3, sl
   dc726:	dd05      	ble.n	dc734 <__gethex+0x1e0>
   dc728:	1eb9      	subs	r1, r7, #2
   dc72a:	4620      	mov	r0, r4
   dc72c:	f000 fe38 	bl	dd3a0 <__any_on>
   dc730:	2800      	cmp	r0, #0
   dc732:	d148      	bne.n	dc7c6 <__gethex+0x272>
   dc734:	f04f 0a02 	mov.w	sl, #2
   dc738:	4639      	mov	r1, r7
   dc73a:	4620      	mov	r0, r4
   dc73c:	f7ff fea2 	bl	dc484 <rshift>
   dc740:	443d      	add	r5, r7
   dc742:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc746:	42ab      	cmp	r3, r5
   dc748:	da4f      	bge.n	dc7ea <__gethex+0x296>
   dc74a:	ee18 0a10 	vmov	r0, s16
   dc74e:	4621      	mov	r1, r4
   dc750:	f000 fa3c 	bl	dcbcc <_Bfree>
   dc754:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc756:	2300      	movs	r3, #0
   dc758:	6013      	str	r3, [r2, #0]
   dc75a:	27a3      	movs	r7, #163	; 0xa3
   dc75c:	e78f      	b.n	dc67e <__gethex+0x12a>
   dc75e:	3101      	adds	r1, #1
   dc760:	105b      	asrs	r3, r3, #1
   dc762:	e7a7      	b.n	dc6b4 <__gethex+0x160>
   dc764:	1e73      	subs	r3, r6, #1
   dc766:	9a05      	ldr	r2, [sp, #20]
   dc768:	9303      	str	r3, [sp, #12]
   dc76a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc76e:	4293      	cmp	r3, r2
   dc770:	d019      	beq.n	dc7a6 <__gethex+0x252>
   dc772:	f1bb 0f20 	cmp.w	fp, #32
   dc776:	d107      	bne.n	dc788 <__gethex+0x234>
   dc778:	9b02      	ldr	r3, [sp, #8]
   dc77a:	9a00      	ldr	r2, [sp, #0]
   dc77c:	f843 2b04 	str.w	r2, [r3], #4
   dc780:	9302      	str	r3, [sp, #8]
   dc782:	2300      	movs	r3, #0
   dc784:	9300      	str	r3, [sp, #0]
   dc786:	469b      	mov	fp, r3
   dc788:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc78c:	f7ff fecc 	bl	dc528 <__hexdig_fun>
   dc790:	9b00      	ldr	r3, [sp, #0]
   dc792:	f000 000f 	and.w	r0, r0, #15
   dc796:	fa00 f00b 	lsl.w	r0, r0, fp
   dc79a:	4303      	orrs	r3, r0
   dc79c:	9300      	str	r3, [sp, #0]
   dc79e:	f10b 0b04 	add.w	fp, fp, #4
   dc7a2:	9b03      	ldr	r3, [sp, #12]
   dc7a4:	e00d      	b.n	dc7c2 <__gethex+0x26e>
   dc7a6:	9b03      	ldr	r3, [sp, #12]
   dc7a8:	9a06      	ldr	r2, [sp, #24]
   dc7aa:	4413      	add	r3, r2
   dc7ac:	42bb      	cmp	r3, r7
   dc7ae:	d3e0      	bcc.n	dc772 <__gethex+0x21e>
   dc7b0:	4618      	mov	r0, r3
   dc7b2:	9901      	ldr	r1, [sp, #4]
   dc7b4:	9307      	str	r3, [sp, #28]
   dc7b6:	4652      	mov	r2, sl
   dc7b8:	f7fe ff89 	bl	db6ce <strncmp>
   dc7bc:	9b07      	ldr	r3, [sp, #28]
   dc7be:	2800      	cmp	r0, #0
   dc7c0:	d1d7      	bne.n	dc772 <__gethex+0x21e>
   dc7c2:	461e      	mov	r6, r3
   dc7c4:	e788      	b.n	dc6d8 <__gethex+0x184>
   dc7c6:	f04f 0a03 	mov.w	sl, #3
   dc7ca:	e7b5      	b.n	dc738 <__gethex+0x1e4>
   dc7cc:	da0a      	bge.n	dc7e4 <__gethex+0x290>
   dc7ce:	1a37      	subs	r7, r6, r0
   dc7d0:	4621      	mov	r1, r4
   dc7d2:	ee18 0a10 	vmov	r0, s16
   dc7d6:	463a      	mov	r2, r7
   dc7d8:	f000 fbce 	bl	dcf78 <__lshift>
   dc7dc:	1bed      	subs	r5, r5, r7
   dc7de:	4604      	mov	r4, r0
   dc7e0:	f100 0914 	add.w	r9, r0, #20
   dc7e4:	f04f 0a00 	mov.w	sl, #0
   dc7e8:	e7ab      	b.n	dc742 <__gethex+0x1ee>
   dc7ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc7ee:	42a8      	cmp	r0, r5
   dc7f0:	dd6d      	ble.n	dc8ce <__gethex+0x37a>
   dc7f2:	1b45      	subs	r5, r0, r5
   dc7f4:	42ae      	cmp	r6, r5
   dc7f6:	dc31      	bgt.n	dc85c <__gethex+0x308>
   dc7f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc7fc:	2b02      	cmp	r3, #2
   dc7fe:	d023      	beq.n	dc848 <__gethex+0x2f4>
   dc800:	2b03      	cmp	r3, #3
   dc802:	d025      	beq.n	dc850 <__gethex+0x2fc>
   dc804:	2b01      	cmp	r3, #1
   dc806:	d115      	bne.n	dc834 <__gethex+0x2e0>
   dc808:	42ae      	cmp	r6, r5
   dc80a:	d113      	bne.n	dc834 <__gethex+0x2e0>
   dc80c:	2e01      	cmp	r6, #1
   dc80e:	d10b      	bne.n	dc828 <__gethex+0x2d4>
   dc810:	9a04      	ldr	r2, [sp, #16]
   dc812:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc816:	6013      	str	r3, [r2, #0]
   dc818:	2301      	movs	r3, #1
   dc81a:	6123      	str	r3, [r4, #16]
   dc81c:	f8c9 3000 	str.w	r3, [r9]
   dc820:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc822:	2762      	movs	r7, #98	; 0x62
   dc824:	601c      	str	r4, [r3, #0]
   dc826:	e72a      	b.n	dc67e <__gethex+0x12a>
   dc828:	1e71      	subs	r1, r6, #1
   dc82a:	4620      	mov	r0, r4
   dc82c:	f000 fdb8 	bl	dd3a0 <__any_on>
   dc830:	2800      	cmp	r0, #0
   dc832:	d1ed      	bne.n	dc810 <__gethex+0x2bc>
   dc834:	ee18 0a10 	vmov	r0, s16
   dc838:	4621      	mov	r1, r4
   dc83a:	f000 f9c7 	bl	dcbcc <_Bfree>
   dc83e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc840:	2300      	movs	r3, #0
   dc842:	6013      	str	r3, [r2, #0]
   dc844:	2750      	movs	r7, #80	; 0x50
   dc846:	e71a      	b.n	dc67e <__gethex+0x12a>
   dc848:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc84a:	2b00      	cmp	r3, #0
   dc84c:	d1f2      	bne.n	dc834 <__gethex+0x2e0>
   dc84e:	e7df      	b.n	dc810 <__gethex+0x2bc>
   dc850:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc852:	2b00      	cmp	r3, #0
   dc854:	d1dc      	bne.n	dc810 <__gethex+0x2bc>
   dc856:	e7ed      	b.n	dc834 <__gethex+0x2e0>
   dc858:	000de4d4 	.word	0x000de4d4
   dc85c:	1e6f      	subs	r7, r5, #1
   dc85e:	f1ba 0f00 	cmp.w	sl, #0
   dc862:	d131      	bne.n	dc8c8 <__gethex+0x374>
   dc864:	b127      	cbz	r7, dc870 <__gethex+0x31c>
   dc866:	4639      	mov	r1, r7
   dc868:	4620      	mov	r0, r4
   dc86a:	f000 fd99 	bl	dd3a0 <__any_on>
   dc86e:	4682      	mov	sl, r0
   dc870:	117b      	asrs	r3, r7, #5
   dc872:	2101      	movs	r1, #1
   dc874:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc878:	f007 071f 	and.w	r7, r7, #31
   dc87c:	fa01 f707 	lsl.w	r7, r1, r7
   dc880:	421f      	tst	r7, r3
   dc882:	4629      	mov	r1, r5
   dc884:	4620      	mov	r0, r4
   dc886:	bf18      	it	ne
   dc888:	f04a 0a02 	orrne.w	sl, sl, #2
   dc88c:	1b76      	subs	r6, r6, r5
   dc88e:	f7ff fdf9 	bl	dc484 <rshift>
   dc892:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc896:	2702      	movs	r7, #2
   dc898:	f1ba 0f00 	cmp.w	sl, #0
   dc89c:	d048      	beq.n	dc930 <__gethex+0x3dc>
   dc89e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc8a2:	2b02      	cmp	r3, #2
   dc8a4:	d015      	beq.n	dc8d2 <__gethex+0x37e>
   dc8a6:	2b03      	cmp	r3, #3
   dc8a8:	d017      	beq.n	dc8da <__gethex+0x386>
   dc8aa:	2b01      	cmp	r3, #1
   dc8ac:	d109      	bne.n	dc8c2 <__gethex+0x36e>
   dc8ae:	f01a 0f02 	tst.w	sl, #2
   dc8b2:	d006      	beq.n	dc8c2 <__gethex+0x36e>
   dc8b4:	f8d9 0000 	ldr.w	r0, [r9]
   dc8b8:	ea4a 0a00 	orr.w	sl, sl, r0
   dc8bc:	f01a 0f01 	tst.w	sl, #1
   dc8c0:	d10e      	bne.n	dc8e0 <__gethex+0x38c>
   dc8c2:	f047 0710 	orr.w	r7, r7, #16
   dc8c6:	e033      	b.n	dc930 <__gethex+0x3dc>
   dc8c8:	f04f 0a01 	mov.w	sl, #1
   dc8cc:	e7d0      	b.n	dc870 <__gethex+0x31c>
   dc8ce:	2701      	movs	r7, #1
   dc8d0:	e7e2      	b.n	dc898 <__gethex+0x344>
   dc8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc8d4:	f1c3 0301 	rsb	r3, r3, #1
   dc8d8:	9315      	str	r3, [sp, #84]	; 0x54
   dc8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc8dc:	2b00      	cmp	r3, #0
   dc8de:	d0f0      	beq.n	dc8c2 <__gethex+0x36e>
   dc8e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc8e4:	f104 0314 	add.w	r3, r4, #20
   dc8e8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc8ec:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc8f0:	f04f 0c00 	mov.w	ip, #0
   dc8f4:	4618      	mov	r0, r3
   dc8f6:	f853 2b04 	ldr.w	r2, [r3], #4
   dc8fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc8fe:	d01c      	beq.n	dc93a <__gethex+0x3e6>
   dc900:	3201      	adds	r2, #1
   dc902:	6002      	str	r2, [r0, #0]
   dc904:	2f02      	cmp	r7, #2
   dc906:	f104 0314 	add.w	r3, r4, #20
   dc90a:	d13a      	bne.n	dc982 <__gethex+0x42e>
   dc90c:	f8d8 2000 	ldr.w	r2, [r8]
   dc910:	3a01      	subs	r2, #1
   dc912:	42b2      	cmp	r2, r6
   dc914:	d10a      	bne.n	dc92c <__gethex+0x3d8>
   dc916:	1171      	asrs	r1, r6, #5
   dc918:	2201      	movs	r2, #1
   dc91a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc91e:	f006 061f 	and.w	r6, r6, #31
   dc922:	fa02 f606 	lsl.w	r6, r2, r6
   dc926:	421e      	tst	r6, r3
   dc928:	bf18      	it	ne
   dc92a:	4617      	movne	r7, r2
   dc92c:	f047 0720 	orr.w	r7, r7, #32
   dc930:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc932:	601c      	str	r4, [r3, #0]
   dc934:	9b04      	ldr	r3, [sp, #16]
   dc936:	601d      	str	r5, [r3, #0]
   dc938:	e6a1      	b.n	dc67e <__gethex+0x12a>
   dc93a:	4299      	cmp	r1, r3
   dc93c:	f843 cc04 	str.w	ip, [r3, #-4]
   dc940:	d8d8      	bhi.n	dc8f4 <__gethex+0x3a0>
   dc942:	68a3      	ldr	r3, [r4, #8]
   dc944:	4599      	cmp	r9, r3
   dc946:	db14      	blt.n	dc972 <__gethex+0x41e>
   dc948:	6861      	ldr	r1, [r4, #4]
   dc94a:	ee18 0a10 	vmov	r0, s16
   dc94e:	3101      	adds	r1, #1
   dc950:	f000 f908 	bl	dcb64 <_Balloc>
   dc954:	6922      	ldr	r2, [r4, #16]
   dc956:	3202      	adds	r2, #2
   dc958:	f104 010c 	add.w	r1, r4, #12
   dc95c:	4682      	mov	sl, r0
   dc95e:	0092      	lsls	r2, r2, #2
   dc960:	300c      	adds	r0, #12
   dc962:	f7fe fe29 	bl	db5b8 <memcpy>
   dc966:	4621      	mov	r1, r4
   dc968:	ee18 0a10 	vmov	r0, s16
   dc96c:	f000 f92e 	bl	dcbcc <_Bfree>
   dc970:	4654      	mov	r4, sl
   dc972:	6923      	ldr	r3, [r4, #16]
   dc974:	1c5a      	adds	r2, r3, #1
   dc976:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc97a:	6122      	str	r2, [r4, #16]
   dc97c:	2201      	movs	r2, #1
   dc97e:	615a      	str	r2, [r3, #20]
   dc980:	e7c0      	b.n	dc904 <__gethex+0x3b0>
   dc982:	6922      	ldr	r2, [r4, #16]
   dc984:	454a      	cmp	r2, r9
   dc986:	dd0b      	ble.n	dc9a0 <__gethex+0x44c>
   dc988:	2101      	movs	r1, #1
   dc98a:	4620      	mov	r0, r4
   dc98c:	f7ff fd7a 	bl	dc484 <rshift>
   dc990:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc994:	3501      	adds	r5, #1
   dc996:	42ab      	cmp	r3, r5
   dc998:	f6ff aed7 	blt.w	dc74a <__gethex+0x1f6>
   dc99c:	2701      	movs	r7, #1
   dc99e:	e7c5      	b.n	dc92c <__gethex+0x3d8>
   dc9a0:	f016 061f 	ands.w	r6, r6, #31
   dc9a4:	d0fa      	beq.n	dc99c <__gethex+0x448>
   dc9a6:	449b      	add	fp, r3
   dc9a8:	f1c6 0620 	rsb	r6, r6, #32
   dc9ac:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc9b0:	f000 f99f 	bl	dccf2 <__hi0bits>
   dc9b4:	42b0      	cmp	r0, r6
   dc9b6:	dbe7      	blt.n	dc988 <__gethex+0x434>
   dc9b8:	e7f0      	b.n	dc99c <__gethex+0x448>
   dc9ba:	bf00      	nop

000dc9bc <L_shift>:
   dc9bc:	f1c2 0208 	rsb	r2, r2, #8
   dc9c0:	0092      	lsls	r2, r2, #2
   dc9c2:	b570      	push	{r4, r5, r6, lr}
   dc9c4:	f1c2 0620 	rsb	r6, r2, #32
   dc9c8:	6843      	ldr	r3, [r0, #4]
   dc9ca:	6804      	ldr	r4, [r0, #0]
   dc9cc:	fa03 f506 	lsl.w	r5, r3, r6
   dc9d0:	432c      	orrs	r4, r5
   dc9d2:	40d3      	lsrs	r3, r2
   dc9d4:	6004      	str	r4, [r0, #0]
   dc9d6:	f840 3f04 	str.w	r3, [r0, #4]!
   dc9da:	4288      	cmp	r0, r1
   dc9dc:	d3f4      	bcc.n	dc9c8 <L_shift+0xc>
   dc9de:	bd70      	pop	{r4, r5, r6, pc}

000dc9e0 <__match>:
   dc9e0:	b530      	push	{r4, r5, lr}
   dc9e2:	6803      	ldr	r3, [r0, #0]
   dc9e4:	3301      	adds	r3, #1
   dc9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc9ea:	b914      	cbnz	r4, dc9f2 <__match+0x12>
   dc9ec:	6003      	str	r3, [r0, #0]
   dc9ee:	2001      	movs	r0, #1
   dc9f0:	bd30      	pop	{r4, r5, pc}
   dc9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc9f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc9fa:	2d19      	cmp	r5, #25
   dc9fc:	bf98      	it	ls
   dc9fe:	3220      	addls	r2, #32
   dca00:	42a2      	cmp	r2, r4
   dca02:	d0f0      	beq.n	dc9e6 <__match+0x6>
   dca04:	2000      	movs	r0, #0
   dca06:	e7f3      	b.n	dc9f0 <__match+0x10>

000dca08 <__hexnan>:
   dca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca0c:	680b      	ldr	r3, [r1, #0]
   dca0e:	6801      	ldr	r1, [r0, #0]
   dca10:	115e      	asrs	r6, r3, #5
   dca12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dca16:	f013 031f 	ands.w	r3, r3, #31
   dca1a:	b087      	sub	sp, #28
   dca1c:	bf18      	it	ne
   dca1e:	3604      	addne	r6, #4
   dca20:	2500      	movs	r5, #0
   dca22:	1f37      	subs	r7, r6, #4
   dca24:	4682      	mov	sl, r0
   dca26:	4690      	mov	r8, r2
   dca28:	9301      	str	r3, [sp, #4]
   dca2a:	f846 5c04 	str.w	r5, [r6, #-4]
   dca2e:	46b9      	mov	r9, r7
   dca30:	463c      	mov	r4, r7
   dca32:	9502      	str	r5, [sp, #8]
   dca34:	46ab      	mov	fp, r5
   dca36:	784a      	ldrb	r2, [r1, #1]
   dca38:	1c4b      	adds	r3, r1, #1
   dca3a:	9303      	str	r3, [sp, #12]
   dca3c:	b342      	cbz	r2, dca90 <__hexnan+0x88>
   dca3e:	4610      	mov	r0, r2
   dca40:	9105      	str	r1, [sp, #20]
   dca42:	9204      	str	r2, [sp, #16]
   dca44:	f7ff fd70 	bl	dc528 <__hexdig_fun>
   dca48:	2800      	cmp	r0, #0
   dca4a:	d14f      	bne.n	dcaec <__hexnan+0xe4>
   dca4c:	9a04      	ldr	r2, [sp, #16]
   dca4e:	9905      	ldr	r1, [sp, #20]
   dca50:	2a20      	cmp	r2, #32
   dca52:	d818      	bhi.n	dca86 <__hexnan+0x7e>
   dca54:	9b02      	ldr	r3, [sp, #8]
   dca56:	459b      	cmp	fp, r3
   dca58:	dd13      	ble.n	dca82 <__hexnan+0x7a>
   dca5a:	454c      	cmp	r4, r9
   dca5c:	d206      	bcs.n	dca6c <__hexnan+0x64>
   dca5e:	2d07      	cmp	r5, #7
   dca60:	dc04      	bgt.n	dca6c <__hexnan+0x64>
   dca62:	462a      	mov	r2, r5
   dca64:	4649      	mov	r1, r9
   dca66:	4620      	mov	r0, r4
   dca68:	f7ff ffa8 	bl	dc9bc <L_shift>
   dca6c:	4544      	cmp	r4, r8
   dca6e:	d950      	bls.n	dcb12 <__hexnan+0x10a>
   dca70:	2300      	movs	r3, #0
   dca72:	f1a4 0904 	sub.w	r9, r4, #4
   dca76:	f844 3c04 	str.w	r3, [r4, #-4]
   dca7a:	f8cd b008 	str.w	fp, [sp, #8]
   dca7e:	464c      	mov	r4, r9
   dca80:	461d      	mov	r5, r3
   dca82:	9903      	ldr	r1, [sp, #12]
   dca84:	e7d7      	b.n	dca36 <__hexnan+0x2e>
   dca86:	2a29      	cmp	r2, #41	; 0x29
   dca88:	d156      	bne.n	dcb38 <__hexnan+0x130>
   dca8a:	3102      	adds	r1, #2
   dca8c:	f8ca 1000 	str.w	r1, [sl]
   dca90:	f1bb 0f00 	cmp.w	fp, #0
   dca94:	d050      	beq.n	dcb38 <__hexnan+0x130>
   dca96:	454c      	cmp	r4, r9
   dca98:	d206      	bcs.n	dcaa8 <__hexnan+0xa0>
   dca9a:	2d07      	cmp	r5, #7
   dca9c:	dc04      	bgt.n	dcaa8 <__hexnan+0xa0>
   dca9e:	462a      	mov	r2, r5
   dcaa0:	4649      	mov	r1, r9
   dcaa2:	4620      	mov	r0, r4
   dcaa4:	f7ff ff8a 	bl	dc9bc <L_shift>
   dcaa8:	4544      	cmp	r4, r8
   dcaaa:	d934      	bls.n	dcb16 <__hexnan+0x10e>
   dcaac:	f1a8 0204 	sub.w	r2, r8, #4
   dcab0:	4623      	mov	r3, r4
   dcab2:	f853 1b04 	ldr.w	r1, [r3], #4
   dcab6:	f842 1f04 	str.w	r1, [r2, #4]!
   dcaba:	429f      	cmp	r7, r3
   dcabc:	d2f9      	bcs.n	dcab2 <__hexnan+0xaa>
   dcabe:	1b3b      	subs	r3, r7, r4
   dcac0:	f023 0303 	bic.w	r3, r3, #3
   dcac4:	3304      	adds	r3, #4
   dcac6:	3401      	adds	r4, #1
   dcac8:	3e03      	subs	r6, #3
   dcaca:	42b4      	cmp	r4, r6
   dcacc:	bf88      	it	hi
   dcace:	2304      	movhi	r3, #4
   dcad0:	4443      	add	r3, r8
   dcad2:	2200      	movs	r2, #0
   dcad4:	f843 2b04 	str.w	r2, [r3], #4
   dcad8:	429f      	cmp	r7, r3
   dcada:	d2fb      	bcs.n	dcad4 <__hexnan+0xcc>
   dcadc:	683b      	ldr	r3, [r7, #0]
   dcade:	b91b      	cbnz	r3, dcae8 <__hexnan+0xe0>
   dcae0:	4547      	cmp	r7, r8
   dcae2:	d127      	bne.n	dcb34 <__hexnan+0x12c>
   dcae4:	2301      	movs	r3, #1
   dcae6:	603b      	str	r3, [r7, #0]
   dcae8:	2005      	movs	r0, #5
   dcaea:	e026      	b.n	dcb3a <__hexnan+0x132>
   dcaec:	3501      	adds	r5, #1
   dcaee:	2d08      	cmp	r5, #8
   dcaf0:	f10b 0b01 	add.w	fp, fp, #1
   dcaf4:	dd06      	ble.n	dcb04 <__hexnan+0xfc>
   dcaf6:	4544      	cmp	r4, r8
   dcaf8:	d9c3      	bls.n	dca82 <__hexnan+0x7a>
   dcafa:	2300      	movs	r3, #0
   dcafc:	f844 3c04 	str.w	r3, [r4, #-4]
   dcb00:	2501      	movs	r5, #1
   dcb02:	3c04      	subs	r4, #4
   dcb04:	6822      	ldr	r2, [r4, #0]
   dcb06:	f000 000f 	and.w	r0, r0, #15
   dcb0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dcb0e:	6022      	str	r2, [r4, #0]
   dcb10:	e7b7      	b.n	dca82 <__hexnan+0x7a>
   dcb12:	2508      	movs	r5, #8
   dcb14:	e7b5      	b.n	dca82 <__hexnan+0x7a>
   dcb16:	9b01      	ldr	r3, [sp, #4]
   dcb18:	2b00      	cmp	r3, #0
   dcb1a:	d0df      	beq.n	dcadc <__hexnan+0xd4>
   dcb1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcb20:	f1c3 0320 	rsb	r3, r3, #32
   dcb24:	fa22 f303 	lsr.w	r3, r2, r3
   dcb28:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dcb2c:	401a      	ands	r2, r3
   dcb2e:	f846 2c04 	str.w	r2, [r6, #-4]
   dcb32:	e7d3      	b.n	dcadc <__hexnan+0xd4>
   dcb34:	3f04      	subs	r7, #4
   dcb36:	e7d1      	b.n	dcadc <__hexnan+0xd4>
   dcb38:	2004      	movs	r0, #4
   dcb3a:	b007      	add	sp, #28
   dcb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcb40 <__ascii_mbtowc>:
   dcb40:	b082      	sub	sp, #8
   dcb42:	b901      	cbnz	r1, dcb46 <__ascii_mbtowc+0x6>
   dcb44:	a901      	add	r1, sp, #4
   dcb46:	b142      	cbz	r2, dcb5a <__ascii_mbtowc+0x1a>
   dcb48:	b14b      	cbz	r3, dcb5e <__ascii_mbtowc+0x1e>
   dcb4a:	7813      	ldrb	r3, [r2, #0]
   dcb4c:	600b      	str	r3, [r1, #0]
   dcb4e:	7812      	ldrb	r2, [r2, #0]
   dcb50:	1e10      	subs	r0, r2, #0
   dcb52:	bf18      	it	ne
   dcb54:	2001      	movne	r0, #1
   dcb56:	b002      	add	sp, #8
   dcb58:	4770      	bx	lr
   dcb5a:	4610      	mov	r0, r2
   dcb5c:	e7fb      	b.n	dcb56 <__ascii_mbtowc+0x16>
   dcb5e:	f06f 0001 	mvn.w	r0, #1
   dcb62:	e7f8      	b.n	dcb56 <__ascii_mbtowc+0x16>

000dcb64 <_Balloc>:
   dcb64:	b570      	push	{r4, r5, r6, lr}
   dcb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dcb68:	4604      	mov	r4, r0
   dcb6a:	460d      	mov	r5, r1
   dcb6c:	b93e      	cbnz	r6, dcb7e <_Balloc+0x1a>
   dcb6e:	2010      	movs	r0, #16
   dcb70:	f7fb ff9c 	bl	d8aac <malloc>
   dcb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dcb78:	6260      	str	r0, [r4, #36]	; 0x24
   dcb7a:	6006      	str	r6, [r0, #0]
   dcb7c:	60c6      	str	r6, [r0, #12]
   dcb7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dcb80:	68f3      	ldr	r3, [r6, #12]
   dcb82:	b183      	cbz	r3, dcba6 <_Balloc+0x42>
   dcb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcb86:	68db      	ldr	r3, [r3, #12]
   dcb88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dcb8c:	b9b8      	cbnz	r0, dcbbe <_Balloc+0x5a>
   dcb8e:	2101      	movs	r1, #1
   dcb90:	fa01 f605 	lsl.w	r6, r1, r5
   dcb94:	1d72      	adds	r2, r6, #5
   dcb96:	0092      	lsls	r2, r2, #2
   dcb98:	4620      	mov	r0, r4
   dcb9a:	f000 fc22 	bl	dd3e2 <_calloc_r>
   dcb9e:	b160      	cbz	r0, dcbba <_Balloc+0x56>
   dcba0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dcba4:	e00e      	b.n	dcbc4 <_Balloc+0x60>
   dcba6:	2221      	movs	r2, #33	; 0x21
   dcba8:	2104      	movs	r1, #4
   dcbaa:	4620      	mov	r0, r4
   dcbac:	f000 fc19 	bl	dd3e2 <_calloc_r>
   dcbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcbb2:	60f0      	str	r0, [r6, #12]
   dcbb4:	68db      	ldr	r3, [r3, #12]
   dcbb6:	2b00      	cmp	r3, #0
   dcbb8:	d1e4      	bne.n	dcb84 <_Balloc+0x20>
   dcbba:	2000      	movs	r0, #0
   dcbbc:	bd70      	pop	{r4, r5, r6, pc}
   dcbbe:	6802      	ldr	r2, [r0, #0]
   dcbc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dcbc4:	2300      	movs	r3, #0
   dcbc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dcbca:	e7f7      	b.n	dcbbc <_Balloc+0x58>

000dcbcc <_Bfree>:
   dcbcc:	b570      	push	{r4, r5, r6, lr}
   dcbce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dcbd0:	4605      	mov	r5, r0
   dcbd2:	460c      	mov	r4, r1
   dcbd4:	b93e      	cbnz	r6, dcbe6 <_Bfree+0x1a>
   dcbd6:	2010      	movs	r0, #16
   dcbd8:	f7fb ff68 	bl	d8aac <malloc>
   dcbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dcbe0:	6268      	str	r0, [r5, #36]	; 0x24
   dcbe2:	6006      	str	r6, [r0, #0]
   dcbe4:	60c6      	str	r6, [r0, #12]
   dcbe6:	b13c      	cbz	r4, dcbf8 <_Bfree+0x2c>
   dcbe8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dcbea:	6862      	ldr	r2, [r4, #4]
   dcbec:	68db      	ldr	r3, [r3, #12]
   dcbee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dcbf2:	6021      	str	r1, [r4, #0]
   dcbf4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dcbf8:	bd70      	pop	{r4, r5, r6, pc}

000dcbfa <__multadd>:
   dcbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcbfe:	690e      	ldr	r6, [r1, #16]
   dcc00:	4607      	mov	r7, r0
   dcc02:	4698      	mov	r8, r3
   dcc04:	460c      	mov	r4, r1
   dcc06:	f101 0014 	add.w	r0, r1, #20
   dcc0a:	2300      	movs	r3, #0
   dcc0c:	6805      	ldr	r5, [r0, #0]
   dcc0e:	b2a9      	uxth	r1, r5
   dcc10:	fb02 8101 	mla	r1, r2, r1, r8
   dcc14:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dcc18:	0c2d      	lsrs	r5, r5, #16
   dcc1a:	fb02 c505 	mla	r5, r2, r5, ip
   dcc1e:	b289      	uxth	r1, r1
   dcc20:	3301      	adds	r3, #1
   dcc22:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dcc26:	429e      	cmp	r6, r3
   dcc28:	f840 1b04 	str.w	r1, [r0], #4
   dcc2c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dcc30:	dcec      	bgt.n	dcc0c <__multadd+0x12>
   dcc32:	f1b8 0f00 	cmp.w	r8, #0
   dcc36:	d01b      	beq.n	dcc70 <__multadd+0x76>
   dcc38:	68a3      	ldr	r3, [r4, #8]
   dcc3a:	42b3      	cmp	r3, r6
   dcc3c:	dc12      	bgt.n	dcc64 <__multadd+0x6a>
   dcc3e:	6861      	ldr	r1, [r4, #4]
   dcc40:	4638      	mov	r0, r7
   dcc42:	3101      	adds	r1, #1
   dcc44:	f7ff ff8e 	bl	dcb64 <_Balloc>
   dcc48:	6922      	ldr	r2, [r4, #16]
   dcc4a:	3202      	adds	r2, #2
   dcc4c:	f104 010c 	add.w	r1, r4, #12
   dcc50:	4605      	mov	r5, r0
   dcc52:	0092      	lsls	r2, r2, #2
   dcc54:	300c      	adds	r0, #12
   dcc56:	f7fe fcaf 	bl	db5b8 <memcpy>
   dcc5a:	4621      	mov	r1, r4
   dcc5c:	4638      	mov	r0, r7
   dcc5e:	f7ff ffb5 	bl	dcbcc <_Bfree>
   dcc62:	462c      	mov	r4, r5
   dcc64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dcc68:	3601      	adds	r6, #1
   dcc6a:	f8c3 8014 	str.w	r8, [r3, #20]
   dcc6e:	6126      	str	r6, [r4, #16]
   dcc70:	4620      	mov	r0, r4
   dcc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcc76 <__s2b>:
   dcc76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcc7a:	460c      	mov	r4, r1
   dcc7c:	4615      	mov	r5, r2
   dcc7e:	461f      	mov	r7, r3
   dcc80:	2209      	movs	r2, #9
   dcc82:	3308      	adds	r3, #8
   dcc84:	4606      	mov	r6, r0
   dcc86:	fb93 f3f2 	sdiv	r3, r3, r2
   dcc8a:	2100      	movs	r1, #0
   dcc8c:	2201      	movs	r2, #1
   dcc8e:	429a      	cmp	r2, r3
   dcc90:	db20      	blt.n	dccd4 <__s2b+0x5e>
   dcc92:	4630      	mov	r0, r6
   dcc94:	f7ff ff66 	bl	dcb64 <_Balloc>
   dcc98:	9b08      	ldr	r3, [sp, #32]
   dcc9a:	6143      	str	r3, [r0, #20]
   dcc9c:	2d09      	cmp	r5, #9
   dcc9e:	f04f 0301 	mov.w	r3, #1
   dcca2:	6103      	str	r3, [r0, #16]
   dcca4:	dd19      	ble.n	dccda <__s2b+0x64>
   dcca6:	f104 0909 	add.w	r9, r4, #9
   dccaa:	46c8      	mov	r8, r9
   dccac:	442c      	add	r4, r5
   dccae:	f818 3b01 	ldrb.w	r3, [r8], #1
   dccb2:	4601      	mov	r1, r0
   dccb4:	3b30      	subs	r3, #48	; 0x30
   dccb6:	220a      	movs	r2, #10
   dccb8:	4630      	mov	r0, r6
   dccba:	f7ff ff9e 	bl	dcbfa <__multadd>
   dccbe:	45a0      	cmp	r8, r4
   dccc0:	d1f5      	bne.n	dccae <__s2b+0x38>
   dccc2:	f1a5 0408 	sub.w	r4, r5, #8
   dccc6:	444c      	add	r4, r9
   dccc8:	1b2d      	subs	r5, r5, r4
   dccca:	1963      	adds	r3, r4, r5
   dcccc:	42bb      	cmp	r3, r7
   dccce:	db07      	blt.n	dcce0 <__s2b+0x6a>
   dccd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dccd4:	0052      	lsls	r2, r2, #1
   dccd6:	3101      	adds	r1, #1
   dccd8:	e7d9      	b.n	dcc8e <__s2b+0x18>
   dccda:	340a      	adds	r4, #10
   dccdc:	2509      	movs	r5, #9
   dccde:	e7f3      	b.n	dccc8 <__s2b+0x52>
   dcce0:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcce4:	4601      	mov	r1, r0
   dcce6:	3b30      	subs	r3, #48	; 0x30
   dcce8:	220a      	movs	r2, #10
   dccea:	4630      	mov	r0, r6
   dccec:	f7ff ff85 	bl	dcbfa <__multadd>
   dccf0:	e7eb      	b.n	dccca <__s2b+0x54>

000dccf2 <__hi0bits>:
   dccf2:	0c03      	lsrs	r3, r0, #16
   dccf4:	041b      	lsls	r3, r3, #16
   dccf6:	b9d3      	cbnz	r3, dcd2e <__hi0bits+0x3c>
   dccf8:	0400      	lsls	r0, r0, #16
   dccfa:	2310      	movs	r3, #16
   dccfc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcd00:	bf04      	itt	eq
   dcd02:	0200      	lsleq	r0, r0, #8
   dcd04:	3308      	addeq	r3, #8
   dcd06:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcd0a:	bf04      	itt	eq
   dcd0c:	0100      	lsleq	r0, r0, #4
   dcd0e:	3304      	addeq	r3, #4
   dcd10:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcd14:	bf04      	itt	eq
   dcd16:	0080      	lsleq	r0, r0, #2
   dcd18:	3302      	addeq	r3, #2
   dcd1a:	2800      	cmp	r0, #0
   dcd1c:	db05      	blt.n	dcd2a <__hi0bits+0x38>
   dcd1e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dcd22:	f103 0301 	add.w	r3, r3, #1
   dcd26:	bf08      	it	eq
   dcd28:	2320      	moveq	r3, #32
   dcd2a:	4618      	mov	r0, r3
   dcd2c:	4770      	bx	lr
   dcd2e:	2300      	movs	r3, #0
   dcd30:	e7e4      	b.n	dccfc <__hi0bits+0xa>

000dcd32 <__lo0bits>:
   dcd32:	6803      	ldr	r3, [r0, #0]
   dcd34:	f013 0207 	ands.w	r2, r3, #7
   dcd38:	4601      	mov	r1, r0
   dcd3a:	d00b      	beq.n	dcd54 <__lo0bits+0x22>
   dcd3c:	07da      	lsls	r2, r3, #31
   dcd3e:	d424      	bmi.n	dcd8a <__lo0bits+0x58>
   dcd40:	0798      	lsls	r0, r3, #30
   dcd42:	bf49      	itett	mi
   dcd44:	085b      	lsrmi	r3, r3, #1
   dcd46:	089b      	lsrpl	r3, r3, #2
   dcd48:	2001      	movmi	r0, #1
   dcd4a:	600b      	strmi	r3, [r1, #0]
   dcd4c:	bf5c      	itt	pl
   dcd4e:	600b      	strpl	r3, [r1, #0]
   dcd50:	2002      	movpl	r0, #2
   dcd52:	4770      	bx	lr
   dcd54:	b298      	uxth	r0, r3
   dcd56:	b9b0      	cbnz	r0, dcd86 <__lo0bits+0x54>
   dcd58:	0c1b      	lsrs	r3, r3, #16
   dcd5a:	2010      	movs	r0, #16
   dcd5c:	f013 0fff 	tst.w	r3, #255	; 0xff
   dcd60:	bf04      	itt	eq
   dcd62:	0a1b      	lsreq	r3, r3, #8
   dcd64:	3008      	addeq	r0, #8
   dcd66:	071a      	lsls	r2, r3, #28
   dcd68:	bf04      	itt	eq
   dcd6a:	091b      	lsreq	r3, r3, #4
   dcd6c:	3004      	addeq	r0, #4
   dcd6e:	079a      	lsls	r2, r3, #30
   dcd70:	bf04      	itt	eq
   dcd72:	089b      	lsreq	r3, r3, #2
   dcd74:	3002      	addeq	r0, #2
   dcd76:	07da      	lsls	r2, r3, #31
   dcd78:	d403      	bmi.n	dcd82 <__lo0bits+0x50>
   dcd7a:	085b      	lsrs	r3, r3, #1
   dcd7c:	f100 0001 	add.w	r0, r0, #1
   dcd80:	d005      	beq.n	dcd8e <__lo0bits+0x5c>
   dcd82:	600b      	str	r3, [r1, #0]
   dcd84:	4770      	bx	lr
   dcd86:	4610      	mov	r0, r2
   dcd88:	e7e8      	b.n	dcd5c <__lo0bits+0x2a>
   dcd8a:	2000      	movs	r0, #0
   dcd8c:	4770      	bx	lr
   dcd8e:	2020      	movs	r0, #32
   dcd90:	4770      	bx	lr

000dcd92 <__i2b>:
   dcd92:	b510      	push	{r4, lr}
   dcd94:	460c      	mov	r4, r1
   dcd96:	2101      	movs	r1, #1
   dcd98:	f7ff fee4 	bl	dcb64 <_Balloc>
   dcd9c:	2201      	movs	r2, #1
   dcd9e:	6144      	str	r4, [r0, #20]
   dcda0:	6102      	str	r2, [r0, #16]
   dcda2:	bd10      	pop	{r4, pc}

000dcda4 <__multiply>:
   dcda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcda8:	4615      	mov	r5, r2
   dcdaa:	690a      	ldr	r2, [r1, #16]
   dcdac:	692b      	ldr	r3, [r5, #16]
   dcdae:	429a      	cmp	r2, r3
   dcdb0:	bfb8      	it	lt
   dcdb2:	460b      	movlt	r3, r1
   dcdb4:	460c      	mov	r4, r1
   dcdb6:	bfbc      	itt	lt
   dcdb8:	462c      	movlt	r4, r5
   dcdba:	461d      	movlt	r5, r3
   dcdbc:	6927      	ldr	r7, [r4, #16]
   dcdbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dcdc2:	68a3      	ldr	r3, [r4, #8]
   dcdc4:	6861      	ldr	r1, [r4, #4]
   dcdc6:	eb07 0609 	add.w	r6, r7, r9
   dcdca:	42b3      	cmp	r3, r6
   dcdcc:	bfb8      	it	lt
   dcdce:	3101      	addlt	r1, #1
   dcdd0:	b085      	sub	sp, #20
   dcdd2:	f7ff fec7 	bl	dcb64 <_Balloc>
   dcdd6:	f100 0114 	add.w	r1, r0, #20
   dcdda:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dcdde:	460b      	mov	r3, r1
   dcde0:	2200      	movs	r2, #0
   dcde2:	4543      	cmp	r3, r8
   dcde4:	d31d      	bcc.n	dce22 <__multiply+0x7e>
   dcde6:	f104 0314 	add.w	r3, r4, #20
   dcdea:	f105 0214 	add.w	r2, r5, #20
   dcdee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dcdf2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dcdf6:	9302      	str	r3, [sp, #8]
   dcdf8:	1b3b      	subs	r3, r7, r4
   dcdfa:	3b15      	subs	r3, #21
   dcdfc:	f023 0303 	bic.w	r3, r3, #3
   dce00:	3304      	adds	r3, #4
   dce02:	f104 0515 	add.w	r5, r4, #21
   dce06:	42af      	cmp	r7, r5
   dce08:	bf38      	it	cc
   dce0a:	2304      	movcc	r3, #4
   dce0c:	9301      	str	r3, [sp, #4]
   dce0e:	9b02      	ldr	r3, [sp, #8]
   dce10:	9203      	str	r2, [sp, #12]
   dce12:	4293      	cmp	r3, r2
   dce14:	d808      	bhi.n	dce28 <__multiply+0x84>
   dce16:	2e00      	cmp	r6, #0
   dce18:	dc5a      	bgt.n	dced0 <__multiply+0x12c>
   dce1a:	6106      	str	r6, [r0, #16]
   dce1c:	b005      	add	sp, #20
   dce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dce22:	f843 2b04 	str.w	r2, [r3], #4
   dce26:	e7dc      	b.n	dcde2 <__multiply+0x3e>
   dce28:	f8b2 a000 	ldrh.w	sl, [r2]
   dce2c:	f1ba 0f00 	cmp.w	sl, #0
   dce30:	d024      	beq.n	dce7c <__multiply+0xd8>
   dce32:	f104 0e14 	add.w	lr, r4, #20
   dce36:	4689      	mov	r9, r1
   dce38:	f04f 0c00 	mov.w	ip, #0
   dce3c:	f85e 5b04 	ldr.w	r5, [lr], #4
   dce40:	f8d9 b000 	ldr.w	fp, [r9]
   dce44:	b2ab      	uxth	r3, r5
   dce46:	fa1f fb8b 	uxth.w	fp, fp
   dce4a:	fb0a b303 	mla	r3, sl, r3, fp
   dce4e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dce52:	f8d9 5000 	ldr.w	r5, [r9]
   dce56:	4463      	add	r3, ip
   dce58:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dce5c:	fb0a c50b 	mla	r5, sl, fp, ip
   dce60:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dce64:	b29b      	uxth	r3, r3
   dce66:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dce6a:	4577      	cmp	r7, lr
   dce6c:	f849 3b04 	str.w	r3, [r9], #4
   dce70:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dce74:	d8e2      	bhi.n	dce3c <__multiply+0x98>
   dce76:	9b01      	ldr	r3, [sp, #4]
   dce78:	f841 c003 	str.w	ip, [r1, r3]
   dce7c:	9b03      	ldr	r3, [sp, #12]
   dce7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dce82:	3204      	adds	r2, #4
   dce84:	f1b9 0f00 	cmp.w	r9, #0
   dce88:	d020      	beq.n	dcecc <__multiply+0x128>
   dce8a:	680b      	ldr	r3, [r1, #0]
   dce8c:	f104 0c14 	add.w	ip, r4, #20
   dce90:	468e      	mov	lr, r1
   dce92:	f04f 0a00 	mov.w	sl, #0
   dce96:	f8bc 5000 	ldrh.w	r5, [ip]
   dce9a:	f8be b002 	ldrh.w	fp, [lr, #2]
   dce9e:	fb09 b505 	mla	r5, r9, r5, fp
   dcea2:	44aa      	add	sl, r5
   dcea4:	b29b      	uxth	r3, r3
   dcea6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dceaa:	f84e 3b04 	str.w	r3, [lr], #4
   dceae:	f85c 3b04 	ldr.w	r3, [ip], #4
   dceb2:	f8be 5000 	ldrh.w	r5, [lr]
   dceb6:	0c1b      	lsrs	r3, r3, #16
   dceb8:	fb09 5303 	mla	r3, r9, r3, r5
   dcebc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dcec0:	4567      	cmp	r7, ip
   dcec2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dcec6:	d8e6      	bhi.n	dce96 <__multiply+0xf2>
   dcec8:	9d01      	ldr	r5, [sp, #4]
   dceca:	514b      	str	r3, [r1, r5]
   dcecc:	3104      	adds	r1, #4
   dcece:	e79e      	b.n	dce0e <__multiply+0x6a>
   dced0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dced4:	2b00      	cmp	r3, #0
   dced6:	d1a0      	bne.n	dce1a <__multiply+0x76>
   dced8:	3e01      	subs	r6, #1
   dceda:	e79c      	b.n	dce16 <__multiply+0x72>

000dcedc <__pow5mult>:
   dcedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcee0:	4615      	mov	r5, r2
   dcee2:	f012 0203 	ands.w	r2, r2, #3
   dcee6:	4606      	mov	r6, r0
   dcee8:	460f      	mov	r7, r1
   dceea:	d007      	beq.n	dcefc <__pow5mult+0x20>
   dceec:	4c21      	ldr	r4, [pc, #132]	; (dcf74 <__pow5mult+0x98>)
   dceee:	3a01      	subs	r2, #1
   dcef0:	2300      	movs	r3, #0
   dcef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcef6:	f7ff fe80 	bl	dcbfa <__multadd>
   dcefa:	4607      	mov	r7, r0
   dcefc:	10ad      	asrs	r5, r5, #2
   dcefe:	d035      	beq.n	dcf6c <__pow5mult+0x90>
   dcf00:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dcf02:	b93c      	cbnz	r4, dcf14 <__pow5mult+0x38>
   dcf04:	2010      	movs	r0, #16
   dcf06:	f7fb fdd1 	bl	d8aac <malloc>
   dcf0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dcf0e:	6270      	str	r0, [r6, #36]	; 0x24
   dcf10:	6004      	str	r4, [r0, #0]
   dcf12:	60c4      	str	r4, [r0, #12]
   dcf14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dcf18:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcf1c:	b94c      	cbnz	r4, dcf32 <__pow5mult+0x56>
   dcf1e:	f240 2171 	movw	r1, #625	; 0x271
   dcf22:	4630      	mov	r0, r6
   dcf24:	f7ff ff35 	bl	dcd92 <__i2b>
   dcf28:	2300      	movs	r3, #0
   dcf2a:	f8c8 0008 	str.w	r0, [r8, #8]
   dcf2e:	4604      	mov	r4, r0
   dcf30:	6003      	str	r3, [r0, #0]
   dcf32:	f04f 0900 	mov.w	r9, #0
   dcf36:	07eb      	lsls	r3, r5, #31
   dcf38:	d50a      	bpl.n	dcf50 <__pow5mult+0x74>
   dcf3a:	4639      	mov	r1, r7
   dcf3c:	4622      	mov	r2, r4
   dcf3e:	4630      	mov	r0, r6
   dcf40:	f7ff ff30 	bl	dcda4 <__multiply>
   dcf44:	4639      	mov	r1, r7
   dcf46:	4680      	mov	r8, r0
   dcf48:	4630      	mov	r0, r6
   dcf4a:	f7ff fe3f 	bl	dcbcc <_Bfree>
   dcf4e:	4647      	mov	r7, r8
   dcf50:	106d      	asrs	r5, r5, #1
   dcf52:	d00b      	beq.n	dcf6c <__pow5mult+0x90>
   dcf54:	6820      	ldr	r0, [r4, #0]
   dcf56:	b938      	cbnz	r0, dcf68 <__pow5mult+0x8c>
   dcf58:	4622      	mov	r2, r4
   dcf5a:	4621      	mov	r1, r4
   dcf5c:	4630      	mov	r0, r6
   dcf5e:	f7ff ff21 	bl	dcda4 <__multiply>
   dcf62:	6020      	str	r0, [r4, #0]
   dcf64:	f8c0 9000 	str.w	r9, [r0]
   dcf68:	4604      	mov	r4, r0
   dcf6a:	e7e4      	b.n	dcf36 <__pow5mult+0x5a>
   dcf6c:	4638      	mov	r0, r7
   dcf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcf72:	bf00      	nop
   dcf74:	000de5d8 	.word	0x000de5d8

000dcf78 <__lshift>:
   dcf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcf7c:	460c      	mov	r4, r1
   dcf7e:	6849      	ldr	r1, [r1, #4]
   dcf80:	6923      	ldr	r3, [r4, #16]
   dcf82:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dcf86:	68a3      	ldr	r3, [r4, #8]
   dcf88:	4607      	mov	r7, r0
   dcf8a:	4691      	mov	r9, r2
   dcf8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcf90:	f108 0601 	add.w	r6, r8, #1
   dcf94:	42b3      	cmp	r3, r6
   dcf96:	db3f      	blt.n	dd018 <__lshift+0xa0>
   dcf98:	4638      	mov	r0, r7
   dcf9a:	f7ff fde3 	bl	dcb64 <_Balloc>
   dcf9e:	2300      	movs	r3, #0
   dcfa0:	4605      	mov	r5, r0
   dcfa2:	f100 0114 	add.w	r1, r0, #20
   dcfa6:	f100 0210 	add.w	r2, r0, #16
   dcfaa:	4618      	mov	r0, r3
   dcfac:	4553      	cmp	r3, sl
   dcfae:	db36      	blt.n	dd01e <__lshift+0xa6>
   dcfb0:	6920      	ldr	r0, [r4, #16]
   dcfb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dcfb6:	f104 0314 	add.w	r3, r4, #20
   dcfba:	f019 091f 	ands.w	r9, r9, #31
   dcfbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dcfc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dcfc6:	d02e      	beq.n	dd026 <__lshift+0xae>
   dcfc8:	f1c9 0e20 	rsb	lr, r9, #32
   dcfcc:	468a      	mov	sl, r1
   dcfce:	2200      	movs	r2, #0
   dcfd0:	6818      	ldr	r0, [r3, #0]
   dcfd2:	fa00 f009 	lsl.w	r0, r0, r9
   dcfd6:	4302      	orrs	r2, r0
   dcfd8:	f84a 2b04 	str.w	r2, [sl], #4
   dcfdc:	f853 2b04 	ldr.w	r2, [r3], #4
   dcfe0:	459c      	cmp	ip, r3
   dcfe2:	fa22 f20e 	lsr.w	r2, r2, lr
   dcfe6:	d8f3      	bhi.n	dcfd0 <__lshift+0x58>
   dcfe8:	ebac 0304 	sub.w	r3, ip, r4
   dcfec:	3b15      	subs	r3, #21
   dcfee:	f023 0303 	bic.w	r3, r3, #3
   dcff2:	3304      	adds	r3, #4
   dcff4:	f104 0015 	add.w	r0, r4, #21
   dcff8:	4560      	cmp	r0, ip
   dcffa:	bf88      	it	hi
   dcffc:	2304      	movhi	r3, #4
   dcffe:	50ca      	str	r2, [r1, r3]
   dd000:	b10a      	cbz	r2, dd006 <__lshift+0x8e>
   dd002:	f108 0602 	add.w	r6, r8, #2
   dd006:	3e01      	subs	r6, #1
   dd008:	4638      	mov	r0, r7
   dd00a:	612e      	str	r6, [r5, #16]
   dd00c:	4621      	mov	r1, r4
   dd00e:	f7ff fddd 	bl	dcbcc <_Bfree>
   dd012:	4628      	mov	r0, r5
   dd014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd018:	3101      	adds	r1, #1
   dd01a:	005b      	lsls	r3, r3, #1
   dd01c:	e7ba      	b.n	dcf94 <__lshift+0x1c>
   dd01e:	f842 0f04 	str.w	r0, [r2, #4]!
   dd022:	3301      	adds	r3, #1
   dd024:	e7c2      	b.n	dcfac <__lshift+0x34>
   dd026:	3904      	subs	r1, #4
   dd028:	f853 2b04 	ldr.w	r2, [r3], #4
   dd02c:	f841 2f04 	str.w	r2, [r1, #4]!
   dd030:	459c      	cmp	ip, r3
   dd032:	d8f9      	bhi.n	dd028 <__lshift+0xb0>
   dd034:	e7e7      	b.n	dd006 <__lshift+0x8e>

000dd036 <__mcmp>:
   dd036:	b530      	push	{r4, r5, lr}
   dd038:	6902      	ldr	r2, [r0, #16]
   dd03a:	690c      	ldr	r4, [r1, #16]
   dd03c:	1b12      	subs	r2, r2, r4
   dd03e:	d10e      	bne.n	dd05e <__mcmp+0x28>
   dd040:	f100 0314 	add.w	r3, r0, #20
   dd044:	3114      	adds	r1, #20
   dd046:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dd04a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dd04e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dd052:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dd056:	42a5      	cmp	r5, r4
   dd058:	d003      	beq.n	dd062 <__mcmp+0x2c>
   dd05a:	d305      	bcc.n	dd068 <__mcmp+0x32>
   dd05c:	2201      	movs	r2, #1
   dd05e:	4610      	mov	r0, r2
   dd060:	bd30      	pop	{r4, r5, pc}
   dd062:	4283      	cmp	r3, r0
   dd064:	d3f3      	bcc.n	dd04e <__mcmp+0x18>
   dd066:	e7fa      	b.n	dd05e <__mcmp+0x28>
   dd068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd06c:	e7f7      	b.n	dd05e <__mcmp+0x28>

000dd06e <__mdiff>:
   dd06e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd072:	460c      	mov	r4, r1
   dd074:	4606      	mov	r6, r0
   dd076:	4611      	mov	r1, r2
   dd078:	4620      	mov	r0, r4
   dd07a:	4617      	mov	r7, r2
   dd07c:	f7ff ffdb 	bl	dd036 <__mcmp>
   dd080:	1e05      	subs	r5, r0, #0
   dd082:	d108      	bne.n	dd096 <__mdiff+0x28>
   dd084:	4629      	mov	r1, r5
   dd086:	4630      	mov	r0, r6
   dd088:	f7ff fd6c 	bl	dcb64 <_Balloc>
   dd08c:	2301      	movs	r3, #1
   dd08e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dd092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd096:	bfa4      	itt	ge
   dd098:	463b      	movge	r3, r7
   dd09a:	4627      	movge	r7, r4
   dd09c:	4630      	mov	r0, r6
   dd09e:	6879      	ldr	r1, [r7, #4]
   dd0a0:	bfa6      	itte	ge
   dd0a2:	461c      	movge	r4, r3
   dd0a4:	2500      	movge	r5, #0
   dd0a6:	2501      	movlt	r5, #1
   dd0a8:	f7ff fd5c 	bl	dcb64 <_Balloc>
   dd0ac:	693e      	ldr	r6, [r7, #16]
   dd0ae:	60c5      	str	r5, [r0, #12]
   dd0b0:	6925      	ldr	r5, [r4, #16]
   dd0b2:	f107 0114 	add.w	r1, r7, #20
   dd0b6:	f104 0914 	add.w	r9, r4, #20
   dd0ba:	f100 0e14 	add.w	lr, r0, #20
   dd0be:	f107 0210 	add.w	r2, r7, #16
   dd0c2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd0c6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd0ca:	46f2      	mov	sl, lr
   dd0cc:	2700      	movs	r7, #0
   dd0ce:	f859 3b04 	ldr.w	r3, [r9], #4
   dd0d2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd0d6:	fa1f f883 	uxth.w	r8, r3
   dd0da:	fa17 f78b 	uxtah	r7, r7, fp
   dd0de:	0c1b      	lsrs	r3, r3, #16
   dd0e0:	eba7 0808 	sub.w	r8, r7, r8
   dd0e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd0e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd0ec:	fa1f f888 	uxth.w	r8, r8
   dd0f0:	141f      	asrs	r7, r3, #16
   dd0f2:	454d      	cmp	r5, r9
   dd0f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd0f8:	f84a 3b04 	str.w	r3, [sl], #4
   dd0fc:	d8e7      	bhi.n	dd0ce <__mdiff+0x60>
   dd0fe:	1b2b      	subs	r3, r5, r4
   dd100:	3b15      	subs	r3, #21
   dd102:	f023 0303 	bic.w	r3, r3, #3
   dd106:	3304      	adds	r3, #4
   dd108:	3415      	adds	r4, #21
   dd10a:	42a5      	cmp	r5, r4
   dd10c:	bf38      	it	cc
   dd10e:	2304      	movcc	r3, #4
   dd110:	4419      	add	r1, r3
   dd112:	4473      	add	r3, lr
   dd114:	469e      	mov	lr, r3
   dd116:	460d      	mov	r5, r1
   dd118:	4565      	cmp	r5, ip
   dd11a:	d30e      	bcc.n	dd13a <__mdiff+0xcc>
   dd11c:	f10c 0203 	add.w	r2, ip, #3
   dd120:	1a52      	subs	r2, r2, r1
   dd122:	f022 0203 	bic.w	r2, r2, #3
   dd126:	3903      	subs	r1, #3
   dd128:	458c      	cmp	ip, r1
   dd12a:	bf38      	it	cc
   dd12c:	2200      	movcc	r2, #0
   dd12e:	441a      	add	r2, r3
   dd130:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd134:	b17b      	cbz	r3, dd156 <__mdiff+0xe8>
   dd136:	6106      	str	r6, [r0, #16]
   dd138:	e7ab      	b.n	dd092 <__mdiff+0x24>
   dd13a:	f855 8b04 	ldr.w	r8, [r5], #4
   dd13e:	fa17 f488 	uxtah	r4, r7, r8
   dd142:	1422      	asrs	r2, r4, #16
   dd144:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd148:	b2a4      	uxth	r4, r4
   dd14a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd14e:	f84e 4b04 	str.w	r4, [lr], #4
   dd152:	1417      	asrs	r7, r2, #16
   dd154:	e7e0      	b.n	dd118 <__mdiff+0xaa>
   dd156:	3e01      	subs	r6, #1
   dd158:	e7ea      	b.n	dd130 <__mdiff+0xc2>
	...

000dd15c <__ulp>:
   dd15c:	b082      	sub	sp, #8
   dd15e:	ed8d 0b00 	vstr	d0, [sp]
   dd162:	9b01      	ldr	r3, [sp, #4]
   dd164:	4912      	ldr	r1, [pc, #72]	; (dd1b0 <__ulp+0x54>)
   dd166:	4019      	ands	r1, r3
   dd168:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd16c:	2900      	cmp	r1, #0
   dd16e:	dd05      	ble.n	dd17c <__ulp+0x20>
   dd170:	2200      	movs	r2, #0
   dd172:	460b      	mov	r3, r1
   dd174:	ec43 2b10 	vmov	d0, r2, r3
   dd178:	b002      	add	sp, #8
   dd17a:	4770      	bx	lr
   dd17c:	4249      	negs	r1, r1
   dd17e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd182:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd186:	f04f 0200 	mov.w	r2, #0
   dd18a:	f04f 0300 	mov.w	r3, #0
   dd18e:	da04      	bge.n	dd19a <__ulp+0x3e>
   dd190:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd194:	fa41 f300 	asr.w	r3, r1, r0
   dd198:	e7ec      	b.n	dd174 <__ulp+0x18>
   dd19a:	f1a0 0114 	sub.w	r1, r0, #20
   dd19e:	291e      	cmp	r1, #30
   dd1a0:	bfda      	itte	le
   dd1a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd1a6:	fa20 f101 	lsrle.w	r1, r0, r1
   dd1aa:	2101      	movgt	r1, #1
   dd1ac:	460a      	mov	r2, r1
   dd1ae:	e7e1      	b.n	dd174 <__ulp+0x18>
   dd1b0:	7ff00000 	.word	0x7ff00000

000dd1b4 <__b2d>:
   dd1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd1b6:	6905      	ldr	r5, [r0, #16]
   dd1b8:	f100 0714 	add.w	r7, r0, #20
   dd1bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd1c0:	1f2e      	subs	r6, r5, #4
   dd1c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd1c6:	4620      	mov	r0, r4
   dd1c8:	f7ff fd93 	bl	dccf2 <__hi0bits>
   dd1cc:	f1c0 0320 	rsb	r3, r0, #32
   dd1d0:	280a      	cmp	r0, #10
   dd1d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; dd250 <__b2d+0x9c>
   dd1d6:	600b      	str	r3, [r1, #0]
   dd1d8:	dc14      	bgt.n	dd204 <__b2d+0x50>
   dd1da:	f1c0 0e0b 	rsb	lr, r0, #11
   dd1de:	fa24 f10e 	lsr.w	r1, r4, lr
   dd1e2:	42b7      	cmp	r7, r6
   dd1e4:	ea41 030c 	orr.w	r3, r1, ip
   dd1e8:	bf34      	ite	cc
   dd1ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd1ee:	2100      	movcs	r1, #0
   dd1f0:	3015      	adds	r0, #21
   dd1f2:	fa04 f000 	lsl.w	r0, r4, r0
   dd1f6:	fa21 f10e 	lsr.w	r1, r1, lr
   dd1fa:	ea40 0201 	orr.w	r2, r0, r1
   dd1fe:	ec43 2b10 	vmov	d0, r2, r3
   dd202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd204:	42b7      	cmp	r7, r6
   dd206:	bf3a      	itte	cc
   dd208:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd20c:	f1a5 0608 	subcc.w	r6, r5, #8
   dd210:	2100      	movcs	r1, #0
   dd212:	380b      	subs	r0, #11
   dd214:	d017      	beq.n	dd246 <__b2d+0x92>
   dd216:	f1c0 0c20 	rsb	ip, r0, #32
   dd21a:	fa04 f500 	lsl.w	r5, r4, r0
   dd21e:	42be      	cmp	r6, r7
   dd220:	fa21 f40c 	lsr.w	r4, r1, ip
   dd224:	ea45 0504 	orr.w	r5, r5, r4
   dd228:	bf8c      	ite	hi
   dd22a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd22e:	2400      	movls	r4, #0
   dd230:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd234:	fa01 f000 	lsl.w	r0, r1, r0
   dd238:	fa24 f40c 	lsr.w	r4, r4, ip
   dd23c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd240:	ea40 0204 	orr.w	r2, r0, r4
   dd244:	e7db      	b.n	dd1fe <__b2d+0x4a>
   dd246:	ea44 030c 	orr.w	r3, r4, ip
   dd24a:	460a      	mov	r2, r1
   dd24c:	e7d7      	b.n	dd1fe <__b2d+0x4a>
   dd24e:	bf00      	nop
   dd250:	3ff00000 	.word	0x3ff00000

000dd254 <__d2b>:
   dd254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd258:	4689      	mov	r9, r1
   dd25a:	2101      	movs	r1, #1
   dd25c:	ec57 6b10 	vmov	r6, r7, d0
   dd260:	4690      	mov	r8, r2
   dd262:	f7ff fc7f 	bl	dcb64 <_Balloc>
   dd266:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dd26a:	4604      	mov	r4, r0
   dd26c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dd270:	bb35      	cbnz	r5, dd2c0 <__d2b+0x6c>
   dd272:	2e00      	cmp	r6, #0
   dd274:	9301      	str	r3, [sp, #4]
   dd276:	d028      	beq.n	dd2ca <__d2b+0x76>
   dd278:	4668      	mov	r0, sp
   dd27a:	9600      	str	r6, [sp, #0]
   dd27c:	f7ff fd59 	bl	dcd32 <__lo0bits>
   dd280:	9900      	ldr	r1, [sp, #0]
   dd282:	b300      	cbz	r0, dd2c6 <__d2b+0x72>
   dd284:	9a01      	ldr	r2, [sp, #4]
   dd286:	f1c0 0320 	rsb	r3, r0, #32
   dd28a:	fa02 f303 	lsl.w	r3, r2, r3
   dd28e:	430b      	orrs	r3, r1
   dd290:	40c2      	lsrs	r2, r0
   dd292:	6163      	str	r3, [r4, #20]
   dd294:	9201      	str	r2, [sp, #4]
   dd296:	9b01      	ldr	r3, [sp, #4]
   dd298:	61a3      	str	r3, [r4, #24]
   dd29a:	2b00      	cmp	r3, #0
   dd29c:	bf14      	ite	ne
   dd29e:	2202      	movne	r2, #2
   dd2a0:	2201      	moveq	r2, #1
   dd2a2:	6122      	str	r2, [r4, #16]
   dd2a4:	b1d5      	cbz	r5, dd2dc <__d2b+0x88>
   dd2a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dd2aa:	4405      	add	r5, r0
   dd2ac:	f8c9 5000 	str.w	r5, [r9]
   dd2b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd2b4:	f8c8 0000 	str.w	r0, [r8]
   dd2b8:	4620      	mov	r0, r4
   dd2ba:	b003      	add	sp, #12
   dd2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd2c4:	e7d5      	b.n	dd272 <__d2b+0x1e>
   dd2c6:	6161      	str	r1, [r4, #20]
   dd2c8:	e7e5      	b.n	dd296 <__d2b+0x42>
   dd2ca:	a801      	add	r0, sp, #4
   dd2cc:	f7ff fd31 	bl	dcd32 <__lo0bits>
   dd2d0:	9b01      	ldr	r3, [sp, #4]
   dd2d2:	6163      	str	r3, [r4, #20]
   dd2d4:	2201      	movs	r2, #1
   dd2d6:	6122      	str	r2, [r4, #16]
   dd2d8:	3020      	adds	r0, #32
   dd2da:	e7e3      	b.n	dd2a4 <__d2b+0x50>
   dd2dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dd2e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd2e4:	f8c9 0000 	str.w	r0, [r9]
   dd2e8:	6918      	ldr	r0, [r3, #16]
   dd2ea:	f7ff fd02 	bl	dccf2 <__hi0bits>
   dd2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dd2f2:	e7df      	b.n	dd2b4 <__d2b+0x60>

000dd2f4 <__ratio>:
   dd2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd2f8:	4688      	mov	r8, r1
   dd2fa:	4669      	mov	r1, sp
   dd2fc:	4681      	mov	r9, r0
   dd2fe:	f7ff ff59 	bl	dd1b4 <__b2d>
   dd302:	a901      	add	r1, sp, #4
   dd304:	4640      	mov	r0, r8
   dd306:	ec55 4b10 	vmov	r4, r5, d0
   dd30a:	f7ff ff53 	bl	dd1b4 <__b2d>
   dd30e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd312:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd316:	eba3 0c02 	sub.w	ip, r3, r2
   dd31a:	e9dd 3200 	ldrd	r3, r2, [sp]
   dd31e:	1a9b      	subs	r3, r3, r2
   dd320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dd324:	ec51 0b10 	vmov	r0, r1, d0
   dd328:	2b00      	cmp	r3, #0
   dd32a:	bfd6      	itet	le
   dd32c:	460a      	movle	r2, r1
   dd32e:	462a      	movgt	r2, r5
   dd330:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dd334:	468b      	mov	fp, r1
   dd336:	462f      	mov	r7, r5
   dd338:	bfd4      	ite	le
   dd33a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dd33e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dd342:	4620      	mov	r0, r4
   dd344:	ee10 2a10 	vmov	r2, s0
   dd348:	465b      	mov	r3, fp
   dd34a:	4639      	mov	r1, r7
   dd34c:	f7fd fed2 	bl	db0f4 <__aeabi_ddiv>
   dd350:	ec41 0b10 	vmov	d0, r0, r1
   dd354:	b003      	add	sp, #12
   dd356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd35a <__copybits>:
   dd35a:	3901      	subs	r1, #1
   dd35c:	b570      	push	{r4, r5, r6, lr}
   dd35e:	1149      	asrs	r1, r1, #5
   dd360:	6914      	ldr	r4, [r2, #16]
   dd362:	3101      	adds	r1, #1
   dd364:	f102 0314 	add.w	r3, r2, #20
   dd368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd36c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd370:	1f05      	subs	r5, r0, #4
   dd372:	42a3      	cmp	r3, r4
   dd374:	d30c      	bcc.n	dd390 <__copybits+0x36>
   dd376:	1aa3      	subs	r3, r4, r2
   dd378:	3b11      	subs	r3, #17
   dd37a:	f023 0303 	bic.w	r3, r3, #3
   dd37e:	3211      	adds	r2, #17
   dd380:	42a2      	cmp	r2, r4
   dd382:	bf88      	it	hi
   dd384:	2300      	movhi	r3, #0
   dd386:	4418      	add	r0, r3
   dd388:	2300      	movs	r3, #0
   dd38a:	4288      	cmp	r0, r1
   dd38c:	d305      	bcc.n	dd39a <__copybits+0x40>
   dd38e:	bd70      	pop	{r4, r5, r6, pc}
   dd390:	f853 6b04 	ldr.w	r6, [r3], #4
   dd394:	f845 6f04 	str.w	r6, [r5, #4]!
   dd398:	e7eb      	b.n	dd372 <__copybits+0x18>
   dd39a:	f840 3b04 	str.w	r3, [r0], #4
   dd39e:	e7f4      	b.n	dd38a <__copybits+0x30>

000dd3a0 <__any_on>:
   dd3a0:	f100 0214 	add.w	r2, r0, #20
   dd3a4:	6900      	ldr	r0, [r0, #16]
   dd3a6:	114b      	asrs	r3, r1, #5
   dd3a8:	4298      	cmp	r0, r3
   dd3aa:	b510      	push	{r4, lr}
   dd3ac:	db11      	blt.n	dd3d2 <__any_on+0x32>
   dd3ae:	dd0a      	ble.n	dd3c6 <__any_on+0x26>
   dd3b0:	f011 011f 	ands.w	r1, r1, #31
   dd3b4:	d007      	beq.n	dd3c6 <__any_on+0x26>
   dd3b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd3ba:	fa24 f001 	lsr.w	r0, r4, r1
   dd3be:	fa00 f101 	lsl.w	r1, r0, r1
   dd3c2:	428c      	cmp	r4, r1
   dd3c4:	d10b      	bne.n	dd3de <__any_on+0x3e>
   dd3c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd3ca:	4293      	cmp	r3, r2
   dd3cc:	d803      	bhi.n	dd3d6 <__any_on+0x36>
   dd3ce:	2000      	movs	r0, #0
   dd3d0:	bd10      	pop	{r4, pc}
   dd3d2:	4603      	mov	r3, r0
   dd3d4:	e7f7      	b.n	dd3c6 <__any_on+0x26>
   dd3d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd3da:	2900      	cmp	r1, #0
   dd3dc:	d0f5      	beq.n	dd3ca <__any_on+0x2a>
   dd3de:	2001      	movs	r0, #1
   dd3e0:	e7f6      	b.n	dd3d0 <__any_on+0x30>

000dd3e2 <_calloc_r>:
   dd3e2:	b513      	push	{r0, r1, r4, lr}
   dd3e4:	434a      	muls	r2, r1
   dd3e6:	4611      	mov	r1, r2
   dd3e8:	9201      	str	r2, [sp, #4]
   dd3ea:	f7fb fb97 	bl	d8b1c <_malloc_r>
   dd3ee:	4604      	mov	r4, r0
   dd3f0:	b118      	cbz	r0, dd3fa <_calloc_r+0x18>
   dd3f2:	9a01      	ldr	r2, [sp, #4]
   dd3f4:	2100      	movs	r1, #0
   dd3f6:	f7fe f907 	bl	db608 <memset>
   dd3fa:	4620      	mov	r0, r4
   dd3fc:	b002      	add	sp, #8
   dd3fe:	bd10      	pop	{r4, pc}

000dd400 <nan>:
   dd400:	ed9f 0b01 	vldr	d0, [pc, #4]	; dd408 <nan+0x8>
   dd404:	4770      	bx	lr
   dd406:	bf00      	nop
   dd408:	00000000 	.word	0x00000000
   dd40c:	7ff80000 	.word	0x7ff80000

000dd410 <__ascii_wctomb>:
   dd410:	b149      	cbz	r1, dd426 <__ascii_wctomb+0x16>
   dd412:	2aff      	cmp	r2, #255	; 0xff
   dd414:	bf85      	ittet	hi
   dd416:	238a      	movhi	r3, #138	; 0x8a
   dd418:	6003      	strhi	r3, [r0, #0]
   dd41a:	700a      	strbls	r2, [r1, #0]
   dd41c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dd420:	bf98      	it	ls
   dd422:	2001      	movls	r0, #1
   dd424:	4770      	bx	lr
   dd426:	4608      	mov	r0, r1
   dd428:	4770      	bx	lr
	...

000dd42c <__aeabi_d2lz>:
   dd42c:	b538      	push	{r3, r4, r5, lr}
   dd42e:	2200      	movs	r2, #0
   dd430:	2300      	movs	r3, #0
   dd432:	4604      	mov	r4, r0
   dd434:	460d      	mov	r5, r1
   dd436:	f7fd ffa5 	bl	db384 <__aeabi_dcmplt>
   dd43a:	b928      	cbnz	r0, dd448 <__aeabi_d2lz+0x1c>
   dd43c:	4620      	mov	r0, r4
   dd43e:	4629      	mov	r1, r5
   dd440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd444:	f7fe b84c 	b.w	db4e0 <__aeabi_d2ulz>
   dd448:	4620      	mov	r0, r4
   dd44a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dd44e:	f7fe f847 	bl	db4e0 <__aeabi_d2ulz>
   dd452:	4240      	negs	r0, r0
   dd454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd458:	bd38      	pop	{r3, r4, r5, pc}
   dd45a:	bf00      	nop

000dd45c <dynalib_user>:
   dd45c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd46c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dd47c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dd48c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dd49c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dd4ac:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   dd4bc:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   dd4cc:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   dd4dc:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   dd4ec:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   dd4fc:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   dd50c:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   dd51c:	726f 5320 7869 4e00 206f 6144 6174 5200     or Six.No Data.R
   dd52c:	7365 6f70 736e 2065 7645 6e65 0074 6552     esponse Event.Re
   dd53c:	7073 6e6f 6573 4320 646f 0065 6552 7073     sponse Code.Resp
   dd54c:	6e6f 6573 5220 6365 6965 6576 0064 6e55     onse Received.Un
   dd55c:	6e6b 776f 206e 6572 7073 6e6f 6573 7220     known response r
   dd56c:	6365 7665 6569 2064 6925 5300 7465 7420     ecevied %i.Set t
   dd57c:	206f 7233 2064 6150 7472 2079 6953 006d     o 3rd Party Sim.
   dd58c:	6553 2074 6f74 5020 7261 6974 6c63 2065     Set to Particle 
   dd59c:	6953 006d 654b 7065 4120 696c 6576 7320     Sim.Keep Alive s
   dd5ac:	7465 7420 206f 6925 7320 6365 4b00 6565     et to %i sec.Kee
   dd5bc:	2070 6c41 7669 0065 6552 6f70 7472 6e69     p Alive.Reportin
   dd5cc:	2067 6954 656d 5320 7465 7420 206f 7325     g Time Set to %s
   dd5dc:	4d20 6e69 7475 7365 002e 6553 2074 6556      Minutes..Set Ve
   dd5ec:	6272 736f 2065 6f4d 6564 4300 656c 7261     rbose Mode.Clear
   dd5fc:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
   dd60c:	6944 6173 6c62 6465 5320 6e65 6f73 2072     Disabled Sensor 
   dd61c:	6e4f 0065 6553 736e 726f 5320 6174 7574     One.Sensor Statu
   dd62c:	0073 6944 6173 6c62 6465 5320 6e65 6f73     s.Disabled Senso
   dd63c:	2072 7754 006f 6944 6173 6c62 6465 5320     r Two.Disabled S
   dd64c:	6e65 6f73 2072 6854 6572 0065 6944 6173     ensor Three.Disa
   dd65c:	6c62 6465 5320 6e65 6f73 2072 6f46 7275     bled Sensor Four
   dd66c:	4400 7369 6261 656c 2064 6553 736e 726f     .Disabled Sensor
   dd67c:	4620 7669 0065 6944 6173 6c62 6465 5320      Five.Disabled S
   dd68c:	6e65 6f73 2072 6953 0078 704f 7265 7461     ensor Six.Operat
   dd69c:	6f69 206e 6f4d 6564 2520 0069 6544 6976     ion Mode %i.Devi
   dd6ac:	6563 5220 7365 7465 5320 6375 6563 7373     ce Reset Success
   dd6bc:	4c00 616f 6964 676e 5320 7379 6574 206d     .Loading System 
   dd6cc:	6544 6166 6c75 7374 4c00 616f 6964 676e     Defaults.Loading
   dd6dc:	4320 6e6f 7473 6e61 2074 6544 6166 6c75      Constant Defaul
   dd6ec:	7374 3920 2e30 0039 6550 7474 6465 5700     ts 90.9.Petted.W
   dd6fc:	7461 6863 6f64 0067 6573 736e 726f 6e4f     atchdog.sensorOn
   dd70c:	0065 6573 736e 726f 7754 006f 6573 736e     e.sensorTwo.sens
   dd71c:	726f 6854 6572 0065 6573 736e 726f 6f46     orThree.sensorFo
   dd72c:	7275 7300 6e65 6f73 4672 7669 0065 6573     ur.sensorFive.se
   dd73c:	736e 726f 6953 0078 6553 736e 726f 6e4f     nsorSix.SensorOn
   dd74c:	5265 5300 6e65 6f73 4f72 656e 0053 6553     eR.SensorOneS.Se
   dd75c:	736e 726f 6e4f 5465 5300 6e65 6f73 5472     nsorOneT.SensorT
   dd76c:	6f77 0052 6553 736e 726f 7754 536f 5300     woR.SensorTwoS.S
   dd77c:	6e65 6f73 5472 6f77 0054 6553 736e 726f     ensorTwoT.Sensor
   dd78c:	6e4f 4e65 7000 776f 7265 6f6d 696e 6f74     OneN.powermonito
   dd79c:	6972 676e 685f 6f6f 006b 7246 6d6f 2520     ring_hook.From %
   dd7ac:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   dd7bc:	6e61 6973 6974 6e6f 4900 466e 696c 6867     ansition.InFligh
   dd7cc:	0074 4f47 4e49 2047 4f54 4520 5252 524f     t.GOING TO ERROR
   dd7dc:	4620 4f52 204d 4552 5053 5720 4941 0054      FROM RESP WAIT.
   dd7ec:	5245 4f52 2052 4f4c 0047 7073 7261 2f6b     ERROR LOG.spark/
   dd7fc:	6564 6976 6563 732f 7365 6973 6e6f 652f     device/session/e
   dd80c:	646e 4500 7272 726f 5320 6174 6574 2d20     nd.Error State -
   dd81c:	5220 7365 7465 5300 6174 6574 4300 2054      Reset.State.CT 
   dd82c:	6e4f 3a65 2520 2e33 6631 4300 2054 7754     One: %3.1f.CT Tw
   dd83c:	206f 3325 312e 0066 5443 5420 7268 6565     o %3.1f.CT Three
   dd84c:	203a 3325 312e 0066 6553 736e 726f 4620     : %3.1f.Sensor F
   dd85c:	756f 2072 6f43 736e 6174 746e 3a20 2520     our Constant : %
   dd86c:	2e33 6631 5300 6e65 6f73 2072 6946 6576     3.1f.Sensor Five
   dd87c:	4320 6e6f 7473 6e61 2074 203a 3325 312e      Constant : %3.1
   dd88c:	0066 6553 736e 726f 5320 7869 4320 6e6f     f.Sensor Six Con
   dd89c:	7473 6e61 2074 203a 3325 312e 0066 6f43     stant : %3.1f.Co
   dd8ac:	736e 6174 746e 4f20 656e 5620 6c61 6575     nstant One Value
   dd8bc:	7320 7465 7420 206f 4300 6e6f 7473 6e61      set to .Constan
   dd8cc:	2074 7754 206f 6156 756c 2065 6573 2074     t Two Value set 
   dd8dc:	6f74 0020 6f43 736e 6174 746e 5420 7268     to .Constant Thr
   dd8ec:	6565 5620 6c61 6575 7320 7465 7420 206f     ee Value set to 
   dd8fc:	4300 6e6f 7473 6e61 2074 6f46 7275 5620     .Constant Four V
   dd90c:	6c61 6575 7320 7465 7420 206f 4300 6e6f     alue set to .Con
   dd91c:	7473 6e61 2074 6946 6576 5620 6c61 6575     stant Five Value
   dd92c:	7320 7465 7420 206f 4300 6e6f 7473 6e61      set to .Constan
   dd93c:	2074 6953 2078 6156 756c 2065 6573 2074     t Six Value set 
   dd94c:	6f74 0020 614e 656d 5200 6c65 6165 6573     to .Name.Release
   dd95c:	4f00 6570 6172 6974 676e 4d20 646f 0065     .Operating Mode.
   dd96c:	6553 736e 726f 0073 6553 736e 726f 6e4f     Sensors.SensorOn
   dd97c:	4365 6e6f 656e 7463 6465 5300 6e65 6f73     eConnected.Senso
   dd98c:	4f72 656e 6f43 736e 6174 746e 5300 6e65     rOneConstant.Sen
   dd99c:	6f73 5472 6f77 6f43 6e6e 6365 6574 0064     sorTwoConnected.
   dd9ac:	6553 736e 726f 7754 436f 6e6f 7473 6e61     SensorTwoConstan
   dd9bc:	0074 6553 736e 726f 6854 6572 4365 6e6f     t.SensorThreeCon
   dd9cc:	656e 7463 6465 5300 6e65 6f73 5472 7268     nected.SensorThr
   dd9dc:	6565 6f43 736e 6174 746e 5300 6e65 6f73     eeConstant.Senso
   dd9ec:	4672 756f 4372 6e6f 656e 7463 6465 5300     rFourConnected.S
   dd9fc:	6e65 6f73 4672 756f 4372 6e6f 7473 6e61     ensorFourConstan
   dda0c:	0074 6553 736e 726f 6946 6576 6f43 6e6e     t.SensorFiveConn
   dda1c:	6365 6574 0064 6553 736e 726f 6946 6576     ected.SensorFive
   dda2c:	6f43 736e 6174 746e 5300 6e65 6f73 5372     Constant.SensorS
   dda3c:	7869 6f43 6e6e 6365 6574 0064 6553 736e     ixConnected.Sens
   dda4c:	726f 6953 4378 6e6f 7473 6e61 0074 6854     orSixConstant.Th
   dda5c:	7269 2064 6150 7472 2079 6953 006d 654b     ird Party Sim.Ke
   dda6c:	7065 6c41 7669 0065 6552 6f70 7472 6e69     epAlive.Reportin
   dda7c:	2067 7544 6172 6974 6e6f 5300 7379 6574     g Duration.Syste
   dda8c:	206d 6f43 666e 6769 7275 7461 6f69 006e     m Configuration.
   dda9c:	6c61 6169 0073 6f6e 6320 6e6f 6966 2067     alias.no config 
   ddaac:	6573 0074 002a 6142 7474 7265 0079 6142     set.*.Battery.Ba
   ddabc:	7474 7265 4379 6e6f 6574 7478 4b00 6565     tteryContext.Kee
   ddacc:	2070 6c41 7669 2065 6553 0063 704f 7265     p Alive Sec.Oper
   ddadc:	7461 6f69 206e 6f4d 6564 4d00 6165 7573     ation Mode.Measu
   ddaec:	6572 4e2d 776f 4300 6568 6b63 4320 6e6f     re-Now.Check Con
   ddafc:	6966 7567 6172 6974 6e6f 5600 7265 6f62     figuration.Verbo
   ddb0c:	6573 4d2d 646f 0065 6553 2074 6f43 736e     se-Mode.Set Cons
   ddb1c:	6174 746e 4f20 656e 5300 7465 4320 6e6f     tant One.Set Con
   ddb2c:	7473 6e61 2074 7754 006f 6553 2074 6f43     stant Two.Set Co
   ddb3c:	736e 6174 746e 5420 7268 6565 5300 7465     nstant Three.Set
   ddb4c:	4320 6e6f 7473 6e61 2074 6f46 7275 5300      Constant Four.S
   ddb5c:	7465 4320 6e6f 7473 6e61 2074 6946 6576     et Constant Five
   ddb6c:	5300 7465 4320 6e6f 7473 6e61 2074 6953     .Set Constant Si
   ddb7c:	0078 6e45 6261 656c 5320 6e65 6f73 0072     x.Enable Sensor.
   ddb8c:	6944 6173 6c62 2065 6553 736e 726f 5200     Disable Sensor.R
   ddb9c:	7065 726f 6974 676e 4420 7275 7461 6f69     eporting Duratio
   ddbac:	286e 494d 554e 4554 2953 5200 6265 6f6f     n(MINUTES).Reboo
   ddbbc:	2074 6544 6976 6563 4300 6f6c 6475 6f43     t Device.CloudCo
   ddbcc:	666e 6769 6544 6976 6563 6f4e 6574 0073     nfigDeviceNotes.
   ddbdc:	6553 7574 2070 6f4c 706f 4c00 616f 6964     Setup Loop.Loadi
   ddbec:	676e 4420 6665 7561 746c 0073 7453 7261     ng Defaults.Star
   ddbfc:	7574 0070                                   tup.

000ddc00 <_ZTV5Timer>:
	...
   ddc08:	429d 000d 42f1 000d 41dd 000d               .B...B...A..

000ddc14 <_ZTV17PublishQueueAsync>:
	...
   ddc1c:	41e9 000d 41fd 000d 7ecd 000d 8059 000d     .A...A...~..Y...
   ddc2c:	8019 000d 7ff7 000d 819f 000d 803f 000d     ............?...

000ddc3c <_ZTV8MB85RC64>:
	...
   ddc44:	4211 000d 4225 000d 74c5 000d 755b 000d     .B..%B...t..[u..
   ddc54:	75dd 000d                                   .u..

000ddc58 <_ZTV18CloudConfigStorage>:
	...
   ddc60:	40cd 000d 40a9 000d 40a9 000d 5ecd 000d     .@...@...@...^..
   ddc70:	40d1 000d 40d3 000d 0000 0000 0000 0000     .@...@..........

000ddc80 <_ZTV26CloudConfigStorageRetained>:
	...
   ddc88:	40d7 000d 6695 000d 411d 000d 5ecd 000d     .@...f...A...^..
   ddc98:	40d1 000d 6711 000d 5f15 000d 5f2d 000d     .@...g..._..-_..
   ddca8:	40db 000d d470 000d d478 000d d47c 000d     .@..p...x...|...
   ddcb8:	d485 000d d48d 000d d499 000d d49f 000d     ................
   ddcc8:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   ddcd8:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000ddd08 <_ZL13releaseNumber>:
   ddd08:	3831 302e 0030 0000                         18.00...

000ddd10 <_ZL17FRAMversionNumber>:
   ddd10:	0016 0000 7325 682f 6f6f 2d6b 6572 7073     ....%s/hook-resp
   ddd20:	6e6f 6573 252f 2f73 7500 6470 7461 4465     onse/%s/.updateD
   ddd30:	7461 2061 6163 6c6c 6465 2520 0073 6c43     ata called %s.Cl
   ddd40:	756f 4364 6e6f 6966 5567 6470 7461 5765     oudConfigUpdateW
   ddd50:	6265 6f68 6b6f 3a3a 7473 7261 5574 6470     ebhook::startUpd
   ddd60:	7461 2065 7325 6300 6f6c 6475 6320 6e6f     ate %s.cloud con
   ddd70:	656e 7463 6465 7700 6961 2074 6f66 2072     nected.wait for 
   ddd80:	7075 6164 6574 6e00 206f 6164 6174 6f20     update.no data o
   ddd90:	2072 7075 6164 6574 6120 2074 6572 7473     r update at rest
   ddda0:	7261 0074 6863 6365 696b 676e 6620 726f     art.checking for
   dddb0:	7420 6d69 2065 7075 6164 6574 7300 6174      time update.sta
   dddc0:	6574 7453 7261 5574 6470 7461 0065 7473     teStartUpdate.st
   dddd0:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   ddde0:	6c70 7465 2065 6974 656d 756f 0074 7473     plete timeout.st
   dddf0:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   dde00:	6c70 7465 2065 6f63 706d 656c 6574 0000     plete complete..

000dde10 <_ZTV11CloudConfig>:
	...
   dde18:	6995 000d 67c9 000d 67e9 000d               .i...g...g..

000dde24 <_ZTV22CloudConfigStorageData>:
	...
   dde2c:	40d7 000d 6695 000d 40a9 000d 5ecd 000d     .@...f...@...^..
   dde3c:	40d1 000d 6711 000d 0000 0000 0000 0000     .@...g..........
   dde4c:	40a9 000d                                   .@..

000dde50 <_ZTV24CloudConfigUpdateWebhook>:
	...
   dde58:	6a29 000d 6691 000d 69cd 000d 66e1 000d     )j...f...i...f..
   dde68:	66fd 000d                                   .f..

000dde6c <_ZTV29CloudConfigUpdateSubscription>:
	...
   dde74:	6a29 000d 6691 000d 6693 000d 66b5 000d     )j...f...f...f..
   dde84:	66cd 000d 6170 7472 6369 656c 642f 7665     .f..particle/dev
   dde94:	6369 2f65 616e 656d 0000 0000               ice/name....

000ddea0 <_ZTV16DeviceNameHelper>:
	...
   ddea8:	6ead 000d 6ecd 000d 6ddd 000d               .n...n...m..

000ddeb4 <_ZTV24DeviceNameHelperRetained>:
	...
   ddebc:	6ee1 000d 6ef5 000d 6ddd 000d 7277 7469     .n...n...m..writ
   ddecc:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   ddedc:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   ddeec:	7264 253d 0075 0000                         dr=%u...

000ddef4 <_ZTV6MB85RC>:
	...
   ddefc:	7415 000d 7417 000d 74c5 000d 755b 000d     .t...t...t..[u..
   ddf0c:	75dd 000d 6564 6976 6563 6552 6461 6620     .u..deviceRead f
   ddf1c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   ddf2c:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   ddf3c:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   ddf4c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   ddf5c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   ddf6c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   ddf7c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   ddf8c:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   ddf9c:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   ddfac:	0063 0000                                   c...

000ddfb0 <_ZTV12MCP79410SRAM>:
	...
   ddfb8:	769d 000d 76b3 000d 768d 000d 7691 000d     .v...v...v...v..
   ddfc8:	76dd 000d 79c5 000d 7be5 000d               .v...y...{..

000ddfd4 <_ZTV12MCP79410Time>:
	...
   ddfdc:	76a1 000d 76a5 000d                         .v...v..

000ddfe4 <_ZTV14MCP79410EEPROM>:
	...
   ddfec:	769f 000d 76c1 000d 7695 000d 7699 000d     .v...v...v...v..
   ddffc:	76dd 000d 79ff 000d 7e25 000d               .v...y..%~..

000de008 <_ZTV8MCP79410>:
	...
   de010:	76a3 000d 76cf 000d 7550 6c62 7369 5168     .v...v..PublishQ
   de020:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   de030:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   de040:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   de050:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   de060:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   de070:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   de080:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   de090:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   de0a0:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   de0b0:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   de0c0:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   de0d0:	7162 0000                                   bq..

000de0d4 <_ZTV21PublishQueueAsyncBase>:
	...
   de0e4:	7ecd 000d 40a9 000d 40a9 000d 40a9 000d     .~...@...@...@..
   de0f4:	40a9 000d 40a9 000d                         .@...@..

000de0fc <_ZTV25PublishQueueAsyncRetained>:
	...
   de104:	7fb5 000d 7fc9 000d 7ecd 000d 8059 000d     .........~..Y...
   de114:	8019 000d 7ff7 000d 819f 000d 803f 000d     ............?...

000de124 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de12c:	8bf5 000d 8bfb 000d 8c39 000d 8c09 000d     ........9.......
   de13c:	8bf7 000d                                   ....

000de140 <_ZTVN5spark13EthernetClassE>:
	...
   de148:	91f7 000d 91ed 000d 91e3 000d 91d9 000d     ................
   de158:	91cd 000d 91c1 000d 9b51 000d 9b59 000d     ........Q...Y...
   de168:	91b5 000d 91ad 000d 91a3 000d 9199 000d     ................
   de178:	9b89 000d                                   ....

000de17c <_ZTV7TwoWire>:
	...
   de184:	9215 000d 925f 000d 9237 000d 9217 000d     ...._...7.......
   de194:	923f 000d 9247 000d 924f 000d 9257 000d     ?...G...O...W...

000de1a4 <_ZTV9IPAddress>:
	...
   de1ac:	9391 000d 9381 000d 9383 000d 2e30 0030     ............0.0.
   de1bc:	6166 736c 0065 7274 6575 2500 0067 2575     false.true.%g.u%
   de1cc:	3430 0078                                   04x.

000de1d0 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de1d8:	949b 000d 94b1 000d 94c7 000d 94bf 000d     ................
   de1e8:	949f 000d                                   ....

000de1ec <_ZTVN5spark16JSONBufferWriterE>:
	...
   de1f4:	949d 000d 94a3 000d 94ef 000d 9515 000d     ................
   de204:	7061 0070                                   app.

000de208 <_ZTVN5spark12NetworkClassE>:
	...
   de210:	9b11 000d 9b1b 000d 9b25 000d 9b2f 000d     ........%.../...
   de220:	9b39 000d 9b45 000d 9b51 000d 9b59 000d     9...E...Q...Y...
   de230:	9b61 000d 9b6d 000d 9b75 000d 9b7f 000d     a...m...u.......
   de240:	9b89 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   de250:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   de260:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000de270 <_ZTV11USARTSerial>:
	...
   de278:	a2cd 000d a339 000d a311 000d 9c7d 000d     ....9.......}...
   de288:	a2e1 000d a2fd 000d a2ef 000d a30b 000d     ................
   de298:	a2cf 000d a2d3 000d                         ........

000de2a0 <_ZTV9USBSerial>:
	...
   de2a8:	a3cd 000d a435 000d a40b 000d 9c7d 000d     ....5.......}...
   de2b8:	a3fd 000d a3cf 000d a3df 000d a42f 000d     ............/...
   de2c8:	a3ef 000d a3c9 000d                         ........

000de2d0 <_ZTVN5spark9WiFiClassE>:
	...
   de2d8:	a52f 000d a525 000d a51b 000d a4d1 000d     /...%...........
   de2e8:	a50f 000d a503 000d 9b51 000d 9b59 000d     ........Q...Y...
   de2f8:	a4f7 000d a4ef 000d a4e5 000d a4db 000d     ................
   de308:	9b89 000d                                   ....

000de30c <_ZSt7nothrow>:
   de30c:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   de31c:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   de32c:	2e25 6432 2520 0a64                          %.2d %d..

000de335 <day_name.6145>:
   de335:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de345:	6972 6153                                    riSat

000de34a <mon_name.6146>:
   de34a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de35a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de36a:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000de37c <fpi.7566>:
   de37c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de38c:	0000 0000                                   ....

000de390 <fpinan.7602>:
   de390:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000de3a8 <tinytens>:
   de3a8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de3b8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de3c8:	6f43 64ac 0628 1168                         Co.d(.h.

000de3d0 <_ctype_>:
   de3d0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de3e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de3f0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de400:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de410:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de420:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de430:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de440:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de450:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de4d4 <_C_numeric_locale>:
   de4d4:	d5e4 000d e334 000d dd6c 2003 0043 4f50     ....4...l.. C.PO
   de4e4:	4953 0058                                   SIX.

000de4e8 <__mprec_bigtens>:
   de4e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de4f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de508:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de510 <__mprec_tens>:
   de510:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de520:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de530:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de540:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de550:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de560:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de570:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de580:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de590:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de5a0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de5b0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de5c0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de5d0:	9db4 79d9 7843 44ea                         ...yCx.D

000de5d8 <p05.7490>:
   de5d8:	0005 0000 0019 0000 007d 0000               ........}...

000de5e4 <link_const_variable_data_end>:
   de5e4:	000d6409 	.word	0x000d6409
   de5e8:	000d6dd1 	.word	0x000d6dd1
   de5ec:	000d7321 	.word	0x000d7321
   de5f0:	000d7e55 	.word	0x000d7e55
   de5f4:	000d8431 	.word	0x000d8431
   de5f8:	000d8bcd 	.word	0x000d8bcd
   de5fc:	000d9201 	.word	0x000d9201
   de600:	000d9b01 	.word	0x000d9b01
   de604:	000d9c69 	.word	0x000d9c69
   de608:	000d9d1d 	.word	0x000d9d1d
   de60c:	000d9f79 	.word	0x000d9f79
   de610:	000da2b9 	.word	0x000da2b9
   de614:	000da539 	.word	0x000da539

000de618 <link_constructors_end>:
	...
