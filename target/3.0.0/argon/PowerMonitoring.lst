
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009e70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000944  2003f400  000dde90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003d7f8  000de7d4  0001d7f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d40  2003dab8  2003dab8  0002dab8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dea90  000dea90  0001ea90  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000deabc  000deabc  0001eabc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00235c79  00000000  00000000  0001eac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001fdf3  00000000  00000000  00254739  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00047428  00000000  00000000  0027452c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000038f0  00000000  00000000  002bb954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bf48  00000000  00000000  002bf244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043259  00000000  00000000  002cb18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00056182  00000000  00000000  0030e3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00147f46  00000000  00000000  00364567  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aa60  00000000  00000000  004ac4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fe55 	bl	dace0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fe77 	bl	dad30 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d7f8 	.word	0x2003d7f8
   d404c:	000de7d4 	.word	0x000de7d4
   d4050:	2003dab4 	.word	0x2003dab4
   d4054:	2003dab8 	.word	0x2003dab8
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 feb9 	bl	d9dd8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dde5c 	.word	0x000dde5c
   d4080:	000dde90 	.word	0x000dde90

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bc58 	b.w	d5938 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fa6b 	bl	d5564 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 be63 	b.w	d9d5c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 ba07 	b.w	d84a8 <malloc>

000d409a <_Znaj>:
   d409a:	f004 ba05 	b.w	d84a8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 ba0b 	b.w	d84b8 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f004 ba09 	b.w	d84b8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 f8b4 	bl	d821c <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7f4d 	.word	0x000d7f4d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN18CloudConfigStorage13getDataHeaderEv>:
     * 
     * This is only available in classes derived from CloudConfigStorageData, which is all
     * of them except CloudConfigDataStatic, which is not updateable and therefore does not
     * need the structure.
     */
    virtual CloudConfigDataHeader *getDataHeader() { return 0; };
   d40cc:	2000      	movs	r0, #0
   d40ce:	4770      	bx	lr

000d40d0 <_ZN18CloudConfigStorage4loopEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };

    /**
     * @brief Called from loop(). Optional. Only needed if the storage method wants loop processing time.
     */
    virtual void loop() {};
   d40d0:	4770      	bx	lr

000d40d2 <_ZN18CloudConfigStorage10updateDataEPKc>:
     * 
     * @param json The new JSON data to save
     * 
     * This is subclassed in CloudConfigStorageData.
     */
    virtual bool updateData(const char *json) { return false; };
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr

000d40d6 <_ZN22CloudConfigStorageData13getDataHeaderEv>:
    CloudConfigStorageData &withData(CloudConfigDataHeader *header, size_t dataSize);

    /**
     * @brief Gets a pointer to the CloudConfigDataHeader structure
     */
    virtual CloudConfigDataHeader *getDataHeader() { return header; };
   d40d6:	6900      	ldr	r0, [r0, #16]
   d40d8:	4770      	bx	lr

000d40da <_ZN26CloudConfigStorageRetained4saveEv>:
    virtual void setup() { validate(); };

    /**
     * @brief Retained data doesn't require an explict save
     */
    virtual bool save() { return true; };
   d40da:	2001      	movs	r0, #1
   d40dc:	4770      	bx	lr
	...

000d40e0 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z11watchdogISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e5e9 	.word	0x2003e5e9

000d40ec <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ec:	6803      	ldr	r3, [r0, #0]
   d40ee:	4718      	bx	r3

000d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f0:	2a01      	cmp	r2, #1
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f4:	2a02      	cmp	r2, #2
   d40f6:	d003      	beq.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f8:	2000      	movs	r0, #0
   d40fa:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40fc:	6001      	str	r1, [r0, #0]
	      break;
   d40fe:	e7fb      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4100:	680b      	ldr	r3, [r1, #0]
   d4102:	6003      	str	r3, [r0, #0]
	}
   d4104:	e7f8      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  switch (__op)
   d4106:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4108:	bf08      	it	eq
   d410a:	6001      	streq	r1, [r0, #0]
	}
   d410c:	2000      	movs	r0, #0
   d410e:	4770      	bx	lr

000d4110 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlPKcE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d4110:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4112:	bf08      	it	eq
   d4114:	6001      	streq	r1, [r0, #0]
	}
   d4116:	2000      	movs	r0, #0
   d4118:	4770      	bx	lr

000d411a <_ZN26CloudConfigStorageRetained5setupEv>:
    virtual void setup() { validate(); };
   d411a:	f003 bbc5 	b.w	d78a8 <_ZN22CloudConfigStorageData8validateEv>
	...

000d4120 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z10measureNow6String+0x14>)
   d4124:	f005 faad 	bl	d9682 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4128:	b118      	cbz	r0, d4132 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d412a:	4b03      	ldr	r3, [pc, #12]	; (d4138 <_Z10measureNow6String+0x18>)
   d412c:	2203      	movs	r2, #3
   d412e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dcbd3 	.word	0x000dcbd3
   d4138:	2003e5b5 	.word	0x2003e5b5

000d413c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d413c:	b570      	push	{r4, r5, r6, lr}
   d413e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	220a      	movs	r2, #10
   d4144:	a901      	add	r1, sp, #4
   d4146:	f007 fd27 	bl	dbb98 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d414a:	1e43      	subs	r3, r0, #1
   d414c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d414e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4150:	d82b      	bhi.n	d41aa <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4152:	2801      	cmp	r0, #1
   d4154:	4b16      	ldr	r3, [pc, #88]	; (d41b0 <_Z12enableSensor6String+0x74>)
   d4156:	4e17      	ldr	r6, [pc, #92]	; (d41b4 <_Z12enableSensor6String+0x78>)
   d4158:	d108      	bne.n	d416c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d415a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d415c:	4916      	ldr	r1, [pc, #88]	; (d41b8 <_Z12enableSensor6String+0x7c>)
   d415e:	a802      	add	r0, sp, #8
   d4160:	f006 fe1c 	bl	dad9c <strcpy>
    sysStatusWriteNeeded = true;  
   d4164:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4166:	4620      	mov	r0, r4
   d4168:	b042      	add	sp, #264	; 0x108
   d416a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d416c:	2802      	cmp	r0, #2
   d416e:	f04f 0501 	mov.w	r5, #1
   d4172:	d107      	bne.n	d4184 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4174:	4911      	ldr	r1, [pc, #68]	; (d41bc <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4176:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	a802      	add	r0, sp, #8
   d417a:	f006 fe0f 	bl	dad9c <strcpy>
    return 1;      
   d417e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4180:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4182:	e7f0      	b.n	d4166 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4184:	2803      	cmp	r0, #3
   d4186:	d102      	bne.n	d418e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4188:	490d      	ldr	r1, [pc, #52]	; (d41c0 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d418a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d418c:	e7f4      	b.n	d4178 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d418e:	2804      	cmp	r0, #4
   d4190:	d102      	bne.n	d4198 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4192:	490c      	ldr	r1, [pc, #48]	; (d41c4 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4194:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4196:	e7ef      	b.n	d4178 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4198:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d419a:	bf0b      	itete	eq
   d419c:	490a      	ldreq	r1, [pc, #40]	; (d41c8 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d419e:	490b      	ldrne	r1, [pc, #44]	; (d41cc <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d41a0:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d41a4:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41a8:	e7e6      	b.n	d4178 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41aa:	2400      	movs	r4, #0
   d41ac:	e7db      	b.n	d4166 <_Z12enableSensor6String+0x2a>
   d41ae:	bf00      	nop
   d41b0:	2003e5b8 	.word	0x2003e5b8
   d41b4:	2003e5e8 	.word	0x2003e5e8
   d41b8:	000dcbd5 	.word	0x000dcbd5
   d41bc:	000dcbe8 	.word	0x000dcbe8
   d41c0:	000dcbfb 	.word	0x000dcbfb
   d41c4:	000dcc10 	.word	0x000dcc10
   d41c8:	000dcc24 	.word	0x000dcc24
   d41cc:	000dcc38 	.word	0x000dcc38

000d41d0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41d0:	6943      	ldr	r3, [r0, #20]
   d41d2:	b113      	cbz	r3, d41da <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41d4:	6983      	ldr	r3, [r0, #24]
   d41d6:	300c      	adds	r0, #12
   d41d8:	4718      	bx	r3
            callback();
        }
    }
   d41da:	4770      	bx	lr

000d41dc <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41dc:	b510      	push	{r4, lr}
   d41de:	4b03      	ldr	r3, [pc, #12]	; (d41ec <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41e0:	6003      	str	r3, [r0, #0]
   d41e2:	4604      	mov	r4, r0
   d41e4:	f003 f84e 	bl	d7284 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41e8:	4620      	mov	r0, r4
   d41ea:	bd10      	pop	{r4, pc}
   d41ec:	000dd4c4 	.word	0x000dd4c4

000d41f0 <_ZN17PublishQueueAsyncD0Ev>:
   d41f0:	b510      	push	{r4, lr}
   d41f2:	4604      	mov	r4, r0
   d41f4:	f7ff fff2 	bl	d41dc <_ZN17PublishQueueAsyncD1Ev>
   d41f8:	4620      	mov	r0, r4
   d41fa:	2138      	movs	r1, #56	; 0x38
   d41fc:	f005 fefb 	bl	d9ff6 <_ZdlPvj>
   d4200:	4620      	mov	r0, r4
   d4202:	bd10      	pop	{r4, pc}

000d4204 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4204:	b510      	push	{r4, lr}
   d4206:	4b03      	ldr	r3, [pc, #12]	; (d4214 <_ZN8MB85RC64D1Ev+0x10>)
   d4208:	6003      	str	r3, [r0, #0]
   d420a:	4604      	mov	r4, r0
   d420c:	f002 fa6a 	bl	d66e4 <_ZN6MB85RCD1Ev>
   d4210:	4620      	mov	r0, r4
   d4212:	bd10      	pop	{r4, pc}
   d4214:	000dd4ec 	.word	0x000dd4ec

000d4218 <_ZN8MB85RC64D0Ev>:
   d4218:	b510      	push	{r4, lr}
   d421a:	4604      	mov	r4, r0
   d421c:	f7ff fff2 	bl	d4204 <_ZN8MB85RC64D1Ev>
   d4220:	4620      	mov	r0, r4
   d4222:	2110      	movs	r1, #16
   d4224:	f005 fee7 	bl	d9ff6 <_ZdlPvj>
   d4228:	4620      	mov	r0, r4
   d422a:	bd10      	pop	{r4, pc}

000d422c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d422c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d422e:	2100      	movs	r1, #0
   d4230:	4604      	mov	r4, r0
   d4232:	4608      	mov	r0, r1
   d4234:	f003 fe12 	bl	d7e5c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4238:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d423a:	4620      	mov	r0, r4
   d423c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d423e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4240:	f003 fe24 	bl	d7e8c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4244:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4246:	b10c      	cbz	r4, d424c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4248:	2301      	movs	r3, #1
   d424a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d424c:	2100      	movs	r1, #0
   d424e:	2001      	movs	r0, #1
   d4250:	f003 fe04 	bl	d7e5c <os_thread_scheduling>
            }
        }
        if (t) {
   d4254:	b12c      	cbz	r4, d4262 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4256:	6823      	ldr	r3, [r4, #0]
   d4258:	4620      	mov	r0, r4
   d425a:	689b      	ldr	r3, [r3, #8]
   d425c:	4798      	blx	r3
            t->running = false;
   d425e:	2300      	movs	r3, #0
   d4260:	7123      	strb	r3, [r4, #4]
        }
    }
   d4262:	b002      	add	sp, #8
   d4264:	bd10      	pop	{r4, pc}

000d4266 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4266:	b510      	push	{r4, lr}
   d4268:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d426a:	6800      	ldr	r0, [r0, #0]
   d426c:	b108      	cbz	r0, d4272 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d426e:	f004 f923 	bl	d84b8 <free>
class SystemClass {
   d4272:	4620      	mov	r0, r4
   d4274:	bd10      	pop	{r4, pc}

000d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4276:	2300      	movs	r3, #0
   d4278:	2204      	movs	r2, #4
   d427a:	f004 b84d 	b.w	d8318 <spark_variable>

000d427e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d427e:	b510      	push	{r4, lr}
      if (_M_manager)
   d4280:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4282:	4604      	mov	r4, r0
      if (_M_manager)
   d4284:	b113      	cbz	r3, d428c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4286:	2203      	movs	r2, #3
   d4288:	4601      	mov	r1, r0
   d428a:	4798      	blx	r3
    }
   d428c:	4620      	mov	r0, r4
   d428e:	bd10      	pop	{r4, pc}

000d4290 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4292:	4b13      	ldr	r3, [pc, #76]	; (d42e0 <_ZN5TimerD1Ev+0x50>)
   d4294:	6003      	str	r3, [r0, #0]
   d4296:	4604      	mov	r4, r0
        if (handle) {
   d4298:	6880      	ldr	r0, [r0, #8]
   d429a:	b1c8      	cbz	r0, d42d0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d429c:	2500      	movs	r5, #0
   d429e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42a2:	e9cd 3500 	strd	r3, r5, [sp]
   d42a6:	2102      	movs	r1, #2
   d42a8:	462b      	mov	r3, r5
   d42aa:	462a      	mov	r2, r5
   d42ac:	f003 fdf6 	bl	d7e9c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42b0:	68a0      	ldr	r0, [r4, #8]
   d42b2:	4629      	mov	r1, r5
   d42b4:	f003 fe2a 	bl	d7f0c <os_timer_set_id>
            while (running) {
   d42b8:	7923      	ldrb	r3, [r4, #4]
   d42ba:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42be:	b113      	cbz	r3, d42c6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42c0:	f003 fdc4 	bl	d7e4c <os_thread_yield>
            while (running) {
   d42c4:	e7f8      	b.n	d42b8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42c6:	68a0      	ldr	r0, [r4, #8]
   d42c8:	4629      	mov	r1, r5
   d42ca:	f003 fdd7 	bl	d7e7c <os_timer_destroy>
            handle = nullptr;
   d42ce:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42d0:	f104 000c 	add.w	r0, r4, #12
   d42d4:	f7ff ffd3 	bl	d427e <_ZNSt14_Function_baseD1Ev>
    }
   d42d8:	4620      	mov	r0, r4
   d42da:	b003      	add	sp, #12
   d42dc:	bd30      	pop	{r4, r5, pc}
   d42de:	bf00      	nop
   d42e0:	000dd4b0 	.word	0x000dd4b0

000d42e4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d42e4:	b510      	push	{r4, lr}
   d42e6:	4604      	mov	r4, r0
    }
   d42e8:	f7ff ffd2 	bl	d4290 <_ZN5TimerD1Ev>
   d42ec:	4620      	mov	r0, r4
   d42ee:	211c      	movs	r1, #28
   d42f0:	f005 fe81 	bl	d9ff6 <_ZdlPvj>
   d42f4:	4620      	mov	r0, r4
   d42f6:	bd10      	pop	{r4, pc}

000d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d42f8:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d42fa:	4801      	ldr	r0, [pc, #4]	; (d4300 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d42fc:	f004 b9e1 	b.w	d86c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4300:	000d867b 	.word	0x000d867b

000d4304 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4304:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4306:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4308:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d430a:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d430e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4312:	2201      	movs	r2, #1
   d4314:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4316:	4341      	muls	r1, r0
   d4318:	466a      	mov	r2, sp
   d431a:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d431c:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4320:	f004 f852 	bl	d83c8 <spark_set_connection_property>
    }
   d4324:	b003      	add	sp, #12
   d4326:	f85d fb04 	ldr.w	pc, [sp], #4

000d432a <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d432a:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d432c:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d432e:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4330:	2100      	movs	r1, #0
   d4332:	b140      	cbz	r0, d4346 <_ZN5Timer12changePeriodEjj+0x1c>
   d4334:	e9cd 2100 	strd	r2, r1, [sp]
   d4338:	460a      	mov	r2, r1
   d433a:	2103      	movs	r1, #3
   d433c:	f003 fdae 	bl	d7e9c <os_timer_change>
   d4340:	fab0 f080 	clz	r0, r0
   d4344:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4346:	b003      	add	sp, #12
   d4348:	f85d fb04 	ldr.w	pc, [sp], #4

000d434c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d434c:	b40e      	push	{r1, r2, r3}
   d434e:	b510      	push	{r4, lr}
   d4350:	b08d      	sub	sp, #52	; 0x34
   d4352:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4354:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4356:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d435a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d435c:	2300      	movs	r3, #0
   d435e:	2020      	movs	r0, #32
   d4360:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4364:	e9cd 4200 	strd	r4, r2, [sp]
   d4368:	201e      	movs	r0, #30
   d436a:	aa04      	add	r2, sp, #16
   d436c:	f003 ff6e 	bl	d824c <log_message_v>
}
   d4370:	b00d      	add	sp, #52	; 0x34
   d4372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4376:	b003      	add	sp, #12
   d4378:	4770      	bx	lr

000d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d437a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d437c:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d437e:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4382:	f88d 3000 	strb.w	r3, [sp]
   d4386:	f88d 5004 	strb.w	r5, [sp, #4]
   d438a:	68e4      	ldr	r4, [r4, #12]
   d438c:	233c      	movs	r3, #60	; 0x3c
   d438e:	47a0      	blx	r4
	}
   d4390:	b003      	add	sp, #12
   d4392:	bd30      	pop	{r4, r5, pc}

000d4394 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4394:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4396:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4398:	b092      	sub	sp, #72	; 0x48
   d439a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d439c:	b97b      	cbnz	r3, d43be <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d439e:	4919      	ldr	r1, [pc, #100]	; (d4404 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d43a0:	a802      	add	r0, sp, #8
   d43a2:	f006 fcfb 	bl	dad9c <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d43a6:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d43a8:	f88d 3000 	strb.w	r3, [sp]
   d43ac:	4b16      	ldr	r3, [pc, #88]	; (d4408 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d43ae:	4917      	ldr	r1, [pc, #92]	; (d440c <_Z14UbidotsHandlerPKcS0_+0x78>)
   d43b0:	781b      	ldrb	r3, [r3, #0]
   d43b2:	4817      	ldr	r0, [pc, #92]	; (d4410 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43b4:	aa02      	add	r2, sp, #8
   d43b6:	f7ff ffe0 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d43ba:	b012      	add	sp, #72	; 0x48
   d43bc:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43be:	4608      	mov	r0, r1
   d43c0:	f006 fc69 	bl	dac96 <atoi>
   d43c4:	28c8      	cmp	r0, #200	; 0xc8
   d43c6:	d10e      	bne.n	d43e6 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d43c8:	4912      	ldr	r1, [pc, #72]	; (d4414 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43ca:	a802      	add	r0, sp, #8
   d43cc:	f006 fce6 	bl	dad9c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d43d0:	f005 fb2f 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d43d4:	4b10      	ldr	r3, [pc, #64]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43d6:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d43d8:	4b10      	ldr	r3, [pc, #64]	; (d441c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43da:	2201      	movs	r2, #1
   d43dc:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d43de:	4b10      	ldr	r3, [pc, #64]	; (d4420 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43e0:	2200      	movs	r2, #0
   d43e2:	701a      	strb	r2, [r3, #0]
   d43e4:	e7df      	b.n	d43a6 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43e6:	4620      	mov	r0, r4
   d43e8:	f006 fc55 	bl	dac96 <atoi>
   d43ec:	28c9      	cmp	r0, #201	; 0xc9
   d43ee:	d0eb      	beq.n	d43c8 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d43f0:	4620      	mov	r0, r4
   d43f2:	f006 fc50 	bl	dac96 <atoi>
   d43f6:	4a0b      	ldr	r2, [pc, #44]	; (d4424 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43f8:	4603      	mov	r3, r0
   d43fa:	2140      	movs	r1, #64	; 0x40
   d43fc:	a802      	add	r0, sp, #8
   d43fe:	f004 f873 	bl	d84e8 <snprintf>
   d4402:	e7d0      	b.n	d43a6 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4404:	000dcc4b 	.word	0x000dcc4b
   d4408:	2003db05 	.word	0x2003db05
   d440c:	000dcc82 	.word	0x000dcc82
   d4410:	2003e3f8 	.word	0x2003e3f8
   d4414:	000dcc53 	.word	0x000dcc53
   d4418:	2003e5b8 	.word	0x2003e5b8
   d441c:	2003e5e8 	.word	0x2003e5e8
   d4420:	2003db27 	.word	0x2003db27
   d4424:	000dcc65 	.word	0x000dcc65

000d4428 <_Z16setThirdPartySim6String>:
{
   d4428:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d442a:	491c      	ldr	r1, [pc, #112]	; (d449c <_Z16setThirdPartySim6String+0x74>)
   d442c:	4605      	mov	r5, r0
   d442e:	f005 f928 	bl	d9682 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4432:	4604      	mov	r4, r0
   d4434:	b300      	cbz	r0, d4478 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d4436:	4c1a      	ldr	r4, [pc, #104]	; (d44a0 <_Z16setThirdPartySim6String+0x78>)
   d4438:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d443a:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d443c:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d443e:	f7ff ff61 	bl	d4304 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4442:	6863      	ldr	r3, [r4, #4]
   d4444:	4817      	ldr	r0, [pc, #92]	; (d44a4 <_Z16setThirdPartySim6String+0x7c>)
   d4446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d444a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d444e:	4359      	muls	r1, r3
   d4450:	f7ff ff6b 	bl	d432a <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4454:	f003 ff80 	bl	d8358 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4458:	b148      	cbz	r0, d446e <_Z16setThirdPartySim6String+0x46>
   d445a:	2300      	movs	r3, #0
   d445c:	f88d 3000 	strb.w	r3, [sp]
   d4460:	4b11      	ldr	r3, [pc, #68]	; (d44a8 <_Z16setThirdPartySim6String+0x80>)
   d4462:	4a12      	ldr	r2, [pc, #72]	; (d44ac <_Z16setThirdPartySim6String+0x84>)
   d4464:	781b      	ldrb	r3, [r3, #0]
   d4466:	4912      	ldr	r1, [pc, #72]	; (d44b0 <_Z16setThirdPartySim6String+0x88>)
   d4468:	4812      	ldr	r0, [pc, #72]	; (d44b4 <_Z16setThirdPartySim6String+0x8c>)
   d446a:	f7ff ff86 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d446e:	4b12      	ldr	r3, [pc, #72]	; (d44b8 <_Z16setThirdPartySim6String+0x90>)
   d4470:	2001      	movs	r0, #1
   d4472:	7018      	strb	r0, [r3, #0]
}
   d4474:	b003      	add	sp, #12
   d4476:	bd30      	pop	{r4, r5, pc}
   d4478:	4910      	ldr	r1, [pc, #64]	; (d44bc <_Z16setThirdPartySim6String+0x94>)
   d447a:	4628      	mov	r0, r5
   d447c:	f005 f901 	bl	d9682 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4480:	2800      	cmp	r0, #0
   d4482:	d0f7      	beq.n	d4474 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4484:	4b06      	ldr	r3, [pc, #24]	; (d44a0 <_Z16setThirdPartySim6String+0x78>)
   d4486:	705c      	strb	r4, [r3, #1]
   d4488:	f003 ff66 	bl	d8358 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d448c:	2800      	cmp	r0, #0
   d448e:	d0ee      	beq.n	d446e <_Z16setThirdPartySim6String+0x46>
   d4490:	4b05      	ldr	r3, [pc, #20]	; (d44a8 <_Z16setThirdPartySim6String+0x80>)
   d4492:	f88d 4000 	strb.w	r4, [sp]
   d4496:	781b      	ldrb	r3, [r3, #0]
   d4498:	4a09      	ldr	r2, [pc, #36]	; (d44c0 <_Z16setThirdPartySim6String+0x98>)
   d449a:	e7e4      	b.n	d4466 <_Z16setThirdPartySim6String+0x3e>
   d449c:	000dcbd3 	.word	0x000dcbd3
   d44a0:	2003e5b8 	.word	0x2003e5b8
   d44a4:	2003e3d8 	.word	0x2003e3d8
   d44a8:	2003db05 	.word	0x2003db05
   d44ac:	000dcc8f 	.word	0x000dcc8f
   d44b0:	000dcd21 	.word	0x000dcd21
   d44b4:	2003e3f8 	.word	0x2003e3f8
   d44b8:	2003e5e8 	.word	0x2003e5e8
   d44bc:	000dcca4 	.word	0x000dcca4
   d44c0:	000dcca6 	.word	0x000dcca6

000d44c4 <_Z12setKeepAlive6String>:
{
   d44c4:	b510      	push	{r4, lr}
   d44c6:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44c8:	6800      	ldr	r0, [r0, #0]
   d44ca:	220a      	movs	r2, #10
   d44cc:	a903      	add	r1, sp, #12
   d44ce:	f007 fb63 	bl	dbb98 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44d2:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44d6:	d822      	bhi.n	d451e <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d44d8:	4c12      	ldr	r4, [pc, #72]	; (d4524 <_Z12setKeepAlive6String+0x60>)
   d44da:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44dc:	f7ff ff12 	bl	d4304 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44e0:	6863      	ldr	r3, [r4, #4]
   d44e2:	4811      	ldr	r0, [pc, #68]	; (d4528 <_Z12setKeepAlive6String+0x64>)
   d44e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44e8:	4359      	muls	r1, r3
   d44ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44ee:	f7ff ff1c 	bl	d432a <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44f2:	6863      	ldr	r3, [r4, #4]
   d44f4:	4a0d      	ldr	r2, [pc, #52]	; (d452c <_Z12setKeepAlive6String+0x68>)
   d44f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44fa:	a804      	add	r0, sp, #16
   d44fc:	f003 fff4 	bl	d84e8 <snprintf>
   d4500:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d4502:	f88d 3000 	strb.w	r3, [sp]
   d4506:	4b0a      	ldr	r3, [pc, #40]	; (d4530 <_Z12setKeepAlive6String+0x6c>)
   d4508:	490a      	ldr	r1, [pc, #40]	; (d4534 <_Z12setKeepAlive6String+0x70>)
   d450a:	781b      	ldrb	r3, [r3, #0]
   d450c:	480a      	ldr	r0, [pc, #40]	; (d4538 <_Z12setKeepAlive6String+0x74>)
   d450e:	aa04      	add	r2, sp, #16
   d4510:	f7ff ff33 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4514:	4b09      	ldr	r3, [pc, #36]	; (d453c <_Z12setKeepAlive6String+0x78>)
   d4516:	2001      	movs	r0, #1
   d4518:	7018      	strb	r0, [r3, #0]
}
   d451a:	b044      	add	sp, #272	; 0x110
   d451c:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d451e:	2000      	movs	r0, #0
   d4520:	e7fb      	b.n	d451a <_Z12setKeepAlive6String+0x56>
   d4522:	bf00      	nop
   d4524:	2003e5b8 	.word	0x2003e5b8
   d4528:	2003e3d8 	.word	0x2003e3d8
   d452c:	000dccba 	.word	0x000dccba
   d4530:	2003db05 	.word	0x2003db05
   d4534:	000dccd3 	.word	0x000dccd3
   d4538:	2003e3f8 	.word	0x2003e3f8
   d453c:	2003e5e8 	.word	0x2003e5e8

000d4540 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d4540:	b500      	push	{lr}
   d4542:	b089      	sub	sp, #36	; 0x24
   d4544:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d4546:	f005 f8af 	bl	d96a8 <_ZNK6String7toFloatEv>
   d454a:	4b0e      	ldr	r3, [pc, #56]	; (d4584 <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d454c:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d454e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4552:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d4554:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4558:	f005 f84a 	bl	d95f0 <_ZN6StringC1ERKS_>
   d455c:	2300      	movs	r3, #0
   d455e:	f88d 3000 	strb.w	r3, [sp]
   d4562:	4b09      	ldr	r3, [pc, #36]	; (d4588 <_Z20setReportingDuration6String+0x48>)
   d4564:	9a04      	ldr	r2, [sp, #16]
   d4566:	781b      	ldrb	r3, [r3, #0]
   d4568:	4908      	ldr	r1, [pc, #32]	; (d458c <_Z20setReportingDuration6String+0x4c>)
   d456a:	4809      	ldr	r0, [pc, #36]	; (d4590 <_Z20setReportingDuration6String+0x50>)
   d456c:	f7ff ff05 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4570:	a804      	add	r0, sp, #16
   d4572:	f004 ffcf 	bl	d9514 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d4576:	4b07      	ldr	r3, [pc, #28]	; (d4594 <_Z20setReportingDuration6String+0x54>)
   d4578:	2001      	movs	r0, #1
   d457a:	7018      	strb	r0, [r3, #0]
}
   d457c:	b009      	add	sp, #36	; 0x24
   d457e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4582:	bf00      	nop
   d4584:	2003e5b8 	.word	0x2003e5b8
   d4588:	2003db05 	.word	0x2003db05
   d458c:	000dccde 	.word	0x000dccde
   d4590:	2003e3f8 	.word	0x2003e3f8
   d4594:	2003e5e8 	.word	0x2003e5e8

000d4598 <_Z14setVerboseMode6String>:
{
   d4598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d459a:	4916      	ldr	r1, [pc, #88]	; (d45f4 <_Z14setVerboseMode6String+0x5c>)
   d459c:	4605      	mov	r5, r0
   d459e:	f005 f870 	bl	d9682 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45a2:	4604      	mov	r4, r0
   d45a4:	b188      	cbz	r0, d45ca <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d45a6:	4b14      	ldr	r3, [pc, #80]	; (d45f8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45a8:	4a14      	ldr	r2, [pc, #80]	; (d45fc <_Z14setVerboseMode6String+0x64>)
   d45aa:	4915      	ldr	r1, [pc, #84]	; (d4600 <_Z14setVerboseMode6String+0x68>)
   d45ac:	4815      	ldr	r0, [pc, #84]	; (d4604 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d45ae:	2401      	movs	r4, #1
   d45b0:	725c      	strb	r4, [r3, #9]
   d45b2:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45b4:	f88d 3000 	strb.w	r3, [sp]
   d45b8:	4b13      	ldr	r3, [pc, #76]	; (d4608 <_Z14setVerboseMode6String+0x70>)
   d45ba:	781b      	ldrb	r3, [r3, #0]
   d45bc:	f7ff fedd 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45c0:	4b12      	ldr	r3, [pc, #72]	; (d460c <_Z14setVerboseMode6String+0x74>)
    return 1;
   d45c2:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d45c4:	701c      	strb	r4, [r3, #0]
}
   d45c6:	b003      	add	sp, #12
   d45c8:	bd30      	pop	{r4, r5, pc}
   d45ca:	4911      	ldr	r1, [pc, #68]	; (d4610 <_Z14setVerboseMode6String+0x78>)
   d45cc:	4628      	mov	r0, r5
   d45ce:	f005 f858 	bl	d9682 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45d2:	2800      	cmp	r0, #0
   d45d4:	d0f7      	beq.n	d45c6 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d45d6:	4b08      	ldr	r3, [pc, #32]	; (d45f8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45d8:	4a0e      	ldr	r2, [pc, #56]	; (d4614 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d45da:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45dc:	4b0a      	ldr	r3, [pc, #40]	; (d4608 <_Z14setVerboseMode6String+0x70>)
   d45de:	f88d 4000 	strb.w	r4, [sp]
   d45e2:	781b      	ldrb	r3, [r3, #0]
   d45e4:	4906      	ldr	r1, [pc, #24]	; (d4600 <_Z14setVerboseMode6String+0x68>)
   d45e6:	4807      	ldr	r0, [pc, #28]	; (d4604 <_Z14setVerboseMode6String+0x6c>)
   d45e8:	f7ff fec7 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45ec:	4b07      	ldr	r3, [pc, #28]	; (d460c <_Z14setVerboseMode6String+0x74>)
   d45ee:	2001      	movs	r0, #1
   d45f0:	7018      	strb	r0, [r3, #0]
    return 1;
   d45f2:	e7e8      	b.n	d45c6 <_Z14setVerboseMode6String+0x2e>
   d45f4:	000dcbd3 	.word	0x000dcbd3
   d45f8:	2003e5b8 	.word	0x2003e5b8
   d45fc:	000dcd00 	.word	0x000dcd00
   d4600:	000dcd21 	.word	0x000dcd21
   d4604:	2003e3f8 	.word	0x2003e3f8
   d4608:	2003db05 	.word	0x2003db05
   d460c:	2003e5e8 	.word	0x2003e5e8
   d4610:	000dcca4 	.word	0x000dcca4
   d4614:	000dcd11 	.word	0x000dcd11

000d4618 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d4618:	b5f0      	push	{r4, r5, r6, r7, lr}
   d461a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d461c:	6800      	ldr	r0, [r0, #0]
   d461e:	220a      	movs	r2, #10
   d4620:	a903      	add	r1, sp, #12
   d4622:	f007 fab9 	bl	dbb98 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4626:	1e43      	subs	r3, r0, #1
   d4628:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d462a:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d462c:	f04f 0500 	mov.w	r5, #0
   d4630:	d839      	bhi.n	d46a6 <_Z13disableSensor6String+0x8e>
 
  if (tempSensor == 1){
   d4632:	2801      	cmp	r0, #1
   d4634:	4b1d      	ldr	r3, [pc, #116]	; (d46ac <_Z13disableSensor6String+0x94>)
   d4636:	4f1e      	ldr	r7, [pc, #120]	; (d46b0 <_Z13disableSensor6String+0x98>)
   d4638:	4e1e      	ldr	r6, [pc, #120]	; (d46b4 <_Z13disableSensor6String+0x9c>)
   d463a:	d110      	bne.n	d465e <_Z13disableSensor6String+0x46>
    sysStatus.sensorOneConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d463c:	491e      	ldr	r1, [pc, #120]	; (d46b8 <_Z13disableSensor6String+0xa0>)
    sysStatus.sensorOneConnected = false;
   d463e:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4640:	a804      	add	r0, sp, #16
   d4642:	f006 fbab 	bl	dad9c <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d4646:	783b      	ldrb	r3, [r7, #0]
   d4648:	491c      	ldr	r1, [pc, #112]	; (d46bc <_Z13disableSensor6String+0xa4>)
   d464a:	481d      	ldr	r0, [pc, #116]	; (d46c0 <_Z13disableSensor6String+0xa8>)
   d464c:	f88d 5000 	strb.w	r5, [sp]
   d4650:	aa04      	add	r2, sp, #16
   d4652:	f7ff fe92 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
   d4656:	7034      	strb	r4, [r6, #0]
    return 1;      
  }
}
   d4658:	4620      	mov	r0, r4
   d465a:	b045      	add	sp, #276	; 0x114
   d465c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (tempSensor == 2){
   d465e:	2802      	cmp	r0, #2
   d4660:	d10e      	bne.n	d4680 <_Z13disableSensor6String+0x68>
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d4662:	4918      	ldr	r1, [pc, #96]	; (d46c4 <_Z13disableSensor6String+0xac>)
    sysStatus.sensorTwoConnected = false;
   d4664:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4666:	a804      	add	r0, sp, #16
   d4668:	f006 fb98 	bl	dad9c <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d466c:	783b      	ldrb	r3, [r7, #0]
   d466e:	4913      	ldr	r1, [pc, #76]	; (d46bc <_Z13disableSensor6String+0xa4>)
   d4670:	4813      	ldr	r0, [pc, #76]	; (d46c0 <_Z13disableSensor6String+0xa8>)
   d4672:	f88d 5000 	strb.w	r5, [sp]
   d4676:	aa04      	add	r2, sp, #16
   d4678:	f7ff fe7f 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d467c:	2401      	movs	r4, #1
   d467e:	e7ea      	b.n	d4656 <_Z13disableSensor6String+0x3e>
  else if (tempSensor == 3){
   d4680:	2803      	cmp	r0, #3
   d4682:	d102      	bne.n	d468a <_Z13disableSensor6String+0x72>
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d4684:	4910      	ldr	r1, [pc, #64]	; (d46c8 <_Z13disableSensor6String+0xb0>)
    sysStatus.sensorThreeConnected = false;
   d4686:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d4688:	e7ed      	b.n	d4666 <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 4){
   d468a:	2804      	cmp	r0, #4
   d468c:	d102      	bne.n	d4694 <_Z13disableSensor6String+0x7c>
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d468e:	490f      	ldr	r1, [pc, #60]	; (d46cc <_Z13disableSensor6String+0xb4>)
    sysStatus.sensorFourConnected = false;
   d4690:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d4692:	e7e8      	b.n	d4666 <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 5){
   d4694:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d4696:	bf0b      	itete	eq
   d4698:	490d      	ldreq	r1, [pc, #52]	; (d46d0 <_Z13disableSensor6String+0xb8>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d469a:	490e      	ldrne	r1, [pc, #56]	; (d46d4 <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorFiveConnected = false;
   d469c:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = false;
   d46a0:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46a4:	e7df      	b.n	d4666 <_Z13disableSensor6String+0x4e>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d46a6:	462c      	mov	r4, r5
   d46a8:	e7d6      	b.n	d4658 <_Z13disableSensor6String+0x40>
   d46aa:	bf00      	nop
   d46ac:	2003e5b8 	.word	0x2003e5b8
   d46b0:	2003db05 	.word	0x2003db05
   d46b4:	2003e5e8 	.word	0x2003e5e8
   d46b8:	000dcd26 	.word	0x000dcd26
   d46bc:	000dcd3a 	.word	0x000dcd3a
   d46c0:	2003e3f8 	.word	0x2003e3f8
   d46c4:	000dcd48 	.word	0x000dcd48
   d46c8:	000dcd5c 	.word	0x000dcd5c
   d46cc:	000dcd72 	.word	0x000dcd72
   d46d0:	000dcd87 	.word	0x000dcd87
   d46d4:	000dcd9c 	.word	0x000dcd9c

000d46d8 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d46d8:	b500      	push	{lr}
   d46da:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d46dc:	6800      	ldr	r0, [r0, #0]
   d46de:	220a      	movs	r2, #10
   d46e0:	a903      	add	r1, sp, #12
   d46e2:	f007 fa59 	bl	dbb98 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46e6:	2804      	cmp	r0, #4
   d46e8:	d818      	bhi.n	d471c <_Z16setOperatingMode6String+0x44>
  else{
    sysStatus.operatingMode = tempSensor;
   d46ea:	4b0d      	ldr	r3, [pc, #52]	; (d4720 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46ec:	4a0d      	ldr	r2, [pc, #52]	; (d4724 <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d46ee:	6298      	str	r0, [r3, #40]	; 0x28
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46f0:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46f4:	4603      	mov	r3, r0
   d46f6:	a804      	add	r0, sp, #16
   d46f8:	f003 fef6 	bl	d84e8 <snprintf>
   d46fc:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d46fe:	f88d 3000 	strb.w	r3, [sp]
   d4702:	4b09      	ldr	r3, [pc, #36]	; (d4728 <_Z16setOperatingMode6String+0x50>)
   d4704:	4909      	ldr	r1, [pc, #36]	; (d472c <_Z16setOperatingMode6String+0x54>)
   d4706:	781b      	ldrb	r3, [r3, #0]
   d4708:	4809      	ldr	r0, [pc, #36]	; (d4730 <_Z16setOperatingMode6String+0x58>)
   d470a:	aa04      	add	r2, sp, #16
   d470c:	f7ff fe35 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4710:	4b08      	ldr	r3, [pc, #32]	; (d4734 <_Z16setOperatingMode6String+0x5c>)
   d4712:	2001      	movs	r0, #1
   d4714:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d4716:	b045      	add	sp, #276	; 0x114
   d4718:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d471c:	2000      	movs	r0, #0
   d471e:	e7fa      	b.n	d4716 <_Z16setOperatingMode6String+0x3e>
   d4720:	2003e5b8 	.word	0x2003e5b8
   d4724:	000dcdb0 	.word	0x000dcdb0
   d4728:	2003db05 	.word	0x2003db05
   d472c:	000dcd21 	.word	0x000dcd21
   d4730:	2003e3f8 	.word	0x2003e3f8
   d4734:	2003e5e8 	.word	0x2003e5e8

000d4738 <_Z11resetSystem6String>:

}

int resetSystem(String Command)

{
   d4738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d473a:	220a      	movs	r2, #10
   d473c:	6800      	ldr	r0, [r0, #0]
   d473e:	a903      	add	r1, sp, #12
   d4740:	f007 fa2a 	bl	dbb98 <strtol>
    if (command == 1) {
   d4744:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4746:	4604      	mov	r4, r0
    if (command == 1) {
   d4748:	f04f 0300 	mov.w	r3, #0
   d474c:	d111      	bne.n	d4772 <_Z11resetSystem6String+0x3a>
      publishQueue.publish("Reset","Device Reset Success",PRIVATE);
   d474e:	f88d 3000 	strb.w	r3, [sp]
   d4752:	4b09      	ldr	r3, [pc, #36]	; (d4778 <_Z11resetSystem6String+0x40>)
   d4754:	4a09      	ldr	r2, [pc, #36]	; (d477c <_Z11resetSystem6String+0x44>)
   d4756:	781b      	ldrb	r3, [r3, #0]
   d4758:	4909      	ldr	r1, [pc, #36]	; (d4780 <_Z11resetSystem6String+0x48>)
   d475a:	480a      	ldr	r0, [pc, #40]	; (d4784 <_Z11resetSystem6String+0x4c>)
   d475c:	f7ff fe0d 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(5000);
   d4760:	f241 3088 	movw	r0, #5000	; 0x1388
   d4764:	f003 ff10 	bl	d8588 <delay>
      System.reset();
   d4768:	f004 ffe8 	bl	d973c <_ZN11SystemClass5resetEv>
      return 1;
      }
    else return 0;  
  }
   d476c:	4620      	mov	r0, r4
   d476e:	b004      	add	sp, #16
   d4770:	bd10      	pop	{r4, pc}
    else return 0;  
   d4772:	461c      	mov	r4, r3
   d4774:	e7fa      	b.n	d476c <_Z11resetSystem6String+0x34>
   d4776:	bf00      	nop
   d4778:	2003db05 	.word	0x2003db05
   d477c:	000dcdc2 	.word	0x000dcdc2
   d4780:	000dd2cb 	.word	0x000dd2cb
   d4784:	2003e3f8 	.word	0x2003e3f8

000d4788 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4788:	b507      	push	{r0, r1, r2, lr}
   d478a:	f003 fde5 	bl	d8358 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d478e:	b148      	cbz	r0, d47a4 <_Z18loadSystemDefaultsv+0x1c>
   d4790:	2300      	movs	r3, #0
   d4792:	f88d 3000 	strb.w	r3, [sp]
   d4796:	4b0f      	ldr	r3, [pc, #60]	; (d47d4 <_Z18loadSystemDefaultsv+0x4c>)
   d4798:	4a0f      	ldr	r2, [pc, #60]	; (d47d8 <_Z18loadSystemDefaultsv+0x50>)
   d479a:	781b      	ldrb	r3, [r3, #0]
   d479c:	490f      	ldr	r1, [pc, #60]	; (d47dc <_Z18loadSystemDefaultsv+0x54>)
   d479e:	4810      	ldr	r0, [pc, #64]	; (d47e0 <_Z18loadSystemDefaultsv+0x58>)
   d47a0:	f7ff fdeb 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d47a4:	4a0f      	ldr	r2, [pc, #60]	; (d47e4 <_Z18loadSystemDefaultsv+0x5c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d47a6:	4810      	ldr	r0, [pc, #64]	; (d47e8 <_Z18loadSystemDefaultsv+0x60>)
   d47a8:	2378      	movs	r3, #120	; 0x78
   d47aa:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d47ac:	f240 1301 	movw	r3, #257	; 0x101
   d47b0:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d47b2:	2300      	movs	r3, #0
  sysStatus.operatingMode = 1;
   d47b4:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d47b6:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d47b8:	7293      	strb	r3, [r2, #10]
  sysStatus.operatingMode = 1;
   d47ba:	f44f 7316 	mov.w	r3, #600	; 0x258
   d47be:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   d47c2:	2330      	movs	r3, #48	; 0x30
  sysStatus.sensorOneConnected = 1;
   d47c4:	7711      	strb	r1, [r2, #28]
  sysStatus.sensorFiveConnected=1;
   d47c6:	f882 1020 	strb.w	r1, [r2, #32]
}
   d47ca:	b003      	add	sp, #12
   d47cc:	f85d eb04 	ldr.w	lr, [sp], #4
   d47d0:	f002 b82b 	b.w	d682a <_ZN6MB85RC9writeDataEjPKhj>
   d47d4:	2003db05 	.word	0x2003db05
   d47d8:	000dcdd7 	.word	0x000dcdd7
   d47dc:	000dcd21 	.word	0x000dcd21
   d47e0:	2003e3f8 	.word	0x2003e3f8
   d47e4:	2003e5b8 	.word	0x2003e5b8
   d47e8:	2003e3c8 	.word	0x2003e3c8

000d47ec <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d47ec:	b507      	push	{r0, r1, r2, lr}
   d47ee:	f003 fdb3 	bl	d8358 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d47f2:	b148      	cbz	r0, d4808 <_Z20loadConstantDefaultsv+0x1c>
   d47f4:	2300      	movs	r3, #0
   d47f6:	f88d 3000 	strb.w	r3, [sp]
   d47fa:	4b0c      	ldr	r3, [pc, #48]	; (d482c <_Z20loadConstantDefaultsv+0x40>)
   d47fc:	4a0c      	ldr	r2, [pc, #48]	; (d4830 <_Z20loadConstantDefaultsv+0x44>)
   d47fe:	781b      	ldrb	r3, [r3, #0]
   d4800:	490c      	ldr	r1, [pc, #48]	; (d4834 <_Z20loadConstantDefaultsv+0x48>)
   d4802:	480d      	ldr	r0, [pc, #52]	; (d4838 <_Z20loadConstantDefaultsv+0x4c>)
   d4804:	f7ff fdb9 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d4808:	4a0c      	ldr	r2, [pc, #48]	; (d483c <_Z20loadConstantDefaultsv+0x50>)
   d480a:	4b0d      	ldr	r3, [pc, #52]	; (d4840 <_Z20loadConstantDefaultsv+0x54>)
  sensorConstants.sensorFiveConstant = 667;
   d480c:	490d      	ldr	r1, [pc, #52]	; (d4844 <_Z20loadConstantDefaultsv+0x58>)
   d480e:	480e      	ldr	r0, [pc, #56]	; (d4848 <_Z20loadConstantDefaultsv+0x5c>)
  sensorConstants.sensorOneConstant = 90.9;
   d4810:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d4812:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d4814:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d4816:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 667;
   d4818:	6111      	str	r1, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d481a:	6153      	str	r3, [r2, #20]
   d481c:	21a0      	movs	r1, #160	; 0xa0
   d481e:	2318      	movs	r3, #24
}
   d4820:	b003      	add	sp, #12
   d4822:	f85d eb04 	ldr.w	lr, [sp], #4
   d4826:	f002 b800 	b.w	d682a <_ZN6MB85RC9writeDataEjPKhj>
   d482a:	bf00      	nop
   d482c:	2003db05 	.word	0x2003db05
   d4830:	000dcdef 	.word	0x000dcdef
   d4834:	000dcd21 	.word	0x000dcd21
   d4838:	2003e3f8 	.word	0x2003e3f8
   d483c:	2003e450 	.word	0x2003e450
   d4840:	42b5cccd 	.word	0x42b5cccd
   d4844:	4426c000 	.word	0x4426c000
   d4848:	2003e3c8 	.word	0x2003e3c8

000d484c <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d484c:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d484e:	4c15      	ldr	r4, [pc, #84]	; (d48a4 <_Z17checkSystemValuesv+0x58>)
   d4850:	7a23      	ldrb	r3, [r4, #8]
   d4852:	2b01      	cmp	r3, #1
   d4854:	d904      	bls.n	d4860 <_Z17checkSystemValuesv+0x14>
   d4856:	f003 fd7f 	bl	d8358 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d485a:	b300      	cbz	r0, d489e <_Z17checkSystemValuesv+0x52>
   d485c:	2301      	movs	r3, #1
   d485e:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4860:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d4862:	4a11      	ldr	r2, [pc, #68]	; (d48a8 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4864:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4868:	bf84      	itt	hi
   d486a:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d486e:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d4870:	7a63      	ldrb	r3, [r4, #9]
   d4872:	2b01      	cmp	r3, #1
   d4874:	bf84      	itt	hi
   d4876:	2301      	movhi	r3, #1
   d4878:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d487a:	7aa3      	ldrb	r3, [r4, #10]
   d487c:	2b01      	cmp	r3, #1
   d487e:	bf84      	itt	hi
   d4880:	2300      	movhi	r3, #0
   d4882:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4884:	6963      	ldr	r3, [r4, #20]
   d4886:	2bff      	cmp	r3, #255	; 0xff
   d4888:	bf84      	itt	hi
   d488a:	2300      	movhi	r3, #0
   d488c:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d488e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4890:	2b05      	cmp	r3, #5
   d4892:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d4896:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4898:	bf88      	it	hi
   d489a:	62a3      	strhi	r3, [r4, #40]	; 0x28
}
   d489c:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d489e:	7220      	strb	r0, [r4, #8]
   d48a0:	e7de      	b.n	d4860 <_Z17checkSystemValuesv+0x14>
   d48a2:	bf00      	nop
   d48a4:	2003e5b8 	.word	0x2003e5b8
   d48a8:	2003e5e8 	.word	0x2003e5e8

000d48ac <_Z19checkConstantValuesv>:
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d48ac:	4b33      	ldr	r3, [pc, #204]	; (d497c <_Z19checkConstantValuesv+0xd0>)
   d48ae:	edd3 7a00 	vldr	s15, [r3]
   d48b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48ba:	d406      	bmi.n	d48ca <_Z19checkConstantValuesv+0x1e>
   d48bc:	ed9f 7a30 	vldr	s14, [pc, #192]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d48c0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48c8:	dd01      	ble.n	d48ce <_Z19checkConstantValuesv+0x22>
   d48ca:	4a2e      	ldr	r2, [pc, #184]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d48cc:	601a      	str	r2, [r3, #0]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d48ce:	edd3 7a01 	vldr	s15, [r3, #4]
   d48d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48da:	d406      	bmi.n	d48ea <_Z19checkConstantValuesv+0x3e>
   d48dc:	ed9f 7a28 	vldr	s14, [pc, #160]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d48e0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48e8:	dd01      	ble.n	d48ee <_Z19checkConstantValuesv+0x42>
   d48ea:	4a26      	ldr	r2, [pc, #152]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d48ec:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d48ee:	edd3 7a02 	vldr	s15, [r3, #8]
   d48f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48fa:	d406      	bmi.n	d490a <_Z19checkConstantValuesv+0x5e>
   d48fc:	ed9f 7a20 	vldr	s14, [pc, #128]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d4900:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4908:	dd01      	ble.n	d490e <_Z19checkConstantValuesv+0x62>
   d490a:	4a1e      	ldr	r2, [pc, #120]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d490c:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d490e:	edd3 7a03 	vldr	s15, [r3, #12]
   d4912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d491a:	d406      	bmi.n	d492a <_Z19checkConstantValuesv+0x7e>
   d491c:	ed9f 7a18 	vldr	s14, [pc, #96]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d4920:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4928:	dd01      	ble.n	d492e <_Z19checkConstantValuesv+0x82>
   d492a:	4a16      	ldr	r2, [pc, #88]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d492c:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorFiveConstant < 0.0  || sensorConstants.sensorFiveConstant > 3000.0) sensorConstants.sensorFiveConstant = 90.91;
   d492e:	edd3 7a04 	vldr	s15, [r3, #16]
   d4932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d493a:	d406      	bmi.n	d494a <_Z19checkConstantValuesv+0x9e>
   d493c:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d4940:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4948:	dd01      	ble.n	d494e <_Z19checkConstantValuesv+0xa2>
   d494a:	4a0e      	ldr	r2, [pc, #56]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d494c:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
   d494e:	edd3 7a05 	vldr	s15, [r3, #20]
   d4952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d495a:	d406      	bmi.n	d496a <_Z19checkConstantValuesv+0xbe>
   d495c:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4980 <_Z19checkConstantValuesv+0xd4>
   d4960:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4968:	dd01      	ble.n	d496e <_Z19checkConstantValuesv+0xc2>
   d496a:	4a06      	ldr	r2, [pc, #24]	; (d4984 <_Z19checkConstantValuesv+0xd8>)
   d496c:	615a      	str	r2, [r3, #20]
   d496e:	4a03      	ldr	r2, [pc, #12]	; (d497c <_Z19checkConstantValuesv+0xd0>)
   d4970:	4805      	ldr	r0, [pc, #20]	; (d4988 <_Z19checkConstantValuesv+0xdc>)
   d4972:	2318      	movs	r3, #24
   d4974:	21a0      	movs	r1, #160	; 0xa0
   d4976:	f001 bf58 	b.w	d682a <_ZN6MB85RC9writeDataEjPKhj>
   d497a:	bf00      	nop
   d497c:	2003e450 	.word	0x2003e450
   d4980:	453b8000 	.word	0x453b8000
   d4984:	42b5d1ec 	.word	0x42b5d1ec
   d4988:	2003e3c8 	.word	0x2003e3c8

000d498c <_Z11petWatchdogv>:
{
   d498c:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d498e:	2101      	movs	r1, #1
   d4990:	2005      	movs	r0, #5
   d4992:	f005 faba 	bl	d9f0a <digitalWrite>
  digitalWrite(donePin, LOW);
   d4996:	2100      	movs	r1, #0
   d4998:	2005      	movs	r0, #5
   d499a:	f005 fab6 	bl	d9f0a <digitalWrite>
  watchdogFlag = false;
   d499e:	4a09      	ldr	r2, [pc, #36]	; (d49c4 <_Z11petWatchdogv+0x38>)
   d49a0:	2300      	movs	r3, #0
   d49a2:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d49a4:	4a08      	ldr	r2, [pc, #32]	; (d49c8 <_Z11petWatchdogv+0x3c>)
   d49a6:	7a52      	ldrb	r2, [r2, #9]
   d49a8:	b142      	cbz	r2, d49bc <_Z11petWatchdogv+0x30>
   d49aa:	f88d 3000 	strb.w	r3, [sp]
   d49ae:	4b07      	ldr	r3, [pc, #28]	; (d49cc <_Z11petWatchdogv+0x40>)
   d49b0:	4a07      	ldr	r2, [pc, #28]	; (d49d0 <_Z11petWatchdogv+0x44>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	4907      	ldr	r1, [pc, #28]	; (d49d4 <_Z11petWatchdogv+0x48>)
   d49b6:	4808      	ldr	r0, [pc, #32]	; (d49d8 <_Z11petWatchdogv+0x4c>)
   d49b8:	f7ff fcdf 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d49bc:	b003      	add	sp, #12
   d49be:	f85d fb04 	ldr.w	pc, [sp], #4
   d49c2:	bf00      	nop
   d49c4:	2003e5e9 	.word	0x2003e5e9
   d49c8:	2003e5b8 	.word	0x2003e5b8
   d49cc:	2003db05 	.word	0x2003db05
   d49d0:	000dce0e 	.word	0x000dce0e
   d49d4:	000dce15 	.word	0x000dce15
   d49d8:	2003e3f8 	.word	0x2003e3f8

000d49dc <_Z22publishStateTransitionv>:
{
   d49dc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49de:	4d11      	ldr	r5, [pc, #68]	; (d4a24 <_Z22publishStateTransitionv+0x48>)
   d49e0:	4c11      	ldr	r4, [pc, #68]	; (d4a28 <_Z22publishStateTransitionv+0x4c>)
   d49e2:	4912      	ldr	r1, [pc, #72]	; (d4a2c <_Z22publishStateTransitionv+0x50>)
   d49e4:	782a      	ldrb	r2, [r5, #0]
   d49e6:	7820      	ldrb	r0, [r4, #0]
{
   d49e8:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49ea:	231a      	movs	r3, #26
   d49ec:	fb03 1202 	mla	r2, r3, r2, r1
   d49f0:	9200      	str	r2, [sp, #0]
   d49f2:	fb03 1300 	mla	r3, r3, r0, r1
   d49f6:	4a0e      	ldr	r2, [pc, #56]	; (d4a30 <_Z22publishStateTransitionv+0x54>)
   d49f8:	2128      	movs	r1, #40	; 0x28
   d49fa:	a802      	add	r0, sp, #8
   d49fc:	f003 fd74 	bl	d84e8 <snprintf>
  oldState = state;
   d4a00:	782b      	ldrb	r3, [r5, #0]
   d4a02:	7023      	strb	r3, [r4, #0]
   d4a04:	f003 fca8 	bl	d8358 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4a08:	b148      	cbz	r0, d4a1e <_Z22publishStateTransitionv+0x42>
   d4a0a:	2300      	movs	r3, #0
   d4a0c:	f88d 3000 	strb.w	r3, [sp]
   d4a10:	4b08      	ldr	r3, [pc, #32]	; (d4a34 <_Z22publishStateTransitionv+0x58>)
   d4a12:	4909      	ldr	r1, [pc, #36]	; (d4a38 <_Z22publishStateTransitionv+0x5c>)
   d4a14:	781b      	ldrb	r3, [r3, #0]
   d4a16:	4809      	ldr	r0, [pc, #36]	; (d4a3c <_Z22publishStateTransitionv+0x60>)
   d4a18:	aa02      	add	r2, sp, #8
   d4a1a:	f7ff fcae 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4a1e:	b00d      	add	sp, #52	; 0x34
   d4a20:	bd30      	pop	{r4, r5, pc}
   d4a22:	bf00      	nop
   d4a24:	2003e5b5 	.word	0x2003e5b5
   d4a28:	2003e3f4 	.word	0x2003e3f4
   d4a2c:	2003d808 	.word	0x2003d808
   d4a30:	000dce1e 	.word	0x000dce1e
   d4a34:	2003db05 	.word	0x2003db05
   d4a38:	000dce2c 	.word	0x000dce2c
   d4a3c:	2003e3f8 	.word	0x2003e3f8

000d4a40 <_Z17getBatteryContextv>:
{
   d4a40:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a42:	4d0d      	ldr	r5, [pc, #52]	; (d4a78 <_Z17getBatteryContextv+0x38>)
   d4a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4a46:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a48:	ac01      	add	r4, sp, #4
   d4a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a50:	4b0a      	ldr	r3, [pc, #40]	; (d4a7c <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a56:	7c1b      	ldrb	r3, [r3, #16]
   d4a58:	4809      	ldr	r0, [pc, #36]	; (d4a80 <_Z17getBatteryContextv+0x40>)
   d4a5a:	aa08      	add	r2, sp, #32
   d4a5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4a60:	2110      	movs	r1, #16
   d4a62:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4a66:	4a07      	ldr	r2, [pc, #28]	; (d4a84 <_Z17getBatteryContextv+0x44>)
   d4a68:	f003 fd3e 	bl	d84e8 <snprintf>
  sysStatusWriteNeeded = true;
   d4a6c:	4b06      	ldr	r3, [pc, #24]	; (d4a88 <_Z17getBatteryContextv+0x48>)
   d4a6e:	2201      	movs	r2, #1
   d4a70:	701a      	strb	r2, [r3, #0]
}
   d4a72:	b009      	add	sp, #36	; 0x24
   d4a74:	bd30      	pop	{r4, r5, pc}
   d4a76:	bf00      	nop
   d4a78:	000dd554 	.word	0x000dd554
   d4a7c:	2003e5b8 	.word	0x2003e5b8
   d4a80:	2003db06 	.word	0x2003db06
   d4a84:	000dd670 	.word	0x000dd670
   d4a88:	2003e5e8 	.word	0x2003e5e8

000d4a8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d4a90:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4a94:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4a98:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d4a9a:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4a9e:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d4aa0:	ebad 0d04 	sub.w	sp, sp, r4
   d4aa4:	ad02      	add	r5, sp, #8
   d4aa6:	46ac      	mov	ip, r5
   d4aa8:	f04f 0e00 	mov.w	lr, #0
   d4aac:	f84c eb04 	str.w	lr, [ip], #4
   d4ab0:	3802      	subs	r0, #2
   d4ab2:	2800      	cmp	r0, #0
   d4ab4:	da2a      	bge.n	d4b0c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4ab6:	f8df b068 	ldr.w	fp, [pc, #104]	; d4b20 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4aba:	f8df a068 	ldr.w	sl, [pc, #104]	; d4b24 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4abe:	460c      	mov	r4, r1
   d4ac0:	4690      	mov	r8, r2
   d4ac2:	461e      	mov	r6, r3
   d4ac4:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4ac6:	454d      	cmp	r5, r9
   d4ac8:	d024      	beq.n	d4b14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4aca:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4ace:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4ad2:	4658      	mov	r0, fp
   d4ad4:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4ad8:	f001 fa62 	bl	d5fa0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4adc:	ec51 0b10 	vmov	r0, r1, d0
   d4ae0:	f006 f842 	bl	dab68 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4ae4:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4ae8:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4aec:	f005 fd14 	bl	da518 <__aeabi_f2d>
   d4af0:	e9da 2300 	ldrd	r2, r3, [sl]
   d4af4:	f005 fd68 	bl	da5c8 <__aeabi_dmul>
   d4af8:	4b08      	ldr	r3, [pc, #32]	; (d4b1c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d4afa:	2200      	movs	r2, #0
   d4afc:	f005 fe8e 	bl	da81c <__aeabi_ddiv>
   d4b00:	f006 f832 	bl	dab68 <__aeabi_d2f>
   d4b04:	3410      	adds	r4, #16
   d4b06:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d4b0a:	e7dc      	b.n	d4ac6 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d4b0c:	f84c eb04 	str.w	lr, [ip], #4
   d4b10:	3801      	subs	r0, #1
   d4b12:	e7ce      	b.n	d4ab2 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d4b14:	3704      	adds	r7, #4
   d4b16:	46bd      	mov	sp, r7
   d4b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b1c:	408f4000 	.word	0x408f4000
   d4b20:	2003dac0 	.word	0x2003dac0
   d4b24:	2003d800 	.word	0x2003d800

000d4b28 <_Z16takeMeasurementsv>:
{   
   d4b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b2c:	ed2d 8b06 	vpush	{d8-d10}
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b30:	4cb9      	ldr	r4, [pc, #740]	; (d4e18 <_Z16takeMeasurementsv+0x2f0>)
   d4b32:	4bba      	ldr	r3, [pc, #744]	; (d4e1c <_Z16takeMeasurementsv+0x2f4>)
   d4b34:	6820      	ldr	r0, [r4, #0]
   d4b36:	f893 a000 	ldrb.w	sl, [r3]
{   
   d4b3a:	b0a8      	sub	sp, #160	; 0xa0
  };
   d4b3c:	f8cd a000 	str.w	sl, [sp]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b40:	f005 fcea 	bl	da518 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b44:	4bb6      	ldr	r3, [pc, #728]	; (d4e20 <_Z16takeMeasurementsv+0x2f8>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b46:	ec41 0b1a 	vmov	d10, r0, r1
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b4a:	f893 9000 	ldrb.w	r9, [r3]
  };
   d4b4e:	f8cd 9010 	str.w	r9, [sp, #16]
   d4b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b56:	6860      	ldr	r0, [r4, #4]
   d4b58:	f005 fcde 	bl	da518 <__aeabi_f2d>
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b5c:	4bb1      	ldr	r3, [pc, #708]	; (d4e24 <_Z16takeMeasurementsv+0x2fc>)
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b5e:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b62:	f893 8000 	ldrb.w	r8, [r3]
  };
   d4b66:	f8cd 8020 	str.w	r8, [sp, #32]
   d4b6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b6e:	68a0      	ldr	r0, [r4, #8]
   d4b70:	f005 fcd2 	bl	da518 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4b74:	4bac      	ldr	r3, [pc, #688]	; (d4e28 <_Z16takeMeasurementsv+0x300>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b76:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4b7a:	781d      	ldrb	r5, [r3, #0]
  };
   d4b7c:	950c      	str	r5, [sp, #48]	; 0x30
  };
   d4b7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4b82:	68e0      	ldr	r0, [r4, #12]
   d4b84:	f005 fcc8 	bl	da518 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4b88:	4ba8      	ldr	r3, [pc, #672]	; (d4e2c <_Z16takeMeasurementsv+0x304>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4b8a:	4606      	mov	r6, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4b8c:	781b      	ldrb	r3, [r3, #0]
   d4b8e:	6920      	ldr	r0, [r4, #16]
   d4b90:	9310      	str	r3, [sp, #64]	; 0x40
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4b92:	460f      	mov	r7, r1
  };
   d4b94:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4b98:	f005 fcbe 	bl	da518 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4b9c:	4ba4      	ldr	r3, [pc, #656]	; (d4e30 <_Z16takeMeasurementsv+0x308>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4b9e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4ba2:	781b      	ldrb	r3, [r3, #0]
   d4ba4:	6960      	ldr	r0, [r4, #20]
   d4ba6:	9314      	str	r3, [sp, #80]	; 0x50
   d4ba8:	f005 fcb6 	bl	da518 <__aeabi_f2d>
    sensorData.validData = false;
   d4bac:	4ca1      	ldr	r4, [pc, #644]	; (d4e34 <_Z16takeMeasurementsv+0x30c>)
   };
   d4bae:	9524      	str	r5, [sp, #144]	; 0x90
    if ((sysStatus.operatingMode) == 1){
   d4bb0:	4da1      	ldr	r5, [pc, #644]	; (d4e38 <_Z16takeMeasurementsv+0x310>)
   };
   d4bb2:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    sensorData.validData = false;
   d4bb6:	2300      	movs	r3, #0
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4bb8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   };
   d4bbc:	ed8d ab1a 	vstr	d10, [sp, #104]	; 0x68
   d4bc0:	ed8d 9b1e 	vstr	d9, [sp, #120]	; 0x78
   d4bc4:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
   d4bc8:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
   d4bcc:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   d4bd0:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    sensorData.validData = false;
   d4bd4:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    getBatteryContext();     
   d4bd8:	f7ff ff32 	bl	d4a40 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4bdc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d4bde:	2801      	cmp	r0, #1
   d4be0:	d14a      	bne.n	d4c78 <_Z16takeMeasurementsv+0x150>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4be2:	7f2b      	ldrb	r3, [r5, #28]
   d4be4:	b14b      	cbz	r3, d4bfa <_Z16takeMeasurementsv+0xd2>
   d4be6:	4895      	ldr	r0, [pc, #596]	; (d4e3c <_Z16takeMeasurementsv+0x314>)
   d4be8:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4bec:	f001 fd10 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4bf0:	ec51 0b10 	vmov	r0, r1, d0
   d4bf4:	f005 ffb8 	bl	dab68 <__aeabi_d2f>
   d4bf8:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4bfa:	7f6b      	ldrb	r3, [r5, #29]
   d4bfc:	b14b      	cbz	r3, d4c12 <_Z16takeMeasurementsv+0xea>
   d4bfe:	4890      	ldr	r0, [pc, #576]	; (d4e40 <_Z16takeMeasurementsv+0x318>)
   d4c00:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c04:	f001 fd04 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c08:	ec51 0b10 	vmov	r0, r1, d0
   d4c0c:	f005 ffac 	bl	dab68 <__aeabi_d2f>
   d4c10:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4c12:	7fab      	ldrb	r3, [r5, #30]
   d4c14:	b14b      	cbz	r3, d4c2a <_Z16takeMeasurementsv+0x102>
   d4c16:	488b      	ldr	r0, [pc, #556]	; (d4e44 <_Z16takeMeasurementsv+0x31c>)
   d4c18:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c1c:	f001 fcf8 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c20:	ec51 0b10 	vmov	r0, r1, d0
   d4c24:	f005 ffa0 	bl	dab68 <__aeabi_d2f>
   d4c28:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4c2a:	7feb      	ldrb	r3, [r5, #31]
   d4c2c:	b14b      	cbz	r3, d4c42 <_Z16takeMeasurementsv+0x11a>
   d4c2e:	4886      	ldr	r0, [pc, #536]	; (d4e48 <_Z16takeMeasurementsv+0x320>)
   d4c30:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c34:	f001 fcec 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c38:	ec51 0b10 	vmov	r0, r1, d0
   d4c3c:	f005 ff94 	bl	dab68 <__aeabi_d2f>
   d4c40:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4c42:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4c46:	b14b      	cbz	r3, d4c5c <_Z16takeMeasurementsv+0x134>
   d4c48:	4880      	ldr	r0, [pc, #512]	; (d4e4c <_Z16takeMeasurementsv+0x324>)
   d4c4a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c4e:	f001 fcdf 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c52:	ec51 0b10 	vmov	r0, r1, d0
   d4c56:	f005 ff87 	bl	dab68 <__aeabi_d2f>
   d4c5a:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d4c5c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4c60:	b1eb      	cbz	r3, d4c9e <_Z16takeMeasurementsv+0x176>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4c62:	487b      	ldr	r0, [pc, #492]	; (d4e50 <_Z16takeMeasurementsv+0x328>)
   d4c64:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c68:	f001 fcd2 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c6c:	ec51 0b10 	vmov	r0, r1, d0
   d4c70:	f005 ff7a 	bl	dab68 <__aeabi_d2f>
   d4c74:	6160      	str	r0, [r4, #20]
   d4c76:	e012      	b.n	d4c9e <_Z16takeMeasurementsv+0x176>
    else if ((sysStatus.operatingMode) == 2){
   d4c78:	2802      	cmp	r0, #2
   d4c7a:	f040 808f 	bne.w	d4d9c <_Z16takeMeasurementsv+0x274>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4c7e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4c82:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4c86:	4669      	mov	r1, sp
   d4c88:	2003      	movs	r0, #3
   d4c8a:	f7ff feff 	bl	d4a8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4c8e:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4c92:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4c96:	a90c      	add	r1, sp, #48	; 0x30
   d4c98:	2003      	movs	r0, #3
   d4c9a:	f7ff fef7 	bl	d4a8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4c9e:	edd4 7a00 	vldr	s15, [r4]
   d4ca2:	ed94 7a06 	vldr	s14, [r4, #24]
    sensorDataWriteNeeded = true;
   d4ca6:	4e6b      	ldr	r6, [pc, #428]	; (d4e54 <_Z16takeMeasurementsv+0x32c>)
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cb0:	bfd8      	it	le
   d4cb2:	eef1 7a67 	vnegle.f32	s15, s15
   d4cb6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4cba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d4cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
    sensorDataWriteNeeded = true;
   d4cc2:	2201      	movs	r2, #1
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sensorDataWriteNeeded = true;
   d4cc8:	7032      	strb	r2, [r6, #0]
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4cca:	da59      	bge.n	d4d80 <_Z16takeMeasurementsv+0x258>
   d4ccc:	ed94 7a01 	vldr	s14, [r4, #4]
   d4cd0:	edd4 6a07 	vldr	s13, [r4, #28]
   d4cd4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cdc:	bfd8      	it	le
   d4cde:	eeb1 7a47 	vnegle.f32	s14, s14
   d4ce2:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cee:	da47      	bge.n	d4d80 <_Z16takeMeasurementsv+0x258>
   d4cf0:	ed94 7a02 	vldr	s14, [r4, #8]
   d4cf4:	edd4 6a08 	vldr	s13, [r4, #32]
   d4cf8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d00:	bfd8      	it	le
   d4d02:	eeb1 7a47 	vnegle.f32	s14, s14
   d4d06:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d12:	da35      	bge.n	d4d80 <_Z16takeMeasurementsv+0x258>
   d4d14:	ed94 7a03 	vldr	s14, [r4, #12]
   d4d18:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4d1c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d24:	bfd8      	it	le
   d4d26:	eeb1 7a47 	vnegle.f32	s14, s14
   d4d2a:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d36:	da23      	bge.n	d4d80 <_Z16takeMeasurementsv+0x258>
   d4d38:	ed94 7a04 	vldr	s14, [r4, #16]
   d4d3c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4d40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d48:	bfd8      	it	le
   d4d4a:	eeb1 7a47 	vnegle.f32	s14, s14
   d4d4e:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d5a:	da11      	bge.n	d4d80 <_Z16takeMeasurementsv+0x258>
   d4d5c:	ed94 7a05 	vldr	s14, [r4, #20]
   d4d60:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4d64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d6c:	bfd8      	it	le
   d4d6e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4d72:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d7e:	db48      	blt.n	d4e12 <_Z16takeMeasurementsv+0x2ea>
      sensorData.validData = true;
   d4d80:	2501      	movs	r5, #1
   d4d82:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
      sensorData.timeStamp = Time.now();
   d4d86:	f004 fe54 	bl	d9a32 <_ZN9TimeClass3nowEv>
      sensorDataWriteNeeded = true;
   d4d8a:	7035      	strb	r5, [r6, #0]
      sensorData.timeStamp = Time.now();
   d4d8c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      return 1;
   d4d90:	4628      	mov	r0, r5
  }
   d4d92:	b028      	add	sp, #160	; 0xa0
   d4d94:	ecbd 8b06 	vpop	{d8-d10}
   d4d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (sysStatus.operatingMode == 3){
   d4d9c:	2803      	cmp	r0, #3
   d4d9e:	d12a      	bne.n	d4df6 <_Z16takeMeasurementsv+0x2ce>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4da0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4da4:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4da8:	4669      	mov	r1, sp
   d4daa:	f7ff fe6f 	bl	d4a8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d4dae:	7feb      	ldrb	r3, [r5, #31]
   d4db0:	b1f3      	cbz	r3, d4df0 <_Z16takeMeasurementsv+0x2c8>
   d4db2:	4825      	ldr	r0, [pc, #148]	; (d4e48 <_Z16takeMeasurementsv+0x320>)
   d4db4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4db8:	f001 fc2a 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4dbc:	ec51 0b10 	vmov	r0, r1, d0
   d4dc0:	f005 fed2 	bl	dab68 <__aeabi_d2f>
   d4dc4:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);       
   d4dc6:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4dca:	b1fb      	cbz	r3, d4e0c <_Z16takeMeasurementsv+0x2e4>
   d4dcc:	481f      	ldr	r0, [pc, #124]	; (d4e4c <_Z16takeMeasurementsv+0x324>)
   d4dce:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4dd2:	f001 fc1d 	bl	d6610 <_ZN13EnergyMonitor8calcIrmsEj>
   d4dd6:	ec51 0b10 	vmov	r0, r1, d0
   d4dda:	f005 fec5 	bl	dab68 <__aeabi_d2f>
   d4dde:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4de0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4de4:	2b00      	cmp	r3, #0
   d4de6:	f47f af3c 	bne.w	d4c62 <_Z16takeMeasurementsv+0x13a>
      else sensorData.sensorSixCurrent=0;
   d4dea:	2300      	movs	r3, #0
   d4dec:	6163      	str	r3, [r4, #20]
   d4dee:	e756      	b.n	d4c9e <_Z16takeMeasurementsv+0x176>
      else sensorData.sensorFourCurrent=0;
   d4df0:	2300      	movs	r3, #0
   d4df2:	60e3      	str	r3, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d4df4:	e7e7      	b.n	d4dc6 <_Z16takeMeasurementsv+0x29e>
    else if (sysStatus.operatingMode == 4){
   d4df6:	2804      	cmp	r0, #4
   d4df8:	f47f af51 	bne.w	d4c9e <_Z16takeMeasurementsv+0x176>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4dfc:	f104 0370 	add.w	r3, r4, #112	; 0x70
   d4e00:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4e04:	a918      	add	r1, sp, #96	; 0x60
   d4e06:	f7ff fe41 	bl	d4a8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d4e0a:	e7dc      	b.n	d4dc6 <_Z16takeMeasurementsv+0x29e>
      else sensorData.sensorFiveCurrent=0;                  
   d4e0c:	2300      	movs	r3, #0
   d4e0e:	6123      	str	r3, [r4, #16]
   d4e10:	e7e6      	b.n	d4de0 <_Z16takeMeasurementsv+0x2b8>
      } else return 0;
   d4e12:	2000      	movs	r0, #0
   d4e14:	e7bd      	b.n	d4d92 <_Z16takeMeasurementsv+0x26a>
   d4e16:	bf00      	nop
   d4e18:	2003e450 	.word	0x2003e450
   d4e1c:	2003d7f8 	.word	0x2003d7f8
   d4e20:	2003d7f9 	.word	0x2003d7f9
   d4e24:	2003d7fa 	.word	0x2003d7fa
   d4e28:	2003d7fb 	.word	0x2003d7fb
   d4e2c:	2003d7fc 	.word	0x2003d7fc
   d4e30:	2003d7fd 	.word	0x2003d7fd
   d4e34:	2003e468 	.word	0x2003e468
   d4e38:	2003e5b8 	.word	0x2003e5b8
   d4e3c:	2003df78 	.word	0x2003df78
   d4e40:	2003e030 	.word	0x2003e030
   d4e44:	2003e0e8 	.word	0x2003e0e8
   d4e48:	2003e1a0 	.word	0x2003e1a0
   d4e4c:	2003e258 	.word	0x2003e258
   d4e50:	2003e310 	.word	0x2003e310
   d4e54:	2003e4f4 	.word	0x2003e4f4

000d4e58 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d4e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4e5c:	4c44      	ldr	r4, [pc, #272]	; (d4f70 <_Z11loadEmonlibv+0x118>)
   d4e5e:	f8df b13c 	ldr.w	fp, [pc, #316]	; d4f9c <_Z11loadEmonlibv+0x144>
   d4e62:	6820      	ldr	r0, [r4, #0]
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4e64:	f8df a138 	ldr.w	sl, [pc, #312]	; d4fa0 <_Z11loadEmonlibv+0x148>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4e68:	f8df 9138 	ldr.w	r9, [pc, #312]	; d4fa4 <_Z11loadEmonlibv+0x14c>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4e6c:	f8df 8138 	ldr.w	r8, [pc, #312]	; d4fa8 <_Z11loadEmonlibv+0x150>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4e70:	4f40      	ldr	r7, [pc, #256]	; (d4f74 <_Z11loadEmonlibv+0x11c>)
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4e72:	4e41      	ldr	r6, [pc, #260]	; (d4f78 <_Z11loadEmonlibv+0x120>)
  emon[0].current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4e74:	4d41      	ldr	r5, [pc, #260]	; (d4f7c <_Z11loadEmonlibv+0x124>)
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4e76:	f005 fb4f 	bl	da518 <__aeabi_f2d>
   d4e7a:	ec41 0b10 	vmov	d0, r0, r1
   d4e7e:	f89b 1000 	ldrb.w	r1, [fp]
   d4e82:	483f      	ldr	r0, [pc, #252]	; (d4f80 <_Z11loadEmonlibv+0x128>)
   d4e84:	f001 fbb8 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4e88:	6860      	ldr	r0, [r4, #4]
   d4e8a:	f005 fb45 	bl	da518 <__aeabi_f2d>
   d4e8e:	ec41 0b10 	vmov	d0, r0, r1
   d4e92:	f89a 1000 	ldrb.w	r1, [sl]
   d4e96:	483b      	ldr	r0, [pc, #236]	; (d4f84 <_Z11loadEmonlibv+0x12c>)
   d4e98:	f001 fbae 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4e9c:	68a0      	ldr	r0, [r4, #8]
   d4e9e:	f005 fb3b 	bl	da518 <__aeabi_f2d>
   d4ea2:	ec41 0b10 	vmov	d0, r0, r1
   d4ea6:	f899 1000 	ldrb.w	r1, [r9]
   d4eaa:	4837      	ldr	r0, [pc, #220]	; (d4f88 <_Z11loadEmonlibv+0x130>)
   d4eac:	f001 fba4 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4eb0:	68e0      	ldr	r0, [r4, #12]
   d4eb2:	f005 fb31 	bl	da518 <__aeabi_f2d>
   d4eb6:	ec41 0b10 	vmov	d0, r0, r1
   d4eba:	f898 1000 	ldrb.w	r1, [r8]
   d4ebe:	4833      	ldr	r0, [pc, #204]	; (d4f8c <_Z11loadEmonlibv+0x134>)
   d4ec0:	f001 fb9a 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4ec4:	6920      	ldr	r0, [r4, #16]
   d4ec6:	f005 fb27 	bl	da518 <__aeabi_f2d>
   d4eca:	ec41 0b10 	vmov	d0, r0, r1
   d4ece:	7839      	ldrb	r1, [r7, #0]
   d4ed0:	482f      	ldr	r0, [pc, #188]	; (d4f90 <_Z11loadEmonlibv+0x138>)
   d4ed2:	f001 fb91 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4ed6:	6960      	ldr	r0, [r4, #20]
   d4ed8:	f005 fb1e 	bl	da518 <__aeabi_f2d>
   d4edc:	ec41 0b10 	vmov	d0, r0, r1
   d4ee0:	7831      	ldrb	r1, [r6, #0]
   d4ee2:	482c      	ldr	r0, [pc, #176]	; (d4f94 <_Z11loadEmonlibv+0x13c>)
   d4ee4:	f001 fb88 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[0].current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4ee8:	6820      	ldr	r0, [r4, #0]
   d4eea:	f005 fb15 	bl	da518 <__aeabi_f2d>
   d4eee:	ec41 0b10 	vmov	d0, r0, r1
   d4ef2:	f89b 1000 	ldrb.w	r1, [fp]
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f001 fb7e 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[1].current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4efc:	6860      	ldr	r0, [r4, #4]
   d4efe:	f005 fb0b 	bl	da518 <__aeabi_f2d>
   d4f02:	ec41 0b10 	vmov	d0, r0, r1
   d4f06:	f89a 1000 	ldrb.w	r1, [sl]
   d4f0a:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   d4f0e:	f001 fb73 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[2].current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4f12:	68a0      	ldr	r0, [r4, #8]
   d4f14:	f005 fb00 	bl	da518 <__aeabi_f2d>
   d4f18:	ec41 0b10 	vmov	d0, r0, r1
   d4f1c:	f899 1000 	ldrb.w	r1, [r9]
   d4f20:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   d4f24:	f001 fb68 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[3].current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4f28:	68e0      	ldr	r0, [r4, #12]
   d4f2a:	f005 faf5 	bl	da518 <__aeabi_f2d>
   d4f2e:	ec41 0b10 	vmov	d0, r0, r1
   d4f32:	f898 1000 	ldrb.w	r1, [r8]
   d4f36:	f505 700a 	add.w	r0, r5, #552	; 0x228
   d4f3a:	f001 fb5d 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[4].current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4f3e:	6920      	ldr	r0, [r4, #16]
   d4f40:	f005 faea 	bl	da518 <__aeabi_f2d>
   d4f44:	ec41 0b10 	vmov	d0, r0, r1
   d4f48:	7839      	ldrb	r1, [r7, #0]
   d4f4a:	f505 7038 	add.w	r0, r5, #736	; 0x2e0
   d4f4e:	f001 fb53 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  emon[5].current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4f52:	6960      	ldr	r0, [r4, #20]
   d4f54:	f005 fae0 	bl	da518 <__aeabi_f2d>
   d4f58:	ec41 0b10 	vmov	d0, r0, r1
   d4f5c:	7831      	ldrb	r1, [r6, #0]
   d4f5e:	f505 7066 	add.w	r0, r5, #920	; 0x398
   d4f62:	f001 fb49 	bl	d65f8 <_ZN13EnergyMonitor7currentEjd>
  constantsStatusWriteNeeded = true;
   d4f66:	4b0c      	ldr	r3, [pc, #48]	; (d4f98 <_Z11loadEmonlibv+0x140>)
   d4f68:	2201      	movs	r2, #1
   d4f6a:	701a      	strb	r2, [r3, #0]
}
   d4f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f70:	2003e450 	.word	0x2003e450
   d4f74:	2003d7fc 	.word	0x2003d7fc
   d4f78:	2003d7fd 	.word	0x2003d7fd
   d4f7c:	2003db28 	.word	0x2003db28
   d4f80:	2003df78 	.word	0x2003df78
   d4f84:	2003e030 	.word	0x2003e030
   d4f88:	2003e0e8 	.word	0x2003e0e8
   d4f8c:	2003e1a0 	.word	0x2003e1a0
   d4f90:	2003e258 	.word	0x2003e258
   d4f94:	2003e310 	.word	0x2003e310
   d4f98:	2003db26 	.word	0x2003db26
   d4f9c:	2003d7f8 	.word	0x2003d7f8
   d4fa0:	2003d7f9 	.word	0x2003d7f9
   d4fa4:	2003d7fa 	.word	0x2003d7fa
   d4fa8:	2003d7fb 	.word	0x2003d7fb

000d4fac <_Z20updateConstantValuesv>:
{   
   d4fac:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d4fae:	4c22      	ldr	r4, [pc, #136]	; (d5038 <_Z20updateConstantValuesv+0x8c>)
   d4fb0:	6820      	ldr	r0, [r4, #0]
   d4fb2:	f005 fab1 	bl	da518 <__aeabi_f2d>
   d4fb6:	4a21      	ldr	r2, [pc, #132]	; (d503c <_Z20updateConstantValuesv+0x90>)
   d4fb8:	e9cd 0100 	strd	r0, r1, [sp]
   d4fbc:	2120      	movs	r1, #32
   d4fbe:	4820      	ldr	r0, [pc, #128]	; (d5040 <_Z20updateConstantValuesv+0x94>)
   d4fc0:	f003 fa92 	bl	d84e8 <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d4fc4:	6860      	ldr	r0, [r4, #4]
   d4fc6:	f005 faa7 	bl	da518 <__aeabi_f2d>
   d4fca:	4a1e      	ldr	r2, [pc, #120]	; (d5044 <_Z20updateConstantValuesv+0x98>)
   d4fcc:	e9cd 0100 	strd	r0, r1, [sp]
   d4fd0:	2120      	movs	r1, #32
   d4fd2:	481d      	ldr	r0, [pc, #116]	; (d5048 <_Z20updateConstantValuesv+0x9c>)
   d4fd4:	f003 fa88 	bl	d84e8 <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d4fd8:	68a0      	ldr	r0, [r4, #8]
   d4fda:	f005 fa9d 	bl	da518 <__aeabi_f2d>
   d4fde:	4a1b      	ldr	r2, [pc, #108]	; (d504c <_Z20updateConstantValuesv+0xa0>)
   d4fe0:	e9cd 0100 	strd	r0, r1, [sp]
   d4fe4:	2120      	movs	r1, #32
   d4fe6:	481a      	ldr	r0, [pc, #104]	; (d5050 <_Z20updateConstantValuesv+0xa4>)
   d4fe8:	f003 fa7e 	bl	d84e8 <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d4fec:	68e0      	ldr	r0, [r4, #12]
   d4fee:	f005 fa93 	bl	da518 <__aeabi_f2d>
   d4ff2:	4a18      	ldr	r2, [pc, #96]	; (d5054 <_Z20updateConstantValuesv+0xa8>)
   d4ff4:	e9cd 0100 	strd	r0, r1, [sp]
   d4ff8:	2120      	movs	r1, #32
   d4ffa:	4817      	ldr	r0, [pc, #92]	; (d5058 <_Z20updateConstantValuesv+0xac>)
   d4ffc:	f003 fa74 	bl	d84e8 <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d5000:	6920      	ldr	r0, [r4, #16]
   d5002:	f005 fa89 	bl	da518 <__aeabi_f2d>
   d5006:	4a15      	ldr	r2, [pc, #84]	; (d505c <_Z20updateConstantValuesv+0xb0>)
   d5008:	e9cd 0100 	strd	r0, r1, [sp]
   d500c:	2120      	movs	r1, #32
   d500e:	4814      	ldr	r0, [pc, #80]	; (d5060 <_Z20updateConstantValuesv+0xb4>)
   d5010:	f003 fa6a 	bl	d84e8 <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d5014:	6960      	ldr	r0, [r4, #20]
   d5016:	f005 fa7f 	bl	da518 <__aeabi_f2d>
   d501a:	4a12      	ldr	r2, [pc, #72]	; (d5064 <_Z20updateConstantValuesv+0xb8>)
   d501c:	e9cd 0100 	strd	r0, r1, [sp]
   d5020:	2120      	movs	r1, #32
   d5022:	4811      	ldr	r0, [pc, #68]	; (d5068 <_Z20updateConstantValuesv+0xbc>)
   d5024:	f003 fa60 	bl	d84e8 <snprintf>
    loadEmonlib();
   d5028:	f7ff ff16 	bl	d4e58 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d502c:	4b0f      	ldr	r3, [pc, #60]	; (d506c <_Z20updateConstantValuesv+0xc0>)
   d502e:	2201      	movs	r2, #1
   d5030:	701a      	strb	r2, [r3, #0]
} 
   d5032:	b002      	add	sp, #8
   d5034:	bd10      	pop	{r4, pc}
   d5036:	bf00      	nop
   d5038:	2003e450 	.word	0x2003e450
   d503c:	000dce3d 	.word	0x000dce3d
   d5040:	2003e535 	.word	0x2003e535
   d5044:	000dce4b 	.word	0x000dce4b
   d5048:	2003e595 	.word	0x2003e595
   d504c:	000dce58 	.word	0x000dce58
   d5050:	2003e575 	.word	0x2003e575
   d5054:	000dce68 	.word	0x000dce68
   d5058:	2003e515 	.word	0x2003e515
   d505c:	000dce85 	.word	0x000dce85
   d5060:	2003e4f5 	.word	0x2003e4f5
   d5064:	000dcea2 	.word	0x000dcea2
   d5068:	2003e555 	.word	0x2003e555
   d506c:	2003db26 	.word	0x2003db26

000d5070 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d5070:	b500      	push	{lr}
   d5072:	b089      	sub	sp, #36	; 0x24
   d5074:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d5076:	f004 fb17 	bl	d96a8 <_ZNK6String7toFloatEv>
   d507a:	4b0d      	ldr	r3, [pc, #52]	; (d50b0 <_Z14setConstantOne6String+0x40>)
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d507c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d507e:	ed83 0a00 	vstr	s0, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d5082:	a804      	add	r0, sp, #16
   d5084:	f004 fab4 	bl	d95f0 <_ZN6StringC1ERKS_>
   d5088:	2300      	movs	r3, #0
   d508a:	f88d 3000 	strb.w	r3, [sp]
   d508e:	4b09      	ldr	r3, [pc, #36]	; (d50b4 <_Z14setConstantOne6String+0x44>)
   d5090:	9a04      	ldr	r2, [sp, #16]
   d5092:	781b      	ldrb	r3, [r3, #0]
   d5094:	4908      	ldr	r1, [pc, #32]	; (d50b8 <_Z14setConstantOne6String+0x48>)
   d5096:	4809      	ldr	r0, [pc, #36]	; (d50bc <_Z14setConstantOne6String+0x4c>)
   d5098:	f7ff f96f 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d509c:	a804      	add	r0, sp, #16
   d509e:	f004 fa39 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d50a2:	f7ff ff83 	bl	d4fac <_Z20updateConstantValuesv>
}
   d50a6:	2001      	movs	r0, #1
   d50a8:	b009      	add	sp, #36	; 0x24
   d50aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d50ae:	bf00      	nop
   d50b0:	2003e450 	.word	0x2003e450
   d50b4:	2003db05 	.word	0x2003db05
   d50b8:	000dcebe 	.word	0x000dcebe
   d50bc:	2003e3f8 	.word	0x2003e3f8

000d50c0 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d50c0:	b500      	push	{lr}
   d50c2:	b089      	sub	sp, #36	; 0x24
   d50c4:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d50c6:	f004 faef 	bl	d96a8 <_ZNK6String7toFloatEv>
   d50ca:	4b0d      	ldr	r3, [pc, #52]	; (d5100 <_Z14setConstantTwo6String+0x40>)
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d50cc:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d50ce:	ed83 0a01 	vstr	s0, [r3, #4]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d50d2:	a804      	add	r0, sp, #16
   d50d4:	f004 fa8c 	bl	d95f0 <_ZN6StringC1ERKS_>
   d50d8:	2300      	movs	r3, #0
   d50da:	f88d 3000 	strb.w	r3, [sp]
   d50de:	4b09      	ldr	r3, [pc, #36]	; (d5104 <_Z14setConstantTwo6String+0x44>)
   d50e0:	9a04      	ldr	r2, [sp, #16]
   d50e2:	781b      	ldrb	r3, [r3, #0]
   d50e4:	4908      	ldr	r1, [pc, #32]	; (d5108 <_Z14setConstantTwo6String+0x48>)
   d50e6:	4809      	ldr	r0, [pc, #36]	; (d510c <_Z14setConstantTwo6String+0x4c>)
   d50e8:	f7ff f947 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d50ec:	a804      	add	r0, sp, #16
   d50ee:	f004 fa11 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d50f2:	f7ff ff5b 	bl	d4fac <_Z20updateConstantValuesv>
}
   d50f6:	2001      	movs	r0, #1
   d50f8:	b009      	add	sp, #36	; 0x24
   d50fa:	f85d fb04 	ldr.w	pc, [sp], #4
   d50fe:	bf00      	nop
   d5100:	2003e450 	.word	0x2003e450
   d5104:	2003db05 	.word	0x2003db05
   d5108:	000dced9 	.word	0x000dced9
   d510c:	2003e3f8 	.word	0x2003e3f8

000d5110 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5110:	b500      	push	{lr}
   d5112:	b089      	sub	sp, #36	; 0x24
   d5114:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5116:	f004 fac7 	bl	d96a8 <_ZNK6String7toFloatEv>
   d511a:	4b0d      	ldr	r3, [pc, #52]	; (d5150 <_Z16setConstantThree6String+0x40>)
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d511c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d511e:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5122:	a804      	add	r0, sp, #16
   d5124:	f004 fa64 	bl	d95f0 <_ZN6StringC1ERKS_>
   d5128:	2300      	movs	r3, #0
   d512a:	f88d 3000 	strb.w	r3, [sp]
   d512e:	4b09      	ldr	r3, [pc, #36]	; (d5154 <_Z16setConstantThree6String+0x44>)
   d5130:	9a04      	ldr	r2, [sp, #16]
   d5132:	781b      	ldrb	r3, [r3, #0]
   d5134:	4908      	ldr	r1, [pc, #32]	; (d5158 <_Z16setConstantThree6String+0x48>)
   d5136:	4809      	ldr	r0, [pc, #36]	; (d515c <_Z16setConstantThree6String+0x4c>)
   d5138:	f7ff f91f 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d513c:	a804      	add	r0, sp, #16
   d513e:	f004 f9e9 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d5142:	f7ff ff33 	bl	d4fac <_Z20updateConstantValuesv>
}
   d5146:	2001      	movs	r0, #1
   d5148:	b009      	add	sp, #36	; 0x24
   d514a:	f85d fb04 	ldr.w	pc, [sp], #4
   d514e:	bf00      	nop
   d5150:	2003e450 	.word	0x2003e450
   d5154:	2003db05 	.word	0x2003db05
   d5158:	000dcef4 	.word	0x000dcef4
   d515c:	2003e3f8 	.word	0x2003e3f8

000d5160 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d5160:	b500      	push	{lr}
   d5162:	b089      	sub	sp, #36	; 0x24
   d5164:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d5166:	f004 fa9f 	bl	d96a8 <_ZNK6String7toFloatEv>
   d516a:	4b0d      	ldr	r3, [pc, #52]	; (d51a0 <_Z15setConstantFour6String+0x40>)
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d516c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d516e:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d5172:	a804      	add	r0, sp, #16
   d5174:	f004 fa3c 	bl	d95f0 <_ZN6StringC1ERKS_>
   d5178:	2300      	movs	r3, #0
   d517a:	f88d 3000 	strb.w	r3, [sp]
   d517e:	4b09      	ldr	r3, [pc, #36]	; (d51a4 <_Z15setConstantFour6String+0x44>)
   d5180:	9a04      	ldr	r2, [sp, #16]
   d5182:	781b      	ldrb	r3, [r3, #0]
   d5184:	4908      	ldr	r1, [pc, #32]	; (d51a8 <_Z15setConstantFour6String+0x48>)
   d5186:	4809      	ldr	r0, [pc, #36]	; (d51ac <_Z15setConstantFour6String+0x4c>)
   d5188:	f7ff f8f7 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d518c:	a804      	add	r0, sp, #16
   d518e:	f004 f9c1 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d5192:	f7ff ff0b 	bl	d4fac <_Z20updateConstantValuesv>
}
   d5196:	2001      	movs	r0, #1
   d5198:	b009      	add	sp, #36	; 0x24
   d519a:	f85d fb04 	ldr.w	pc, [sp], #4
   d519e:	bf00      	nop
   d51a0:	2003e450 	.word	0x2003e450
   d51a4:	2003db05 	.word	0x2003db05
   d51a8:	000dcf11 	.word	0x000dcf11
   d51ac:	2003e3f8 	.word	0x2003e3f8

000d51b0 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d51b0:	b500      	push	{lr}
   d51b2:	b089      	sub	sp, #36	; 0x24
   d51b4:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d51b6:	f004 fa77 	bl	d96a8 <_ZNK6String7toFloatEv>
   d51ba:	4b0d      	ldr	r3, [pc, #52]	; (d51f0 <_Z15setConstantFive6String+0x40>)
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d51bc:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d51be:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d51c2:	a804      	add	r0, sp, #16
   d51c4:	f004 fa14 	bl	d95f0 <_ZN6StringC1ERKS_>
   d51c8:	2300      	movs	r3, #0
   d51ca:	f88d 3000 	strb.w	r3, [sp]
   d51ce:	4b09      	ldr	r3, [pc, #36]	; (d51f4 <_Z15setConstantFive6String+0x44>)
   d51d0:	9a04      	ldr	r2, [sp, #16]
   d51d2:	781b      	ldrb	r3, [r3, #0]
   d51d4:	4908      	ldr	r1, [pc, #32]	; (d51f8 <_Z15setConstantFive6String+0x48>)
   d51d6:	4809      	ldr	r0, [pc, #36]	; (d51fc <_Z15setConstantFive6String+0x4c>)
   d51d8:	f7ff f8cf 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d51dc:	a804      	add	r0, sp, #16
   d51de:	f004 f999 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d51e2:	f7ff fee3 	bl	d4fac <_Z20updateConstantValuesv>
}
   d51e6:	2001      	movs	r0, #1
   d51e8:	b009      	add	sp, #36	; 0x24
   d51ea:	f85d fb04 	ldr.w	pc, [sp], #4
   d51ee:	bf00      	nop
   d51f0:	2003e450 	.word	0x2003e450
   d51f4:	2003db05 	.word	0x2003db05
   d51f8:	000dcf2d 	.word	0x000dcf2d
   d51fc:	2003e3f8 	.word	0x2003e3f8

000d5200 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5200:	b500      	push	{lr}
   d5202:	b089      	sub	sp, #36	; 0x24
   d5204:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5206:	f004 fa4f 	bl	d96a8 <_ZNK6String7toFloatEv>
   d520a:	4b0d      	ldr	r3, [pc, #52]	; (d5240 <_Z14setConstantSix6String+0x40>)
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d520c:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d520e:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5212:	a804      	add	r0, sp, #16
   d5214:	f004 f9ec 	bl	d95f0 <_ZN6StringC1ERKS_>
   d5218:	2300      	movs	r3, #0
   d521a:	f88d 3000 	strb.w	r3, [sp]
   d521e:	4b09      	ldr	r3, [pc, #36]	; (d5244 <_Z14setConstantSix6String+0x44>)
   d5220:	9a04      	ldr	r2, [sp, #16]
   d5222:	781b      	ldrb	r3, [r3, #0]
   d5224:	4908      	ldr	r1, [pc, #32]	; (d5248 <_Z14setConstantSix6String+0x48>)
   d5226:	4809      	ldr	r0, [pc, #36]	; (d524c <_Z14setConstantSix6String+0x4c>)
   d5228:	f7ff f8a7 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d522c:	a804      	add	r0, sp, #16
   d522e:	f004 f971 	bl	d9514 <_ZN6StringD1Ev>
  updateConstantValues();
   d5232:	f7ff febb 	bl	d4fac <_Z20updateConstantValuesv>
}
   d5236:	2001      	movs	r0, #1
   d5238:	b009      	add	sp, #36	; 0x24
   d523a:	f85d fb04 	ldr.w	pc, [sp], #4
   d523e:	bf00      	nop
   d5240:	2003e450 	.word	0x2003e450
   d5244:	2003db05 	.word	0x2003db05
   d5248:	000dcf49 	.word	0x000dcf49
   d524c:	2003e3f8 	.word	0x2003e3f8

000d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5250:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5252:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5254:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5256:	b17c      	cbz	r4, d5278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5258:	6863      	ldr	r3, [r4, #4]
   d525a:	3b01      	subs	r3, #1
   d525c:	6063      	str	r3, [r4, #4]
   d525e:	b95b      	cbnz	r3, d5278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5260:	6823      	ldr	r3, [r4, #0]
   d5262:	4620      	mov	r0, r4
   d5264:	689b      	ldr	r3, [r3, #8]
   d5266:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5268:	68a3      	ldr	r3, [r4, #8]
   d526a:	3b01      	subs	r3, #1
   d526c:	60a3      	str	r3, [r4, #8]
   d526e:	b91b      	cbnz	r3, d5278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5270:	6823      	ldr	r3, [r4, #0]
   d5272:	4620      	mov	r0, r4
   d5274:	68db      	ldr	r3, [r3, #12]
   d5276:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5278:	4628      	mov	r0, r5
   d527a:	bd38      	pop	{r3, r4, r5, pc}

000d527c <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>:
    JSONValue getJSONValueForKey(const char *key) { return getJSONValueForKey(jsonObj, key); }; 
   d527c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d527e:	684b      	ldr	r3, [r1, #4]
   d5280:	9301      	str	r3, [sp, #4]
      : _M_pi(__r._M_pi)
   d5282:	688b      	ldr	r3, [r1, #8]
   d5284:	9302      	str	r3, [sp, #8]
   d5286:	4604      	mov	r4, r0
	if (_M_pi != 0)
   d5288:	b113      	cbz	r3, d5290 <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc+0x14>
    { ++_M_use_count; }
   d528a:	6858      	ldr	r0, [r3, #4]
   d528c:	3001      	adds	r0, #1
   d528e:	6058      	str	r0, [r3, #4]
class JSONString;
class JSONArrayIterator;
class JSONObjectIterator;

// Immutable JSON value
class JSONValue {
   d5290:	68cb      	ldr	r3, [r1, #12]
   d5292:	9303      	str	r3, [sp, #12]
   d5294:	a901      	add	r1, sp, #4
   d5296:	4620      	mov	r0, r4
   d5298:	f002 fc4b 	bl	d7b32 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d529c:	a802      	add	r0, sp, #8
   d529e:	f7ff ffd7 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52a2:	4620      	mov	r0, r4
   d52a4:	b004      	add	sp, #16
   d52a6:	bd10      	pop	{r4, pc}

000d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>:
    const char *getString(const char *key) { return storageMethod->getJSONValueForKey(key).toString().data(); };
   d52a8:	b510      	push	{r4, lr}
   d52aa:	b08a      	sub	sp, #40	; 0x28
   d52ac:	460a      	mov	r2, r1
   d52ae:	4601      	mov	r1, r0
   d52b0:	a803      	add	r0, sp, #12
   d52b2:	f7ff ffe3 	bl	d527c <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52b6:	9b03      	ldr	r3, [sp, #12]
   d52b8:	9301      	str	r3, [sp, #4]
      : _M_pi(__r._M_pi)
   d52ba:	9b04      	ldr	r3, [sp, #16]
inline spark::JSONValue::JSONValue() :
        t_(nullptr) {
}

inline spark::JSONString spark::JSONValue::toString() const {
    return JSONString(t_, d_);
   d52bc:	9905      	ldr	r1, [sp, #20]
   d52be:	9302      	str	r3, [sp, #8]
	if (_M_pi != 0)
   d52c0:	b113      	cbz	r3, d52c8 <_ZN11CloudConfig9getStringEPKc.isra.0+0x20>
    { ++_M_use_count; }
   d52c2:	685a      	ldr	r2, [r3, #4]
   d52c4:	3201      	adds	r2, #1
   d52c6:	605a      	str	r2, [r3, #4]
   d52c8:	aa01      	add	r2, sp, #4
   d52ca:	a806      	add	r0, sp, #24
   d52cc:	f003 ff42 	bl	d9154 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d52d0:	a802      	add	r0, sp, #8
   d52d2:	f7ff ffbd 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d6:	a807      	add	r0, sp, #28
   d52d8:	9c08      	ldr	r4, [sp, #32]
   d52da:	f7ff ffb9 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52de:	a804      	add	r0, sp, #16
   d52e0:	f7ff ffb6 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52e4:	4620      	mov	r0, r4
   d52e6:	b00a      	add	sp, #40	; 0x28
   d52e8:	bd10      	pop	{r4, pc}
	...

000d52ec <_Z9sendEventv>:
{
   d52ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (sysStatus.operatingMode == 1){
   d52f0:	4b8a      	ldr	r3, [pc, #552]	; (d551c <_Z9sendEventv+0x230>)
   d52f2:	4c8b      	ldr	r4, [pc, #556]	; (d5520 <_Z9sendEventv+0x234>)
   d52f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52f6:	2b01      	cmp	r3, #1
{
   d52f8:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
  if (sysStatus.operatingMode == 1){
   d52fc:	f040 80a2 	bne.w	d5444 <_Z9sendEventv+0x158>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d5300:	a812      	add	r0, sp, #72	; 0x48
   d5302:	f003 f831 	bl	d8368 <spark_deviceID>
    snprintf(influx_hook,sizeof(influx_hook),"{ \"tags\" : {\"alias\": \"%s\",\"lat\": \"%s\",\"longitude\": \"%s\",\"product\": \"%s\",\"Device-Name\": \"%s\",\"device_id\": \"%s\"},\"values\": {\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}}", CloudConfig::instance().getString("alias"),CloudConfig::instance().getString("lat"),CloudConfig::instance().getString("long"),CloudConfig::instance().getString("product"),DeviceNameHelperRetained::instance().getName(),myDeviceID.c_str(),sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d5306:	f002 fb05 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d530a:	4986      	ldr	r1, [pc, #536]	; (d5524 <_Z9sendEventv+0x238>)
   d530c:	6840      	ldr	r0, [r0, #4]
   d530e:	f7ff ffcb 	bl	d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>
   d5312:	4606      	mov	r6, r0
   d5314:	f002 fafe 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d5318:	4983      	ldr	r1, [pc, #524]	; (d5528 <_Z9sendEventv+0x23c>)
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff ffc4 	bl	d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>
   d5320:	4607      	mov	r7, r0
   d5322:	f002 faf7 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d5326:	4981      	ldr	r1, [pc, #516]	; (d552c <_Z9sendEventv+0x240>)
   d5328:	6840      	ldr	r0, [r0, #4]
   d532a:	f7ff ffbd 	bl	d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>
   d532e:	4680      	mov	r8, r0
   d5330:	f002 faf0 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d5334:	497e      	ldr	r1, [pc, #504]	; (d5530 <_Z9sendEventv+0x244>)
   d5336:	6840      	ldr	r0, [r0, #4]
   d5338:	f7ff ffb6 	bl	d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>
   d533c:	4681      	mov	r9, r0
   d533e:	f000 ff5d 	bl	d61fc <_ZN24DeviceNameHelperRetained8instanceEv>
   d5342:	6845      	ldr	r5, [r0, #4]
    /**
     * @brief Returns the device name as a c-string
     * 
     * May return an empty string if the name has not been retrieved yet
     */
    const char *getName() const { return data ? data->name : ""; };
   d5344:	2d00      	cmp	r5, #0
   d5346:	d07b      	beq.n	d5440 <_Z9sendEventv+0x154>
   d5348:	350c      	adds	r5, #12
   d534a:	6960      	ldr	r0, [r4, #20]
   d534c:	f005 f8e4 	bl	da518 <__aeabi_f2d>
   d5350:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   d5354:	6920      	ldr	r0, [r4, #16]
   d5356:	f005 f8df 	bl	da518 <__aeabi_f2d>
   d535a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d535e:	68e0      	ldr	r0, [r4, #12]
   d5360:	f005 f8da 	bl	da518 <__aeabi_f2d>
   d5364:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d5368:	68a0      	ldr	r0, [r4, #8]
   d536a:	f005 f8d5 	bl	da518 <__aeabi_f2d>
   d536e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5372:	6860      	ldr	r0, [r4, #4]
   d5374:	f005 f8d0 	bl	da518 <__aeabi_f2d>
   d5378:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d537c:	6820      	ldr	r0, [r4, #0]
   d537e:	f005 f8cb 	bl	da518 <__aeabi_f2d>
   d5382:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d5384:	4a6b      	ldr	r2, [pc, #428]	; (d5534 <_Z9sendEventv+0x248>)
   d5386:	9700      	str	r7, [sp, #0]
   d5388:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d538c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   d5390:	f44f 7100 	mov.w	r1, #512	; 0x200
   d5394:	4633      	mov	r3, r6
   d5396:	e9cd 8901 	strd	r8, r9, [sp, #4]
   d539a:	a856      	add	r0, sp, #344	; 0x158
   d539c:	f003 f8a4 	bl	d84e8 <snprintf>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d53a0:	6960      	ldr	r0, [r4, #20]
   d53a2:	f005 f8b9 	bl	da518 <__aeabi_f2d>
   d53a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d53aa:	6920      	ldr	r0, [r4, #16]
   d53ac:	f005 f8b4 	bl	da518 <__aeabi_f2d>
   d53b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d53b4:	68e0      	ldr	r0, [r4, #12]
   d53b6:	f005 f8af 	bl	da518 <__aeabi_f2d>
   d53ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d53be:	68a0      	ldr	r0, [r4, #8]
   d53c0:	f005 f8aa 	bl	da518 <__aeabi_f2d>
   d53c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d53c8:	6860      	ldr	r0, [r4, #4]
   d53ca:	f005 f8a5 	bl	da518 <__aeabi_f2d>
   d53ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d53d2:	6820      	ldr	r0, [r4, #0]
   d53d4:	f005 f8a0 	bl	da518 <__aeabi_f2d>
   d53d8:	4a57      	ldr	r2, [pc, #348]	; (d5538 <_Z9sendEventv+0x24c>)
   d53da:	e9cd 0100 	strd	r0, r1, [sp]
   d53de:	f44f 7180 	mov.w	r1, #256	; 0x100
   d53e2:	a816      	add	r0, sp, #88	; 0x58
   d53e4:	f003 f880 	bl	d84e8 <snprintf>
    String myDeviceID = System.deviceID();                                                                                                              // Device ID
   d53e8:	a812      	add	r0, sp, #72	; 0x48
   d53ea:	f004 f893 	bl	d9514 <_ZN6StringD1Ev>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d53ee:	4d53      	ldr	r5, [pc, #332]	; (d553c <_Z9sendEventv+0x250>)
   d53f0:	4953      	ldr	r1, [pc, #332]	; (d5540 <_Z9sendEventv+0x254>)
   d53f2:	4854      	ldr	r0, [pc, #336]	; (d5544 <_Z9sendEventv+0x258>)
   d53f4:	2600      	movs	r6, #0
   d53f6:	f88d 6000 	strb.w	r6, [sp]
   d53fa:	782b      	ldrb	r3, [r5, #0]
   d53fc:	aa16      	add	r2, sp, #88	; 0x58
   d53fe:	f7fe ffbc 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  publishQueue.publish("influx_hook", influx_hook, PRIVATE);
   d5402:	f88d 6000 	strb.w	r6, [sp]
   d5406:	782b      	ldrb	r3, [r5, #0]
   d5408:	494f      	ldr	r1, [pc, #316]	; (d5548 <_Z9sendEventv+0x25c>)
   d540a:	484e      	ldr	r0, [pc, #312]	; (d5544 <_Z9sendEventv+0x258>)
   d540c:	aa56      	add	r2, sp, #344	; 0x158
   d540e:	f7fe ffb4 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d5412:	6823      	ldr	r3, [r4, #0]
   d5414:	61a3      	str	r3, [r4, #24]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d5416:	6863      	ldr	r3, [r4, #4]
   d5418:	61e3      	str	r3, [r4, #28]
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d541a:	68a3      	ldr	r3, [r4, #8]
   d541c:	6223      	str	r3, [r4, #32]
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d541e:	68e3      	ldr	r3, [r4, #12]
   d5420:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d5422:	6923      	ldr	r3, [r4, #16]
   d5424:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d5426:	6963      	ldr	r3, [r4, #20]
   d5428:	62e3      	str	r3, [r4, #44]	; 0x2c
  dataInFlight = true;                                                                      // set the data inflight flag
   d542a:	4b48      	ldr	r3, [pc, #288]	; (d554c <_Z9sendEventv+0x260>)
   d542c:	2201      	movs	r2, #1
   d542e:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5430:	f002 fd94 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d5434:	4b46      	ldr	r3, [pc, #280]	; (d5550 <_Z9sendEventv+0x264>)
   d5436:	6018      	str	r0, [r3, #0]
}
   d5438:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
   d543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5440:	4d44      	ldr	r5, [pc, #272]	; (d5554 <_Z9sendEventv+0x268>)
   d5442:	e782      	b.n	d534a <_Z9sendEventv+0x5e>
  }else if (sysStatus.operatingMode == 2){
   d5444:	2b02      	cmp	r3, #2
   d5446:	d124      	bne.n	d5492 <_Z9sendEventv+0x1a6>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d5448:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d544a:	f005 f865 	bl	da518 <__aeabi_f2d>
   d544e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5452:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5454:	f005 f860 	bl	da518 <__aeabi_f2d>
   d5458:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d545c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d545e:	f005 f85b 	bl	da518 <__aeabi_f2d>
   d5462:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5466:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d5468:	f005 f856 	bl	da518 <__aeabi_f2d>
   d546c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5470:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d5472:	f005 f851 	bl	da518 <__aeabi_f2d>
   d5476:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d547a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d547c:	f005 f84c 	bl	da518 <__aeabi_f2d>
   d5480:	e9cd 0100 	strd	r0, r1, [sp]
   d5484:	4a34      	ldr	r2, [pc, #208]	; (d5558 <_Z9sendEventv+0x26c>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d5486:	f44f 7180 	mov.w	r1, #256	; 0x100
   d548a:	a816      	add	r0, sp, #88	; 0x58
   d548c:	f003 f82c 	bl	d84e8 <snprintf>
   d5490:	e7ad      	b.n	d53ee <_Z9sendEventv+0x102>
  }else if (sysStatus.operatingMode == 3){
   d5492:	2b03      	cmp	r3, #3
   d5494:	d11f      	bne.n	d54d6 <_Z9sendEventv+0x1ea>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d5496:	6960      	ldr	r0, [r4, #20]
   d5498:	f005 f83e 	bl	da518 <__aeabi_f2d>
   d549c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d54a0:	6920      	ldr	r0, [r4, #16]
   d54a2:	f005 f839 	bl	da518 <__aeabi_f2d>
   d54a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d54aa:	68e0      	ldr	r0, [r4, #12]
   d54ac:	f005 f834 	bl	da518 <__aeabi_f2d>
   d54b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d54b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d54b6:	f005 f82f 	bl	da518 <__aeabi_f2d>
   d54ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d54be:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d54c0:	f005 f82a 	bl	da518 <__aeabi_f2d>
   d54c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d54c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d54ca:	f005 f825 	bl	da518 <__aeabi_f2d>
   d54ce:	4a23      	ldr	r2, [pc, #140]	; (d555c <_Z9sendEventv+0x270>)
   d54d0:	e9cd 0100 	strd	r0, r1, [sp]
   d54d4:	e7d7      	b.n	d5486 <_Z9sendEventv+0x19a>
  }else if (sysStatus.operatingMode == 4){
   d54d6:	2b04      	cmp	r3, #4
   d54d8:	d189      	bne.n	d53ee <_Z9sendEventv+0x102>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d54da:	6960      	ldr	r0, [r4, #20]
   d54dc:	f005 f81c 	bl	da518 <__aeabi_f2d>
   d54e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d54e4:	6920      	ldr	r0, [r4, #16]
   d54e6:	f005 f817 	bl	da518 <__aeabi_f2d>
   d54ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d54ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   d54f0:	f005 f812 	bl	da518 <__aeabi_f2d>
   d54f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d54f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d54fa:	f005 f80d 	bl	da518 <__aeabi_f2d>
   d54fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5502:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d5504:	f005 f808 	bl	da518 <__aeabi_f2d>
   d5508:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d550c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d550e:	f005 f803 	bl	da518 <__aeabi_f2d>
   d5512:	4a13      	ldr	r2, [pc, #76]	; (d5560 <_Z9sendEventv+0x274>)
   d5514:	e9cd 0100 	strd	r0, r1, [sp]
   d5518:	e7b5      	b.n	d5486 <_Z9sendEventv+0x19a>
   d551a:	bf00      	nop
   d551c:	2003e5b8 	.word	0x2003e5b8
   d5520:	2003e468 	.word	0x2003e468
   d5524:	000dcf64 	.word	0x000dcf64
   d5528:	000dcf6a 	.word	0x000dcf6a
   d552c:	000dcf6e 	.word	0x000dcf6e
   d5530:	000dcf73 	.word	0x000dcf73
   d5534:	000dcf7b 	.word	0x000dcf7b
   d5538:	000dd077 	.word	0x000dd077
   d553c:	2003db05 	.word	0x2003db05
   d5540:	000dd283 	.word	0x000dd283
   d5544:	2003e3f8 	.word	0x2003e3f8
   d5548:	000dd298 	.word	0x000dd298
   d554c:	2003db27 	.word	0x2003db27
   d5550:	2003e5ec 	.word	0x2003e5ec
   d5554:	000ddbac 	.word	0x000ddbac
   d5558:	000dd0f9 	.word	0x000dd0f9
   d555c:	000dd17d 	.word	0x000dd17d
   d5560:	000dd200 	.word	0x000dd200

000d5564 <loop>:
void loop() {
   d5564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d5566:	4c79      	ldr	r4, [pc, #484]	; (d574c <loop+0x1e8>)
   d5568:	7823      	ldrb	r3, [r4, #0]
   d556a:	3b01      	subs	r3, #1
   d556c:	2b05      	cmp	r3, #5
   d556e:	d817      	bhi.n	d55a0 <loop+0x3c>
   d5570:	e8df f003 	tbb	[pc, r3]
   d5574:	706403c6 	.word	0x706403c6
   d5578:	934a      	.short	0x934a
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d557a:	4b75      	ldr	r3, [pc, #468]	; (d5750 <loop+0x1ec>)
   d557c:	7a5b      	ldrb	r3, [r3, #9]
   d557e:	b12b      	cbz	r3, d558c <loop+0x28>
   d5580:	4b74      	ldr	r3, [pc, #464]	; (d5754 <loop+0x1f0>)
   d5582:	781b      	ldrb	r3, [r3, #0]
   d5584:	2b02      	cmp	r3, #2
   d5586:	d001      	beq.n	d558c <loop+0x28>
   d5588:	f7ff fa28 	bl	d49dc <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d558c:	f004 fa51 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d5590:	230a      	movs	r3, #10
   d5592:	fb90 f2f3 	sdiv	r2, r0, r3
   d5596:	fb02 0313 	mls	r3, r2, r3, r0
   d559a:	b90b      	cbnz	r3, d55a0 <loop+0x3c>
   d559c:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d559e:	7023      	strb	r3, [r4, #0]
  DeviceNameHelperRetained::instance().loop();
   d55a0:	f000 fe2c 	bl	d61fc <_ZN24DeviceNameHelperRetained8instanceEv>
   d55a4:	f000 fe06 	bl	d61b4 <_ZN16DeviceNameHelper4loopEv>
  CloudConfig::instance().loop();
   d55a8:	f002 f9b4 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d55ac:	f002 f9cd 	bl	d794a <_ZN11CloudConfig4loopEv>
  rtc.loop();                                                                               // keeps the clock up to date
   d55b0:	4869      	ldr	r0, [pc, #420]	; (d5758 <loop+0x1f4>)
   d55b2:	f001 fd17 	bl	d6fe4 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d55b6:	4b69      	ldr	r3, [pc, #420]	; (d575c <loop+0x1f8>)
   d55b8:	781b      	ldrb	r3, [r3, #0]
   d55ba:	b10b      	cbz	r3, d55c0 <loop+0x5c>
   d55bc:	f7ff f9e6 	bl	d498c <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d55c0:	4c67      	ldr	r4, [pc, #412]	; (d5760 <loop+0x1fc>)
   d55c2:	7823      	ldrb	r3, [r4, #0]
   d55c4:	b13b      	cbz	r3, d55d6 <loop+0x72>
   d55c6:	2330      	movs	r3, #48	; 0x30
   d55c8:	4a61      	ldr	r2, [pc, #388]	; (d5750 <loop+0x1ec>)
   d55ca:	4866      	ldr	r0, [pc, #408]	; (d5764 <loop+0x200>)
   d55cc:	2101      	movs	r1, #1
   d55ce:	f001 f92c 	bl	d682a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d55d2:	2300      	movs	r3, #0
   d55d4:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d55d6:	4c64      	ldr	r4, [pc, #400]	; (d5768 <loop+0x204>)
   d55d8:	7823      	ldrb	r3, [r4, #0]
   d55da:	b143      	cbz	r3, d55ee <loop+0x8a>
   d55dc:	238c      	movs	r3, #140	; 0x8c
   d55de:	4a63      	ldr	r2, [pc, #396]	; (d576c <loop+0x208>)
   d55e0:	4860      	ldr	r0, [pc, #384]	; (d5764 <loop+0x200>)
   d55e2:	f44f 7100 	mov.w	r1, #512	; 0x200
   d55e6:	f001 f920 	bl	d682a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d55ea:	2300      	movs	r3, #0
   d55ec:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d55ee:	4c60      	ldr	r4, [pc, #384]	; (d5770 <loop+0x20c>)
   d55f0:	7823      	ldrb	r3, [r4, #0]
   d55f2:	b13b      	cbz	r3, d5604 <loop+0xa0>
   d55f4:	2318      	movs	r3, #24
   d55f6:	4a5f      	ldr	r2, [pc, #380]	; (d5774 <loop+0x210>)
   d55f8:	485a      	ldr	r0, [pc, #360]	; (d5764 <loop+0x200>)
   d55fa:	21a0      	movs	r1, #160	; 0xa0
   d55fc:	f001 f915 	bl	d682a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d5600:	2300      	movs	r3, #0
   d5602:	7023      	strb	r3, [r4, #0]
}
   d5604:	b003      	add	sp, #12
   d5606:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5608:	4d51      	ldr	r5, [pc, #324]	; (d5750 <loop+0x1ec>)
   d560a:	7a6a      	ldrb	r2, [r5, #9]
   d560c:	b12a      	cbz	r2, d561a <loop+0xb6>
   d560e:	4b51      	ldr	r3, [pc, #324]	; (d5754 <loop+0x1f0>)
   d5610:	781b      	ldrb	r3, [r3, #0]
   d5612:	2b05      	cmp	r3, #5
   d5614:	d001      	beq.n	d561a <loop+0xb6>
   d5616:	f7ff f9e1 	bl	d49dc <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d561a:	f7ff fa85 	bl	d4b28 <_Z16takeMeasurementsv>
   d561e:	b108      	cbz	r0, d5624 <loop+0xc0>
    state = REPORTING_STATE;
   d5620:	2304      	movs	r3, #4
   d5622:	e7bc      	b.n	d559e <loop+0x3a>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d5624:	f004 fa05 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d5628:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d562a:	fb90 f2f3 	sdiv	r2, r0, r3
   d562e:	fb02 0313 	mls	r3, r2, r3, r0
   d5632:	b90b      	cbnz	r3, d5638 <loop+0xd4>
   d5634:	2303      	movs	r3, #3
   d5636:	e7b2      	b.n	d559e <loop+0x3a>
    else state = IDLE_STATE;
   d5638:	2302      	movs	r3, #2
   d563a:	e7b0      	b.n	d559e <loop+0x3a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d563c:	4b44      	ldr	r3, [pc, #272]	; (d5750 <loop+0x1ec>)
   d563e:	7a5b      	ldrb	r3, [r3, #9]
   d5640:	b12b      	cbz	r3, d564e <loop+0xea>
   d5642:	4b44      	ldr	r3, [pc, #272]	; (d5754 <loop+0x1f0>)
   d5644:	781b      	ldrb	r3, [r3, #0]
   d5646:	2b03      	cmp	r3, #3
   d5648:	d001      	beq.n	d564e <loop+0xea>
   d564a:	f7ff f9c7 	bl	d49dc <_Z22publishStateTransitionv>
    takeMeasurements();
   d564e:	f7ff fa6b 	bl	d4b28 <_Z16takeMeasurementsv>
   d5652:	e7e5      	b.n	d5620 <loop+0xbc>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d5654:	4b3e      	ldr	r3, [pc, #248]	; (d5750 <loop+0x1ec>)
   d5656:	7a5b      	ldrb	r3, [r3, #9]
   d5658:	b12b      	cbz	r3, d5666 <loop+0x102>
   d565a:	4b3e      	ldr	r3, [pc, #248]	; (d5754 <loop+0x1f0>)
   d565c:	781b      	ldrb	r3, [r3, #0]
   d565e:	2b04      	cmp	r3, #4
   d5660:	d001      	beq.n	d5666 <loop+0x102>
   d5662:	f7ff f9bb 	bl	d49dc <_Z22publishStateTransitionv>
   d5666:	f002 fe77 	bl	d8358 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d566a:	b168      	cbz	r0, d5688 <loop+0x124>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d566c:	f004 f9f2 	bl	d9a54 <_ZN9TimeClass4hourEv>
   d5670:	280c      	cmp	r0, #12
   d5672:	d105      	bne.n	d5680 <loop+0x11c>
   d5674:	f002 fe70 	bl	d8358 <spark_cloud_flag_connected>
        if (!connected()) {
   d5678:	b110      	cbz	r0, d5680 <loop+0x11c>
        return spark_sync_time(NULL);
   d567a:	2000      	movs	r0, #0
   d567c:	f002 fe8c 	bl	d8398 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d5680:	f7ff fe34 	bl	d52ec <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5684:	2306      	movs	r3, #6
   d5686:	e78a      	b.n	d559e <loop+0x3a>
        spark_cloud_flag_connect();
   d5688:	f002 fe5e 	bl	d8348 <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d568c:	2302      	movs	r3, #2
   d568e:	7023      	strb	r3, [r4, #0]
   d5690:	f002 fc64 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5694:	4b38      	ldr	r3, [pc, #224]	; (d5778 <loop+0x214>)
   d5696:	6018      	str	r0, [r3, #0]
   d5698:	e782      	b.n	d55a0 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d569a:	4b2d      	ldr	r3, [pc, #180]	; (d5750 <loop+0x1ec>)
   d569c:	7a5b      	ldrb	r3, [r3, #9]
   d569e:	b12b      	cbz	r3, d56ac <loop+0x148>
   d56a0:	4b2c      	ldr	r3, [pc, #176]	; (d5754 <loop+0x1f0>)
   d56a2:	781b      	ldrb	r3, [r3, #0]
   d56a4:	2b06      	cmp	r3, #6
   d56a6:	d001      	beq.n	d56ac <loop+0x148>
   d56a8:	f7ff f998 	bl	d49dc <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d56ac:	4b33      	ldr	r3, [pc, #204]	; (d577c <loop+0x218>)
   d56ae:	781b      	ldrb	r3, [r3, #0]
   d56b0:	b943      	cbnz	r3, d56c4 <loop+0x160>
   d56b2:	f004 f9be 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d56b6:	230a      	movs	r3, #10
   d56b8:	fb90 f2f3 	sdiv	r2, r0, r3
   d56bc:	fb02 0313 	mls	r3, r2, r3, r0
   d56c0:	2b00      	cmp	r3, #0
   d56c2:	d0b9      	beq.n	d5638 <loop+0xd4>
   d56c4:	f002 fc4a 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d56c8:	4b2d      	ldr	r3, [pc, #180]	; (d5780 <loop+0x21c>)
   d56ca:	681b      	ldr	r3, [r3, #0]
   d56cc:	1ac0      	subs	r0, r0, r3
   d56ce:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d56d2:	4298      	cmp	r0, r3
   d56d4:	f67f af64 	bls.w	d55a0 <loop+0x3c>
   d56d8:	f002 fc40 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d56dc:	4d26      	ldr	r5, [pc, #152]	; (d5778 <loop+0x214>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d56de:	4a29      	ldr	r2, [pc, #164]	; (d5784 <loop+0x220>)
      resetTimeStamp = millis();
   d56e0:	6028      	str	r0, [r5, #0]
   d56e2:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d56e4:	f88d 3000 	strb.w	r3, [sp]
   d56e8:	4b27      	ldr	r3, [pc, #156]	; (d5788 <loop+0x224>)
   d56ea:	4928      	ldr	r1, [pc, #160]	; (d578c <loop+0x228>)
   d56ec:	781b      	ldrb	r3, [r3, #0]
   d56ee:	4828      	ldr	r0, [pc, #160]	; (d5790 <loop+0x22c>)
   d56f0:	f7fe fe43 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d56f4:	2301      	movs	r3, #1
   d56f6:	7023      	strb	r3, [r4, #0]
   d56f8:	f002 fc30 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d56fc:	6028      	str	r0, [r5, #0]
   d56fe:	e74f      	b.n	d55a0 <loop+0x3c>
    if (state != oldState) publishStateTransition();
   d5700:	4b14      	ldr	r3, [pc, #80]	; (d5754 <loop+0x1f0>)
   d5702:	781b      	ldrb	r3, [r3, #0]
   d5704:	2b01      	cmp	r3, #1
   d5706:	d001      	beq.n	d570c <loop+0x1a8>
   d5708:	f7ff f968 	bl	d49dc <_Z22publishStateTransitionv>
   d570c:	f002 fc26 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5710:	4b19      	ldr	r3, [pc, #100]	; (d5778 <loop+0x214>)
   d5712:	681b      	ldr	r3, [r3, #0]
   d5714:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d5718:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d571c:	4283      	cmp	r3, r0
   d571e:	f4bf af3f 	bcs.w	d55a0 <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5722:	f002 fe19 	bl	d8358 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d5726:	b148      	cbz	r0, d573c <loop+0x1d8>
   d5728:	2300      	movs	r3, #0
   d572a:	f88d 3000 	strb.w	r3, [sp]
   d572e:	4b16      	ldr	r3, [pc, #88]	; (d5788 <loop+0x224>)
   d5730:	4a18      	ldr	r2, [pc, #96]	; (d5794 <loop+0x230>)
   d5732:	781b      	ldrb	r3, [r3, #0]
   d5734:	4918      	ldr	r1, [pc, #96]	; (d5798 <loop+0x234>)
   d5736:	4816      	ldr	r0, [pc, #88]	; (d5790 <loop+0x22c>)
   d5738:	f7fe fe1f 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d573c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5740:	f002 ff22 	bl	d8588 <delay>
      System.reset();
   d5744:	f003 fffa 	bl	d973c <_ZN11SystemClass5resetEv>
   d5748:	e72a      	b.n	d55a0 <loop+0x3c>
   d574a:	bf00      	nop
   d574c:	2003e5b5 	.word	0x2003e5b5
   d5750:	2003e5b8 	.word	0x2003e5b8
   d5754:	2003e3f4 	.word	0x2003e3f4
   d5758:	2003e434 	.word	0x2003e434
   d575c:	2003e5e9 	.word	0x2003e5e9
   d5760:	2003e5e8 	.word	0x2003e5e8
   d5764:	2003e3c8 	.word	0x2003e3c8
   d5768:	2003e4f4 	.word	0x2003e4f4
   d576c:	2003e468 	.word	0x2003e468
   d5770:	2003db26 	.word	0x2003db26
   d5774:	2003e450 	.word	0x2003e450
   d5778:	2003e430 	.word	0x2003e430
   d577c:	2003db27 	.word	0x2003db27
   d5780:	2003e5ec 	.word	0x2003e5ec
   d5784:	000ddbac 	.word	0x000ddbac
   d5788:	2003db05 	.word	0x2003db05
   d578c:	000dd2a4 	.word	0x000dd2a4
   d5790:	2003e3f8 	.word	0x2003e3f8
   d5794:	000dd2bd 	.word	0x000dd2bd
   d5798:	000dd2d1 	.word	0x000dd2d1

000d579c <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d579c:	b500      	push	{lr}
   d579e:	b089      	sub	sp, #36	; 0x24
      Particle.publish("Device Name",String(name), PRIVATE);
   d57a0:	6809      	ldr	r1, [r1, #0]
   d57a2:	a804      	add	r0, sp, #16
   d57a4:	f003 ff01 	bl	d95aa <_ZN6StringC1EPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d57a8:	4b09      	ldr	r3, [pc, #36]	; (d57d0 <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_+0x34>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d57aa:	9a04      	ldr	r2, [sp, #16]
   d57ac:	781b      	ldrb	r3, [r3, #0]
   d57ae:	4909      	ldr	r1, [pc, #36]	; (d57d4 <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_+0x38>)
   d57b0:	f88d 3000 	strb.w	r3, [sp]
   d57b4:	a802      	add	r0, sp, #8
   d57b6:	233c      	movs	r3, #60	; 0x3c
   d57b8:	f003 f876 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d57bc:	a803      	add	r0, sp, #12
   d57be:	f7ff fd47 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57c2:	a804      	add	r0, sp, #16
   d57c4:	f003 fea6 	bl	d9514 <_ZN6StringD1Ev>
      }
   d57c8:	b009      	add	sp, #36	; 0x24
   d57ca:	f85d fb04 	ldr.w	pc, [sp], #4
   d57ce:	bf00      	nop
   d57d0:	2003db05 	.word	0x2003db05
   d57d4:	000dd2d7 	.word	0x000dd2d7

000d57d8 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d57d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d57da:	4b09      	ldr	r3, [pc, #36]	; (d5800 <_Z16keepAliveMessagev+0x28>)
   d57dc:	4a09      	ldr	r2, [pc, #36]	; (d5804 <_Z16keepAliveMessagev+0x2c>)
   d57de:	781b      	ldrb	r3, [r3, #0]
   d57e0:	7812      	ldrb	r2, [r2, #0]
   d57e2:	4909      	ldr	r1, [pc, #36]	; (d5808 <_Z16keepAliveMessagev+0x30>)
   d57e4:	4313      	orrs	r3, r2
   d57e6:	f88d 3000 	strb.w	r3, [sp]
   d57ea:	2200      	movs	r2, #0
   d57ec:	233c      	movs	r3, #60	; 0x3c
   d57ee:	a802      	add	r0, sp, #8
   d57f0:	f003 f85a 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d57f4:	a803      	add	r0, sp, #12
   d57f6:	f7ff fd2b 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d57fa:	b005      	add	sp, #20
   d57fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d5800:	2003db04 	.word	0x2003db04
   d5804:	2003db05 	.word	0x2003db05
   d5808:	000dd2e3 	.word	0x000dd2e3

000d580c <_Z7logJsonv>:

void logJson() {
   d580c:	b510      	push	{r4, lr}
   d580e:	b088      	sub	sp, #32
    if (CloudConfig::instance().getJSONValueForKey("alias").isValid()) {
   d5810:	f002 f880 	bl	d7914 <_ZN11CloudConfig8instanceEv>
    JSONValue getJSONValueForKey(const char *key) { return storageMethod->getJSONValueForKey(key); };
   d5814:	4a16      	ldr	r2, [pc, #88]	; (d5870 <_Z7logJsonv+0x64>)
   d5816:	6841      	ldr	r1, [r0, #4]
   d5818:	a804      	add	r0, sp, #16
   d581a:	f7ff fd2f 	bl	d527c <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>
inline bool spark::JSONValue::isObject() const {
    return type() == JSON_TYPE_OBJECT;
}

inline bool spark::JSONValue::isValid() const {
    return type() != JSON_TYPE_INVALID;
   d581e:	a804      	add	r0, sp, #16
   d5820:	f003 fb90 	bl	d8f44 <_ZNK5spark9JSONValue4typeEv>
   d5824:	4604      	mov	r4, r0
   d5826:	a805      	add	r0, sp, #20
   d5828:	f7ff fd12 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d582c:	b1dc      	cbz	r4, d5866 <_Z7logJsonv+0x5a>
      Particle.publish("Client Name",String(CloudConfig::instance().getString("alias")),PRIVATE);
   d582e:	f002 f871 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d5832:	490f      	ldr	r1, [pc, #60]	; (d5870 <_Z7logJsonv+0x64>)
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	f7ff fd37 	bl	d52a8 <_ZN11CloudConfig9getStringEPKc.isra.0>
   d583a:	4601      	mov	r1, r0
   d583c:	a804      	add	r0, sp, #16
   d583e:	f003 feb4 	bl	d95aa <_ZN6StringC1EPKc>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5842:	4b0c      	ldr	r3, [pc, #48]	; (d5874 <_Z7logJsonv+0x68>)
   d5844:	9a04      	ldr	r2, [sp, #16]
   d5846:	781b      	ldrb	r3, [r3, #0]
   d5848:	490b      	ldr	r1, [pc, #44]	; (d5878 <_Z7logJsonv+0x6c>)
   d584a:	f88d 3000 	strb.w	r3, [sp]
   d584e:	a802      	add	r0, sp, #8
   d5850:	233c      	movs	r3, #60	; 0x3c
   d5852:	f003 f829 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5856:	a803      	add	r0, sp, #12
   d5858:	f7ff fcfa 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d585c:	a804      	add	r0, sp, #16
   d585e:	f003 fe59 	bl	d9514 <_ZN6StringD1Ev>
    }
    else {
        Log.info("no config set");
    }
   d5862:	b008      	add	sp, #32
   d5864:	bd10      	pop	{r4, pc}
        Log.info("no config set");
   d5866:	4905      	ldr	r1, [pc, #20]	; (d587c <_Z7logJsonv+0x70>)
   d5868:	4805      	ldr	r0, [pc, #20]	; (d5880 <_Z7logJsonv+0x74>)
   d586a:	f7fe fd6f 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d586e:	e7f8      	b.n	d5862 <_Z7logJsonv+0x56>
   d5870:	000dcf64 	.word	0x000dcf64
   d5874:	2003db05 	.word	0x2003db05
   d5878:	000dd2e5 	.word	0x000dd2e5
   d587c:	000dd2f1 	.word	0x000dd2f1
   d5880:	2003e614 	.word	0x2003e614

000d5884 <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5884:	b508      	push	{r3, lr}
            Log.info("dataCallback");        
   d5886:	4904      	ldr	r1, [pc, #16]	; (d5898 <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data+0x14>)
   d5888:	4804      	ldr	r0, [pc, #16]	; (d589c <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data+0x18>)
   d588a:	f7fe fd5f 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
      }
   d588e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            logJson();
   d5892:	f7ff bfbb 	b.w	d580c <_Z7logJsonv>
   d5896:	bf00      	nop
   d5898:	000dd2ff 	.word	0x000dd2ff
   d589c:	2003e614 	.word	0x2003e614

000d58a0 <_ZN18CloudConfigStorage5parseEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };
   d58a0:	b510      	push	{r4, lr}
   d58a2:	6803      	ldr	r3, [r0, #0]
   d58a4:	b088      	sub	sp, #32
   d58a6:	685b      	ldr	r3, [r3, #4]
   d58a8:	4604      	mov	r4, r0
   d58aa:	4798      	blx	r3
   d58ac:	9001      	str	r0, [sp, #4]
}

inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
    return parseCopy(json, strlen(json));
   d58ae:	f005 fa9a 	bl	dade6 <strlen>
   d58b2:	9901      	ldr	r1, [sp, #4]
   d58b4:	4602      	mov	r2, r0
   d58b6:	a805      	add	r0, sp, #20
   d58b8:	f003 fcb0 	bl	d921c <_ZN5spark9JSONValue9parseCopyEPKcj>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58bc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	__r._M_pi = _M_pi;
   d58c0:	2300      	movs	r3, #0

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d58c6:	6863      	ldr	r3, [r4, #4]
   d58c8:	9303      	str	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d58ca:	6061      	str	r1, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58cc:	68a3      	ldr	r3, [r4, #8]
	__r._M_pi = _M_pi;
   d58ce:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d58d0:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
   d58d2:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
   d58d4:	f7ff fcbc 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class JSONValue {
   d58d8:	9b07      	ldr	r3, [sp, #28]
   d58da:	60e3      	str	r3, [r4, #12]
   d58dc:	a806      	add	r0, sp, #24
   d58de:	f7ff fcb7 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58e2:	b008      	add	sp, #32
   d58e4:	bd10      	pop	{r4, pc}
	...

000d58e8 <_ZN26CloudConfigStorageRetainedD1Ev>:
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d58e8:	b510      	push	{r4, lr}
    virtual ~CloudConfigStorage() {};
   d58ea:	4b04      	ldr	r3, [pc, #16]	; (d58fc <_ZN26CloudConfigStorageRetainedD1Ev+0x14>)
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d58ec:	4604      	mov	r4, r0
    virtual ~CloudConfigStorage() {};
   d58ee:	f840 3b04 	str.w	r3, [r0], #4
   d58f2:	3004      	adds	r0, #4
   d58f4:	f7ff fcac 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d58f8:	4620      	mov	r0, r4
   d58fa:	bd10      	pop	{r4, pc}
   d58fc:	000dd508 	.word	0x000dd508

000d5900 <_ZN26CloudConfigStorageRetainedD0Ev>:
   d5900:	b510      	push	{r4, lr}
   d5902:	4604      	mov	r4, r0
   d5904:	f7ff fff0 	bl	d58e8 <_ZN26CloudConfigStorageRetainedD1Ev>
   d5908:	4620      	mov	r0, r4
   d590a:	2118      	movs	r1, #24
   d590c:	f004 fb73 	bl	d9ff6 <_ZdlPvj>
   d5910:	4620      	mov	r0, r4
   d5912:	bd10      	pop	{r4, pc}

000d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5914:	b513      	push	{r0, r1, r4, lr}
   d5916:	460b      	mov	r3, r1
   d5918:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d591a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d591e:	466c      	mov	r4, sp
   d5920:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5924:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5928:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d592c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5930:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5934:	b002      	add	sp, #8
   d5936:	bd10      	pop	{r4, pc}

000d5938 <setup>:
void setup() {
   d5938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d593c:	2100      	movs	r1, #0
void setup() {
   d593e:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5940:	2008      	movs	r0, #8
   d5942:	f004 fad1 	bl	d9ee8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d5946:	2101      	movs	r1, #1
   d5948:	2005      	movs	r0, #5
   d594a:	f004 facd 	bl	d9ee8 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d594e:	f7ff f81d 	bl	d498c <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d5952:	2300      	movs	r3, #0
   d5954:	9300      	str	r3, [sp, #0]
   d5956:	2201      	movs	r2, #1
   d5958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d595c:	49af      	ldr	r1, [pc, #700]	; (d5c1c <setup+0x2e4>)
   d595e:	2008      	movs	r0, #8
   d5960:	f003 f9e2 	bl	d8d28 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5964:	4bae      	ldr	r3, [pc, #696]	; (d5c20 <setup+0x2e8>)
   d5966:	aa0a      	add	r2, sp, #40	; 0x28
   d5968:	f103 0510 	add.w	r5, r3, #16
   d596c:	4617      	mov	r7, r2
   d596e:	6818      	ldr	r0, [r3, #0]
   d5970:	6859      	ldr	r1, [r3, #4]
   d5972:	4614      	mov	r4, r2
   d5974:	c403      	stmia	r4!, {r0, r1}
   d5976:	3308      	adds	r3, #8
   d5978:	42ab      	cmp	r3, r5
   d597a:	4622      	mov	r2, r4
   d597c:	d1f7      	bne.n	d596e <setup+0x36>
   d597e:	8819      	ldrh	r1, [r3, #0]
   d5980:	789b      	ldrb	r3, [r3, #2]
   d5982:	70a3      	strb	r3, [r4, #2]
   d5984:	222d      	movs	r2, #45	; 0x2d
   d5986:	8021      	strh	r1, [r4, #0]
   d5988:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d598c:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d598e:	4ca5      	ldr	r4, [pc, #660]	; (d5c24 <setup+0x2ec>)
   d5990:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5992:	f005 f9cd 	bl	dad30 <memset>
   d5996:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d5998:	7026      	strb	r6, [r4, #0]
   d599a:	f002 fce5 	bl	d8368 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d599e:	a902      	add	r1, sp, #8
   d59a0:	a806      	add	r0, sp, #24
   d59a2:	f003 fe25 	bl	d95f0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d59a6:	49a0      	ldr	r1, [pc, #640]	; (d5c28 <setup+0x2f0>)
   d59a8:	a806      	add	r0, sp, #24
   d59aa:	f003 fe55 	bl	d9658 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d59ae:	e9cd 6600 	strd	r6, r6, [sp]
   d59b2:	4633      	mov	r3, r6
   d59b4:	4632      	mov	r2, r6
   d59b6:	499d      	ldr	r1, [pc, #628]	; (d5c2c <setup+0x2f4>)
   d59b8:	6800      	ldr	r0, [r0, #0]
   d59ba:	f002 fce5 	bl	d8388 <spark_subscribe>
class StringSumHelper : public String
   d59be:	a806      	add	r0, sp, #24
   d59c0:	f003 fda8 	bl	d9514 <_ZN6StringD1Ev>
   d59c4:	a802      	add	r0, sp, #8
   d59c6:	f003 fda5 	bl	d9514 <_ZN6StringD1Ev>
        return _variable(varKey, var, STRING);
   d59ca:	4999      	ldr	r1, [pc, #612]	; (d5c30 <setup+0x2f8>)
   d59cc:	4899      	ldr	r0, [pc, #612]	; (d5c34 <setup+0x2fc>)
   d59ce:	f7fe fc52 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d59d2:	4999      	ldr	r1, [pc, #612]	; (d5c38 <setup+0x300>)
   d59d4:	4899      	ldr	r0, [pc, #612]	; (d5c3c <setup+0x304>)
   d59d6:	f7fe fc4e 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d59da:	4999      	ldr	r1, [pc, #612]	; (d5c40 <setup+0x308>)
   d59dc:	4899      	ldr	r0, [pc, #612]	; (d5c44 <setup+0x30c>)
   d59de:	f7fe fc4a 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d59e2:	4633      	mov	r3, r6
   d59e4:	4998      	ldr	r1, [pc, #608]	; (d5c48 <setup+0x310>)
   d59e6:	4899      	ldr	r0, [pc, #612]	; (d5c4c <setup+0x314>)
   d59e8:	2202      	movs	r2, #2
   d59ea:	f002 fc95 	bl	d8318 <spark_variable>
   d59ee:	4633      	mov	r3, r6
   d59f0:	2201      	movs	r2, #1
   d59f2:	4997      	ldr	r1, [pc, #604]	; (d5c50 <setup+0x318>)
   d59f4:	4897      	ldr	r0, [pc, #604]	; (d5c54 <setup+0x31c>)
   d59f6:	f002 fc8f 	bl	d8318 <spark_variable>
        return _variable(varKey, var, STRING);
   d59fa:	4997      	ldr	r1, [pc, #604]	; (d5c58 <setup+0x320>)
   d59fc:	4897      	ldr	r0, [pc, #604]	; (d5c5c <setup+0x324>)
   d59fe:	f7fe fc3a 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5a02:	4997      	ldr	r1, [pc, #604]	; (d5c60 <setup+0x328>)
   d5a04:	4897      	ldr	r0, [pc, #604]	; (d5c64 <setup+0x32c>)
   d5a06:	f7fe fc36 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5a0a:	4997      	ldr	r1, [pc, #604]	; (d5c68 <setup+0x330>)
   d5a0c:	4897      	ldr	r0, [pc, #604]	; (d5c6c <setup+0x334>)
   d5a0e:	f7fe fc32 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5a12:	4997      	ldr	r1, [pc, #604]	; (d5c70 <setup+0x338>)
   d5a14:	4897      	ldr	r0, [pc, #604]	; (d5c74 <setup+0x33c>)
   d5a16:	f7fe fc2e 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5a1a:	4997      	ldr	r1, [pc, #604]	; (d5c78 <setup+0x340>)
   d5a1c:	4897      	ldr	r0, [pc, #604]	; (d5c7c <setup+0x344>)
   d5a1e:	f7fe fc2a 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5a22:	4997      	ldr	r1, [pc, #604]	; (d5c80 <setup+0x348>)
   d5a24:	4897      	ldr	r0, [pc, #604]	; (d5c84 <setup+0x34c>)
   d5a26:	f7fe fc26 	bl	d4276 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5a2a:	4633      	mov	r3, r6
   d5a2c:	4996      	ldr	r1, [pc, #600]	; (d5c88 <setup+0x350>)
   d5a2e:	4897      	ldr	r0, [pc, #604]	; (d5c8c <setup+0x354>)
   d5a30:	2202      	movs	r2, #2
   d5a32:	f002 fc71 	bl	d8318 <spark_variable>
   d5a36:	4633      	mov	r3, r6
   d5a38:	2202      	movs	r2, #2
   d5a3a:	4995      	ldr	r1, [pc, #596]	; (d5c90 <setup+0x358>)
   d5a3c:	4895      	ldr	r0, [pc, #596]	; (d5c94 <setup+0x35c>)
   d5a3e:	f002 fc6b 	bl	d8318 <spark_variable>
        return _function(name, args...);
   d5a42:	4995      	ldr	r1, [pc, #596]	; (d5c98 <setup+0x360>)
   d5a44:	4895      	ldr	r0, [pc, #596]	; (d5c9c <setup+0x364>)
   d5a46:	f7fe fc57 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a4a:	4995      	ldr	r1, [pc, #596]	; (d5ca0 <setup+0x368>)
   d5a4c:	4895      	ldr	r0, [pc, #596]	; (d5ca4 <setup+0x36c>)
   d5a4e:	f7fe fc53 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a52:	4995      	ldr	r1, [pc, #596]	; (d5ca8 <setup+0x370>)
   d5a54:	4895      	ldr	r0, [pc, #596]	; (d5cac <setup+0x374>)
   d5a56:	f7fe fc4f 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a5a:	4995      	ldr	r1, [pc, #596]	; (d5cb0 <setup+0x378>)
   d5a5c:	487d      	ldr	r0, [pc, #500]	; (d5c54 <setup+0x31c>)
   d5a5e:	f7fe fc4b 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a62:	4994      	ldr	r1, [pc, #592]	; (d5cb4 <setup+0x37c>)
   d5a64:	4894      	ldr	r0, [pc, #592]	; (d5cb8 <setup+0x380>)
   d5a66:	f7fe fc47 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a6a:	4994      	ldr	r1, [pc, #592]	; (d5cbc <setup+0x384>)
   d5a6c:	4894      	ldr	r0, [pc, #592]	; (d5cc0 <setup+0x388>)
   d5a6e:	f7fe fc43 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a72:	4994      	ldr	r1, [pc, #592]	; (d5cc4 <setup+0x38c>)
   d5a74:	4894      	ldr	r0, [pc, #592]	; (d5cc8 <setup+0x390>)
   d5a76:	f7fe fc3f 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a7a:	4994      	ldr	r1, [pc, #592]	; (d5ccc <setup+0x394>)
   d5a7c:	4894      	ldr	r0, [pc, #592]	; (d5cd0 <setup+0x398>)
   d5a7e:	f7fe fc3b 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a82:	4994      	ldr	r1, [pc, #592]	; (d5cd4 <setup+0x39c>)
   d5a84:	4894      	ldr	r0, [pc, #592]	; (d5cd8 <setup+0x3a0>)
   d5a86:	f7fe fc37 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a8a:	4994      	ldr	r1, [pc, #592]	; (d5cdc <setup+0x3a4>)
   d5a8c:	4894      	ldr	r0, [pc, #592]	; (d5ce0 <setup+0x3a8>)
   d5a8e:	f7fe fc33 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a92:	4994      	ldr	r1, [pc, #592]	; (d5ce4 <setup+0x3ac>)
   d5a94:	4894      	ldr	r0, [pc, #592]	; (d5ce8 <setup+0x3b0>)
   d5a96:	f7fe fc2f 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5a9a:	4994      	ldr	r1, [pc, #592]	; (d5cec <setup+0x3b4>)
   d5a9c:	4894      	ldr	r0, [pc, #592]	; (d5cf0 <setup+0x3b8>)
   d5a9e:	f7fe fc2b 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5aa2:	4994      	ldr	r1, [pc, #592]	; (d5cf4 <setup+0x3bc>)
   d5aa4:	4894      	ldr	r0, [pc, #592]	; (d5cf8 <setup+0x3c0>)
   d5aa6:	f7fe fc27 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5aaa:	4994      	ldr	r1, [pc, #592]	; (d5cfc <setup+0x3c4>)
   d5aac:	4894      	ldr	r0, [pc, #592]	; (d5d00 <setup+0x3c8>)
   d5aae:	f7fe fc23 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5ab2:	4994      	ldr	r1, [pc, #592]	; (d5d04 <setup+0x3cc>)
   d5ab4:	4894      	ldr	r0, [pc, #592]	; (d5d08 <setup+0x3d0>)
   d5ab6:	f7fe fc1f 	bl	d42f8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d5aba:	4894      	ldr	r0, [pc, #592]	; (d5d0c <setup+0x3d4>)
   d5abc:	f001 f98c 	bl	d6dd8 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5ac0:	4631      	mov	r1, r6
   d5ac2:	4892      	ldr	r0, [pc, #584]	; (d5d0c <setup+0x3d4>)
   d5ac4:	f001 fac5 	bl	d7052 <_ZN8MCP7941010clearAlarmEi>
    CloudConfig::instance()
   d5ac8:	f001 ff24 	bl	d7914 <_ZN11CloudConfig8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d5acc:	4b90      	ldr	r3, [pc, #576]	; (d5d10 <setup+0x3d8>)
   d5ace:	9305      	str	r3, [sp, #20]
   d5ad0:	4605      	mov	r5, r0
	    _M_manager = &_My_handler::_M_manager;
   d5ad2:	4b90      	ldr	r3, [pc, #576]	; (d5d14 <setup+0x3dc>)
   d5ad4:	9304      	str	r3, [sp, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ad6:	2202      	movs	r2, #2
   d5ad8:	a902      	add	r1, sp, #8
   d5ada:	a806      	add	r0, sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5adc:	9608      	str	r6, [sp, #32]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ade:	f7fe fb12 	bl	d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d5ae2:	9b05      	ldr	r3, [sp, #20]
   d5ae4:	9309      	str	r3, [sp, #36]	; 0x24
	std::swap(_M_functor, __x._M_functor);
   d5ae6:	f105 010c 	add.w	r1, r5, #12
	  _M_manager = __x._M_manager;
   d5aea:	9b04      	ldr	r3, [sp, #16]
   d5aec:	9308      	str	r3, [sp, #32]
	std::swap(_M_functor, __x._M_functor);
   d5aee:	a806      	add	r0, sp, #24
   d5af0:	f7ff ff10 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5af4:	9b08      	ldr	r3, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   d5af6:	696a      	ldr	r2, [r5, #20]
   d5af8:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   d5afa:	616b      	str	r3, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   d5afe:	69aa      	ldr	r2, [r5, #24]
   d5b00:	9209      	str	r2, [sp, #36]	; 0x24
    class function<_Res(_ArgTypes...)>
   d5b02:	a806      	add	r0, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
   d5b04:	61ab      	str	r3, [r5, #24]
   d5b06:	f7fe fbba 	bl	d427e <_ZNSt14_Function_baseD1Ev>
    CloudConfig &withUpdateFrequency(std::chrono::seconds chronoLiteral) { this->updateFrequency = chronoLiteral.count(); return *this; };
   d5b0a:	4b83      	ldr	r3, [pc, #524]	; (d5d18 <setup+0x3e0>)
   d5b0c:	61eb      	str	r3, [r5, #28]
        .withUpdateMethod(new CloudConfigUpdateWebhook("CloudConfigDeviceNotes"))
   d5b0e:	202c      	movs	r0, #44	; 0x2c
   d5b10:	f7fe fac1 	bl	d4096 <_Znwj>
   d5b14:	4606      	mov	r6, r0
   d5b16:	b110      	cbz	r0, d5b1e <setup+0x1e6>
   d5b18:	4980      	ldr	r1, [pc, #512]	; (d5d1c <setup+0x3e4>)
   d5b1a:	f001 ff49 	bl	d79b0 <_ZN24CloudConfigUpdateWebhookC1EPKc>
    CloudConfig &withUpdateMethod(CloudConfigUpdate *updateMethod) { this->updateMethod = updateMethod; return *this; };
   d5b1e:	60ae      	str	r6, [r5, #8]
        .withStorageMethod(new CloudConfigStorageRetained(&retainedConfig, sizeof(retainedConfig)))
   d5b20:	2018      	movs	r0, #24
   d5b22:	f7fe fab8 	bl	d4096 <_Znwj>
   d5b26:	4606      	mov	r6, r0
   d5b28:	b130      	cbz	r0, d5b38 <setup+0x200>
    CloudConfigStorageRetained(void *retainedData, size_t totalSize) : CloudConfigStorageData((CloudConfigDataHeader *)retainedData, totalSize - sizeof(CloudConfigDataHeader)) {};
   d5b2a:	497d      	ldr	r1, [pc, #500]	; (d5d20 <setup+0x3e8>)
   d5b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d5b30:	f001 feae 	bl	d7890 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>
   d5b34:	4b7b      	ldr	r3, [pc, #492]	; (d5d24 <setup+0x3ec>)
   d5b36:	6033      	str	r3, [r6, #0]
        .setup();
   d5b38:	4628      	mov	r0, r5
    CloudConfig &withStorageMethod(CloudConfigStorage *storageMethod) { this->storageMethod = storageMethod; return *this; };
   d5b3a:	606e      	str	r6, [r5, #4]
   d5b3c:	f002 f868 	bl	d7c10 <_ZN11CloudConfig5setupEv>
   d5b40:	a802      	add	r0, sp, #8
   d5b42:	f7fe fb9c 	bl	d427e <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().withNameCallback([](const char *name) {
   d5b46:	f000 fb59 	bl	d61fc <_ZN24DeviceNameHelperRetained8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d5b4a:	4b77      	ldr	r3, [pc, #476]	; (d5d28 <setup+0x3f0>)
   d5b4c:	9309      	str	r3, [sp, #36]	; 0x24
  });
   d5b4e:	a906      	add	r1, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   d5b50:	4b76      	ldr	r3, [pc, #472]	; (d5d2c <setup+0x3f4>)
   d5b52:	9308      	str	r3, [sp, #32]
   d5b54:	f000 fb7d 	bl	d6252 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>
    class function<_Res(_ArgTypes...)>
   d5b58:	a806      	add	r0, sp, #24
   d5b5a:	f7fe fb90 	bl	d427e <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().setup(&deviceNameHelperRetained);
   d5b5e:	f000 fb4d 	bl	d61fc <_ZN24DeviceNameHelperRetained8instanceEv>
   d5b62:	4973      	ldr	r1, [pc, #460]	; (d5d30 <setup+0x3f8>)
   d5b64:	f000 fbe0 	bl	d6328 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>
  fram.begin();                                                                             // Initialize the FRAM module
   d5b68:	4872      	ldr	r0, [pc, #456]	; (d5d34 <setup+0x3fc>)
   d5b6a:	f000 fdd1 	bl	d6710 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5b6e:	2301      	movs	r3, #1
   d5b70:	4870      	ldr	r0, [pc, #448]	; (d5d34 <setup+0x3fc>)
   d5b72:	aa06      	add	r2, sp, #24
   d5b74:	2100      	movs	r1, #0
   d5b76:	f000 fe0d 	bl	d6794 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d5b7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5b7e:	2b16      	cmp	r3, #22
   d5b80:	f000 80e6 	beq.w	d5d50 <setup+0x418>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d5b84:	486b      	ldr	r0, [pc, #428]	; (d5d34 <setup+0x3fc>)
   d5b86:	f000 fdcd 	bl	d6724 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5b8a:	4a6b      	ldr	r2, [pc, #428]	; (d5d38 <setup+0x400>)
   d5b8c:	4869      	ldr	r0, [pc, #420]	; (d5d34 <setup+0x3fc>)
   d5b8e:	2304      	movs	r3, #4
   d5b90:	2100      	movs	r1, #0
   d5b92:	f000 fe4a 	bl	d682a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5b96:	2301      	movs	r3, #1
   d5b98:	4866      	ldr	r0, [pc, #408]	; (d5d34 <setup+0x3fc>)
   d5b9a:	aa06      	add	r2, sp, #24
   d5b9c:	2100      	movs	r1, #0
   d5b9e:	f000 fdf9 	bl	d6794 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d5ba2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5ba6:	2b16      	cmp	r3, #22
   d5ba8:	d029      	beq.n	d5bfe <setup+0x2c6>
   d5baa:	2301      	movs	r3, #1
   d5bac:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d5bae:	4d63      	ldr	r5, [pc, #396]	; (d5d3c <setup+0x404>)
  checkConstantValues();
   d5bb0:	f7fe fe7c 	bl	d48ac <_Z19checkConstantValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5bb4:	f7fe fe4a 	bl	d484c <_Z17checkSystemValuesv>
  loadEmonlib();
   d5bb8:	f7ff f94e 	bl	d4e58 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d5bbc:	786b      	ldrb	r3, [r5, #1]
   d5bbe:	2b00      	cmp	r3, #0
   d5bc0:	f000 80eb 	beq.w	d5d9a <setup+0x462>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	f002 f9d9 	bl	d7f7c <hal_timer_millis>
   d5bca:	f04f 0a00 	mov.w	sl, #0
   d5bce:	4606      	mov	r6, r0
   d5bd0:	2000      	movs	r0, #0
   d5bd2:	f002 f9d3 	bl	d7f7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bd6:	ebb0 0806 	subs.w	r8, r0, r6
   d5bda:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d5bde:	2300      	movs	r3, #0
   d5be0:	f247 522f 	movw	r2, #29999	; 0x752f
   d5be4:	454b      	cmp	r3, r9
   d5be6:	bf08      	it	eq
   d5be8:	4542      	cmpeq	r2, r8
   d5bea:	f0c0 80c8 	bcc.w	d5d7e <setup+0x446>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5bee:	f002 fbb3 	bl	d8358 <spark_cloud_flag_connected>
   d5bf2:	2800      	cmp	r0, #0
   d5bf4:	f040 80c3 	bne.w	d5d7e <setup+0x446>
            spark_process();
   d5bf8:	f002 fb9e 	bl	d8338 <spark_process>
        while (_while() && !_condition()) {
   d5bfc:	e7e8      	b.n	d5bd0 <setup+0x298>
        val_(0) {
   d5bfe:	2300      	movs	r3, #0
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d5c00:	f88d 3000 	strb.w	r3, [sp]
   d5c04:	4b4e      	ldr	r3, [pc, #312]	; (d5d40 <setup+0x408>)
   d5c06:	4a4f      	ldr	r2, [pc, #316]	; (d5d44 <setup+0x40c>)
   d5c08:	781b      	ldrb	r3, [r3, #0]
   d5c0a:	494f      	ldr	r1, [pc, #316]	; (d5d48 <setup+0x410>)
   d5c0c:	484f      	ldr	r0, [pc, #316]	; (d5d4c <setup+0x414>)
   d5c0e:	f7fe fbb4 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d5c12:	f7fe fdb9 	bl	d4788 <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d5c16:	f7fe fde9 	bl	d47ec <_Z20loadConstantDefaultsv>
   d5c1a:	e7c8      	b.n	d5bae <setup+0x276>
   d5c1c:	000d40e1 	.word	0x000d40e1
   d5c20:	000dd570 	.word	0x000dd570
   d5c24:	2003e5b5 	.word	0x2003e5b5
   d5c28:	000dd30c 	.word	0x000dd30c
   d5c2c:	000d4395 	.word	0x000d4395
   d5c30:	000dd5b0 	.word	0x000dd5b0
   d5c34:	000dd331 	.word	0x000dd331
   d5c38:	2003db16 	.word	0x2003db16
   d5c3c:	000dd339 	.word	0x000dd339
   d5c40:	2003db06 	.word	0x2003db06
   d5c44:	000dd341 	.word	0x000dd341
   d5c48:	2003e5bc 	.word	0x2003e5bc
   d5c4c:	000dd350 	.word	0x000dd350
   d5c50:	2003e5b9 	.word	0x2003e5b9
   d5c54:	000dcc96 	.word	0x000dcc96
   d5c58:	2003e535 	.word	0x2003e535
   d5c5c:	000dd39e 	.word	0x000dd39e
   d5c60:	2003e595 	.word	0x2003e595
   d5c64:	000dd3af 	.word	0x000dd3af
   d5c68:	2003e575 	.word	0x2003e575
   d5c6c:	000dd3c0 	.word	0x000dd3c0
   d5c70:	2003e515 	.word	0x2003e515
   d5c74:	000dd3d3 	.word	0x000dd3d3
   d5c78:	2003e4f5 	.word	0x2003e4f5
   d5c7c:	000dd3e5 	.word	0x000dd3e5
   d5c80:	2003e555 	.word	0x2003e555
   d5c84:	000dd3f7 	.word	0x000dd3f7
   d5c88:	2003e5dc 	.word	0x2003e5dc
   d5c8c:	000dd35f 	.word	0x000dd35f
   d5c90:	2003e5e0 	.word	0x2003e5e0
   d5c94:	000dd372 	.word	0x000dd372
   d5c98:	000d4121 	.word	0x000d4121
   d5c9c:	000dd381 	.word	0x000dd381
   d5ca0:	000d4599 	.word	0x000d4599
   d5ca4:	000dd38d 	.word	0x000dd38d
   d5ca8:	000d44c5 	.word	0x000d44c5
   d5cac:	000dccd3 	.word	0x000dccd3
   d5cb0:	000d4429 	.word	0x000d4429
   d5cb4:	000d5071 	.word	0x000d5071
   d5cb8:	000dd39a 	.word	0x000dd39a
   d5cbc:	000d50c1 	.word	0x000d50c1
   d5cc0:	000dd3ab 	.word	0x000dd3ab
   d5cc4:	000d5111 	.word	0x000d5111
   d5cc8:	000dd3bc 	.word	0x000dd3bc
   d5ccc:	000d5161 	.word	0x000d5161
   d5cd0:	000dd3cf 	.word	0x000dd3cf
   d5cd4:	000d51b1 	.word	0x000d51b1
   d5cd8:	000dd3e1 	.word	0x000dd3e1
   d5cdc:	000d5201 	.word	0x000d5201
   d5ce0:	000dd3f3 	.word	0x000dd3f3
   d5ce4:	000d413d 	.word	0x000d413d
   d5ce8:	000dd404 	.word	0x000dd404
   d5cec:	000d4619 	.word	0x000d4619
   d5cf0:	000dd412 	.word	0x000dd412
   d5cf4:	000d46d9 	.word	0x000d46d9
   d5cf8:	000dd421 	.word	0x000dd421
   d5cfc:	000d4541 	.word	0x000d4541
   d5d00:	000dd430 	.word	0x000dd430
   d5d04:	000d4739 	.word	0x000d4739
   d5d08:	000dd44c 	.word	0x000dd44c
   d5d0c:	2003e434 	.word	0x2003e434
   d5d10:	000d5885 	.word	0x000d5885
   d5d14:	000d4107 	.word	0x000d4107
   d5d18:	00015180 	.word	0x00015180
   d5d1c:	000dd45a 	.word	0x000dd45a
   d5d20:	2003f400 	.word	0x2003f400
   d5d24:	000dd530 	.word	0x000dd530
   d5d28:	000d579d 	.word	0x000d579d
   d5d2c:	000d4111 	.word	0x000d4111
   d5d30:	2003f514 	.word	0x2003f514
   d5d34:	2003e3c8 	.word	0x2003e3c8
   d5d38:	000dd5b8 	.word	0x000dd5b8
   d5d3c:	2003e5b8 	.word	0x2003e5b8
   d5d40:	2003db05 	.word	0x2003db05
   d5d44:	000dd471 	.word	0x000dd471
   d5d48:	000dd47c 	.word	0x000dd47c
   d5d4c:	2003e3f8 	.word	0x2003e3f8
   d5d50:	2300      	movs	r3, #0
    publishQueue.publish("Loading From FRAM","Setup Loop",PRIVATE);
   d5d52:	f88d 3000 	strb.w	r3, [sp]
   d5d56:	4b20      	ldr	r3, [pc, #128]	; (d5dd8 <setup+0x4a0>)
   d5d58:	4a20      	ldr	r2, [pc, #128]	; (d5ddc <setup+0x4a4>)
   d5d5a:	781b      	ldrb	r3, [r3, #0]
   d5d5c:	4920      	ldr	r1, [pc, #128]	; (d5de0 <setup+0x4a8>)
   d5d5e:	4821      	ldr	r0, [pc, #132]	; (d5de4 <setup+0x4ac>)
   d5d60:	f7fe fb0b 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5d64:	4a20      	ldr	r2, [pc, #128]	; (d5de8 <setup+0x4b0>)
   d5d66:	4821      	ldr	r0, [pc, #132]	; (d5dec <setup+0x4b4>)
   d5d68:	2318      	movs	r3, #24
   d5d6a:	21a0      	movs	r1, #160	; 0xa0
   d5d6c:	f000 fd12 	bl	d6794 <_ZN6MB85RC8readDataEjPhj>
   d5d70:	4a1f      	ldr	r2, [pc, #124]	; (d5df0 <setup+0x4b8>)
   d5d72:	481e      	ldr	r0, [pc, #120]	; (d5dec <setup+0x4b4>)
   d5d74:	2330      	movs	r3, #48	; 0x30
   d5d76:	2101      	movs	r1, #1
   d5d78:	f000 fd0c 	bl	d6794 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5d7c:	e717      	b.n	d5bae <setup+0x276>
   d5d7e:	f002 faeb 	bl	d8358 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d5d82:	6868      	ldr	r0, [r5, #4]
   d5d84:	f7fe fabe 	bl	d4304 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d5d88:	686b      	ldr	r3, [r5, #4]
   d5d8a:	481a      	ldr	r0, [pc, #104]	; (d5df4 <setup+0x4bc>)
   d5d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5d90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5d94:	4359      	muls	r1, r3
   d5d96:	f7fe fac8 	bl	d432a <_ZN5Timer12changePeriodEjj>
  updateConstantValues();
   d5d9a:	f7ff f907 	bl	d4fac <_Z20updateConstantValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d5d9e:	f7fe fec3 	bl	d4b28 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d5da2:	7a6b      	ldrb	r3, [r5, #9]
   d5da4:	b14b      	cbz	r3, d5dba <setup+0x482>
   d5da6:	2300      	movs	r3, #0
   d5da8:	f88d 3000 	strb.w	r3, [sp]
   d5dac:	4b0a      	ldr	r3, [pc, #40]	; (d5dd8 <setup+0x4a0>)
   d5dae:	4912      	ldr	r1, [pc, #72]	; (d5df8 <setup+0x4c0>)
   d5db0:	781b      	ldrb	r3, [r3, #0]
   d5db2:	480c      	ldr	r0, [pc, #48]	; (d5de4 <setup+0x4ac>)
   d5db4:	463a      	mov	r2, r7
   d5db6:	f7fe fae0 	bl	d437a <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5dba:	f002 facd 	bl	d8358 <spark_cloud_flag_connected>
   d5dbe:	b910      	cbnz	r0, d5dc6 <setup+0x48e>
            spark_process();
   d5dc0:	f002 faba 	bl	d8338 <spark_process>
        while (_while() && !_condition()) {
   d5dc4:	e7f9      	b.n	d5dba <setup+0x482>
   d5dc6:	f002 fac7 	bl	d8358 <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d5dca:	7823      	ldrb	r3, [r4, #0]
   d5dcc:	b90b      	cbnz	r3, d5dd2 <setup+0x49a>
   d5dce:	2302      	movs	r3, #2
   d5dd0:	7023      	strb	r3, [r4, #0]
}
   d5dd2:	b01a      	add	sp, #104	; 0x68
   d5dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5dd8:	2003db05 	.word	0x2003db05
   d5ddc:	000dd471 	.word	0x000dd471
   d5de0:	000dd48d 	.word	0x000dd48d
   d5de4:	2003e3f8 	.word	0x2003e3f8
   d5de8:	2003e450 	.word	0x2003e450
   d5dec:	2003e3c8 	.word	0x2003e3c8
   d5df0:	2003e5b8 	.word	0x2003e5b8
   d5df4:	2003e3d8 	.word	0x2003e3d8
   d5df8:	000dd49f 	.word	0x000dd49f

000d5dfc <_GLOBAL__sub_I___appProductID>:
   d5dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d5dfe:	4b50      	ldr	r3, [pc, #320]	; (d5f40 <_GLOBAL__sub_I___appProductID+0x144>)
              error_(SYSTEM_ERROR_NONE) {
   d5e00:	4d50      	ldr	r5, [pc, #320]	; (d5f44 <_GLOBAL__sub_I___appProductID+0x148>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5e02:	4f51      	ldr	r7, [pc, #324]	; (d5f48 <_GLOBAL__sub_I___appProductID+0x14c>)
   d5e04:	2601      	movs	r6, #1
   d5e06:	701e      	strb	r6, [r3, #0]
   d5e08:	4b50      	ldr	r3, [pc, #320]	; (d5f4c <_GLOBAL__sub_I___appProductID+0x150>)
   d5e0a:	2202      	movs	r2, #2
   d5e0c:	b087      	sub	sp, #28
   d5e0e:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5e10:	f004 f814 	bl	d9e3c <spark_protocol_instance>
   d5e14:	2300      	movs	r3, #0
   d5e16:	461a      	mov	r2, r3
   d5e18:	f642 51d6 	movw	r1, #11734	; 0x2dd6
   d5e1c:	f004 f816 	bl	d9e4c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5e20:	f004 f80c 	bl	d9e3c <spark_protocol_instance>
   d5e24:	2300      	movs	r3, #0
   d5e26:	461a      	mov	r2, r3
   d5e28:	210b      	movs	r1, #11
   d5e2a:	2400      	movs	r4, #0
   d5e2c:	f004 f816 	bl	d9e5c <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5e30:	4b47      	ldr	r3, [pc, #284]	; (d5f50 <_GLOBAL__sub_I___appProductID+0x154>)
   d5e32:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5e34:	602c      	str	r4, [r5, #0]
   d5e36:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5e38:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5e3a:	4630      	mov	r0, r6
   d5e3c:	f002 fa16 	bl	d826c <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5e40:	463a      	mov	r2, r7
   d5e42:	4944      	ldr	r1, [pc, #272]	; (d5f54 <_GLOBAL__sub_I___appProductID+0x158>)
   d5e44:	4628      	mov	r0, r5
   d5e46:	f004 f8d1 	bl	d9fec <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5e4a:	4621      	mov	r1, r4
   d5e4c:	4630      	mov	r0, r6
   d5e4e:	f002 fa1d 	bl	d828c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5e52:	4631      	mov	r1, r6
   d5e54:	2004      	movs	r0, #4
   d5e56:	f002 f861 	bl	d7f1c <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d5e5a:	f004 f89f 	bl	d9f9c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5e5e:	4d3e      	ldr	r5, [pc, #248]	; (d5f58 <_GLOBAL__sub_I___appProductID+0x15c>)
   d5e60:	4601      	mov	r1, r0
   d5e62:	4623      	mov	r3, r4
   d5e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5e68:	4628      	mov	r0, r5
   d5e6a:	f000 fc47 	bl	d66fc <_ZN6MB85RCC1ER7TwoWireji>
   d5e6e:	4b3b      	ldr	r3, [pc, #236]	; (d5f5c <_GLOBAL__sub_I___appProductID+0x160>)
   d5e70:	602b      	str	r3, [r5, #0]
   d5e72:	463a      	mov	r2, r7
   d5e74:	493a      	ldr	r1, [pc, #232]	; (d5f60 <_GLOBAL__sub_I___appProductID+0x164>)
   d5e76:	4628      	mov	r0, r5
   d5e78:	f004 f8b8 	bl	d9fec <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5e7c:	f004 f88e 	bl	d9f9c <_Z19__fetch_global_Wirev>
   d5e80:	4d38      	ldr	r5, [pc, #224]	; (d5f64 <_GLOBAL__sub_I___appProductID+0x168>)
   d5e82:	4601      	mov	r1, r0
   d5e84:	4628      	mov	r0, r5
   d5e86:	f000 feaf 	bl	d6be8 <_ZN8MCP79410C1ER7TwoWire>
   d5e8a:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5e8c:	4d36      	ldr	r5, [pc, #216]	; (d5f68 <_GLOBAL__sub_I___appProductID+0x16c>)
   d5e8e:	4937      	ldr	r1, [pc, #220]	; (d5f6c <_GLOBAL__sub_I___appProductID+0x170>)
   d5e90:	463a      	mov	r2, r7
   d5e92:	f004 f8ab 	bl	d9fec <__aeabi_atexit>
   d5e96:	4936      	ldr	r1, [pc, #216]	; (d5f70 <_GLOBAL__sub_I___appProductID+0x174>)
   d5e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	f001 fb19 	bl	d74d4 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5ea2:	4b34      	ldr	r3, [pc, #208]	; (d5f74 <_GLOBAL__sub_I___appProductID+0x178>)
   d5ea4:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5ea6:	463a      	mov	r2, r7
   d5ea8:	4933      	ldr	r1, [pc, #204]	; (d5f78 <_GLOBAL__sub_I___appProductID+0x17c>)
   d5eaa:	4628      	mov	r0, r5
   d5eac:	f004 f89e 	bl	d9fec <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5eb0:	4b32      	ldr	r3, [pc, #200]	; (d5f7c <_GLOBAL__sub_I___appProductID+0x180>)
   d5eb2:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5eb4:	4b32      	ldr	r3, [pc, #200]	; (d5f80 <_GLOBAL__sub_I___appProductID+0x184>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5eb6:	4d33      	ldr	r5, [pc, #204]	; (d5f84 <_GLOBAL__sub_I___appProductID+0x188>)
   d5eb8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5eba:	4b33      	ldr	r3, [pc, #204]	; (d5f88 <_GLOBAL__sub_I___appProductID+0x18c>)
   d5ebc:	9304      	str	r3, [sp, #16]
   d5ebe:	4b33      	ldr	r3, [pc, #204]	; (d5f8c <_GLOBAL__sub_I___appProductID+0x190>)
   d5ec0:	602b      	str	r3, [r5, #0]
   d5ec2:	712c      	strb	r4, [r5, #4]
   d5ec4:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   d5ec6:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   d5ec8:	f105 010c 	add.w	r1, r5, #12
   d5ecc:	a802      	add	r0, sp, #8
   d5ece:	f7ff fd21 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      __a = _GLIBCXX_MOVE(__b);
   d5ed2:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ed4:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ed6:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5ed8:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5eda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5edc:	69aa      	ldr	r2, [r5, #24]
   d5ede:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ee0:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5ee2:	4a2b      	ldr	r2, [pc, #172]	; (d5f90 <_GLOBAL__sub_I___appProductID+0x194>)
   d5ee4:	462b      	mov	r3, r5
   d5ee6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5eea:	e9cd 4400 	strd	r4, r4, [sp]
   d5eee:	f105 0008 	add.w	r0, r5, #8
   d5ef2:	f001 ffbb 	bl	d7e6c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5ef6:	a802      	add	r0, sp, #8
   d5ef8:	f7fe f9c1 	bl	d427e <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d5efc:	463a      	mov	r2, r7
   d5efe:	4925      	ldr	r1, [pc, #148]	; (d5f94 <_GLOBAL__sub_I___appProductID+0x198>)
   d5f00:	4628      	mov	r0, r5
   d5f02:	f004 f873 	bl	d9fec <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5f06:	4d24      	ldr	r5, [pc, #144]	; (d5f98 <_GLOBAL__sub_I___appProductID+0x19c>)
struct systemStatus_structure {                     
   d5f08:	4b24      	ldr	r3, [pc, #144]	; (d5f9c <_GLOBAL__sub_I___appProductID+0x1a0>)
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5f0a:	63ac      	str	r4, [r5, #56]	; 0x38
struct systemStatus_structure {                     
   d5f0c:	629e      	str	r6, [r3, #40]	; 0x28
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5f0e:	4621      	mov	r1, r4
   d5f10:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
   d5f14:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
   d5f18:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d5f1c:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d5f20:	646c      	str	r4, [r5, #68]	; 0x44
   d5f22:	652c      	str	r4, [r5, #80]	; 0x50
   d5f24:	65ec      	str	r4, [r5, #92]	; 0x5c
   d5f26:	2210      	movs	r2, #16
   d5f28:	f105 0060 	add.w	r0, r5, #96	; 0x60
   d5f2c:	f004 ff00 	bl	dad30 <memset>
   d5f30:	2210      	movs	r2, #16
   d5f32:	4621      	mov	r1, r4
   d5f34:	f105 0070 	add.w	r0, r5, #112	; 0x70
   d5f38:	f004 fefa 	bl	dad30 <memset>
   d5f3c:	b007      	add	sp, #28
   d5f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f40:	2003db05 	.word	0x2003db05
   d5f44:	2003daf8 	.word	0x2003daf8
   d5f48:	2003dab8 	.word	0x2003dab8
   d5f4c:	2003db04 	.word	0x2003db04
   d5f50:	ffff0000 	.word	0xffff0000
   d5f54:	000d4267 	.word	0x000d4267
   d5f58:	2003e3c8 	.word	0x2003e3c8
   d5f5c:	000dd4ec 	.word	0x000dd4ec
   d5f60:	000d4205 	.word	0x000d4205
   d5f64:	2003e434 	.word	0x2003e434
   d5f68:	2003e3f8 	.word	0x2003e3f8
   d5f6c:	000d6973 	.word	0x000d6973
   d5f70:	2003f540 	.word	0x2003f540
   d5f74:	000dd4c4 	.word	0x000dd4c4
   d5f78:	000d41dd 	.word	0x000d41dd
   d5f7c:	000d57d9 	.word	0x000d57d9
   d5f80:	000d40ed 	.word	0x000d40ed
   d5f84:	2003e3d8 	.word	0x2003e3d8
   d5f88:	000d40f1 	.word	0x000d40f1
   d5f8c:	000dd4b0 	.word	0x000dd4b0
   d5f90:	000d422d 	.word	0x000d422d
   d5f94:	000d4291 	.word	0x000d4291
   d5f98:	2003e468 	.word	0x2003e468
   d5f9c:	2003e5b8 	.word	0x2003e5b8

000d5fa0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5fa0:	b082      	sub	sp, #8
   d5fa2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fa6:	a90a      	add	r1, sp, #40	; 0x28
   d5fa8:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d5fac:	4b34      	ldr	r3, [pc, #208]	; (d6080 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5fae:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d6084 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d5fb2:	2200      	movs	r2, #0
   d5fb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5fb8:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d5fba:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5fbe:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d5fc2:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d5fc6:	f003 ffb9 	bl	d9f3c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5fca:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d5fce:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5fd0:	f004 fa90 	bl	da4f4 <__aeabi_i2d>
   d5fd4:	4642      	mov	r2, r8
   d5fd6:	464b      	mov	r3, r9
   d5fd8:	4606      	mov	r6, r0
   d5fda:	460f      	mov	r7, r1
   d5fdc:	f004 f93c 	bl	da258 <__aeabi_dsub>
   d5fe0:	4652      	mov	r2, sl
   d5fe2:	465b      	mov	r3, fp
   d5fe4:	f004 faf0 	bl	da5c8 <__aeabi_dmul>
   d5fe8:	4642      	mov	r2, r8
   d5fea:	464b      	mov	r3, r9
   d5fec:	f004 f936 	bl	da25c <__adddf3>
   d5ff0:	4602      	mov	r2, r0
   d5ff2:	460b      	mov	r3, r1
   d5ff4:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d5ff8:	4630      	mov	r0, r6
   d5ffa:	4639      	mov	r1, r7
   d5ffc:	f004 f92c 	bl	da258 <__aeabi_dsub>
   d6000:	4602      	mov	r2, r0
   d6002:	460b      	mov	r3, r1
   d6004:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d6008:	f004 fade 	bl	da5c8 <__aeabi_dmul>
   d600c:	4602      	mov	r2, r0
   d600e:	460b      	mov	r3, r1
   d6010:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d6014:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d6018:	f004 f920 	bl	da25c <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d601c:	3d01      	subs	r5, #1
    sumI += sqI;
   d601e:	4606      	mov	r6, r0
   d6020:	460f      	mov	r7, r1
   d6022:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d6026:	d1cc      	bne.n	d5fc2 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d602c:	a310      	add	r3, pc, #64	; (adr r3, d6070 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d602e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6032:	f004 fac9 	bl	da5c8 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6036:	a310      	add	r3, pc, #64	; (adr r3, d6078 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d6038:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d603c:	4680      	mov	r8, r0
   d603e:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6040:	4630      	mov	r0, r6
   d6042:	4639      	mov	r1, r7
   d6044:	f004 fbea 	bl	da81c <__aeabi_ddiv>
   d6048:	ec41 0b10 	vmov	d0, r0, r1
   d604c:	f003 ffdc 	bl	da008 <sqrt>

  //Reset accumulators
  sumI = 0;
   d6050:	2200      	movs	r2, #0
   d6052:	2300      	movs	r3, #0
   d6054:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6058:	ec51 0b10 	vmov	r0, r1, d0
   d605c:	4642      	mov	r2, r8
   d605e:	464b      	mov	r3, r9
   d6060:	f004 fab2 	bl	da5c8 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d6064:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6068:	ec41 0b10 	vmov	d0, r0, r1
   d606c:	b002      	add	sp, #8
   d606e:	4770      	bx	lr
   d6070:	66666666 	.word	0x66666666
   d6074:	3f4a6666 	.word	0x3f4a6666
   d6078:	00000000 	.word	0x00000000
   d607c:	4099f800 	.word	0x4099f800
   d6080:	40a00000 	.word	0x40a00000
   d6084:	3f300000 	.word	0x3f300000

000d6088 <_ZN16DeviceNameHelper4saveEv>:
}


void DeviceNameHelper::save() {
    // Overridden by DeviceNameHelperEEPROM
}
   d6088:	4770      	bx	lr

000d608a <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d608a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d608c:	4603      	mov	r3, r0
	switch (__op)
   d608e:	d102      	bne.n	d6096 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6090:	6001      	str	r1, [r0, #0]
      }
   d6092:	2000      	movs	r0, #0
   d6094:	4770      	bx	lr
	  switch (__op)
   d6096:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6098:	bf04      	itt	eq
   d609a:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d609e:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d60a2:	e7f6      	b.n	d6092 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d60a4 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_>:
    }
}



void DeviceNameHelper::subscriptionHandler(const char *eventName, const char *eventData) {
   d60a4:	b513      	push	{r0, r1, r4, lr}
   d60a6:	4604      	mov	r4, r0

    if (strlen(eventData) < DEVICENAMEHELPER_MAX_NAME_LEN) {
   d60a8:	4610      	mov	r0, r2
   d60aa:	9201      	str	r2, [sp, #4]
   d60ac:	f004 fe9b 	bl	dade6 <strlen>
   d60b0:	6863      	ldr	r3, [r4, #4]
   d60b2:	9901      	ldr	r1, [sp, #4]
   d60b4:	4602      	mov	r2, r0
   d60b6:	2a1e      	cmp	r2, #30
   d60b8:	f103 000c 	add.w	r0, r3, #12
   d60bc:	d806      	bhi.n	d60cc <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x28>
        // Fits
        strcpy(data->name, eventData);
   d60be:	f004 fe6d 	bl	dad9c <strcpy>
    else {
        // Need to truncate
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
    }
    gotResponse = true;
   d60c2:	2301      	movs	r3, #1
   d60c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   d60c8:	b002      	add	sp, #8
   d60ca:	bd10      	pop	{r4, pc}
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
   d60cc:	221f      	movs	r2, #31
   d60ce:	f004 fea4 	bl	dae1a <strncpy>
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
   d60d2:	6863      	ldr	r3, [r4, #4]
   d60d4:	2200      	movs	r2, #0
   d60d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   d60da:	e7f2      	b.n	d60c2 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x1e>

000d60dc <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60dc:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d60de:	6842      	ldr	r2, [r0, #4]
   d60e0:	4603      	mov	r3, r0
   d60e2:	1054      	asrs	r4, r2, #1
   d60e4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d60e8:	07d2      	lsls	r2, r2, #31
   d60ea:	bf48      	it	mi
   d60ec:	590a      	ldrmi	r2, [r1, r4]
   d60ee:	681b      	ldr	r3, [r3, #0]
      }
   d60f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d60f4:	bf48      	it	mi
   d60f6:	58d3      	ldrmi	r3, [r2, r3]
   d60f8:	4718      	bx	r3

000d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d60fa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60fc:	b538      	push	{r3, r4, r5, lr}
   d60fe:	4604      	mov	r4, r0
	  switch (__op)
   d6100:	d007      	beq.n	d6112 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6102:	2a03      	cmp	r2, #3
   d6104:	d011      	beq.n	d612a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6106:	2a01      	cmp	r2, #1
   d6108:	d101      	bne.n	d610e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d610a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d610c:	6023      	str	r3, [r4, #0]
	}
   d610e:	2000      	movs	r0, #0
   d6110:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6112:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d6114:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6116:	f7fd ffbe 	bl	d4096 <_Znwj>
   d611a:	4603      	mov	r3, r0
   d611c:	2800      	cmp	r0, #0
   d611e:	d0f5      	beq.n	d610c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d6124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d6128:	e7f0      	b.n	d610c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d612a:	6800      	ldr	r0, [r0, #0]
   d612c:	2800      	cmp	r0, #0
   d612e:	d0ee      	beq.n	d610e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6130:	210c      	movs	r1, #12
   d6132:	f003 ff60 	bl	d9ff6 <_ZdlPvj>
   d6136:	e7ea      	b.n	d610e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6138 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM16DeviceNameHelperFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6138:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d613a:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d613c:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d613e:	685c      	ldr	r4, [r3, #4]
   d6140:	689d      	ldr	r5, [r3, #8]
   d6142:	681b      	ldr	r3, [r3, #0]
   d6144:	6812      	ldr	r2, [r2, #0]
   d6146:	1066      	asrs	r6, r4, #1
   d6148:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d614c:	07e4      	lsls	r4, r4, #31
   d614e:	bf44      	itt	mi
   d6150:	59ac      	ldrmi	r4, [r5, r6]
   d6152:	58e3      	ldrmi	r3, [r4, r3]
      }
   d6154:	bc70      	pop	{r4, r5, r6}
   d6156:	4718      	bx	r3

000d6158 <_ZN16DeviceNameHelperD1Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6158:	b510      	push	{r4, lr}
   d615a:	4b06      	ldr	r3, [pc, #24]	; (d6174 <_ZN16DeviceNameHelperD1Ev+0x1c>)
   d615c:	4604      	mov	r4, r0
   d615e:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d6162:	f7fe f88c 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d6166:	f104 0010 	add.w	r0, r4, #16
   d616a:	f7fe f888 	bl	d427e <_ZNSt14_Function_baseD1Ev>
}
   d616e:	4620      	mov	r0, r4
   d6170:	bd10      	pop	{r4, pc}
   d6172:	bf00      	nop
   d6174:	000dd5dc 	.word	0x000dd5dc

000d6178 <_ZN16DeviceNameHelperD0Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6178:	b510      	push	{r4, lr}
   d617a:	4604      	mov	r4, r0
}
   d617c:	f7ff ffec 	bl	d6158 <_ZN16DeviceNameHelperD1Ev>
   d6180:	4620      	mov	r0, r4
   d6182:	2138      	movs	r1, #56	; 0x38
   d6184:	f003 ff37 	bl	d9ff6 <_ZdlPvj>
   d6188:	4620      	mov	r0, r4
   d618a:	bd10      	pop	{r4, pc}

000d618c <_ZN24DeviceNameHelperRetainedD1Ev>:

DeviceNameHelperRetained::DeviceNameHelperRetained() {

}

DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d618c:	b510      	push	{r4, lr}
   d618e:	4b03      	ldr	r3, [pc, #12]	; (d619c <_ZN24DeviceNameHelperRetainedD1Ev+0x10>)
   d6190:	6003      	str	r3, [r0, #0]
   d6192:	4604      	mov	r4, r0
   d6194:	f7ff ffe0 	bl	d6158 <_ZN16DeviceNameHelperD1Ev>

}
   d6198:	4620      	mov	r0, r4
   d619a:	bd10      	pop	{r4, pc}
   d619c:	000dd5f0 	.word	0x000dd5f0

000d61a0 <_ZN24DeviceNameHelperRetainedD0Ev>:
DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d61a0:	b510      	push	{r4, lr}
   d61a2:	4604      	mov	r4, r0
}
   d61a4:	f7ff fff2 	bl	d618c <_ZN24DeviceNameHelperRetainedD1Ev>
   d61a8:	4620      	mov	r0, r4
   d61aa:	2138      	movs	r1, #56	; 0x38
   d61ac:	f003 ff23 	bl	d9ff6 <_ZdlPvj>
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}

000d61b4 <_ZN16DeviceNameHelper4loopEv>:
    if (stateHandler) {
   d61b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
void DeviceNameHelper::loop() {
   d61b6:	4601      	mov	r1, r0
    if (stateHandler) {
   d61b8:	b113      	cbz	r3, d61c0 <_ZN16DeviceNameHelper4loopEv+0xc>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d61bc:	3020      	adds	r0, #32
   d61be:	4718      	bx	r3
}
   d61c0:	4770      	bx	lr
	...

000d61c4 <_ZN16DeviceNameHelperC1Ev>:
DeviceNameHelper::DeviceNameHelper() {
   d61c4:	b530      	push	{r4, r5, lr}
   d61c6:	4a07      	ldr	r2, [pc, #28]	; (d61e4 <_ZN16DeviceNameHelperC1Ev+0x20>)
   d61c8:	6002      	str	r2, [r0, #0]
   d61ca:	2400      	movs	r4, #0
   d61cc:	2200      	movs	r2, #0
   d61ce:	2500      	movs	r5, #0
   d61d0:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d61d4:	6042      	str	r2, [r0, #4]
    _Function_base() : _M_manager(nullptr) { }
   d61d6:	6182      	str	r2, [r0, #24]
   d61d8:	6282      	str	r2, [r0, #40]	; 0x28
   d61da:	6302      	str	r2, [r0, #48]	; 0x30
   d61dc:	8682      	strh	r2, [r0, #52]	; 0x34
   d61de:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
}
   d61e2:	bd30      	pop	{r4, r5, pc}
   d61e4:	000dd5dc 	.word	0x000dd5dc

000d61e8 <_ZN24DeviceNameHelperRetainedC1Ev>:
DeviceNameHelperRetained::DeviceNameHelperRetained() {
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4603      	mov	r3, r0
   d61ec:	f7ff ffea 	bl	d61c4 <_ZN16DeviceNameHelperC1Ev>
   d61f0:	4a01      	ldr	r2, [pc, #4]	; (d61f8 <_ZN24DeviceNameHelperRetainedC1Ev+0x10>)
   d61f2:	601a      	str	r2, [r3, #0]
}
   d61f4:	4618      	mov	r0, r3
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	000dd5f0 	.word	0x000dd5f0

000d61fc <_ZN24DeviceNameHelperRetained8instanceEv>:
DeviceNameHelperRetained &DeviceNameHelperRetained::instance() {
   d61fc:	b510      	push	{r4, lr}
    if (!_instance) {
   d61fe:	4c06      	ldr	r4, [pc, #24]	; (d6218 <_ZN24DeviceNameHelperRetained8instanceEv+0x1c>)
   d6200:	6823      	ldr	r3, [r4, #0]
   d6202:	b93b      	cbnz	r3, d6214 <_ZN24DeviceNameHelperRetained8instanceEv+0x18>
        _instance = new DeviceNameHelperRetained();
   d6204:	2038      	movs	r0, #56	; 0x38
   d6206:	f7fd ff46 	bl	d4096 <_Znwj>
   d620a:	4601      	mov	r1, r0
   d620c:	b108      	cbz	r0, d6212 <_ZN24DeviceNameHelperRetained8instanceEv+0x16>
   d620e:	f7ff ffeb 	bl	d61e8 <_ZN24DeviceNameHelperRetainedC1Ev>
   d6212:	6021      	str	r1, [r4, #0]
}
   d6214:	6820      	ldr	r0, [r4, #0]
   d6216:	bd10      	pop	{r4, pc}
   d6218:	2003e5f4 	.word	0x2003e5f4

000d621c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d621c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d621e:	2300      	movs	r3, #0
   d6220:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6222:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6224:	4604      	mov	r4, r0
   d6226:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6228:	b12b      	cbz	r3, d6236 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d622a:	2202      	movs	r2, #2
   d622c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d622e:	68eb      	ldr	r3, [r5, #12]
   d6230:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6232:	68ab      	ldr	r3, [r5, #8]
   d6234:	60a3      	str	r3, [r4, #8]
    }
   d6236:	4620      	mov	r0, r4
   d6238:	bd38      	pop	{r3, r4, r5, pc}

000d623a <_ZNKSt8functionIFvPKcEEclES1_>:
    function<_Res(_ArgTypes...)>::
   d623a:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d623c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d623e:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d6240:	b90a      	cbnz	r2, d6246 <_ZNKSt8functionIFvPKcEEclES1_+0xc>
	__throw_bad_function_call();
   d6242:	f003 fede 	bl	da002 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6246:	68c3      	ldr	r3, [r0, #12]
   d6248:	a901      	add	r1, sp, #4
   d624a:	4798      	blx	r3
    }
   d624c:	b003      	add	sp, #12
   d624e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6252 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>:
DeviceNameHelper &DeviceNameHelper::withNameCallback(std::function<void(const char *)> nameCallback) {
   d6252:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6254:	2300      	movs	r3, #0
   d6256:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6258:	688b      	ldr	r3, [r1, #8]
   d625a:	4604      	mov	r4, r0
   d625c:	460d      	mov	r5, r1
    this->nameCallback = nameCallback;
   d625e:	f100 0610 	add.w	r6, r0, #16
      if (static_cast<bool>(__x))
   d6262:	b133      	cbz	r3, d6272 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6264:	2202      	movs	r2, #2
   d6266:	4668      	mov	r0, sp
   d6268:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d626a:	68eb      	ldr	r3, [r5, #12]
   d626c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d626e:	68ab      	ldr	r3, [r5, #8]
   d6270:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6272:	4631      	mov	r1, r6
   d6274:	4668      	mov	r0, sp
   d6276:	f7ff fb4d 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d627a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d627c:	69a2      	ldr	r2, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d627e:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6280:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6282:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6284:	4668      	mov	r0, sp
   d6286:	69e2      	ldr	r2, [r4, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d6288:	61e3      	str	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d628a:	9203      	str	r2, [sp, #12]
   d628c:	f7fd fff7 	bl	d427e <_ZNSt14_Function_baseD1Ev>
}
   d6290:	4620      	mov	r0, r4
   d6292:	b004      	add	sp, #16
   d6294:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d629a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d629e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d62a0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d62a2:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d62a4:	b90a      	cbnz	r2, d62aa <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d62a6:	07d9      	lsls	r1, r3, #31
   d62a8:	d505      	bpl.n	d62b6 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d62aa:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d62ae:	4b0b      	ldr	r3, [pc, #44]	; (d62dc <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d62b0:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d62b2:	4b0b      	ldr	r3, [pc, #44]	; (d62e0 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d62b4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d62b6:	4621      	mov	r1, r4
   d62b8:	4668      	mov	r0, sp
   d62ba:	f7ff fb2b 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62be:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d62c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d62c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62c4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d62c6:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d62c8:	4668      	mov	r0, sp
   d62ca:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d62cc:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d62ce:	9203      	str	r2, [sp, #12]
   d62d0:	f7fd ffd5 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	}
   d62d4:	4620      	mov	r0, r4
   d62d6:	b004      	add	sp, #16
   d62d8:	bd10      	pop	{r4, pc}
   d62da:	bf00      	nop
   d62dc:	000d60dd 	.word	0x000d60dd
   d62e0:	000d608b 	.word	0x000d608b

000d62e4 <_ZN16DeviceNameHelper11commonSetupEv>:
void DeviceNameHelper::commonSetup() {
   d62e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d62e6:	4604      	mov	r4, r0
    if (data->magic != DATA_MAGIC || data->size != sizeof(DeviceNameHelperData)) {
   d62e8:	6840      	ldr	r0, [r0, #4]
   d62ea:	4d0d      	ldr	r5, [pc, #52]	; (d6320 <_ZN16DeviceNameHelper11commonSetupEv+0x3c>)
   d62ec:	6802      	ldr	r2, [r0, #0]
   d62ee:	42aa      	cmp	r2, r5
   d62f0:	d102      	bne.n	d62f8 <_ZN16DeviceNameHelper11commonSetupEv+0x14>
   d62f2:	7903      	ldrb	r3, [r0, #4]
   d62f4:	2b2c      	cmp	r3, #44	; 0x2c
   d62f6:	d008      	beq.n	d630a <_ZN16DeviceNameHelper11commonSetupEv+0x26>
        memset(data, 0, sizeof(DeviceNameHelperData));     
   d62f8:	262c      	movs	r6, #44	; 0x2c
   d62fa:	4632      	mov	r2, r6
   d62fc:	2100      	movs	r1, #0
   d62fe:	f004 fd17 	bl	dad30 <memset>
        data->magic = DATA_MAGIC;
   d6302:	6863      	ldr	r3, [r4, #4]
   d6304:	601d      	str	r5, [r3, #0]
        data->size = (uint8_t) sizeof(DeviceNameHelperData);
   d6306:	6863      	ldr	r3, [r4, #4]
   d6308:	711e      	strb	r6, [r3, #4]
    stateHandler = &DeviceNameHelper::stateStart;
   d630a:	4b06      	ldr	r3, [pc, #24]	; (d6324 <_ZN16DeviceNameHelper11commonSetupEv+0x40>)
   d630c:	9300      	str	r3, [sp, #0]
   d630e:	4669      	mov	r1, sp
   d6310:	2300      	movs	r3, #0
   d6312:	f104 0020 	add.w	r0, r4, #32
   d6316:	9301      	str	r3, [sp, #4]
   d6318:	f7ff ffbe 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d631c:	b002      	add	sp, #8
   d631e:	bd70      	pop	{r4, r5, r6, pc}
   d6320:	7787a2f2 	.word	0x7787a2f2
   d6324:	000d6331 	.word	0x000d6331

000d6328 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>:
    this->data = retainedData;
   d6328:	6041      	str	r1, [r0, #4]
    commonSetup();
   d632a:	f7ff bfdb 	b.w	d62e4 <_ZN16DeviceNameHelper11commonSetupEv>
	...

000d6330 <_ZN16DeviceNameHelper10stateStartEv>:
void DeviceNameHelper::stateStart() {
   d6330:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (data->name[0]) {
   d6332:	6841      	ldr	r1, [r0, #4]
   d6334:	7b0b      	ldrb	r3, [r1, #12]
void DeviceNameHelper::stateStart() {
   d6336:	4604      	mov	r4, r0
   d6338:	f100 0520 	add.w	r5, r0, #32
    if (data->name[0]) {
   d633c:	b193      	cbz	r3, d6364 <_ZN16DeviceNameHelper10stateStartEv+0x34>
        if (nameCallback) {
   d633e:	6983      	ldr	r3, [r0, #24]
   d6340:	b11b      	cbz	r3, d634a <_ZN16DeviceNameHelper10stateStartEv+0x1a>
            nameCallback(data->name);
   d6342:	310c      	adds	r1, #12
   d6344:	3010      	adds	r0, #16
   d6346:	f7ff ff78 	bl	d623a <_ZNKSt8functionIFvPKcEEclES1_>
        stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d634a:	4b0a      	ldr	r3, [pc, #40]	; (d6374 <_ZN16DeviceNameHelper10stateStartEv+0x44>)
   d634c:	9300      	str	r3, [sp, #0]
   d634e:	4669      	mov	r1, sp
   d6350:	2300      	movs	r3, #0
   d6352:	4628      	mov	r0, r5
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	f7ff ff9f 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d635a:	f001 fdff 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d635e:	6320      	str	r0, [r4, #48]	; 0x30
}
   d6360:	b003      	add	sp, #12
   d6362:	bd30      	pop	{r4, r5, pc}
    stateHandler = &DeviceNameHelper::stateSubscribe;
   d6364:	4a04      	ldr	r2, [pc, #16]	; (d6378 <_ZN16DeviceNameHelper10stateStartEv+0x48>)
   d6366:	4669      	mov	r1, sp
   d6368:	4628      	mov	r0, r5
   d636a:	e9cd 2300 	strd	r2, r3, [sp]
   d636e:	f7ff ff93 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6372:	e7f5      	b.n	d6360 <_ZN16DeviceNameHelper10stateStartEv+0x30>
   d6374:	000d64cd 	.word	0x000d64cd
   d6378:	000d6555 	.word	0x000d6555

000d637c <_ZN16DeviceNameHelper18stateWaitConnectedEv>:
void DeviceNameHelper::stateWaitConnected() {
   d637c:	b513      	push	{r0, r1, r4, lr}
   d637e:	4604      	mov	r4, r0
   d6380:	f001 ffea 	bl	d8358 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d6384:	b170      	cbz	r0, d63a4 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
   d6386:	f003 fb37 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d638a:	b158      	cbz	r0, d63a4 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
    stateHandler = &DeviceNameHelper::stateWaitRequest;
   d638c:	4b06      	ldr	r3, [pc, #24]	; (d63a8 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x2c>)
   d638e:	9300      	str	r3, [sp, #0]
   d6390:	4669      	mov	r1, sp
   d6392:	2300      	movs	r3, #0
   d6394:	f104 0020 	add.w	r0, r4, #32
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	f7ff ff7d 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d639e:	f001 fddd 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d63a2:	6320      	str	r0, [r4, #48]	; 0x30
}
   d63a4:	b002      	add	sp, #8
   d63a6:	bd10      	pop	{r4, pc}
   d63a8:	000d63ad 	.word	0x000d63ad

000d63ac <_ZN16DeviceNameHelper16stateWaitRequestEv>:
void DeviceNameHelper::stateWaitRequest() {
   d63ac:	b530      	push	{r4, r5, lr}
   d63ae:	4605      	mov	r5, r0
   d63b0:	b085      	sub	sp, #20
   d63b2:	f001 fdd3 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < POST_CONNECT_WAIT_MS) {
   d63b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d63b8:	1ac0      	subs	r0, r0, r3
   d63ba:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d63be:	d329      	bcc.n	d6414 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x68>
    gotResponse = false;
   d63c0:	4b15      	ldr	r3, [pc, #84]	; (d6418 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d63c2:	4916      	ldr	r1, [pc, #88]	; (d641c <_ZN16DeviceNameHelper16stateWaitRequestEv+0x70>)
   d63c4:	781b      	ldrb	r3, [r3, #0]
   d63c6:	f88d 3000 	strb.w	r3, [sp]
   d63ca:	2200      	movs	r2, #0
   d63cc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
   d63d0:	233c      	movs	r3, #60	; 0x3c
   d63d2:	a802      	add	r0, sp, #8
   d63d4:	f002 fa68 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d63d8:	9c03      	ldr	r4, [sp, #12]
   d63da:	b17c      	cbz	r4, d63fc <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
      if (--_M_use_count == 0)
   d63dc:	6863      	ldr	r3, [r4, #4]
   d63de:	3b01      	subs	r3, #1
   d63e0:	6063      	str	r3, [r4, #4]
   d63e2:	b95b      	cbnz	r3, d63fc <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
          _M_dispose();
   d63e4:	6823      	ldr	r3, [r4, #0]
   d63e6:	4620      	mov	r0, r4
   d63e8:	689b      	ldr	r3, [r3, #8]
   d63ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d63ec:	68a3      	ldr	r3, [r4, #8]
   d63ee:	3b01      	subs	r3, #1
   d63f0:	60a3      	str	r3, [r4, #8]
   d63f2:	b91b      	cbnz	r3, d63fc <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
            _M_destroy();
   d63f4:	6823      	ldr	r3, [r4, #0]
   d63f6:	4620      	mov	r0, r4
   d63f8:	68db      	ldr	r3, [r3, #12]
   d63fa:	4798      	blx	r3
    stateHandler = &DeviceNameHelper::stateWaitResponse;
   d63fc:	4b08      	ldr	r3, [pc, #32]	; (d6420 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x74>)
   d63fe:	9302      	str	r3, [sp, #8]
   d6400:	a902      	add	r1, sp, #8
   d6402:	2300      	movs	r3, #0
   d6404:	f105 0020 	add.w	r0, r5, #32
   d6408:	9303      	str	r3, [sp, #12]
   d640a:	f7ff ff45 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d640e:	f001 fda5 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d6412:	6328      	str	r0, [r5, #48]	; 0x30
}
   d6414:	b005      	add	sp, #20
   d6416:	bd30      	pop	{r4, r5, pc}
   d6418:	2003e5f0 	.word	0x2003e5f0
   d641c:	000dd5bc 	.word	0x000dd5bc
   d6420:	000d6425 	.word	0x000d6425

000d6424 <_ZN16DeviceNameHelper17stateWaitResponseEv>:
void DeviceNameHelper::stateWaitResponse() {
   d6424:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (gotResponse) {
   d6426:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
void DeviceNameHelper::stateWaitResponse() {
   d642a:	4604      	mov	r4, r0
    if (gotResponse) {
   d642c:	b31d      	cbz	r5, d6476 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x52>
        if (data->name[0]) {
   d642e:	6846      	ldr	r6, [r0, #4]
   d6430:	7b33      	ldrb	r3, [r6, #12]
   d6432:	f100 0520 	add.w	r5, r0, #32
   d6436:	b1db      	cbz	r3, d6470 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x4c>
            data->lastCheck = Time.now();
   d6438:	f003 fafb 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d643c:	60b0      	str	r0, [r6, #8]
            save();
   d643e:	6823      	ldr	r3, [r4, #0]
   d6440:	4620      	mov	r0, r4
   d6442:	689b      	ldr	r3, [r3, #8]
   d6444:	4798      	blx	r3
            if (nameCallback) {
   d6446:	69a3      	ldr	r3, [r4, #24]
   d6448:	b12b      	cbz	r3, d6456 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x32>
                nameCallback(data->name);
   d644a:	6861      	ldr	r1, [r4, #4]
   d644c:	f104 0010 	add.w	r0, r4, #16
   d6450:	310c      	adds	r1, #12
   d6452:	f7ff fef2 	bl	d623a <_ZNKSt8functionIFvPKcEEclES1_>
            stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d6456:	4b0f      	ldr	r3, [pc, #60]	; (d6494 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x70>)
   d6458:	9300      	str	r3, [sp, #0]
   d645a:	2300      	movs	r3, #0
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	4669      	mov	r1, sp
   d6460:	4628      	mov	r0, r5
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d6462:	f7ff ff19 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6466:	f001 fd79 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d646a:	6320      	str	r0, [r4, #48]	; 0x30
}
   d646c:	b002      	add	sp, #8
   d646e:	bd70      	pop	{r4, r5, r6, pc}
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d6470:	4a09      	ldr	r2, [pc, #36]	; (d6498 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d6472:	9200      	str	r2, [sp, #0]
   d6474:	e7f2      	b.n	d645c <_ZN16DeviceNameHelper17stateWaitResponseEv+0x38>
   d6476:	f001 fd71 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RESPONSE_WAIT_MS) {
   d647a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d647c:	1ac0      	subs	r0, r0, r3
   d647e:	f643 2397 	movw	r3, #14999	; 0x3a97
   d6482:	4298      	cmp	r0, r3
   d6484:	d9f2      	bls.n	d646c <_ZN16DeviceNameHelper17stateWaitResponseEv+0x48>
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d6486:	4b04      	ldr	r3, [pc, #16]	; (d6498 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d6488:	4669      	mov	r1, sp
   d648a:	e9cd 3500 	strd	r3, r5, [sp]
   d648e:	f104 0020 	add.w	r0, r4, #32
   d6492:	e7e6      	b.n	d6462 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x3e>
   d6494:	000d64cd 	.word	0x000d64cd
   d6498:	000d649d 	.word	0x000d649d

000d649c <_ZN16DeviceNameHelper14stateWaitRetryEv>:
void DeviceNameHelper::stateWaitRetry() {
   d649c:	b513      	push	{r0, r1, r4, lr}
   d649e:	4604      	mov	r4, r0
   d64a0:	f001 fd5c 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RETRY_WAIT_MS) {
   d64a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d64a6:	1ac0      	subs	r0, r0, r3
   d64a8:	4b06      	ldr	r3, [pc, #24]	; (d64c4 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x28>)
   d64aa:	4298      	cmp	r0, r3
   d64ac:	d908      	bls.n	d64c0 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x24>
        stateHandler = &DeviceNameHelper::stateWaitConnected;
   d64ae:	4b06      	ldr	r3, [pc, #24]	; (d64c8 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x2c>)
   d64b0:	9300      	str	r3, [sp, #0]
   d64b2:	4669      	mov	r1, sp
   d64b4:	2300      	movs	r3, #0
   d64b6:	f104 0020 	add.w	r0, r4, #32
   d64ba:	9301      	str	r3, [sp, #4]
   d64bc:	f7ff feec 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d64c0:	b002      	add	sp, #8
   d64c2:	bd10      	pop	{r4, pc}
   d64c4:	000493df 	.word	0x000493df
   d64c8:	000d637d 	.word	0x000d637d

000d64cc <_ZN16DeviceNameHelper16stateWaitRecheckEv>:
void DeviceNameHelper::stateWaitRecheck() {
   d64cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d64ce:	4604      	mov	r4, r0
   d64d0:	f001 fd44 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d64d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d64d6:	1ac0      	subs	r0, r0, r3
   d64d8:	f242 730f 	movw	r3, #9999	; 0x270f
   d64dc:	4298      	cmp	r0, r3
   d64de:	d91e      	bls.n	d651e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d64e0:	f001 fd3c 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (forceCheck) {
   d64e4:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
    stateTime = millis();
   d64e8:	6320      	str	r0, [r4, #48]	; 0x30
    if (forceCheck) {
   d64ea:	b15d      	cbz	r5, d6504 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x38>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d64ec:	4a18      	ldr	r2, [pc, #96]	; (d6550 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
        forceCheck = false;
   d64ee:	2300      	movs	r3, #0
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d64f0:	e9cd 2300 	strd	r2, r3, [sp]
        forceCheck = false;
   d64f4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d64f8:	4669      	mov	r1, sp
   d64fa:	f104 0020 	add.w	r0, r4, #32
   d64fe:	f7ff fecb 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d6502:	e00c      	b.n	d651e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
    if (checkPeriod.count() == 0) {
   d6504:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d6508:	4313      	orrs	r3, r2
   d650a:	d10a      	bne.n	d6522 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x56>
	if (_M_manager)
   d650c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d650e:	b133      	cbz	r3, d651e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = 0;
   d6510:	f104 0120 	add.w	r1, r4, #32
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d6514:	2203      	movs	r2, #3
   d6516:	4608      	mov	r0, r1
   d6518:	4798      	blx	r3
	    _M_invoker = nullptr;
   d651a:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
}
   d651e:	b003      	add	sp, #12
   d6520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Time.isValid() && (data->lastCheck + checkPeriod.count()) < Time.now()) {
   d6522:	f003 fa69 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d6526:	2800      	cmp	r0, #0
   d6528:	d0f9      	beq.n	d651e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d652a:	6863      	ldr	r3, [r4, #4]
   d652c:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
   d6530:	689b      	ldr	r3, [r3, #8]
   d6532:	18f6      	adds	r6, r6, r3
   d6534:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   d6538:	f003 fa7b 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d653c:	17c1      	asrs	r1, r0, #31
   d653e:	4286      	cmp	r6, r0
   d6540:	eb77 0301 	sbcs.w	r3, r7, r1
   d6544:	daeb      	bge.n	d651e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
   d6548:	e9cd 3500 	strd	r3, r5, [sp]
   d654c:	e7d4      	b.n	d64f8 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x2c>
   d654e:	bf00      	nop
   d6550:	000d6555 	.word	0x000d6555

000d6554 <_ZN16DeviceNameHelper14stateSubscribeEv>:
void DeviceNameHelper::stateSubscribe() {
   d6554:	b530      	push	{r4, r5, lr}
    if (!hasSubscribed) {
   d6556:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
void DeviceNameHelper::stateSubscribe() {
   d655a:	b08b      	sub	sp, #44	; 0x2c
   d655c:	4604      	mov	r4, r0
    if (!hasSubscribed) {
   d655e:	bb6d      	cbnz	r5, d65bc <_ZN16DeviceNameHelper14stateSubscribeEv+0x68>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6560:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d6562:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6564:	f7fd fd97 	bl	d4096 <_Znwj>
   d6568:	b118      	cbz	r0, d6572 <_ZN16DeviceNameHelper14stateSubscribeEv+0x1e>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d656a:	4b1a      	ldr	r3, [pc, #104]	; (d65d4 <_ZN16DeviceNameHelper14stateSubscribeEv+0x80>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d656c:	6084      	str	r4, [r0, #8]
   d656e:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d6572:	4b19      	ldr	r3, [pc, #100]	; (d65d8 <_ZN16DeviceNameHelper14stateSubscribeEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6574:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6576:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d6578:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d657a:	4b18      	ldr	r3, [pc, #96]	; (d65dc <_ZN16DeviceNameHelper14stateSubscribeEv+0x88>)
   d657c:	9304      	str	r3, [sp, #16]
   d657e:	a806      	add	r0, sp, #24
   d6580:	f7ff fe4c 	bl	d621c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d6584:	9b08      	ldr	r3, [sp, #32]
   d6586:	b183      	cbz	r3, d65aa <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d6588:	2010      	movs	r0, #16
   d658a:	f7fd fd84 	bl	d4096 <_Znwj>
   d658e:	4605      	mov	r5, r0
   d6590:	b158      	cbz	r0, d65aa <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
   d6592:	a906      	add	r1, sp, #24
   d6594:	f7ff fe42 	bl	d621c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d6598:	2300      	movs	r3, #0
   d659a:	e9cd 3300 	strd	r3, r3, [sp]
   d659e:	4910      	ldr	r1, [pc, #64]	; (d65e0 <_ZN16DeviceNameHelper14stateSubscribeEv+0x8c>)
   d65a0:	4810      	ldr	r0, [pc, #64]	; (d65e4 <_ZN16DeviceNameHelper14stateSubscribeEv+0x90>)
   d65a2:	2301      	movs	r3, #1
   d65a4:	462a      	mov	r2, r5
   d65a6:	f001 feef 	bl	d8388 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d65aa:	a806      	add	r0, sp, #24
   d65ac:	f7fd fe67 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d65b0:	a802      	add	r0, sp, #8
   d65b2:	f7fd fe64 	bl	d427e <_ZNSt14_Function_baseD1Ev>
        hasSubscribed = true;
   d65b6:	2301      	movs	r3, #1
   d65b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    stateHandler = &DeviceNameHelper::stateWaitConnected;
   d65bc:	4b0a      	ldr	r3, [pc, #40]	; (d65e8 <_ZN16DeviceNameHelper14stateSubscribeEv+0x94>)
   d65be:	9306      	str	r3, [sp, #24]
   d65c0:	a906      	add	r1, sp, #24
   d65c2:	2300      	movs	r3, #0
   d65c4:	f104 0020 	add.w	r0, r4, #32
   d65c8:	9307      	str	r3, [sp, #28]
   d65ca:	f7ff fe65 	bl	d6298 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d65ce:	b00b      	add	sp, #44	; 0x2c
   d65d0:	bd30      	pop	{r4, r5, pc}
   d65d2:	bf00      	nop
   d65d4:	000d60a5 	.word	0x000d60a5
   d65d8:	000d6139 	.word	0x000d6139
   d65dc:	000d60fb 	.word	0x000d60fb
   d65e0:	000d86a7 	.word	0x000d86a7
   d65e4:	000dd5bc 	.word	0x000dd5bc
   d65e8:	000d637d 	.word	0x000d637d

000d65ec <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d65ec:	4b01      	ldr	r3, [pc, #4]	; (d65f4 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d65ee:	2200      	movs	r2, #0
   d65f0:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d65f2:	4770      	bx	lr
   d65f4:	2003e5f0 	.word	0x2003e5f0

000d65f8 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d65f8:	4b03      	ldr	r3, [pc, #12]	; (d6608 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d65fa:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d65fc:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d65fe:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d6602:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d6606:	4770      	bx	lr
   d6608:	40a00000 	.word	0x40a00000
   d660c:	00000000 	.word	0x00000000

000d6610 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d6610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d6614:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d66e0 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d6618:	9101      	str	r1, [sp, #4]
   d661a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d661c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d661e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d6622:	9b01      	ldr	r3, [sp, #4]
   d6624:	429d      	cmp	r5, r3
   d6626:	d02f      	beq.n	d6688 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d6628:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d662a:	f003 fc87 	bl	d9f3c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d662e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d6632:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d6634:	f003 ff5e 	bl	da4f4 <__aeabi_i2d>
   d6638:	4642      	mov	r2, r8
   d663a:	464b      	mov	r3, r9
   d663c:	4606      	mov	r6, r0
   d663e:	460f      	mov	r7, r1
   d6640:	f003 fe0a 	bl	da258 <__aeabi_dsub>
   d6644:	4652      	mov	r2, sl
   d6646:	465b      	mov	r3, fp
   d6648:	f003 ffbe 	bl	da5c8 <__aeabi_dmul>
   d664c:	4642      	mov	r2, r8
   d664e:	464b      	mov	r3, r9
   d6650:	f003 fe04 	bl	da25c <__adddf3>
   d6654:	4602      	mov	r2, r0
   d6656:	460b      	mov	r3, r1
   d6658:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d665c:	4630      	mov	r0, r6
   d665e:	4639      	mov	r1, r7
   d6660:	f003 fdfa 	bl	da258 <__aeabi_dsub>
   d6664:	4602      	mov	r2, r0
   d6666:	460b      	mov	r3, r1
   d6668:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d666c:	f003 ffac 	bl	da5c8 <__aeabi_dmul>
   d6670:	4602      	mov	r2, r0
   d6672:	460b      	mov	r3, r1
   d6674:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d6678:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d667c:	f003 fdee 	bl	da25c <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d6680:	3501      	adds	r5, #1
    sumI += sqI;
   d6682:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d6686:	e7cc      	b.n	d6622 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6688:	a313      	add	r3, pc, #76	; (adr r3, d66d8 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d668a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d668e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d6692:	f003 ff99 	bl	da5c8 <__aeabi_dmul>
   d6696:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d6698:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d669a:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d669c:	f003 ff1a 	bl	da4d4 <__aeabi_ui2d>
   d66a0:	4602      	mov	r2, r0
   d66a2:	460b      	mov	r3, r1
   d66a4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d66a8:	f004 f8b8 	bl	da81c <__aeabi_ddiv>
   d66ac:	ec41 0b10 	vmov	d0, r0, r1
   d66b0:	f003 fcaa 	bl	da008 <sqrt>
   d66b4:	4632      	mov	r2, r6
   d66b6:	463b      	mov	r3, r7
   d66b8:	ec51 0b10 	vmov	r0, r1, d0
   d66bc:	f003 ff84 	bl	da5c8 <__aeabi_dmul>
   d66c0:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d66c4:	2200      	movs	r2, #0
   d66c6:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d66c8:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d66cc:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d66d0:	b003      	add	sp, #12
   d66d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66d6:	bf00      	nop
   d66d8:	66666666 	.word	0x66666666
   d66dc:	3f4a6666 	.word	0x3f4a6666
   d66e0:	3f500000 	.word	0x3f500000

000d66e4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d66e4:	4770      	bx	lr

000d66e6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d66e6:	b510      	push	{r4, lr}
}
   d66e8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d66ea:	4604      	mov	r4, r0
}
   d66ec:	f003 fc83 	bl	d9ff6 <_ZdlPvj>
   d66f0:	4620      	mov	r0, r4
   d66f2:	bd10      	pop	{r4, pc}

000d66f4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d66f4:	6803      	ldr	r3, [r0, #0]
   d66f6:	b2c9      	uxtb	r1, r1
   d66f8:	689b      	ldr	r3, [r3, #8]
   d66fa:	4718      	bx	r3

000d66fc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d66fc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d66fe:	4d03      	ldr	r5, [pc, #12]	; (d670c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6700:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6704:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6708:	bd30      	pop	{r4, r5, pc}
   d670a:	bf00      	nop
   d670c:	000dd630 	.word	0x000dd630

000d6710 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f002 babb 	b.w	d8c8c <_ZN7TwoWire5beginEv>

000d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6716:	b510      	push	{r4, lr}
   d6718:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d671a:	6800      	ldr	r0, [r0, #0]
   d671c:	f002 faf9 	bl	d8d12 <_ZN7TwoWire6unlockEv>
   d6720:	4620      	mov	r0, r4
   d6722:	bd10      	pop	{r4, pc}

000d6724 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6728:	b08a      	sub	sp, #40	; 0x28
   d672a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d672c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d672e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6730:	f002 fae6 	bl	d8d00 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6734:	221e      	movs	r2, #30
   d6736:	2100      	movs	r1, #0
   d6738:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d673a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d673c:	f004 faf8 	bl	dad30 <memset>
		size_t framAddr = 0;
   d6740:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6742:	b1ef      	cbz	r7, d6780 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6744:	6823      	ldr	r3, [r4, #0]
   d6746:	2f1e      	cmp	r7, #30
   d6748:	46b8      	mov	r8, r7
   d674a:	bf28      	it	cs
   d674c:	f04f 081e 	movcs.w	r8, #30
   d6750:	68dd      	ldr	r5, [r3, #12]
   d6752:	aa02      	add	r2, sp, #8
   d6754:	4643      	mov	r3, r8
   d6756:	4631      	mov	r1, r6
   d6758:	4620      	mov	r0, r4
   d675a:	47a8      	blx	r5
			if (!result) {
   d675c:	4605      	mov	r5, r0
   d675e:	b958      	cbnz	r0, d6778 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6760:	480a      	ldr	r0, [pc, #40]	; (d678c <_ZN6MB85RC5eraseEv+0x68>)
   d6762:	490b      	ldr	r1, [pc, #44]	; (d6790 <_ZN6MB85RC5eraseEv+0x6c>)
   d6764:	4632      	mov	r2, r6
   d6766:	f7fd fdf1 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d676a:	a801      	add	r0, sp, #4
   d676c:	f7ff ffd3 	bl	d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6770:	4628      	mov	r0, r5
   d6772:	b00a      	add	sp, #40	; 0x28
   d6774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6778:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d677c:	4446      	add	r6, r8
		while(totalLen > 0) {
   d677e:	e7e0      	b.n	d6742 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6780:	a801      	add	r0, sp, #4
   d6782:	f7ff ffc8 	bl	d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6786:	2501      	movs	r5, #1
   d6788:	e7f2      	b.n	d6770 <_ZN6MB85RC5eraseEv+0x4c>
   d678a:	bf00      	nop
   d678c:	2003e614 	.word	0x2003e614
   d6790:	000dd5fc 	.word	0x000dd5fc

000d6794 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6798:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d679a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d679c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d679e:	460d      	mov	r5, r1
   d67a0:	4616      	mov	r6, r2
   d67a2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d67a4:	f002 faac 	bl	d8d00 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d67a8:	b1a7      	cbz	r7, d67d4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d67aa:	68e1      	ldr	r1, [r4, #12]
   d67ac:	6860      	ldr	r0, [r4, #4]
   d67ae:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d67b2:	f002 fa9e 	bl	d8cf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d67b6:	0a29      	lsrs	r1, r5, #8
   d67b8:	6860      	ldr	r0, [r4, #4]
   d67ba:	f7ff ff9b 	bl	d66f4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d67be:	4629      	mov	r1, r5
   d67c0:	6860      	ldr	r0, [r4, #4]
   d67c2:	f7ff ff97 	bl	d66f4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d67c6:	6860      	ldr	r0, [r4, #4]
   d67c8:	2100      	movs	r1, #0
   d67ca:	f002 fa95 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d67ce:	b148      	cbz	r0, d67e4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d67d0:	2400      	movs	r4, #0
   d67d2:	e000      	b.n	d67d6 <_ZN6MB85RC8readDataEjPhj+0x42>
   d67d4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d67d6:	a801      	add	r0, sp, #4
   d67d8:	f7ff ff9d 	bl	d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d67dc:	4620      	mov	r0, r4
   d67de:	b003      	add	sp, #12
   d67e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d67e4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d67e6:	7b21      	ldrb	r1, [r4, #12]
   d67e8:	6860      	ldr	r0, [r4, #4]
   d67ea:	46b8      	mov	r8, r7
   d67ec:	bf28      	it	cs
   d67ee:	f04f 0820 	movcs.w	r8, #32
   d67f2:	2301      	movs	r3, #1
   d67f4:	4642      	mov	r2, r8
   d67f6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d67fa:	f002 fa64 	bl	d8cc6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d67fe:	f003 fbcd 	bl	d9f9c <_Z19__fetch_global_Wirev>
   d6802:	6803      	ldr	r3, [r0, #0]
   d6804:	691b      	ldr	r3, [r3, #16]
   d6806:	4798      	blx	r3
   d6808:	4540      	cmp	r0, r8
   d680a:	dbe1      	blt.n	d67d0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d680c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6810:	f003 fbc4 	bl	d9f9c <_Z19__fetch_global_Wirev>
   d6814:	6803      	ldr	r3, [r0, #0]
   d6816:	695b      	ldr	r3, [r3, #20]
   d6818:	4798      	blx	r3
   d681a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d681e:	454e      	cmp	r6, r9
   d6820:	d1f6      	bne.n	d6810 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6822:	4445      	add	r5, r8
   d6824:	eba7 0708 	sub.w	r7, r7, r8
   d6828:	e7be      	b.n	d67a8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d682a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d682a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d682e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6830:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6832:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6834:	460e      	mov	r6, r1
   d6836:	4690      	mov	r8, r2
   d6838:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d683a:	f002 fa61 	bl	d8d00 <_ZN7TwoWire4lockEv>
   d683e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6842:	f1b9 0f00 	cmp.w	r9, #0
   d6846:	d02a      	beq.n	d689e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6848:	b34d      	cbz	r5, d689e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d684a:	68e1      	ldr	r1, [r4, #12]
   d684c:	6860      	ldr	r0, [r4, #4]
   d684e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6852:	f002 fa4e 	bl	d8cf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6856:	0a31      	lsrs	r1, r6, #8
   d6858:	6860      	ldr	r0, [r4, #4]
   d685a:	f7ff ff4b 	bl	d66f4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d685e:	6860      	ldr	r0, [r4, #4]
   d6860:	4631      	mov	r1, r6
   d6862:	f7ff ff47 	bl	d66f4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6866:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d686a:	4647      	mov	r7, r8
   d686c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6870:	6860      	ldr	r0, [r4, #4]
   d6872:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6876:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6878:	3d01      	subs	r5, #1
				wire.write(*data);
   d687a:	689b      	ldr	r3, [r3, #8]
   d687c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d687e:	4555      	cmp	r5, sl
   d6880:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6884:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6886:	d001      	beq.n	d688c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6888:	2d00      	cmp	r5, #0
   d688a:	d1f1      	bne.n	d6870 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d688c:	6860      	ldr	r0, [r4, #4]
   d688e:	2101      	movs	r1, #1
   d6890:	f002 fa32 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6894:	2800      	cmp	r0, #0
   d6896:	d0d7      	beq.n	d6848 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6898:	f04f 0900 	mov.w	r9, #0
   d689c:	e7d1      	b.n	d6842 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d689e:	a801      	add	r0, sp, #4
   d68a0:	f7ff ff39 	bl	d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d68a4:	4648      	mov	r0, r9
   d68a6:	b003      	add	sp, #12
   d68a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d68ac <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68b0:	b08b      	sub	sp, #44	; 0x2c
   d68b2:	460e      	mov	r6, r1
   d68b4:	4615      	mov	r5, r2
   d68b6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d68b8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68ba:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68bc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d68be:	f002 fa1f 	bl	d8d00 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d68c2:	42ae      	cmp	r6, r5
   d68c4:	d229      	bcs.n	d691a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d68c6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d68c8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d68ca:	b18c      	cbz	r4, d68f0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d68cc:	2c1e      	cmp	r4, #30
   d68ce:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d68d0:	f8d8 3000 	ldr.w	r3, [r8]
   d68d4:	bf28      	it	cs
   d68d6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d68d8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d68da:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d68de:	aa02      	add	r2, sp, #8
   d68e0:	463b      	mov	r3, r7
   d68e2:	4631      	mov	r1, r6
   d68e4:	4640      	mov	r0, r8
				framAddrTo -= count;
   d68e6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d68e8:	47c8      	blx	r9
				if (!result) {
   d68ea:	b948      	cbnz	r0, d6900 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68ec:	2400      	movs	r4, #0
   d68ee:	e000      	b.n	d68f2 <_ZN6MB85RC8moveDataEjjj+0x46>
   d68f0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d68f2:	a801      	add	r0, sp, #4
   d68f4:	f7ff ff0f 	bl	d6716 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d68f8:	4620      	mov	r0, r4
   d68fa:	b00b      	add	sp, #44	; 0x2c
   d68fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6900:	f8d8 3000 	ldr.w	r3, [r8]
   d6904:	aa02      	add	r2, sp, #8
   d6906:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d690a:	4629      	mov	r1, r5
   d690c:	463b      	mov	r3, r7
   d690e:	4640      	mov	r0, r8
   d6910:	47c8      	blx	r9
				if (!result) {
   d6912:	2800      	cmp	r0, #0
   d6914:	d0ea      	beq.n	d68ec <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6916:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6918:	e7d7      	b.n	d68ca <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d691a:	d9e9      	bls.n	d68f0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d691c:	2c00      	cmp	r4, #0
   d691e:	d0e7      	beq.n	d68f0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6920:	f8d8 3000 	ldr.w	r3, [r8]
   d6924:	2c1e      	cmp	r4, #30
   d6926:	4627      	mov	r7, r4
   d6928:	bf28      	it	cs
   d692a:	271e      	movcs	r7, #30
   d692c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6930:	aa02      	add	r2, sp, #8
   d6932:	463b      	mov	r3, r7
   d6934:	4631      	mov	r1, r6
   d6936:	4640      	mov	r0, r8
   d6938:	47c8      	blx	r9
				if (!result) {
   d693a:	2800      	cmp	r0, #0
   d693c:	d0d6      	beq.n	d68ec <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d693e:	f8d8 3000 	ldr.w	r3, [r8]
   d6942:	aa02      	add	r2, sp, #8
   d6944:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6948:	4629      	mov	r1, r5
   d694a:	463b      	mov	r3, r7
   d694c:	4640      	mov	r0, r8
   d694e:	47c8      	blx	r9
				if (!result) {
   d6950:	2800      	cmp	r0, #0
   d6952:	d0cb      	beq.n	d68ec <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6954:	443e      	add	r6, r7
				framAddrTo += count;
   d6956:	443d      	add	r5, r7
				numBytes -= count;
   d6958:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d695a:	e7df      	b.n	d691c <_ZN6MB85RC8moveDataEjjj+0x70>

000d695c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d695c:	2040      	movs	r0, #64	; 0x40
   d695e:	4770      	bx	lr

000d6960 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6960:	2000      	movs	r0, #0
   d6962:	4770      	bx	lr

000d6964 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d6964:	2080      	movs	r0, #128	; 0x80
   d6966:	4770      	bx	lr

000d6968 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6968:	20ff      	movs	r0, #255	; 0xff
   d696a:	4770      	bx	lr

000d696c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d696c:	4770      	bx	lr

000d696e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d696e:	4770      	bx	lr

000d6970 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6970:	4770      	bx	lr

000d6972 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d6972:	4770      	bx	lr

000d6974 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d6974:	b510      	push	{r4, lr}
}
   d6976:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d6978:	4604      	mov	r4, r0
}
   d697a:	f003 fb3c 	bl	d9ff6 <_ZdlPvj>
   d697e:	4620      	mov	r0, r4
   d6980:	bd10      	pop	{r4, pc}

000d6982 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d6982:	b510      	push	{r4, lr}
}
   d6984:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d6986:	4604      	mov	r4, r0
}
   d6988:	f003 fb35 	bl	d9ff6 <_ZdlPvj>
   d698c:	4620      	mov	r0, r4
   d698e:	bd10      	pop	{r4, pc}

000d6990 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d6990:	b510      	push	{r4, lr}
}
   d6992:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d6994:	4604      	mov	r4, r0
}
   d6996:	f003 fb2e 	bl	d9ff6 <_ZdlPvj>
   d699a:	4620      	mov	r0, r4
   d699c:	bd10      	pop	{r4, pc}

000d699e <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d699e:	b510      	push	{r4, lr}
}
   d69a0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d69a2:	4604      	mov	r4, r0
}
   d69a4:	f003 fb27 	bl	d9ff6 <_ZdlPvj>
   d69a8:	4620      	mov	r0, r4
   d69aa:	bd10      	pop	{r4, pc}

000d69ac <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d69ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d69b0:	6803      	ldr	r3, [r0, #0]
   d69b2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d69b4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d69b6:	4798      	blx	r3
   d69b8:	2210      	movs	r2, #16
   d69ba:	4601      	mov	r1, r0
   d69bc:	4668      	mov	r0, sp
   d69be:	f004 f9b7 	bl	dad30 <memset>
	size_t len = length();
   d69c2:	6823      	ldr	r3, [r4, #0]
   d69c4:	4620      	mov	r0, r4
   d69c6:	689b      	ldr	r3, [r3, #8]
   d69c8:	4798      	blx	r3
	size_t offset = 0;
   d69ca:	2500      	movs	r5, #0
	size_t len = length();
   d69cc:	4607      	mov	r7, r0
	bool bResult = false;
   d69ce:	4628      	mov	r0, r5
	while(offset < len) {
   d69d0:	42bd      	cmp	r5, r7
   d69d2:	d20e      	bcs.n	d69f2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d69d4:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d69d6:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d69d8:	2e10      	cmp	r6, #16
   d69da:	bf28      	it	cs
   d69dc:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d69de:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d69e2:	466a      	mov	r2, sp
   d69e4:	4633      	mov	r3, r6
   d69e6:	4629      	mov	r1, r5
   d69e8:	4620      	mov	r0, r4
   d69ea:	47c0      	blx	r8
		if (!bResult) {
   d69ec:	b108      	cbz	r0, d69f2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d69ee:	4435      	add	r5, r6
	while(offset < len) {
   d69f0:	e7ee      	b.n	d69d0 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d69f2:	b004      	add	sp, #16
   d69f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d69f8 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d69f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   d69fc:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d69fe:	f240 1301 	movw	r3, #257	; 0x101
   d6a02:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d6a04:	2300      	movs	r3, #0
   d6a06:	8203      	strh	r3, [r0, #16]
}
   d6a08:	4770      	bx	lr
	...

000d6a0c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b06      	ldr	r3, [pc, #24]	; (d6a28 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6a10:	6003      	str	r3, [r0, #0]
   d6a12:	4b06      	ldr	r3, [pc, #24]	; (d6a2c <_ZN12MCP79410TimeC1Ev+0x20>)
   d6a14:	6043      	str	r3, [r0, #4]
   d6a16:	f240 7304 	movw	r3, #1796	; 0x704
   d6a1a:	8103      	strh	r3, [r0, #8]
   d6a1c:	2300      	movs	r3, #0
   d6a1e:	7443      	strb	r3, [r0, #17]
	clear();
   d6a20:	f7ff ffea 	bl	d69f8 <_ZN12MCP79410Time5clearEv>
}
   d6a24:	bd08      	pop	{r3, pc}
   d6a26:	bf00      	nop
   d6a28:	000dd710 	.word	0x000dd710
   d6a2c:	03020100 	.word	0x03020100

000d6a30 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a30:	0903      	lsrs	r3, r0, #4
}
   d6a32:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a34:	f000 000f 	and.w	r0, r0, #15
}
   d6a38:	fb02 0003 	mla	r0, r2, r3, r0
   d6a3c:	4770      	bx	lr

000d6a3e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6a3e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6a40:	7a80      	ldrb	r0, [r0, #10]
   d6a42:	f7ff fff5 	bl	d6a30 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6a46:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6a4a:	bd08      	pop	{r3, pc}

000d6a4c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6a4c:	7ac0      	ldrb	r0, [r0, #11]
   d6a4e:	f000 001f 	and.w	r0, r0, #31
   d6a52:	f7ff bfed 	b.w	d6a30 <_ZN12MCP79410Time8bcdToIntEh>

000d6a56 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6a56:	7b00      	ldrb	r0, [r0, #12]
   d6a58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6a5c:	f7ff bfe8 	b.w	d6a30 <_ZN12MCP79410Time8bcdToIntEh>

000d6a60 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6a60:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6a62:	7b81      	ldrb	r1, [r0, #14]
   d6a64:	064a      	lsls	r2, r1, #25
   d6a66:	d50d      	bpl.n	d6a84 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6a68:	f001 001f 	and.w	r0, r1, #31
   d6a6c:	f7ff ffe0 	bl	d6a30 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6a70:	068b      	lsls	r3, r1, #26
   d6a72:	d503      	bpl.n	d6a7c <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d6a74:	280c      	cmp	r0, #12
   d6a76:	d000      	beq.n	d6a7a <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6a78:	300c      	adds	r0, #12
}
   d6a7a:	bd08      	pop	{r3, pc}
				return 0;
   d6a7c:	280c      	cmp	r0, #12
   d6a7e:	bf08      	it	eq
   d6a80:	2000      	moveq	r0, #0
   d6a82:	e7fa      	b.n	d6a7a <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d6a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6a88:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6a8c:	f7ff bfd0 	b.w	d6a30 <_ZN12MCP79410Time8bcdToIntEh>

000d6a90 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6a90:	7bc0      	ldrb	r0, [r0, #15]
   d6a92:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6a96:	f7ff bfcb 	b.w	d6a30 <_ZN12MCP79410Time8bcdToIntEh>

000d6a9a <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6a9a:	7c00      	ldrb	r0, [r0, #16]
   d6a9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6aa0:	f7ff bfc6 	b.w	d6a30 <_ZN12MCP79410Time8bcdToIntEh>

000d6aa4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d6aa4:	b510      	push	{r4, lr}
   d6aa6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6aa8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6aaa:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6aac:	2100      	movs	r1, #0
   d6aae:	a801      	add	r0, sp, #4
   d6ab0:	f004 f93e 	bl	dad30 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	f7ff ffc2 	bl	d6a3e <_ZNK12MCP79410Time7getYearEv>
   d6aba:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6abe:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff ffc3 	bl	d6a4c <_ZNK12MCP79410Time8getMonthEv>
   d6ac6:	3801      	subs	r0, #1
   d6ac8:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6aca:	4620      	mov	r0, r4
   d6acc:	f7ff ffc3 	bl	d6a56 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6ad0:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	f7ff ffc4 	bl	d6a60 <_ZNK12MCP79410Time7getHourEv>
   d6ad8:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6ada:	4620      	mov	r0, r4
   d6adc:	f7ff ffd8 	bl	d6a90 <_ZNK12MCP79410Time9getMinuteEv>
   d6ae0:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	f7ff ffd9 	bl	d6a9a <_ZNK12MCP79410Time9getSecondEv>
   d6ae8:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d6aea:	a801      	add	r0, sp, #4
   d6aec:	f001 fd44 	bl	d8578 <mktime>
}
   d6af0:	b00a      	add	sp, #40	; 0x28
   d6af2:	bd10      	pop	{r4, pc}

000d6af4 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6af4:	210a      	movs	r1, #10
   d6af6:	fb90 f2f1 	sdiv	r2, r0, r1
   d6afa:	fb92 f3f1 	sdiv	r3, r2, r1
   d6afe:	fb01 2313 	mls	r3, r1, r3, r2
   d6b02:	011b      	lsls	r3, r3, #4
   d6b04:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6b06:	fb01 0012 	mls	r0, r1, r2, r0
   d6b0a:	4318      	orrs	r0, r3
}
   d6b0c:	b2c0      	uxtb	r0, r0
   d6b0e:	4770      	bx	lr

000d6b10 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6b10:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6b12:	b510      	push	{r4, lr}
   d6b14:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6b16:	fb91 f0f3 	sdiv	r0, r1, r3
   d6b1a:	fb00 1013 	mls	r0, r0, r3, r1
   d6b1e:	f7ff ffe9 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
   d6b22:	72a0      	strb	r0, [r4, #10]
}
   d6b24:	bd10      	pop	{r4, pc}

000d6b26 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6b26:	b510      	push	{r4, lr}
   d6b28:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6b2a:	4608      	mov	r0, r1
   d6b2c:	f7ff ffe2 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
   d6b30:	72e0      	strb	r0, [r4, #11]
}
   d6b32:	bd10      	pop	{r4, pc}

000d6b34 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6b34:	b510      	push	{r4, lr}
   d6b36:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6b38:	4608      	mov	r0, r1
   d6b3a:	f7ff ffdb 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6b3e:	7b23      	ldrb	r3, [r4, #12]
   d6b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6b44:	4318      	orrs	r0, r3
   d6b46:	7320      	strb	r0, [r4, #12]
}
   d6b48:	bd10      	pop	{r4, pc}

000d6b4a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6b4a:	b510      	push	{r4, lr}
   d6b4c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6b4e:	1c48      	adds	r0, r1, #1
   d6b50:	f7ff ffd0 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6b54:	7b63      	ldrb	r3, [r4, #13]
   d6b56:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6b5a:	4318      	orrs	r0, r3
   d6b5c:	7360      	strb	r0, [r4, #13]
}
   d6b5e:	bd10      	pop	{r4, pc}

000d6b60 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6b60:	b510      	push	{r4, lr}
   d6b62:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6b64:	4608      	mov	r0, r1
   d6b66:	f7ff ffc5 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
   d6b6a:	73a0      	strb	r0, [r4, #14]
}
   d6b6c:	bd10      	pop	{r4, pc}

000d6b6e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6b6e:	b510      	push	{r4, lr}
   d6b70:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6b72:	4608      	mov	r0, r1
   d6b74:	f7ff ffbe 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
   d6b78:	73e0      	strb	r0, [r4, #15]
}
   d6b7a:	bd10      	pop	{r4, pc}

000d6b7c <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6b7c:	b510      	push	{r4, lr}
   d6b7e:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6b80:	4608      	mov	r0, r1
   d6b82:	f7ff ffb7 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d6b86:	7c23      	ldrb	r3, [r4, #16]
   d6b88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6b8c:	4318      	orrs	r0, r3
   d6b8e:	7420      	strb	r0, [r4, #16]
}
   d6b90:	bd10      	pop	{r4, pc}

000d6b92 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d6b92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b94:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d6b96:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6b98:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6b9c:	f004 f88e 	bl	dacbc <gmtime>
   d6ba0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d6ba2:	6941      	ldr	r1, [r0, #20]
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff ffb3 	bl	d6b10 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6baa:	6929      	ldr	r1, [r5, #16]
   d6bac:	4620      	mov	r0, r4
   d6bae:	3101      	adds	r1, #1
   d6bb0:	f7ff ffb9 	bl	d6b26 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d6bb4:	68e9      	ldr	r1, [r5, #12]
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7ff ffbc 	bl	d6b34 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6bbc:	69a9      	ldr	r1, [r5, #24]
   d6bbe:	4620      	mov	r0, r4
   d6bc0:	f7ff ffc3 	bl	d6b4a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d6bc4:	68a9      	ldr	r1, [r5, #8]
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	f7ff ffca 	bl	d6b60 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6bcc:	6869      	ldr	r1, [r5, #4]
   d6bce:	4620      	mov	r0, r4
   d6bd0:	f7ff ffcd 	bl	d6b6e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6bd4:	6829      	ldr	r1, [r5, #0]
   d6bd6:	293b      	cmp	r1, #59	; 0x3b
   d6bd8:	bfa8      	it	ge
   d6bda:	213b      	movge	r1, #59	; 0x3b
   d6bdc:	4620      	mov	r0, r4
   d6bde:	f7ff ffcd 	bl	d6b7c <_ZN12MCP79410Time9setSecondEi>
}
   d6be2:	b003      	add	sp, #12
   d6be4:	bd30      	pop	{r4, r5, pc}
	...

000d6be8 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6be8:	4a05      	ldr	r2, [pc, #20]	; (d6c00 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6bea:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6bec:	e9c0 2100 	strd	r2, r1, [r0]
   d6bf0:	4a04      	ldr	r2, [pc, #16]	; (d6c04 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6bf2:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6bf4:	4a04      	ldr	r2, [pc, #16]	; (d6c08 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6bf6:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6bf8:	4a04      	ldr	r2, [pc, #16]	; (d6c0c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6bfa:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6bfc:	6142      	str	r2, [r0, #20]
}
   d6bfe:	4770      	bx	lr
   d6c00:	000dd744 	.word	0x000dd744
   d6c04:	03010000 	.word	0x03010000
   d6c08:	000dd6ec 	.word	0x000dd6ec
   d6c0c:	000dd720 	.word	0x000dd720

000d6c10 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c14:	4604      	mov	r4, r0
   d6c16:	460f      	mov	r7, r1
   d6c18:	4690      	mov	r8, r2
   d6c1a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6c1c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d6c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c20:	429e      	cmp	r6, r3
   d6c22:	d231      	bcs.n	d6c88 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6c24:	6860      	ldr	r0, [r4, #4]
   d6c26:	4639      	mov	r1, r7
   d6c28:	f002 f85f 	bl	d8cea <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6c2c:	eb08 0106 	add.w	r1, r8, r6
   d6c30:	6860      	ldr	r0, [r4, #4]
   d6c32:	f7ff fd5f 	bl	d66f4 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6c36:	6860      	ldr	r0, [r4, #4]
   d6c38:	2100      	movs	r1, #0
   d6c3a:	f002 f85d 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6c3e:	4605      	mov	r5, r0
   d6c40:	b9d0      	cbnz	r0, d6c78 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6c44:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6c46:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6c48:	2a20      	cmp	r2, #32
   d6c4a:	f04f 0301 	mov.w	r3, #1
   d6c4e:	bf28      	it	cs
   d6c50:	2220      	movcs	r2, #32
   d6c52:	4639      	mov	r1, r7
   d6c54:	f002 f837 	bl	d8cc6 <_ZN7TwoWire11requestFromEhjh>
   d6c58:	eb09 0b06 	add.w	fp, r9, r6
   d6c5c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6c5e:	eb0b 0a00 	add.w	sl, fp, r0
   d6c62:	45da      	cmp	sl, fp
   d6c64:	d006      	beq.n	d6c74 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6c66:	6860      	ldr	r0, [r4, #4]
   d6c68:	6803      	ldr	r3, [r0, #0]
   d6c6a:	695b      	ldr	r3, [r3, #20]
   d6c6c:	4798      	blx	r3
   d6c6e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d6c72:	e7f6      	b.n	d6c62 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d6c74:	442e      	add	r6, r5
	while(offset < bufLen) {
   d6c76:	e7d2      	b.n	d6c1e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6c78:	4602      	mov	r2, r0
   d6c7a:	4904      	ldr	r1, [pc, #16]	; (d6c8c <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6c7c:	4804      	ldr	r0, [pc, #16]	; (d6c90 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6c7e:	f7fd fb65 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d6c82:	4628      	mov	r0, r5
   d6c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c88:	2500      	movs	r5, #0
	return stat;
   d6c8a:	e7fa      	b.n	d6c82 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6c8c:	000dd644 	.word	0x000dd644
   d6c90:	2003e5f8 	.word	0x2003e5f8

000d6c94 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6c98:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6c9c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6c9e:	6803      	ldr	r3, [r0, #0]
   d6ca0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ca2:	4605      	mov	r5, r0
   d6ca4:	460c      	mov	r4, r1
   d6ca6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6ca8:	4798      	blx	r3
   d6caa:	4580      	cmp	r8, r0
   d6cac:	d80d      	bhi.n	d6cca <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6cae:	3420      	adds	r4, #32
   d6cb0:	6868      	ldr	r0, [r5, #4]
   d6cb2:	9600      	str	r6, [sp, #0]
   d6cb4:	463b      	mov	r3, r7
   d6cb6:	b2e2      	uxtb	r2, r4
   d6cb8:	216f      	movs	r1, #111	; 0x6f
   d6cba:	f7ff ffa9 	bl	d6c10 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6cbe:	fab0 f080 	clz	r0, r0
   d6cc2:	0940      	lsrs	r0, r0, #5
}
   d6cc4:	b002      	add	sp, #8
   d6cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6cca:	2000      	movs	r0, #0
   d6ccc:	e7fa      	b.n	d6cc4 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6cce <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6cd2:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cd6:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6cd8:	6803      	ldr	r3, [r0, #0]
   d6cda:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cdc:	4604      	mov	r4, r0
   d6cde:	460d      	mov	r5, r1
   d6ce0:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6ce2:	4798      	blx	r3
   d6ce4:	4580      	cmp	r8, r0
   d6ce6:	d80c      	bhi.n	d6d02 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6ce8:	6860      	ldr	r0, [r4, #4]
   d6cea:	9600      	str	r6, [sp, #0]
   d6cec:	463b      	mov	r3, r7
   d6cee:	b2ea      	uxtb	r2, r5
   d6cf0:	2157      	movs	r1, #87	; 0x57
   d6cf2:	f7ff ff8d 	bl	d6c10 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6cf6:	fab0 f080 	clz	r0, r0
   d6cfa:	0940      	lsrs	r0, r0, #5
}
   d6cfc:	b002      	add	sp, #8
   d6cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d02:	2000      	movs	r0, #0
   d6d04:	e7fa      	b.n	d6cfc <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6d06 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6d08:	1e1e      	subs	r6, r3, #0
   d6d0a:	bf0c      	ite	eq
   d6d0c:	2307      	moveq	r3, #7
   d6d0e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d10:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d12:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d14:	ab02      	add	r3, sp, #8
   d6d16:	460a      	mov	r2, r1
   d6d18:	216f      	movs	r1, #111	; 0x6f
   d6d1a:	f7ff ff79 	bl	d6c10 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6d1e:	4605      	mov	r5, r0
   d6d20:	b9a8      	cbnz	r0, d6d4e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6d22:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d26:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6d28:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6d2c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6d2e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6d32:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6d34:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6d38:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6d3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6d3e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6d40:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6d44:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6d46:	b92e      	cbnz	r6, d6d54 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6d48:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6d4c:	72a3      	strb	r3, [r4, #10]
}
   d6d4e:	4628      	mov	r0, r5
   d6d50:	b004      	add	sp, #16
   d6d52:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6d54:	f002 fe8a 	bl	d9a6c <_ZN9TimeClass4yearEv>
   d6d58:	f7ff fecc 	bl	d6af4 <_ZN12MCP79410Time8intToBcdEi>
   d6d5c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6d5e:	e7f6      	b.n	d6d4e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6d60 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6d62:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6d64:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6d66:	9300      	str	r3, [sp, #0]
   d6d68:	216f      	movs	r1, #111	; 0x6f
   d6d6a:	ab03      	add	r3, sp, #12
   d6d6c:	f7ff ff50 	bl	d6c10 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6d70:	b920      	cbnz	r0, d6d7c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6d72:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6d76:	b005      	add	sp, #20
   d6d78:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6d7c:	2000      	movs	r0, #0
   d6d7e:	e7fa      	b.n	d6d76 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6d80 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6d80:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6d82:	2103      	movs	r1, #3
   d6d84:	f7ff ffec 	bl	d6d60 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6d88:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6d8c:	bd08      	pop	{r3, pc}

000d6d8e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6d8e:	b538      	push	{r3, r4, r5, lr}
   d6d90:	2300      	movs	r3, #0
   d6d92:	460c      	mov	r4, r1
   d6d94:	460a      	mov	r2, r1
   d6d96:	4619      	mov	r1, r3
   d6d98:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6d9a:	f7ff ffb4 	bl	d6d06 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6d9e:	b930      	cbnz	r0, d6dae <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6da0:	7aa3      	ldrb	r3, [r4, #10]
   d6da2:	b123      	cbz	r3, d6dae <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6da4:	4628      	mov	r0, r5
}
   d6da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6daa:	f7ff bfe9 	b.w	d6d80 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6dae:	2000      	movs	r0, #0
   d6db0:	bd38      	pop	{r3, r4, r5, pc}

000d6db2 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6db2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6db4:	4602      	mov	r2, r0
	MCP79410Time time;
   d6db6:	a801      	add	r0, sp, #4
   d6db8:	f7ff fe28 	bl	d6a0c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6dbc:	a901      	add	r1, sp, #4
   d6dbe:	4610      	mov	r0, r2
   d6dc0:	f7ff ffe5 	bl	d6d8e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6dc4:	b128      	cbz	r0, d6dd2 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6dc6:	a801      	add	r0, sp, #4
   d6dc8:	f7ff fe6c 	bl	d6aa4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6dcc:	b007      	add	sp, #28
   d6dce:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6dd2:	2000      	movs	r0, #0
   d6dd4:	4601      	mov	r1, r0
   d6dd6:	e7f9      	b.n	d6dcc <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6dd8 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6dd8:	b5d0      	push	{r4, r6, r7, lr}
   d6dda:	4604      	mov	r4, r0
   d6ddc:	b086      	sub	sp, #24
	wire.begin();
   d6dde:	6840      	ldr	r0, [r0, #4]
   d6de0:	f001 ff54 	bl	d8c8c <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6de4:	f002 fe08 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d6de8:	b9e8      	cbnz	r0, d6e26 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6dea:	7ae3      	ldrb	r3, [r4, #11]
   d6dec:	079b      	lsls	r3, r3, #30
   d6dee:	d51a      	bpl.n	d6e26 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6df0:	4620      	mov	r0, r4
   d6df2:	f7ff ffde 	bl	d6db2 <_ZNK8MCP7941010getRTCTimeEv>
   d6df6:	4606      	mov	r6, r0
   d6df8:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6dfa:	ea56 0307 	orrs.w	r3, r6, r7
   d6dfe:	d012      	beq.n	d6e26 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6e00:	f002 fd01 	bl	d9806 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6e04:	4b0a      	ldr	r3, [pc, #40]	; (d6e30 <_ZN8MCP794105setupEv+0x58>)
   d6e06:	490b      	ldr	r1, [pc, #44]	; (d6e34 <_ZN8MCP794105setupEv+0x5c>)
   d6e08:	681b      	ldr	r3, [r3, #0]
   d6e0a:	9300      	str	r3, [sp, #0]
   d6e0c:	4632      	mov	r2, r6
   d6e0e:	463b      	mov	r3, r7
   d6e10:	a802      	add	r0, sp, #8
   d6e12:	f002 fdaf 	bl	d9974 <_ZN9TimeClass6formatExPKc>
   d6e16:	4808      	ldr	r0, [pc, #32]	; (d6e38 <_ZN8MCP794105setupEv+0x60>)
   d6e18:	9a02      	ldr	r2, [sp, #8]
   d6e1a:	4908      	ldr	r1, [pc, #32]	; (d6e3c <_ZN8MCP794105setupEv+0x64>)
   d6e1c:	f7fd fa96 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d6e20:	a802      	add	r0, sp, #8
   d6e22:	f002 fb77 	bl	d9514 <_ZN6StringD1Ev>
	setupDone = true;
   d6e26:	2301      	movs	r3, #1
   d6e28:	7223      	strb	r3, [r4, #8]
}
   d6e2a:	b006      	add	sp, #24
   d6e2c:	bdd0      	pop	{r4, r6, r7, pc}
   d6e2e:	bf00      	nop
   d6e30:	2003d8d8 	.word	0x2003d8d8
   d6e34:	2003e640 	.word	0x2003e640
   d6e38:	2003e5f8 	.word	0x2003e5f8
   d6e3c:	000dd65e 	.word	0x000dd65e

000d6e40 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e44:	4606      	mov	r6, r0
   d6e46:	4688      	mov	r8, r1
   d6e48:	4691      	mov	r9, r2
   d6e4a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6e4c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e50:	429d      	cmp	r5, r3
   d6e52:	d229      	bcs.n	d6ea8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6e54:	6870      	ldr	r0, [r6, #4]
   d6e56:	4641      	mov	r1, r8
   d6e58:	f001 ff47 	bl	d8cea <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6e5c:	6870      	ldr	r0, [r6, #4]
   d6e5e:	eb09 0105 	add.w	r1, r9, r5
   d6e62:	f7ff fc47 	bl	d66f4 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e68:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6e6a:	2f1f      	cmp	r7, #31
   d6e6c:	bf28      	it	cs
   d6e6e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6e70:	eb0a 0405 	add.w	r4, sl, r5
   d6e74:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6e78:	6870      	ldr	r0, [r6, #4]
   d6e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e7e:	6802      	ldr	r2, [r0, #0]
   d6e80:	6892      	ldr	r2, [r2, #8]
   d6e82:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d6e84:	45a3      	cmp	fp, r4
   d6e86:	d1f7      	bne.n	d6e78 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6e88:	6870      	ldr	r0, [r6, #4]
   d6e8a:	2101      	movs	r1, #1
   d6e8c:	f001 ff34 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6e90:	4604      	mov	r4, r0
   d6e92:	b138      	cbz	r0, d6ea4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6e94:	4602      	mov	r2, r0
   d6e96:	4905      	ldr	r1, [pc, #20]	; (d6eac <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6e98:	4805      	ldr	r0, [pc, #20]	; (d6eb0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6e9a:	f7fd fa57 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6ea4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6ea6:	e7d2      	b.n	d6e4e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6ea8:	2400      	movs	r4, #0
	return stat;
   d6eaa:	e7f8      	b.n	d6e9e <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6eac:	000dd673 	.word	0x000dd673
   d6eb0:	2003e5f8 	.word	0x2003e5f8

000d6eb4 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6eb8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6ebc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6ebe:	6803      	ldr	r3, [r0, #0]
   d6ec0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6ec2:	4605      	mov	r5, r0
   d6ec4:	460c      	mov	r4, r1
   d6ec6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6ec8:	4798      	blx	r3
   d6eca:	4580      	cmp	r8, r0
   d6ecc:	d80d      	bhi.n	d6eea <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6ece:	3420      	adds	r4, #32
   d6ed0:	6868      	ldr	r0, [r5, #4]
   d6ed2:	9600      	str	r6, [sp, #0]
   d6ed4:	463b      	mov	r3, r7
   d6ed6:	b2e2      	uxtb	r2, r4
   d6ed8:	216f      	movs	r1, #111	; 0x6f
   d6eda:	f7ff ffb1 	bl	d6e40 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6ede:	fab0 f080 	clz	r0, r0
   d6ee2:	0940      	lsrs	r0, r0, #5
}
   d6ee4:	b002      	add	sp, #8
   d6ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6eea:	2000      	movs	r0, #0
   d6eec:	e7fa      	b.n	d6ee4 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6eee <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6eee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6ef0:	7c13      	ldrb	r3, [r2, #16]
   d6ef2:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6ef6:	7bd3      	ldrb	r3, [r2, #15]
   d6ef8:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6efc:	7b93      	ldrb	r3, [r2, #14]
   d6efe:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6f02:	7b53      	ldrb	r3, [r2, #13]
   d6f04:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6f08:	7b13      	ldrb	r3, [r2, #12]
   d6f0a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6f0e:	7ad3      	ldrb	r3, [r2, #11]
   d6f10:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6f14:	7a93      	ldrb	r3, [r2, #10]
   d6f16:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6f1a:	2307      	movs	r3, #7
   d6f1c:	9300      	str	r3, [sp, #0]
   d6f1e:	460a      	mov	r2, r1
   d6f20:	ab02      	add	r3, sp, #8
   d6f22:	216f      	movs	r1, #111	; 0x6f
   d6f24:	f7ff ff8c 	bl	d6e40 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6f28:	b005      	add	sp, #20
   d6f2a:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f2e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f2e:	b510      	push	{r4, lr}
   d6f30:	b088      	sub	sp, #32
   d6f32:	4604      	mov	r4, r0
	MCP79410Time time;
   d6f34:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f36:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6f38:	f7ff fd68 	bl	d6a0c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6f3c:	9b01      	ldr	r3, [sp, #4]
   d6f3e:	a803      	add	r0, sp, #12
   d6f40:	f7ff fe27 	bl	d6b92 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f44:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f48:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6f4e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f52:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6f56:	b16a      	cbz	r2, d6f74 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6f58:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6f5c:	aa03      	add	r2, sp, #12
   d6f5e:	2100      	movs	r1, #0
   d6f60:	4620      	mov	r0, r4
   d6f62:	f88d 3019 	strb.w	r3, [sp, #25]
   d6f66:	f7ff ffc2 	bl	d6eee <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6f6a:	fab0 f080 	clz	r0, r0
   d6f6e:	0940      	lsrs	r0, r0, #5
   d6f70:	b008      	add	sp, #32
   d6f72:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6f74:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6f78:	e7f0      	b.n	d6f5c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6f7c <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f7e:	b087      	sub	sp, #28
   d6f80:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d6f82:	f002 fd39 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d6f86:	4604      	mov	r4, r0
   d6f88:	b1e8      	cbz	r0, d6fc6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d6f8a:	f002 fd52 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d6f8e:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6f90:	4602      	mov	r2, r0
		time_t now = Time.now();
   d6f92:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d6f94:	463b      	mov	r3, r7
   d6f96:	4628      	mov	r0, r5
   d6f98:	f7ff ffc9 	bl	d6f2e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6f9c:	4b0c      	ldr	r3, [pc, #48]	; (d6fd0 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6f9e:	490d      	ldr	r1, [pc, #52]	; (d6fd4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	9300      	str	r3, [sp, #0]
   d6fa4:	4632      	mov	r2, r6
   d6fa6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6fa8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6faa:	a802      	add	r0, sp, #8
   d6fac:	f002 fce2 	bl	d9974 <_ZN9TimeClass6formatExPKc>
   d6fb0:	4809      	ldr	r0, [pc, #36]	; (d6fd8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6fb2:	9a02      	ldr	r2, [sp, #8]
   d6fb4:	4909      	ldr	r1, [pc, #36]	; (d6fdc <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d6fb6:	f7fd f9c9 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d6fba:	a802      	add	r0, sp, #8
   d6fbc:	f002 faaa 	bl	d9514 <_ZN6StringD1Ev>
}
   d6fc0:	4620      	mov	r0, r4
   d6fc2:	b007      	add	sp, #28
   d6fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d6fc6:	4906      	ldr	r1, [pc, #24]	; (d6fe0 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6fc8:	4803      	ldr	r0, [pc, #12]	; (d6fd8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6fca:	f7fd f9bf 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d6fce:	e7f7      	b.n	d6fc0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6fd0:	2003d8d8 	.word	0x2003d8d8
   d6fd4:	2003e640 	.word	0x2003e640
   d6fd8:	2003e5f8 	.word	0x2003e5f8
   d6fdc:	000dd68e 	.word	0x000dd68e
   d6fe0:	000dd6a4 	.word	0x000dd6a4

000d6fe4 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6fe6:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6fe8:	4604      	mov	r4, r0
	if (!timeSet) {
   d6fea:	b99d      	cbnz	r5, d7014 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6fec:	f002 fd04 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d6ff0:	b180      	cbz	r0, d7014 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6ff2:	2200      	movs	r2, #0
   d6ff4:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6ff6:	4669      	mov	r1, sp
   d6ff8:	4628      	mov	r0, r5
        tm = 0;
   d6ffa:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d6ffe:	f001 f9db 	bl	d83b8 <spark_sync_time_last>
			if (lastSync != 0) {
   d7002:	b138      	cbz	r0, d7014 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7004:	7ae3      	ldrb	r3, [r4, #11]
   d7006:	07db      	lsls	r3, r3, #31
   d7008:	d502      	bpl.n	d7010 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d700a:	4620      	mov	r0, r4
   d700c:	f7ff ffb6 	bl	d6f7c <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d7010:	2301      	movs	r3, #1
   d7012:	7263      	strb	r3, [r4, #9]
}
   d7014:	b003      	add	sp, #12
   d7016:	bd30      	pop	{r4, r5, pc}

000d7018 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d7018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d701a:	2301      	movs	r3, #1
	buf[0] = value;
   d701c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7020:	9300      	str	r3, [sp, #0]
   d7022:	460a      	mov	r2, r1
   d7024:	ab03      	add	r3, sp, #12
   d7026:	216f      	movs	r1, #111	; 0x6f
   d7028:	f7ff ff0a 	bl	d6e40 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d702c:	b005      	add	sp, #20
   d702e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7032 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d7032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7034:	4604      	mov	r4, r0
   d7036:	460d      	mov	r5, r1
   d7038:	4617      	mov	r7, r2
   d703a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d703c:	f7ff fe90 	bl	d6d60 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d7040:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7044:	4332      	orrs	r2, r6
   d7046:	4629      	mov	r1, r5
   d7048:	4620      	mov	r0, r4
}
   d704a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d704e:	f7ff bfe3 	b.w	d7018 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d7052 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d7052:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d7054:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7056:	d80c      	bhi.n	d7072 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7058:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d705a:	f04f 0300 	mov.w	r3, #0
   d705e:	bf14      	ite	ne
   d7060:	22df      	movne	r2, #223	; 0xdf
   d7062:	22ef      	moveq	r2, #239	; 0xef
   d7064:	2107      	movs	r1, #7
   d7066:	f7ff ffe4 	bl	d7032 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d706a:	fab0 f080 	clz	r0, r0
   d706e:	0940      	lsrs	r0, r0, #5
}
   d7070:	bd08      	pop	{r3, pc}
		return false;
   d7072:	2000      	movs	r0, #0
   d7074:	e7fc      	b.n	d7070 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d7076 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7076:	b538      	push	{r3, r4, r5, lr}
   d7078:	4604      	mov	r4, r0
   d707a:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d707c:	6860      	ldr	r0, [r4, #4]
   d707e:	2157      	movs	r1, #87	; 0x57
   d7080:	f001 fe33 	bl	d8cea <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7084:	6860      	ldr	r0, [r4, #4]
   d7086:	2101      	movs	r1, #1
   d7088:	f001 fe36 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d708c:	b108      	cbz	r0, d7092 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d708e:	3d01      	subs	r5, #1
   d7090:	d1f4      	bne.n	d707c <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d7092:	bd38      	pop	{r3, r4, r5, pc}

000d7094 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7098:	4604      	mov	r4, r0
   d709a:	460f      	mov	r7, r1
   d709c:	4616      	mov	r6, r2
   d709e:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d70a2:	45b0      	cmp	r8, r6
   d70a4:	d020      	beq.n	d70e8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d70a6:	6860      	ldr	r0, [r4, #4]
   d70a8:	2157      	movs	r1, #87	; 0x57
   d70aa:	f001 fe1e 	bl	d8cea <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d70ae:	4639      	mov	r1, r7
   d70b0:	6860      	ldr	r0, [r4, #4]
   d70b2:	f7ff fb1f 	bl	d66f4 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d70b6:	6860      	ldr	r0, [r4, #4]
   d70b8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d70bc:	6803      	ldr	r3, [r0, #0]
   d70be:	689b      	ldr	r3, [r3, #8]
   d70c0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d70c2:	6860      	ldr	r0, [r4, #4]
   d70c4:	2101      	movs	r1, #1
   d70c6:	f001 fe17 	bl	d8cf8 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d70ca:	3701      	adds	r7, #1
   d70cc:	4605      	mov	r5, r0
   d70ce:	b138      	cbz	r0, d70e0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d70d0:	4602      	mov	r2, r0
   d70d2:	4906      	ldr	r1, [pc, #24]	; (d70ec <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d70d4:	4806      	ldr	r0, [pc, #24]	; (d70f0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d70d6:	f7fd f939 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
}
   d70da:	4628      	mov	r0, r5
   d70dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d70e0:	4620      	mov	r0, r4
   d70e2:	f7ff ffc8 	bl	d7076 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d70e6:	e7dc      	b.n	d70a2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d70e8:	2500      	movs	r5, #0
	return stat;
   d70ea:	e7f6      	b.n	d70da <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d70ec:	000dd6b9 	.word	0x000dd6b9
   d70f0:	2003e5f8 	.word	0x2003e5f8

000d70f4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d70f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d70f6:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d70f8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d70fa:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d70fc:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d70fe:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7100:	4604      	mov	r4, r0
   d7102:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d7104:	4798      	blx	r3
   d7106:	4287      	cmp	r7, r0
   d7108:	d80a      	bhi.n	d7120 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d710a:	9a01      	ldr	r2, [sp, #4]
   d710c:	6860      	ldr	r0, [r4, #4]
   d710e:	4633      	mov	r3, r6
   d7110:	b2e9      	uxtb	r1, r5
   d7112:	f7ff ffbf 	bl	d7094 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d7116:	fab0 f080 	clz	r0, r0
   d711a:	0940      	lsrs	r0, r0, #5
}
   d711c:	b003      	add	sp, #12
   d711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7120:	2000      	movs	r0, #0
   d7122:	e7fb      	b.n	d711c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d7124 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d7124:	4b01      	ldr	r3, [pc, #4]	; (d712c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d7126:	4a02      	ldr	r2, [pc, #8]	; (d7130 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d7128:	601a      	str	r2, [r3, #0]
}
   d712a:	4770      	bx	lr
   d712c:	2003e5f8 	.word	0x2003e5f8
   d7130:	000dd6da 	.word	0x000dd6da

000d7134 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7134:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7136:	4603      	mov	r3, r0
	switch (__op)
   d7138:	d102      	bne.n	d7140 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d713a:	6001      	str	r1, [r0, #0]
      }
   d713c:	2000      	movs	r0, #0
   d713e:	4770      	bx	lr
	  switch (__op)
   d7140:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7142:	bf04      	itt	eq
   d7144:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7148:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d714c:	e7f6      	b.n	d713c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d714e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d714e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7150:	2301      	movs	r3, #1
   d7152:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7154:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7156:	4604      	mov	r4, r0
        if (th->func) {
   d7158:	b143      	cbz	r3, d716c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d715a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d715c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d715e:	2301      	movs	r3, #1
   d7160:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7162:	2000      	movs	r0, #0
    }
   d7164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d7168:	f000 bec8 	b.w	d7efc <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d716c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d716e:	2800      	cmp	r0, #0
   d7170:	d0f5      	beq.n	d715e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d7172:	6883      	ldr	r3, [r0, #8]
   d7174:	b90b      	cbnz	r3, d717a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7176:	f002 ff44 	bl	da002 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d717a:	68c3      	ldr	r3, [r0, #12]
   d717c:	e7ee      	b.n	d715c <_ZN6Thread3runEPv+0xe>

000d717e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d717e:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7180:	6842      	ldr	r2, [r0, #4]
   d7182:	4603      	mov	r3, r0
   d7184:	1054      	asrs	r4, r2, #1
   d7186:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d718a:	07d2      	lsls	r2, r2, #31
   d718c:	bf48      	it	mi
   d718e:	590a      	ldrmi	r2, [r1, r4]
   d7190:	681b      	ldr	r3, [r3, #0]
      }
   d7192:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7196:	bf48      	it	mi
   d7198:	58d3      	ldrmi	r3, [r2, r3]
   d719a:	4718      	bx	r3

000d719c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d719c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d719e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d71a0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d71a4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d71a6:	3008      	adds	r0, #8
   d71a8:	f000 fe80 	bl	d7eac <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d71ac:	2004      	movs	r0, #4
   d71ae:	f7fc ff72 	bl	d4096 <_Znwj>
   d71b2:	4605      	mov	r5, r0
   d71b4:	b398      	cbz	r0, d721e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d71b6:	491b      	ldr	r1, [pc, #108]	; (d7224 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d71b8:	2014      	movs	r0, #20
   d71ba:	f002 ff1e 	bl	d9ffa <_ZnwjRKSt9nothrow_t>
   d71be:	b130      	cbz	r0, d71ce <_ZN21PublishQueueAsyncBase5setupEv+0x32>
      : _M_head_impl() { }
   d71c0:	2300      	movs	r3, #0
            exited(false) {
   d71c2:	e9c0 3300 	strd	r3, r3, [r0]
   d71c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d71ca:	7403      	strb	r3, [r0, #16]
   d71cc:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d71ce:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d71d0:	b1a0      	cbz	r0, d71fc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d71d2:	4b15      	ldr	r3, [pc, #84]	; (d7228 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d71d4:	4915      	ldr	r1, [pc, #84]	; (d722c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d71d6:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d71da:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d71de:	e9cd 0300 	strd	r0, r3, [sp]
   d71e2:	2202      	movs	r2, #2
   d71e4:	4b12      	ldr	r3, [pc, #72]	; (d7230 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d71e6:	3004      	adds	r0, #4
   d71e8:	f000 fe28 	bl	d7e3c <os_thread_create>
   d71ec:	b930      	cbnz	r0, d71fc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d71ee:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d71f0:	7c1b      	ldrb	r3, [r3, #16]
   d71f2:	b9a3      	cbnz	r3, d721e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d71f4:	2001      	movs	r0, #1
   d71f6:	f000 fea1 	bl	d7f3c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d71fa:	e7f8      	b.n	d71ee <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71fc:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71fe:	2300      	movs	r3, #0
   d7200:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7202:	b164      	cbz	r4, d721e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7204:	6827      	ldr	r7, [r4, #0]
   d7206:	b137      	cbz	r7, d7216 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7208:	4638      	mov	r0, r7
   d720a:	f7fd f838 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d720e:	2110      	movs	r1, #16
   d7210:	4638      	mov	r0, r7
   d7212:	f002 fef0 	bl	d9ff6 <_ZdlPvj>
   d7216:	2114      	movs	r1, #20
   d7218:	4620      	mov	r0, r4
   d721a:	f002 feec 	bl	d9ff6 <_ZdlPvj>
   d721e:	6075      	str	r5, [r6, #4]
}
   d7220:	b003      	add	sp, #12
   d7222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7224:	000ddb84 	.word	0x000ddb84
   d7228:	000d743b 	.word	0x000d743b
   d722c:	000dd74c 	.word	0x000dd74c
   d7230:	000d714f 	.word	0x000d714f

000d7234 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7234:	f247 5130 	movw	r1, #30000	; 0x7530
   d7238:	4a08      	ldr	r2, [pc, #32]	; (d725c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d723a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d723c:	4908      	ldr	r1, [pc, #32]	; (d7260 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d723e:	6002      	str	r2, [r0, #0]
   d7240:	2200      	movs	r2, #0
   d7242:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7246:	4907      	ldr	r1, [pc, #28]	; (d7264 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7248:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d724a:	4907      	ldr	r1, [pc, #28]	; (d7268 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d724c:	6042      	str	r2, [r0, #4]
   d724e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7252:	6181      	str	r1, [r0, #24]
   d7254:	8502      	strh	r2, [r0, #40]	; 0x28
   d7256:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d725a:	4770      	bx	lr
   d725c:	000dd810 	.word	0x000dd810
   d7260:	000d75a5 	.word	0x000d75a5
   d7264:	000d717f 	.word	0x000d717f
   d7268:	000d7135 	.word	0x000d7135

000d726c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d726c:	b510      	push	{r4, lr}
   d726e:	4b04      	ldr	r3, [pc, #16]	; (d7280 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7270:	4604      	mov	r4, r0
   d7272:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7276:	f7fd f802 	bl	d427e <_ZNSt14_Function_baseD1Ev>
}
   d727a:	4620      	mov	r0, r4
   d727c:	bd10      	pop	{r4, pc}
   d727e:	bf00      	nop
   d7280:	000dd810 	.word	0x000dd810

000d7284 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7284:	b510      	push	{r4, lr}
   d7286:	4b03      	ldr	r3, [pc, #12]	; (d7294 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7288:	6003      	str	r3, [r0, #0]
   d728a:	4604      	mov	r4, r0
   d728c:	f7ff ffee 	bl	d726c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7290:	4620      	mov	r0, r4
   d7292:	bd10      	pop	{r4, pc}
   d7294:	000dd838 	.word	0x000dd838

000d7298 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7298:	b510      	push	{r4, lr}
   d729a:	4604      	mov	r4, r0
}
   d729c:	f7ff fff2 	bl	d7284 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d72a0:	4620      	mov	r0, r4
   d72a2:	2138      	movs	r1, #56	; 0x38
   d72a4:	f002 fea7 	bl	d9ff6 <_ZdlPvj>
   d72a8:	4620      	mov	r0, r4
   d72aa:	bd10      	pop	{r4, pc}

000d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d72ac:	6880      	ldr	r0, [r0, #8]
   d72ae:	f000 be05 	b.w	d7ebc <os_mutex_lock>

000d72b2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d72b2:	6880      	ldr	r0, [r0, #8]
   d72b4:	f000 be0a 	b.w	d7ecc <os_mutex_unlock>

000d72b8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d72b8:	b510      	push	{r4, lr}
   d72ba:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d72bc:	6800      	ldr	r0, [r0, #0]
   d72be:	f7ff fff8 	bl	d72b2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d72c2:	4620      	mov	r0, r4
   d72c4:	bd10      	pop	{r4, pc}

000d72c6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d72c6:	b513      	push	{r0, r1, r4, lr}
   d72c8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d72ca:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d72cc:	f7ff ffee 	bl	d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d72d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d72d2:	88dc      	ldrh	r4, [r3, #6]
   d72d4:	b2a4      	uxth	r4, r4
   d72d6:	b10c      	cbz	r4, d72dc <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d72d8:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d72dc:	a801      	add	r0, sp, #4
   d72de:	f7ff ffeb 	bl	d72b8 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d72e2:	4620      	mov	r0, r4
   d72e4:	b002      	add	sp, #8
   d72e6:	bd10      	pop	{r4, pc}

000d72e8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d72e8:	b513      	push	{r0, r1, r4, lr}
   d72ea:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d72ec:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d72ee:	f7ff ffdd 	bl	d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d72f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d72f6:	b943      	cbnz	r3, d730a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d72f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d72fa:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d72fc:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d72fe:	a801      	add	r0, sp, #4
   d7300:	f7ff ffda 	bl	d72b8 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7304:	4620      	mov	r0, r4
   d7306:	b002      	add	sp, #8
   d7308:	bd10      	pop	{r4, pc}
	bool result = false;
   d730a:	2400      	movs	r4, #0
   d730c:	e7f7      	b.n	d72fe <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d730e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d730e:	b513      	push	{r0, r1, r4, lr}
   d7310:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7312:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7314:	f7ff ffca 	bl	d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d7318:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d731a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d731c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d731e:	f7ff ffcb 	bl	d72b8 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7322:	4620      	mov	r0, r4
   d7324:	b002      	add	sp, #8
   d7326:	bd10      	pop	{r4, pc}

000d7328 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d732c:	4699      	mov	r9, r3
   d732e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7330:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7334:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7338:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d733c:	4604      	mov	r4, r0
   d733e:	460f      	mov	r7, r1
   d7340:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7342:	b913      	cbnz	r3, d734a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7344:	6803      	ldr	r3, [r0, #0]
   d7346:	689b      	ldr	r3, [r3, #8]
   d7348:	4798      	blx	r3
		data = "";
   d734a:	4b31      	ldr	r3, [pc, #196]	; (d7410 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d734c:	4638      	mov	r0, r7
		data = "";
   d734e:	2e00      	cmp	r6, #0
   d7350:	bf08      	it	eq
   d7352:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7354:	f003 fd47 	bl	dade6 <strlen>
   d7358:	4605      	mov	r5, r0
   d735a:	4630      	mov	r0, r6
   d735c:	f003 fd43 	bl	dade6 <strlen>
   d7360:	4428      	add	r0, r5
   d7362:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7366:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7368:	bf1c      	itt	ne
   d736a:	f025 0503 	bicne.w	r5, r5, #3
   d736e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7370:	4633      	mov	r3, r6
   d7372:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7376:	e9cd 9a00 	strd	r9, sl, [sp]
   d737a:	4926      	ldr	r1, [pc, #152]	; (d7414 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d737c:	4826      	ldr	r0, [pc, #152]	; (d7418 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d737e:	463a      	mov	r2, r7
   d7380:	f7fc ffe4 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7384:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7386:	3b08      	subs	r3, #8
   d7388:	42ab      	cmp	r3, r5
   d738a:	d212      	bcs.n	d73b2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d738c:	2400      	movs	r4, #0
}
   d738e:	4620      	mov	r0, r4
   d7390:	b006      	add	sp, #24
   d7392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7396:	88cb      	ldrh	r3, [r1, #6]
   d7398:	2b01      	cmp	r3, #1
   d739a:	d036      	beq.n	d740a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d739c:	a805      	add	r0, sp, #20
   d739e:	f7ff ff8b 	bl	d72b8 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d73a2:	6823      	ldr	r3, [r4, #0]
   d73a4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d73a8:	699b      	ldr	r3, [r3, #24]
   d73aa:	4620      	mov	r0, r4
   d73ac:	4798      	blx	r3
   d73ae:	2800      	cmp	r0, #0
   d73b0:	d0ec      	beq.n	d738c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d73b2:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d73b4:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d73b6:	f7ff ff79 	bl	d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d73ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d73bc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d73be:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d73c0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d73c2:	1ad2      	subs	r2, r2, r3
   d73c4:	42aa      	cmp	r2, r5
   d73c6:	d3e6      	bcc.n	d7396 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d73c8:	ea48 080a 	orr.w	r8, r8, sl
   d73cc:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d73d0:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d73d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d73d6:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d73da:	4639      	mov	r1, r7
   d73dc:	4640      	mov	r0, r8
   d73de:	f003 fcdd 	bl	dad9c <strcpy>
				cp += strlen(cp) + 1;
   d73e2:	4640      	mov	r0, r8
   d73e4:	f003 fcff 	bl	dade6 <strlen>
   d73e8:	3001      	adds	r0, #1
				strcpy(cp, data);
   d73ea:	4631      	mov	r1, r6
   d73ec:	4440      	add	r0, r8
   d73ee:	f003 fcd5 	bl	dad9c <strcpy>
				nextFree += size;
   d73f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d73f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d73f6:	441d      	add	r5, r3
   d73f8:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d73fa:	88d3      	ldrh	r3, [r2, #6]
   d73fc:	3301      	adds	r3, #1
   d73fe:	80d3      	strh	r3, [r2, #6]
				return true;
   d7400:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7402:	a805      	add	r0, sp, #20
   d7404:	f7ff ff58 	bl	d72b8 <_ZN11StMutexLockD1Ev>
   d7408:	e7c1      	b.n	d738e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d740a:	2400      	movs	r4, #0
   d740c:	e7f9      	b.n	d7402 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d740e:	bf00      	nop
   d7410:	000ddbac 	.word	0x000ddbac
   d7414:	000dd75e 	.word	0x000dd75e
   d7418:	2003e5fc 	.word	0x2003e5fc

000d741c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d741c:	b508      	push	{r3, lr}
   d741e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7420:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7424:	69a3      	ldr	r3, [r4, #24]
   d7426:	b90b      	cbnz	r3, d742c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7428:	f002 fdeb 	bl	da002 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d742c:	69e3      	ldr	r3, [r4, #28]
   d742e:	4621      	mov	r1, r4
   d7430:	4628      	mov	r0, r5
   d7432:	4798      	blx	r3
		os_thread_yield();
   d7434:	f000 fd0a 	bl	d7e4c <os_thread_yield>
	while(true) {
   d7438:	e7f4      	b.n	d7424 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d743a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d743a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d743c:	f7ff ffee 	bl	d741c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7440 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7440:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7442:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7446:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7448:	4628      	mov	r0, r5
   d744a:	f003 fccc 	bl	dade6 <strlen>
   d744e:	3001      	adds	r0, #1
   d7450:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7452:	4628      	mov	r0, r5
   d7454:	f003 fcc7 	bl	dade6 <strlen>
	size_t offset = start - retainedBuffer;
   d7458:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d745a:	3001      	adds	r0, #1
   d745c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d745e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7460:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7464:	bf1c      	itt	ne
   d7466:	f1c3 0304 	rsbne	r3, r3, #4
   d746a:	18c0      	addne	r0, r0, r3
}
   d746c:	bd68      	pop	{r3, r5, r6, pc}

000d746e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d746e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7470:	4604      	mov	r4, r0
   d7472:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7474:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7476:	f7ff ff19 	bl	d72ac <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d747a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d747c:	88fb      	ldrh	r3, [r7, #6]
   d747e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7482:	b1e6      	cbz	r6, d74be <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7484:	2b01      	cmp	r3, #1
   d7486:	d922      	bls.n	d74ce <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7488:	4629      	mov	r1, r5
   d748a:	4620      	mov	r0, r4
   d748c:	f7ff ffd8 	bl	d7440 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7490:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7492:	4629      	mov	r1, r5
   d7494:	4620      	mov	r0, r4
   d7496:	f7ff ffd3 	bl	d7440 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d749a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d749c:	443a      	add	r2, r7
	if (after > 0) {
   d749e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d74a0:	4601      	mov	r1, r0
	size_t len = next - start;
   d74a2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d74a6:	d002      	beq.n	d74ae <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d74a8:	4628      	mov	r0, r5
   d74aa:	f003 fc27 	bl	dacfc <memmove>
	nextFree -= len;
   d74ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d74b0:	1b9b      	subs	r3, r3, r6
   d74b2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d74b4:	88fb      	ldrh	r3, [r7, #6]
   d74b6:	3b01      	subs	r3, #1
   d74b8:	80fb      	strh	r3, [r7, #6]
	return true;
   d74ba:	2601      	movs	r6, #1
   d74bc:	e001      	b.n	d74c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d74be:	2b00      	cmp	r3, #0
   d74c0:	d1e7      	bne.n	d7492 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d74c2:	a801      	add	r0, sp, #4
   d74c4:	f7ff fef8 	bl	d72b8 <_ZN11StMutexLockD1Ev>
}
   d74c8:	4630      	mov	r0, r6
   d74ca:	b003      	add	sp, #12
   d74cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d74ce:	2600      	movs	r6, #0
   d74d0:	e7f7      	b.n	d74c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d74d4 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d74d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d74d8:	460d      	mov	r5, r1
   d74da:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d74dc:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d74de:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d74e0:	f7ff fea8 	bl	d7234 <_ZN21PublishQueueAsyncBaseC1Ev>
   d74e4:	4b15      	ldr	r3, [pc, #84]	; (d753c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d74e6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d74ea:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d74ec:	4b14      	ldr	r3, [pc, #80]	; (d7540 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d74ee:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d74f0:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d74f2:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d74f4:	4698      	mov	r8, r3
   d74f6:	d117      	bne.n	d7528 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d74f8:	88ab      	ldrh	r3, [r5, #4]
   d74fa:	b29b      	uxth	r3, r3
   d74fc:	42b3      	cmp	r3, r6
   d74fe:	d113      	bne.n	d7528 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7500:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7504:	6367      	str	r7, [r4, #52]	; 0x34
   d7506:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d750a:	88eb      	ldrh	r3, [r5, #6]
   d750c:	fa1f f289 	uxth.w	r2, r9
   d7510:	b29b      	uxth	r3, r3
   d7512:	429a      	cmp	r2, r3
   d7514:	d20e      	bcs.n	d7534 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7516:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7518:	4620      	mov	r0, r4
   d751a:	f7ff ff91 	bl	d7440 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d751e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7520:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7522:	f109 0901 	add.w	r9, r9, #1
   d7526:	d9f0      	bls.n	d750a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7528:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d752a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d752e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7530:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7532:	80eb      	strh	r3, [r5, #6]
}
   d7534:	4620      	mov	r0, r4
   d7536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d753a:	bf00      	nop
   d753c:	000dd838 	.word	0x000dd838
   d7540:	d19cab61 	.word	0xd19cab61

000d7544 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7544:	b510      	push	{r4, lr}
   d7546:	e9d1 2300 	ldrd	r2, r3, [r1]
   d754a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d754c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d754e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7550:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7552:	b90a      	cbnz	r2, d7558 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7554:	07d9      	lsls	r1, r3, #31
   d7556:	d505      	bpl.n	d7564 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7558:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d755c:	4b0f      	ldr	r3, [pc, #60]	; (d759c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d755e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7560:	4b0f      	ldr	r3, [pc, #60]	; (d75a0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7562:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7564:	ab02      	add	r3, sp, #8
   d7566:	e893 0003 	ldmia.w	r3, {r0, r1}
   d756a:	466a      	mov	r2, sp
   d756c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7570:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7574:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7578:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d757c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d757e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7582:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7584:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7586:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7588:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d758a:	4618      	mov	r0, r3
   d758c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d758e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7590:	9105      	str	r1, [sp, #20]
   d7592:	f7fc fe74 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	}
   d7596:	4620      	mov	r0, r4
   d7598:	b006      	add	sp, #24
   d759a:	bd10      	pop	{r4, pc}
   d759c:	000d717f 	.word	0x000d717f
   d75a0:	000d7135 	.word	0x000d7135

000d75a4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d75a4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d75a6:	4b05      	ldr	r3, [pc, #20]	; (d75bc <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d75a8:	9300      	str	r3, [sp, #0]
   d75aa:	4669      	mov	r1, sp
   d75ac:	2300      	movs	r3, #0
   d75ae:	3010      	adds	r0, #16
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	f7ff ffc7 	bl	d7544 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d75b6:	b003      	add	sp, #12
   d75b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d75bc:	000d75ed 	.word	0x000d75ed

000d75c0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d75c0:	b513      	push	{r0, r1, r4, lr}
   d75c2:	4604      	mov	r4, r0
   d75c4:	f000 fcca 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d75c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d75ca:	1ac0      	subs	r0, r0, r3
   d75cc:	68e3      	ldr	r3, [r4, #12]
   d75ce:	4298      	cmp	r0, r3
   d75d0:	d308      	bcc.n	d75e4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d75d2:	4b05      	ldr	r3, [pc, #20]	; (d75e8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d75d4:	9300      	str	r3, [sp, #0]
   d75d6:	4669      	mov	r1, sp
   d75d8:	2300      	movs	r3, #0
   d75da:	f104 0010 	add.w	r0, r4, #16
   d75de:	9301      	str	r3, [sp, #4]
   d75e0:	f7ff ffb0 	bl	d7544 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d75e4:	b002      	add	sp, #8
   d75e6:	bd10      	pop	{r4, pc}
   d75e8:	000d75ed 	.word	0x000d75ed

000d75ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d75ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d75f0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d75f4:	b086      	sub	sp, #24
   d75f6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d75f8:	2b00      	cmp	r3, #0
   d75fa:	d164      	bne.n	d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d75fc:	f000 feac 	bl	d8358 <spark_cloud_flag_connected>
   d7600:	2800      	cmp	r0, #0
   d7602:	d060      	beq.n	d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7604:	f000 fcaa 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
   d7608:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d760a:	1ac0      	subs	r0, r0, r3
   d760c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7610:	4298      	cmp	r0, r3
   d7612:	d958      	bls.n	d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7614:	6823      	ldr	r3, [r4, #0]
   d7616:	4620      	mov	r0, r4
   d7618:	695b      	ldr	r3, [r3, #20]
   d761a:	4798      	blx	r3
		if (data) {
   d761c:	4605      	mov	r5, r0
   d761e:	2800      	cmp	r0, #0
   d7620:	d051      	beq.n	d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7622:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7626:	2301      	movs	r3, #1
   d7628:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d762c:	4638      	mov	r0, r7
   d762e:	f003 fbda 	bl	dade6 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7632:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7636:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d763a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d763c:	682b      	ldr	r3, [r5, #0]
   d763e:	492b      	ldr	r1, [pc, #172]	; (d76ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7640:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7642:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7644:	4633      	mov	r3, r6
   d7646:	482a      	ldr	r0, [pc, #168]	; (d76f0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7648:	463a      	mov	r2, r7
   d764a:	f7fc fe7f 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d764e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7650:	f88d 8000 	strb.w	r8, [sp]
   d7654:	4632      	mov	r2, r6
   d7656:	4639      	mov	r1, r7
   d7658:	a802      	add	r0, sp, #8
   d765a:	f001 f925 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d765e:	9d02      	ldr	r5, [sp, #8]
   d7660:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7662:	b91b      	cbnz	r3, d766c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7664:	2001      	movs	r0, #1
   d7666:	f000 ff8f 	bl	d8588 <delay>
			while(!request.isDone()) {
   d766a:	e7f8      	b.n	d765e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d766c:	2000      	movs	r0, #0
   d766e:	f000 fe15 	bl	d829c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7672:	b120      	cbz	r0, d767e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7674:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7676:	b913      	cbnz	r3, d767e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7678:	f000 fe5e 	bl	d8338 <spark_process>
    }
   d767c:	e7fa      	b.n	d7674 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d767e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7680:	2b01      	cmp	r3, #1
   d7682:	d123      	bne.n	d76cc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7684:	491b      	ldr	r1, [pc, #108]	; (d76f4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7686:	481a      	ldr	r0, [pc, #104]	; (d76f0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7688:	f7fc fe60 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d768c:	6823      	ldr	r3, [r4, #0]
   d768e:	2100      	movs	r1, #0
   d7690:	699b      	ldr	r3, [r3, #24]
   d7692:	4620      	mov	r0, r4
   d7694:	4798      	blx	r3
			isSending = false;
   d7696:	2300      	movs	r3, #0
   d7698:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d769c:	f000 fc5e 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d76a0:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d76a2:	9c03      	ldr	r4, [sp, #12]
   d76a4:	b17c      	cbz	r4, d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d76a6:	6863      	ldr	r3, [r4, #4]
   d76a8:	3b01      	subs	r3, #1
   d76aa:	6063      	str	r3, [r4, #4]
   d76ac:	b95b      	cbnz	r3, d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d76ae:	6823      	ldr	r3, [r4, #0]
   d76b0:	4620      	mov	r0, r4
   d76b2:	689b      	ldr	r3, [r3, #8]
   d76b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d76b6:	68a3      	ldr	r3, [r4, #8]
   d76b8:	3b01      	subs	r3, #1
   d76ba:	60a3      	str	r3, [r4, #8]
   d76bc:	b91b      	cbnz	r3, d76c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d76be:	6823      	ldr	r3, [r4, #0]
   d76c0:	4620      	mov	r0, r4
   d76c2:	68db      	ldr	r3, [r3, #12]
   d76c4:	4798      	blx	r3
}
   d76c6:	b006      	add	sp, #24
   d76c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d76cc:	68e2      	ldr	r2, [r4, #12]
   d76ce:	490a      	ldr	r1, [pc, #40]	; (d76f8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d76d0:	4807      	ldr	r0, [pc, #28]	; (d76f0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d76d2:	f7fc fe3b 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d76d6:	4b09      	ldr	r3, [pc, #36]	; (d76fc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d76d8:	9304      	str	r3, [sp, #16]
   d76da:	a904      	add	r1, sp, #16
   d76dc:	2300      	movs	r3, #0
   d76de:	f104 0010 	add.w	r0, r4, #16
   d76e2:	9305      	str	r3, [sp, #20]
   d76e4:	f7ff ff2e 	bl	d7544 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d76e8:	e7d5      	b.n	d7696 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d76ea:	bf00      	nop
   d76ec:	000dd79f 	.word	0x000dd79f
   d76f0:	2003e5fc 	.word	0x2003e5fc
   d76f4:	000dd7c0 	.word	0x000dd7c0
   d76f8:	000dd7d7 	.word	0x000dd7d7
   d76fc:	000d75c1 	.word	0x000d75c1

000d7700 <_GLOBAL__sub_I_pubqLogger>:
   d7700:	4b01      	ldr	r3, [pc, #4]	; (d7708 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7702:	4a02      	ldr	r2, [pc, #8]	; (d770c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7704:	601a      	str	r2, [r3, #0]
}
   d7706:	4770      	bx	lr
   d7708:	2003e5fc 	.word	0x2003e5fc
   d770c:	000dd7fe 	.word	0x000dd7fe

000d7710 <_ZN17CloudConfigUpdate4loopEv>:
    virtual void loop() {};
   d7710:	4770      	bx	lr

000d7712 <_ZN17CloudConfigUpdate11startUpdateEv>:
    virtual void startUpdate() {};
   d7712:	4770      	bx	lr

000d7714 <_ZN22CloudConfigStorageData11getJsonDataEv>:

    parse();
}

const char * const CloudConfigStorageData::getJsonData() const {
    return &((const char * const)header)[sizeof(CloudConfigDataHeader)];
   d7714:	6900      	ldr	r0, [r0, #16]
}
   d7716:	3014      	adds	r0, #20
   d7718:	4770      	bx	lr

000d771a <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d771a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d771c:	4603      	mov	r3, r0
	switch (__op)
   d771e:	d102      	bne.n	d7726 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7720:	6001      	str	r1, [r0, #0]
      }
   d7722:	2000      	movs	r0, #0
   d7724:	4770      	bx	lr
	  switch (__op)
   d7726:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7728:	bf04      	itt	eq
   d772a:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d772e:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7732:	e7f6      	b.n	d7722 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7734 <_ZN29CloudConfigUpdateSubscriptionD1Ev>:
 * 
 * You will probably want to subclass this if you want to be able to have the device request an update
 * since there is no way for this class to know how to request it. See CloudConfigUpdateWebhook for
 * and example of using startUpdate() to make a request.
 */
class CloudConfigUpdateSubscription : public CloudConfigUpdate {
   d7734:	b510      	push	{r4, lr}
   d7736:	4b04      	ldr	r3, [pc, #16]	; (d7748 <_ZN29CloudConfigUpdateSubscriptionD1Ev+0x14>)
   d7738:	4604      	mov	r4, r0
   d773a:	f840 3b0c 	str.w	r3, [r0], #12
   d773e:	f001 fee9 	bl	d9514 <_ZN6StringD1Ev>
   d7742:	4620      	mov	r0, r4
   d7744:	bd10      	pop	{r4, pc}
   d7746:	bf00      	nop
   d7748:	000dd9b8 	.word	0x000dd9b8

000d774c <_ZN29CloudConfigUpdateSubscriptionD0Ev>:
   d774c:	b510      	push	{r4, lr}
   d774e:	4604      	mov	r4, r0
   d7750:	f7ff fff0 	bl	d7734 <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d7754:	4620      	mov	r0, r4
   d7756:	211c      	movs	r1, #28
   d7758:	f002 fc4d 	bl	d9ff6 <_ZdlPvj>
   d775c:	4620      	mov	r0, r4
   d775e:	bd10      	pop	{r4, pc}

000d7760 <_ZN24CloudConfigUpdateWebhookD1Ev>:
 * Two examples that use this are the Devices Notes example and Google Sheets example.
 * 
 * This is derived from CloudConfigUpdateSubscription but is different because it subscribes
 * to a webhook response event, not eventName.
 */
class CloudConfigUpdateWebhook : public CloudConfigUpdateSubscription {
   d7760:	b510      	push	{r4, lr}
   d7762:	4b05      	ldr	r3, [pc, #20]	; (d7778 <_ZN24CloudConfigUpdateWebhookD1Ev+0x18>)
   d7764:	4604      	mov	r4, r0
   d7766:	f840 3b1c 	str.w	r3, [r0], #28
   d776a:	f001 fed3 	bl	d9514 <_ZN6StringD1Ev>
   d776e:	4620      	mov	r0, r4
   d7770:	f7ff ffe0 	bl	d7734 <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d7774:	4620      	mov	r0, r4
   d7776:	bd10      	pop	{r4, pc}
   d7778:	000dd99c 	.word	0x000dd99c

000d777c <_ZN24CloudConfigUpdateWebhookD0Ev>:
   d777c:	b510      	push	{r4, lr}
   d777e:	4604      	mov	r4, r0
   d7780:	f7ff ffee 	bl	d7760 <_ZN24CloudConfigUpdateWebhookD1Ev>
   d7784:	4620      	mov	r0, r4
   d7786:	212c      	movs	r1, #44	; 0x2c
   d7788:	f002 fc35 	bl	d9ff6 <_ZdlPvj>
   d778c:	4620      	mov	r0, r4
   d778e:	bd10      	pop	{r4, pc}

000d7790 <_ZN22CloudConfigStorageData10updateDataEPKc>:

char *CloudConfigStorageData::getJsonData() {
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
}

bool CloudConfigStorageData::updateData(const char *json) {
   d7790:	b513      	push	{r0, r1, r4, lr}
   d7792:	4604      	mov	r4, r0
    size_t jsonLen = strlen(json);
   d7794:	4608      	mov	r0, r1
   d7796:	9101      	str	r1, [sp, #4]
   d7798:	f003 fb25 	bl	dade6 <strlen>
    if (jsonLen < (dataSize - 1)) {
   d779c:	6963      	ldr	r3, [r4, #20]
   d779e:	3b01      	subs	r3, #1
   d77a0:	4283      	cmp	r3, r0
   d77a2:	d90f      	bls.n	d77c4 <_ZN22CloudConfigStorageData10updateDataEPKc+0x34>
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
   d77a4:	6920      	ldr	r0, [r4, #16]
        strcpy(getJsonData(), json);
   d77a6:	9901      	ldr	r1, [sp, #4]
   d77a8:	3014      	adds	r0, #20
   d77aa:	f003 faf7 	bl	dad9c <strcpy>
        parse();
   d77ae:	6823      	ldr	r3, [r4, #0]
   d77b0:	4620      	mov	r0, r4
   d77b2:	68db      	ldr	r3, [r3, #12]
   d77b4:	4798      	blx	r3
        return save();
   d77b6:	6823      	ldr	r3, [r4, #0]
   d77b8:	6a1b      	ldr	r3, [r3, #32]
   d77ba:	4620      	mov	r0, r4
    }
    else {
        // Too long, reject
        return false;
    }
}
   d77bc:	b002      	add	sp, #8
   d77be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return save();
   d77c2:	4718      	bx	r3
}
   d77c4:	2000      	movs	r0, #0
   d77c6:	b002      	add	sp, #8
   d77c8:	bd10      	pop	{r4, pc}

000d77ca <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d77ca:	b410      	push	{r4}
   d77cc:	6842      	ldr	r2, [r0, #4]
   d77ce:	4603      	mov	r3, r0
   d77d0:	1054      	asrs	r4, r2, #1
   d77d2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d77d6:	07d2      	lsls	r2, r2, #31
   d77d8:	bf48      	it	mi
   d77da:	590a      	ldrmi	r2, [r1, r4]
   d77dc:	681b      	ldr	r3, [r3, #0]
      }
   d77de:	f85d 4b04 	ldr.w	r4, [sp], #4
   d77e2:	bf48      	it	mi
   d77e4:	58d3      	ldrmi	r3, [r2, r3]
   d77e6:	4718      	bx	r3

000d77e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d77e8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77ea:	b538      	push	{r3, r4, r5, lr}
   d77ec:	4604      	mov	r4, r0
	  switch (__op)
   d77ee:	d007      	beq.n	d7800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d77f0:	2a03      	cmp	r2, #3
   d77f2:	d011      	beq.n	d7818 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d77f4:	2a01      	cmp	r2, #1
   d77f6:	d101      	bne.n	d77fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d77f8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d77fa:	6023      	str	r3, [r4, #0]
	}
   d77fc:	2000      	movs	r0, #0
   d77fe:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7800:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d7802:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7804:	f7fc fc47 	bl	d4096 <_Znwj>
   d7808:	4603      	mov	r3, r0
   d780a:	2800      	cmp	r0, #0
   d780c:	d0f5      	beq.n	d77fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d780e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d7812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d7816:	e7f0      	b.n	d77fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d7818:	6800      	ldr	r0, [r0, #0]
   d781a:	2800      	cmp	r0, #0
   d781c:	d0ee      	beq.n	d77fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d781e:	210c      	movs	r1, #12
   d7820:	f002 fbe9 	bl	d9ff6 <_ZdlPvj>
   d7824:	e7ea      	b.n	d77fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d7826 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM29CloudConfigUpdateSubscriptionFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7826:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d7828:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
   d782a:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d782c:	685c      	ldr	r4, [r3, #4]
   d782e:	689d      	ldr	r5, [r3, #8]
   d7830:	681b      	ldr	r3, [r3, #0]
   d7832:	6812      	ldr	r2, [r2, #0]
   d7834:	1066      	asrs	r6, r4, #1
   d7836:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d783a:	07e4      	lsls	r4, r4, #31
   d783c:	bf44      	itt	mi
   d783e:	59ac      	ldrmi	r4, [r5, r6]
   d7840:	58e3      	ldrmi	r3, [r4, r3]
      }
   d7842:	bc70      	pop	{r4, r5, r6}
   d7844:	4718      	bx	r3
	...

000d7848 <_ZN11CloudConfigD1Ev>:

CloudConfig::CloudConfig() {

}

CloudConfig::~CloudConfig() {
   d7848:	b510      	push	{r4, lr}
   d784a:	4b06      	ldr	r3, [pc, #24]	; (d7864 <_ZN11CloudConfigD1Ev+0x1c>)
   d784c:	4604      	mov	r4, r0
   d784e:	f840 3b24 	str.w	r3, [r0], #36
    class function<_Res(_ArgTypes...)>
   d7852:	f7fc fd14 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d7856:	f104 000c 	add.w	r0, r4, #12
   d785a:	f7fc fd10 	bl	d427e <_ZNSt14_Function_baseD1Ev>

}
   d785e:	4620      	mov	r0, r4
   d7860:	bd10      	pop	{r4, pc}
   d7862:	bf00      	nop
   d7864:	000dd95c 	.word	0x000dd95c

000d7868 <_ZN11CloudConfigD0Ev>:
CloudConfig::~CloudConfig() {
   d7868:	b510      	push	{r4, lr}
   d786a:	4604      	mov	r4, r0
}
   d786c:	f7ff ffec 	bl	d7848 <_ZN11CloudConfigD1Ev>
   d7870:	4620      	mov	r0, r4
   d7872:	2138      	movs	r1, #56	; 0x38
   d7874:	f002 fbbf 	bl	d9ff6 <_ZdlPvj>
   d7878:	4620      	mov	r0, r4
   d787a:	bd10      	pop	{r4, pc}

000d787c <_ZNK18CloudConfigStorage11hasJsonDataEv>:
    bool hasJsonData() const { return getJsonData()[0] != 0; };
   d787c:	b508      	push	{r3, lr}
   d787e:	6803      	ldr	r3, [r0, #0]
   d7880:	685b      	ldr	r3, [r3, #4]
   d7882:	4798      	blx	r3
   d7884:	7800      	ldrb	r0, [r0, #0]
   d7886:	3800      	subs	r0, #0
   d7888:	bf18      	it	ne
   d788a:	2001      	movne	r0, #1
   d788c:	bd08      	pop	{r3, pc}
	...

000d7890 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>:
CloudConfigStorageData::CloudConfigStorageData(CloudConfigDataHeader *header, size_t dataSize) : header(header), dataSize(dataSize) {
   d7890:	b510      	push	{r4, lr}
      : _M_ptr(0), _M_refcount()
   d7892:	2400      	movs	r4, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7894:	e9c0 4401 	strd	r4, r4, [r0, #4]
        t_(nullptr) {
   d7898:	60c4      	str	r4, [r0, #12]
   d789a:	4c02      	ldr	r4, [pc, #8]	; (d78a4 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj+0x14>)
   d789c:	6004      	str	r4, [r0, #0]
   d789e:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   d78a2:	bd10      	pop	{r4, pc}
   d78a4:	000dd970 	.word	0x000dd970

000d78a8 <_ZN22CloudConfigStorageData8validateEv>:
void CloudConfigStorageData::validate() {
   d78a8:	b570      	push	{r4, r5, r6, lr}
   d78aa:	4604      	mov	r4, r0
    if (header->magic == CloudConfig::DATA_MAGIC &&
   d78ac:	6900      	ldr	r0, [r0, #16]
   d78ae:	4d11      	ldr	r5, [pc, #68]	; (d78f4 <_ZN22CloudConfigStorageData8validateEv+0x4c>)
   d78b0:	6802      	ldr	r2, [r0, #0]
   d78b2:	42aa      	cmp	r2, r5
   d78b4:	d106      	bne.n	d78c4 <_ZN22CloudConfigStorageData8validateEv+0x1c>
   d78b6:	7903      	ldrb	r3, [r0, #4]
   d78b8:	2b14      	cmp	r3, #20
   d78ba:	d103      	bne.n	d78c4 <_ZN22CloudConfigStorageData8validateEv+0x1c>
        header->headerSize == (uint8_t)sizeof(CloudConfigDataHeader) &&
   d78bc:	88c2      	ldrh	r2, [r0, #6]
   d78be:	8aa3      	ldrh	r3, [r4, #20]
   d78c0:	429a      	cmp	r2, r3
   d78c2:	d011      	beq.n	d78e8 <_ZN22CloudConfigStorageData8validateEv+0x40>
        memset(header, 0, sizeof(CloudConfigDataHeader));
   d78c4:	2614      	movs	r6, #20
   d78c6:	4632      	mov	r2, r6
   d78c8:	2100      	movs	r1, #0
   d78ca:	f003 fa31 	bl	dad30 <memset>
        header->magic = CloudConfig::DATA_MAGIC;
   d78ce:	6923      	ldr	r3, [r4, #16]
   d78d0:	601d      	str	r5, [r3, #0]
        header->headerSize = (uint8_t)sizeof(CloudConfigDataHeader);
   d78d2:	6923      	ldr	r3, [r4, #16]
   d78d4:	711e      	strb	r6, [r3, #4]
        header->dataSize = (uint16_t)dataSize;
   d78d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d78da:	80da      	strh	r2, [r3, #6]
        memset(getJsonData(), 0, dataSize);
   d78dc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   d78e0:	2100      	movs	r1, #0
   d78e2:	4430      	add	r0, r6
   d78e4:	f003 fa24 	bl	dad30 <memset>
    parse();
   d78e8:	6823      	ldr	r3, [r4, #0]
   d78ea:	4620      	mov	r0, r4
   d78ec:	68db      	ldr	r3, [r3, #12]
}
   d78ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    parse();
   d78f2:	4718      	bx	r3
   d78f4:	7251dd53 	.word	0x7251dd53

000d78f8 <_ZN11CloudConfigC1Ev>:
CloudConfig::CloudConfig() {
   d78f8:	4a05      	ldr	r2, [pc, #20]	; (d7910 <_ZN11CloudConfigC1Ev+0x18>)
   d78fa:	6002      	str	r2, [r0, #0]
   d78fc:	2200      	movs	r2, #0
   d78fe:	e9c0 2201 	strd	r2, r2, [r0, #4]
   d7902:	e9c0 2207 	strd	r2, r2, [r0, #28]
    _Function_base() : _M_manager(nullptr) { }
   d7906:	6142      	str	r2, [r0, #20]
   d7908:	62c2      	str	r2, [r0, #44]	; 0x2c
   d790a:	6342      	str	r2, [r0, #52]	; 0x34
}
   d790c:	4770      	bx	lr
   d790e:	bf00      	nop
   d7910:	000dd95c 	.word	0x000dd95c

000d7914 <_ZN11CloudConfig8instanceEv>:
CloudConfig &CloudConfig::instance() {
   d7914:	b510      	push	{r4, lr}
    if (!_instance) {
   d7916:	4c06      	ldr	r4, [pc, #24]	; (d7930 <_ZN11CloudConfig8instanceEv+0x1c>)
   d7918:	6823      	ldr	r3, [r4, #0]
   d791a:	b93b      	cbnz	r3, d792c <_ZN11CloudConfig8instanceEv+0x18>
        _instance = new CloudConfig();
   d791c:	2038      	movs	r0, #56	; 0x38
   d791e:	f7fc fbba 	bl	d4096 <_Znwj>
   d7922:	4603      	mov	r3, r0
   d7924:	b108      	cbz	r0, d792a <_ZN11CloudConfig8instanceEv+0x16>
   d7926:	f7ff ffe7 	bl	d78f8 <_ZN11CloudConfigC1Ev>
   d792a:	6023      	str	r3, [r4, #0]
}
   d792c:	6820      	ldr	r0, [r4, #0]
   d792e:	bd10      	pop	{r4, pc}
   d7930:	2003e604 	.word	0x2003e604

000d7934 <_ZN29CloudConfigUpdateSubscription19subscriptionHandlerEPKcS1_>:

void CloudConfigUpdateSubscription::setup() {
    Particle.subscribe(eventName, &CloudConfigUpdateSubscription::subscriptionHandler, this);
}

void CloudConfigUpdateSubscription::subscriptionHandler(const char *eventName, const char *eventData) {
   d7934:	b507      	push	{r0, r1, r2, lr}
   d7936:	9201      	str	r2, [sp, #4]
    CloudConfig::instance().updateData(eventData);
   d7938:	f7ff ffec 	bl	d7914 <_ZN11CloudConfig8instanceEv>
   d793c:	6803      	ldr	r3, [r0, #0]
   d793e:	9901      	ldr	r1, [sp, #4]
   d7940:	681b      	ldr	r3, [r3, #0]
}
   d7942:	b003      	add	sp, #12
   d7944:	f85d eb04 	ldr.w	lr, [sp], #4
    CloudConfig::instance().updateData(eventData);
   d7948:	4718      	bx	r3

000d794a <_ZN11CloudConfig4loopEv>:
void CloudConfig::loop() {
   d794a:	b510      	push	{r4, lr}
   d794c:	4604      	mov	r4, r0
    storageMethod->loop();
   d794e:	6840      	ldr	r0, [r0, #4]
   d7950:	6803      	ldr	r3, [r0, #0]
   d7952:	691b      	ldr	r3, [r3, #16]
   d7954:	4798      	blx	r3
    if (updateMethod) {
   d7956:	68a0      	ldr	r0, [r4, #8]
   d7958:	b110      	cbz	r0, d7960 <_ZN11CloudConfig4loopEv+0x16>
        updateMethod->loop();
   d795a:	6803      	ldr	r3, [r0, #0]
   d795c:	685b      	ldr	r3, [r3, #4]
   d795e:	4798      	blx	r3
    if (stateHandler) {
   d7960:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7962:	b133      	cbz	r3, d7972 <_ZN11CloudConfig4loopEv+0x28>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7964:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7966:	4621      	mov	r1, r4
   d7968:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   d796c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7970:	4718      	bx	r3
   d7972:	bd10      	pop	{r4, pc}

000d7974 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>:

    // This is the subscription event name (hook-response)
    withEventName(eventName);
}

CloudConfigUpdateWebhook &CloudConfigUpdateWebhook::withEventName(const char *eventName) {
   d7974:	b510      	push	{r4, lr}
   d7976:	b08a      	sub	sp, #40	; 0x28
   d7978:	4604      	mov	r4, r0
        return spark_deviceID();
   d797a:	a806      	add	r0, sp, #24
   d797c:	9101      	str	r1, [sp, #4]
   d797e:	f000 fcf3 	bl	d8368 <spark_deviceID>
    // Response Template:
    // {{PARTICLE_DEVICE_ID}}/hook-response/{{PARTICLE_EVENT_NAME}}
    String s = String::format("%s/hook-response/%s/", System.deviceID().c_str(), eventName);
   d7982:	9b01      	ldr	r3, [sp, #4]
   d7984:	9a06      	ldr	r2, [sp, #24]
   d7986:	4909      	ldr	r1, [pc, #36]	; (d79ac <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc+0x38>)
   d7988:	a802      	add	r0, sp, #8
   d798a:	f001 fe9f 	bl	d96cc <_ZN6String6formatEPKcz>
   d798e:	a806      	add	r0, sp, #24
   d7990:	f001 fdc0 	bl	d9514 <_ZN6StringD1Ev>
    CloudConfigUpdateSubscription &withEventName(const char *eventName) { this->eventName = eventName; return *this; };
   d7994:	9902      	ldr	r1, [sp, #8]
   d7996:	f104 000c 	add.w	r0, r4, #12
   d799a:	f001 fe34 	bl	d9606 <_ZN6StringaSEPKc>
   d799e:	a802      	add	r0, sp, #8
   d79a0:	f001 fdb8 	bl	d9514 <_ZN6StringD1Ev>

    CloudConfigUpdateSubscription::withEventName(s);
    return *this;
}
   d79a4:	4620      	mov	r0, r4
   d79a6:	b00a      	add	sp, #40	; 0x28
   d79a8:	bd10      	pop	{r4, pc}
   d79aa:	bf00      	nop
   d79ac:	000dd858 	.word	0x000dd858

000d79b0 <_ZN24CloudConfigUpdateWebhookC1EPKc>:
    CloudConfigUpdate() {};
   d79b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d79b4:	f64e 2360 	movw	r3, #60000	; 0xea60
CloudConfigUpdateWebhook::CloudConfigUpdateWebhook(const char *eventName) {
   d79b8:	b570      	push	{r4, r5, r6, lr}
   d79ba:	e9c0 2301 	strd	r2, r3, [r0, #4]
   d79be:	4604      	mov	r4, r0
    CloudConfigUpdateSubscription() {};
   d79c0:	4b0c      	ldr	r3, [pc, #48]	; (d79f4 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x44>)
   d79c2:	f840 3b0c 	str.w	r3, [r0], #12
   d79c6:	460d      	mov	r5, r1
   d79c8:	4626      	mov	r6, r4
   d79ca:	490b      	ldr	r1, [pc, #44]	; (d79f8 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d79cc:	f001 fded 	bl	d95aa <_ZN6StringC1EPKc>
   d79d0:	4b0a      	ldr	r3, [pc, #40]	; (d79fc <_ZN24CloudConfigUpdateWebhookC1EPKc+0x4c>)
   d79d2:	f846 3b1c 	str.w	r3, [r6], #28
   d79d6:	4908      	ldr	r1, [pc, #32]	; (d79f8 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d79d8:	4630      	mov	r0, r6
   d79da:	f001 fde6 	bl	d95aa <_ZN6StringC1EPKc>
    requestEventName = eventName;
   d79de:	4629      	mov	r1, r5
   d79e0:	4630      	mov	r0, r6
   d79e2:	f001 fe10 	bl	d9606 <_ZN6StringaSEPKc>
    withEventName(eventName);
   d79e6:	4629      	mov	r1, r5
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7ff ffc3 	bl	d7974 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>
}
   d79ee:	4620      	mov	r0, r4
   d79f0:	bd70      	pop	{r4, r5, r6, pc}
   d79f2:	bf00      	nop
   d79f4:	000dd9b8 	.word	0x000dd9b8
   d79f8:	000ddbac 	.word	0x000ddbac
   d79fc:	000dd99c 	.word	0x000dd99c

000d7a00 <_ZNKSt8functionIFvvEEclEv>:
      if (_M_empty())
   d7a00:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7a02:	b510      	push	{r4, lr}
      if (_M_empty())
   d7a04:	b90a      	cbnz	r2, d7a0a <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d7a06:	f002 fafc 	bl	da002 <_ZSt25__throw_bad_function_callv>
    }
   d7a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a0e:	68c3      	ldr	r3, [r0, #12]
   d7a10:	4718      	bx	r3
	...

000d7a14 <_ZN11CloudConfig10updateDataEPKc>:
bool CloudConfig::updateData(const char *json) {
   d7a14:	b538      	push	{r3, r4, r5, lr}
   d7a16:	4604      	mov	r4, r0
    Log.info("updateData called %s", json);
   d7a18:	460a      	mov	r2, r1
   d7a1a:	480a      	ldr	r0, [pc, #40]	; (d7a44 <_ZN11CloudConfig10updateDataEPKc+0x30>)
bool CloudConfig::updateData(const char *json) {
   d7a1c:	460d      	mov	r5, r1
    Log.info("updateData called %s", json);
   d7a1e:	490a      	ldr	r1, [pc, #40]	; (d7a48 <_ZN11CloudConfig10updateDataEPKc+0x34>)
   d7a20:	f7fc fc94 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
    if (storageMethod) {
   d7a24:	6860      	ldr	r0, [r4, #4]
    updateDataStatus = UpdateDataStatus::SUCCESS;
   d7a26:	2302      	movs	r3, #2
   d7a28:	6223      	str	r3, [r4, #32]
    if (storageMethod) {
   d7a2a:	b148      	cbz	r0, d7a40 <_ZN11CloudConfig10updateDataEPKc+0x2c>
        storageMethod->updateData(json);
   d7a2c:	6803      	ldr	r3, [r0, #0]
   d7a2e:	4629      	mov	r1, r5
   d7a30:	695b      	ldr	r3, [r3, #20]
   d7a32:	4798      	blx	r3
        if (dataCallback) {
   d7a34:	6963      	ldr	r3, [r4, #20]
   d7a36:	b11b      	cbz	r3, d7a40 <_ZN11CloudConfig10updateDataEPKc+0x2c>
            dataCallback();
   d7a38:	f104 000c 	add.w	r0, r4, #12
   d7a3c:	f7ff ffe0 	bl	d7a00 <_ZNKSt8functionIFvvEEclEv>
}
   d7a40:	2001      	movs	r0, #1
   d7a42:	bd38      	pop	{r3, r4, r5, pc}
   d7a44:	2003e614 	.word	0x2003e614
   d7a48:	000dd86d 	.word	0x000dd86d

000d7a4c <_ZN24CloudConfigUpdateWebhook11startUpdateEv>:

void CloudConfigUpdateWebhook::startUpdate() {
   d7a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7a4e:	4604      	mov	r4, r0
    Log.info("CloudConfigUpdateWebhook::startUpdate %s", requestEventName.c_str());
   d7a50:	69c2      	ldr	r2, [r0, #28]
   d7a52:	4909      	ldr	r1, [pc, #36]	; (d7a78 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x2c>)
   d7a54:	4809      	ldr	r0, [pc, #36]	; (d7a7c <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x30>)
   d7a56:	f7fc fc79 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d7a5a:	4b09      	ldr	r3, [pc, #36]	; (d7a80 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x34>)
   d7a5c:	4a09      	ldr	r2, [pc, #36]	; (d7a84 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x38>)
   d7a5e:	781b      	ldrb	r3, [r3, #0]
   d7a60:	69e1      	ldr	r1, [r4, #28]
   d7a62:	f88d 3000 	strb.w	r3, [sp]
   d7a66:	a802      	add	r0, sp, #8
   d7a68:	233c      	movs	r3, #60	; 0x3c
   d7a6a:	f000 ff1d 	bl	d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   d7a6e:	a803      	add	r0, sp, #12
   d7a70:	f7fd fbee 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    Particle.publish(requestEventName, "");
}
   d7a74:	b004      	add	sp, #16
   d7a76:	bd10      	pop	{r4, pc}
   d7a78:	000dd882 	.word	0x000dd882
   d7a7c:	2003e614 	.word	0x2003e614
   d7a80:	2003e600 	.word	0x2003e600
   d7a84:	000ddbac 	.word	0x000ddbac

000d7a88 <_ZN29CloudConfigUpdateSubscription5setupEv>:
void CloudConfigUpdateSubscription::setup() {
   d7a88:	b570      	push	{r4, r5, r6, lr}
   d7a8a:	b08a      	sub	sp, #40	; 0x28
        operator const char*() const { return c_str(); }
   d7a8c:	68c6      	ldr	r6, [r0, #12]
   d7a8e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7a90:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7a92:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d7a94:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7a96:	f7fc fafe 	bl	d4096 <_Znwj>
   d7a9a:	b118      	cbz	r0, d7aa4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x1c>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d7a9c:	4b13      	ldr	r3, [pc, #76]	; (d7aec <_ZN29CloudConfigUpdateSubscription5setupEv+0x64>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7a9e:	6084      	str	r4, [r0, #8]
   d7aa0:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d7aa4:	4b12      	ldr	r3, [pc, #72]	; (d7af0 <_ZN29CloudConfigUpdateSubscription5setupEv+0x68>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7aa6:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7aa8:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d7aaa:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d7aac:	4b11      	ldr	r3, [pc, #68]	; (d7af4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x6c>)
   d7aae:	9304      	str	r3, [sp, #16]
   d7ab0:	a806      	add	r0, sp, #24
   d7ab2:	f7fe fbb3 	bl	d621c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d7ab6:	9b08      	ldr	r3, [sp, #32]
   d7ab8:	b183      	cbz	r3, d7adc <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
            auto wrapper = new wiring_event_handler_t(handler);
   d7aba:	2010      	movs	r0, #16
   d7abc:	f7fc faeb 	bl	d4096 <_Znwj>
   d7ac0:	4604      	mov	r4, r0
   d7ac2:	b158      	cbz	r0, d7adc <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
   d7ac4:	a906      	add	r1, sp, #24
   d7ac6:	f7fe fba9 	bl	d621c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d7aca:	2300      	movs	r3, #0
   d7acc:	e9cd 3300 	strd	r3, r3, [sp]
   d7ad0:	4909      	ldr	r1, [pc, #36]	; (d7af8 <_ZN29CloudConfigUpdateSubscription5setupEv+0x70>)
   d7ad2:	2301      	movs	r3, #1
   d7ad4:	4622      	mov	r2, r4
   d7ad6:	4630      	mov	r0, r6
   d7ad8:	f000 fc56 	bl	d8388 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d7adc:	a806      	add	r0, sp, #24
   d7ade:	f7fc fbce 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d7ae2:	a802      	add	r0, sp, #8
   d7ae4:	f7fc fbcb 	bl	d427e <_ZNSt14_Function_baseD1Ev>
}
   d7ae8:	b00a      	add	sp, #40	; 0x28
   d7aea:	bd70      	pop	{r4, r5, r6, pc}
   d7aec:	000d7935 	.word	0x000d7935
   d7af0:	000d7827 	.word	0x000d7827
   d7af4:	000d77e9 	.word	0x000d77e9
   d7af8:	000d86a7 	.word	0x000d86a7

000d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7afc:	680b      	ldr	r3, [r1, #0]
   d7afe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7b00:	b113      	cbz	r3, d7b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7b02:	685a      	ldr	r2, [r3, #4]
   d7b04:	3201      	adds	r2, #1
   d7b06:	605a      	str	r2, [r3, #4]
      }
   d7b08:	4770      	bx	lr

000d7b0a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d7b0c:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b0e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7b12:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7b14:	4604      	mov	r4, r0
   d7b16:	a801      	add	r0, sp, #4
   d7b18:	f7ff fff0 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d7b1c:	466a      	mov	r2, sp
   d7b1e:	4629      	mov	r1, r5
   d7b20:	4620      	mov	r0, r4
   d7b22:	f001 fb3b 	bl	d919c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7b26:	a801      	add	r0, sp, #4
   d7b28:	f7fd fb92 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	b003      	add	sp, #12
   d7b30:	bd30      	pop	{r4, r5, pc}

000d7b32 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>:
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d7b32:	b570      	push	{r4, r5, r6, lr}
   d7b34:	b08c      	sub	sp, #48	; 0x30
   d7b36:	4604      	mov	r4, r0
    JSONObjectIterator iter(parentObj);
   d7b38:	a806      	add	r0, sp, #24
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d7b3a:	4616      	mov	r6, r2
    JSONObjectIterator iter(parentObj);
   d7b3c:	f7ff ffe5 	bl	d7b0a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while(iter.next()) {
   d7b40:	a806      	add	r0, sp, #24
   d7b42:	f001 fb43 	bl	d91cc <_ZN5spark18JSONObjectIterator4nextEv>
   d7b46:	2800      	cmp	r0, #0
   d7b48:	d02d      	beq.n	d7ba6 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x74>

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d7b4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b4c:	9b06      	ldr	r3, [sp, #24]
   d7b4e:	9300      	str	r3, [sp, #0]
   d7b50:	a907      	add	r1, sp, #28
   d7b52:	a801      	add	r0, sp, #4
   d7b54:	f7ff ffd2 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7b58:	4629      	mov	r1, r5
   d7b5a:	466a      	mov	r2, sp
   d7b5c:	a802      	add	r0, sp, #8
   d7b5e:	f001 faf9 	bl	d9154 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7b62:	a801      	add	r0, sp, #4
   d7b64:	f7fd fb74 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (strcmp((const char *)iter.name(), key) == 0) {
   d7b68:	9804      	ldr	r0, [sp, #16]
   d7b6a:	4631      	mov	r1, r6
   d7b6c:	f003 f90c 	bl	dad88 <strcmp>
   d7b70:	4605      	mov	r5, r0
   d7b72:	a803      	add	r0, sp, #12
   d7b74:	f7fd fb6c 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b78:	2d00      	cmp	r5, #0
   d7b7a:	d1e1      	bne.n	d7b40 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0xe>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d7b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b7e:	9b06      	ldr	r3, [sp, #24]
   d7b80:	9302      	str	r3, [sp, #8]
   d7b82:	a907      	add	r1, sp, #28
   d7b84:	a803      	add	r0, sp, #12
   d7b86:	f7ff ffb9 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7b8a:	aa02      	add	r2, sp, #8
   d7b8c:	4629      	mov	r1, r5
   d7b8e:	4620      	mov	r0, r4
   d7b90:	f001 f9ca 	bl	d8f28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7b94:	a803      	add	r0, sp, #12
   d7b96:	f7fd fb5b 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b9a:	a807      	add	r0, sp, #28
   d7b9c:	f7fd fb58 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ba0:	4620      	mov	r0, r4
   d7ba2:	b00c      	add	sp, #48	; 0x30
   d7ba4:	bd70      	pop	{r4, r5, r6, pc}
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ba6:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
   d7baa:	60a0      	str	r0, [r4, #8]
}
   d7bac:	e7f5      	b.n	d7b9a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x68>
	...

000d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7bb0:	b510      	push	{r4, lr}
   d7bb2:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7bb6:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7bb8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7bba:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7bbc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7bbe:	b90a      	cbnz	r2, d7bc4 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7bc0:	07d9      	lsls	r1, r3, #31
   d7bc2:	d505      	bpl.n	d7bd0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7bc8:	4b0f      	ldr	r3, [pc, #60]	; (d7c08 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7bca:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7bcc:	4b0f      	ldr	r3, [pc, #60]	; (d7c0c <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7bce:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bd0:	ab02      	add	r3, sp, #8
   d7bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7bd6:	466a      	mov	r2, sp
   d7bd8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7be0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7be4:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7be8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7bee:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bf0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bf2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7bf4:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7bf6:	4618      	mov	r0, r3
   d7bf8:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bfa:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7bfc:	9105      	str	r1, [sp, #20]
   d7bfe:	f7fc fb3e 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	}
   d7c02:	4620      	mov	r0, r4
   d7c04:	b006      	add	sp, #24
   d7c06:	bd10      	pop	{r4, pc}
   d7c08:	000d77cb 	.word	0x000d77cb
   d7c0c:	000d771b 	.word	0x000d771b

000d7c10 <_ZN11CloudConfig5setupEv>:
void CloudConfig::setup() {
   d7c10:	b513      	push	{r0, r1, r4, lr}
   d7c12:	4604      	mov	r4, r0
    if (!storageMethod) {
   d7c14:	6840      	ldr	r0, [r0, #4]
   d7c16:	b180      	cbz	r0, d7c3a <_ZN11CloudConfig5setupEv+0x2a>
    storageMethod->setup();
   d7c18:	6803      	ldr	r3, [r0, #0]
   d7c1a:	689b      	ldr	r3, [r3, #8]
   d7c1c:	4798      	blx	r3
    if (updateMethod) {
   d7c1e:	68a0      	ldr	r0, [r4, #8]
   d7c20:	b158      	cbz	r0, d7c3a <_ZN11CloudConfig5setupEv+0x2a>
        updateMethod->setup();
   d7c22:	6803      	ldr	r3, [r0, #0]
   d7c24:	681b      	ldr	r3, [r3, #0]
   d7c26:	4798      	blx	r3
        stateHandler = &CloudConfig::stateStart;
   d7c28:	4b05      	ldr	r3, [pc, #20]	; (d7c40 <_ZN11CloudConfig5setupEv+0x30>)
   d7c2a:	9300      	str	r3, [sp, #0]
   d7c2c:	4669      	mov	r1, sp
   d7c2e:	2300      	movs	r3, #0
   d7c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7c34:	9301      	str	r3, [sp, #4]
   d7c36:	f7ff ffbb 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7c3a:	b002      	add	sp, #8
   d7c3c:	bd10      	pop	{r4, pc}
   d7c3e:	bf00      	nop
   d7c40:	000d7c45 	.word	0x000d7c45

000d7c44 <_ZN11CloudConfig10stateStartEv>:
void CloudConfig::stateStart() {
   d7c44:	b513      	push	{r0, r1, r4, lr}
   d7c46:	4604      	mov	r4, r0
    if (storageMethod->hasJsonData() && dataCallback) {
   d7c48:	6840      	ldr	r0, [r0, #4]
   d7c4a:	f7ff fe17 	bl	d787c <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d7c4e:	b128      	cbz	r0, d7c5c <_ZN11CloudConfig10stateStartEv+0x18>
   d7c50:	6963      	ldr	r3, [r4, #20]
   d7c52:	b11b      	cbz	r3, d7c5c <_ZN11CloudConfig10stateStartEv+0x18>
        dataCallback();
   d7c54:	f104 000c 	add.w	r0, r4, #12
   d7c58:	f7ff fed2 	bl	d7a00 <_ZNKSt8functionIFvvEEclEv>
    stateHandler = &CloudConfig::stateWaitCloudConnected;
   d7c5c:	4b05      	ldr	r3, [pc, #20]	; (d7c74 <_ZN11CloudConfig10stateStartEv+0x30>)
   d7c5e:	9300      	str	r3, [sp, #0]
   d7c60:	4669      	mov	r1, sp
   d7c62:	2300      	movs	r3, #0
   d7c64:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	f7ff ffa1 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7c6e:	b002      	add	sp, #8
   d7c70:	bd10      	pop	{r4, pc}
   d7c72:	bf00      	nop
   d7c74:	000d7c79 	.word	0x000d7c79

000d7c78 <_ZN11CloudConfig23stateWaitCloudConnectedEv>:
void CloudConfig::stateWaitCloudConnected() {
   d7c78:	b513      	push	{r0, r1, r4, lr}
   d7c7a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7c7c:	f000 fb6c 	bl	d8358 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d7c80:	b190      	cbz	r0, d7ca8 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
   d7c82:	f001 feb9 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d7c86:	b178      	cbz	r0, d7ca8 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
    Log.info("cloud connected");
   d7c88:	4908      	ldr	r1, [pc, #32]	; (d7cac <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x34>)
   d7c8a:	4809      	ldr	r0, [pc, #36]	; (d7cb0 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x38>)
   d7c8c:	f7fc fb5e 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &CloudConfig::stateWaitAfterCloudConnected;
   d7c90:	4b08      	ldr	r3, [pc, #32]	; (d7cb4 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x3c>)
   d7c92:	9300      	str	r3, [sp, #0]
   d7c94:	4669      	mov	r1, sp
   d7c96:	2300      	movs	r3, #0
   d7c98:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	f7ff ff87 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7ca2:	f000 f95b 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d7ca6:	6360      	str	r0, [r4, #52]	; 0x34
}
   d7ca8:	b002      	add	sp, #8
   d7caa:	bd10      	pop	{r4, pc}
   d7cac:	000dd8ab 	.word	0x000dd8ab
   d7cb0:	2003e614 	.word	0x2003e614
   d7cb4:	000d7cb9 	.word	0x000d7cb9

000d7cb8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv>:
void CloudConfig::stateWaitAfterCloudConnected() {
   d7cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7cba:	4604      	mov	r4, r0
   d7cbc:	f000 f94e 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < updateMethod->waitAfterCloudConnectedMs) {
   d7cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7cc2:	1ac0      	subs	r0, r0, r3
   d7cc4:	68a3      	ldr	r3, [r4, #8]
   d7cc6:	685b      	ldr	r3, [r3, #4]
   d7cc8:	4298      	cmp	r0, r3
   d7cca:	d317      	bcc.n	d7cfc <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x44>
    if (!storageMethod->hasJsonData() || updateFrequency == UPDATE_AT_RESTART) {
   d7ccc:	6860      	ldr	r0, [r4, #4]
   d7cce:	f7ff fdd5 	bl	d787c <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d7cd2:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d7cd6:	b198      	cbz	r0, d7d00 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
   d7cd8:	69e3      	ldr	r3, [r4, #28]
   d7cda:	3301      	adds	r3, #1
   d7cdc:	d010      	beq.n	d7d00 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
        Log.info("wait for update");
   d7cde:	490b      	ldr	r1, [pc, #44]	; (d7d0c <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x54>)
   d7ce0:	480b      	ldr	r0, [pc, #44]	; (d7d10 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d7ce2:	f7fc fb33 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d7ce6:	f000 f939 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &CloudConfig::stateWaitToUpdate;
   d7cea:	4b0a      	ldr	r3, [pc, #40]	; (d7d14 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x5c>)
        stateTime = millis();
   d7cec:	6360      	str	r0, [r4, #52]	; 0x34
        stateHandler = &CloudConfig::stateStartUpdate;
   d7cee:	9300      	str	r3, [sp, #0]
   d7cf0:	4669      	mov	r1, sp
   d7cf2:	2300      	movs	r3, #0
   d7cf4:	4628      	mov	r0, r5
   d7cf6:	9301      	str	r3, [sp, #4]
   d7cf8:	f7ff ff5a 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7cfc:	b003      	add	sp, #12
   d7cfe:	bd30      	pop	{r4, r5, pc}
        Log.info("no data or update at restart");
   d7d00:	4905      	ldr	r1, [pc, #20]	; (d7d18 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x60>)
   d7d02:	4803      	ldr	r0, [pc, #12]	; (d7d10 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d7d04:	f7fc fb22 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &CloudConfig::stateStartUpdate;
   d7d08:	4b04      	ldr	r3, [pc, #16]	; (d7d1c <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x64>)
   d7d0a:	e7f0      	b.n	d7cee <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x36>
   d7d0c:	000dd8bb 	.word	0x000dd8bb
   d7d10:	2003e614 	.word	0x2003e614
   d7d14:	000d7d21 	.word	0x000d7d21
   d7d18:	000dd8cb 	.word	0x000dd8cb
   d7d1c:	000d7d85 	.word	0x000d7d85

000d7d20 <_ZN11CloudConfig17stateWaitToUpdateEv>:
void CloudConfig::stateWaitToUpdate() {
   d7d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7d22:	4604      	mov	r4, r0
   d7d24:	f000 f91a 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d7d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7d2a:	1ac0      	subs	r0, r0, r3
   d7d2c:	f242 730f 	movw	r3, #9999	; 0x270f
   d7d30:	4298      	cmp	r0, r3
   d7d32:	d91e      	bls.n	d7d72 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
    if (Time.isValid() && updateFrequency > 0) {
   d7d34:	f001 fe60 	bl	d99f8 <_ZN9TimeClass7isValidEv>
   d7d38:	b1d8      	cbz	r0, d7d72 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
   d7d3a:	69e3      	ldr	r3, [r4, #28]
   d7d3c:	2b00      	cmp	r3, #0
   d7d3e:	dd18      	ble.n	d7d72 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
        if (Time.now() - storageMethod->getDataHeader()->lastCheck > updateFrequency) {
   d7d40:	f001 fe77 	bl	d9a32 <_ZN9TimeClass3nowEv>
   d7d44:	4605      	mov	r5, r0
   d7d46:	6860      	ldr	r0, [r4, #4]
   d7d48:	6803      	ldr	r3, [r0, #0]
   d7d4a:	681b      	ldr	r3, [r3, #0]
   d7d4c:	4798      	blx	r3
   d7d4e:	6880      	ldr	r0, [r0, #8]
   d7d50:	69e3      	ldr	r3, [r4, #28]
   d7d52:	1a2d      	subs	r5, r5, r0
   d7d54:	429d      	cmp	r5, r3
   d7d56:	dd0c      	ble.n	d7d72 <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
            Log.info("checking for time update");
   d7d58:	4907      	ldr	r1, [pc, #28]	; (d7d78 <_ZN11CloudConfig17stateWaitToUpdateEv+0x58>)
   d7d5a:	4808      	ldr	r0, [pc, #32]	; (d7d7c <_ZN11CloudConfig17stateWaitToUpdateEv+0x5c>)
   d7d5c:	f7fc faf6 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
            stateHandler = &CloudConfig::stateStartUpdate;
   d7d60:	4b07      	ldr	r3, [pc, #28]	; (d7d80 <_ZN11CloudConfig17stateWaitToUpdateEv+0x60>)
   d7d62:	9300      	str	r3, [sp, #0]
   d7d64:	4669      	mov	r1, sp
   d7d66:	2300      	movs	r3, #0
   d7d68:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	f7ff ff1f 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7d72:	b003      	add	sp, #12
   d7d74:	bd30      	pop	{r4, r5, pc}
   d7d76:	bf00      	nop
   d7d78:	000dd8e8 	.word	0x000dd8e8
   d7d7c:	2003e614 	.word	0x2003e614
   d7d80:	000d7d85 	.word	0x000d7d85

000d7d84 <_ZN11CloudConfig16stateStartUpdateEv>:
void CloudConfig::stateStartUpdate() {
   d7d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7d86:	4604      	mov	r4, r0
    Log.info("stateStartUpdate");
   d7d88:	490f      	ldr	r1, [pc, #60]	; (d7dc8 <_ZN11CloudConfig16stateStartUpdateEv+0x44>)
   d7d8a:	4810      	ldr	r0, [pc, #64]	; (d7dcc <_ZN11CloudConfig16stateStartUpdateEv+0x48>)
   d7d8c:	f7fc fade 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d7d90:	6860      	ldr	r0, [r4, #4]
   d7d92:	6803      	ldr	r3, [r0, #0]
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	4798      	blx	r3
   d7d98:	4605      	mov	r5, r0
   d7d9a:	f001 fe4a 	bl	d9a32 <_ZN9TimeClass3nowEv>
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d7d9e:	2301      	movs	r3, #1
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d7da0:	60a8      	str	r0, [r5, #8]
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d7da2:	6223      	str	r3, [r4, #32]
   d7da4:	f000 f8da 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d7da8:	4b09      	ldr	r3, [pc, #36]	; (d7dd0 <_ZN11CloudConfig16stateStartUpdateEv+0x4c>)
    stateTime = millis();
   d7daa:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d7dac:	9300      	str	r3, [sp, #0]
   d7dae:	4669      	mov	r1, sp
   d7db0:	2300      	movs	r3, #0
   d7db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7db6:	9301      	str	r3, [sp, #4]
   d7db8:	f7ff fefa 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    updateMethod->startUpdate();
   d7dbc:	68a0      	ldr	r0, [r4, #8]
   d7dbe:	6803      	ldr	r3, [r0, #0]
   d7dc0:	689b      	ldr	r3, [r3, #8]
   d7dc2:	4798      	blx	r3
}
   d7dc4:	b003      	add	sp, #12
   d7dc6:	bd30      	pop	{r4, r5, pc}
   d7dc8:	000dd901 	.word	0x000dd901
   d7dcc:	2003e614 	.word	0x2003e614
   d7dd0:	000d7dd5 	.word	0x000d7dd5

000d7dd4 <_ZN11CloudConfig23stateWaitUpdateCompleteEv>:
void CloudConfig::stateWaitUpdateComplete() {
   d7dd4:	b513      	push	{r0, r1, r4, lr}
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d7dd6:	6a03      	ldr	r3, [r0, #32]
   d7dd8:	2b01      	cmp	r3, #1
void CloudConfig::stateWaitUpdateComplete() {
   d7dda:	4604      	mov	r4, r0
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d7ddc:	d11b      	bne.n	d7e16 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x42>
   d7dde:	f000 f8bd 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime > updateMethod->updateTimeoutMs) {
   d7de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7de4:	1ac0      	subs	r0, r0, r3
   d7de6:	68a3      	ldr	r3, [r4, #8]
   d7de8:	689b      	ldr	r3, [r3, #8]
   d7dea:	4298      	cmp	r0, r3
   d7dec:	d911      	bls.n	d7e12 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x3e>
            Log.info("stateWaitUpdateComplete timeout");
   d7dee:	490c      	ldr	r1, [pc, #48]	; (d7e20 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x4c>)
   d7df0:	480c      	ldr	r0, [pc, #48]	; (d7e24 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d7df2:	f7fc faab 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
            updateDataStatus = UpdateDataStatus::TIMEOUT;
   d7df6:	2304      	movs	r3, #4
   d7df8:	6223      	str	r3, [r4, #32]
   d7dfa:	f000 f8af 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d7dfe:	4b0a      	ldr	r3, [pc, #40]	; (d7e28 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x54>)
    stateTime = millis();
   d7e00:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d7e02:	9300      	str	r3, [sp, #0]
   d7e04:	4669      	mov	r1, sp
   d7e06:	2300      	movs	r3, #0
   d7e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	f7ff fecf 	bl	d7bb0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7e12:	b002      	add	sp, #8
   d7e14:	bd10      	pop	{r4, pc}
    Log.info("stateWaitUpdateComplete complete");
   d7e16:	4905      	ldr	r1, [pc, #20]	; (d7e2c <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x58>)
   d7e18:	4802      	ldr	r0, [pc, #8]	; (d7e24 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d7e1a:	f7fc fa97 	bl	d434c <_ZNK5spark6Logger4infoEPKcz>
   d7e1e:	e7ec      	b.n	d7dfa <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x26>
   d7e20:	000dd912 	.word	0x000dd912
   d7e24:	2003e614 	.word	0x2003e614
   d7e28:	000d7d21 	.word	0x000d7d21
   d7e2c:	000dd932 	.word	0x000dd932

000d7e30 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE>:
        val_(val) {
   d7e30:	4b01      	ldr	r3, [pc, #4]	; (d7e38 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE+0x8>)
   d7e32:	2200      	movs	r2, #0
   d7e34:	701a      	strb	r2, [r3, #0]
}
   d7e36:	4770      	bx	lr
   d7e38:	2003e600 	.word	0x2003e600

000d7e3c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <os_thread_create+0xc>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	685b      	ldr	r3, [r3, #4]
   d7e44:	9301      	str	r3, [sp, #4]
   d7e46:	bd08      	pop	{r3, pc}
   d7e48:	00030248 	.word	0x00030248

000d7e4c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7e4c:	b508      	push	{r3, lr}
   d7e4e:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <os_thread_yield+0xc>)
   d7e50:	681b      	ldr	r3, [r3, #0]
   d7e52:	68db      	ldr	r3, [r3, #12]
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	bd08      	pop	{r3, pc}
   d7e58:	00030248 	.word	0x00030248

000d7e5c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7e5c:	b508      	push	{r3, lr}
   d7e5e:	4b02      	ldr	r3, [pc, #8]	; (d7e68 <os_thread_scheduling+0xc>)
   d7e60:	681b      	ldr	r3, [r3, #0]
   d7e62:	69db      	ldr	r3, [r3, #28]
   d7e64:	9301      	str	r3, [sp, #4]
   d7e66:	bd08      	pop	{r3, pc}
   d7e68:	00030248 	.word	0x00030248

000d7e6c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7e6c:	b508      	push	{r3, lr}
   d7e6e:	4b02      	ldr	r3, [pc, #8]	; (d7e78 <os_timer_create+0xc>)
   d7e70:	681b      	ldr	r3, [r3, #0]
   d7e72:	6a1b      	ldr	r3, [r3, #32]
   d7e74:	9301      	str	r3, [sp, #4]
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	00030248 	.word	0x00030248

000d7e7c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7e7c:	b508      	push	{r3, lr}
   d7e7e:	4b02      	ldr	r3, [pc, #8]	; (d7e88 <os_timer_destroy+0xc>)
   d7e80:	681b      	ldr	r3, [r3, #0]
   d7e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e84:	9301      	str	r3, [sp, #4]
   d7e86:	bd08      	pop	{r3, pc}
   d7e88:	00030248 	.word	0x00030248

000d7e8c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7e8c:	b508      	push	{r3, lr}
   d7e8e:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <os_timer_get_id+0xc>)
   d7e90:	681b      	ldr	r3, [r3, #0]
   d7e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e94:	9301      	str	r3, [sp, #4]
   d7e96:	bd08      	pop	{r3, pc}
   d7e98:	00030248 	.word	0x00030248

000d7e9c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7e9c:	b508      	push	{r3, lr}
   d7e9e:	4b02      	ldr	r3, [pc, #8]	; (d7ea8 <os_timer_change+0xc>)
   d7ea0:	681b      	ldr	r3, [r3, #0]
   d7ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ea4:	9301      	str	r3, [sp, #4]
   d7ea6:	bd08      	pop	{r3, pc}
   d7ea8:	00030248 	.word	0x00030248

000d7eac <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7eac:	b508      	push	{r3, lr}
   d7eae:	4b02      	ldr	r3, [pc, #8]	; (d7eb8 <os_mutex_create+0xc>)
   d7eb0:	681b      	ldr	r3, [r3, #0]
   d7eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7eb4:	9301      	str	r3, [sp, #4]
   d7eb6:	bd08      	pop	{r3, pc}
   d7eb8:	00030248 	.word	0x00030248

000d7ebc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7ebc:	b508      	push	{r3, lr}
   d7ebe:	4b02      	ldr	r3, [pc, #8]	; (d7ec8 <os_mutex_lock+0xc>)
   d7ec0:	681b      	ldr	r3, [r3, #0]
   d7ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7ec4:	9301      	str	r3, [sp, #4]
   d7ec6:	bd08      	pop	{r3, pc}
   d7ec8:	00030248 	.word	0x00030248

000d7ecc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7ecc:	b508      	push	{r3, lr}
   d7ece:	4b02      	ldr	r3, [pc, #8]	; (d7ed8 <os_mutex_unlock+0xc>)
   d7ed0:	681b      	ldr	r3, [r3, #0]
   d7ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7ed4:	9301      	str	r3, [sp, #4]
   d7ed6:	bd08      	pop	{r3, pc}
   d7ed8:	00030248 	.word	0x00030248

000d7edc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7edc:	b508      	push	{r3, lr}
   d7ede:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <os_mutex_recursive_create+0xc>)
   d7ee0:	681b      	ldr	r3, [r3, #0]
   d7ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ee4:	9301      	str	r3, [sp, #4]
   d7ee6:	bd08      	pop	{r3, pc}
   d7ee8:	00030248 	.word	0x00030248

000d7eec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7eec:	b508      	push	{r3, lr}
   d7eee:	4b02      	ldr	r3, [pc, #8]	; (d7ef8 <os_mutex_recursive_destroy+0xc>)
   d7ef0:	681b      	ldr	r3, [r3, #0]
   d7ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ef4:	9301      	str	r3, [sp, #4]
   d7ef6:	bd08      	pop	{r3, pc}
   d7ef8:	00030248 	.word	0x00030248

000d7efc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7efc:	b508      	push	{r3, lr}
   d7efe:	4b02      	ldr	r3, [pc, #8]	; (d7f08 <os_thread_exit+0xc>)
   d7f00:	681b      	ldr	r3, [r3, #0]
   d7f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7f04:	9301      	str	r3, [sp, #4]
   d7f06:	bd08      	pop	{r3, pc}
   d7f08:	00030248 	.word	0x00030248

000d7f0c <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7f0c:	b508      	push	{r3, lr}
   d7f0e:	4b02      	ldr	r3, [pc, #8]	; (d7f18 <os_timer_set_id+0xc>)
   d7f10:	681b      	ldr	r3, [r3, #0]
   d7f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7f14:	9301      	str	r3, [sp, #4]
   d7f16:	bd08      	pop	{r3, pc}
   d7f18:	00030248 	.word	0x00030248

000d7f1c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7f1c:	b508      	push	{r3, lr}
   d7f1e:	4b02      	ldr	r3, [pc, #8]	; (d7f28 <HAL_Feature_Set+0xc>)
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7f24:	9301      	str	r3, [sp, #4]
   d7f26:	bd08      	pop	{r3, pc}
   d7f28:	00030234 	.word	0x00030234

000d7f2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7f2c:	b508      	push	{r3, lr}
   d7f2e:	4b02      	ldr	r3, [pc, #8]	; (d7f38 <HAL_RNG_GetRandomNumber+0xc>)
   d7f30:	681b      	ldr	r3, [r3, #0]
   d7f32:	685b      	ldr	r3, [r3, #4]
   d7f34:	9301      	str	r3, [sp, #4]
   d7f36:	bd08      	pop	{r3, pc}
   d7f38:	00030218 	.word	0x00030218

000d7f3c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7f3c:	b508      	push	{r3, lr}
   d7f3e:	4b02      	ldr	r3, [pc, #8]	; (d7f48 <HAL_Delay_Milliseconds+0xc>)
   d7f40:	681b      	ldr	r3, [r3, #0]
   d7f42:	689b      	ldr	r3, [r3, #8]
   d7f44:	9301      	str	r3, [sp, #4]
   d7f46:	bd08      	pop	{r3, pc}
   d7f48:	00030218 	.word	0x00030218

000d7f4c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7f4c:	b508      	push	{r3, lr}
   d7f4e:	4b02      	ldr	r3, [pc, #8]	; (d7f58 <HAL_Delay_Microseconds+0xc>)
   d7f50:	681b      	ldr	r3, [r3, #0]
   d7f52:	68db      	ldr	r3, [r3, #12]
   d7f54:	9301      	str	r3, [sp, #4]
   d7f56:	bd08      	pop	{r3, pc}
   d7f58:	00030218 	.word	0x00030218

000d7f5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7f5c:	b508      	push	{r3, lr}
   d7f5e:	4b02      	ldr	r3, [pc, #8]	; (d7f68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7f60:	681b      	ldr	r3, [r3, #0]
   d7f62:	695b      	ldr	r3, [r3, #20]
   d7f64:	9301      	str	r3, [sp, #4]
   d7f66:	bd08      	pop	{r3, pc}
   d7f68:	00030218 	.word	0x00030218

000d7f6c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7f6c:	b508      	push	{r3, lr}
   d7f6e:	4b02      	ldr	r3, [pc, #8]	; (d7f78 <hal_rtc_time_is_valid+0xc>)
   d7f70:	681b      	ldr	r3, [r3, #0]
   d7f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7f74:	9301      	str	r3, [sp, #4]
   d7f76:	bd08      	pop	{r3, pc}
   d7f78:	00030218 	.word	0x00030218

000d7f7c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7f7c:	b508      	push	{r3, lr}
   d7f7e:	4b02      	ldr	r3, [pc, #8]	; (d7f88 <hal_timer_millis+0xc>)
   d7f80:	681b      	ldr	r3, [r3, #0]
   d7f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7f84:	9301      	str	r3, [sp, #4]
   d7f86:	bd08      	pop	{r3, pc}
   d7f88:	00030218 	.word	0x00030218

000d7f8c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7f8c:	b508      	push	{r3, lr}
   d7f8e:	4b02      	ldr	r3, [pc, #8]	; (d7f98 <hal_rtc_get_time+0xc>)
   d7f90:	681b      	ldr	r3, [r3, #0]
   d7f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7f94:	9301      	str	r3, [sp, #4]
   d7f96:	bd08      	pop	{r3, pc}
   d7f98:	00030218 	.word	0x00030218

000d7f9c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7f9c:	b508      	push	{r3, lr}
   d7f9e:	4b02      	ldr	r3, [pc, #8]	; (d7fa8 <hal_rtc_set_time+0xc>)
   d7fa0:	681b      	ldr	r3, [r3, #0]
   d7fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7fa4:	9301      	str	r3, [sp, #4]
   d7fa6:	bd08      	pop	{r3, pc}
   d7fa8:	00030218 	.word	0x00030218

000d7fac <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7fac:	b508      	push	{r3, lr}
   d7fae:	4b02      	ldr	r3, [pc, #8]	; (d7fb8 <HAL_Validate_Pin_Function+0xc>)
   d7fb0:	681b      	ldr	r3, [r3, #0]
   d7fb2:	685b      	ldr	r3, [r3, #4]
   d7fb4:	9301      	str	r3, [sp, #4]
   d7fb6:	bd08      	pop	{r3, pc}
   d7fb8:	0003022c 	.word	0x0003022c

000d7fbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7fbc:	b508      	push	{r3, lr}
   d7fbe:	4b02      	ldr	r3, [pc, #8]	; (d7fc8 <HAL_Pin_Mode+0xc>)
   d7fc0:	681b      	ldr	r3, [r3, #0]
   d7fc2:	689b      	ldr	r3, [r3, #8]
   d7fc4:	9301      	str	r3, [sp, #4]
   d7fc6:	bd08      	pop	{r3, pc}
   d7fc8:	0003022c 	.word	0x0003022c

000d7fcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7fcc:	b508      	push	{r3, lr}
   d7fce:	4b02      	ldr	r3, [pc, #8]	; (d7fd8 <HAL_Get_Pin_Mode+0xc>)
   d7fd0:	681b      	ldr	r3, [r3, #0]
   d7fd2:	68db      	ldr	r3, [r3, #12]
   d7fd4:	9301      	str	r3, [sp, #4]
   d7fd6:	bd08      	pop	{r3, pc}
   d7fd8:	0003022c 	.word	0x0003022c

000d7fdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7fdc:	b508      	push	{r3, lr}
   d7fde:	4b02      	ldr	r3, [pc, #8]	; (d7fe8 <HAL_GPIO_Write+0xc>)
   d7fe0:	681b      	ldr	r3, [r3, #0]
   d7fe2:	691b      	ldr	r3, [r3, #16]
   d7fe4:	9301      	str	r3, [sp, #4]
   d7fe6:	bd08      	pop	{r3, pc}
   d7fe8:	0003022c 	.word	0x0003022c

000d7fec <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7fec:	b508      	push	{r3, lr}
   d7fee:	4b02      	ldr	r3, [pc, #8]	; (d7ff8 <HAL_Interrupts_Attach+0xc>)
   d7ff0:	681b      	ldr	r3, [r3, #0]
   d7ff2:	699b      	ldr	r3, [r3, #24]
   d7ff4:	9301      	str	r3, [sp, #4]
   d7ff6:	bd08      	pop	{r3, pc}
   d7ff8:	0003022c 	.word	0x0003022c

000d7ffc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7ffc:	b508      	push	{r3, lr}
   d7ffe:	4b02      	ldr	r3, [pc, #8]	; (d8008 <HAL_Interrupts_Detach+0xc>)
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	69db      	ldr	r3, [r3, #28]
   d8004:	9301      	str	r3, [sp, #4]
   d8006:	bd08      	pop	{r3, pc}
   d8008:	0003022c 	.word	0x0003022c

000d800c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d800c:	b508      	push	{r3, lr}
   d800e:	4b02      	ldr	r3, [pc, #8]	; (d8018 <hal_adc_read+0xc>)
   d8010:	681b      	ldr	r3, [r3, #0]
   d8012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8014:	9301      	str	r3, [sp, #4]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	0003022c 	.word	0x0003022c

000d801c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d801c:	b508      	push	{r3, lr}
   d801e:	4b02      	ldr	r3, [pc, #8]	; (d8028 <hal_i2c_begin+0xc>)
   d8020:	681b      	ldr	r3, [r3, #0]
   d8022:	68db      	ldr	r3, [r3, #12]
   d8024:	9301      	str	r3, [sp, #4]
   d8026:	bd08      	pop	{r3, pc}
   d8028:	00030228 	.word	0x00030228

000d802c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <hal_i2c_begin_transmission+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	699b      	ldr	r3, [r3, #24]
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	00030228 	.word	0x00030228

000d803c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <hal_i2c_end_transmission+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	69db      	ldr	r3, [r3, #28]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	00030228 	.word	0x00030228

000d804c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <hal_i2c_write+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	6a1b      	ldr	r3, [r3, #32]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	00030228 	.word	0x00030228

000d805c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <hal_i2c_available+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	00030228 	.word	0x00030228

000d806c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <hal_i2c_read+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	00030228 	.word	0x00030228

000d807c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <hal_i2c_peek+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030228 	.word	0x00030228

000d808c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <hal_i2c_flush+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030228 	.word	0x00030228

000d809c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <hal_i2c_is_enabled+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	00030228 	.word	0x00030228

000d80ac <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <hal_i2c_init+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030228 	.word	0x00030228

000d80bc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <hal_i2c_lock+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030228 	.word	0x00030228

000d80cc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <hal_i2c_unlock+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030228 	.word	0x00030228

000d80dc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <hal_i2c_request_ex+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030228 	.word	0x00030228

000d80ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <inet_inet_ntop+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	695b      	ldr	r3, [r3, #20]
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030264 	.word	0x00030264

000d80fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <netdb_freeaddrinfo+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	689b      	ldr	r3, [r3, #8]
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030268 	.word	0x00030268

000d810c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <netdb_getaddrinfo+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	68db      	ldr	r3, [r3, #12]
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030268 	.word	0x00030268

000d811c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <hal_spi_init+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	69db      	ldr	r3, [r3, #28]
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	00030230 	.word	0x00030230

000d812c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <hal_spi_is_enabled+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	6a1b      	ldr	r3, [r3, #32]
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	00030230 	.word	0x00030230

000d813c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <hal_usart_init+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	681b      	ldr	r3, [r3, #0]
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	0003023c 	.word	0x0003023c

000d814c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <hal_usart_write+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	68db      	ldr	r3, [r3, #12]
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	0003023c 	.word	0x0003023c

000d815c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <hal_usart_available+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	691b      	ldr	r3, [r3, #16]
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	0003023c 	.word	0x0003023c

000d816c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <hal_usart_read+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	695b      	ldr	r3, [r3, #20]
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	0003023c 	.word	0x0003023c

000d817c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <hal_usart_peek+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	699b      	ldr	r3, [r3, #24]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	0003023c 	.word	0x0003023c

000d818c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <hal_usart_flush+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	69db      	ldr	r3, [r3, #28]
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	0003023c 	.word	0x0003023c

000d819c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <hal_usart_is_enabled+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	6a1b      	ldr	r3, [r3, #32]
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	0003023c 	.word	0x0003023c

000d81ac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <hal_usart_available_data_for_write+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	0003023c 	.word	0x0003023c

000d81bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <HAL_USB_USART_Init+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	681b      	ldr	r3, [r3, #0]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	0003024c 	.word	0x0003024c

000d81cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <HAL_USB_USART_Available_Data+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	691b      	ldr	r3, [r3, #16]
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	0003024c 	.word	0x0003024c

000d81dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	695b      	ldr	r3, [r3, #20]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	0003024c 	.word	0x0003024c

000d81ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <HAL_USB_USART_Receive_Data+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	699b      	ldr	r3, [r3, #24]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	0003024c 	.word	0x0003024c

000d81fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <HAL_USB_USART_Send_Data+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	69db      	ldr	r3, [r3, #28]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	0003024c 	.word	0x0003024c

000d820c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <HAL_USB_USART_Flush_Data+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6a1b      	ldr	r3, [r3, #32]
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	0003024c 	.word	0x0003024c

000d821c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <panic_+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030260 	.word	0x00030260

000d822c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <jsmn_init+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030260 	.word	0x00030260

000d823c <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <jsmn_parse+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030260 	.word	0x00030260

000d824c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <log_message_v+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030260 	.word	0x00030260

000d825c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <system_mode+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	681b      	ldr	r3, [r3, #0]
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030220 	.word	0x00030220

000d826c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <set_system_mode+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	685b      	ldr	r3, [r3, #4]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030220 	.word	0x00030220

000d827c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <system_delay_ms+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	695b      	ldr	r3, [r3, #20]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030220 	.word	0x00030220

000d828c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <system_thread_set_state+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030220 	.word	0x00030220

000d829c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <application_thread_current+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030220 	.word	0x00030220

000d82ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <application_thread_invoke+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030220 	.word	0x00030220

000d82bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <system_thread_get_state+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030220 	.word	0x00030220

000d82cc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <system_notify_time_changed+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030220 	.word	0x00030220

000d82dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b03      	ldr	r3, [pc, #12]	; (d82ec <system_ctrl_set_app_request_handler+0x10>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d82e6:	9301      	str	r3, [sp, #4]
   d82e8:	bd08      	pop	{r3, pc}
   d82ea:	0000      	.short	0x0000
   d82ec:	00030220 	.word	0x00030220

000d82f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b03      	ldr	r3, [pc, #12]	; (d8300 <system_ctrl_set_result+0x10>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d82fa:	9301      	str	r3, [sp, #4]
   d82fc:	bd08      	pop	{r3, pc}
   d82fe:	0000      	.short	0x0000
   d8300:	00030220 	.word	0x00030220

000d8304 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b03      	ldr	r3, [pc, #12]	; (d8314 <system_reset+0x10>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d830e:	9301      	str	r3, [sp, #4]
   d8310:	bd08      	pop	{r3, pc}
   d8312:	0000      	.short	0x0000
   d8314:	00030220 	.word	0x00030220

000d8318 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8318:	b508      	push	{r3, lr}
   d831a:	4b02      	ldr	r3, [pc, #8]	; (d8324 <spark_variable+0xc>)
   d831c:	681b      	ldr	r3, [r3, #0]
   d831e:	681b      	ldr	r3, [r3, #0]
   d8320:	9301      	str	r3, [sp, #4]
   d8322:	bd08      	pop	{r3, pc}
   d8324:	00030244 	.word	0x00030244

000d8328 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8328:	b508      	push	{r3, lr}
   d832a:	4b02      	ldr	r3, [pc, #8]	; (d8334 <spark_function+0xc>)
   d832c:	681b      	ldr	r3, [r3, #0]
   d832e:	685b      	ldr	r3, [r3, #4]
   d8330:	9301      	str	r3, [sp, #4]
   d8332:	bd08      	pop	{r3, pc}
   d8334:	00030244 	.word	0x00030244

000d8338 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8338:	b508      	push	{r3, lr}
   d833a:	4b02      	ldr	r3, [pc, #8]	; (d8344 <spark_process+0xc>)
   d833c:	681b      	ldr	r3, [r3, #0]
   d833e:	689b      	ldr	r3, [r3, #8]
   d8340:	9301      	str	r3, [sp, #4]
   d8342:	bd08      	pop	{r3, pc}
   d8344:	00030244 	.word	0x00030244

000d8348 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8348:	b508      	push	{r3, lr}
   d834a:	4b02      	ldr	r3, [pc, #8]	; (d8354 <spark_cloud_flag_connect+0xc>)
   d834c:	681b      	ldr	r3, [r3, #0]
   d834e:	68db      	ldr	r3, [r3, #12]
   d8350:	9301      	str	r3, [sp, #4]
   d8352:	bd08      	pop	{r3, pc}
   d8354:	00030244 	.word	0x00030244

000d8358 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8358:	b508      	push	{r3, lr}
   d835a:	4b02      	ldr	r3, [pc, #8]	; (d8364 <spark_cloud_flag_connected+0xc>)
   d835c:	681b      	ldr	r3, [r3, #0]
   d835e:	695b      	ldr	r3, [r3, #20]
   d8360:	9301      	str	r3, [sp, #4]
   d8362:	bd08      	pop	{r3, pc}
   d8364:	00030244 	.word	0x00030244

000d8368 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8368:	b508      	push	{r3, lr}
   d836a:	4b02      	ldr	r3, [pc, #8]	; (d8374 <spark_deviceID+0xc>)
   d836c:	681b      	ldr	r3, [r3, #0]
   d836e:	69db      	ldr	r3, [r3, #28]
   d8370:	9301      	str	r3, [sp, #4]
   d8372:	bd08      	pop	{r3, pc}
   d8374:	00030244 	.word	0x00030244

000d8378 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8378:	b508      	push	{r3, lr}
   d837a:	4b02      	ldr	r3, [pc, #8]	; (d8384 <spark_send_event+0xc>)
   d837c:	681b      	ldr	r3, [r3, #0]
   d837e:	6a1b      	ldr	r3, [r3, #32]
   d8380:	9301      	str	r3, [sp, #4]
   d8382:	bd08      	pop	{r3, pc}
   d8384:	00030244 	.word	0x00030244

000d8388 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8388:	b508      	push	{r3, lr}
   d838a:	4b02      	ldr	r3, [pc, #8]	; (d8394 <spark_subscribe+0xc>)
   d838c:	681b      	ldr	r3, [r3, #0]
   d838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8390:	9301      	str	r3, [sp, #4]
   d8392:	bd08      	pop	{r3, pc}
   d8394:	00030244 	.word	0x00030244

000d8398 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8398:	b508      	push	{r3, lr}
   d839a:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <spark_sync_time+0xc>)
   d839c:	681b      	ldr	r3, [r3, #0]
   d839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83a0:	9301      	str	r3, [sp, #4]
   d83a2:	bd08      	pop	{r3, pc}
   d83a4:	00030244 	.word	0x00030244

000d83a8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d83a8:	b508      	push	{r3, lr}
   d83aa:	4b02      	ldr	r3, [pc, #8]	; (d83b4 <spark_sync_time_pending+0xc>)
   d83ac:	681b      	ldr	r3, [r3, #0]
   d83ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83b0:	9301      	str	r3, [sp, #4]
   d83b2:	bd08      	pop	{r3, pc}
   d83b4:	00030244 	.word	0x00030244

000d83b8 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d83b8:	b508      	push	{r3, lr}
   d83ba:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <spark_sync_time_last+0xc>)
   d83bc:	681b      	ldr	r3, [r3, #0]
   d83be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d83c0:	9301      	str	r3, [sp, #4]
   d83c2:	bd08      	pop	{r3, pc}
   d83c4:	00030244 	.word	0x00030244

000d83c8 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d83c8:	b508      	push	{r3, lr}
   d83ca:	4b02      	ldr	r3, [pc, #8]	; (d83d4 <spark_set_connection_property+0xc>)
   d83cc:	681b      	ldr	r3, [r3, #0]
   d83ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d83d0:	9301      	str	r3, [sp, #4]
   d83d2:	bd08      	pop	{r3, pc}
   d83d4:	00030244 	.word	0x00030244

000d83d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d83d8:	b508      	push	{r3, lr}
   d83da:	4b02      	ldr	r3, [pc, #8]	; (d83e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d83dc:	681b      	ldr	r3, [r3, #0]
   d83de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d83e0:	9301      	str	r3, [sp, #4]
   d83e2:	bd08      	pop	{r3, pc}
   d83e4:	00030244 	.word	0x00030244

000d83e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d83e8:	b508      	push	{r3, lr}
   d83ea:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <network_connect+0xc>)
   d83ec:	681b      	ldr	r3, [r3, #0]
   d83ee:	685b      	ldr	r3, [r3, #4]
   d83f0:	9301      	str	r3, [sp, #4]
   d83f2:	bd08      	pop	{r3, pc}
   d83f4:	00030240 	.word	0x00030240

000d83f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d83f8:	b508      	push	{r3, lr}
   d83fa:	4b02      	ldr	r3, [pc, #8]	; (d8404 <network_connecting+0xc>)
   d83fc:	681b      	ldr	r3, [r3, #0]
   d83fe:	689b      	ldr	r3, [r3, #8]
   d8400:	9301      	str	r3, [sp, #4]
   d8402:	bd08      	pop	{r3, pc}
   d8404:	00030240 	.word	0x00030240

000d8408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8408:	b508      	push	{r3, lr}
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <network_disconnect+0xc>)
   d840c:	681b      	ldr	r3, [r3, #0]
   d840e:	68db      	ldr	r3, [r3, #12]
   d8410:	9301      	str	r3, [sp, #4]
   d8412:	bd08      	pop	{r3, pc}
   d8414:	00030240 	.word	0x00030240

000d8418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8418:	b508      	push	{r3, lr}
   d841a:	4b02      	ldr	r3, [pc, #8]	; (d8424 <network_ready+0xc>)
   d841c:	681b      	ldr	r3, [r3, #0]
   d841e:	691b      	ldr	r3, [r3, #16]
   d8420:	9301      	str	r3, [sp, #4]
   d8422:	bd08      	pop	{r3, pc}
   d8424:	00030240 	.word	0x00030240

000d8428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8428:	b508      	push	{r3, lr}
   d842a:	4b02      	ldr	r3, [pc, #8]	; (d8434 <network_on+0xc>)
   d842c:	681b      	ldr	r3, [r3, #0]
   d842e:	695b      	ldr	r3, [r3, #20]
   d8430:	9301      	str	r3, [sp, #4]
   d8432:	bd08      	pop	{r3, pc}
   d8434:	00030240 	.word	0x00030240

000d8438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8438:	b508      	push	{r3, lr}
   d843a:	4b02      	ldr	r3, [pc, #8]	; (d8444 <network_off+0xc>)
   d843c:	681b      	ldr	r3, [r3, #0]
   d843e:	699b      	ldr	r3, [r3, #24]
   d8440:	9301      	str	r3, [sp, #4]
   d8442:	bd08      	pop	{r3, pc}
   d8444:	00030240 	.word	0x00030240

000d8448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8448:	b508      	push	{r3, lr}
   d844a:	4b02      	ldr	r3, [pc, #8]	; (d8454 <network_listen+0xc>)
   d844c:	681b      	ldr	r3, [r3, #0]
   d844e:	69db      	ldr	r3, [r3, #28]
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	bd08      	pop	{r3, pc}
   d8454:	00030240 	.word	0x00030240

000d8458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8458:	b508      	push	{r3, lr}
   d845a:	4b02      	ldr	r3, [pc, #8]	; (d8464 <network_listening+0xc>)
   d845c:	681b      	ldr	r3, [r3, #0]
   d845e:	6a1b      	ldr	r3, [r3, #32]
   d8460:	9301      	str	r3, [sp, #4]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	00030240 	.word	0x00030240

000d8468 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8468:	b508      	push	{r3, lr}
   d846a:	4b02      	ldr	r3, [pc, #8]	; (d8474 <network_set_listen_timeout+0xc>)
   d846c:	681b      	ldr	r3, [r3, #0]
   d846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8470:	9301      	str	r3, [sp, #4]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	00030240 	.word	0x00030240

000d8478 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8478:	b508      	push	{r3, lr}
   d847a:	4b02      	ldr	r3, [pc, #8]	; (d8484 <network_get_listen_timeout+0xc>)
   d847c:	681b      	ldr	r3, [r3, #0]
   d847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8480:	9301      	str	r3, [sp, #4]
   d8482:	bd08      	pop	{r3, pc}
   d8484:	00030240 	.word	0x00030240

000d8488 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8488:	b508      	push	{r3, lr}
   d848a:	4b02      	ldr	r3, [pc, #8]	; (d8494 <network_is_on+0xc>)
   d848c:	681b      	ldr	r3, [r3, #0]
   d848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8490:	9301      	str	r3, [sp, #4]
   d8492:	bd08      	pop	{r3, pc}
   d8494:	00030240 	.word	0x00030240

000d8498 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8498:	b508      	push	{r3, lr}
   d849a:	4b02      	ldr	r3, [pc, #8]	; (d84a4 <network_is_off+0xc>)
   d849c:	681b      	ldr	r3, [r3, #0]
   d849e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d84a0:	9301      	str	r3, [sp, #4]
   d84a2:	bd08      	pop	{r3, pc}
   d84a4:	00030240 	.word	0x00030240

000d84a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d84a8:	b508      	push	{r3, lr}
   d84aa:	4b02      	ldr	r3, [pc, #8]	; (d84b4 <malloc+0xc>)
   d84ac:	681b      	ldr	r3, [r3, #0]
   d84ae:	681b      	ldr	r3, [r3, #0]
   d84b0:	9301      	str	r3, [sp, #4]
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	0003021c 	.word	0x0003021c

000d84b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d84b8:	b508      	push	{r3, lr}
   d84ba:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <free+0xc>)
   d84bc:	681b      	ldr	r3, [r3, #0]
   d84be:	685b      	ldr	r3, [r3, #4]
   d84c0:	9301      	str	r3, [sp, #4]
   d84c2:	bd08      	pop	{r3, pc}
   d84c4:	0003021c 	.word	0x0003021c

000d84c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d84c8:	b508      	push	{r3, lr}
   d84ca:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <realloc+0xc>)
   d84cc:	681b      	ldr	r3, [r3, #0]
   d84ce:	689b      	ldr	r3, [r3, #8]
   d84d0:	9301      	str	r3, [sp, #4]
   d84d2:	bd08      	pop	{r3, pc}
   d84d4:	0003021c 	.word	0x0003021c

000d84d8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d84d8:	b508      	push	{r3, lr}
   d84da:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <siprintf+0xc>)
   d84dc:	681b      	ldr	r3, [r3, #0]
   d84de:	691b      	ldr	r3, [r3, #16]
   d84e0:	9301      	str	r3, [sp, #4]
   d84e2:	bd08      	pop	{r3, pc}
   d84e4:	0003021c 	.word	0x0003021c

000d84e8 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d84e8:	b508      	push	{r3, lr}
   d84ea:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <snprintf+0xc>)
   d84ec:	681b      	ldr	r3, [r3, #0]
   d84ee:	69db      	ldr	r3, [r3, #28]
   d84f0:	9301      	str	r3, [sp, #4]
   d84f2:	bd08      	pop	{r3, pc}
   d84f4:	0003021c 	.word	0x0003021c

000d84f8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d84f8:	b508      	push	{r3, lr}
   d84fa:	4b02      	ldr	r3, [pc, #8]	; (d8504 <vsnprintf+0xc>)
   d84fc:	681b      	ldr	r3, [r3, #0]
   d84fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8500:	9301      	str	r3, [sp, #4]
   d8502:	bd08      	pop	{r3, pc}
   d8504:	0003021c 	.word	0x0003021c

000d8508 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8508:	b508      	push	{r3, lr}
   d850a:	4b02      	ldr	r3, [pc, #8]	; (d8514 <abort+0xc>)
   d850c:	681b      	ldr	r3, [r3, #0]
   d850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8510:	9301      	str	r3, [sp, #4]
   d8512:	bd08      	pop	{r3, pc}
   d8514:	0003021c 	.word	0x0003021c

000d8518 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8518:	b508      	push	{r3, lr}
   d851a:	4b02      	ldr	r3, [pc, #8]	; (d8524 <_malloc_r+0xc>)
   d851c:	681b      	ldr	r3, [r3, #0]
   d851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8520:	9301      	str	r3, [sp, #4]
   d8522:	bd08      	pop	{r3, pc}
   d8524:	0003021c 	.word	0x0003021c

000d8528 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8528:	b508      	push	{r3, lr}
   d852a:	4b02      	ldr	r3, [pc, #8]	; (d8534 <__errno+0xc>)
   d852c:	681b      	ldr	r3, [r3, #0]
   d852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8530:	9301      	str	r3, [sp, #4]
   d8532:	bd08      	pop	{r3, pc}
   d8534:	0003021c 	.word	0x0003021c

000d8538 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8538:	b508      	push	{r3, lr}
   d853a:	4b02      	ldr	r3, [pc, #8]	; (d8544 <newlib_impure_ptr_callback+0xc>)
   d853c:	681b      	ldr	r3, [r3, #0]
   d853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8540:	9301      	str	r3, [sp, #4]
   d8542:	bd08      	pop	{r3, pc}
   d8544:	0003021c 	.word	0x0003021c

000d8548 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8548:	b508      	push	{r3, lr}
   d854a:	4b02      	ldr	r3, [pc, #8]	; (d8554 <strftime+0xc>)
   d854c:	681b      	ldr	r3, [r3, #0]
   d854e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8550:	9301      	str	r3, [sp, #4]
   d8552:	bd08      	pop	{r3, pc}
   d8554:	0003021c 	.word	0x0003021c

000d8558 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8558:	b508      	push	{r3, lr}
   d855a:	4b02      	ldr	r3, [pc, #8]	; (d8564 <localtime_r+0xc>)
   d855c:	681b      	ldr	r3, [r3, #0]
   d855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8560:	9301      	str	r3, [sp, #4]
   d8562:	bd08      	pop	{r3, pc}
   d8564:	0003021c 	.word	0x0003021c

000d8568 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8568:	b508      	push	{r3, lr}
   d856a:	4b02      	ldr	r3, [pc, #8]	; (d8574 <gmtime_r+0xc>)
   d856c:	681b      	ldr	r3, [r3, #0]
   d856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8570:	9301      	str	r3, [sp, #4]
   d8572:	bd08      	pop	{r3, pc}
   d8574:	0003021c 	.word	0x0003021c

000d8578 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8578:	b508      	push	{r3, lr}
   d857a:	4b02      	ldr	r3, [pc, #8]	; (d8584 <mktime+0xc>)
   d857c:	681b      	ldr	r3, [r3, #0]
   d857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8580:	9301      	str	r3, [sp, #4]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	0003021c 	.word	0x0003021c

000d8588 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8588:	2100      	movs	r1, #0
   d858a:	f7ff be77 	b.w	d827c <system_delay_ms>

000d858e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d858e:	b510      	push	{r4, lr}
      if (_M_empty())
   d8590:	6883      	ldr	r3, [r0, #8]
   d8592:	4604      	mov	r4, r0
   d8594:	b90b      	cbnz	r3, d859a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8596:	f001 fd34 	bl	da002 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d859a:	68c3      	ldr	r3, [r0, #12]
   d859c:	4798      	blx	r3
      if (_M_manager)
   d859e:	68a3      	ldr	r3, [r4, #8]
   d85a0:	b11b      	cbz	r3, d85aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d85a2:	2203      	movs	r2, #3
   d85a4:	4621      	mov	r1, r4
   d85a6:	4620      	mov	r0, r4
   d85a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d85aa:	4620      	mov	r0, r4
   d85ac:	2110      	movs	r1, #16
}
   d85ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d85b2:	f001 bd20 	b.w	d9ff6 <_ZdlPvj>

000d85b6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d85b6:	b510      	push	{r4, lr}
   d85b8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d85ba:	6800      	ldr	r0, [r0, #0]
   d85bc:	b108      	cbz	r0, d85c2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d85be:	f7ff fc95 	bl	d7eec <os_mutex_recursive_destroy>
    }
   d85c2:	4620      	mov	r0, r4
   d85c4:	bd10      	pop	{r4, pc}
	...

000d85c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d85c8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d85ca:	4c06      	ldr	r4, [pc, #24]	; (d85e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d85cc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d85ce:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d85d0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d85d2:	f7ff fc83 	bl	d7edc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d85d6:	4620      	mov	r0, r4
   d85d8:	4a03      	ldr	r2, [pc, #12]	; (d85e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d85da:	4904      	ldr	r1, [pc, #16]	; (d85ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d85dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d85e0:	f001 bd04 	b.w	d9fec <__aeabi_atexit>
   d85e4:	2003e608 	.word	0x2003e608
   d85e8:	2003dab8 	.word	0x2003dab8
   d85ec:	000d85b7 	.word	0x000d85b7

000d85f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85f0:	4770      	bx	lr

000d85f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d85f2:	2000      	movs	r0, #0
   d85f4:	4770      	bx	lr

000d85f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85f6:	b510      	push	{r4, lr}
   d85f8:	2110      	movs	r1, #16
   d85fa:	4604      	mov	r4, r0
   d85fc:	f001 fcfb 	bl	d9ff6 <_ZdlPvj>
   d8600:	4620      	mov	r0, r4
   d8602:	bd10      	pop	{r4, pc}

000d8604 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8604:	b508      	push	{r3, lr}
      { delete this; }
   d8606:	f7ff fff6 	bl	d85f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d860a:	bd08      	pop	{r3, pc}

000d860c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d860c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d860e:	2200      	movs	r2, #0
   d8610:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8614:	6002      	str	r2, [r0, #0]
   d8616:	8084      	strh	r4, [r0, #4]
   d8618:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d861a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d861c:	680c      	ldr	r4, [r1, #0]
   d861e:	8085      	strh	r5, [r0, #4]
   d8620:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8622:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8624:	bd30      	pop	{r4, r5, pc}

000d8626 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8626:	b510      	push	{r4, lr}
   d8628:	4604      	mov	r4, r0
    free((void*)msg_);
   d862a:	6800      	ldr	r0, [r0, #0]
   d862c:	f7ff ff44 	bl	d84b8 <free>
}
   d8630:	4620      	mov	r0, r4
   d8632:	bd10      	pop	{r4, pc}

000d8634 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8634:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8636:	68c4      	ldr	r4, [r0, #12]
   d8638:	b1f4      	cbz	r4, d8678 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d863a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d863c:	2b02      	cmp	r3, #2
   d863e:	d103      	bne.n	d8648 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8640:	f104 000c 	add.w	r0, r4, #12
   d8644:	f7ff ffef 	bl	d8626 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8648:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d864a:	b135      	cbz	r5, d865a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d864c:	4628      	mov	r0, r5
   d864e:	f7fb fe16 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d8652:	2110      	movs	r1, #16
   d8654:	4628      	mov	r0, r5
   d8656:	f001 fcce 	bl	d9ff6 <_ZdlPvj>
   d865a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d865c:	b135      	cbz	r5, d866c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d865e:	4628      	mov	r0, r5
   d8660:	f7fb fe0d 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d8664:	2110      	movs	r1, #16
   d8666:	4628      	mov	r0, r5
   d8668:	f001 fcc5 	bl	d9ff6 <_ZdlPvj>
   d866c:	4620      	mov	r0, r4
   d866e:	2114      	movs	r1, #20
   d8670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8674:	f001 bcbf 	b.w	d9ff6 <_ZdlPvj>
   d8678:	bd38      	pop	{r3, r4, r5, pc}

000d867a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d867a:	b510      	push	{r4, lr}
   d867c:	b088      	sub	sp, #32
   d867e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8680:	4668      	mov	r0, sp
   d8682:	f000 ff92 	bl	d95aa <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8686:	4669      	mov	r1, sp
   d8688:	a804      	add	r0, sp, #16
   d868a:	f000 ffb1 	bl	d95f0 <_ZN6StringC1ERKS_>
   d868e:	a804      	add	r0, sp, #16
   d8690:	47a0      	blx	r4
   d8692:	4604      	mov	r4, r0
   d8694:	a804      	add	r0, sp, #16
   d8696:	f000 ff3d 	bl	d9514 <_ZN6StringD1Ev>
    String p(param);
   d869a:	4668      	mov	r0, sp
   d869c:	f000 ff3a 	bl	d9514 <_ZN6StringD1Ev>
}
   d86a0:	4620      	mov	r0, r4
   d86a2:	b008      	add	sp, #32
   d86a4:	bd10      	pop	{r4, pc}

000d86a6 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d86a6:	b507      	push	{r0, r1, r2, lr}
   d86a8:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d86ac:	6882      	ldr	r2, [r0, #8]
   d86ae:	b90a      	cbnz	r2, d86b4 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d86b0:	f001 fca7 	bl	da002 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86b4:	68c3      	ldr	r3, [r0, #12]
   d86b6:	aa01      	add	r2, sp, #4
   d86b8:	4669      	mov	r1, sp
   d86ba:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d86bc:	b003      	add	sp, #12
   d86be:	f85d fb04 	ldr.w	pc, [sp], #4

000d86c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d86c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d86c4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d86c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d86ca:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d86cc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86ce:	461a      	mov	r2, r3
   d86d0:	4669      	mov	r1, sp
   d86d2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d86d4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d86d8:	f8ad 4000 	strh.w	r4, [sp]
   d86dc:	f7ff fe24 	bl	d8328 <spark_function>
}
   d86e0:	b004      	add	sp, #16
   d86e2:	bd10      	pop	{r4, pc}

000d86e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d86e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d86e6:	460e      	mov	r6, r1
   d86e8:	4604      	mov	r4, r0
   d86ea:	f856 3b04 	ldr.w	r3, [r6], #4
   d86ee:	9300      	str	r3, [sp, #0]
   d86f0:	460d      	mov	r5, r1
   d86f2:	a801      	add	r0, sp, #4
   d86f4:	4631      	mov	r1, r6
   d86f6:	f7ff fa01 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d86fa:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d86fc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d86fe:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8700:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8702:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8704:	2300      	movs	r3, #0
   d8706:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d8708:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d870a:	f7fc fda1 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d870e:	4630      	mov	r0, r6
   d8710:	f7fc fd9e 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8714:	4628      	mov	r0, r5
   d8716:	2108      	movs	r1, #8
   d8718:	f001 fc6d 	bl	d9ff6 <_ZdlPvj>
        return p;
    }
   d871c:	4620      	mov	r0, r4
   d871e:	b002      	add	sp, #8
   d8720:	bd70      	pop	{r4, r5, r6, pc}

000d8722 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8722:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8724:	b510      	push	{r4, lr}
      if (_M_empty())
   d8726:	b90a      	cbnz	r2, d872c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8728:	f001 fc6b 	bl	da002 <_ZSt25__throw_bad_function_callv>
    }
   d872c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8730:	68c3      	ldr	r3, [r0, #12]
   d8732:	4718      	bx	r3

000d8734 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8734:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8736:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8738:	f100 0110 	add.w	r1, r0, #16
   d873c:	f7ff fff1 	bl	d8722 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8740:	bd08      	pop	{r3, pc}

000d8742 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8742:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8744:	b510      	push	{r4, lr}
      if (_M_empty())
   d8746:	b90a      	cbnz	r2, d874c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8748:	f001 fc5b 	bl	da002 <_ZSt25__throw_bad_function_callv>
    }
   d874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8750:	68c3      	ldr	r3, [r0, #12]
   d8752:	4718      	bx	r3

000d8754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8754:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8756:	6800      	ldr	r0, [r0, #0]
   d8758:	f100 0110 	add.w	r1, r0, #16
   d875c:	f7ff fff1 	bl	d8742 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8760:	bd08      	pop	{r3, pc}
	...

000d8764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8764:	b538      	push	{r3, r4, r5, lr}
   d8766:	2300      	movs	r3, #0
   d8768:	4604      	mov	r4, r0
   d876a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d876c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d876e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8770:	f7fb fc91 	bl	d4096 <_Znwj>
   d8774:	b128      	cbz	r0, d8782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8776:	2301      	movs	r3, #1
   d8778:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d877c:	4b02      	ldr	r3, [pc, #8]	; (d8788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d877e:	6003      	str	r3, [r0, #0]
   d8780:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8782:	6020      	str	r0, [r4, #0]
	}
   d8784:	4620      	mov	r0, r4
   d8786:	bd38      	pop	{r3, r4, r5, pc}
   d8788:	000dd9d4 	.word	0x000dd9d4

000d878c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d878c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d878e:	2300      	movs	r3, #0
   d8790:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8792:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8794:	4604      	mov	r4, r0
   d8796:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8798:	b12b      	cbz	r3, d87a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d879a:	2202      	movs	r2, #2
   d879c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d879e:	68eb      	ldr	r3, [r5, #12]
   d87a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d87a2:	68ab      	ldr	r3, [r5, #8]
   d87a4:	60a3      	str	r3, [r4, #8]
    }
   d87a6:	4620      	mov	r0, r4
   d87a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d87ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87ae:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d87b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d87b2:	4668      	mov	r0, sp
   d87b4:	f7ff ff2a 	bl	d860c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d87b8:	f04f 0302 	mov.w	r3, #2
   d87bc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d87c0:	2a00      	cmp	r2, #0
   d87c2:	d103      	bne.n	d87cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d87c4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d87c8:	2900      	cmp	r1, #0
   d87ca:	d1f7      	bne.n	d87bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d87cc:	d125      	bne.n	d881a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d87ce:	f104 050c 	add.w	r5, r4, #12
   d87d2:	4669      	mov	r1, sp
   d87d4:	4628      	mov	r0, r5
   d87d6:	f7ff ff19 	bl	d860c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d87da:	f3bf 8f5b 	dmb	ish
   d87de:	2301      	movs	r3, #1
   d87e0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d87e2:	2000      	movs	r0, #0
   d87e4:	f104 0308 	add.w	r3, r4, #8
   d87e8:	f3bf 8f5b 	dmb	ish
   d87ec:	e853 6f00 	ldrex	r6, [r3]
   d87f0:	e843 0200 	strex	r2, r0, [r3]
   d87f4:	2a00      	cmp	r2, #0
   d87f6:	d1f9      	bne.n	d87ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d87f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d87fc:	b16e      	cbz	r6, d881a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d87fe:	f7ff fd4d 	bl	d829c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8802:	b178      	cbz	r0, d8824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8804:	4629      	mov	r1, r5
   d8806:	4630      	mov	r0, r6
   d8808:	f7ff ff8b 	bl	d8722 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d880c:	4630      	mov	r0, r6
   d880e:	f7fb fd36 	bl	d427e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8812:	2110      	movs	r1, #16
   d8814:	4630      	mov	r0, r6
   d8816:	f001 fbee 	bl	d9ff6 <_ZdlPvj>
        p_->setError(std::move(error));
   d881a:	4668      	mov	r0, sp
   d881c:	f7ff ff03 	bl	d8626 <_ZN8particle5ErrorD1Ev>
    }
   d8820:	b009      	add	sp, #36	; 0x24
   d8822:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8824:	4631      	mov	r1, r6
   d8826:	a802      	add	r0, sp, #8
   d8828:	f7ff ffb0 	bl	d878c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d882c:	68e0      	ldr	r0, [r4, #12]
   d882e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8832:	b108      	cbz	r0, d8838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8834:	f002 faba 	bl	dadac <strdup>
        type_(type) {
   d8838:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d883a:	2010      	movs	r0, #16
   d883c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8840:	f7fb fc29 	bl	d4096 <_Znwj>
   d8844:	4605      	mov	r5, r0
   d8846:	b1e8      	cbz	r0, d8884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8848:	2700      	movs	r7, #0
   d884a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d884c:	2018      	movs	r0, #24
   d884e:	f7fb fc22 	bl	d4096 <_Znwj>
   d8852:	4604      	mov	r4, r0
   d8854:	b188      	cbz	r0, d887a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8856:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8858:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d885a:	a802      	add	r0, sp, #8
   d885c:	f7fd f85a 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8860:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8862:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8864:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8866:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8868:	9204      	str	r2, [sp, #16]
   d886a:	a906      	add	r1, sp, #24
   d886c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d886e:	60e3      	str	r3, [r4, #12]
   d8870:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8874:	9205      	str	r2, [sp, #20]
   d8876:	f7ff fec9 	bl	d860c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d887a:	4b08      	ldr	r3, [pc, #32]	; (d889c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d887c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d887e:	4b08      	ldr	r3, [pc, #32]	; (d88a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8880:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8882:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8884:	a806      	add	r0, sp, #24
   d8886:	f7ff fece 	bl	d8626 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d888a:	a802      	add	r0, sp, #8
   d888c:	f7fb fcf7 	bl	d427e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8890:	2200      	movs	r2, #0
   d8892:	4629      	mov	r1, r5
   d8894:	4803      	ldr	r0, [pc, #12]	; (d88a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8896:	f7ff fd09 	bl	d82ac <application_thread_invoke>
   d889a:	e7b7      	b.n	d880c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d889c:	000d8735 	.word	0x000d8735
   d88a0:	000d89cd 	.word	0x000d89cd
   d88a4:	000d858f 	.word	0x000d858f

000d88a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d88a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d88ac:	b08a      	sub	sp, #40	; 0x28
   d88ae:	4605      	mov	r5, r0
   d88b0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d88b4:	460c      	mov	r4, r1
   d88b6:	4617      	mov	r7, r2
   d88b8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d88ba:	f7ff fd4d 	bl	d8358 <spark_cloud_flag_connected>
   d88be:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d88c0:	4682      	mov	sl, r0
   d88c2:	bb38      	cbnz	r0, d8914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d88c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d88c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d88ca:	a905      	add	r1, sp, #20
   d88cc:	4630      	mov	r0, r6
   d88ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   d88d2:	f7ff fe9b 	bl	d860c <_ZN8particle5ErrorC1EOS0_>
   d88d6:	2014      	movs	r0, #20
   d88d8:	f7fb fbdd 	bl	d4096 <_Znwj>
   d88dc:	4604      	mov	r4, r0
   d88de:	b148      	cbz	r0, d88f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d88e0:	2302      	movs	r3, #2
   d88e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d88e6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d88ec:	4631      	mov	r1, r6
   d88ee:	300c      	adds	r0, #12
   d88f0:	f7ff fe8c 	bl	d860c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d88f4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d88f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d88f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d88fc:	f7ff ff32 	bl	d8764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8900:	4630      	mov	r0, r6
   d8902:	f7ff fe90 	bl	d8626 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8906:	a805      	add	r0, sp, #20
   d8908:	f7ff fe8d 	bl	d8626 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d890c:	4628      	mov	r0, r5
   d890e:	b00a      	add	sp, #40	; 0x28
   d8910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8914:	230c      	movs	r3, #12
   d8916:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d891a:	2014      	movs	r0, #20
   d891c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8920:	9307      	str	r3, [sp, #28]
   d8922:	f7fb fbb8 	bl	d4096 <_Znwj>
   d8926:	4601      	mov	r1, r0
   d8928:	b128      	cbz	r0, d8936 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d892a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d892e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8932:	f880 a001 	strb.w	sl, [r0, #1]
   d8936:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8938:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d893a:	f7ff ff13 	bl	d8764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d893e:	4b22      	ldr	r3, [pc, #136]	; (d89c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8940:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8942:	2008      	movs	r0, #8
   d8944:	f7fb fba7 	bl	d4096 <_Znwj>
   d8948:	4682      	mov	sl, r0
   d894a:	b128      	cbz	r0, d8958 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d894c:	9b03      	ldr	r3, [sp, #12]
   d894e:	f840 3b04 	str.w	r3, [r0], #4
   d8952:	a904      	add	r1, sp, #16
   d8954:	f7ff f8d2 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8958:	9600      	str	r6, [sp, #0]
   d895a:	fa5f f389 	uxtb.w	r3, r9
   d895e:	4642      	mov	r2, r8
   d8960:	4639      	mov	r1, r7
   d8962:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8964:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8968:	f7ff fd06 	bl	d8378 <spark_send_event>
   d896c:	b9b8      	cbnz	r0, d899e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d896e:	9b03      	ldr	r3, [sp, #12]
   d8970:	785b      	ldrb	r3, [r3, #1]
   d8972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8976:	b993      	cbnz	r3, d899e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8978:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d897c:	a905      	add	r1, sp, #20
   d897e:	a803      	add	r0, sp, #12
   d8980:	9205      	str	r2, [sp, #20]
   d8982:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8986:	f7ff ff11 	bl	d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d898a:	a805      	add	r0, sp, #20
   d898c:	f7ff fe4b 	bl	d8626 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8990:	a805      	add	r0, sp, #20
   d8992:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8994:	f7ff fea6 	bl	d86e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8998:	a806      	add	r0, sp, #24
   d899a:	f7fc fc59 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d899e:	9b03      	ldr	r3, [sp, #12]
   d89a0:	9305      	str	r3, [sp, #20]
   d89a2:	a904      	add	r1, sp, #16
   d89a4:	a806      	add	r0, sp, #24
   d89a6:	f7ff f8a9 	bl	d7afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89aa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d89ac:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89ae:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d89b0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d89b2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d89b4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d89b6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d89b8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d89ba:	f7fc fc49 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89be:	a804      	add	r0, sp, #16
   d89c0:	f7fc fc46 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d89c4:	e7a2      	b.n	d890c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d89c6:	bf00      	nop
   d89c8:	000d8a91 	.word	0x000d8a91

000d89cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d89cc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d89ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89d0:	4605      	mov	r5, r0
	  switch (__op)
   d89d2:	d007      	beq.n	d89e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d89d4:	2a03      	cmp	r2, #3
   d89d6:	d018      	beq.n	d8a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d89d8:	2a01      	cmp	r2, #1
   d89da:	d101      	bne.n	d89e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d89dc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d89de:	6003      	str	r3, [r0, #0]
	}
   d89e0:	2000      	movs	r0, #0
   d89e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d89e4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d89e6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d89e8:	f7fb fb55 	bl	d4096 <_Znwj>
   d89ec:	4604      	mov	r4, r0
   d89ee:	b150      	cbz	r0, d8a06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d89f0:	4631      	mov	r1, r6
   d89f2:	f7ff fecb 	bl	d878c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d89f6:	6930      	ldr	r0, [r6, #16]
   d89f8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d89fc:	b108      	cbz	r0, d8a02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d89fe:	f002 f9d5 	bl	dadac <strdup>
        type_(type) {
   d8a02:	6120      	str	r0, [r4, #16]
   d8a04:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8a06:	602c      	str	r4, [r5, #0]
	}
   d8a08:	e7ea      	b.n	d89e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a0a:	6804      	ldr	r4, [r0, #0]
   d8a0c:	2c00      	cmp	r4, #0
   d8a0e:	d0e7      	beq.n	d89e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8a10:	f104 0010 	add.w	r0, r4, #16
   d8a14:	f7ff fe07 	bl	d8626 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a18:	4620      	mov	r0, r4
   d8a1a:	f7fb fc30 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a1e:	2118      	movs	r1, #24
   d8a20:	4620      	mov	r0, r4
   d8a22:	f001 fae8 	bl	d9ff6 <_ZdlPvj>
   d8a26:	e7db      	b.n	d89e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8a28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8a2a:	2300      	movs	r3, #0
   d8a2c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8a2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8a30:	4604      	mov	r4, r0
   d8a32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8a34:	b12b      	cbz	r3, d8a42 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8a36:	2202      	movs	r2, #2
   d8a38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8a3a:	68eb      	ldr	r3, [r5, #12]
   d8a3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8a3e:	68ab      	ldr	r3, [r5, #8]
   d8a40:	60a3      	str	r3, [r4, #8]
    }
   d8a42:	4620      	mov	r0, r4
   d8a44:	bd38      	pop	{r3, r4, r5, pc}

000d8a46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8a46:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a48:	b570      	push	{r4, r5, r6, lr}
   d8a4a:	4604      	mov	r4, r0
	  switch (__op)
   d8a4c:	d007      	beq.n	d8a5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8a4e:	2a03      	cmp	r2, #3
   d8a50:	d012      	beq.n	d8a78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8a52:	2a01      	cmp	r2, #1
   d8a54:	d101      	bne.n	d8a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a56:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a58:	6003      	str	r3, [r0, #0]
	}
   d8a5a:	2000      	movs	r0, #0
   d8a5c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a5e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8a60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a62:	f7fb fb18 	bl	d4096 <_Znwj>
   d8a66:	4605      	mov	r5, r0
   d8a68:	b120      	cbz	r0, d8a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8a6a:	4631      	mov	r1, r6
   d8a6c:	f7ff ffdc 	bl	d8a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8a70:	7c33      	ldrb	r3, [r6, #16]
   d8a72:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8a74:	6025      	str	r5, [r4, #0]
	}
   d8a76:	e7f0      	b.n	d8a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a78:	6804      	ldr	r4, [r0, #0]
   d8a7a:	2c00      	cmp	r4, #0
   d8a7c:	d0ed      	beq.n	d8a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8a7e:	4620      	mov	r0, r4
   d8a80:	f7fb fbfd 	bl	d427e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a84:	2114      	movs	r1, #20
   d8a86:	4620      	mov	r0, r4
   d8a88:	f001 fab5 	bl	d9ff6 <_ZdlPvj>
   d8a8c:	e7e5      	b.n	d8a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8a90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a92:	b089      	sub	sp, #36	; 0x24
   d8a94:	4604      	mov	r4, r0
   d8a96:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8a98:	a801      	add	r0, sp, #4
   d8a9a:	4611      	mov	r1, r2
   d8a9c:	f7ff fe22 	bl	d86e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8aa0:	b1a4      	cbz	r4, d8acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8aa2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8aa4:	b11d      	cbz	r5, d8aae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8aa6:	4628      	mov	r0, r5
   d8aa8:	f002 f980 	bl	dadac <strdup>
   d8aac:	4605      	mov	r5, r0
   d8aae:	a801      	add	r0, sp, #4
   d8ab0:	a903      	add	r1, sp, #12
        type_(type) {
   d8ab2:	9503      	str	r5, [sp, #12]
   d8ab4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8ab8:	f7ff fe78 	bl	d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8abc:	a803      	add	r0, sp, #12
   d8abe:	f7ff fdb2 	bl	d8626 <_ZN8particle5ErrorD1Ev>
   d8ac2:	a802      	add	r0, sp, #8
   d8ac4:	f7fc fbc4 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8ac8:	b009      	add	sp, #36	; 0x24
   d8aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8acc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8ace:	2301      	movs	r3, #1
   d8ad0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8ad4:	2a00      	cmp	r2, #0
   d8ad6:	d103      	bne.n	d8ae0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8ad8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8adc:	2900      	cmp	r1, #0
   d8ade:	d1f7      	bne.n	d8ad0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8ae0:	d1ef      	bne.n	d8ac2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8ae2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8ae4:	f3bf 8f5b 	dmb	ish
   d8ae8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8aea:	1d2b      	adds	r3, r5, #4
   d8aec:	f3bf 8f5b 	dmb	ish
   d8af0:	e853 6f00 	ldrex	r6, [r3]
   d8af4:	e843 4200 	strex	r2, r4, [r3]
   d8af8:	2a00      	cmp	r2, #0
   d8afa:	d1f9      	bne.n	d8af0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8afc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b00:	2e00      	cmp	r6, #0
   d8b02:	d0de      	beq.n	d8ac2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8b04:	4620      	mov	r0, r4
   d8b06:	f7ff fbc9 	bl	d829c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b0a:	4607      	mov	r7, r0
   d8b0c:	b160      	cbz	r0, d8b28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b0e:	f105 010c 	add.w	r1, r5, #12
   d8b12:	4630      	mov	r0, r6
   d8b14:	f7ff fe15 	bl	d8742 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8b18:	4630      	mov	r0, r6
   d8b1a:	f7fb fbb0 	bl	d427e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8b1e:	2110      	movs	r1, #16
   d8b20:	4630      	mov	r0, r6
   d8b22:	f001 fa68 	bl	d9ff6 <_ZdlPvj>
   d8b26:	e7cc      	b.n	d8ac2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b28:	4631      	mov	r1, r6
   d8b2a:	a803      	add	r0, sp, #12
   d8b2c:	f7ff ff7c 	bl	d8a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8b30:	7b2b      	ldrb	r3, [r5, #12]
   d8b32:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b36:	2010      	movs	r0, #16
   d8b38:	f7fb faad 	bl	d4096 <_Znwj>
   d8b3c:	4605      	mov	r5, r0
   d8b3e:	b1d0      	cbz	r0, d8b76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8b40:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b42:	2014      	movs	r0, #20
   d8b44:	f7fb faa7 	bl	d4096 <_Znwj>
   d8b48:	4604      	mov	r4, r0
   d8b4a:	b178      	cbz	r0, d8b6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8b4c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8b4e:	4601      	mov	r1, r0
   d8b50:	a803      	add	r0, sp, #12
   d8b52:	f7fc fedf 	bl	d5914 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b56:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8b58:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b5a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b5c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8b5e:	9205      	str	r2, [sp, #20]
   d8b60:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b62:	60e3      	str	r3, [r4, #12]
   d8b64:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8b68:	9206      	str	r2, [sp, #24]
   d8b6a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8b6c:	4b06      	ldr	r3, [pc, #24]	; (d8b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8b6e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8b70:	4b06      	ldr	r3, [pc, #24]	; (d8b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b72:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8b74:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8b76:	a803      	add	r0, sp, #12
   d8b78:	f7fb fb81 	bl	d427e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8b7c:	2200      	movs	r2, #0
   d8b7e:	4629      	mov	r1, r5
   d8b80:	4803      	ldr	r0, [pc, #12]	; (d8b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8b82:	f7ff fb93 	bl	d82ac <application_thread_invoke>
   d8b86:	e7c7      	b.n	d8b18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8b88:	000d8755 	.word	0x000d8755
   d8b8c:	000d8a47 	.word	0x000d8a47
   d8b90:	000d858f 	.word	0x000d858f

000d8b94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b94:	2200      	movs	r2, #0
   d8b96:	6840      	ldr	r0, [r0, #4]
   d8b98:	4611      	mov	r1, r2
   d8b9a:	f7ff bc5d 	b.w	d8458 <network_listening>

000d8b9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8b9e:	2200      	movs	r2, #0
   d8ba0:	6840      	ldr	r0, [r0, #4]
   d8ba2:	4611      	mov	r1, r2
   d8ba4:	f7ff bc68 	b.w	d8478 <network_get_listen_timeout>

000d8ba8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8ba8:	6840      	ldr	r0, [r0, #4]
   d8baa:	2200      	movs	r2, #0
   d8bac:	f7ff bc5c 	b.w	d8468 <network_set_listen_timeout>

000d8bb0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bb0:	6840      	ldr	r0, [r0, #4]
   d8bb2:	2200      	movs	r2, #0
   d8bb4:	f081 0101 	eor.w	r1, r1, #1
   d8bb8:	f7ff bc46 	b.w	d8448 <network_listen>

000d8bbc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8bbc:	2300      	movs	r3, #0
   d8bbe:	6840      	ldr	r0, [r0, #4]
   d8bc0:	461a      	mov	r2, r3
   d8bc2:	4619      	mov	r1, r3
   d8bc4:	f7ff bc38 	b.w	d8438 <network_off>

000d8bc8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8bc8:	2300      	movs	r3, #0
   d8bca:	6840      	ldr	r0, [r0, #4]
   d8bcc:	461a      	mov	r2, r3
   d8bce:	4619      	mov	r1, r3
   d8bd0:	f7ff bc2a 	b.w	d8428 <network_on>

000d8bd4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8bd4:	2200      	movs	r2, #0
   d8bd6:	6840      	ldr	r0, [r0, #4]
   d8bd8:	4611      	mov	r1, r2
   d8bda:	f7ff bc1d 	b.w	d8418 <network_ready>

000d8bde <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8bde:	2200      	movs	r2, #0
   d8be0:	6840      	ldr	r0, [r0, #4]
   d8be2:	4611      	mov	r1, r2
   d8be4:	f7ff bc08 	b.w	d83f8 <network_connecting>

000d8be8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8be8:	6840      	ldr	r0, [r0, #4]
   d8bea:	2200      	movs	r2, #0
   d8bec:	2102      	movs	r1, #2
   d8bee:	f7ff bc0b 	b.w	d8408 <network_disconnect>

000d8bf2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8bf2:	2300      	movs	r3, #0
   d8bf4:	6840      	ldr	r0, [r0, #4]
   d8bf6:	461a      	mov	r2, r3
   d8bf8:	f7ff bbf6 	b.w	d83e8 <network_connect>

000d8bfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8bfc:	4b02      	ldr	r3, [pc, #8]	; (d8c08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8bfe:	2203      	movs	r2, #3
   d8c00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8c02:	4a02      	ldr	r2, [pc, #8]	; (d8c0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8c04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8c06:	4770      	bx	lr
   d8c08:	2003e60c 	.word	0x2003e60c
   d8c0c:	000dd9f0 	.word	0x000dd9f0

000d8c10 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8c10:	4770      	bx	lr

000d8c12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c14:	4606      	mov	r6, r0
   d8c16:	4615      	mov	r5, r2
   d8c18:	460c      	mov	r4, r1
   d8c1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c1c:	42bc      	cmp	r4, r7
   d8c1e:	d006      	beq.n	d8c2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8c20:	6833      	ldr	r3, [r6, #0]
   d8c22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8c26:	689b      	ldr	r3, [r3, #8]
   d8c28:	4630      	mov	r0, r6
   d8c2a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8c2c:	e7f6      	b.n	d8c1c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8c2e:	4628      	mov	r0, r5
   d8c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c32 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8c32:	7c00      	ldrb	r0, [r0, #16]
   d8c34:	2200      	movs	r2, #0
   d8c36:	f7ff ba09 	b.w	d804c <hal_i2c_write>

000d8c3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8c3a:	7c00      	ldrb	r0, [r0, #16]
   d8c3c:	2100      	movs	r1, #0
   d8c3e:	f7ff ba0d 	b.w	d805c <hal_i2c_available>

000d8c42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8c42:	7c00      	ldrb	r0, [r0, #16]
   d8c44:	2100      	movs	r1, #0
   d8c46:	f7ff ba11 	b.w	d806c <hal_i2c_read>

000d8c4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8c4a:	7c00      	ldrb	r0, [r0, #16]
   d8c4c:	2100      	movs	r1, #0
   d8c4e:	f7ff ba15 	b.w	d807c <hal_i2c_peek>

000d8c52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8c52:	7c00      	ldrb	r0, [r0, #16]
   d8c54:	2100      	movs	r1, #0
   d8c56:	f7ff ba19 	b.w	d808c <hal_i2c_flush>

000d8c5a <_ZN7TwoWireD0Ev>:
   d8c5a:	b510      	push	{r4, lr}
   d8c5c:	2114      	movs	r1, #20
   d8c5e:	4604      	mov	r4, r0
   d8c60:	f001 f9c9 	bl	d9ff6 <_ZdlPvj>
   d8c64:	4620      	mov	r0, r4
   d8c66:	bd10      	pop	{r4, pc}

000d8c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8c68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c6e:	4604      	mov	r4, r0
   d8c70:	4608      	mov	r0, r1
   d8c72:	2100      	movs	r1, #0
   d8c74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8c78:	4b03      	ldr	r3, [pc, #12]	; (d8c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8c7a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8c7c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8c7e:	4611      	mov	r1, r2
   d8c80:	f7ff fa14 	bl	d80ac <hal_i2c_init>
}
   d8c84:	4620      	mov	r0, r4
   d8c86:	bd10      	pop	{r4, pc}
   d8c88:	000dda2c 	.word	0x000dda2c

000d8c8c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8c8c:	2300      	movs	r3, #0
   d8c8e:	7c00      	ldrb	r0, [r0, #16]
   d8c90:	461a      	mov	r2, r3
   d8c92:	4619      	mov	r1, r3
   d8c94:	f7ff b9c2 	b.w	d801c <hal_i2c_begin>

000d8c98 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	2314      	movs	r3, #20
   d8c9e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8ca2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8ca6:	780b      	ldrb	r3, [r1, #0]
   d8ca8:	f88d 3008 	strb.w	r3, [sp, #8]
   d8cac:	684b      	ldr	r3, [r1, #4]
   d8cae:	9303      	str	r3, [sp, #12]
   d8cb0:	68cb      	ldr	r3, [r1, #12]
   d8cb2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8cb4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8cb6:	7a0b      	ldrb	r3, [r1, #8]
   d8cb8:	9305      	str	r3, [sp, #20]
   d8cba:	a901      	add	r1, sp, #4
   d8cbc:	f7ff fa0e 	bl	d80dc <hal_i2c_request_ex>
}
   d8cc0:	b007      	add	sp, #28
   d8cc2:	f85d fb04 	ldr.w	pc, [sp], #4

000d8cc6 <_ZN7TwoWire11requestFromEhjh>:
{
   d8cc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8cc8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8cca:	f88d 1000 	strb.w	r1, [sp]
   d8cce:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8cd2:	9103      	str	r1, [sp, #12]
   d8cd4:	bf18      	it	ne
   d8cd6:	2301      	movne	r3, #1
   d8cd8:	4669      	mov	r1, sp
    size_ = size;
   d8cda:	9201      	str	r2, [sp, #4]
   d8cdc:	f88d 3008 	strb.w	r3, [sp, #8]
   d8ce0:	f7ff ffda 	bl	d8c98 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8ce4:	b005      	add	sp, #20
   d8ce6:	f85d fb04 	ldr.w	pc, [sp], #4

000d8cea <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8cea:	7c00      	ldrb	r0, [r0, #16]
   d8cec:	2200      	movs	r2, #0
   d8cee:	f7ff b99d 	b.w	d802c <hal_i2c_begin_transmission>

000d8cf2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8cf2:	b2c9      	uxtb	r1, r1
   d8cf4:	f7ff bff9 	b.w	d8cea <_ZN7TwoWire17beginTransmissionEh>

000d8cf8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8cf8:	7c00      	ldrb	r0, [r0, #16]
   d8cfa:	2200      	movs	r2, #0
   d8cfc:	f7ff b99e 	b.w	d803c <hal_i2c_end_transmission>

000d8d00 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8d00:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8d02:	2100      	movs	r1, #0
   d8d04:	7c00      	ldrb	r0, [r0, #16]
   d8d06:	f7ff f9d9 	bl	d80bc <hal_i2c_lock>
}
   d8d0a:	fab0 f080 	clz	r0, r0
   d8d0e:	0940      	lsrs	r0, r0, #5
   d8d10:	bd08      	pop	{r3, pc}

000d8d12 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8d12:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8d14:	2100      	movs	r1, #0
   d8d16:	7c00      	ldrb	r0, [r0, #16]
   d8d18:	f7ff f9d8 	bl	d80cc <hal_i2c_unlock>
}
   d8d1c:	fab0 f080 	clz	r0, r0
   d8d20:	0940      	lsrs	r0, r0, #5
   d8d22:	bd08      	pop	{r3, pc}

000d8d24 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8d24:	4700      	bx	r0
	...

000d8d28 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8d2c:	2400      	movs	r4, #0
{
   d8d2e:	461d      	mov	r5, r3
   d8d30:	460f      	mov	r7, r1
   d8d32:	4690      	mov	r8, r2
   d8d34:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8d36:	f7ff f961 	bl	d7ffc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8d3a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d3c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8d40:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d44:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8d48:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8d4c:	bfa2      	ittt	ge
   d8d4e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8d52:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8d56:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8d58:	4907      	ldr	r1, [pc, #28]	; (d8d78 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8d5a:	9400      	str	r4, [sp, #0]
   d8d5c:	4643      	mov	r3, r8
   d8d5e:	463a      	mov	r2, r7
   d8d60:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8d62:	bfa8      	it	ge
   d8d64:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8d68:	f7ff f940 	bl	d7fec <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8d6c:	fab0 f080 	clz	r0, r0
   d8d70:	0940      	lsrs	r0, r0, #5
   d8d72:	b004      	add	sp, #16
   d8d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d78:	000d8d25 	.word	0x000d8d25

000d8d7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8d7c:	4770      	bx	lr

000d8d7e <_ZN9IPAddressD0Ev>:
   d8d7e:	b510      	push	{r4, lr}
   d8d80:	2118      	movs	r1, #24
   d8d82:	4604      	mov	r4, r0
   d8d84:	f001 f937 	bl	d9ff6 <_ZdlPvj>
   d8d88:	4620      	mov	r0, r4
   d8d8a:	bd10      	pop	{r4, pc}

000d8d8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8d8e:	7d03      	ldrb	r3, [r0, #20]
   d8d90:	2b06      	cmp	r3, #6
{
   d8d92:	b08d      	sub	sp, #52	; 0x34
   d8d94:	460e      	mov	r6, r1
   d8d96:	f100 0704 	add.w	r7, r0, #4
   d8d9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8d9e:	d012      	beq.n	d8dc6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8da0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8da8:	220a      	movs	r2, #10
   d8daa:	4630      	mov	r0, r6
   d8dac:	f000 fb75 	bl	d949a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8db0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8db2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8db4:	d019      	beq.n	d8dea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8db6:	2c00      	cmp	r4, #0
   d8db8:	d0f4      	beq.n	d8da4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8dba:	212e      	movs	r1, #46	; 0x2e
   d8dbc:	4630      	mov	r0, r6
   d8dbe:	f000 fb69 	bl	d9494 <_ZN5Print5printEc>
   d8dc2:	4404      	add	r4, r0
   d8dc4:	e7ee      	b.n	d8da4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dc6:	232f      	movs	r3, #47	; 0x2f
   d8dc8:	466a      	mov	r2, sp
   d8dca:	4639      	mov	r1, r7
   d8dcc:	200a      	movs	r0, #10
		buf[0] = 0;
   d8dce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dd2:	f7ff f98b 	bl	d80ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8dd6:	4668      	mov	r0, sp
   d8dd8:	f002 f805 	bl	dade6 <strlen>
   d8ddc:	6833      	ldr	r3, [r6, #0]
   d8dde:	4602      	mov	r2, r0
   d8de0:	68db      	ldr	r3, [r3, #12]
   d8de2:	4669      	mov	r1, sp
   d8de4:	4630      	mov	r0, r6
   d8de6:	4798      	blx	r3
   d8de8:	4604      	mov	r4, r0
    }
    return n;
}
   d8dea:	4620      	mov	r0, r4
   d8dec:	b00d      	add	sp, #52	; 0x34
   d8dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8df0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8df0:	b510      	push	{r4, lr}
   d8df2:	4b05      	ldr	r3, [pc, #20]	; (d8e08 <_ZN9IPAddressC1Ev+0x18>)
   d8df4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8df6:	2211      	movs	r2, #17
   d8df8:	f840 3b04 	str.w	r3, [r0], #4
   d8dfc:	2100      	movs	r1, #0
   d8dfe:	f001 ff97 	bl	dad30 <memset>
}
   d8e02:	4620      	mov	r0, r4
   d8e04:	bd10      	pop	{r4, pc}
   d8e06:	bf00      	nop
   d8e08:	000dda54 	.word	0x000dda54

000d8e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8e0c:	4603      	mov	r3, r0
   d8e0e:	4a07      	ldr	r2, [pc, #28]	; (d8e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8e10:	b510      	push	{r4, lr}
   d8e12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8e16:	f101 0210 	add.w	r2, r1, #16
   d8e1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d8e1e:	f843 4b04 	str.w	r4, [r3], #4
   d8e22:	4291      	cmp	r1, r2
   d8e24:	d1f9      	bne.n	d8e1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8e26:	780a      	ldrb	r2, [r1, #0]
   d8e28:	701a      	strb	r2, [r3, #0]
}
   d8e2a:	bd10      	pop	{r4, pc}
   d8e2c:	000dda54 	.word	0x000dda54

000d8e30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8e30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8e32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8e36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8e3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8e3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8e42:	2304      	movs	r3, #4
   d8e44:	6041      	str	r1, [r0, #4]
   d8e46:	7503      	strb	r3, [r0, #20]
}
   d8e48:	bd10      	pop	{r4, pc}
	...

000d8e4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d8e4c:	b513      	push	{r0, r1, r4, lr}
   d8e4e:	4b05      	ldr	r3, [pc, #20]	; (d8e64 <_ZN9IPAddressC1EPKh+0x18>)
   d8e50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d8e52:	78cb      	ldrb	r3, [r1, #3]
   d8e54:	9300      	str	r3, [sp, #0]
   d8e56:	788b      	ldrb	r3, [r1, #2]
   d8e58:	784a      	ldrb	r2, [r1, #1]
   d8e5a:	7809      	ldrb	r1, [r1, #0]
   d8e5c:	f7ff ffe8 	bl	d8e30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8e60:	b002      	add	sp, #8
   d8e62:	bd10      	pop	{r4, pc}
   d8e64:	000dda54 	.word	0x000dda54

000d8e68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d8e68:	f100 0310 	add.w	r3, r0, #16
   d8e6c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8e6e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8e72:	2901      	cmp	r1, #1
   d8e74:	4618      	mov	r0, r3
   d8e76:	d108      	bne.n	d8e8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d8e78:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8e7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8e80:	3a01      	subs	r2, #1
   d8e82:	f103 0310 	add.w	r3, r3, #16
   d8e86:	d1f2      	bne.n	d8e6e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d8e88:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d8e8a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8e8c:	bf04      	itt	eq
   d8e8e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8e92:	1852      	addeq	r2, r2, r1
   d8e94:	e7f4      	b.n	d8e80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8e96 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8e96:	4770      	bx	lr

000d8e98 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8e98:	2000      	movs	r0, #0
   d8e9a:	4770      	bx	lr

000d8e9c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8e9c:	b510      	push	{r4, lr}
   d8e9e:	2110      	movs	r1, #16
   d8ea0:	4604      	mov	r4, r0
   d8ea2:	f001 f8a8 	bl	d9ff6 <_ZdlPvj>
   d8ea6:	4620      	mov	r0, r4
   d8ea8:	bd10      	pop	{r4, pc}

000d8eaa <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8eaa:	b508      	push	{r3, lr}
      { delete this; }
   d8eac:	f7ff fff6 	bl	d8e9c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8eb0:	bd08      	pop	{r3, pc}

000d8eb2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8eb2:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d8eb4:	68c4      	ldr	r4, [r0, #12]
   d8eb6:	b17c      	cbz	r4, d8ed8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d8eb8:	6820      	ldr	r0, [r4, #0]
   d8eba:	b108      	cbz	r0, d8ec0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d8ebc:	f7fb f8f1 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d8ec0:	7a23      	ldrb	r3, [r4, #8]
   d8ec2:	b11b      	cbz	r3, d8ecc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d8ec4:	6860      	ldr	r0, [r4, #4]
   d8ec6:	b108      	cbz	r0, d8ecc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d8ec8:	f7fb f8eb 	bl	d40a2 <_ZdaPv>
   d8ecc:	4620      	mov	r0, r4
   d8ece:	210c      	movs	r1, #12
   d8ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8ed4:	f001 b88f 	b.w	d9ff6 <_ZdlPvj>
   d8ed8:	bd10      	pop	{r4, pc}

000d8eda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8eda:	b510      	push	{r4, lr}
          _M_dispose();
   d8edc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8ede:	4604      	mov	r4, r0
          _M_dispose();
   d8ee0:	689b      	ldr	r3, [r3, #8]
   d8ee2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8ee4:	68a3      	ldr	r3, [r4, #8]
   d8ee6:	3b01      	subs	r3, #1
   d8ee8:	60a3      	str	r3, [r4, #8]
   d8eea:	b92b      	cbnz	r3, d8ef8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8eec:	6823      	ldr	r3, [r4, #0]
   d8eee:	4620      	mov	r0, r4
   d8ef0:	68db      	ldr	r3, [r3, #12]
    }
   d8ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8ef6:	4718      	bx	r3
    }
   d8ef8:	bd10      	pop	{r4, pc}

000d8efa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8efa:	b538      	push	{r3, r4, r5, lr}
   d8efc:	680b      	ldr	r3, [r1, #0]
   d8efe:	6003      	str	r3, [r0, #0]
   d8f00:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8f02:	6843      	ldr	r3, [r0, #4]
   d8f04:	429d      	cmp	r5, r3
    class __shared_ptr
   d8f06:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8f08:	d00c      	beq.n	d8f24 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8f0a:	b115      	cbz	r5, d8f12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8f0c:	686b      	ldr	r3, [r5, #4]
   d8f0e:	3301      	adds	r3, #1
   d8f10:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8f12:	6860      	ldr	r0, [r4, #4]
   d8f14:	b128      	cbz	r0, d8f22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d8f16:	6843      	ldr	r3, [r0, #4]
   d8f18:	3b01      	subs	r3, #1
   d8f1a:	6043      	str	r3, [r0, #4]
   d8f1c:	b90b      	cbnz	r3, d8f22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8f1e:	f7ff ffdc 	bl	d8eda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8f22:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d8f24:	4620      	mov	r0, r4
   d8f26:	bd38      	pop	{r3, r4, r5, pc}

000d8f28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8f28:	460b      	mov	r3, r1
   d8f2a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8f2c:	2200      	movs	r2, #0
   d8f2e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8f30:	e9c0 2200 	strd	r2, r2, [r0]
   d8f34:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d8f36:	6083      	str	r3, [r0, #8]
    if (t) {
   d8f38:	b90b      	cbnz	r3, d8f3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d8f3a:	4620      	mov	r0, r4
   d8f3c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d8f3e:	f7ff ffdc 	bl	d8efa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8f42:	e7fa      	b.n	d8f3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d8f44 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8f44:	6883      	ldr	r3, [r0, #8]
   d8f46:	b1eb      	cbz	r3, d8f84 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d8f48:	781a      	ldrb	r2, [r3, #0]
   d8f4a:	2a03      	cmp	r2, #3
   d8f4c:	d81a      	bhi.n	d8f84 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8f4e:	e8df f002 	tbb	[pc, r2]
   d8f52:	1704      	.short	0x1704
   d8f54:	1b02      	.short	0x1b02
   d8f56:	2005      	movs	r0, #5
   d8f58:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d8f5a:	6802      	ldr	r2, [r0, #0]
   d8f5c:	685b      	ldr	r3, [r3, #4]
   d8f5e:	6852      	ldr	r2, [r2, #4]
   d8f60:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8f62:	282d      	cmp	r0, #45	; 0x2d
   d8f64:	d012      	beq.n	d8f8c <_ZNK5spark9JSONValue4typeEv+0x48>
   d8f66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8f6a:	2b09      	cmp	r3, #9
   d8f6c:	d90e      	bls.n	d8f8c <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8f6e:	2874      	cmp	r0, #116	; 0x74
   d8f70:	d00e      	beq.n	d8f90 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8f72:	2866      	cmp	r0, #102	; 0x66
   d8f74:	d00c      	beq.n	d8f90 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d8f76:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8f7a:	4258      	negs	r0, r3
   d8f7c:	4158      	adcs	r0, r3
   d8f7e:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8f80:	2006      	movs	r0, #6
   d8f82:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8f84:	2000      	movs	r0, #0
   d8f86:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d8f88:	2004      	movs	r0, #4
   d8f8a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d8f8c:	2003      	movs	r0, #3
   d8f8e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d8f90:	2002      	movs	r0, #2
    }
}
   d8f92:	4770      	bx	lr

000d8f94 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d8f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8f98:	b086      	sub	sp, #24
   d8f9a:	4607      	mov	r7, r0
   d8f9c:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d8f9e:	a802      	add	r0, sp, #8
   d8fa0:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d8fa2:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d8fa4:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d8fa6:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d8fa8:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d8faa:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d8fac:	f7ff f93e 	bl	d822c <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d8fb0:	e9cd 4400 	strd	r4, r4, [sp]
   d8fb4:	4623      	mov	r3, r4
   d8fb6:	4642      	mov	r2, r8
   d8fb8:	4639      	mov	r1, r7
   d8fba:	a802      	add	r0, sp, #8
   d8fbc:	f7ff f93e 	bl	d823c <jsmn_parse>
    if (n <= 0) {
   d8fc0:	1e06      	subs	r6, r0, #0
   d8fc2:	dd1e      	ble.n	d9002 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d8fc4:	4910      	ldr	r1, [pc, #64]	; (d9008 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d8fc6:	0130      	lsls	r0, r6, #4
   d8fc8:	f001 f819 	bl	d9ffe <_ZnajRKSt9nothrow_t>
    if (!t) {
   d8fcc:	4605      	mov	r5, r0
   d8fce:	b190      	cbz	r0, d8ff6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d8fd0:	4621      	mov	r1, r4
   d8fd2:	a802      	add	r0, sp, #8
   d8fd4:	f7ff f92a 	bl	d822c <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d8fd8:	e9cd 6400 	strd	r6, r4, [sp]
   d8fdc:	462b      	mov	r3, r5
   d8fde:	4642      	mov	r2, r8
   d8fe0:	4639      	mov	r1, r7
   d8fe2:	a802      	add	r0, sp, #8
   d8fe4:	f7ff f92a 	bl	d823c <jsmn_parse>
   d8fe8:	42a0      	cmp	r0, r4
   d8fea:	dd07      	ble.n	d8ffc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d8fec:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d8ff0:	2001      	movs	r0, #1
    *count = n;
   d8ff2:	f8c9 6000 	str.w	r6, [r9]
}
   d8ff6:	b006      	add	sp, #24
   d8ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   d8ffc:	4628      	mov	r0, r5
   d8ffe:	f7fb f850 	bl	d40a2 <_ZdaPv>
      }
   d9002:	4620      	mov	r0, r4
   d9004:	e7f7      	b.n	d8ff6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d9006:	bf00      	nop
   d9008:	000ddb84 	.word	0x000ddb84

000d900c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d900c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d9010:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d9012:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d9014:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d9016:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d9018:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d901a:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d901c:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d901e:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d9020:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d9024:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d9028:	42b4      	cmp	r4, r6
   d902a:	d063      	beq.n	d90f4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d902c:	4625      	mov	r5, r4
   d902e:	f815 2b01 	ldrb.w	r2, [r5], #1
   d9032:	2a5c      	cmp	r2, #92	; 0x5c
   d9034:	d12b      	bne.n	d908e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d9036:	42a1      	cmp	r1, r4
   d9038:	d007      	beq.n	d904a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d903a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d903e:	4618      	mov	r0, r3
   d9040:	465a      	mov	r2, fp
   d9042:	f001 fe5b 	bl	dacfc <memmove>
   d9046:	4603      	mov	r3, r0
                str += n;
   d9048:	445b      	add	r3, fp
            if (s == end) {
   d904a:	42b5      	cmp	r5, r6
   d904c:	d039      	beq.n	d90c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d904e:	7862      	ldrb	r2, [r4, #1]
   d9050:	2a75      	cmp	r2, #117	; 0x75
   d9052:	d12a      	bne.n	d90aa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d9054:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d9056:	1ab2      	subs	r2, r6, r2
   d9058:	2a03      	cmp	r2, #3
   d905a:	dd32      	ble.n	d90c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d905c:	1da0      	adds	r0, r4, #6
   d905e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d9062:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d9066:	45ae      	cmp	lr, r5
   d9068:	d053      	beq.n	d9112 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d906a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d906e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d9072:	fa5f fb82 	uxtb.w	fp, r2
   d9076:	f1bb 0f09 	cmp.w	fp, #9
   d907a:	d905      	bls.n	d9088 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d907c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d9080:	2a05      	cmp	r2, #5
   d9082:	d807      	bhi.n	d9094 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d9084:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d9088:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d908c:	e7eb      	b.n	d9066 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d908e:	4628      	mov	r0, r5
   d9090:	4604      	mov	r4, r0
   d9092:	e7c9      	b.n	d9028 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d9094:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d9098:	2a05      	cmp	r2, #5
   d909a:	d812      	bhi.n	d90c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d909c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d90a0:	e7f2      	b.n	d9088 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d90a2:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d90a6:	4601      	mov	r1, r0
   d90a8:	e7f2      	b.n	d9090 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d90aa:	2a6e      	cmp	r2, #110	; 0x6e
   d90ac:	d01c      	beq.n	d90e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d90ae:	d80e      	bhi.n	d90ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d90b0:	2a62      	cmp	r2, #98	; 0x62
   d90b2:	d013      	beq.n	d90dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d90b4:	d807      	bhi.n	d90c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d90b6:	2a2f      	cmp	r2, #47	; 0x2f
   d90b8:	d011      	beq.n	d90de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d90ba:	2a5c      	cmp	r2, #92	; 0x5c
   d90bc:	d00f      	beq.n	d90de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d90be:	2a22      	cmp	r2, #34	; 0x22
   d90c0:	d00d      	beq.n	d90de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d90c2:	2000      	movs	r0, #0
   d90c4:	e023      	b.n	d910e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d90c6:	2a66      	cmp	r2, #102	; 0x66
   d90c8:	d1fb      	bne.n	d90c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d90ca:	220c      	movs	r2, #12
   d90cc:	e007      	b.n	d90de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d90ce:	2a72      	cmp	r2, #114	; 0x72
   d90d0:	d00d      	beq.n	d90ee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d90d2:	2a74      	cmp	r2, #116	; 0x74
   d90d4:	d1f5      	bne.n	d90c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d90d6:	f883 a000 	strb.w	sl, [r3]
                    break;
   d90da:	e001      	b.n	d90e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d90dc:	2208      	movs	r2, #8
   d90de:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d90e0:	1ca1      	adds	r1, r4, #2
                ++str;
   d90e2:	3301      	adds	r3, #1
                ++s;
   d90e4:	4608      	mov	r0, r1
   d90e6:	e7d3      	b.n	d9090 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d90e8:	f04f 020a 	mov.w	r2, #10
   d90ec:	e7f7      	b.n	d90de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d90ee:	f883 9000 	strb.w	r9, [r3]
                    break;
   d90f2:	e7f5      	b.n	d90e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d90f4:	42a1      	cmp	r1, r4
   d90f6:	d006      	beq.n	d9106 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d90f8:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d90fa:	4618      	mov	r0, r3
   d90fc:	4622      	mov	r2, r4
   d90fe:	f001 fdfd 	bl	dacfc <memmove>
   d9102:	4603      	mov	r3, r0
        str += n;
   d9104:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d9106:	eba3 0308 	sub.w	r3, r3, r8
   d910a:	60bb      	str	r3, [r7, #8]
    return true;
   d910c:	2001      	movs	r0, #1
}
   d910e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d9112:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d9116:	d9c4      	bls.n	d90a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d9118:	4621      	mov	r1, r4
   d911a:	e7b9      	b.n	d9090 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d911c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d911e:	4604      	mov	r4, r0
   d9120:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d9122:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d9126:	2700      	movs	r7, #0
    while (t != end) {
   d9128:	42b4      	cmp	r4, r6
   d912a:	d010      	beq.n	d914e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d912c:	7823      	ldrb	r3, [r4, #0]
   d912e:	2b03      	cmp	r3, #3
   d9130:	d108      	bne.n	d9144 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d9132:	4629      	mov	r1, r5
   d9134:	4620      	mov	r0, r4
   d9136:	f7ff ff69 	bl	d900c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d913a:	b148      	cbz	r0, d9150 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d913c:	68a3      	ldr	r3, [r4, #8]
   d913e:	54ef      	strb	r7, [r5, r3]
        ++t;
   d9140:	3410      	adds	r4, #16
    while (t != end) {
   d9142:	e7f1      	b.n	d9128 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d9144:	2b00      	cmp	r3, #0
   d9146:	d1fb      	bne.n	d9140 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d9148:	68a2      	ldr	r2, [r4, #8]
   d914a:	54ab      	strb	r3, [r5, r2]
   d914c:	e7f8      	b.n	d9140 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d914e:	2001      	movs	r0, #1
}
   d9150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d9154 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9154:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9156:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9158:	e9c0 3300 	strd	r3, r3, [r0]
   d915c:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d915e:	480e      	ldr	r0, [pc, #56]	; (d9198 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9160:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9164:	b1a9      	cbz	r1, d9192 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9166:	780b      	ldrb	r3, [r1, #0]
   d9168:	2b03      	cmp	r3, #3
   d916a:	d006      	beq.n	d917a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d916c:	b98b      	cbnz	r3, d9192 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d916e:	6813      	ldr	r3, [r2, #0]
   d9170:	6858      	ldr	r0, [r3, #4]
   d9172:	684b      	ldr	r3, [r1, #4]
   d9174:	5cc3      	ldrb	r3, [r0, r3]
   d9176:	2b6e      	cmp	r3, #110	; 0x6e
   d9178:	d007      	beq.n	d918a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d917a:	6813      	ldr	r3, [r2, #0]
   d917c:	684d      	ldr	r5, [r1, #4]
   d917e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9180:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9182:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9184:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9186:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9188:	60e3      	str	r3, [r4, #12]
   d918a:	4611      	mov	r1, r2
   d918c:	4620      	mov	r0, r4
   d918e:	f7ff feb4 	bl	d8efa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d9192:	4620      	mov	r0, r4
   d9194:	bd38      	pop	{r3, r4, r5, pc}
   d9196:	bf00      	nop
   d9198:	000ddbac 	.word	0x000ddbac

000d919c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d919c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d919e:	2500      	movs	r5, #0
   d91a0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d91a2:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d91a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d91aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d91ae:	4604      	mov	r4, r0
   d91b0:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d91b2:	b14b      	cbz	r3, d91c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d91b4:	781a      	ldrb	r2, [r3, #0]
   d91b6:	2a01      	cmp	r2, #1
   d91b8:	d106      	bne.n	d91c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d91ba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d91be:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d91c0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d91c2:	6143      	str	r3, [r0, #20]
   d91c4:	f7ff fe99 	bl	d8efa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d91c8:	4620      	mov	r0, r4
   d91ca:	bd38      	pop	{r3, r4, r5, pc}

000d91cc <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d91cc:	b510      	push	{r4, lr}
    if (!n_) {
   d91ce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d91d0:	4604      	mov	r4, r0
    if (!n_) {
   d91d2:	b163      	cbz	r3, d91ee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d91d4:	6880      	ldr	r0, [r0, #8]
   d91d6:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d91d8:	3b01      	subs	r3, #1
    ++t_;
   d91da:	3010      	adds	r0, #16
   d91dc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d91de:	6120      	str	r0, [r4, #16]
    --n_;
   d91e0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d91e2:	b113      	cbz	r3, d91ea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d91e4:	f7ff fe40 	bl	d8e68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d91e8:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d91ea:	2001      	movs	r0, #1
   d91ec:	e000      	b.n	d91f0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d91ee:	4618      	mov	r0, r3
}
   d91f0:	bd10      	pop	{r4, pc}
	...

000d91f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d91f4:	b538      	push	{r3, r4, r5, lr}
   d91f6:	2300      	movs	r3, #0
   d91f8:	4604      	mov	r4, r0
   d91fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d91fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d91fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9200:	f7fa ff49 	bl	d4096 <_Znwj>
   d9204:	b128      	cbz	r0, d9212 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d9206:	2301      	movs	r3, #1
   d9208:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d920c:	4b02      	ldr	r3, [pc, #8]	; (d9218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d920e:	6003      	str	r3, [r0, #0]
   d9210:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9212:	6020      	str	r0, [r4, #0]
	}
   d9214:	4620      	mov	r0, r4
   d9216:	bd38      	pop	{r3, r4, r5, pc}
   d9218:	000dda68 	.word	0x000dda68

000d921c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d921c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d921e:	4604      	mov	r4, r0
   d9220:	b087      	sub	sp, #28
   d9222:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d9224:	200c      	movs	r0, #12
   d9226:	4927      	ldr	r1, [pc, #156]	; (d92c4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d9228:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d922a:	f000 fee6 	bl	d9ffa <_ZnwjRKSt9nothrow_t>
   d922e:	4601      	mov	r1, r0
   d9230:	b118      	cbz	r0, d923a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d9232:	2300      	movs	r3, #0
   d9234:	e9c0 3300 	strd	r3, r3, [r0]
   d9238:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d923a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d923c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d923e:	f7ff ffd9 	bl	d91f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d9242:	9a02      	ldr	r2, [sp, #8]
   d9244:	b942      	cbnz	r2, d9258 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9246:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d924a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d924c:	a803      	add	r0, sp, #12
   d924e:	f7fb ffff 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9252:	4620      	mov	r0, r4
   d9254:	b007      	add	sp, #28
   d9256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d9258:	2300      	movs	r3, #0
   d925a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d925c:	4629      	mov	r1, r5
   d925e:	ab01      	add	r3, sp, #4
   d9260:	4630      	mov	r0, r6
   d9262:	f7ff fe97 	bl	d8f94 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d9266:	b918      	cbnz	r0, d9270 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9268:	e9c4 0000 	strd	r0, r0, [r4]
   d926c:	60a0      	str	r0, [r4, #8]
}
   d926e:	e7ed      	b.n	d924c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d9270:	4914      	ldr	r1, [pc, #80]	; (d92c4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9272:	9f02      	ldr	r7, [sp, #8]
   d9274:	1c68      	adds	r0, r5, #1
   d9276:	f000 fec2 	bl	d9ffe <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d927a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d927c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d927e:	6858      	ldr	r0, [r3, #4]
   d9280:	2800      	cmp	r0, #0
   d9282:	d0f1      	beq.n	d9268 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d9284:	462a      	mov	r2, r5
   d9286:	4631      	mov	r1, r6
   d9288:	f001 fd2a 	bl	dace0 <memcpy>
   d928c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d928e:	9901      	ldr	r1, [sp, #4]
   d9290:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d9292:	2201      	movs	r2, #1
   d9294:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9296:	685a      	ldr	r2, [r3, #4]
   d9298:	f7ff ff40 	bl	d911c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d929c:	2800      	cmp	r0, #0
   d929e:	d0e3      	beq.n	d9268 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d92a0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d92a2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d92a4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d92a6:	9b03      	ldr	r3, [sp, #12]
   d92a8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d92aa:	b113      	cbz	r3, d92b2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d92ac:	685a      	ldr	r2, [r3, #4]
   d92ae:	3201      	adds	r2, #1
   d92b0:	605a      	str	r2, [r3, #4]
   d92b2:	aa04      	add	r2, sp, #16
   d92b4:	4620      	mov	r0, r4
   d92b6:	f7ff fe37 	bl	d8f28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d92ba:	a805      	add	r0, sp, #20
   d92bc:	f7fb ffc8 	bl	d5250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d92c0:	e7c4      	b.n	d924c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d92c2:	bf00      	nop
   d92c4:	000ddb84 	.word	0x000ddb84

000d92c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d92c8:	4b01      	ldr	r3, [pc, #4]	; (d92d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d92ca:	4a02      	ldr	r2, [pc, #8]	; (d92d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d92cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d92ce:	4770      	bx	lr
   d92d0:	2003e614 	.word	0x2003e614
   d92d4:	000dda7c 	.word	0x000dda7c

000d92d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d92d8:	2300      	movs	r3, #0
   d92da:	6840      	ldr	r0, [r0, #4]
   d92dc:	461a      	mov	r2, r3
   d92de:	f7ff b883 	b.w	d83e8 <network_connect>

000d92e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d92e2:	6840      	ldr	r0, [r0, #4]
   d92e4:	2200      	movs	r2, #0
   d92e6:	2102      	movs	r1, #2
   d92e8:	f7ff b88e 	b.w	d8408 <network_disconnect>

000d92ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d92ec:	2200      	movs	r2, #0
   d92ee:	6840      	ldr	r0, [r0, #4]
   d92f0:	4611      	mov	r1, r2
   d92f2:	f7ff b881 	b.w	d83f8 <network_connecting>

000d92f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d92f6:	2200      	movs	r2, #0
   d92f8:	6840      	ldr	r0, [r0, #4]
   d92fa:	4611      	mov	r1, r2
   d92fc:	f7ff b88c 	b.w	d8418 <network_ready>

000d9300 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9300:	2300      	movs	r3, #0
   d9302:	6840      	ldr	r0, [r0, #4]
   d9304:	461a      	mov	r2, r3
   d9306:	4619      	mov	r1, r3
   d9308:	f7ff b88e 	b.w	d8428 <network_on>

000d930c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d930c:	2300      	movs	r3, #0
   d930e:	6840      	ldr	r0, [r0, #4]
   d9310:	461a      	mov	r2, r3
   d9312:	4619      	mov	r1, r3
   d9314:	f7ff b890 	b.w	d8438 <network_off>

000d9318 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9318:	6840      	ldr	r0, [r0, #4]
   d931a:	2100      	movs	r1, #0
   d931c:	f7ff b8b4 	b.w	d8488 <network_is_on>

000d9320 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9320:	6840      	ldr	r0, [r0, #4]
   d9322:	2100      	movs	r1, #0
   d9324:	f7ff b8b8 	b.w	d8498 <network_is_off>

000d9328 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9328:	6840      	ldr	r0, [r0, #4]
   d932a:	2200      	movs	r2, #0
   d932c:	f081 0101 	eor.w	r1, r1, #1
   d9330:	f7ff b88a 	b.w	d8448 <network_listen>

000d9334 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9334:	6840      	ldr	r0, [r0, #4]
   d9336:	2200      	movs	r2, #0
   d9338:	f7ff b896 	b.w	d8468 <network_set_listen_timeout>

000d933c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d933c:	2200      	movs	r2, #0
   d933e:	6840      	ldr	r0, [r0, #4]
   d9340:	4611      	mov	r1, r2
   d9342:	f7ff b899 	b.w	d8478 <network_get_listen_timeout>

000d9346 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9346:	2200      	movs	r2, #0
   d9348:	6840      	ldr	r0, [r0, #4]
   d934a:	4611      	mov	r1, r2
   d934c:	f7ff b884 	b.w	d8458 <network_listening>

000d9350 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9354:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9356:	b095      	sub	sp, #84	; 0x54
   d9358:	4616      	mov	r6, r2
   d935a:	460d      	mov	r5, r1
   d935c:	4607      	mov	r7, r0
    IPAddress addr;
   d935e:	f7ff fd47 	bl	d8df0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9362:	4621      	mov	r1, r4
   d9364:	2218      	movs	r2, #24
   d9366:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9368:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d936a:	f001 fce1 	bl	dad30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d936e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9370:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9374:	4621      	mov	r1, r4
   d9376:	466b      	mov	r3, sp
   d9378:	aa0c      	add	r2, sp, #48	; 0x30
   d937a:	4630      	mov	r0, r6
   d937c:	f7fe fec6 	bl	d810c <netdb_getaddrinfo>
    if (!r) {
   d9380:	4604      	mov	r4, r0
   d9382:	2800      	cmp	r0, #0
   d9384:	d14c      	bne.n	d9420 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9386:	4602      	mov	r2, r0
   d9388:	2101      	movs	r1, #1
   d938a:	6868      	ldr	r0, [r5, #4]
   d938c:	f7ff f844 	bl	d8418 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9390:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9392:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9394:	4622      	mov	r2, r4
   d9396:	6868      	ldr	r0, [r5, #4]
   d9398:	f7ff f83e 	bl	d8418 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d939c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d939e:	4681      	mov	r9, r0
        bool ok = false;
   d93a0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d93a2:	2e00      	cmp	r6, #0
   d93a4:	d03c      	beq.n	d9420 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d93a6:	2900      	cmp	r1, #0
   d93a8:	d13a      	bne.n	d9420 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d93aa:	6873      	ldr	r3, [r6, #4]
   d93ac:	2b02      	cmp	r3, #2
   d93ae:	d003      	beq.n	d93b8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d93b0:	2b0a      	cmp	r3, #10
   d93b2:	d011      	beq.n	d93d8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d93b4:	69f6      	ldr	r6, [r6, #28]
   d93b6:	e7f4      	b.n	d93a2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d93b8:	f1b8 0f00 	cmp.w	r8, #0
   d93bc:	d00a      	beq.n	d93d4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d93be:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d93c0:	a806      	add	r0, sp, #24
   d93c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d93c4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d93c6:	f7ff fd41 	bl	d8e4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d93ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d93cc:	1d3c      	adds	r4, r7, #4
   d93ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d93d0:	682b      	ldr	r3, [r5, #0]
   d93d2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d93d4:	4641      	mov	r1, r8
   d93d6:	e7ed      	b.n	d93b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d93d8:	f1b9 0f00 	cmp.w	r9, #0
   d93dc:	d101      	bne.n	d93e2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d93de:	4649      	mov	r1, r9
   d93e0:	e7e8      	b.n	d93b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d93e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d93e4:	2210      	movs	r2, #16
   d93e6:	a801      	add	r0, sp, #4
   d93e8:	f001 fca2 	bl	dad30 <memset>
                    a.v = 6;
   d93ec:	2306      	movs	r3, #6
   d93ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d93f2:	ad01      	add	r5, sp, #4
   d93f4:	f104 0308 	add.w	r3, r4, #8
   d93f8:	3418      	adds	r4, #24
   d93fa:	6818      	ldr	r0, [r3, #0]
   d93fc:	6859      	ldr	r1, [r3, #4]
   d93fe:	462a      	mov	r2, r5
   d9400:	c203      	stmia	r2!, {r0, r1}
   d9402:	3308      	adds	r3, #8
   d9404:	42a3      	cmp	r3, r4
   d9406:	4615      	mov	r5, r2
   d9408:	d1f7      	bne.n	d93fa <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d940a:	a901      	add	r1, sp, #4
   d940c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d940e:	ad07      	add	r5, sp, #28
   d9410:	f7ff fcfc 	bl	d8e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9416:	1d3c      	adds	r4, r7, #4
   d9418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d941a:	682b      	ldr	r3, [r5, #0]
   d941c:	7023      	strb	r3, [r4, #0]
   d941e:	e7de      	b.n	d93de <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9420:	9800      	ldr	r0, [sp, #0]
   d9422:	f7fe fe6b 	bl	d80fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9426:	4638      	mov	r0, r7
   d9428:	b015      	add	sp, #84	; 0x54
   d942a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9430 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9430:	4b02      	ldr	r3, [pc, #8]	; (d943c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9432:	4a03      	ldr	r2, [pc, #12]	; (d9440 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9434:	601a      	str	r2, [r3, #0]
   d9436:	2200      	movs	r2, #0
   d9438:	605a      	str	r2, [r3, #4]

} // spark
   d943a:	4770      	bx	lr
   d943c:	2003e618 	.word	0x2003e618
   d9440:	000dda88 	.word	0x000dda88

000d9444 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9446:	4606      	mov	r6, r0
   d9448:	460d      	mov	r5, r1
  size_t n = 0;
   d944a:	188f      	adds	r7, r1, r2
   d944c:	2400      	movs	r4, #0
  while (size--) {
   d944e:	42bd      	cmp	r5, r7
   d9450:	d00c      	beq.n	d946c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9452:	6833      	ldr	r3, [r6, #0]
   d9454:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9458:	689b      	ldr	r3, [r3, #8]
   d945a:	4630      	mov	r0, r6
   d945c:	4798      	blx	r3
     if (chunk>=0)
   d945e:	1e03      	subs	r3, r0, #0
   d9460:	db01      	blt.n	d9466 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9462:	441c      	add	r4, r3
  while (size--) {
   d9464:	e7f3      	b.n	d944e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9466:	2c00      	cmp	r4, #0
   d9468:	bf08      	it	eq
   d946a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d946c:	4620      	mov	r0, r4
   d946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9470 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9470:	b513      	push	{r0, r1, r4, lr}
   d9472:	4604      	mov	r4, r0
    }
   d9474:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9476:	b159      	cbz	r1, d9490 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9478:	9101      	str	r1, [sp, #4]
   d947a:	f001 fcb4 	bl	dade6 <strlen>
   d947e:	6823      	ldr	r3, [r4, #0]
   d9480:	9901      	ldr	r1, [sp, #4]
   d9482:	68db      	ldr	r3, [r3, #12]
   d9484:	4602      	mov	r2, r0
   d9486:	4620      	mov	r0, r4
    }
   d9488:	b002      	add	sp, #8
   d948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d948e:	4718      	bx	r3
    }
   d9490:	b002      	add	sp, #8
   d9492:	bd10      	pop	{r4, pc}

000d9494 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9494:	6803      	ldr	r3, [r0, #0]
   d9496:	689b      	ldr	r3, [r3, #8]
   d9498:	4718      	bx	r3

000d949a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d949a:	b530      	push	{r4, r5, lr}
   d949c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d949e:	2300      	movs	r3, #0
   d94a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d94a4:	2a01      	cmp	r2, #1
   d94a6:	bf98      	it	ls
   d94a8:	220a      	movls	r2, #10
   d94aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d94ac:	460d      	mov	r5, r1
   d94ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d94b2:	fb01 5312 	mls	r3, r1, r2, r5
   d94b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d94ba:	2b09      	cmp	r3, #9
   d94bc:	bf94      	ite	ls
   d94be:	3330      	addls	r3, #48	; 0x30
   d94c0:	3337      	addhi	r3, #55	; 0x37
   d94c2:	b2db      	uxtb	r3, r3
  } while(n);
   d94c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d94c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d94ca:	d9ef      	bls.n	d94ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d94cc:	4621      	mov	r1, r4
   d94ce:	f7ff ffcf 	bl	d9470 <_ZN5Print5writeEPKc>
}
   d94d2:	b00b      	add	sp, #44	; 0x2c
   d94d4:	bd30      	pop	{r4, r5, pc}

000d94d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d94d6:	b510      	push	{r4, lr}
   d94d8:	4604      	mov	r4, r0
   d94da:	f7fa fed0 	bl	d427e <_ZNSt14_Function_baseD1Ev>
   d94de:	4620      	mov	r0, r4
   d94e0:	bd10      	pop	{r4, pc}
	...

000d94e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d94e4:	4803      	ldr	r0, [pc, #12]	; (d94f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d94e6:	4a04      	ldr	r2, [pc, #16]	; (d94f8 <_GLOBAL__sub_I_RGB+0x14>)
   d94e8:	4904      	ldr	r1, [pc, #16]	; (d94fc <_GLOBAL__sub_I_RGB+0x18>)
   d94ea:	2300      	movs	r3, #0
   d94ec:	6083      	str	r3, [r0, #8]
   d94ee:	f000 bd7d 	b.w	d9fec <__aeabi_atexit>
   d94f2:	bf00      	nop
   d94f4:	2003e620 	.word	0x2003e620
   d94f8:	2003dab8 	.word	0x2003dab8
   d94fc:	000d94d7 	.word	0x000d94d7

000d9500 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9500:	b510      	push	{r4, lr}
   d9502:	4604      	mov	r4, r0
   d9504:	4608      	mov	r0, r1
{
    _spi = spi;
   d9506:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9508:	f7fe fe08 	bl	d811c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d950c:	2300      	movs	r3, #0
   d950e:	6063      	str	r3, [r4, #4]
}
   d9510:	4620      	mov	r0, r4
   d9512:	bd10      	pop	{r4, pc}

000d9514 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9514:	b510      	push	{r4, lr}
   d9516:	4604      	mov	r4, r0
{
	free(buffer);
   d9518:	6800      	ldr	r0, [r0, #0]
   d951a:	f7fe ffcd 	bl	d84b8 <free>
}
   d951e:	4620      	mov	r0, r4
   d9520:	bd10      	pop	{r4, pc}

000d9522 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9522:	b510      	push	{r4, lr}
   d9524:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9526:	6800      	ldr	r0, [r0, #0]
   d9528:	b108      	cbz	r0, d952e <_ZN6String10invalidateEv+0xc>
   d952a:	f7fe ffc5 	bl	d84b8 <free>
	buffer = NULL;
   d952e:	2300      	movs	r3, #0
	capacity = len = 0;
   d9530:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9534:	6023      	str	r3, [r4, #0]
}
   d9536:	bd10      	pop	{r4, pc}

000d9538 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9538:	b538      	push	{r3, r4, r5, lr}
   d953a:	4604      	mov	r4, r0
   d953c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d953e:	6800      	ldr	r0, [r0, #0]
   d9540:	3101      	adds	r1, #1
   d9542:	f7fe ffc1 	bl	d84c8 <realloc>
	if (newbuffer) {
   d9546:	b110      	cbz	r0, d954e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9548:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d954c:	2001      	movs	r0, #1
	}
	return 0;
}
   d954e:	bd38      	pop	{r3, r4, r5, pc}

000d9550 <_ZN6String7reserveEj>:
{
   d9550:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9552:	6803      	ldr	r3, [r0, #0]
{
   d9554:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9556:	b123      	cbz	r3, d9562 <_ZN6String7reserveEj+0x12>
   d9558:	6843      	ldr	r3, [r0, #4]
   d955a:	428b      	cmp	r3, r1
   d955c:	d301      	bcc.n	d9562 <_ZN6String7reserveEj+0x12>
   d955e:	2001      	movs	r0, #1
}
   d9560:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9562:	4620      	mov	r0, r4
   d9564:	f7ff ffe8 	bl	d9538 <_ZN6String12changeBufferEj>
   d9568:	2800      	cmp	r0, #0
   d956a:	d0f9      	beq.n	d9560 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d956c:	68a3      	ldr	r3, [r4, #8]
   d956e:	2b00      	cmp	r3, #0
   d9570:	d1f5      	bne.n	d955e <_ZN6String7reserveEj+0xe>
   d9572:	6822      	ldr	r2, [r4, #0]
   d9574:	7013      	strb	r3, [r2, #0]
   d9576:	e7f2      	b.n	d955e <_ZN6String7reserveEj+0xe>

000d9578 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d957a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d957c:	4611      	mov	r1, r2
   d957e:	9201      	str	r2, [sp, #4]
{
   d9580:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9582:	f7ff ffe5 	bl	d9550 <_ZN6String7reserveEj>
   d9586:	9a01      	ldr	r2, [sp, #4]
   d9588:	b928      	cbnz	r0, d9596 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d958a:	4620      	mov	r0, r4
   d958c:	f7ff ffc9 	bl	d9522 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9590:	4620      	mov	r0, r4
   d9592:	b003      	add	sp, #12
   d9594:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9596:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9598:	4629      	mov	r1, r5
   d959a:	6820      	ldr	r0, [r4, #0]
   d959c:	f001 fba0 	bl	dace0 <memcpy>
	buffer[len] = 0;
   d95a0:	6822      	ldr	r2, [r4, #0]
   d95a2:	68a3      	ldr	r3, [r4, #8]
   d95a4:	2100      	movs	r1, #0
   d95a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d95a8:	e7f2      	b.n	d9590 <_ZN6String4copyEPKcj+0x18>

000d95aa <_ZN6StringC1EPKc>:
	buffer = NULL;
   d95aa:	2300      	movs	r3, #0
String::String(const char *cstr)
   d95ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d95ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d95b2:	4604      	mov	r4, r0
	len = 0;
   d95b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d95b8:	b141      	cbz	r1, d95cc <_ZN6StringC1EPKc+0x22>
   d95ba:	4608      	mov	r0, r1
   d95bc:	9101      	str	r1, [sp, #4]
   d95be:	f001 fc12 	bl	dade6 <strlen>
   d95c2:	9901      	ldr	r1, [sp, #4]
   d95c4:	4602      	mov	r2, r0
   d95c6:	4620      	mov	r0, r4
   d95c8:	f7ff ffd6 	bl	d9578 <_ZN6String4copyEPKcj>
}
   d95cc:	4620      	mov	r0, r4
   d95ce:	b002      	add	sp, #8
   d95d0:	bd10      	pop	{r4, pc}

000d95d2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d95d2:	4288      	cmp	r0, r1
{
   d95d4:	b510      	push	{r4, lr}
   d95d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d95d8:	d005      	beq.n	d95e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d95da:	680b      	ldr	r3, [r1, #0]
   d95dc:	b12b      	cbz	r3, d95ea <_ZN6StringaSERKS_+0x18>
   d95de:	688a      	ldr	r2, [r1, #8]
   d95e0:	4619      	mov	r1, r3
   d95e2:	f7ff ffc9 	bl	d9578 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d95e6:	4620      	mov	r0, r4
   d95e8:	bd10      	pop	{r4, pc}
	else invalidate();
   d95ea:	f7ff ff9a 	bl	d9522 <_ZN6String10invalidateEv>
   d95ee:	e7fa      	b.n	d95e6 <_ZN6StringaSERKS_+0x14>

000d95f0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d95f0:	b510      	push	{r4, lr}
	buffer = NULL;
   d95f2:	2300      	movs	r3, #0
String::String(const String &value)
   d95f4:	4604      	mov	r4, r0
	capacity = 0;
   d95f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d95fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95fc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d95fe:	f7ff ffe8 	bl	d95d2 <_ZN6StringaSERKS_>
}
   d9602:	4620      	mov	r0, r4
   d9604:	bd10      	pop	{r4, pc}

000d9606 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9606:	b513      	push	{r0, r1, r4, lr}
   d9608:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d960a:	b159      	cbz	r1, d9624 <_ZN6StringaSEPKc+0x1e>
   d960c:	4608      	mov	r0, r1
   d960e:	9101      	str	r1, [sp, #4]
   d9610:	f001 fbe9 	bl	dade6 <strlen>
   d9614:	9901      	ldr	r1, [sp, #4]
   d9616:	4602      	mov	r2, r0
   d9618:	4620      	mov	r0, r4
   d961a:	f7ff ffad 	bl	d9578 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d961e:	4620      	mov	r0, r4
   d9620:	b002      	add	sp, #8
   d9622:	bd10      	pop	{r4, pc}
	else invalidate();
   d9624:	f7ff ff7d 	bl	d9522 <_ZN6String10invalidateEv>
   d9628:	e7f9      	b.n	d961e <_ZN6StringaSEPKc+0x18>

000d962a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d962a:	b570      	push	{r4, r5, r6, lr}
   d962c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d962e:	460e      	mov	r6, r1
   d9630:	b909      	cbnz	r1, d9636 <_ZN6String6concatEPKcj+0xc>
   d9632:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9634:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9636:	b16a      	cbz	r2, d9654 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9638:	6884      	ldr	r4, [r0, #8]
   d963a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d963c:	4621      	mov	r1, r4
   d963e:	f7ff ff87 	bl	d9550 <_ZN6String7reserveEj>
   d9642:	2800      	cmp	r0, #0
   d9644:	d0f5      	beq.n	d9632 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9646:	6828      	ldr	r0, [r5, #0]
   d9648:	68ab      	ldr	r3, [r5, #8]
   d964a:	4631      	mov	r1, r6
   d964c:	4418      	add	r0, r3
   d964e:	f001 fba5 	bl	dad9c <strcpy>
	len = newlen;
   d9652:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9654:	2001      	movs	r0, #1
   d9656:	e7ed      	b.n	d9634 <_ZN6String6concatEPKcj+0xa>

000d9658 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9658:	b513      	push	{r0, r1, r4, lr}
   d965a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d965c:	b929      	cbnz	r1, d966a <_ZplRK15StringSumHelperPKc+0x12>
   d965e:	4620      	mov	r0, r4
   d9660:	f7ff ff5f 	bl	d9522 <_ZN6String10invalidateEv>
	return a;
}
   d9664:	4620      	mov	r0, r4
   d9666:	b002      	add	sp, #8
   d9668:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d966a:	4608      	mov	r0, r1
   d966c:	9101      	str	r1, [sp, #4]
   d966e:	f001 fbba 	bl	dade6 <strlen>
   d9672:	9901      	ldr	r1, [sp, #4]
   d9674:	4602      	mov	r2, r0
   d9676:	4620      	mov	r0, r4
   d9678:	f7ff ffd7 	bl	d962a <_ZN6String6concatEPKcj>
   d967c:	2800      	cmp	r0, #0
   d967e:	d0ee      	beq.n	d965e <_ZplRK15StringSumHelperPKc+0x6>
   d9680:	e7f0      	b.n	d9664 <_ZplRK15StringSumHelperPKc+0xc>

000d9682 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9682:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9684:	6882      	ldr	r2, [r0, #8]
   d9686:	b93a      	cbnz	r2, d9698 <_ZNK6String6equalsEPKc+0x16>
   d9688:	b121      	cbz	r1, d9694 <_ZNK6String6equalsEPKc+0x12>
   d968a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d968c:	fab0 f080 	clz	r0, r0
   d9690:	0940      	lsrs	r0, r0, #5
   d9692:	e000      	b.n	d9696 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9694:	2001      	movs	r0, #1
}
   d9696:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9698:	6800      	ldr	r0, [r0, #0]
   d969a:	b909      	cbnz	r1, d96a0 <_ZNK6String6equalsEPKc+0x1e>
   d969c:	7800      	ldrb	r0, [r0, #0]
   d969e:	e7f5      	b.n	d968c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d96a0:	f001 fb72 	bl	dad88 <strcmp>
   d96a4:	e7f2      	b.n	d968c <_ZNK6String6equalsEPKc+0xa>
	...

000d96a8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d96a8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d96aa:	6800      	ldr	r0, [r0, #0]
   d96ac:	b140      	cbz	r0, d96c0 <_ZNK6String7toFloatEv+0x18>
   d96ae:	f001 faef 	bl	dac90 <atof>
   d96b2:	ec51 0b10 	vmov	r0, r1, d0
   d96b6:	f001 fa57 	bl	dab68 <__aeabi_d2f>
   d96ba:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d96be:	bd08      	pop	{r3, pc}
	return 0;
   d96c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d96c8 <_ZNK6String7toFloatEv+0x20>
   d96c4:	e7fb      	b.n	d96be <_ZNK6String7toFloatEv+0x16>
   d96c6:	bf00      	nop
   d96c8:	00000000 	.word	0x00000000

000d96cc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d96cc:	b40e      	push	{r1, r2, r3}
   d96ce:	b570      	push	{r4, r5, r6, lr}
   d96d0:	b087      	sub	sp, #28
   d96d2:	ad0b      	add	r5, sp, #44	; 0x2c
   d96d4:	4604      	mov	r4, r0
   d96d6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d96da:	9201      	str	r2, [sp, #4]
   d96dc:	462b      	mov	r3, r5
   d96de:	2105      	movs	r1, #5
   d96e0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d96e2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d96e4:	f7fe ff08 	bl	d84f8 <vsnprintf>
    va_end(marker);

    String result;
   d96e8:	490b      	ldr	r1, [pc, #44]	; (d9718 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d96ea:	4606      	mov	r6, r0
    String result;
   d96ec:	4620      	mov	r0, r4
   d96ee:	f7ff ff5c 	bl	d95aa <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d96f2:	4631      	mov	r1, r6
   d96f4:	4620      	mov	r0, r4
   d96f6:	f7ff ff2b 	bl	d9550 <_ZN6String7reserveEj>
    if (result.buffer) {
   d96fa:	6820      	ldr	r0, [r4, #0]
   d96fc:	b130      	cbz	r0, d970c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d96fe:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d9700:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9702:	462b      	mov	r3, r5
   d9704:	1c71      	adds	r1, r6, #1
   d9706:	f7fe fef7 	bl	d84f8 <vsnprintf>
        va_end(marker);
        result.len = n;
   d970a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d970c:	4620      	mov	r0, r4
   d970e:	b007      	add	sp, #28
   d9710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9714:	b003      	add	sp, #12
   d9716:	4770      	bx	lr
   d9718:	000ddbac 	.word	0x000ddbac

000d971c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d971c:	b507      	push	{r0, r1, r2, lr}
   d971e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9720:	2100      	movs	r1, #0
{
   d9722:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9724:	9100      	str	r1, [sp, #0]
   d9726:	2001      	movs	r0, #1
   d9728:	218c      	movs	r1, #140	; 0x8c
   d972a:	f7fe fdeb 	bl	d8304 <system_reset>
}
   d972e:	b003      	add	sp, #12
   d9730:	f85d fb04 	ldr.w	pc, [sp], #4

000d9734 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d9734:	4601      	mov	r1, r0
    reset(0, flags);
   d9736:	2000      	movs	r0, #0
   d9738:	f7ff bff0 	b.w	d971c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d973c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d973c:	2000      	movs	r0, #0
   d973e:	f7ff bff9 	b.w	d9734 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9744 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9744:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9746:	4b09      	ldr	r3, [pc, #36]	; (d976c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9748:	4c09      	ldr	r4, [pc, #36]	; (d9770 <_GLOBAL__sub_I_System+0x2c>)
   d974a:	2202      	movs	r2, #2
   d974c:	2000      	movs	r0, #0
   d974e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9750:	4b08      	ldr	r3, [pc, #32]	; (d9774 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9752:	6020      	str	r0, [r4, #0]
   d9754:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9756:	71a0      	strb	r0, [r4, #6]
   d9758:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d975a:	f7fe fd87 	bl	d826c <set_system_mode>
SystemClass System;
   d975e:	4620      	mov	r0, r4
   d9760:	4a05      	ldr	r2, [pc, #20]	; (d9778 <_GLOBAL__sub_I_System+0x34>)
   d9762:	4906      	ldr	r1, [pc, #24]	; (d977c <_GLOBAL__sub_I_System+0x38>)
   d9764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9768:	f000 bc40 	b.w	d9fec <__aeabi_atexit>
   d976c:	2003e63c 	.word	0x2003e63c
   d9770:	2003e630 	.word	0x2003e630
   d9774:	ffff0000 	.word	0xffff0000
   d9778:	2003dab8 	.word	0x2003dab8
   d977c:	000d4267 	.word	0x000d4267

000d9780 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9784:	4a15      	ldr	r2, [pc, #84]	; (d97dc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9786:	f8df 8060 	ldr.w	r8, [pc, #96]	; d97e8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d978a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d978e:	18c0      	adds	r0, r0, r3
   d9790:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9794:	4a12      	ldr	r2, [pc, #72]	; (d97e0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9796:	e9d2 3200 	ldrd	r3, r2, [r2]
   d979a:	18c6      	adds	r6, r0, r3
   d979c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d97a0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d97a4:	42bb      	cmp	r3, r7
   d97a6:	bf08      	it	eq
   d97a8:	42b2      	cmpeq	r2, r6
{
   d97aa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d97ac:	d013      	beq.n	d97d6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d97ae:	a903      	add	r1, sp, #12
   d97b0:	4668      	mov	r0, sp
   d97b2:	e9cd 6700 	strd	r6, r7, [sp]
   d97b6:	f7fe fecf 	bl	d8558 <localtime_r>
	calendar_time.tm_year += 1900;
   d97ba:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97bc:	4d09      	ldr	r5, [pc, #36]	; (d97e4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d97be:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97c2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d97c4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d97c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d97ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d97cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d97ce:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97d2:	6823      	ldr	r3, [r4, #0]
   d97d4:	602b      	str	r3, [r5, #0]
    }
}
   d97d6:	b00c      	add	sp, #48	; 0x30
   d97d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d97dc:	2003e678 	.word	0x2003e678
   d97e0:	2003e670 	.word	0x2003e670
   d97e4:	2003e648 	.word	0x2003e648
   d97e8:	2003e680 	.word	0x2003e680

000d97ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d97ec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d97ee:	2000      	movs	r0, #0
   d97f0:	f7fe fdda 	bl	d83a8 <spark_sync_time_pending>
   d97f4:	b128      	cbz	r0, d9802 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d97f6:	f7fe fdaf 	bl	d8358 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d97fa:	f080 0001 	eor.w	r0, r0, #1
   d97fe:	b2c0      	uxtb	r0, r0
    }
   d9800:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9802:	2001      	movs	r0, #1
   d9804:	e7fc      	b.n	d9800 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d9806 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9806:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9808:	4602      	mov	r2, r0
   d980a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d980c:	4668      	mov	r0, sp
    struct timeval tv = {
   d980e:	2100      	movs	r1, #0
    };
   d9810:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d9814:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9818:	f7fe fbc0 	bl	d7f9c <hal_rtc_set_time>
   d981c:	4602      	mov	r2, r0
   d981e:	b910      	cbnz	r0, d9826 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9820:	4601      	mov	r1, r0
   d9822:	f7fe fd53 	bl	d82cc <system_notify_time_changed>
    }
}
   d9826:	b005      	add	sp, #20
   d9828:	f85d fb04 	ldr.w	pc, [sp], #4

000d982c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d982c:	b530      	push	{r4, r5, lr}
   d982e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9830:	4818      	ldr	r0, [pc, #96]	; (d9894 <_ZN9TimeClass7timeStrEx+0x68>)
   d9832:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9836:	1852      	adds	r2, r2, r1
   d9838:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d983c:	4816      	ldr	r0, [pc, #88]	; (d9898 <_ZN9TimeClass7timeStrEx+0x6c>)
   d983e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9842:	1852      	adds	r2, r2, r1
{
   d9844:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9846:	eb40 0303 	adc.w	r3, r0, r3
   d984a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d984e:	2224      	movs	r2, #36	; 0x24
   d9850:	eb0d 0002 	add.w	r0, sp, r2
   d9854:	2100      	movs	r1, #0
   d9856:	f001 fa6b 	bl	dad30 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d985a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d985c:	a909      	add	r1, sp, #36	; 0x24
   d985e:	4668      	mov	r0, sp
   d9860:	f7fe fe7a 	bl	d8558 <localtime_r>
    char ascstr[26] = {};
   d9864:	2216      	movs	r2, #22
   d9866:	4629      	mov	r1, r5
   d9868:	a803      	add	r0, sp, #12
   d986a:	9502      	str	r5, [sp, #8]
   d986c:	f001 fa60 	bl	dad30 <memset>
    asctime_r(&calendar_time, ascstr);
   d9870:	a902      	add	r1, sp, #8
   d9872:	a809      	add	r0, sp, #36	; 0x24
   d9874:	f001 f9e6 	bl	dac44 <asctime_r>
    int len = strlen(ascstr);
   d9878:	a802      	add	r0, sp, #8
   d987a:	f001 fab4 	bl	dade6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d987e:	ab12      	add	r3, sp, #72	; 0x48
   d9880:	4418      	add	r0, r3
    return String(ascstr);
   d9882:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9884:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9888:	4620      	mov	r0, r4
   d988a:	f7ff fe8e 	bl	d95aa <_ZN6StringC1EPKc>
}
   d988e:	4620      	mov	r0, r4
   d9890:	b013      	add	sp, #76	; 0x4c
   d9892:	bd30      	pop	{r4, r5, pc}
   d9894:	2003e678 	.word	0x2003e678
   d9898:	2003e670 	.word	0x2003e670

000d989c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98a0:	b0a5      	sub	sp, #148	; 0x94
   d98a2:	4607      	mov	r7, r0
   d98a4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d98a6:	a814      	add	r0, sp, #80	; 0x50
{
   d98a8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d98aa:	223f      	movs	r2, #63	; 0x3f
{
   d98ac:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d98ae:	f001 fab4 	bl	dae1a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d98b2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d98b4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d98b6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d98ba:	f001 fa94 	bl	dade6 <strlen>
   d98be:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d98c0:	bb5d      	cbnz	r5, d991a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d98c2:	492a      	ldr	r1, [pc, #168]	; (d996c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d98c4:	a803      	add	r0, sp, #12
   d98c6:	f001 fa69 	bl	dad9c <strcpy>
   d98ca:	ae14      	add	r6, sp, #80	; 0x50
{
   d98cc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d98ce:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d98d2:	45ab      	cmp	fp, r5
   d98d4:	d936      	bls.n	d9944 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d98d6:	46b1      	mov	r9, r6
   d98d8:	f105 0a01 	add.w	sl, r5, #1
   d98dc:	f819 3b01 	ldrb.w	r3, [r9], #1
   d98e0:	2b25      	cmp	r3, #37	; 0x25
   d98e2:	d117      	bne.n	d9914 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d98e4:	7873      	ldrb	r3, [r6, #1]
   d98e6:	2b7a      	cmp	r3, #122	; 0x7a
   d98e8:	d114      	bne.n	d9914 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d98ea:	a803      	add	r0, sp, #12
   d98ec:	f001 fa7b 	bl	dade6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98f0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d98f2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98f4:	1828      	adds	r0, r5, r0
   d98f6:	4418      	add	r0, r3
   d98f8:	ebab 0205 	sub.w	r2, fp, r5
   d98fc:	1cb1      	adds	r1, r6, #2
   d98fe:	f001 f9ef 	bl	dace0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9902:	4622      	mov	r2, r4
   d9904:	a903      	add	r1, sp, #12
   d9906:	4630      	mov	r0, r6
   d9908:	f001 f9ea 	bl	dace0 <memcpy>
            len = strlen(format_str);
   d990c:	a814      	add	r0, sp, #80	; 0x50
   d990e:	f001 fa6a 	bl	dade6 <strlen>
   d9912:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9914:	464e      	mov	r6, r9
   d9916:	4655      	mov	r5, sl
   d9918:	e7d9      	b.n	d98ce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d991a:	213c      	movs	r1, #60	; 0x3c
   d991c:	fb95 f3f1 	sdiv	r3, r5, r1
   d9920:	2b00      	cmp	r3, #0
   d9922:	bfb8      	it	lt
   d9924:	425b      	neglt	r3, r3
   d9926:	fbb3 f2f1 	udiv	r2, r3, r1
   d992a:	fb01 3312 	mls	r3, r1, r2, r3
   d992e:	9300      	str	r3, [sp, #0]
   d9930:	4a0f      	ldr	r2, [pc, #60]	; (d9970 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9932:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9936:	2110      	movs	r1, #16
   d9938:	a803      	add	r0, sp, #12
   d993a:	fb95 f3f3 	sdiv	r3, r5, r3
   d993e:	f7fe fdd3 	bl	d84e8 <snprintf>
   d9942:	e7c2      	b.n	d98ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9944:	2100      	movs	r1, #0
   d9946:	222e      	movs	r2, #46	; 0x2e
   d9948:	a808      	add	r0, sp, #32
   d994a:	9107      	str	r1, [sp, #28]
   d994c:	f001 f9f0 	bl	dad30 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9950:	4643      	mov	r3, r8
   d9952:	aa14      	add	r2, sp, #80	; 0x50
   d9954:	2132      	movs	r1, #50	; 0x32
   d9956:	a807      	add	r0, sp, #28
   d9958:	f7fe fdf6 	bl	d8548 <strftime>
    return String(buf);
   d995c:	a907      	add	r1, sp, #28
   d995e:	4638      	mov	r0, r7
   d9960:	f7ff fe23 	bl	d95aa <_ZN6StringC1EPKc>
}
   d9964:	4638      	mov	r0, r7
   d9966:	b025      	add	sp, #148	; 0x94
   d9968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d996c:	000ddabc 	.word	0x000ddabc
   d9970:	000ddabe 	.word	0x000ddabe

000d9974 <_ZN9TimeClass6formatExPKc>:
{
   d9974:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9976:	b08d      	sub	sp, #52	; 0x34
   d9978:	e9cd 2300 	strd	r2, r3, [sp]
   d997c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d997e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9980:	b915      	cbnz	r5, d9988 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9982:	4b19      	ldr	r3, [pc, #100]	; (d99e8 <_ZN9TimeClass6formatExPKc+0x74>)
   d9984:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9986:	b12d      	cbz	r5, d9994 <_ZN9TimeClass6formatExPKc+0x20>
   d9988:	4b18      	ldr	r3, [pc, #96]	; (d99ec <_ZN9TimeClass6formatExPKc+0x78>)
   d998a:	4628      	mov	r0, r5
   d998c:	6819      	ldr	r1, [r3, #0]
   d998e:	f001 f9fb 	bl	dad88 <strcmp>
   d9992:	b938      	cbnz	r0, d99a4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9994:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9998:	4620      	mov	r0, r4
   d999a:	f7ff ff47 	bl	d982c <_ZN9TimeClass7timeStrEx>
}
   d999e:	4620      	mov	r0, r4
   d99a0:	b00d      	add	sp, #52	; 0x34
   d99a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d99a4:	4e12      	ldr	r6, [pc, #72]	; (d99f0 <_ZN9TimeClass6formatExPKc+0x7c>)
   d99a6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d99a8:	4f12      	ldr	r7, [pc, #72]	; (d99f4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d99aa:	e9d6 3200 	ldrd	r3, r2, [r6]
   d99ae:	185b      	adds	r3, r3, r1
   d99b0:	9901      	ldr	r1, [sp, #4]
   d99b2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d99b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d99ba:	181b      	adds	r3, r3, r0
   d99bc:	eb41 0202 	adc.w	r2, r1, r2
   d99c0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d99c4:	2100      	movs	r1, #0
   d99c6:	2224      	movs	r2, #36	; 0x24
   d99c8:	a803      	add	r0, sp, #12
   d99ca:	f001 f9b1 	bl	dad30 <memset>
    localtime_r(&t, &calendar_time);
   d99ce:	a903      	add	r1, sp, #12
   d99d0:	4668      	mov	r0, sp
   d99d2:	f7fe fdc1 	bl	d8558 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d99d6:	6832      	ldr	r2, [r6, #0]
   d99d8:	683b      	ldr	r3, [r7, #0]
   d99da:	a903      	add	r1, sp, #12
   d99dc:	4413      	add	r3, r2
   d99de:	4620      	mov	r0, r4
   d99e0:	462a      	mov	r2, r5
   d99e2:	f7ff ff5b 	bl	d989c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d99e6:	e7da      	b.n	d999e <_ZN9TimeClass6formatExPKc+0x2a>
   d99e8:	2003e644 	.word	0x2003e644
   d99ec:	2003d8d8 	.word	0x2003d8d8
   d99f0:	2003e678 	.word	0x2003e678
   d99f4:	2003e670 	.word	0x2003e670

000d99f8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d99f8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d99fa:	2000      	movs	r0, #0
   d99fc:	f7fe fab6 	bl	d7f6c <hal_rtc_time_is_valid>
    if (rtcstate)
   d9a00:	4604      	mov	r4, r0
   d9a02:	b9a0      	cbnz	r0, d9a2e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9a04:	f7fe fc2a 	bl	d825c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9a08:	2801      	cmp	r0, #1
   d9a0a:	d110      	bne.n	d9a2e <_ZN9TimeClass7isValidEv+0x36>
   d9a0c:	4620      	mov	r0, r4
   d9a0e:	f7fe fc55 	bl	d82bc <system_thread_get_state>
   d9a12:	b960      	cbnz	r0, d9a2e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9a14:	f7ff feea 	bl	d97ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9a18:	b910      	cbnz	r0, d9a20 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9a1a:	f7fe fc8d 	bl	d8338 <spark_process>
        while (_while() && !_condition()) {
   d9a1e:	e7f9      	b.n	d9a14 <_ZN9TimeClass7isValidEv+0x1c>
   d9a20:	f7ff fee4 	bl	d97ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9a28:	2000      	movs	r0, #0
   d9a2a:	f7fe ba9f 	b.w	d7f6c <hal_rtc_time_is_valid>
}
   d9a2e:	4620      	mov	r0, r4
   d9a30:	bd10      	pop	{r4, pc}

000d9a32 <_ZN9TimeClass3nowEv>:
{
   d9a32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9a34:	f7ff ffe0 	bl	d99f8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9a38:	2210      	movs	r2, #16
   d9a3a:	2100      	movs	r1, #0
   d9a3c:	4668      	mov	r0, sp
   d9a3e:	f001 f977 	bl	dad30 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9a42:	2100      	movs	r1, #0
   d9a44:	4668      	mov	r0, sp
   d9a46:	f7fe faa1 	bl	d7f8c <hal_rtc_get_time>
}
   d9a4a:	9800      	ldr	r0, [sp, #0]
   d9a4c:	b005      	add	sp, #20
   d9a4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9a54 <_ZN9TimeClass4hourEv>:
{
   d9a54:	b508      	push	{r3, lr}
	return hour(now());
   d9a56:	f7ff ffec 	bl	d9a32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a5a:	17c1      	asrs	r1, r0, #31
   d9a5c:	f7ff fe90 	bl	d9780 <_ZL22Refresh_UnixTime_Cachex>
}
   d9a60:	4b01      	ldr	r3, [pc, #4]	; (d9a68 <_ZN9TimeClass4hourEv+0x14>)
   d9a62:	6898      	ldr	r0, [r3, #8]
   d9a64:	bd08      	pop	{r3, pc}
   d9a66:	bf00      	nop
   d9a68:	2003e648 	.word	0x2003e648

000d9a6c <_ZN9TimeClass4yearEv>:
{
   d9a6c:	b508      	push	{r3, lr}
	return year(now());
   d9a6e:	f7ff ffe0 	bl	d9a32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a72:	17c1      	asrs	r1, r0, #31
   d9a74:	f7ff fe84 	bl	d9780 <_ZL22Refresh_UnixTime_Cachex>
}
   d9a78:	4b01      	ldr	r3, [pc, #4]	; (d9a80 <_ZN9TimeClass4yearEv+0x14>)
   d9a7a:	6958      	ldr	r0, [r3, #20]
   d9a7c:	bd08      	pop	{r3, pc}
   d9a7e:	bf00      	nop
   d9a80:	2003e648 	.word	0x2003e648

000d9a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9a84:	4b02      	ldr	r3, [pc, #8]	; (d9a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9a86:	681a      	ldr	r2, [r3, #0]
   d9a88:	4b02      	ldr	r3, [pc, #8]	; (d9a94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9a8a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9a8c:	4770      	bx	lr
   d9a8e:	bf00      	nop
   d9a90:	2003d8d8 	.word	0x2003d8d8
   d9a94:	2003e644 	.word	0x2003e644

000d9a98 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9a98:	4770      	bx	lr

000d9a9a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9a9a:	7441      	strb	r1, [r0, #17]
}
   d9a9c:	4770      	bx	lr

000d9a9e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9a9e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9aa0:	7c00      	ldrb	r0, [r0, #16]
   d9aa2:	f7fe fb83 	bl	d81ac <hal_usart_available_data_for_write>
}
   d9aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9aaa:	bd08      	pop	{r3, pc}

000d9aac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9aac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9aae:	7c00      	ldrb	r0, [r0, #16]
   d9ab0:	f7fe fb54 	bl	d815c <hal_usart_available>
}
   d9ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ab8:	bd08      	pop	{r3, pc}

000d9aba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9aba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9abc:	7c00      	ldrb	r0, [r0, #16]
   d9abe:	f7fe fb5d 	bl	d817c <hal_usart_peek>
}
   d9ac2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ac6:	bd08      	pop	{r3, pc}

000d9ac8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9ac8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9aca:	7c00      	ldrb	r0, [r0, #16]
   d9acc:	f7fe fb4e 	bl	d816c <hal_usart_read>
}
   d9ad0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ad4:	bd08      	pop	{r3, pc}

000d9ad6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9ad6:	7c00      	ldrb	r0, [r0, #16]
   d9ad8:	f7fe bb58 	b.w	d818c <hal_usart_flush>

000d9adc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9ade:	7c45      	ldrb	r5, [r0, #17]
{
   d9ae0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9ae2:	b12d      	cbz	r5, d9af0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9ae4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9ae6:	b003      	add	sp, #12
   d9ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9aec:	f7fe bb2e 	b.w	d814c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9af0:	7c00      	ldrb	r0, [r0, #16]
   d9af2:	9101      	str	r1, [sp, #4]
   d9af4:	f7fe fb5a 	bl	d81ac <hal_usart_available_data_for_write>
   d9af8:	2800      	cmp	r0, #0
   d9afa:	9901      	ldr	r1, [sp, #4]
   d9afc:	dcf2      	bgt.n	d9ae4 <_ZN11USARTSerial5writeEh+0x8>
}
   d9afe:	4628      	mov	r0, r5
   d9b00:	b003      	add	sp, #12
   d9b02:	bd30      	pop	{r4, r5, pc}

000d9b04 <_ZN11USARTSerialD0Ev>:
   d9b04:	b510      	push	{r4, lr}
   d9b06:	2114      	movs	r1, #20
   d9b08:	4604      	mov	r4, r0
   d9b0a:	f000 fa74 	bl	d9ff6 <_ZdlPvj>
   d9b0e:	4620      	mov	r0, r4
   d9b10:	bd10      	pop	{r4, pc}
	...

000d9b14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9b14:	b510      	push	{r4, lr}
   d9b16:	f04f 0c00 	mov.w	ip, #0
   d9b1a:	4604      	mov	r4, r0
   d9b1c:	4608      	mov	r0, r1
   d9b1e:	4611      	mov	r1, r2
   d9b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9b24:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9b28:	4a04      	ldr	r2, [pc, #16]	; (d9b3c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9b2a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9b2c:	2201      	movs	r2, #1
  _serial = serial;
   d9b2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9b30:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9b32:	461a      	mov	r2, r3
   d9b34:	f7fe fb02 	bl	d813c <hal_usart_init>
}
   d9b38:	4620      	mov	r0, r4
   d9b3a:	bd10      	pop	{r4, pc}
   d9b3c:	000ddaf0 	.word	0x000ddaf0

000d9b40 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9b40:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9b42:	4c0e      	ldr	r4, [pc, #56]	; (d9b7c <_Z22__fetch_global_Serial1v+0x3c>)
   d9b44:	7821      	ldrb	r1, [r4, #0]
   d9b46:	f3bf 8f5b 	dmb	ish
   d9b4a:	f011 0101 	ands.w	r1, r1, #1
   d9b4e:	d112      	bne.n	d9b76 <_Z22__fetch_global_Serial1v+0x36>
   d9b50:	4620      	mov	r0, r4
   d9b52:	9101      	str	r1, [sp, #4]
   d9b54:	f7fa fab2 	bl	d40bc <__cxa_guard_acquire>
   d9b58:	9901      	ldr	r1, [sp, #4]
   d9b5a:	b160      	cbz	r0, d9b76 <_Z22__fetch_global_Serial1v+0x36>
   d9b5c:	4a08      	ldr	r2, [pc, #32]	; (d9b80 <_Z22__fetch_global_Serial1v+0x40>)
   d9b5e:	4b09      	ldr	r3, [pc, #36]	; (d9b84 <_Z22__fetch_global_Serial1v+0x44>)
   d9b60:	4809      	ldr	r0, [pc, #36]	; (d9b88 <_Z22__fetch_global_Serial1v+0x48>)
   d9b62:	f7ff ffd7 	bl	d9b14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9b66:	4620      	mov	r0, r4
   d9b68:	f7fa faad 	bl	d40c6 <__cxa_guard_release>
   d9b6c:	4a07      	ldr	r2, [pc, #28]	; (d9b8c <_Z22__fetch_global_Serial1v+0x4c>)
   d9b6e:	4908      	ldr	r1, [pc, #32]	; (d9b90 <_Z22__fetch_global_Serial1v+0x50>)
   d9b70:	4805      	ldr	r0, [pc, #20]	; (d9b88 <_Z22__fetch_global_Serial1v+0x48>)
   d9b72:	f000 fa3b 	bl	d9fec <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9b76:	4804      	ldr	r0, [pc, #16]	; (d9b88 <_Z22__fetch_global_Serial1v+0x48>)
   d9b78:	b002      	add	sp, #8
   d9b7a:	bd10      	pop	{r4, pc}
   d9b7c:	2003e688 	.word	0x2003e688
   d9b80:	2003e68c 	.word	0x2003e68c
   d9b84:	2003e710 	.word	0x2003e710
   d9b88:	2003e794 	.word	0x2003e794
   d9b8c:	2003dab8 	.word	0x2003dab8
   d9b90:	000d9a99 	.word	0x000d9a99

000d9b94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9b94:	7441      	strb	r1, [r0, #17]
}
   d9b96:	4770      	bx	lr

000d9b98 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9b98:	4770      	bx	lr

000d9b9a <_ZN9USBSerial4readEv>:
{
   d9b9a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9b9c:	2100      	movs	r1, #0
   d9b9e:	7c00      	ldrb	r0, [r0, #16]
   d9ba0:	f7fe fb24 	bl	d81ec <HAL_USB_USART_Receive_Data>
}
   d9ba4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ba8:	bd08      	pop	{r3, pc}

000d9baa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9baa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9bac:	2101      	movs	r1, #1
   d9bae:	7c00      	ldrb	r0, [r0, #16]
   d9bb0:	f7fe fb1c 	bl	d81ec <HAL_USB_USART_Receive_Data>
}
   d9bb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9bb8:	bd08      	pop	{r3, pc}

000d9bba <_ZN9USBSerial17availableForWriteEv>:
{
   d9bba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9bbc:	7c00      	ldrb	r0, [r0, #16]
   d9bbe:	f7fe fb0d 	bl	d81dc <HAL_USB_USART_Available_Data_For_Write>
}
   d9bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9bc6:	bd08      	pop	{r3, pc}

000d9bc8 <_ZN9USBSerial9availableEv>:
{
   d9bc8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9bca:	7c00      	ldrb	r0, [r0, #16]
   d9bcc:	f7fe fafe 	bl	d81cc <HAL_USB_USART_Available_Data>
}
   d9bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9bd4:	bd08      	pop	{r3, pc}

000d9bd6 <_ZN9USBSerial5writeEh>:
{
   d9bd6:	b513      	push	{r0, r1, r4, lr}
   d9bd8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9bda:	7c00      	ldrb	r0, [r0, #16]
{
   d9bdc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9bde:	f7fe fafd 	bl	d81dc <HAL_USB_USART_Available_Data_For_Write>
   d9be2:	2800      	cmp	r0, #0
   d9be4:	9901      	ldr	r1, [sp, #4]
   d9be6:	dc01      	bgt.n	d9bec <_ZN9USBSerial5writeEh+0x16>
   d9be8:	7c60      	ldrb	r0, [r4, #17]
   d9bea:	b120      	cbz	r0, d9bf6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9bec:	7c20      	ldrb	r0, [r4, #16]
   d9bee:	f7fe fb05 	bl	d81fc <HAL_USB_USART_Send_Data>
   d9bf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9bf6:	b002      	add	sp, #8
   d9bf8:	bd10      	pop	{r4, pc}

000d9bfa <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9bfa:	7c00      	ldrb	r0, [r0, #16]
   d9bfc:	f7fe bb06 	b.w	d820c <HAL_USB_USART_Flush_Data>

000d9c00 <_ZN9USBSerialD0Ev>:
   d9c00:	b510      	push	{r4, lr}
   d9c02:	2114      	movs	r1, #20
   d9c04:	4604      	mov	r4, r0
   d9c06:	f000 f9f6 	bl	d9ff6 <_ZdlPvj>
   d9c0a:	4620      	mov	r0, r4
   d9c0c:	bd10      	pop	{r4, pc}
	...

000d9c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9c10:	b510      	push	{r4, lr}
   d9c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9c16:	4604      	mov	r4, r0
   d9c18:	4608      	mov	r0, r1
   d9c1a:	2100      	movs	r1, #0
   d9c1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9c20:	4b04      	ldr	r3, [pc, #16]	; (d9c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9c22:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9c24:	2301      	movs	r3, #1
  _serial = serial;
   d9c26:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9c28:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9c2a:	4611      	mov	r1, r2
   d9c2c:	f7fe fac6 	bl	d81bc <HAL_USB_USART_Init>
}
   d9c30:	4620      	mov	r0, r4
   d9c32:	bd10      	pop	{r4, pc}
   d9c34:	000ddb20 	.word	0x000ddb20

000d9c38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9c38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9c3a:	2214      	movs	r2, #20
{
   d9c3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9c3e:	2100      	movs	r1, #0
   d9c40:	f001 f876 	bl	dad30 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9c44:	4620      	mov	r0, r4
   d9c46:	bd10      	pop	{r4, pc}

000d9c48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9c48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9c4a:	4c10      	ldr	r4, [pc, #64]	; (d9c8c <_Z16_fetch_usbserialv+0x44>)
{
   d9c4c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9c4e:	a803      	add	r0, sp, #12
   d9c50:	f7ff fff2 	bl	d9c38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9c54:	7821      	ldrb	r1, [r4, #0]
   d9c56:	f3bf 8f5b 	dmb	ish
   d9c5a:	f011 0101 	ands.w	r1, r1, #1
   d9c5e:	d111      	bne.n	d9c84 <_Z16_fetch_usbserialv+0x3c>
   d9c60:	4620      	mov	r0, r4
   d9c62:	9101      	str	r1, [sp, #4]
   d9c64:	f7fa fa2a 	bl	d40bc <__cxa_guard_acquire>
   d9c68:	9901      	ldr	r1, [sp, #4]
   d9c6a:	b158      	cbz	r0, d9c84 <_Z16_fetch_usbserialv+0x3c>
   d9c6c:	aa03      	add	r2, sp, #12
   d9c6e:	4808      	ldr	r0, [pc, #32]	; (d9c90 <_Z16_fetch_usbserialv+0x48>)
   d9c70:	f7ff ffce 	bl	d9c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9c74:	4620      	mov	r0, r4
   d9c76:	f7fa fa26 	bl	d40c6 <__cxa_guard_release>
   d9c7a:	4a06      	ldr	r2, [pc, #24]	; (d9c94 <_Z16_fetch_usbserialv+0x4c>)
   d9c7c:	4906      	ldr	r1, [pc, #24]	; (d9c98 <_Z16_fetch_usbserialv+0x50>)
   d9c7e:	4804      	ldr	r0, [pc, #16]	; (d9c90 <_Z16_fetch_usbserialv+0x48>)
   d9c80:	f000 f9b4 	bl	d9fec <__aeabi_atexit>
	return _usbserial;
}
   d9c84:	4802      	ldr	r0, [pc, #8]	; (d9c90 <_Z16_fetch_usbserialv+0x48>)
   d9c86:	b008      	add	sp, #32
   d9c88:	bd10      	pop	{r4, pc}
   d9c8a:	bf00      	nop
   d9c8c:	2003e7a8 	.word	0x2003e7a8
   d9c90:	2003e7ac 	.word	0x2003e7ac
   d9c94:	2003dab8 	.word	0x2003dab8
   d9c98:	000d9b99 	.word	0x000d9b99

000d9c9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d9c9c:	2200      	movs	r2, #0
   d9c9e:	6840      	ldr	r0, [r0, #4]
   d9ca0:	4611      	mov	r1, r2
   d9ca2:	f7fe bbb9 	b.w	d8418 <network_ready>

000d9ca6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9ca6:	2200      	movs	r2, #0
   d9ca8:	6840      	ldr	r0, [r0, #4]
   d9caa:	4611      	mov	r1, r2
   d9cac:	f7fe bbd4 	b.w	d8458 <network_listening>

000d9cb0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9cb0:	2200      	movs	r2, #0
   d9cb2:	6840      	ldr	r0, [r0, #4]
   d9cb4:	4611      	mov	r1, r2
   d9cb6:	f7fe bbdf 	b.w	d8478 <network_get_listen_timeout>

000d9cba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9cba:	6840      	ldr	r0, [r0, #4]
   d9cbc:	2200      	movs	r2, #0
   d9cbe:	f7fe bbd3 	b.w	d8468 <network_set_listen_timeout>

000d9cc2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9cc2:	6840      	ldr	r0, [r0, #4]
   d9cc4:	2200      	movs	r2, #0
   d9cc6:	f081 0101 	eor.w	r1, r1, #1
   d9cca:	f7fe bbbd 	b.w	d8448 <network_listen>

000d9cce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9cce:	2300      	movs	r3, #0
   d9cd0:	6840      	ldr	r0, [r0, #4]
   d9cd2:	461a      	mov	r2, r3
   d9cd4:	4619      	mov	r1, r3
   d9cd6:	f7fe bbaf 	b.w	d8438 <network_off>

000d9cda <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9cda:	2300      	movs	r3, #0
   d9cdc:	6840      	ldr	r0, [r0, #4]
   d9cde:	461a      	mov	r2, r3
   d9ce0:	4619      	mov	r1, r3
   d9ce2:	f7fe bba1 	b.w	d8428 <network_on>

000d9ce6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9ce6:	2200      	movs	r2, #0
   d9ce8:	6840      	ldr	r0, [r0, #4]
   d9cea:	4611      	mov	r1, r2
   d9cec:	f7fe bb84 	b.w	d83f8 <network_connecting>

000d9cf0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9cf0:	6840      	ldr	r0, [r0, #4]
   d9cf2:	2200      	movs	r2, #0
   d9cf4:	2102      	movs	r1, #2
   d9cf6:	f7fe bb87 	b.w	d8408 <network_disconnect>

000d9cfa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9cfa:	2300      	movs	r3, #0
   d9cfc:	6840      	ldr	r0, [r0, #4]
   d9cfe:	461a      	mov	r2, r3
   d9d00:	f7fe bb72 	b.w	d83e8 <network_connect>

000d9d04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d9d04:	4b02      	ldr	r3, [pc, #8]	; (d9d10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d9d06:	2204      	movs	r2, #4
   d9d08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d9d0a:	4a02      	ldr	r2, [pc, #8]	; (d9d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d9d0c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d9d0e:	4770      	bx	lr
   d9d10:	2003e7c0 	.word	0x2003e7c0
   d9d14:	000ddb50 	.word	0x000ddb50

000d9d18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9d18:	4b01      	ldr	r3, [pc, #4]	; (d9d20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9d1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9d1c:	4770      	bx	lr
   d9d1e:	bf00      	nop
   d9d20:	2003d8e0 	.word	0x2003d8e0

000d9d24 <serialEventRun>:
{
   d9d24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9d26:	4b0b      	ldr	r3, [pc, #44]	; (d9d54 <serialEventRun+0x30>)
   d9d28:	b143      	cbz	r3, d9d3c <serialEventRun+0x18>
   d9d2a:	f7ff ff8d 	bl	d9c48 <_Z16_fetch_usbserialv>
   d9d2e:	6803      	ldr	r3, [r0, #0]
   d9d30:	691b      	ldr	r3, [r3, #16]
   d9d32:	4798      	blx	r3
   d9d34:	2800      	cmp	r0, #0
   d9d36:	dd01      	ble.n	d9d3c <serialEventRun+0x18>
        serialEvent();
   d9d38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9d3c:	4b06      	ldr	r3, [pc, #24]	; (d9d58 <serialEventRun+0x34>)
   d9d3e:	b143      	cbz	r3, d9d52 <serialEventRun+0x2e>
   d9d40:	f7ff fefe 	bl	d9b40 <_Z22__fetch_global_Serial1v>
   d9d44:	6803      	ldr	r3, [r0, #0]
   d9d46:	691b      	ldr	r3, [r3, #16]
   d9d48:	4798      	blx	r3
   d9d4a:	2800      	cmp	r0, #0
   d9d4c:	dd01      	ble.n	d9d52 <serialEventRun+0x2e>
        serialEvent1();
   d9d4e:	f3af 8000 	nop.w
}
   d9d52:	bd08      	pop	{r3, pc}
	...

000d9d5c <_post_loop>:
{
   d9d5c:	b508      	push	{r3, lr}
	serialEventRun();
   d9d5e:	f7ff ffe1 	bl	d9d24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9d62:	f7fe f8fb 	bl	d7f5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9d66:	4b01      	ldr	r3, [pc, #4]	; (d9d6c <_post_loop+0x10>)
   d9d68:	6018      	str	r0, [r3, #0]
}
   d9d6a:	bd08      	pop	{r3, pc}
   d9d6c:	2003e7dc 	.word	0x2003e7dc

000d9d70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9d70:	4802      	ldr	r0, [pc, #8]	; (d9d7c <_Z33system_initialize_user_backup_ramv+0xc>)
   d9d72:	4a03      	ldr	r2, [pc, #12]	; (d9d80 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9d74:	4903      	ldr	r1, [pc, #12]	; (d9d84 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9d76:	1a12      	subs	r2, r2, r0
   d9d78:	f000 bfb2 	b.w	dace0 <memcpy>
   d9d7c:	2003f400 	.word	0x2003f400
   d9d80:	2003fd44 	.word	0x2003fd44
   d9d84:	000dde90 	.word	0x000dde90

000d9d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9d88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9d8a:	2300      	movs	r3, #0
   d9d8c:	9300      	str	r3, [sp, #0]
   d9d8e:	461a      	mov	r2, r3
   d9d90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9d94:	f7fe faac 	bl	d82f0 <system_ctrl_set_result>
}
   d9d98:	b003      	add	sp, #12
   d9d9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9da0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9da0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9da2:	8843      	ldrh	r3, [r0, #2]
   d9da4:	2b0a      	cmp	r3, #10
   d9da6:	d008      	beq.n	d9dba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9da8:	2b50      	cmp	r3, #80	; 0x50
   d9daa:	d10b      	bne.n	d9dc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9dac:	4b09      	ldr	r3, [pc, #36]	; (d9dd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9dae:	681b      	ldr	r3, [r3, #0]
   d9db0:	b14b      	cbz	r3, d9dc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9db2:	b003      	add	sp, #12
   d9db4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9db8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9dba:	f7ff ffe5 	bl	d9d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9dbe:	b003      	add	sp, #12
   d9dc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9dc4:	2300      	movs	r3, #0
   d9dc6:	9300      	str	r3, [sp, #0]
   d9dc8:	461a      	mov	r2, r3
   d9dca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9dce:	f7fe fa8f 	bl	d82f0 <system_ctrl_set_result>
}
   d9dd2:	e7f4      	b.n	d9dbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9dd4:	2003e7cc 	.word	0x2003e7cc

000d9dd8 <module_user_init_hook>:
{
   d9dd8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9dda:	4c12      	ldr	r4, [pc, #72]	; (d9e24 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9ddc:	4812      	ldr	r0, [pc, #72]	; (d9e28 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9dde:	4d13      	ldr	r5, [pc, #76]	; (d9e2c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9de0:	2100      	movs	r1, #0
   d9de2:	f7fe fba9 	bl	d8538 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9de6:	6823      	ldr	r3, [r4, #0]
   d9de8:	42ab      	cmp	r3, r5
   d9dea:	4b11      	ldr	r3, [pc, #68]	; (d9e30 <module_user_init_hook+0x58>)
   d9dec:	bf0c      	ite	eq
   d9dee:	2201      	moveq	r2, #1
   d9df0:	2200      	movne	r2, #0
   d9df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9df4:	d002      	beq.n	d9dfc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d9df6:	f7ff ffbb 	bl	d9d70 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9dfc:	f7fe f896 	bl	d7f2c <HAL_RNG_GetRandomNumber>
   d9e00:	4604      	mov	r4, r0
    srand(seed);
   d9e02:	f000 ff9d 	bl	dad40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9e06:	4b0b      	ldr	r3, [pc, #44]	; (d9e34 <module_user_init_hook+0x5c>)
   d9e08:	b113      	cbz	r3, d9e10 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9e0a:	4620      	mov	r0, r4
   d9e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9e10:	2100      	movs	r1, #0
   d9e12:	4808      	ldr	r0, [pc, #32]	; (d9e34 <module_user_init_hook+0x5c>)
   d9e14:	f7fe fae0 	bl	d83d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9e1c:	4806      	ldr	r0, [pc, #24]	; (d9e38 <module_user_init_hook+0x60>)
   d9e1e:	2100      	movs	r1, #0
   d9e20:	f7fe ba5c 	b.w	d82dc <system_ctrl_set_app_request_handler>
   d9e24:	2003fd40 	.word	0x2003fd40
   d9e28:	000d9d19 	.word	0x000d9d19
   d9e2c:	9a271c1e 	.word	0x9a271c1e
   d9e30:	2003e7c8 	.word	0x2003e7c8
   d9e34:	00000000 	.word	0x00000000
   d9e38:	000d9da1 	.word	0x000d9da1

000d9e3c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9e3c:	b508      	push	{r3, lr}
   d9e3e:	4b02      	ldr	r3, [pc, #8]	; (d9e48 <spark_protocol_instance+0xc>)
   d9e40:	681b      	ldr	r3, [r3, #0]
   d9e42:	681b      	ldr	r3, [r3, #0]
   d9e44:	9301      	str	r3, [sp, #4]
   d9e46:	bd08      	pop	{r3, pc}
   d9e48:	0003025c 	.word	0x0003025c

000d9e4c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9e4c:	b508      	push	{r3, lr}
   d9e4e:	4b02      	ldr	r3, [pc, #8]	; (d9e58 <spark_protocol_set_product_id+0xc>)
   d9e50:	681b      	ldr	r3, [r3, #0]
   d9e52:	685b      	ldr	r3, [r3, #4]
   d9e54:	9301      	str	r3, [sp, #4]
   d9e56:	bd08      	pop	{r3, pc}
   d9e58:	0003025c 	.word	0x0003025c

000d9e5c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9e5c:	b508      	push	{r3, lr}
   d9e5e:	4b02      	ldr	r3, [pc, #8]	; (d9e68 <spark_protocol_set_product_firmware_version+0xc>)
   d9e60:	681b      	ldr	r3, [r3, #0]
   d9e62:	689b      	ldr	r3, [r3, #8]
   d9e64:	9301      	str	r3, [sp, #4]
   d9e66:	bd08      	pop	{r3, pc}
   d9e68:	0003025c 	.word	0x0003025c

000d9e6c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9e6c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9e6e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9e70:	d902      	bls.n	d9e78 <pinAvailable+0xc>
    return false;
   d9e72:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9e74:	b002      	add	sp, #8
   d9e76:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9e78:	f1a0 030b 	sub.w	r3, r0, #11
   d9e7c:	2b02      	cmp	r3, #2
   d9e7e:	d81a      	bhi.n	d9eb6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9e80:	4c17      	ldr	r4, [pc, #92]	; (d9ee0 <pinAvailable+0x74>)
   d9e82:	7821      	ldrb	r1, [r4, #0]
   d9e84:	f3bf 8f5b 	dmb	ish
   d9e88:	f011 0101 	ands.w	r1, r1, #1
   d9e8c:	d10b      	bne.n	d9ea6 <pinAvailable+0x3a>
   d9e8e:	4620      	mov	r0, r4
   d9e90:	9101      	str	r1, [sp, #4]
   d9e92:	f7fa f913 	bl	d40bc <__cxa_guard_acquire>
   d9e96:	9901      	ldr	r1, [sp, #4]
   d9e98:	b128      	cbz	r0, d9ea6 <pinAvailable+0x3a>
   d9e9a:	4812      	ldr	r0, [pc, #72]	; (d9ee4 <pinAvailable+0x78>)
   d9e9c:	f7ff fb30 	bl	d9500 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9ea0:	4620      	mov	r0, r4
   d9ea2:	f7fa f910 	bl	d40c6 <__cxa_guard_release>
   d9ea6:	4b0f      	ldr	r3, [pc, #60]	; (d9ee4 <pinAvailable+0x78>)
   d9ea8:	7818      	ldrb	r0, [r3, #0]
   d9eaa:	f7fe f93f 	bl	d812c <hal_spi_is_enabled>
   d9eae:	2800      	cmp	r0, #0
   d9eb0:	d1df      	bne.n	d9e72 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9eb2:	2001      	movs	r0, #1
   d9eb4:	e7de      	b.n	d9e74 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9eb6:	2801      	cmp	r0, #1
   d9eb8:	d809      	bhi.n	d9ece <pinAvailable+0x62>
   d9eba:	f000 f86f 	bl	d9f9c <_Z19__fetch_global_Wirev>
   d9ebe:	2100      	movs	r1, #0
   d9ec0:	7c00      	ldrb	r0, [r0, #16]
   d9ec2:	f7fe f8eb 	bl	d809c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9ec6:	f080 0001 	eor.w	r0, r0, #1
   d9eca:	b2c0      	uxtb	r0, r0
   d9ecc:	e7d2      	b.n	d9e74 <pinAvailable+0x8>
   d9ece:	3809      	subs	r0, #9
   d9ed0:	2801      	cmp	r0, #1
   d9ed2:	d8ee      	bhi.n	d9eb2 <pinAvailable+0x46>
   d9ed4:	f7ff fe34 	bl	d9b40 <_Z22__fetch_global_Serial1v>
   d9ed8:	7c00      	ldrb	r0, [r0, #16]
   d9eda:	f7fe f95f 	bl	d819c <hal_usart_is_enabled>
   d9ede:	e7f2      	b.n	d9ec6 <pinAvailable+0x5a>
   d9ee0:	2003e7d0 	.word	0x2003e7d0
   d9ee4:	2003e7d4 	.word	0x2003e7d4

000d9ee8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ee8:	2823      	cmp	r0, #35	; 0x23
{
   d9eea:	b538      	push	{r3, r4, r5, lr}
   d9eec:	4604      	mov	r4, r0
   d9eee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ef0:	d80a      	bhi.n	d9f08 <pinMode+0x20>
   d9ef2:	29ff      	cmp	r1, #255	; 0xff
   d9ef4:	d008      	beq.n	d9f08 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9ef6:	f7ff ffb9 	bl	d9e6c <pinAvailable>
   d9efa:	b128      	cbz	r0, d9f08 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9efc:	4629      	mov	r1, r5
   d9efe:	4620      	mov	r0, r4
}
   d9f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9f04:	f7fe b85a 	b.w	d7fbc <HAL_Pin_Mode>
}
   d9f08:	bd38      	pop	{r3, r4, r5, pc}

000d9f0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9f0a:	b538      	push	{r3, r4, r5, lr}
   d9f0c:	4604      	mov	r4, r0
   d9f0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9f10:	f7fe f85c 	bl	d7fcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9f14:	28ff      	cmp	r0, #255	; 0xff
   d9f16:	d010      	beq.n	d9f3a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9f18:	2806      	cmp	r0, #6
   d9f1a:	d804      	bhi.n	d9f26 <digitalWrite+0x1c>
   d9f1c:	234d      	movs	r3, #77	; 0x4d
   d9f1e:	fa23 f000 	lsr.w	r0, r3, r0
   d9f22:	07c3      	lsls	r3, r0, #31
   d9f24:	d409      	bmi.n	d9f3a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9f26:	4620      	mov	r0, r4
   d9f28:	f7ff ffa0 	bl	d9e6c <pinAvailable>
   d9f2c:	b128      	cbz	r0, d9f3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9f2e:	4629      	mov	r1, r5
   d9f30:	4620      	mov	r0, r4
}
   d9f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9f36:	f7fe b851 	b.w	d7fdc <HAL_GPIO_Write>
}
   d9f3a:	bd38      	pop	{r3, r4, r5, pc}

000d9f3c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9f3c:	280d      	cmp	r0, #13
{
   d9f3e:	b510      	push	{r4, lr}
   d9f40:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9f42:	bf9c      	itt	ls
   d9f44:	340e      	addls	r4, #14
   d9f46:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9f48:	4620      	mov	r0, r4
   d9f4a:	f7ff ff8f 	bl	d9e6c <pinAvailable>
   d9f4e:	b150      	cbz	r0, d9f66 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9f50:	2103      	movs	r1, #3
   d9f52:	4620      	mov	r0, r4
   d9f54:	f7fe f82a 	bl	d7fac <HAL_Validate_Pin_Function>
   d9f58:	2803      	cmp	r0, #3
   d9f5a:	d104      	bne.n	d9f66 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9f5c:	4620      	mov	r0, r4
}
   d9f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9f62:	f7fe b853 	b.w	d800c <hal_adc_read>
}
   d9f66:	2000      	movs	r0, #0
   d9f68:	bd10      	pop	{r4, pc}
	...

000d9f6c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9f6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9f6e:	2300      	movs	r3, #0
   d9f70:	2520      	movs	r5, #32
   d9f72:	8043      	strh	r3, [r0, #2]
   d9f74:	2314      	movs	r3, #20
{
   d9f76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9f78:	8003      	strh	r3, [r0, #0]
   d9f7a:	6085      	str	r5, [r0, #8]
   d9f7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f7e:	4906      	ldr	r1, [pc, #24]	; (d9f98 <_Z17acquireWireBufferv+0x2c>)
   d9f80:	4628      	mov	r0, r5
   d9f82:	f000 f83c 	bl	d9ffe <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f86:	4904      	ldr	r1, [pc, #16]	; (d9f98 <_Z17acquireWireBufferv+0x2c>)
	};
   d9f88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f8a:	4628      	mov	r0, r5
   d9f8c:	f000 f837 	bl	d9ffe <_ZnajRKSt9nothrow_t>
	};
   d9f90:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9f92:	4620      	mov	r0, r4
   d9f94:	bd38      	pop	{r3, r4, r5, pc}
   d9f96:	bf00      	nop
   d9f98:	000ddb84 	.word	0x000ddb84

000d9f9c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9f9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f9e:	4d0f      	ldr	r5, [pc, #60]	; (d9fdc <_Z19__fetch_global_Wirev+0x40>)
   d9fa0:	7829      	ldrb	r1, [r5, #0]
   d9fa2:	f3bf 8f5b 	dmb	ish
   d9fa6:	f011 0401 	ands.w	r4, r1, #1
{
   d9faa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9fac:	d113      	bne.n	d9fd6 <_Z19__fetch_global_Wirev+0x3a>
   d9fae:	4628      	mov	r0, r5
   d9fb0:	f7fa f884 	bl	d40bc <__cxa_guard_acquire>
   d9fb4:	b178      	cbz	r0, d9fd6 <_Z19__fetch_global_Wirev+0x3a>
   d9fb6:	a801      	add	r0, sp, #4
   d9fb8:	f7ff ffd8 	bl	d9f6c <_Z17acquireWireBufferv>
   d9fbc:	aa01      	add	r2, sp, #4
   d9fbe:	4621      	mov	r1, r4
   d9fc0:	4807      	ldr	r0, [pc, #28]	; (d9fe0 <_Z19__fetch_global_Wirev+0x44>)
   d9fc2:	f7fe fe51 	bl	d8c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9fc6:	4628      	mov	r0, r5
   d9fc8:	f7fa f87d 	bl	d40c6 <__cxa_guard_release>
   d9fcc:	4a05      	ldr	r2, [pc, #20]	; (d9fe4 <_Z19__fetch_global_Wirev+0x48>)
   d9fce:	4906      	ldr	r1, [pc, #24]	; (d9fe8 <_Z19__fetch_global_Wirev+0x4c>)
   d9fd0:	4803      	ldr	r0, [pc, #12]	; (d9fe0 <_Z19__fetch_global_Wirev+0x44>)
   d9fd2:	f000 f80b 	bl	d9fec <__aeabi_atexit>
	return wire;
}
   d9fd6:	4802      	ldr	r0, [pc, #8]	; (d9fe0 <_Z19__fetch_global_Wirev+0x44>)
   d9fd8:	b007      	add	sp, #28
   d9fda:	bd30      	pop	{r4, r5, pc}
   d9fdc:	2003e7e0 	.word	0x2003e7e0
   d9fe0:	2003e7e4 	.word	0x2003e7e4
   d9fe4:	2003dab8 	.word	0x2003dab8
   d9fe8:	000d8c11 	.word	0x000d8c11

000d9fec <__aeabi_atexit>:
   d9fec:	460b      	mov	r3, r1
   d9fee:	4601      	mov	r1, r0
   d9ff0:	4618      	mov	r0, r3
   d9ff2:	f000 be55 	b.w	daca0 <__cxa_atexit>

000d9ff6 <_ZdlPvj>:
   d9ff6:	f7fa b852 	b.w	d409e <_ZdlPv>

000d9ffa <_ZnwjRKSt9nothrow_t>:
   d9ffa:	f7fa b84c 	b.w	d4096 <_Znwj>

000d9ffe <_ZnajRKSt9nothrow_t>:
   d9ffe:	f7fa b84c 	b.w	d409a <_Znaj>

000da002 <_ZSt25__throw_bad_function_callv>:
   da002:	b508      	push	{r3, lr}
   da004:	f7fe fa80 	bl	d8508 <abort>

000da008 <sqrt>:
   da008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da00c:	ed2d 8b02 	vpush	{d8}
   da010:	b08b      	sub	sp, #44	; 0x2c
   da012:	ec55 4b10 	vmov	r4, r5, d0
   da016:	f000 f855 	bl	da0c4 <__ieee754_sqrt>
   da01a:	4b28      	ldr	r3, [pc, #160]	; (da0bc <sqrt+0xb4>)
   da01c:	eeb0 8a40 	vmov.f32	s16, s0
   da020:	eef0 8a60 	vmov.f32	s17, s1
   da024:	f993 7000 	ldrsb.w	r7, [r3]
   da028:	1c7b      	adds	r3, r7, #1
   da02a:	d012      	beq.n	da052 <sqrt+0x4a>
   da02c:	4622      	mov	r2, r4
   da02e:	462b      	mov	r3, r5
   da030:	4620      	mov	r0, r4
   da032:	4629      	mov	r1, r5
   da034:	f000 fd62 	bl	daafc <__aeabi_dcmpun>
   da038:	4606      	mov	r6, r0
   da03a:	b950      	cbnz	r0, da052 <sqrt+0x4a>
   da03c:	f04f 0800 	mov.w	r8, #0
   da040:	f04f 0900 	mov.w	r9, #0
   da044:	4620      	mov	r0, r4
   da046:	4629      	mov	r1, r5
   da048:	4642      	mov	r2, r8
   da04a:	464b      	mov	r3, r9
   da04c:	f000 fd2e 	bl	daaac <__aeabi_dcmplt>
   da050:	b940      	cbnz	r0, da064 <sqrt+0x5c>
   da052:	eeb0 0a48 	vmov.f32	s0, s16
   da056:	eef0 0a68 	vmov.f32	s1, s17
   da05a:	b00b      	add	sp, #44	; 0x2c
   da05c:	ecbd 8b02 	vpop	{d8}
   da060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da064:	4b16      	ldr	r3, [pc, #88]	; (da0c0 <sqrt+0xb8>)
   da066:	9608      	str	r6, [sp, #32]
   da068:	2201      	movs	r2, #1
   da06a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da06e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da072:	9200      	str	r2, [sp, #0]
   da074:	9301      	str	r3, [sp, #4]
   da076:	b197      	cbz	r7, da09e <sqrt+0x96>
   da078:	4642      	mov	r2, r8
   da07a:	464b      	mov	r3, r9
   da07c:	4640      	mov	r0, r8
   da07e:	4649      	mov	r1, r9
   da080:	f000 fbcc 	bl	da81c <__aeabi_ddiv>
   da084:	2f02      	cmp	r7, #2
   da086:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da08a:	d10a      	bne.n	da0a2 <sqrt+0x9a>
   da08c:	f7fe fa4c 	bl	d8528 <__errno>
   da090:	2321      	movs	r3, #33	; 0x21
   da092:	6003      	str	r3, [r0, #0]
   da094:	9b08      	ldr	r3, [sp, #32]
   da096:	b963      	cbnz	r3, da0b2 <sqrt+0xaa>
   da098:	ed9d 8b06 	vldr	d8, [sp, #24]
   da09c:	e7d9      	b.n	da052 <sqrt+0x4a>
   da09e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da0a2:	4668      	mov	r0, sp
   da0a4:	f000 f8d2 	bl	da24c <matherr>
   da0a8:	2800      	cmp	r0, #0
   da0aa:	d0ef      	beq.n	da08c <sqrt+0x84>
   da0ac:	9b08      	ldr	r3, [sp, #32]
   da0ae:	2b00      	cmp	r3, #0
   da0b0:	d0f2      	beq.n	da098 <sqrt+0x90>
   da0b2:	f7fe fa39 	bl	d8528 <__errno>
   da0b6:	9b08      	ldr	r3, [sp, #32]
   da0b8:	6003      	str	r3, [r0, #0]
   da0ba:	e7ed      	b.n	da098 <sqrt+0x90>
   da0bc:	2003d8dc 	.word	0x2003d8dc
   da0c0:	000ddb88 	.word	0x000ddb88

000da0c4 <__ieee754_sqrt>:
   da0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da0c8:	4a5f      	ldr	r2, [pc, #380]	; (da248 <__ieee754_sqrt+0x184>)
   da0ca:	ec57 6b10 	vmov	r6, r7, d0
   da0ce:	43ba      	bics	r2, r7
   da0d0:	f000 8098 	beq.w	da204 <__ieee754_sqrt+0x140>
   da0d4:	2f00      	cmp	r7, #0
   da0d6:	ee10 4a10 	vmov	r4, s0
   da0da:	463b      	mov	r3, r7
   da0dc:	dd4e      	ble.n	da17c <__ieee754_sqrt+0xb8>
   da0de:	1539      	asrs	r1, r7, #20
   da0e0:	d05b      	beq.n	da19a <__ieee754_sqrt+0xd6>
   da0e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da0e6:	07ca      	lsls	r2, r1, #31
   da0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da0ec:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   da0f0:	d403      	bmi.n	da0fa <__ieee754_sqrt+0x36>
   da0f2:	005b      	lsls	r3, r3, #1
   da0f4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da0f8:	0064      	lsls	r4, r4, #1
   da0fa:	0fe2      	lsrs	r2, r4, #31
   da0fc:	f04f 0c00 	mov.w	ip, #0
   da100:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   da104:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   da108:	0064      	lsls	r4, r4, #1
   da10a:	4666      	mov	r6, ip
   da10c:	2516      	movs	r5, #22
   da10e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   da112:	18b1      	adds	r1, r6, r2
   da114:	4299      	cmp	r1, r3
   da116:	dc02      	bgt.n	da11e <__ieee754_sqrt+0x5a>
   da118:	1a5b      	subs	r3, r3, r1
   da11a:	188e      	adds	r6, r1, r2
   da11c:	4494      	add	ip, r2
   da11e:	005b      	lsls	r3, r3, #1
   da120:	3d01      	subs	r5, #1
   da122:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da126:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da12a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da12e:	d1f0      	bne.n	da112 <__ieee754_sqrt+0x4e>
   da130:	462f      	mov	r7, r5
   da132:	2020      	movs	r0, #32
   da134:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   da138:	e009      	b.n	da14e <__ieee754_sqrt+0x8a>
   da13a:	d03e      	beq.n	da1ba <__ieee754_sqrt+0xf6>
   da13c:	0fe1      	lsrs	r1, r4, #31
   da13e:	3801      	subs	r0, #1
   da140:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da144:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   da148:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da14c:	d03e      	beq.n	da1cc <__ieee754_sqrt+0x108>
   da14e:	42b3      	cmp	r3, r6
   da150:	eb02 0105 	add.w	r1, r2, r5
   da154:	ddf1      	ble.n	da13a <__ieee754_sqrt+0x76>
   da156:	2900      	cmp	r1, #0
   da158:	eb01 0502 	add.w	r5, r1, r2
   da15c:	db09      	blt.n	da172 <__ieee754_sqrt+0xae>
   da15e:	46b0      	mov	r8, r6
   da160:	1b9b      	subs	r3, r3, r6
   da162:	42a1      	cmp	r1, r4
   da164:	bf88      	it	hi
   da166:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   da16a:	1a64      	subs	r4, r4, r1
   da16c:	4417      	add	r7, r2
   da16e:	4646      	mov	r6, r8
   da170:	e7e4      	b.n	da13c <__ieee754_sqrt+0x78>
   da172:	2d00      	cmp	r5, #0
   da174:	dbf3      	blt.n	da15e <__ieee754_sqrt+0x9a>
   da176:	f106 0801 	add.w	r8, r6, #1
   da17a:	e7f1      	b.n	da160 <__ieee754_sqrt+0x9c>
   da17c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   da180:	4332      	orrs	r2, r6
   da182:	d036      	beq.n	da1f2 <__ieee754_sqrt+0x12e>
   da184:	2f00      	cmp	r7, #0
   da186:	d14d      	bne.n	da224 <__ieee754_sqrt+0x160>
   da188:	4639      	mov	r1, r7
   da18a:	0ae2      	lsrs	r2, r4, #11
   da18c:	3915      	subs	r1, #21
   da18e:	0564      	lsls	r4, r4, #21
   da190:	4613      	mov	r3, r2
   da192:	2a00      	cmp	r2, #0
   da194:	d0f9      	beq.n	da18a <__ieee754_sqrt+0xc6>
   da196:	02d7      	lsls	r7, r2, #11
   da198:	d451      	bmi.n	da23e <__ieee754_sqrt+0x17a>
   da19a:	2000      	movs	r0, #0
   da19c:	005b      	lsls	r3, r3, #1
   da19e:	02de      	lsls	r6, r3, #11
   da1a0:	4605      	mov	r5, r0
   da1a2:	f100 0001 	add.w	r0, r0, #1
   da1a6:	d5f9      	bpl.n	da19c <__ieee754_sqrt+0xd8>
   da1a8:	461a      	mov	r2, r3
   da1aa:	4623      	mov	r3, r4
   da1ac:	4084      	lsls	r4, r0
   da1ae:	f1c0 0020 	rsb	r0, r0, #32
   da1b2:	40c3      	lsrs	r3, r0
   da1b4:	4313      	orrs	r3, r2
   da1b6:	1b49      	subs	r1, r1, r5
   da1b8:	e793      	b.n	da0e2 <__ieee754_sqrt+0x1e>
   da1ba:	42a1      	cmp	r1, r4
   da1bc:	d8be      	bhi.n	da13c <__ieee754_sqrt+0x78>
   da1be:	2900      	cmp	r1, #0
   da1c0:	eb01 0502 	add.w	r5, r1, r2
   da1c4:	dbd5      	blt.n	da172 <__ieee754_sqrt+0xae>
   da1c6:	4698      	mov	r8, r3
   da1c8:	2300      	movs	r3, #0
   da1ca:	e7ce      	b.n	da16a <__ieee754_sqrt+0xa6>
   da1cc:	4323      	orrs	r3, r4
   da1ce:	d112      	bne.n	da1f6 <__ieee754_sqrt+0x132>
   da1d0:	0878      	lsrs	r0, r7, #1
   da1d2:	ea4f 016c 	mov.w	r1, ip, asr #1
   da1d6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da1da:	f01c 0f01 	tst.w	ip, #1
   da1de:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da1e2:	bf18      	it	ne
   da1e4:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   da1e8:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   da1ec:	4602      	mov	r2, r0
   da1ee:	ec43 2b10 	vmov	d0, r2, r3
   da1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1f6:	1c7b      	adds	r3, r7, #1
   da1f8:	bf16      	itet	ne
   da1fa:	1c78      	addne	r0, r7, #1
   da1fc:	f10c 0c01 	addeq.w	ip, ip, #1
   da200:	0840      	lsrne	r0, r0, #1
   da202:	e7e6      	b.n	da1d2 <__ieee754_sqrt+0x10e>
   da204:	ee10 2a10 	vmov	r2, s0
   da208:	ee10 0a10 	vmov	r0, s0
   da20c:	463b      	mov	r3, r7
   da20e:	4639      	mov	r1, r7
   da210:	f000 f9da 	bl	da5c8 <__aeabi_dmul>
   da214:	4632      	mov	r2, r6
   da216:	463b      	mov	r3, r7
   da218:	f000 f820 	bl	da25c <__adddf3>
   da21c:	ec41 0b10 	vmov	d0, r0, r1
   da220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da224:	ee10 2a10 	vmov	r2, s0
   da228:	4630      	mov	r0, r6
   da22a:	4639      	mov	r1, r7
   da22c:	f000 f814 	bl	da258 <__aeabi_dsub>
   da230:	4602      	mov	r2, r0
   da232:	460b      	mov	r3, r1
   da234:	f000 faf2 	bl	da81c <__aeabi_ddiv>
   da238:	ec41 0b10 	vmov	d0, r0, r1
   da23c:	e7d9      	b.n	da1f2 <__ieee754_sqrt+0x12e>
   da23e:	4623      	mov	r3, r4
   da240:	2020      	movs	r0, #32
   da242:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da246:	e7b4      	b.n	da1b2 <__ieee754_sqrt+0xee>
   da248:	7ff00000 	.word	0x7ff00000

000da24c <matherr>:
   da24c:	2000      	movs	r0, #0
   da24e:	4770      	bx	lr

000da250 <__aeabi_drsub>:
   da250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da254:	e002      	b.n	da25c <__adddf3>
   da256:	bf00      	nop

000da258 <__aeabi_dsub>:
   da258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da25c <__adddf3>:
   da25c:	b530      	push	{r4, r5, lr}
   da25e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da262:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da266:	ea94 0f05 	teq	r4, r5
   da26a:	bf08      	it	eq
   da26c:	ea90 0f02 	teqeq	r0, r2
   da270:	bf1f      	itttt	ne
   da272:	ea54 0c00 	orrsne.w	ip, r4, r0
   da276:	ea55 0c02 	orrsne.w	ip, r5, r2
   da27a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da27e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da282:	f000 80e2 	beq.w	da44a <__adddf3+0x1ee>
   da286:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da28a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da28e:	bfb8      	it	lt
   da290:	426d      	neglt	r5, r5
   da292:	dd0c      	ble.n	da2ae <__adddf3+0x52>
   da294:	442c      	add	r4, r5
   da296:	ea80 0202 	eor.w	r2, r0, r2
   da29a:	ea81 0303 	eor.w	r3, r1, r3
   da29e:	ea82 0000 	eor.w	r0, r2, r0
   da2a2:	ea83 0101 	eor.w	r1, r3, r1
   da2a6:	ea80 0202 	eor.w	r2, r0, r2
   da2aa:	ea81 0303 	eor.w	r3, r1, r3
   da2ae:	2d36      	cmp	r5, #54	; 0x36
   da2b0:	bf88      	it	hi
   da2b2:	bd30      	pophi	{r4, r5, pc}
   da2b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da2b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da2bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da2c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da2c4:	d002      	beq.n	da2cc <__adddf3+0x70>
   da2c6:	4240      	negs	r0, r0
   da2c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da2cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da2d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da2d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da2d8:	d002      	beq.n	da2e0 <__adddf3+0x84>
   da2da:	4252      	negs	r2, r2
   da2dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da2e0:	ea94 0f05 	teq	r4, r5
   da2e4:	f000 80a7 	beq.w	da436 <__adddf3+0x1da>
   da2e8:	f1a4 0401 	sub.w	r4, r4, #1
   da2ec:	f1d5 0e20 	rsbs	lr, r5, #32
   da2f0:	db0d      	blt.n	da30e <__adddf3+0xb2>
   da2f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   da2f6:	fa22 f205 	lsr.w	r2, r2, r5
   da2fa:	1880      	adds	r0, r0, r2
   da2fc:	f141 0100 	adc.w	r1, r1, #0
   da300:	fa03 f20e 	lsl.w	r2, r3, lr
   da304:	1880      	adds	r0, r0, r2
   da306:	fa43 f305 	asr.w	r3, r3, r5
   da30a:	4159      	adcs	r1, r3
   da30c:	e00e      	b.n	da32c <__adddf3+0xd0>
   da30e:	f1a5 0520 	sub.w	r5, r5, #32
   da312:	f10e 0e20 	add.w	lr, lr, #32
   da316:	2a01      	cmp	r2, #1
   da318:	fa03 fc0e 	lsl.w	ip, r3, lr
   da31c:	bf28      	it	cs
   da31e:	f04c 0c02 	orrcs.w	ip, ip, #2
   da322:	fa43 f305 	asr.w	r3, r3, r5
   da326:	18c0      	adds	r0, r0, r3
   da328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da32c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da330:	d507      	bpl.n	da342 <__adddf3+0xe6>
   da332:	f04f 0e00 	mov.w	lr, #0
   da336:	f1dc 0c00 	rsbs	ip, ip, #0
   da33a:	eb7e 0000 	sbcs.w	r0, lr, r0
   da33e:	eb6e 0101 	sbc.w	r1, lr, r1
   da342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da346:	d31b      	bcc.n	da380 <__adddf3+0x124>
   da348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da34c:	d30c      	bcc.n	da368 <__adddf3+0x10c>
   da34e:	0849      	lsrs	r1, r1, #1
   da350:	ea5f 0030 	movs.w	r0, r0, rrx
   da354:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da358:	f104 0401 	add.w	r4, r4, #1
   da35c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da364:	f080 809a 	bcs.w	da49c <__adddf3+0x240>
   da368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da36c:	bf08      	it	eq
   da36e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da372:	f150 0000 	adcs.w	r0, r0, #0
   da376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da37a:	ea41 0105 	orr.w	r1, r1, r5
   da37e:	bd30      	pop	{r4, r5, pc}
   da380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da384:	4140      	adcs	r0, r0
   da386:	eb41 0101 	adc.w	r1, r1, r1
   da38a:	3c01      	subs	r4, #1
   da38c:	bf28      	it	cs
   da38e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da392:	d2e9      	bcs.n	da368 <__adddf3+0x10c>
   da394:	f091 0f00 	teq	r1, #0
   da398:	bf04      	itt	eq
   da39a:	4601      	moveq	r1, r0
   da39c:	2000      	moveq	r0, #0
   da39e:	fab1 f381 	clz	r3, r1
   da3a2:	bf08      	it	eq
   da3a4:	3320      	addeq	r3, #32
   da3a6:	f1a3 030b 	sub.w	r3, r3, #11
   da3aa:	f1b3 0220 	subs.w	r2, r3, #32
   da3ae:	da0c      	bge.n	da3ca <__adddf3+0x16e>
   da3b0:	320c      	adds	r2, #12
   da3b2:	dd08      	ble.n	da3c6 <__adddf3+0x16a>
   da3b4:	f102 0c14 	add.w	ip, r2, #20
   da3b8:	f1c2 020c 	rsb	r2, r2, #12
   da3bc:	fa01 f00c 	lsl.w	r0, r1, ip
   da3c0:	fa21 f102 	lsr.w	r1, r1, r2
   da3c4:	e00c      	b.n	da3e0 <__adddf3+0x184>
   da3c6:	f102 0214 	add.w	r2, r2, #20
   da3ca:	bfd8      	it	le
   da3cc:	f1c2 0c20 	rsble	ip, r2, #32
   da3d0:	fa01 f102 	lsl.w	r1, r1, r2
   da3d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   da3d8:	bfdc      	itt	le
   da3da:	ea41 010c 	orrle.w	r1, r1, ip
   da3de:	4090      	lslle	r0, r2
   da3e0:	1ae4      	subs	r4, r4, r3
   da3e2:	bfa2      	ittt	ge
   da3e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da3e8:	4329      	orrge	r1, r5
   da3ea:	bd30      	popge	{r4, r5, pc}
   da3ec:	ea6f 0404 	mvn.w	r4, r4
   da3f0:	3c1f      	subs	r4, #31
   da3f2:	da1c      	bge.n	da42e <__adddf3+0x1d2>
   da3f4:	340c      	adds	r4, #12
   da3f6:	dc0e      	bgt.n	da416 <__adddf3+0x1ba>
   da3f8:	f104 0414 	add.w	r4, r4, #20
   da3fc:	f1c4 0220 	rsb	r2, r4, #32
   da400:	fa20 f004 	lsr.w	r0, r0, r4
   da404:	fa01 f302 	lsl.w	r3, r1, r2
   da408:	ea40 0003 	orr.w	r0, r0, r3
   da40c:	fa21 f304 	lsr.w	r3, r1, r4
   da410:	ea45 0103 	orr.w	r1, r5, r3
   da414:	bd30      	pop	{r4, r5, pc}
   da416:	f1c4 040c 	rsb	r4, r4, #12
   da41a:	f1c4 0220 	rsb	r2, r4, #32
   da41e:	fa20 f002 	lsr.w	r0, r0, r2
   da422:	fa01 f304 	lsl.w	r3, r1, r4
   da426:	ea40 0003 	orr.w	r0, r0, r3
   da42a:	4629      	mov	r1, r5
   da42c:	bd30      	pop	{r4, r5, pc}
   da42e:	fa21 f004 	lsr.w	r0, r1, r4
   da432:	4629      	mov	r1, r5
   da434:	bd30      	pop	{r4, r5, pc}
   da436:	f094 0f00 	teq	r4, #0
   da43a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da43e:	bf06      	itte	eq
   da440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da444:	3401      	addeq	r4, #1
   da446:	3d01      	subne	r5, #1
   da448:	e74e      	b.n	da2e8 <__adddf3+0x8c>
   da44a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da44e:	bf18      	it	ne
   da450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da454:	d029      	beq.n	da4aa <__adddf3+0x24e>
   da456:	ea94 0f05 	teq	r4, r5
   da45a:	bf08      	it	eq
   da45c:	ea90 0f02 	teqeq	r0, r2
   da460:	d005      	beq.n	da46e <__adddf3+0x212>
   da462:	ea54 0c00 	orrs.w	ip, r4, r0
   da466:	bf04      	itt	eq
   da468:	4619      	moveq	r1, r3
   da46a:	4610      	moveq	r0, r2
   da46c:	bd30      	pop	{r4, r5, pc}
   da46e:	ea91 0f03 	teq	r1, r3
   da472:	bf1e      	ittt	ne
   da474:	2100      	movne	r1, #0
   da476:	2000      	movne	r0, #0
   da478:	bd30      	popne	{r4, r5, pc}
   da47a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da47e:	d105      	bne.n	da48c <__adddf3+0x230>
   da480:	0040      	lsls	r0, r0, #1
   da482:	4149      	adcs	r1, r1
   da484:	bf28      	it	cs
   da486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da48a:	bd30      	pop	{r4, r5, pc}
   da48c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da490:	bf3c      	itt	cc
   da492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da496:	bd30      	popcc	{r4, r5, pc}
   da498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da49c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da4a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da4a4:	f04f 0000 	mov.w	r0, #0
   da4a8:	bd30      	pop	{r4, r5, pc}
   da4aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da4ae:	bf1a      	itte	ne
   da4b0:	4619      	movne	r1, r3
   da4b2:	4610      	movne	r0, r2
   da4b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da4b8:	bf1c      	itt	ne
   da4ba:	460b      	movne	r3, r1
   da4bc:	4602      	movne	r2, r0
   da4be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da4c2:	bf06      	itte	eq
   da4c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da4c8:	ea91 0f03 	teqeq	r1, r3
   da4cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da4d0:	bd30      	pop	{r4, r5, pc}
   da4d2:	bf00      	nop

000da4d4 <__aeabi_ui2d>:
   da4d4:	f090 0f00 	teq	r0, #0
   da4d8:	bf04      	itt	eq
   da4da:	2100      	moveq	r1, #0
   da4dc:	4770      	bxeq	lr
   da4de:	b530      	push	{r4, r5, lr}
   da4e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da4e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da4e8:	f04f 0500 	mov.w	r5, #0
   da4ec:	f04f 0100 	mov.w	r1, #0
   da4f0:	e750      	b.n	da394 <__adddf3+0x138>
   da4f2:	bf00      	nop

000da4f4 <__aeabi_i2d>:
   da4f4:	f090 0f00 	teq	r0, #0
   da4f8:	bf04      	itt	eq
   da4fa:	2100      	moveq	r1, #0
   da4fc:	4770      	bxeq	lr
   da4fe:	b530      	push	{r4, r5, lr}
   da500:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da504:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da50c:	bf48      	it	mi
   da50e:	4240      	negmi	r0, r0
   da510:	f04f 0100 	mov.w	r1, #0
   da514:	e73e      	b.n	da394 <__adddf3+0x138>
   da516:	bf00      	nop

000da518 <__aeabi_f2d>:
   da518:	0042      	lsls	r2, r0, #1
   da51a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da51e:	ea4f 0131 	mov.w	r1, r1, rrx
   da522:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da526:	bf1f      	itttt	ne
   da528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da52c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da534:	4770      	bxne	lr
   da536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da53a:	bf08      	it	eq
   da53c:	4770      	bxeq	lr
   da53e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da542:	bf04      	itt	eq
   da544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da548:	4770      	bxeq	lr
   da54a:	b530      	push	{r4, r5, lr}
   da54c:	f44f 7460 	mov.w	r4, #896	; 0x380
   da550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da558:	e71c      	b.n	da394 <__adddf3+0x138>
   da55a:	bf00      	nop

000da55c <__aeabi_ul2d>:
   da55c:	ea50 0201 	orrs.w	r2, r0, r1
   da560:	bf08      	it	eq
   da562:	4770      	bxeq	lr
   da564:	b530      	push	{r4, r5, lr}
   da566:	f04f 0500 	mov.w	r5, #0
   da56a:	e00a      	b.n	da582 <__aeabi_l2d+0x16>

000da56c <__aeabi_l2d>:
   da56c:	ea50 0201 	orrs.w	r2, r0, r1
   da570:	bf08      	it	eq
   da572:	4770      	bxeq	lr
   da574:	b530      	push	{r4, r5, lr}
   da576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da57a:	d502      	bpl.n	da582 <__aeabi_l2d+0x16>
   da57c:	4240      	negs	r0, r0
   da57e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da582:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da586:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da58a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da58e:	f43f aed8 	beq.w	da342 <__adddf3+0xe6>
   da592:	f04f 0203 	mov.w	r2, #3
   da596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da59a:	bf18      	it	ne
   da59c:	3203      	addne	r2, #3
   da59e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da5a2:	bf18      	it	ne
   da5a4:	3203      	addne	r2, #3
   da5a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da5aa:	f1c2 0320 	rsb	r3, r2, #32
   da5ae:	fa00 fc03 	lsl.w	ip, r0, r3
   da5b2:	fa20 f002 	lsr.w	r0, r0, r2
   da5b6:	fa01 fe03 	lsl.w	lr, r1, r3
   da5ba:	ea40 000e 	orr.w	r0, r0, lr
   da5be:	fa21 f102 	lsr.w	r1, r1, r2
   da5c2:	4414      	add	r4, r2
   da5c4:	e6bd      	b.n	da342 <__adddf3+0xe6>
   da5c6:	bf00      	nop

000da5c8 <__aeabi_dmul>:
   da5c8:	b570      	push	{r4, r5, r6, lr}
   da5ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da5ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da5d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da5d6:	bf1d      	ittte	ne
   da5d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da5dc:	ea94 0f0c 	teqne	r4, ip
   da5e0:	ea95 0f0c 	teqne	r5, ip
   da5e4:	f000 f8de 	bleq	da7a4 <__aeabi_dmul+0x1dc>
   da5e8:	442c      	add	r4, r5
   da5ea:	ea81 0603 	eor.w	r6, r1, r3
   da5ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da5f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da5f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da5fa:	bf18      	it	ne
   da5fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da608:	d038      	beq.n	da67c <__aeabi_dmul+0xb4>
   da60a:	fba0 ce02 	umull	ip, lr, r0, r2
   da60e:	f04f 0500 	mov.w	r5, #0
   da612:	fbe1 e502 	umlal	lr, r5, r1, r2
   da616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da61a:	fbe0 e503 	umlal	lr, r5, r0, r3
   da61e:	f04f 0600 	mov.w	r6, #0
   da622:	fbe1 5603 	umlal	r5, r6, r1, r3
   da626:	f09c 0f00 	teq	ip, #0
   da62a:	bf18      	it	ne
   da62c:	f04e 0e01 	orrne.w	lr, lr, #1
   da630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da63c:	d204      	bcs.n	da648 <__aeabi_dmul+0x80>
   da63e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da642:	416d      	adcs	r5, r5
   da644:	eb46 0606 	adc.w	r6, r6, r6
   da648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da64c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da65c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da660:	bf88      	it	hi
   da662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da666:	d81e      	bhi.n	da6a6 <__aeabi_dmul+0xde>
   da668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da66c:	bf08      	it	eq
   da66e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da672:	f150 0000 	adcs.w	r0, r0, #0
   da676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da67a:	bd70      	pop	{r4, r5, r6, pc}
   da67c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da680:	ea46 0101 	orr.w	r1, r6, r1
   da684:	ea40 0002 	orr.w	r0, r0, r2
   da688:	ea81 0103 	eor.w	r1, r1, r3
   da68c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da690:	bfc2      	ittt	gt
   da692:	ebd4 050c 	rsbsgt	r5, r4, ip
   da696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da69a:	bd70      	popgt	{r4, r5, r6, pc}
   da69c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da6a0:	f04f 0e00 	mov.w	lr, #0
   da6a4:	3c01      	subs	r4, #1
   da6a6:	f300 80ab 	bgt.w	da800 <__aeabi_dmul+0x238>
   da6aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da6ae:	bfde      	ittt	le
   da6b0:	2000      	movle	r0, #0
   da6b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da6b6:	bd70      	pople	{r4, r5, r6, pc}
   da6b8:	f1c4 0400 	rsb	r4, r4, #0
   da6bc:	3c20      	subs	r4, #32
   da6be:	da35      	bge.n	da72c <__aeabi_dmul+0x164>
   da6c0:	340c      	adds	r4, #12
   da6c2:	dc1b      	bgt.n	da6fc <__aeabi_dmul+0x134>
   da6c4:	f104 0414 	add.w	r4, r4, #20
   da6c8:	f1c4 0520 	rsb	r5, r4, #32
   da6cc:	fa00 f305 	lsl.w	r3, r0, r5
   da6d0:	fa20 f004 	lsr.w	r0, r0, r4
   da6d4:	fa01 f205 	lsl.w	r2, r1, r5
   da6d8:	ea40 0002 	orr.w	r0, r0, r2
   da6dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da6e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da6e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da6e8:	fa21 f604 	lsr.w	r6, r1, r4
   da6ec:	eb42 0106 	adc.w	r1, r2, r6
   da6f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da6f4:	bf08      	it	eq
   da6f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da6fa:	bd70      	pop	{r4, r5, r6, pc}
   da6fc:	f1c4 040c 	rsb	r4, r4, #12
   da700:	f1c4 0520 	rsb	r5, r4, #32
   da704:	fa00 f304 	lsl.w	r3, r0, r4
   da708:	fa20 f005 	lsr.w	r0, r0, r5
   da70c:	fa01 f204 	lsl.w	r2, r1, r4
   da710:	ea40 0002 	orr.w	r0, r0, r2
   da714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da71c:	f141 0100 	adc.w	r1, r1, #0
   da720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da724:	bf08      	it	eq
   da726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da72a:	bd70      	pop	{r4, r5, r6, pc}
   da72c:	f1c4 0520 	rsb	r5, r4, #32
   da730:	fa00 f205 	lsl.w	r2, r0, r5
   da734:	ea4e 0e02 	orr.w	lr, lr, r2
   da738:	fa20 f304 	lsr.w	r3, r0, r4
   da73c:	fa01 f205 	lsl.w	r2, r1, r5
   da740:	ea43 0302 	orr.w	r3, r3, r2
   da744:	fa21 f004 	lsr.w	r0, r1, r4
   da748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da74c:	fa21 f204 	lsr.w	r2, r1, r4
   da750:	ea20 0002 	bic.w	r0, r0, r2
   da754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da75c:	bf08      	it	eq
   da75e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da762:	bd70      	pop	{r4, r5, r6, pc}
   da764:	f094 0f00 	teq	r4, #0
   da768:	d10f      	bne.n	da78a <__aeabi_dmul+0x1c2>
   da76a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da76e:	0040      	lsls	r0, r0, #1
   da770:	eb41 0101 	adc.w	r1, r1, r1
   da774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da778:	bf08      	it	eq
   da77a:	3c01      	subeq	r4, #1
   da77c:	d0f7      	beq.n	da76e <__aeabi_dmul+0x1a6>
   da77e:	ea41 0106 	orr.w	r1, r1, r6
   da782:	f095 0f00 	teq	r5, #0
   da786:	bf18      	it	ne
   da788:	4770      	bxne	lr
   da78a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da78e:	0052      	lsls	r2, r2, #1
   da790:	eb43 0303 	adc.w	r3, r3, r3
   da794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da798:	bf08      	it	eq
   da79a:	3d01      	subeq	r5, #1
   da79c:	d0f7      	beq.n	da78e <__aeabi_dmul+0x1c6>
   da79e:	ea43 0306 	orr.w	r3, r3, r6
   da7a2:	4770      	bx	lr
   da7a4:	ea94 0f0c 	teq	r4, ip
   da7a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da7ac:	bf18      	it	ne
   da7ae:	ea95 0f0c 	teqne	r5, ip
   da7b2:	d00c      	beq.n	da7ce <__aeabi_dmul+0x206>
   da7b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da7b8:	bf18      	it	ne
   da7ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da7be:	d1d1      	bne.n	da764 <__aeabi_dmul+0x19c>
   da7c0:	ea81 0103 	eor.w	r1, r1, r3
   da7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da7c8:	f04f 0000 	mov.w	r0, #0
   da7cc:	bd70      	pop	{r4, r5, r6, pc}
   da7ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da7d2:	bf06      	itte	eq
   da7d4:	4610      	moveq	r0, r2
   da7d6:	4619      	moveq	r1, r3
   da7d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da7dc:	d019      	beq.n	da812 <__aeabi_dmul+0x24a>
   da7de:	ea94 0f0c 	teq	r4, ip
   da7e2:	d102      	bne.n	da7ea <__aeabi_dmul+0x222>
   da7e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da7e8:	d113      	bne.n	da812 <__aeabi_dmul+0x24a>
   da7ea:	ea95 0f0c 	teq	r5, ip
   da7ee:	d105      	bne.n	da7fc <__aeabi_dmul+0x234>
   da7f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da7f4:	bf1c      	itt	ne
   da7f6:	4610      	movne	r0, r2
   da7f8:	4619      	movne	r1, r3
   da7fa:	d10a      	bne.n	da812 <__aeabi_dmul+0x24a>
   da7fc:	ea81 0103 	eor.w	r1, r1, r3
   da800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da80c:	f04f 0000 	mov.w	r0, #0
   da810:	bd70      	pop	{r4, r5, r6, pc}
   da812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da81a:	bd70      	pop	{r4, r5, r6, pc}

000da81c <__aeabi_ddiv>:
   da81c:	b570      	push	{r4, r5, r6, lr}
   da81e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da82a:	bf1d      	ittte	ne
   da82c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da830:	ea94 0f0c 	teqne	r4, ip
   da834:	ea95 0f0c 	teqne	r5, ip
   da838:	f000 f8a7 	bleq	da98a <__aeabi_ddiv+0x16e>
   da83c:	eba4 0405 	sub.w	r4, r4, r5
   da840:	ea81 0e03 	eor.w	lr, r1, r3
   da844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da848:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da84c:	f000 8088 	beq.w	da960 <__aeabi_ddiv+0x144>
   da850:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da85c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da860:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da86c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da874:	429d      	cmp	r5, r3
   da876:	bf08      	it	eq
   da878:	4296      	cmpeq	r6, r2
   da87a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da87e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da882:	d202      	bcs.n	da88a <__aeabi_ddiv+0x6e>
   da884:	085b      	lsrs	r3, r3, #1
   da886:	ea4f 0232 	mov.w	r2, r2, rrx
   da88a:	1ab6      	subs	r6, r6, r2
   da88c:	eb65 0503 	sbc.w	r5, r5, r3
   da890:	085b      	lsrs	r3, r3, #1
   da892:	ea4f 0232 	mov.w	r2, r2, rrx
   da896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da89a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da89e:	ebb6 0e02 	subs.w	lr, r6, r2
   da8a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8a6:	bf22      	ittt	cs
   da8a8:	1ab6      	subcs	r6, r6, r2
   da8aa:	4675      	movcs	r5, lr
   da8ac:	ea40 000c 	orrcs.w	r0, r0, ip
   da8b0:	085b      	lsrs	r3, r3, #1
   da8b2:	ea4f 0232 	mov.w	r2, r2, rrx
   da8b6:	ebb6 0e02 	subs.w	lr, r6, r2
   da8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8be:	bf22      	ittt	cs
   da8c0:	1ab6      	subcs	r6, r6, r2
   da8c2:	4675      	movcs	r5, lr
   da8c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da8c8:	085b      	lsrs	r3, r3, #1
   da8ca:	ea4f 0232 	mov.w	r2, r2, rrx
   da8ce:	ebb6 0e02 	subs.w	lr, r6, r2
   da8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8d6:	bf22      	ittt	cs
   da8d8:	1ab6      	subcs	r6, r6, r2
   da8da:	4675      	movcs	r5, lr
   da8dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da8e0:	085b      	lsrs	r3, r3, #1
   da8e2:	ea4f 0232 	mov.w	r2, r2, rrx
   da8e6:	ebb6 0e02 	subs.w	lr, r6, r2
   da8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8ee:	bf22      	ittt	cs
   da8f0:	1ab6      	subcs	r6, r6, r2
   da8f2:	4675      	movcs	r5, lr
   da8f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da8f8:	ea55 0e06 	orrs.w	lr, r5, r6
   da8fc:	d018      	beq.n	da930 <__aeabi_ddiv+0x114>
   da8fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da906:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da90a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da90e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da91a:	d1c0      	bne.n	da89e <__aeabi_ddiv+0x82>
   da91c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da920:	d10b      	bne.n	da93a <__aeabi_ddiv+0x11e>
   da922:	ea41 0100 	orr.w	r1, r1, r0
   da926:	f04f 0000 	mov.w	r0, #0
   da92a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da92e:	e7b6      	b.n	da89e <__aeabi_ddiv+0x82>
   da930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da934:	bf04      	itt	eq
   da936:	4301      	orreq	r1, r0
   da938:	2000      	moveq	r0, #0
   da93a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da93e:	bf88      	it	hi
   da940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da944:	f63f aeaf 	bhi.w	da6a6 <__aeabi_dmul+0xde>
   da948:	ebb5 0c03 	subs.w	ip, r5, r3
   da94c:	bf04      	itt	eq
   da94e:	ebb6 0c02 	subseq.w	ip, r6, r2
   da952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da956:	f150 0000 	adcs.w	r0, r0, #0
   da95a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da95e:	bd70      	pop	{r4, r5, r6, pc}
   da960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da96c:	bfc2      	ittt	gt
   da96e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da976:	bd70      	popgt	{r4, r5, r6, pc}
   da978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da97c:	f04f 0e00 	mov.w	lr, #0
   da980:	3c01      	subs	r4, #1
   da982:	e690      	b.n	da6a6 <__aeabi_dmul+0xde>
   da984:	ea45 0e06 	orr.w	lr, r5, r6
   da988:	e68d      	b.n	da6a6 <__aeabi_dmul+0xde>
   da98a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da98e:	ea94 0f0c 	teq	r4, ip
   da992:	bf08      	it	eq
   da994:	ea95 0f0c 	teqeq	r5, ip
   da998:	f43f af3b 	beq.w	da812 <__aeabi_dmul+0x24a>
   da99c:	ea94 0f0c 	teq	r4, ip
   da9a0:	d10a      	bne.n	da9b8 <__aeabi_ddiv+0x19c>
   da9a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da9a6:	f47f af34 	bne.w	da812 <__aeabi_dmul+0x24a>
   da9aa:	ea95 0f0c 	teq	r5, ip
   da9ae:	f47f af25 	bne.w	da7fc <__aeabi_dmul+0x234>
   da9b2:	4610      	mov	r0, r2
   da9b4:	4619      	mov	r1, r3
   da9b6:	e72c      	b.n	da812 <__aeabi_dmul+0x24a>
   da9b8:	ea95 0f0c 	teq	r5, ip
   da9bc:	d106      	bne.n	da9cc <__aeabi_ddiv+0x1b0>
   da9be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da9c2:	f43f aefd 	beq.w	da7c0 <__aeabi_dmul+0x1f8>
   da9c6:	4610      	mov	r0, r2
   da9c8:	4619      	mov	r1, r3
   da9ca:	e722      	b.n	da812 <__aeabi_dmul+0x24a>
   da9cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9d0:	bf18      	it	ne
   da9d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9d6:	f47f aec5 	bne.w	da764 <__aeabi_dmul+0x19c>
   da9da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da9de:	f47f af0d 	bne.w	da7fc <__aeabi_dmul+0x234>
   da9e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da9e6:	f47f aeeb 	bne.w	da7c0 <__aeabi_dmul+0x1f8>
   da9ea:	e712      	b.n	da812 <__aeabi_dmul+0x24a>

000da9ec <__gedf2>:
   da9ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da9f0:	e006      	b.n	daa00 <__cmpdf2+0x4>
   da9f2:	bf00      	nop

000da9f4 <__ledf2>:
   da9f4:	f04f 0c01 	mov.w	ip, #1
   da9f8:	e002      	b.n	daa00 <__cmpdf2+0x4>
   da9fa:	bf00      	nop

000da9fc <__cmpdf2>:
   da9fc:	f04f 0c01 	mov.w	ip, #1
   daa00:	f84d cd04 	str.w	ip, [sp, #-4]!
   daa04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa10:	bf18      	it	ne
   daa12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   daa16:	d01b      	beq.n	daa50 <__cmpdf2+0x54>
   daa18:	b001      	add	sp, #4
   daa1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   daa1e:	bf0c      	ite	eq
   daa20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   daa24:	ea91 0f03 	teqne	r1, r3
   daa28:	bf02      	ittt	eq
   daa2a:	ea90 0f02 	teqeq	r0, r2
   daa2e:	2000      	moveq	r0, #0
   daa30:	4770      	bxeq	lr
   daa32:	f110 0f00 	cmn.w	r0, #0
   daa36:	ea91 0f03 	teq	r1, r3
   daa3a:	bf58      	it	pl
   daa3c:	4299      	cmppl	r1, r3
   daa3e:	bf08      	it	eq
   daa40:	4290      	cmpeq	r0, r2
   daa42:	bf2c      	ite	cs
   daa44:	17d8      	asrcs	r0, r3, #31
   daa46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   daa4a:	f040 0001 	orr.w	r0, r0, #1
   daa4e:	4770      	bx	lr
   daa50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa58:	d102      	bne.n	daa60 <__cmpdf2+0x64>
   daa5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daa5e:	d107      	bne.n	daa70 <__cmpdf2+0x74>
   daa60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa68:	d1d6      	bne.n	daa18 <__cmpdf2+0x1c>
   daa6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daa6e:	d0d3      	beq.n	daa18 <__cmpdf2+0x1c>
   daa70:	f85d 0b04 	ldr.w	r0, [sp], #4
   daa74:	4770      	bx	lr
   daa76:	bf00      	nop

000daa78 <__aeabi_cdrcmple>:
   daa78:	4684      	mov	ip, r0
   daa7a:	4610      	mov	r0, r2
   daa7c:	4662      	mov	r2, ip
   daa7e:	468c      	mov	ip, r1
   daa80:	4619      	mov	r1, r3
   daa82:	4663      	mov	r3, ip
   daa84:	e000      	b.n	daa88 <__aeabi_cdcmpeq>
   daa86:	bf00      	nop

000daa88 <__aeabi_cdcmpeq>:
   daa88:	b501      	push	{r0, lr}
   daa8a:	f7ff ffb7 	bl	da9fc <__cmpdf2>
   daa8e:	2800      	cmp	r0, #0
   daa90:	bf48      	it	mi
   daa92:	f110 0f00 	cmnmi.w	r0, #0
   daa96:	bd01      	pop	{r0, pc}

000daa98 <__aeabi_dcmpeq>:
   daa98:	f84d ed08 	str.w	lr, [sp, #-8]!
   daa9c:	f7ff fff4 	bl	daa88 <__aeabi_cdcmpeq>
   daaa0:	bf0c      	ite	eq
   daaa2:	2001      	moveq	r0, #1
   daaa4:	2000      	movne	r0, #0
   daaa6:	f85d fb08 	ldr.w	pc, [sp], #8
   daaaa:	bf00      	nop

000daaac <__aeabi_dcmplt>:
   daaac:	f84d ed08 	str.w	lr, [sp, #-8]!
   daab0:	f7ff ffea 	bl	daa88 <__aeabi_cdcmpeq>
   daab4:	bf34      	ite	cc
   daab6:	2001      	movcc	r0, #1
   daab8:	2000      	movcs	r0, #0
   daaba:	f85d fb08 	ldr.w	pc, [sp], #8
   daabe:	bf00      	nop

000daac0 <__aeabi_dcmple>:
   daac0:	f84d ed08 	str.w	lr, [sp, #-8]!
   daac4:	f7ff ffe0 	bl	daa88 <__aeabi_cdcmpeq>
   daac8:	bf94      	ite	ls
   daaca:	2001      	movls	r0, #1
   daacc:	2000      	movhi	r0, #0
   daace:	f85d fb08 	ldr.w	pc, [sp], #8
   daad2:	bf00      	nop

000daad4 <__aeabi_dcmpge>:
   daad4:	f84d ed08 	str.w	lr, [sp, #-8]!
   daad8:	f7ff ffce 	bl	daa78 <__aeabi_cdrcmple>
   daadc:	bf94      	ite	ls
   daade:	2001      	movls	r0, #1
   daae0:	2000      	movhi	r0, #0
   daae2:	f85d fb08 	ldr.w	pc, [sp], #8
   daae6:	bf00      	nop

000daae8 <__aeabi_dcmpgt>:
   daae8:	f84d ed08 	str.w	lr, [sp, #-8]!
   daaec:	f7ff ffc4 	bl	daa78 <__aeabi_cdrcmple>
   daaf0:	bf34      	ite	cc
   daaf2:	2001      	movcc	r0, #1
   daaf4:	2000      	movcs	r0, #0
   daaf6:	f85d fb08 	ldr.w	pc, [sp], #8
   daafa:	bf00      	nop

000daafc <__aeabi_dcmpun>:
   daafc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dab00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dab04:	d102      	bne.n	dab0c <__aeabi_dcmpun+0x10>
   dab06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dab0a:	d10a      	bne.n	dab22 <__aeabi_dcmpun+0x26>
   dab0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dab10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dab14:	d102      	bne.n	dab1c <__aeabi_dcmpun+0x20>
   dab16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dab1a:	d102      	bne.n	dab22 <__aeabi_dcmpun+0x26>
   dab1c:	f04f 0000 	mov.w	r0, #0
   dab20:	4770      	bx	lr
   dab22:	f04f 0001 	mov.w	r0, #1
   dab26:	4770      	bx	lr

000dab28 <__aeabi_d2uiz>:
   dab28:	004a      	lsls	r2, r1, #1
   dab2a:	d211      	bcs.n	dab50 <__aeabi_d2uiz+0x28>
   dab2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dab30:	d211      	bcs.n	dab56 <__aeabi_d2uiz+0x2e>
   dab32:	d50d      	bpl.n	dab50 <__aeabi_d2uiz+0x28>
   dab34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dab38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dab3c:	d40e      	bmi.n	dab5c <__aeabi_d2uiz+0x34>
   dab3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dab42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dab46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dab4a:	fa23 f002 	lsr.w	r0, r3, r2
   dab4e:	4770      	bx	lr
   dab50:	f04f 0000 	mov.w	r0, #0
   dab54:	4770      	bx	lr
   dab56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dab5a:	d102      	bne.n	dab62 <__aeabi_d2uiz+0x3a>
   dab5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dab60:	4770      	bx	lr
   dab62:	f04f 0000 	mov.w	r0, #0
   dab66:	4770      	bx	lr

000dab68 <__aeabi_d2f>:
   dab68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dab6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dab70:	bf24      	itt	cs
   dab72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dab76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dab7a:	d90d      	bls.n	dab98 <__aeabi_d2f+0x30>
   dab7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dab80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dab84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dab88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dab8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dab90:	bf08      	it	eq
   dab92:	f020 0001 	biceq.w	r0, r0, #1
   dab96:	4770      	bx	lr
   dab98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dab9c:	d121      	bne.n	dabe2 <__aeabi_d2f+0x7a>
   dab9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   daba2:	bfbc      	itt	lt
   daba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   daba8:	4770      	bxlt	lr
   dabaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dabb2:	f1c2 0218 	rsb	r2, r2, #24
   dabb6:	f1c2 0c20 	rsb	ip, r2, #32
   dabba:	fa10 f30c 	lsls.w	r3, r0, ip
   dabbe:	fa20 f002 	lsr.w	r0, r0, r2
   dabc2:	bf18      	it	ne
   dabc4:	f040 0001 	orrne.w	r0, r0, #1
   dabc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dabcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dabd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   dabd4:	ea40 000c 	orr.w	r0, r0, ip
   dabd8:	fa23 f302 	lsr.w	r3, r3, r2
   dabdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dabe0:	e7cc      	b.n	dab7c <__aeabi_d2f+0x14>
   dabe2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dabe6:	d107      	bne.n	dabf8 <__aeabi_d2f+0x90>
   dabe8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dabec:	bf1e      	ittt	ne
   dabee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dabf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dabf6:	4770      	bxne	lr
   dabf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dabfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dac00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dac04:	4770      	bx	lr
   dac06:	bf00      	nop

000dac08 <__aeabi_d2ulz>:
   dac08:	b5d0      	push	{r4, r6, r7, lr}
   dac0a:	4b0c      	ldr	r3, [pc, #48]	; (dac3c <__aeabi_d2ulz+0x34>)
   dac0c:	2200      	movs	r2, #0
   dac0e:	4606      	mov	r6, r0
   dac10:	460f      	mov	r7, r1
   dac12:	f7ff fcd9 	bl	da5c8 <__aeabi_dmul>
   dac16:	f7ff ff87 	bl	dab28 <__aeabi_d2uiz>
   dac1a:	4604      	mov	r4, r0
   dac1c:	f7ff fc5a 	bl	da4d4 <__aeabi_ui2d>
   dac20:	4b07      	ldr	r3, [pc, #28]	; (dac40 <__aeabi_d2ulz+0x38>)
   dac22:	2200      	movs	r2, #0
   dac24:	f7ff fcd0 	bl	da5c8 <__aeabi_dmul>
   dac28:	4602      	mov	r2, r0
   dac2a:	460b      	mov	r3, r1
   dac2c:	4630      	mov	r0, r6
   dac2e:	4639      	mov	r1, r7
   dac30:	f7ff fb12 	bl	da258 <__aeabi_dsub>
   dac34:	f7ff ff78 	bl	dab28 <__aeabi_d2uiz>
   dac38:	4621      	mov	r1, r4
   dac3a:	bdd0      	pop	{r4, r6, r7, pc}
   dac3c:	3df00000 	.word	0x3df00000
   dac40:	41f00000 	.word	0x41f00000

000dac44 <asctime_r>:
   dac44:	b510      	push	{r4, lr}
   dac46:	460c      	mov	r4, r1
   dac48:	6941      	ldr	r1, [r0, #20]
   dac4a:	6903      	ldr	r3, [r0, #16]
   dac4c:	6982      	ldr	r2, [r0, #24]
   dac4e:	b086      	sub	sp, #24
   dac50:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dac54:	9104      	str	r1, [sp, #16]
   dac56:	6801      	ldr	r1, [r0, #0]
   dac58:	9103      	str	r1, [sp, #12]
   dac5a:	6841      	ldr	r1, [r0, #4]
   dac5c:	9102      	str	r1, [sp, #8]
   dac5e:	6881      	ldr	r1, [r0, #8]
   dac60:	9101      	str	r1, [sp, #4]
   dac62:	68c1      	ldr	r1, [r0, #12]
   dac64:	9100      	str	r1, [sp, #0]
   dac66:	4907      	ldr	r1, [pc, #28]	; (dac84 <asctime_r+0x40>)
   dac68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dac6c:	440b      	add	r3, r1
   dac6e:	4906      	ldr	r1, [pc, #24]	; (dac88 <asctime_r+0x44>)
   dac70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dac74:	440a      	add	r2, r1
   dac76:	4620      	mov	r0, r4
   dac78:	4904      	ldr	r1, [pc, #16]	; (dac8c <asctime_r+0x48>)
   dac7a:	f7fd fc2d 	bl	d84d8 <siprintf>
   dac7e:	4620      	mov	r0, r4
   dac80:	b006      	add	sp, #24
   dac82:	bd10      	pop	{r4, pc}
   dac84:	000ddbc2 	.word	0x000ddbc2
   dac88:	000ddbad 	.word	0x000ddbad
   dac8c:	000ddb8d 	.word	0x000ddb8d

000dac90 <atof>:
   dac90:	2100      	movs	r1, #0
   dac92:	f000 befb 	b.w	dba8c <strtod>

000dac96 <atoi>:
   dac96:	220a      	movs	r2, #10
   dac98:	2100      	movs	r1, #0
   dac9a:	f000 bf7d 	b.w	dbb98 <strtol>
	...

000daca0 <__cxa_atexit>:
   daca0:	b510      	push	{r4, lr}
   daca2:	4c05      	ldr	r4, [pc, #20]	; (dacb8 <__cxa_atexit+0x18>)
   daca4:	4613      	mov	r3, r2
   daca6:	b12c      	cbz	r4, dacb4 <__cxa_atexit+0x14>
   daca8:	460a      	mov	r2, r1
   dacaa:	4601      	mov	r1, r0
   dacac:	2002      	movs	r0, #2
   dacae:	f3af 8000 	nop.w
   dacb2:	bd10      	pop	{r4, pc}
   dacb4:	4620      	mov	r0, r4
   dacb6:	e7fc      	b.n	dacb2 <__cxa_atexit+0x12>
   dacb8:	00000000 	.word	0x00000000

000dacbc <gmtime>:
   dacbc:	b538      	push	{r3, r4, r5, lr}
   dacbe:	4b07      	ldr	r3, [pc, #28]	; (dacdc <gmtime+0x20>)
   dacc0:	681d      	ldr	r5, [r3, #0]
   dacc2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dacc4:	4604      	mov	r4, r0
   dacc6:	b91b      	cbnz	r3, dacd0 <gmtime+0x14>
   dacc8:	2024      	movs	r0, #36	; 0x24
   dacca:	f7fd fbed 	bl	d84a8 <malloc>
   dacce:	63e8      	str	r0, [r5, #60]	; 0x3c
   dacd0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dacd2:	4620      	mov	r0, r4
   dacd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dacd8:	f7fd bc46 	b.w	d8568 <gmtime_r>
   dacdc:	2003d8e0 	.word	0x2003d8e0

000dace0 <memcpy>:
   dace0:	440a      	add	r2, r1
   dace2:	4291      	cmp	r1, r2
   dace4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dace8:	d100      	bne.n	dacec <memcpy+0xc>
   dacea:	4770      	bx	lr
   dacec:	b510      	push	{r4, lr}
   dacee:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacf2:	f803 4f01 	strb.w	r4, [r3, #1]!
   dacf6:	4291      	cmp	r1, r2
   dacf8:	d1f9      	bne.n	dacee <memcpy+0xe>
   dacfa:	bd10      	pop	{r4, pc}

000dacfc <memmove>:
   dacfc:	4288      	cmp	r0, r1
   dacfe:	b510      	push	{r4, lr}
   dad00:	eb01 0402 	add.w	r4, r1, r2
   dad04:	d902      	bls.n	dad0c <memmove+0x10>
   dad06:	4284      	cmp	r4, r0
   dad08:	4623      	mov	r3, r4
   dad0a:	d807      	bhi.n	dad1c <memmove+0x20>
   dad0c:	1e43      	subs	r3, r0, #1
   dad0e:	42a1      	cmp	r1, r4
   dad10:	d008      	beq.n	dad24 <memmove+0x28>
   dad12:	f811 2b01 	ldrb.w	r2, [r1], #1
   dad16:	f803 2f01 	strb.w	r2, [r3, #1]!
   dad1a:	e7f8      	b.n	dad0e <memmove+0x12>
   dad1c:	4402      	add	r2, r0
   dad1e:	4601      	mov	r1, r0
   dad20:	428a      	cmp	r2, r1
   dad22:	d100      	bne.n	dad26 <memmove+0x2a>
   dad24:	bd10      	pop	{r4, pc}
   dad26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dad2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dad2e:	e7f7      	b.n	dad20 <memmove+0x24>

000dad30 <memset>:
   dad30:	4402      	add	r2, r0
   dad32:	4603      	mov	r3, r0
   dad34:	4293      	cmp	r3, r2
   dad36:	d100      	bne.n	dad3a <memset+0xa>
   dad38:	4770      	bx	lr
   dad3a:	f803 1b01 	strb.w	r1, [r3], #1
   dad3e:	e7f9      	b.n	dad34 <memset+0x4>

000dad40 <srand>:
   dad40:	b538      	push	{r3, r4, r5, lr}
   dad42:	4b0d      	ldr	r3, [pc, #52]	; (dad78 <srand+0x38>)
   dad44:	681d      	ldr	r5, [r3, #0]
   dad46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dad48:	4604      	mov	r4, r0
   dad4a:	b97b      	cbnz	r3, dad6c <srand+0x2c>
   dad4c:	2018      	movs	r0, #24
   dad4e:	f7fd fbab 	bl	d84a8 <malloc>
   dad52:	4a0a      	ldr	r2, [pc, #40]	; (dad7c <srand+0x3c>)
   dad54:	4b0a      	ldr	r3, [pc, #40]	; (dad80 <srand+0x40>)
   dad56:	63a8      	str	r0, [r5, #56]	; 0x38
   dad58:	e9c0 2300 	strd	r2, r3, [r0]
   dad5c:	4b09      	ldr	r3, [pc, #36]	; (dad84 <srand+0x44>)
   dad5e:	6083      	str	r3, [r0, #8]
   dad60:	230b      	movs	r3, #11
   dad62:	8183      	strh	r3, [r0, #12]
   dad64:	2201      	movs	r2, #1
   dad66:	2300      	movs	r3, #0
   dad68:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dad6e:	2200      	movs	r2, #0
   dad70:	611c      	str	r4, [r3, #16]
   dad72:	615a      	str	r2, [r3, #20]
   dad74:	bd38      	pop	{r3, r4, r5, pc}
   dad76:	bf00      	nop
   dad78:	2003d8e0 	.word	0x2003d8e0
   dad7c:	abcd330e 	.word	0xabcd330e
   dad80:	e66d1234 	.word	0xe66d1234
   dad84:	0005deec 	.word	0x0005deec

000dad88 <strcmp>:
   dad88:	f810 2b01 	ldrb.w	r2, [r0], #1
   dad8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   dad90:	2a01      	cmp	r2, #1
   dad92:	bf28      	it	cs
   dad94:	429a      	cmpcs	r2, r3
   dad96:	d0f7      	beq.n	dad88 <strcmp>
   dad98:	1ad0      	subs	r0, r2, r3
   dad9a:	4770      	bx	lr

000dad9c <strcpy>:
   dad9c:	4603      	mov	r3, r0
   dad9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dada2:	f803 2b01 	strb.w	r2, [r3], #1
   dada6:	2a00      	cmp	r2, #0
   dada8:	d1f9      	bne.n	dad9e <strcpy+0x2>
   dadaa:	4770      	bx	lr

000dadac <strdup>:
   dadac:	4b02      	ldr	r3, [pc, #8]	; (dadb8 <strdup+0xc>)
   dadae:	4601      	mov	r1, r0
   dadb0:	6818      	ldr	r0, [r3, #0]
   dadb2:	f000 b803 	b.w	dadbc <_strdup_r>
   dadb6:	bf00      	nop
   dadb8:	2003d8e0 	.word	0x2003d8e0

000dadbc <_strdup_r>:
   dadbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dadbe:	4604      	mov	r4, r0
   dadc0:	4608      	mov	r0, r1
   dadc2:	460d      	mov	r5, r1
   dadc4:	f000 f80f 	bl	dade6 <strlen>
   dadc8:	1c42      	adds	r2, r0, #1
   dadca:	4611      	mov	r1, r2
   dadcc:	4620      	mov	r0, r4
   dadce:	9201      	str	r2, [sp, #4]
   dadd0:	f7fd fba2 	bl	d8518 <_malloc_r>
   dadd4:	4604      	mov	r4, r0
   dadd6:	b118      	cbz	r0, dade0 <_strdup_r+0x24>
   dadd8:	9a01      	ldr	r2, [sp, #4]
   dadda:	4629      	mov	r1, r5
   daddc:	f7ff ff80 	bl	dace0 <memcpy>
   dade0:	4620      	mov	r0, r4
   dade2:	b003      	add	sp, #12
   dade4:	bd30      	pop	{r4, r5, pc}

000dade6 <strlen>:
   dade6:	4603      	mov	r3, r0
   dade8:	f813 2b01 	ldrb.w	r2, [r3], #1
   dadec:	2a00      	cmp	r2, #0
   dadee:	d1fb      	bne.n	dade8 <strlen+0x2>
   dadf0:	1a18      	subs	r0, r3, r0
   dadf2:	3801      	subs	r0, #1
   dadf4:	4770      	bx	lr

000dadf6 <strncmp>:
   dadf6:	b510      	push	{r4, lr}
   dadf8:	b16a      	cbz	r2, dae16 <strncmp+0x20>
   dadfa:	3901      	subs	r1, #1
   dadfc:	1884      	adds	r4, r0, r2
   dadfe:	f810 3b01 	ldrb.w	r3, [r0], #1
   dae02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dae06:	4293      	cmp	r3, r2
   dae08:	d103      	bne.n	dae12 <strncmp+0x1c>
   dae0a:	42a0      	cmp	r0, r4
   dae0c:	d001      	beq.n	dae12 <strncmp+0x1c>
   dae0e:	2b00      	cmp	r3, #0
   dae10:	d1f5      	bne.n	dadfe <strncmp+0x8>
   dae12:	1a98      	subs	r0, r3, r2
   dae14:	bd10      	pop	{r4, pc}
   dae16:	4610      	mov	r0, r2
   dae18:	e7fc      	b.n	dae14 <strncmp+0x1e>

000dae1a <strncpy>:
   dae1a:	b510      	push	{r4, lr}
   dae1c:	3901      	subs	r1, #1
   dae1e:	4603      	mov	r3, r0
   dae20:	b132      	cbz	r2, dae30 <strncpy+0x16>
   dae22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae26:	f803 4b01 	strb.w	r4, [r3], #1
   dae2a:	3a01      	subs	r2, #1
   dae2c:	2c00      	cmp	r4, #0
   dae2e:	d1f7      	bne.n	dae20 <strncpy+0x6>
   dae30:	441a      	add	r2, r3
   dae32:	2100      	movs	r1, #0
   dae34:	4293      	cmp	r3, r2
   dae36:	d100      	bne.n	dae3a <strncpy+0x20>
   dae38:	bd10      	pop	{r4, pc}
   dae3a:	f803 1b01 	strb.w	r1, [r3], #1
   dae3e:	e7f9      	b.n	dae34 <strncpy+0x1a>

000dae40 <sulp>:
   dae40:	b570      	push	{r4, r5, r6, lr}
   dae42:	4604      	mov	r4, r0
   dae44:	460d      	mov	r5, r1
   dae46:	ec45 4b10 	vmov	d0, r4, r5
   dae4a:	4616      	mov	r6, r2
   dae4c:	f001 fd1a 	bl	dc884 <__ulp>
   dae50:	ec51 0b10 	vmov	r0, r1, d0
   dae54:	b17e      	cbz	r6, dae76 <sulp+0x36>
   dae56:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dae5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dae5e:	2b00      	cmp	r3, #0
   dae60:	dd09      	ble.n	dae76 <sulp+0x36>
   dae62:	051b      	lsls	r3, r3, #20
   dae64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dae68:	2400      	movs	r4, #0
   dae6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dae6e:	4622      	mov	r2, r4
   dae70:	462b      	mov	r3, r5
   dae72:	f7ff fba9 	bl	da5c8 <__aeabi_dmul>
   dae76:	bd70      	pop	{r4, r5, r6, pc}

000dae78 <_strtod_l>:
   dae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae7c:	b0a3      	sub	sp, #140	; 0x8c
   dae7e:	461f      	mov	r7, r3
   dae80:	2300      	movs	r3, #0
   dae82:	931e      	str	r3, [sp, #120]	; 0x78
   dae84:	4ba4      	ldr	r3, [pc, #656]	; (db118 <_strtod_l+0x2a0>)
   dae86:	9219      	str	r2, [sp, #100]	; 0x64
   dae88:	681b      	ldr	r3, [r3, #0]
   dae8a:	9307      	str	r3, [sp, #28]
   dae8c:	4604      	mov	r4, r0
   dae8e:	4618      	mov	r0, r3
   dae90:	4688      	mov	r8, r1
   dae92:	f7ff ffa8 	bl	dade6 <strlen>
   dae96:	f04f 0a00 	mov.w	sl, #0
   dae9a:	4605      	mov	r5, r0
   dae9c:	f04f 0b00 	mov.w	fp, #0
   daea0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   daea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daea6:	781a      	ldrb	r2, [r3, #0]
   daea8:	2a2b      	cmp	r2, #43	; 0x2b
   daeaa:	d04c      	beq.n	daf46 <_strtod_l+0xce>
   daeac:	d839      	bhi.n	daf22 <_strtod_l+0xaa>
   daeae:	2a0d      	cmp	r2, #13
   daeb0:	d832      	bhi.n	daf18 <_strtod_l+0xa0>
   daeb2:	2a08      	cmp	r2, #8
   daeb4:	d832      	bhi.n	daf1c <_strtod_l+0xa4>
   daeb6:	2a00      	cmp	r2, #0
   daeb8:	d03c      	beq.n	daf34 <_strtod_l+0xbc>
   daeba:	2300      	movs	r3, #0
   daebc:	930e      	str	r3, [sp, #56]	; 0x38
   daebe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   daec0:	7833      	ldrb	r3, [r6, #0]
   daec2:	2b30      	cmp	r3, #48	; 0x30
   daec4:	f040 80b4 	bne.w	db030 <_strtod_l+0x1b8>
   daec8:	7873      	ldrb	r3, [r6, #1]
   daeca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   daece:	2b58      	cmp	r3, #88	; 0x58
   daed0:	d16c      	bne.n	dafac <_strtod_l+0x134>
   daed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daed4:	9301      	str	r3, [sp, #4]
   daed6:	ab1e      	add	r3, sp, #120	; 0x78
   daed8:	9702      	str	r7, [sp, #8]
   daeda:	9300      	str	r3, [sp, #0]
   daedc:	4a8f      	ldr	r2, [pc, #572]	; (db11c <_strtod_l+0x2a4>)
   daede:	ab1f      	add	r3, sp, #124	; 0x7c
   daee0:	a91d      	add	r1, sp, #116	; 0x74
   daee2:	4620      	mov	r0, r4
   daee4:	f000 feca 	bl	dbc7c <__gethex>
   daee8:	f010 0707 	ands.w	r7, r0, #7
   daeec:	4605      	mov	r5, r0
   daeee:	d005      	beq.n	daefc <_strtod_l+0x84>
   daef0:	2f06      	cmp	r7, #6
   daef2:	d12a      	bne.n	daf4a <_strtod_l+0xd2>
   daef4:	3601      	adds	r6, #1
   daef6:	2300      	movs	r3, #0
   daef8:	961d      	str	r6, [sp, #116]	; 0x74
   daefa:	930e      	str	r3, [sp, #56]	; 0x38
   daefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daefe:	2b00      	cmp	r3, #0
   daf00:	f040 8596 	bne.w	dba30 <_strtod_l+0xbb8>
   daf04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daf06:	b1db      	cbz	r3, daf40 <_strtod_l+0xc8>
   daf08:	4652      	mov	r2, sl
   daf0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   daf0e:	ec43 2b10 	vmov	d0, r2, r3
   daf12:	b023      	add	sp, #140	; 0x8c
   daf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf18:	2a20      	cmp	r2, #32
   daf1a:	d1ce      	bne.n	daeba <_strtod_l+0x42>
   daf1c:	3301      	adds	r3, #1
   daf1e:	931d      	str	r3, [sp, #116]	; 0x74
   daf20:	e7c0      	b.n	daea4 <_strtod_l+0x2c>
   daf22:	2a2d      	cmp	r2, #45	; 0x2d
   daf24:	d1c9      	bne.n	daeba <_strtod_l+0x42>
   daf26:	2201      	movs	r2, #1
   daf28:	920e      	str	r2, [sp, #56]	; 0x38
   daf2a:	1c5a      	adds	r2, r3, #1
   daf2c:	921d      	str	r2, [sp, #116]	; 0x74
   daf2e:	785b      	ldrb	r3, [r3, #1]
   daf30:	2b00      	cmp	r3, #0
   daf32:	d1c4      	bne.n	daebe <_strtod_l+0x46>
   daf34:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daf36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   daf3a:	2b00      	cmp	r3, #0
   daf3c:	f040 8576 	bne.w	dba2c <_strtod_l+0xbb4>
   daf40:	4652      	mov	r2, sl
   daf42:	465b      	mov	r3, fp
   daf44:	e7e3      	b.n	daf0e <_strtod_l+0x96>
   daf46:	2200      	movs	r2, #0
   daf48:	e7ee      	b.n	daf28 <_strtod_l+0xb0>
   daf4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   daf4c:	b13a      	cbz	r2, daf5e <_strtod_l+0xe6>
   daf4e:	2135      	movs	r1, #53	; 0x35
   daf50:	a820      	add	r0, sp, #128	; 0x80
   daf52:	f001 fd96 	bl	dca82 <__copybits>
   daf56:	991e      	ldr	r1, [sp, #120]	; 0x78
   daf58:	4620      	mov	r0, r4
   daf5a:	f001 f9cb 	bl	dc2f4 <_Bfree>
   daf5e:	3f01      	subs	r7, #1
   daf60:	2f05      	cmp	r7, #5
   daf62:	d807      	bhi.n	daf74 <_strtod_l+0xfc>
   daf64:	e8df f007 	tbb	[pc, r7]
   daf68:	1d180b0e 	.word	0x1d180b0e
   daf6c:	030e      	.short	0x030e
   daf6e:	f04f 0b00 	mov.w	fp, #0
   daf72:	46da      	mov	sl, fp
   daf74:	0728      	lsls	r0, r5, #28
   daf76:	d5c1      	bpl.n	daefc <_strtod_l+0x84>
   daf78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   daf7c:	e7be      	b.n	daefc <_strtod_l+0x84>
   daf7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   daf82:	e7f7      	b.n	daf74 <_strtod_l+0xfc>
   daf84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   daf88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   daf8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   daf8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   daf92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   daf96:	e7ed      	b.n	daf74 <_strtod_l+0xfc>
   daf98:	f8df b184 	ldr.w	fp, [pc, #388]	; db120 <_strtod_l+0x2a8>
   daf9c:	f04f 0a00 	mov.w	sl, #0
   dafa0:	e7e8      	b.n	daf74 <_strtod_l+0xfc>
   dafa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dafa6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dafaa:	e7e3      	b.n	daf74 <_strtod_l+0xfc>
   dafac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dafae:	1c5a      	adds	r2, r3, #1
   dafb0:	921d      	str	r2, [sp, #116]	; 0x74
   dafb2:	785b      	ldrb	r3, [r3, #1]
   dafb4:	2b30      	cmp	r3, #48	; 0x30
   dafb6:	d0f9      	beq.n	dafac <_strtod_l+0x134>
   dafb8:	2b00      	cmp	r3, #0
   dafba:	d09f      	beq.n	daefc <_strtod_l+0x84>
   dafbc:	2301      	movs	r3, #1
   dafbe:	f04f 0900 	mov.w	r9, #0
   dafc2:	9304      	str	r3, [sp, #16]
   dafc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dafc6:	930a      	str	r3, [sp, #40]	; 0x28
   dafc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dafcc:	464f      	mov	r7, r9
   dafce:	220a      	movs	r2, #10
   dafd0:	981d      	ldr	r0, [sp, #116]	; 0x74
   dafd2:	7806      	ldrb	r6, [r0, #0]
   dafd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dafd8:	b2d9      	uxtb	r1, r3
   dafda:	2909      	cmp	r1, #9
   dafdc:	d92a      	bls.n	db034 <_strtod_l+0x1bc>
   dafde:	9907      	ldr	r1, [sp, #28]
   dafe0:	462a      	mov	r2, r5
   dafe2:	f7ff ff08 	bl	dadf6 <strncmp>
   dafe6:	b398      	cbz	r0, db050 <_strtod_l+0x1d8>
   dafe8:	2000      	movs	r0, #0
   dafea:	4633      	mov	r3, r6
   dafec:	463d      	mov	r5, r7
   dafee:	9007      	str	r0, [sp, #28]
   daff0:	4602      	mov	r2, r0
   daff2:	2b65      	cmp	r3, #101	; 0x65
   daff4:	d001      	beq.n	daffa <_strtod_l+0x182>
   daff6:	2b45      	cmp	r3, #69	; 0x45
   daff8:	d118      	bne.n	db02c <_strtod_l+0x1b4>
   daffa:	b91d      	cbnz	r5, db004 <_strtod_l+0x18c>
   daffc:	9b04      	ldr	r3, [sp, #16]
   daffe:	4303      	orrs	r3, r0
   db000:	d098      	beq.n	daf34 <_strtod_l+0xbc>
   db002:	2500      	movs	r5, #0
   db004:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db008:	f108 0301 	add.w	r3, r8, #1
   db00c:	931d      	str	r3, [sp, #116]	; 0x74
   db00e:	f898 3001 	ldrb.w	r3, [r8, #1]
   db012:	2b2b      	cmp	r3, #43	; 0x2b
   db014:	d075      	beq.n	db102 <_strtod_l+0x28a>
   db016:	2b2d      	cmp	r3, #45	; 0x2d
   db018:	d07b      	beq.n	db112 <_strtod_l+0x29a>
   db01a:	f04f 0c00 	mov.w	ip, #0
   db01e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db022:	2909      	cmp	r1, #9
   db024:	f240 8082 	bls.w	db12c <_strtod_l+0x2b4>
   db028:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db02c:	2600      	movs	r6, #0
   db02e:	e09d      	b.n	db16c <_strtod_l+0x2f4>
   db030:	2300      	movs	r3, #0
   db032:	e7c4      	b.n	dafbe <_strtod_l+0x146>
   db034:	2f08      	cmp	r7, #8
   db036:	bfd8      	it	le
   db038:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db03a:	f100 0001 	add.w	r0, r0, #1
   db03e:	bfda      	itte	le
   db040:	fb02 3301 	mlale	r3, r2, r1, r3
   db044:	9309      	strle	r3, [sp, #36]	; 0x24
   db046:	fb02 3909 	mlagt	r9, r2, r9, r3
   db04a:	3701      	adds	r7, #1
   db04c:	901d      	str	r0, [sp, #116]	; 0x74
   db04e:	e7bf      	b.n	dafd0 <_strtod_l+0x158>
   db050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db052:	195a      	adds	r2, r3, r5
   db054:	921d      	str	r2, [sp, #116]	; 0x74
   db056:	5d5b      	ldrb	r3, [r3, r5]
   db058:	2f00      	cmp	r7, #0
   db05a:	d037      	beq.n	db0cc <_strtod_l+0x254>
   db05c:	9007      	str	r0, [sp, #28]
   db05e:	463d      	mov	r5, r7
   db060:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db064:	2a09      	cmp	r2, #9
   db066:	d912      	bls.n	db08e <_strtod_l+0x216>
   db068:	2201      	movs	r2, #1
   db06a:	e7c2      	b.n	daff2 <_strtod_l+0x17a>
   db06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db06e:	1c5a      	adds	r2, r3, #1
   db070:	921d      	str	r2, [sp, #116]	; 0x74
   db072:	785b      	ldrb	r3, [r3, #1]
   db074:	3001      	adds	r0, #1
   db076:	2b30      	cmp	r3, #48	; 0x30
   db078:	d0f8      	beq.n	db06c <_strtod_l+0x1f4>
   db07a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db07e:	2a08      	cmp	r2, #8
   db080:	f200 84db 	bhi.w	dba3a <_strtod_l+0xbc2>
   db084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db086:	9007      	str	r0, [sp, #28]
   db088:	2000      	movs	r0, #0
   db08a:	920a      	str	r2, [sp, #40]	; 0x28
   db08c:	4605      	mov	r5, r0
   db08e:	3b30      	subs	r3, #48	; 0x30
   db090:	f100 0201 	add.w	r2, r0, #1
   db094:	d014      	beq.n	db0c0 <_strtod_l+0x248>
   db096:	9907      	ldr	r1, [sp, #28]
   db098:	4411      	add	r1, r2
   db09a:	9107      	str	r1, [sp, #28]
   db09c:	462a      	mov	r2, r5
   db09e:	eb00 0e05 	add.w	lr, r0, r5
   db0a2:	210a      	movs	r1, #10
   db0a4:	4572      	cmp	r2, lr
   db0a6:	d113      	bne.n	db0d0 <_strtod_l+0x258>
   db0a8:	182a      	adds	r2, r5, r0
   db0aa:	2a08      	cmp	r2, #8
   db0ac:	f105 0501 	add.w	r5, r5, #1
   db0b0:	4405      	add	r5, r0
   db0b2:	dc1c      	bgt.n	db0ee <_strtod_l+0x276>
   db0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   db0b6:	220a      	movs	r2, #10
   db0b8:	fb02 3301 	mla	r3, r2, r1, r3
   db0bc:	9309      	str	r3, [sp, #36]	; 0x24
   db0be:	2200      	movs	r2, #0
   db0c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db0c2:	1c59      	adds	r1, r3, #1
   db0c4:	911d      	str	r1, [sp, #116]	; 0x74
   db0c6:	785b      	ldrb	r3, [r3, #1]
   db0c8:	4610      	mov	r0, r2
   db0ca:	e7c9      	b.n	db060 <_strtod_l+0x1e8>
   db0cc:	4638      	mov	r0, r7
   db0ce:	e7d2      	b.n	db076 <_strtod_l+0x1fe>
   db0d0:	2a08      	cmp	r2, #8
   db0d2:	dc04      	bgt.n	db0de <_strtod_l+0x266>
   db0d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db0d6:	434e      	muls	r6, r1
   db0d8:	9609      	str	r6, [sp, #36]	; 0x24
   db0da:	3201      	adds	r2, #1
   db0dc:	e7e2      	b.n	db0a4 <_strtod_l+0x22c>
   db0de:	f102 0c01 	add.w	ip, r2, #1
   db0e2:	f1bc 0f10 	cmp.w	ip, #16
   db0e6:	bfd8      	it	le
   db0e8:	fb01 f909 	mulle.w	r9, r1, r9
   db0ec:	e7f5      	b.n	db0da <_strtod_l+0x262>
   db0ee:	2d10      	cmp	r5, #16
   db0f0:	bfdc      	itt	le
   db0f2:	220a      	movle	r2, #10
   db0f4:	fb02 3909 	mlale	r9, r2, r9, r3
   db0f8:	e7e1      	b.n	db0be <_strtod_l+0x246>
   db0fa:	2300      	movs	r3, #0
   db0fc:	9307      	str	r3, [sp, #28]
   db0fe:	2201      	movs	r2, #1
   db100:	e77c      	b.n	daffc <_strtod_l+0x184>
   db102:	f04f 0c00 	mov.w	ip, #0
   db106:	f108 0302 	add.w	r3, r8, #2
   db10a:	931d      	str	r3, [sp, #116]	; 0x74
   db10c:	f898 3002 	ldrb.w	r3, [r8, #2]
   db110:	e785      	b.n	db01e <_strtod_l+0x1a6>
   db112:	f04f 0c01 	mov.w	ip, #1
   db116:	e7f6      	b.n	db106 <_strtod_l+0x28e>
   db118:	000ddd4c 	.word	0x000ddd4c
   db11c:	000ddbf4 	.word	0x000ddbf4
   db120:	7ff00000 	.word	0x7ff00000
   db124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db126:	1c59      	adds	r1, r3, #1
   db128:	911d      	str	r1, [sp, #116]	; 0x74
   db12a:	785b      	ldrb	r3, [r3, #1]
   db12c:	2b30      	cmp	r3, #48	; 0x30
   db12e:	d0f9      	beq.n	db124 <_strtod_l+0x2ac>
   db130:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db134:	2908      	cmp	r1, #8
   db136:	f63f af79 	bhi.w	db02c <_strtod_l+0x1b4>
   db13a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db13e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db140:	9308      	str	r3, [sp, #32]
   db142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db144:	1c59      	adds	r1, r3, #1
   db146:	911d      	str	r1, [sp, #116]	; 0x74
   db148:	785b      	ldrb	r3, [r3, #1]
   db14a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db14e:	2e09      	cmp	r6, #9
   db150:	d937      	bls.n	db1c2 <_strtod_l+0x34a>
   db152:	9e08      	ldr	r6, [sp, #32]
   db154:	1b89      	subs	r1, r1, r6
   db156:	2908      	cmp	r1, #8
   db158:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db15c:	dc02      	bgt.n	db164 <_strtod_l+0x2ec>
   db15e:	4576      	cmp	r6, lr
   db160:	bfa8      	it	ge
   db162:	4676      	movge	r6, lr
   db164:	f1bc 0f00 	cmp.w	ip, #0
   db168:	d000      	beq.n	db16c <_strtod_l+0x2f4>
   db16a:	4276      	negs	r6, r6
   db16c:	2d00      	cmp	r5, #0
   db16e:	d14f      	bne.n	db210 <_strtod_l+0x398>
   db170:	9904      	ldr	r1, [sp, #16]
   db172:	4301      	orrs	r1, r0
   db174:	f47f aec2 	bne.w	daefc <_strtod_l+0x84>
   db178:	2a00      	cmp	r2, #0
   db17a:	f47f aedb 	bne.w	daf34 <_strtod_l+0xbc>
   db17e:	2b69      	cmp	r3, #105	; 0x69
   db180:	d027      	beq.n	db1d2 <_strtod_l+0x35a>
   db182:	dc24      	bgt.n	db1ce <_strtod_l+0x356>
   db184:	2b49      	cmp	r3, #73	; 0x49
   db186:	d024      	beq.n	db1d2 <_strtod_l+0x35a>
   db188:	2b4e      	cmp	r3, #78	; 0x4e
   db18a:	f47f aed3 	bne.w	daf34 <_strtod_l+0xbc>
   db18e:	499e      	ldr	r1, [pc, #632]	; (db408 <_strtod_l+0x590>)
   db190:	a81d      	add	r0, sp, #116	; 0x74
   db192:	f000 ffb9 	bl	dc108 <__match>
   db196:	2800      	cmp	r0, #0
   db198:	f43f aecc 	beq.w	daf34 <_strtod_l+0xbc>
   db19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db19e:	781b      	ldrb	r3, [r3, #0]
   db1a0:	2b28      	cmp	r3, #40	; 0x28
   db1a2:	d12d      	bne.n	db200 <_strtod_l+0x388>
   db1a4:	4999      	ldr	r1, [pc, #612]	; (db40c <_strtod_l+0x594>)
   db1a6:	aa20      	add	r2, sp, #128	; 0x80
   db1a8:	a81d      	add	r0, sp, #116	; 0x74
   db1aa:	f000 ffc1 	bl	dc130 <__hexnan>
   db1ae:	2805      	cmp	r0, #5
   db1b0:	d126      	bne.n	db200 <_strtod_l+0x388>
   db1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db1b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db1b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db1bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db1c0:	e69c      	b.n	daefc <_strtod_l+0x84>
   db1c2:	210a      	movs	r1, #10
   db1c4:	fb01 3e0e 	mla	lr, r1, lr, r3
   db1c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db1cc:	e7b9      	b.n	db142 <_strtod_l+0x2ca>
   db1ce:	2b6e      	cmp	r3, #110	; 0x6e
   db1d0:	e7db      	b.n	db18a <_strtod_l+0x312>
   db1d2:	498f      	ldr	r1, [pc, #572]	; (db410 <_strtod_l+0x598>)
   db1d4:	a81d      	add	r0, sp, #116	; 0x74
   db1d6:	f000 ff97 	bl	dc108 <__match>
   db1da:	2800      	cmp	r0, #0
   db1dc:	f43f aeaa 	beq.w	daf34 <_strtod_l+0xbc>
   db1e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1e2:	498c      	ldr	r1, [pc, #560]	; (db414 <_strtod_l+0x59c>)
   db1e4:	3b01      	subs	r3, #1
   db1e6:	a81d      	add	r0, sp, #116	; 0x74
   db1e8:	931d      	str	r3, [sp, #116]	; 0x74
   db1ea:	f000 ff8d 	bl	dc108 <__match>
   db1ee:	b910      	cbnz	r0, db1f6 <_strtod_l+0x37e>
   db1f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1f2:	3301      	adds	r3, #1
   db1f4:	931d      	str	r3, [sp, #116]	; 0x74
   db1f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; db424 <_strtod_l+0x5ac>
   db1fa:	f04f 0a00 	mov.w	sl, #0
   db1fe:	e67d      	b.n	daefc <_strtod_l+0x84>
   db200:	4885      	ldr	r0, [pc, #532]	; (db418 <_strtod_l+0x5a0>)
   db202:	f001 fc91 	bl	dcb28 <nan>
   db206:	ed8d 0b04 	vstr	d0, [sp, #16]
   db20a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   db20e:	e675      	b.n	daefc <_strtod_l+0x84>
   db210:	9b07      	ldr	r3, [sp, #28]
   db212:	9809      	ldr	r0, [sp, #36]	; 0x24
   db214:	1af3      	subs	r3, r6, r3
   db216:	2f00      	cmp	r7, #0
   db218:	bf08      	it	eq
   db21a:	462f      	moveq	r7, r5
   db21c:	2d10      	cmp	r5, #16
   db21e:	9308      	str	r3, [sp, #32]
   db220:	46a8      	mov	r8, r5
   db222:	bfa8      	it	ge
   db224:	f04f 0810 	movge.w	r8, #16
   db228:	f7ff f954 	bl	da4d4 <__aeabi_ui2d>
   db22c:	2d09      	cmp	r5, #9
   db22e:	4682      	mov	sl, r0
   db230:	468b      	mov	fp, r1
   db232:	dd13      	ble.n	db25c <_strtod_l+0x3e4>
   db234:	4b79      	ldr	r3, [pc, #484]	; (db41c <_strtod_l+0x5a4>)
   db236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   db23a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db23e:	f7ff f9c3 	bl	da5c8 <__aeabi_dmul>
   db242:	4682      	mov	sl, r0
   db244:	4648      	mov	r0, r9
   db246:	468b      	mov	fp, r1
   db248:	f7ff f944 	bl	da4d4 <__aeabi_ui2d>
   db24c:	4602      	mov	r2, r0
   db24e:	460b      	mov	r3, r1
   db250:	4650      	mov	r0, sl
   db252:	4659      	mov	r1, fp
   db254:	f7ff f802 	bl	da25c <__adddf3>
   db258:	4682      	mov	sl, r0
   db25a:	468b      	mov	fp, r1
   db25c:	2d0f      	cmp	r5, #15
   db25e:	dc38      	bgt.n	db2d2 <_strtod_l+0x45a>
   db260:	9b08      	ldr	r3, [sp, #32]
   db262:	2b00      	cmp	r3, #0
   db264:	f43f ae4a 	beq.w	daefc <_strtod_l+0x84>
   db268:	dd24      	ble.n	db2b4 <_strtod_l+0x43c>
   db26a:	2b16      	cmp	r3, #22
   db26c:	dc0b      	bgt.n	db286 <_strtod_l+0x40e>
   db26e:	4d6b      	ldr	r5, [pc, #428]	; (db41c <_strtod_l+0x5a4>)
   db270:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db274:	e9d5 0100 	ldrd	r0, r1, [r5]
   db278:	4652      	mov	r2, sl
   db27a:	465b      	mov	r3, fp
   db27c:	f7ff f9a4 	bl	da5c8 <__aeabi_dmul>
   db280:	4682      	mov	sl, r0
   db282:	468b      	mov	fp, r1
   db284:	e63a      	b.n	daefc <_strtod_l+0x84>
   db286:	9a08      	ldr	r2, [sp, #32]
   db288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db28c:	4293      	cmp	r3, r2
   db28e:	db20      	blt.n	db2d2 <_strtod_l+0x45a>
   db290:	4c62      	ldr	r4, [pc, #392]	; (db41c <_strtod_l+0x5a4>)
   db292:	f1c5 050f 	rsb	r5, r5, #15
   db296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db29a:	4652      	mov	r2, sl
   db29c:	465b      	mov	r3, fp
   db29e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db2a2:	f7ff f991 	bl	da5c8 <__aeabi_dmul>
   db2a6:	9b08      	ldr	r3, [sp, #32]
   db2a8:	1b5d      	subs	r5, r3, r5
   db2aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db2ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   db2b2:	e7e3      	b.n	db27c <_strtod_l+0x404>
   db2b4:	9b08      	ldr	r3, [sp, #32]
   db2b6:	3316      	adds	r3, #22
   db2b8:	db0b      	blt.n	db2d2 <_strtod_l+0x45a>
   db2ba:	9b07      	ldr	r3, [sp, #28]
   db2bc:	4a57      	ldr	r2, [pc, #348]	; (db41c <_strtod_l+0x5a4>)
   db2be:	1b9e      	subs	r6, r3, r6
   db2c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   db2c8:	4650      	mov	r0, sl
   db2ca:	4659      	mov	r1, fp
   db2cc:	f7ff faa6 	bl	da81c <__aeabi_ddiv>
   db2d0:	e7d6      	b.n	db280 <_strtod_l+0x408>
   db2d2:	9b08      	ldr	r3, [sp, #32]
   db2d4:	eba5 0808 	sub.w	r8, r5, r8
   db2d8:	4498      	add	r8, r3
   db2da:	f1b8 0f00 	cmp.w	r8, #0
   db2de:	dd71      	ble.n	db3c4 <_strtod_l+0x54c>
   db2e0:	f018 030f 	ands.w	r3, r8, #15
   db2e4:	d00a      	beq.n	db2fc <_strtod_l+0x484>
   db2e6:	494d      	ldr	r1, [pc, #308]	; (db41c <_strtod_l+0x5a4>)
   db2e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db2ec:	4652      	mov	r2, sl
   db2ee:	465b      	mov	r3, fp
   db2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   db2f4:	f7ff f968 	bl	da5c8 <__aeabi_dmul>
   db2f8:	4682      	mov	sl, r0
   db2fa:	468b      	mov	fp, r1
   db2fc:	f038 080f 	bics.w	r8, r8, #15
   db300:	d04d      	beq.n	db39e <_strtod_l+0x526>
   db302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db306:	dd22      	ble.n	db34e <_strtod_l+0x4d6>
   db308:	2500      	movs	r5, #0
   db30a:	462e      	mov	r6, r5
   db30c:	9509      	str	r5, [sp, #36]	; 0x24
   db30e:	9507      	str	r5, [sp, #28]
   db310:	2322      	movs	r3, #34	; 0x22
   db312:	f8df b110 	ldr.w	fp, [pc, #272]	; db424 <_strtod_l+0x5ac>
   db316:	6023      	str	r3, [r4, #0]
   db318:	f04f 0a00 	mov.w	sl, #0
   db31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db31e:	2b00      	cmp	r3, #0
   db320:	f43f adec 	beq.w	daefc <_strtod_l+0x84>
   db324:	991e      	ldr	r1, [sp, #120]	; 0x78
   db326:	4620      	mov	r0, r4
   db328:	f000 ffe4 	bl	dc2f4 <_Bfree>
   db32c:	9907      	ldr	r1, [sp, #28]
   db32e:	4620      	mov	r0, r4
   db330:	f000 ffe0 	bl	dc2f4 <_Bfree>
   db334:	4631      	mov	r1, r6
   db336:	4620      	mov	r0, r4
   db338:	f000 ffdc 	bl	dc2f4 <_Bfree>
   db33c:	9909      	ldr	r1, [sp, #36]	; 0x24
   db33e:	4620      	mov	r0, r4
   db340:	f000 ffd8 	bl	dc2f4 <_Bfree>
   db344:	4629      	mov	r1, r5
   db346:	4620      	mov	r0, r4
   db348:	f000 ffd4 	bl	dc2f4 <_Bfree>
   db34c:	e5d6      	b.n	daefc <_strtod_l+0x84>
   db34e:	2300      	movs	r3, #0
   db350:	ea4f 1828 	mov.w	r8, r8, asr #4
   db354:	4650      	mov	r0, sl
   db356:	4659      	mov	r1, fp
   db358:	4699      	mov	r9, r3
   db35a:	f1b8 0f01 	cmp.w	r8, #1
   db35e:	dc21      	bgt.n	db3a4 <_strtod_l+0x52c>
   db360:	b10b      	cbz	r3, db366 <_strtod_l+0x4ee>
   db362:	4682      	mov	sl, r0
   db364:	468b      	mov	fp, r1
   db366:	4b2e      	ldr	r3, [pc, #184]	; (db420 <_strtod_l+0x5a8>)
   db368:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db36c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db370:	4652      	mov	r2, sl
   db372:	465b      	mov	r3, fp
   db374:	e9d9 0100 	ldrd	r0, r1, [r9]
   db378:	f7ff f926 	bl	da5c8 <__aeabi_dmul>
   db37c:	4b29      	ldr	r3, [pc, #164]	; (db424 <_strtod_l+0x5ac>)
   db37e:	460a      	mov	r2, r1
   db380:	400b      	ands	r3, r1
   db382:	4929      	ldr	r1, [pc, #164]	; (db428 <_strtod_l+0x5b0>)
   db384:	428b      	cmp	r3, r1
   db386:	4682      	mov	sl, r0
   db388:	d8be      	bhi.n	db308 <_strtod_l+0x490>
   db38a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db38e:	428b      	cmp	r3, r1
   db390:	bf86      	itte	hi
   db392:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db42c <_strtod_l+0x5b4>
   db396:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db39a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db39e:	2300      	movs	r3, #0
   db3a0:	9304      	str	r3, [sp, #16]
   db3a2:	e081      	b.n	db4a8 <_strtod_l+0x630>
   db3a4:	f018 0f01 	tst.w	r8, #1
   db3a8:	d007      	beq.n	db3ba <_strtod_l+0x542>
   db3aa:	4b1d      	ldr	r3, [pc, #116]	; (db420 <_strtod_l+0x5a8>)
   db3ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db3b4:	f7ff f908 	bl	da5c8 <__aeabi_dmul>
   db3b8:	2301      	movs	r3, #1
   db3ba:	f109 0901 	add.w	r9, r9, #1
   db3be:	ea4f 0868 	mov.w	r8, r8, asr #1
   db3c2:	e7ca      	b.n	db35a <_strtod_l+0x4e2>
   db3c4:	d0eb      	beq.n	db39e <_strtod_l+0x526>
   db3c6:	f1c8 0800 	rsb	r8, r8, #0
   db3ca:	f018 020f 	ands.w	r2, r8, #15
   db3ce:	d00a      	beq.n	db3e6 <_strtod_l+0x56e>
   db3d0:	4b12      	ldr	r3, [pc, #72]	; (db41c <_strtod_l+0x5a4>)
   db3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db3d6:	4650      	mov	r0, sl
   db3d8:	4659      	mov	r1, fp
   db3da:	e9d3 2300 	ldrd	r2, r3, [r3]
   db3de:	f7ff fa1d 	bl	da81c <__aeabi_ddiv>
   db3e2:	4682      	mov	sl, r0
   db3e4:	468b      	mov	fp, r1
   db3e6:	ea5f 1828 	movs.w	r8, r8, asr #4
   db3ea:	d0d8      	beq.n	db39e <_strtod_l+0x526>
   db3ec:	f1b8 0f1f 	cmp.w	r8, #31
   db3f0:	dd1e      	ble.n	db430 <_strtod_l+0x5b8>
   db3f2:	2500      	movs	r5, #0
   db3f4:	462e      	mov	r6, r5
   db3f6:	9509      	str	r5, [sp, #36]	; 0x24
   db3f8:	9507      	str	r5, [sp, #28]
   db3fa:	2322      	movs	r3, #34	; 0x22
   db3fc:	f04f 0a00 	mov.w	sl, #0
   db400:	f04f 0b00 	mov.w	fp, #0
   db404:	6023      	str	r3, [r4, #0]
   db406:	e789      	b.n	db31c <_strtod_l+0x4a4>
   db408:	000ddbef 	.word	0x000ddbef
   db40c:	000ddc08 	.word	0x000ddc08
   db410:	000ddbe6 	.word	0x000ddbe6
   db414:	000ddbe9 	.word	0x000ddbe9
   db418:	000ddbac 	.word	0x000ddbac
   db41c:	000ddd88 	.word	0x000ddd88
   db420:	000ddd60 	.word	0x000ddd60
   db424:	7ff00000 	.word	0x7ff00000
   db428:	7ca00000 	.word	0x7ca00000
   db42c:	7fefffff 	.word	0x7fefffff
   db430:	f018 0310 	ands.w	r3, r8, #16
   db434:	bf18      	it	ne
   db436:	236a      	movne	r3, #106	; 0x6a
   db438:	f8df 93b4 	ldr.w	r9, [pc, #948]	; db7f0 <_strtod_l+0x978>
   db43c:	9304      	str	r3, [sp, #16]
   db43e:	4650      	mov	r0, sl
   db440:	4659      	mov	r1, fp
   db442:	2300      	movs	r3, #0
   db444:	f018 0f01 	tst.w	r8, #1
   db448:	d004      	beq.n	db454 <_strtod_l+0x5dc>
   db44a:	e9d9 2300 	ldrd	r2, r3, [r9]
   db44e:	f7ff f8bb 	bl	da5c8 <__aeabi_dmul>
   db452:	2301      	movs	r3, #1
   db454:	ea5f 0868 	movs.w	r8, r8, asr #1
   db458:	f109 0908 	add.w	r9, r9, #8
   db45c:	d1f2      	bne.n	db444 <_strtod_l+0x5cc>
   db45e:	b10b      	cbz	r3, db464 <_strtod_l+0x5ec>
   db460:	4682      	mov	sl, r0
   db462:	468b      	mov	fp, r1
   db464:	9b04      	ldr	r3, [sp, #16]
   db466:	b1bb      	cbz	r3, db498 <_strtod_l+0x620>
   db468:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db46c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db470:	2b00      	cmp	r3, #0
   db472:	4659      	mov	r1, fp
   db474:	dd10      	ble.n	db498 <_strtod_l+0x620>
   db476:	2b1f      	cmp	r3, #31
   db478:	f340 8128 	ble.w	db6cc <_strtod_l+0x854>
   db47c:	2b34      	cmp	r3, #52	; 0x34
   db47e:	bfde      	ittt	le
   db480:	3b20      	suble	r3, #32
   db482:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db486:	fa02 f303 	lslle.w	r3, r2, r3
   db48a:	f04f 0a00 	mov.w	sl, #0
   db48e:	bfcc      	ite	gt
   db490:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db494:	ea03 0b01 	andle.w	fp, r3, r1
   db498:	2200      	movs	r2, #0
   db49a:	2300      	movs	r3, #0
   db49c:	4650      	mov	r0, sl
   db49e:	4659      	mov	r1, fp
   db4a0:	f7ff fafa 	bl	daa98 <__aeabi_dcmpeq>
   db4a4:	2800      	cmp	r0, #0
   db4a6:	d1a4      	bne.n	db3f2 <_strtod_l+0x57a>
   db4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db4aa:	9300      	str	r3, [sp, #0]
   db4ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   db4ae:	462b      	mov	r3, r5
   db4b0:	463a      	mov	r2, r7
   db4b2:	4620      	mov	r0, r4
   db4b4:	f000 ff73 	bl	dc39e <__s2b>
   db4b8:	9009      	str	r0, [sp, #36]	; 0x24
   db4ba:	2800      	cmp	r0, #0
   db4bc:	f43f af24 	beq.w	db308 <_strtod_l+0x490>
   db4c0:	9b07      	ldr	r3, [sp, #28]
   db4c2:	1b9e      	subs	r6, r3, r6
   db4c4:	9b08      	ldr	r3, [sp, #32]
   db4c6:	2b00      	cmp	r3, #0
   db4c8:	bfb4      	ite	lt
   db4ca:	4633      	movlt	r3, r6
   db4cc:	2300      	movge	r3, #0
   db4ce:	9310      	str	r3, [sp, #64]	; 0x40
   db4d0:	9b08      	ldr	r3, [sp, #32]
   db4d2:	2500      	movs	r5, #0
   db4d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db4d8:	9318      	str	r3, [sp, #96]	; 0x60
   db4da:	462e      	mov	r6, r5
   db4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db4de:	4620      	mov	r0, r4
   db4e0:	6859      	ldr	r1, [r3, #4]
   db4e2:	f000 fed3 	bl	dc28c <_Balloc>
   db4e6:	9007      	str	r0, [sp, #28]
   db4e8:	2800      	cmp	r0, #0
   db4ea:	f43f af11 	beq.w	db310 <_strtod_l+0x498>
   db4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db4f0:	691a      	ldr	r2, [r3, #16]
   db4f2:	3202      	adds	r2, #2
   db4f4:	f103 010c 	add.w	r1, r3, #12
   db4f8:	0092      	lsls	r2, r2, #2
   db4fa:	300c      	adds	r0, #12
   db4fc:	f7ff fbf0 	bl	dace0 <memcpy>
   db500:	ec4b ab10 	vmov	d0, sl, fp
   db504:	aa20      	add	r2, sp, #128	; 0x80
   db506:	a91f      	add	r1, sp, #124	; 0x7c
   db508:	4620      	mov	r0, r4
   db50a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db50e:	f001 fa35 	bl	dc97c <__d2b>
   db512:	901e      	str	r0, [sp, #120]	; 0x78
   db514:	2800      	cmp	r0, #0
   db516:	f43f aefb 	beq.w	db310 <_strtod_l+0x498>
   db51a:	2101      	movs	r1, #1
   db51c:	4620      	mov	r0, r4
   db51e:	f000 ffcc 	bl	dc4ba <__i2b>
   db522:	4606      	mov	r6, r0
   db524:	2800      	cmp	r0, #0
   db526:	f43f aef3 	beq.w	db310 <_strtod_l+0x498>
   db52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db52c:	9904      	ldr	r1, [sp, #16]
   db52e:	2b00      	cmp	r3, #0
   db530:	bfab      	itete	ge
   db532:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db534:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db536:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db538:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db53c:	bfac      	ite	ge
   db53e:	eb03 0902 	addge.w	r9, r3, r2
   db542:	1ad7      	sublt	r7, r2, r3
   db544:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db546:	eba3 0801 	sub.w	r8, r3, r1
   db54a:	4490      	add	r8, r2
   db54c:	4ba3      	ldr	r3, [pc, #652]	; (db7dc <_strtod_l+0x964>)
   db54e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db552:	4598      	cmp	r8, r3
   db554:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db558:	f280 80cc 	bge.w	db6f4 <_strtod_l+0x87c>
   db55c:	eba3 0308 	sub.w	r3, r3, r8
   db560:	2b1f      	cmp	r3, #31
   db562:	eba2 0203 	sub.w	r2, r2, r3
   db566:	f04f 0101 	mov.w	r1, #1
   db56a:	f300 80b6 	bgt.w	db6da <_strtod_l+0x862>
   db56e:	fa01 f303 	lsl.w	r3, r1, r3
   db572:	9311      	str	r3, [sp, #68]	; 0x44
   db574:	2300      	movs	r3, #0
   db576:	930c      	str	r3, [sp, #48]	; 0x30
   db578:	eb09 0802 	add.w	r8, r9, r2
   db57c:	9b04      	ldr	r3, [sp, #16]
   db57e:	45c1      	cmp	r9, r8
   db580:	4417      	add	r7, r2
   db582:	441f      	add	r7, r3
   db584:	464b      	mov	r3, r9
   db586:	bfa8      	it	ge
   db588:	4643      	movge	r3, r8
   db58a:	42bb      	cmp	r3, r7
   db58c:	bfa8      	it	ge
   db58e:	463b      	movge	r3, r7
   db590:	2b00      	cmp	r3, #0
   db592:	bfc2      	ittt	gt
   db594:	eba8 0803 	subgt.w	r8, r8, r3
   db598:	1aff      	subgt	r7, r7, r3
   db59a:	eba9 0903 	subgt.w	r9, r9, r3
   db59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db5a0:	2b00      	cmp	r3, #0
   db5a2:	dd17      	ble.n	db5d4 <_strtod_l+0x75c>
   db5a4:	4631      	mov	r1, r6
   db5a6:	461a      	mov	r2, r3
   db5a8:	4620      	mov	r0, r4
   db5aa:	f001 f82b 	bl	dc604 <__pow5mult>
   db5ae:	4606      	mov	r6, r0
   db5b0:	2800      	cmp	r0, #0
   db5b2:	f43f aead 	beq.w	db310 <_strtod_l+0x498>
   db5b6:	4601      	mov	r1, r0
   db5b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db5ba:	4620      	mov	r0, r4
   db5bc:	f000 ff86 	bl	dc4cc <__multiply>
   db5c0:	900f      	str	r0, [sp, #60]	; 0x3c
   db5c2:	2800      	cmp	r0, #0
   db5c4:	f43f aea4 	beq.w	db310 <_strtod_l+0x498>
   db5c8:	991e      	ldr	r1, [sp, #120]	; 0x78
   db5ca:	4620      	mov	r0, r4
   db5cc:	f000 fe92 	bl	dc2f4 <_Bfree>
   db5d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db5d2:	931e      	str	r3, [sp, #120]	; 0x78
   db5d4:	f1b8 0f00 	cmp.w	r8, #0
   db5d8:	f300 8091 	bgt.w	db6fe <_strtod_l+0x886>
   db5dc:	9b08      	ldr	r3, [sp, #32]
   db5de:	2b00      	cmp	r3, #0
   db5e0:	dd08      	ble.n	db5f4 <_strtod_l+0x77c>
   db5e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db5e4:	9907      	ldr	r1, [sp, #28]
   db5e6:	4620      	mov	r0, r4
   db5e8:	f001 f80c 	bl	dc604 <__pow5mult>
   db5ec:	9007      	str	r0, [sp, #28]
   db5ee:	2800      	cmp	r0, #0
   db5f0:	f43f ae8e 	beq.w	db310 <_strtod_l+0x498>
   db5f4:	2f00      	cmp	r7, #0
   db5f6:	dd08      	ble.n	db60a <_strtod_l+0x792>
   db5f8:	9907      	ldr	r1, [sp, #28]
   db5fa:	463a      	mov	r2, r7
   db5fc:	4620      	mov	r0, r4
   db5fe:	f001 f84f 	bl	dc6a0 <__lshift>
   db602:	9007      	str	r0, [sp, #28]
   db604:	2800      	cmp	r0, #0
   db606:	f43f ae83 	beq.w	db310 <_strtod_l+0x498>
   db60a:	f1b9 0f00 	cmp.w	r9, #0
   db60e:	dd08      	ble.n	db622 <_strtod_l+0x7aa>
   db610:	4631      	mov	r1, r6
   db612:	464a      	mov	r2, r9
   db614:	4620      	mov	r0, r4
   db616:	f001 f843 	bl	dc6a0 <__lshift>
   db61a:	4606      	mov	r6, r0
   db61c:	2800      	cmp	r0, #0
   db61e:	f43f ae77 	beq.w	db310 <_strtod_l+0x498>
   db622:	9a07      	ldr	r2, [sp, #28]
   db624:	991e      	ldr	r1, [sp, #120]	; 0x78
   db626:	4620      	mov	r0, r4
   db628:	f001 f8b5 	bl	dc796 <__mdiff>
   db62c:	4605      	mov	r5, r0
   db62e:	2800      	cmp	r0, #0
   db630:	f43f ae6e 	beq.w	db310 <_strtod_l+0x498>
   db634:	68c3      	ldr	r3, [r0, #12]
   db636:	930f      	str	r3, [sp, #60]	; 0x3c
   db638:	2300      	movs	r3, #0
   db63a:	60c3      	str	r3, [r0, #12]
   db63c:	4631      	mov	r1, r6
   db63e:	f001 f88e 	bl	dc75e <__mcmp>
   db642:	2800      	cmp	r0, #0
   db644:	da65      	bge.n	db712 <_strtod_l+0x89a>
   db646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db648:	ea53 030a 	orrs.w	r3, r3, sl
   db64c:	f040 8087 	bne.w	db75e <_strtod_l+0x8e6>
   db650:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db654:	2b00      	cmp	r3, #0
   db656:	f040 8082 	bne.w	db75e <_strtod_l+0x8e6>
   db65a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db65e:	0d1b      	lsrs	r3, r3, #20
   db660:	051b      	lsls	r3, r3, #20
   db662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db666:	d97a      	bls.n	db75e <_strtod_l+0x8e6>
   db668:	696b      	ldr	r3, [r5, #20]
   db66a:	b913      	cbnz	r3, db672 <_strtod_l+0x7fa>
   db66c:	692b      	ldr	r3, [r5, #16]
   db66e:	2b01      	cmp	r3, #1
   db670:	dd75      	ble.n	db75e <_strtod_l+0x8e6>
   db672:	4629      	mov	r1, r5
   db674:	2201      	movs	r2, #1
   db676:	4620      	mov	r0, r4
   db678:	f001 f812 	bl	dc6a0 <__lshift>
   db67c:	4631      	mov	r1, r6
   db67e:	4605      	mov	r5, r0
   db680:	f001 f86d 	bl	dc75e <__mcmp>
   db684:	2800      	cmp	r0, #0
   db686:	dd6a      	ble.n	db75e <_strtod_l+0x8e6>
   db688:	9904      	ldr	r1, [sp, #16]
   db68a:	4a55      	ldr	r2, [pc, #340]	; (db7e0 <_strtod_l+0x968>)
   db68c:	465b      	mov	r3, fp
   db68e:	2900      	cmp	r1, #0
   db690:	f000 8085 	beq.w	db79e <_strtod_l+0x926>
   db694:	ea02 010b 	and.w	r1, r2, fp
   db698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db69c:	dc7f      	bgt.n	db79e <_strtod_l+0x926>
   db69e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db6a2:	f77f aeaa 	ble.w	db3fa <_strtod_l+0x582>
   db6a6:	4a4f      	ldr	r2, [pc, #316]	; (db7e4 <_strtod_l+0x96c>)
   db6a8:	2300      	movs	r3, #0
   db6aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db6ae:	4650      	mov	r0, sl
   db6b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db6b4:	4659      	mov	r1, fp
   db6b6:	f7fe ff87 	bl	da5c8 <__aeabi_dmul>
   db6ba:	460b      	mov	r3, r1
   db6bc:	4303      	orrs	r3, r0
   db6be:	bf08      	it	eq
   db6c0:	2322      	moveq	r3, #34	; 0x22
   db6c2:	4682      	mov	sl, r0
   db6c4:	468b      	mov	fp, r1
   db6c6:	bf08      	it	eq
   db6c8:	6023      	streq	r3, [r4, #0]
   db6ca:	e62b      	b.n	db324 <_strtod_l+0x4ac>
   db6cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db6d0:	fa02 f303 	lsl.w	r3, r2, r3
   db6d4:	ea03 0a0a 	and.w	sl, r3, sl
   db6d8:	e6de      	b.n	db498 <_strtod_l+0x620>
   db6da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db6de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db6e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db6e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db6ea:	fa01 f308 	lsl.w	r3, r1, r8
   db6ee:	930c      	str	r3, [sp, #48]	; 0x30
   db6f0:	9111      	str	r1, [sp, #68]	; 0x44
   db6f2:	e741      	b.n	db578 <_strtod_l+0x700>
   db6f4:	2300      	movs	r3, #0
   db6f6:	930c      	str	r3, [sp, #48]	; 0x30
   db6f8:	2301      	movs	r3, #1
   db6fa:	9311      	str	r3, [sp, #68]	; 0x44
   db6fc:	e73c      	b.n	db578 <_strtod_l+0x700>
   db6fe:	991e      	ldr	r1, [sp, #120]	; 0x78
   db700:	4642      	mov	r2, r8
   db702:	4620      	mov	r0, r4
   db704:	f000 ffcc 	bl	dc6a0 <__lshift>
   db708:	901e      	str	r0, [sp, #120]	; 0x78
   db70a:	2800      	cmp	r0, #0
   db70c:	f47f af66 	bne.w	db5dc <_strtod_l+0x764>
   db710:	e5fe      	b.n	db310 <_strtod_l+0x498>
   db712:	465f      	mov	r7, fp
   db714:	d16e      	bne.n	db7f4 <_strtod_l+0x97c>
   db716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db718:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db71c:	b342      	cbz	r2, db770 <_strtod_l+0x8f8>
   db71e:	4a32      	ldr	r2, [pc, #200]	; (db7e8 <_strtod_l+0x970>)
   db720:	4293      	cmp	r3, r2
   db722:	d128      	bne.n	db776 <_strtod_l+0x8fe>
   db724:	9b04      	ldr	r3, [sp, #16]
   db726:	4650      	mov	r0, sl
   db728:	b1eb      	cbz	r3, db766 <_strtod_l+0x8ee>
   db72a:	4a2d      	ldr	r2, [pc, #180]	; (db7e0 <_strtod_l+0x968>)
   db72c:	403a      	ands	r2, r7
   db72e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db732:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db736:	d819      	bhi.n	db76c <_strtod_l+0x8f4>
   db738:	0d12      	lsrs	r2, r2, #20
   db73a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db73e:	fa01 f303 	lsl.w	r3, r1, r3
   db742:	4298      	cmp	r0, r3
   db744:	d117      	bne.n	db776 <_strtod_l+0x8fe>
   db746:	4b29      	ldr	r3, [pc, #164]	; (db7ec <_strtod_l+0x974>)
   db748:	429f      	cmp	r7, r3
   db74a:	d102      	bne.n	db752 <_strtod_l+0x8da>
   db74c:	3001      	adds	r0, #1
   db74e:	f43f addf 	beq.w	db310 <_strtod_l+0x498>
   db752:	4b23      	ldr	r3, [pc, #140]	; (db7e0 <_strtod_l+0x968>)
   db754:	403b      	ands	r3, r7
   db756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db75a:	f04f 0a00 	mov.w	sl, #0
   db75e:	9b04      	ldr	r3, [sp, #16]
   db760:	2b00      	cmp	r3, #0
   db762:	d1a0      	bne.n	db6a6 <_strtod_l+0x82e>
   db764:	e5de      	b.n	db324 <_strtod_l+0x4ac>
   db766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db76a:	e7ea      	b.n	db742 <_strtod_l+0x8ca>
   db76c:	460b      	mov	r3, r1
   db76e:	e7e8      	b.n	db742 <_strtod_l+0x8ca>
   db770:	ea53 030a 	orrs.w	r3, r3, sl
   db774:	d088      	beq.n	db688 <_strtod_l+0x810>
   db776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db778:	b1db      	cbz	r3, db7b2 <_strtod_l+0x93a>
   db77a:	423b      	tst	r3, r7
   db77c:	d0ef      	beq.n	db75e <_strtod_l+0x8e6>
   db77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db780:	9a04      	ldr	r2, [sp, #16]
   db782:	4650      	mov	r0, sl
   db784:	4659      	mov	r1, fp
   db786:	b1c3      	cbz	r3, db7ba <_strtod_l+0x942>
   db788:	f7ff fb5a 	bl	dae40 <sulp>
   db78c:	4602      	mov	r2, r0
   db78e:	460b      	mov	r3, r1
   db790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db794:	f7fe fd62 	bl	da25c <__adddf3>
   db798:	4682      	mov	sl, r0
   db79a:	468b      	mov	fp, r1
   db79c:	e7df      	b.n	db75e <_strtod_l+0x8e6>
   db79e:	4013      	ands	r3, r2
   db7a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db7a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db7a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db7ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db7b0:	e7d5      	b.n	db75e <_strtod_l+0x8e6>
   db7b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db7b4:	ea13 0f0a 	tst.w	r3, sl
   db7b8:	e7e0      	b.n	db77c <_strtod_l+0x904>
   db7ba:	f7ff fb41 	bl	dae40 <sulp>
   db7be:	4602      	mov	r2, r0
   db7c0:	460b      	mov	r3, r1
   db7c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db7c6:	f7fe fd47 	bl	da258 <__aeabi_dsub>
   db7ca:	2200      	movs	r2, #0
   db7cc:	2300      	movs	r3, #0
   db7ce:	4682      	mov	sl, r0
   db7d0:	468b      	mov	fp, r1
   db7d2:	f7ff f961 	bl	daa98 <__aeabi_dcmpeq>
   db7d6:	2800      	cmp	r0, #0
   db7d8:	d0c1      	beq.n	db75e <_strtod_l+0x8e6>
   db7da:	e60e      	b.n	db3fa <_strtod_l+0x582>
   db7dc:	fffffc02 	.word	0xfffffc02
   db7e0:	7ff00000 	.word	0x7ff00000
   db7e4:	39500000 	.word	0x39500000
   db7e8:	000fffff 	.word	0x000fffff
   db7ec:	7fefffff 	.word	0x7fefffff
   db7f0:	000ddc20 	.word	0x000ddc20
   db7f4:	4631      	mov	r1, r6
   db7f6:	4628      	mov	r0, r5
   db7f8:	f001 f910 	bl	dca1c <__ratio>
   db7fc:	ec59 8b10 	vmov	r8, r9, d0
   db800:	ee10 0a10 	vmov	r0, s0
   db804:	2200      	movs	r2, #0
   db806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db80a:	4649      	mov	r1, r9
   db80c:	f7ff f958 	bl	daac0 <__aeabi_dcmple>
   db810:	2800      	cmp	r0, #0
   db812:	d07c      	beq.n	db90e <_strtod_l+0xa96>
   db814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db816:	2b00      	cmp	r3, #0
   db818:	d04c      	beq.n	db8b4 <_strtod_l+0xa3c>
   db81a:	4b95      	ldr	r3, [pc, #596]	; (dba70 <_strtod_l+0xbf8>)
   db81c:	2200      	movs	r2, #0
   db81e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db822:	f8df 924c 	ldr.w	r9, [pc, #588]	; dba70 <_strtod_l+0xbf8>
   db826:	f04f 0800 	mov.w	r8, #0
   db82a:	4b92      	ldr	r3, [pc, #584]	; (dba74 <_strtod_l+0xbfc>)
   db82c:	403b      	ands	r3, r7
   db82e:	9311      	str	r3, [sp, #68]	; 0x44
   db830:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db832:	4b91      	ldr	r3, [pc, #580]	; (dba78 <_strtod_l+0xc00>)
   db834:	429a      	cmp	r2, r3
   db836:	f040 80b2 	bne.w	db99e <_strtod_l+0xb26>
   db83a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db842:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db846:	ec4b ab10 	vmov	d0, sl, fp
   db84a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db84e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db852:	f001 f817 	bl	dc884 <__ulp>
   db856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db85a:	ec53 2b10 	vmov	r2, r3, d0
   db85e:	f7fe feb3 	bl	da5c8 <__aeabi_dmul>
   db862:	4652      	mov	r2, sl
   db864:	465b      	mov	r3, fp
   db866:	f7fe fcf9 	bl	da25c <__adddf3>
   db86a:	460b      	mov	r3, r1
   db86c:	4981      	ldr	r1, [pc, #516]	; (dba74 <_strtod_l+0xbfc>)
   db86e:	4a83      	ldr	r2, [pc, #524]	; (dba7c <_strtod_l+0xc04>)
   db870:	4019      	ands	r1, r3
   db872:	4291      	cmp	r1, r2
   db874:	4682      	mov	sl, r0
   db876:	d95e      	bls.n	db936 <_strtod_l+0xabe>
   db878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db87a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db87e:	4293      	cmp	r3, r2
   db880:	d103      	bne.n	db88a <_strtod_l+0xa12>
   db882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db884:	3301      	adds	r3, #1
   db886:	f43f ad43 	beq.w	db310 <_strtod_l+0x498>
   db88a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dba88 <_strtod_l+0xc10>
   db88e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db892:	991e      	ldr	r1, [sp, #120]	; 0x78
   db894:	4620      	mov	r0, r4
   db896:	f000 fd2d 	bl	dc2f4 <_Bfree>
   db89a:	9907      	ldr	r1, [sp, #28]
   db89c:	4620      	mov	r0, r4
   db89e:	f000 fd29 	bl	dc2f4 <_Bfree>
   db8a2:	4631      	mov	r1, r6
   db8a4:	4620      	mov	r0, r4
   db8a6:	f000 fd25 	bl	dc2f4 <_Bfree>
   db8aa:	4629      	mov	r1, r5
   db8ac:	4620      	mov	r0, r4
   db8ae:	f000 fd21 	bl	dc2f4 <_Bfree>
   db8b2:	e613      	b.n	db4dc <_strtod_l+0x664>
   db8b4:	f1ba 0f00 	cmp.w	sl, #0
   db8b8:	d11b      	bne.n	db8f2 <_strtod_l+0xa7a>
   db8ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db8be:	b9f3      	cbnz	r3, db8fe <_strtod_l+0xa86>
   db8c0:	4b6b      	ldr	r3, [pc, #428]	; (dba70 <_strtod_l+0xbf8>)
   db8c2:	2200      	movs	r2, #0
   db8c4:	4640      	mov	r0, r8
   db8c6:	4649      	mov	r1, r9
   db8c8:	f7ff f8f0 	bl	daaac <__aeabi_dcmplt>
   db8cc:	b9d0      	cbnz	r0, db904 <_strtod_l+0xa8c>
   db8ce:	4640      	mov	r0, r8
   db8d0:	4649      	mov	r1, r9
   db8d2:	4b6b      	ldr	r3, [pc, #428]	; (dba80 <_strtod_l+0xc08>)
   db8d4:	2200      	movs	r2, #0
   db8d6:	f7fe fe77 	bl	da5c8 <__aeabi_dmul>
   db8da:	4680      	mov	r8, r0
   db8dc:	4689      	mov	r9, r1
   db8de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db8e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db8e6:	931b      	str	r3, [sp, #108]	; 0x6c
   db8e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db8ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db8f0:	e79b      	b.n	db82a <_strtod_l+0x9b2>
   db8f2:	f1ba 0f01 	cmp.w	sl, #1
   db8f6:	d102      	bne.n	db8fe <_strtod_l+0xa86>
   db8f8:	2f00      	cmp	r7, #0
   db8fa:	f43f ad7e 	beq.w	db3fa <_strtod_l+0x582>
   db8fe:	4b61      	ldr	r3, [pc, #388]	; (dba84 <_strtod_l+0xc0c>)
   db900:	2200      	movs	r2, #0
   db902:	e78c      	b.n	db81e <_strtod_l+0x9a6>
   db904:	f8df 9178 	ldr.w	r9, [pc, #376]	; dba80 <_strtod_l+0xc08>
   db908:	f04f 0800 	mov.w	r8, #0
   db90c:	e7e7      	b.n	db8de <_strtod_l+0xa66>
   db90e:	4b5c      	ldr	r3, [pc, #368]	; (dba80 <_strtod_l+0xc08>)
   db910:	4640      	mov	r0, r8
   db912:	4649      	mov	r1, r9
   db914:	2200      	movs	r2, #0
   db916:	f7fe fe57 	bl	da5c8 <__aeabi_dmul>
   db91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db91c:	4680      	mov	r8, r0
   db91e:	4689      	mov	r9, r1
   db920:	b933      	cbnz	r3, db930 <_strtod_l+0xab8>
   db922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db926:	9012      	str	r0, [sp, #72]	; 0x48
   db928:	9313      	str	r3, [sp, #76]	; 0x4c
   db92a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db92e:	e7dd      	b.n	db8ec <_strtod_l+0xa74>
   db930:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db934:	e7f9      	b.n	db92a <_strtod_l+0xab2>
   db936:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db93a:	9b04      	ldr	r3, [sp, #16]
   db93c:	2b00      	cmp	r3, #0
   db93e:	d1a8      	bne.n	db892 <_strtod_l+0xa1a>
   db940:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db944:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db946:	0d1b      	lsrs	r3, r3, #20
   db948:	051b      	lsls	r3, r3, #20
   db94a:	429a      	cmp	r2, r3
   db94c:	d1a1      	bne.n	db892 <_strtod_l+0xa1a>
   db94e:	4640      	mov	r0, r8
   db950:	4649      	mov	r1, r9
   db952:	f001 f8ff 	bl	dcb54 <__aeabi_d2lz>
   db956:	f7fe fe09 	bl	da56c <__aeabi_l2d>
   db95a:	4602      	mov	r2, r0
   db95c:	460b      	mov	r3, r1
   db95e:	4640      	mov	r0, r8
   db960:	4649      	mov	r1, r9
   db962:	f7fe fc79 	bl	da258 <__aeabi_dsub>
   db966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db968:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db96c:	ea43 030a 	orr.w	r3, r3, sl
   db970:	4313      	orrs	r3, r2
   db972:	4680      	mov	r8, r0
   db974:	4689      	mov	r9, r1
   db976:	d053      	beq.n	dba20 <_strtod_l+0xba8>
   db978:	a335      	add	r3, pc, #212	; (adr r3, dba50 <_strtod_l+0xbd8>)
   db97a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db97e:	f7ff f895 	bl	daaac <__aeabi_dcmplt>
   db982:	2800      	cmp	r0, #0
   db984:	f47f acce 	bne.w	db324 <_strtod_l+0x4ac>
   db988:	a333      	add	r3, pc, #204	; (adr r3, dba58 <_strtod_l+0xbe0>)
   db98a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db98e:	4640      	mov	r0, r8
   db990:	4649      	mov	r1, r9
   db992:	f7ff f8a9 	bl	daae8 <__aeabi_dcmpgt>
   db996:	2800      	cmp	r0, #0
   db998:	f43f af7b 	beq.w	db892 <_strtod_l+0xa1a>
   db99c:	e4c2      	b.n	db324 <_strtod_l+0x4ac>
   db99e:	9b04      	ldr	r3, [sp, #16]
   db9a0:	b333      	cbz	r3, db9f0 <_strtod_l+0xb78>
   db9a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db9a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db9a8:	d822      	bhi.n	db9f0 <_strtod_l+0xb78>
   db9aa:	a32d      	add	r3, pc, #180	; (adr r3, dba60 <_strtod_l+0xbe8>)
   db9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9b0:	4640      	mov	r0, r8
   db9b2:	4649      	mov	r1, r9
   db9b4:	f7ff f884 	bl	daac0 <__aeabi_dcmple>
   db9b8:	b1a0      	cbz	r0, db9e4 <_strtod_l+0xb6c>
   db9ba:	4649      	mov	r1, r9
   db9bc:	4640      	mov	r0, r8
   db9be:	f7ff f8b3 	bl	dab28 <__aeabi_d2uiz>
   db9c2:	2801      	cmp	r0, #1
   db9c4:	bf38      	it	cc
   db9c6:	2001      	movcc	r0, #1
   db9c8:	f7fe fd84 	bl	da4d4 <__aeabi_ui2d>
   db9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db9ce:	4680      	mov	r8, r0
   db9d0:	4689      	mov	r9, r1
   db9d2:	bb13      	cbnz	r3, dba1a <_strtod_l+0xba2>
   db9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db9d8:	9014      	str	r0, [sp, #80]	; 0x50
   db9da:	9315      	str	r3, [sp, #84]	; 0x54
   db9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db9e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db9e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db9e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db9ec:	1a9b      	subs	r3, r3, r2
   db9ee:	930d      	str	r3, [sp, #52]	; 0x34
   db9f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db9f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db9f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db9fc:	f000 ff42 	bl	dc884 <__ulp>
   dba00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dba04:	ec53 2b10 	vmov	r2, r3, d0
   dba08:	f7fe fdde 	bl	da5c8 <__aeabi_dmul>
   dba0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dba10:	f7fe fc24 	bl	da25c <__adddf3>
   dba14:	4682      	mov	sl, r0
   dba16:	468b      	mov	fp, r1
   dba18:	e78f      	b.n	db93a <_strtod_l+0xac2>
   dba1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dba1e:	e7dd      	b.n	db9dc <_strtod_l+0xb64>
   dba20:	a311      	add	r3, pc, #68	; (adr r3, dba68 <_strtod_l+0xbf0>)
   dba22:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba26:	f7ff f841 	bl	daaac <__aeabi_dcmplt>
   dba2a:	e7b4      	b.n	db996 <_strtod_l+0xb1e>
   dba2c:	2300      	movs	r3, #0
   dba2e:	930e      	str	r3, [sp, #56]	; 0x38
   dba30:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dba32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba34:	6013      	str	r3, [r2, #0]
   dba36:	f7ff ba65 	b.w	daf04 <_strtod_l+0x8c>
   dba3a:	2b65      	cmp	r3, #101	; 0x65
   dba3c:	f43f ab5d 	beq.w	db0fa <_strtod_l+0x282>
   dba40:	2b45      	cmp	r3, #69	; 0x45
   dba42:	f43f ab5a 	beq.w	db0fa <_strtod_l+0x282>
   dba46:	2201      	movs	r2, #1
   dba48:	f7ff bb92 	b.w	db170 <_strtod_l+0x2f8>
   dba4c:	f3af 8000 	nop.w
   dba50:	94a03595 	.word	0x94a03595
   dba54:	3fdfffff 	.word	0x3fdfffff
   dba58:	35afe535 	.word	0x35afe535
   dba5c:	3fe00000 	.word	0x3fe00000
   dba60:	ffc00000 	.word	0xffc00000
   dba64:	41dfffff 	.word	0x41dfffff
   dba68:	94a03595 	.word	0x94a03595
   dba6c:	3fcfffff 	.word	0x3fcfffff
   dba70:	3ff00000 	.word	0x3ff00000
   dba74:	7ff00000 	.word	0x7ff00000
   dba78:	7fe00000 	.word	0x7fe00000
   dba7c:	7c9fffff 	.word	0x7c9fffff
   dba80:	3fe00000 	.word	0x3fe00000
   dba84:	bff00000 	.word	0xbff00000
   dba88:	7fefffff 	.word	0x7fefffff

000dba8c <strtod>:
   dba8c:	460a      	mov	r2, r1
   dba8e:	4601      	mov	r1, r0
   dba90:	4802      	ldr	r0, [pc, #8]	; (dba9c <strtod+0x10>)
   dba92:	4b03      	ldr	r3, [pc, #12]	; (dbaa0 <strtod+0x14>)
   dba94:	6800      	ldr	r0, [r0, #0]
   dba96:	f7ff b9ef 	b.w	dae78 <_strtod_l>
   dba9a:	bf00      	nop
   dba9c:	2003d8e0 	.word	0x2003d8e0
   dbaa0:	2003d948 	.word	0x2003d948

000dbaa4 <_strtol_l.isra.0>:
   dbaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbaa8:	4e3a      	ldr	r6, [pc, #232]	; (dbb94 <_strtol_l.isra.0+0xf0>)
   dbaaa:	4686      	mov	lr, r0
   dbaac:	468c      	mov	ip, r1
   dbaae:	4660      	mov	r0, ip
   dbab0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbab4:	5da5      	ldrb	r5, [r4, r6]
   dbab6:	f015 0508 	ands.w	r5, r5, #8
   dbaba:	d1f8      	bne.n	dbaae <_strtol_l.isra.0+0xa>
   dbabc:	2c2d      	cmp	r4, #45	; 0x2d
   dbabe:	d133      	bne.n	dbb28 <_strtol_l.isra.0+0x84>
   dbac0:	f89c 4000 	ldrb.w	r4, [ip]
   dbac4:	f04f 0801 	mov.w	r8, #1
   dbac8:	f100 0c02 	add.w	ip, r0, #2
   dbacc:	2b00      	cmp	r3, #0
   dbace:	d05c      	beq.n	dbb8a <_strtol_l.isra.0+0xe6>
   dbad0:	2b10      	cmp	r3, #16
   dbad2:	d10c      	bne.n	dbaee <_strtol_l.isra.0+0x4a>
   dbad4:	2c30      	cmp	r4, #48	; 0x30
   dbad6:	d10a      	bne.n	dbaee <_strtol_l.isra.0+0x4a>
   dbad8:	f89c 0000 	ldrb.w	r0, [ip]
   dbadc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbae0:	2858      	cmp	r0, #88	; 0x58
   dbae2:	d14d      	bne.n	dbb80 <_strtol_l.isra.0+0xdc>
   dbae4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbae8:	2310      	movs	r3, #16
   dbaea:	f10c 0c02 	add.w	ip, ip, #2
   dbaee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbaf2:	3f01      	subs	r7, #1
   dbaf4:	2600      	movs	r6, #0
   dbaf6:	fbb7 f9f3 	udiv	r9, r7, r3
   dbafa:	4630      	mov	r0, r6
   dbafc:	fb03 7a19 	mls	sl, r3, r9, r7
   dbb00:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbb04:	2d09      	cmp	r5, #9
   dbb06:	d818      	bhi.n	dbb3a <_strtol_l.isra.0+0x96>
   dbb08:	462c      	mov	r4, r5
   dbb0a:	42a3      	cmp	r3, r4
   dbb0c:	dd24      	ble.n	dbb58 <_strtol_l.isra.0+0xb4>
   dbb0e:	1c75      	adds	r5, r6, #1
   dbb10:	d007      	beq.n	dbb22 <_strtol_l.isra.0+0x7e>
   dbb12:	4581      	cmp	r9, r0
   dbb14:	d31d      	bcc.n	dbb52 <_strtol_l.isra.0+0xae>
   dbb16:	d101      	bne.n	dbb1c <_strtol_l.isra.0+0x78>
   dbb18:	45a2      	cmp	sl, r4
   dbb1a:	db1a      	blt.n	dbb52 <_strtol_l.isra.0+0xae>
   dbb1c:	fb00 4003 	mla	r0, r0, r3, r4
   dbb20:	2601      	movs	r6, #1
   dbb22:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbb26:	e7eb      	b.n	dbb00 <_strtol_l.isra.0+0x5c>
   dbb28:	2c2b      	cmp	r4, #43	; 0x2b
   dbb2a:	bf08      	it	eq
   dbb2c:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbb30:	46a8      	mov	r8, r5
   dbb32:	bf08      	it	eq
   dbb34:	f100 0c02 	addeq.w	ip, r0, #2
   dbb38:	e7c8      	b.n	dbacc <_strtol_l.isra.0+0x28>
   dbb3a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbb3e:	2d19      	cmp	r5, #25
   dbb40:	d801      	bhi.n	dbb46 <_strtol_l.isra.0+0xa2>
   dbb42:	3c37      	subs	r4, #55	; 0x37
   dbb44:	e7e1      	b.n	dbb0a <_strtol_l.isra.0+0x66>
   dbb46:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbb4a:	2d19      	cmp	r5, #25
   dbb4c:	d804      	bhi.n	dbb58 <_strtol_l.isra.0+0xb4>
   dbb4e:	3c57      	subs	r4, #87	; 0x57
   dbb50:	e7db      	b.n	dbb0a <_strtol_l.isra.0+0x66>
   dbb52:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbb56:	e7e4      	b.n	dbb22 <_strtol_l.isra.0+0x7e>
   dbb58:	1c73      	adds	r3, r6, #1
   dbb5a:	d106      	bne.n	dbb6a <_strtol_l.isra.0+0xc6>
   dbb5c:	2322      	movs	r3, #34	; 0x22
   dbb5e:	f8ce 3000 	str.w	r3, [lr]
   dbb62:	4638      	mov	r0, r7
   dbb64:	b942      	cbnz	r2, dbb78 <_strtol_l.isra.0+0xd4>
   dbb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb6a:	f1b8 0f00 	cmp.w	r8, #0
   dbb6e:	d000      	beq.n	dbb72 <_strtol_l.isra.0+0xce>
   dbb70:	4240      	negs	r0, r0
   dbb72:	2a00      	cmp	r2, #0
   dbb74:	d0f7      	beq.n	dbb66 <_strtol_l.isra.0+0xc2>
   dbb76:	b10e      	cbz	r6, dbb7c <_strtol_l.isra.0+0xd8>
   dbb78:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbb7c:	6011      	str	r1, [r2, #0]
   dbb7e:	e7f2      	b.n	dbb66 <_strtol_l.isra.0+0xc2>
   dbb80:	2430      	movs	r4, #48	; 0x30
   dbb82:	2b00      	cmp	r3, #0
   dbb84:	d1b3      	bne.n	dbaee <_strtol_l.isra.0+0x4a>
   dbb86:	2308      	movs	r3, #8
   dbb88:	e7b1      	b.n	dbaee <_strtol_l.isra.0+0x4a>
   dbb8a:	2c30      	cmp	r4, #48	; 0x30
   dbb8c:	d0a4      	beq.n	dbad8 <_strtol_l.isra.0+0x34>
   dbb8e:	230a      	movs	r3, #10
   dbb90:	e7ad      	b.n	dbaee <_strtol_l.isra.0+0x4a>
   dbb92:	bf00      	nop
   dbb94:	000ddc49 	.word	0x000ddc49

000dbb98 <strtol>:
   dbb98:	4613      	mov	r3, r2
   dbb9a:	460a      	mov	r2, r1
   dbb9c:	4601      	mov	r1, r0
   dbb9e:	4802      	ldr	r0, [pc, #8]	; (dbba8 <strtol+0x10>)
   dbba0:	6800      	ldr	r0, [r0, #0]
   dbba2:	f7ff bf7f 	b.w	dbaa4 <_strtol_l.isra.0>
   dbba6:	bf00      	nop
   dbba8:	2003d8e0 	.word	0x2003d8e0

000dbbac <rshift>:
   dbbac:	6903      	ldr	r3, [r0, #16]
   dbbae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dbbb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbbb6:	ea4f 1261 	mov.w	r2, r1, asr #5
   dbbba:	f100 0414 	add.w	r4, r0, #20
   dbbbe:	dd45      	ble.n	dbc4c <rshift+0xa0>
   dbbc0:	f011 011f 	ands.w	r1, r1, #31
   dbbc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dbbc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dbbcc:	d10c      	bne.n	dbbe8 <rshift+0x3c>
   dbbce:	f100 0710 	add.w	r7, r0, #16
   dbbd2:	4629      	mov	r1, r5
   dbbd4:	42b1      	cmp	r1, r6
   dbbd6:	d334      	bcc.n	dbc42 <rshift+0x96>
   dbbd8:	1a9b      	subs	r3, r3, r2
   dbbda:	009b      	lsls	r3, r3, #2
   dbbdc:	1eea      	subs	r2, r5, #3
   dbbde:	4296      	cmp	r6, r2
   dbbe0:	bf38      	it	cc
   dbbe2:	2300      	movcc	r3, #0
   dbbe4:	4423      	add	r3, r4
   dbbe6:	e015      	b.n	dbc14 <rshift+0x68>
   dbbe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dbbec:	f1c1 0820 	rsb	r8, r1, #32
   dbbf0:	40cf      	lsrs	r7, r1
   dbbf2:	f105 0e04 	add.w	lr, r5, #4
   dbbf6:	46a1      	mov	r9, r4
   dbbf8:	4576      	cmp	r6, lr
   dbbfa:	46f4      	mov	ip, lr
   dbbfc:	d815      	bhi.n	dbc2a <rshift+0x7e>
   dbbfe:	1a9b      	subs	r3, r3, r2
   dbc00:	009a      	lsls	r2, r3, #2
   dbc02:	3a04      	subs	r2, #4
   dbc04:	3501      	adds	r5, #1
   dbc06:	42ae      	cmp	r6, r5
   dbc08:	bf38      	it	cc
   dbc0a:	2200      	movcc	r2, #0
   dbc0c:	18a3      	adds	r3, r4, r2
   dbc0e:	50a7      	str	r7, [r4, r2]
   dbc10:	b107      	cbz	r7, dbc14 <rshift+0x68>
   dbc12:	3304      	adds	r3, #4
   dbc14:	1b1a      	subs	r2, r3, r4
   dbc16:	42a3      	cmp	r3, r4
   dbc18:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dbc1c:	bf08      	it	eq
   dbc1e:	2300      	moveq	r3, #0
   dbc20:	6102      	str	r2, [r0, #16]
   dbc22:	bf08      	it	eq
   dbc24:	6143      	streq	r3, [r0, #20]
   dbc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbc2a:	f8dc c000 	ldr.w	ip, [ip]
   dbc2e:	fa0c fc08 	lsl.w	ip, ip, r8
   dbc32:	ea4c 0707 	orr.w	r7, ip, r7
   dbc36:	f849 7b04 	str.w	r7, [r9], #4
   dbc3a:	f85e 7b04 	ldr.w	r7, [lr], #4
   dbc3e:	40cf      	lsrs	r7, r1
   dbc40:	e7da      	b.n	dbbf8 <rshift+0x4c>
   dbc42:	f851 cb04 	ldr.w	ip, [r1], #4
   dbc46:	f847 cf04 	str.w	ip, [r7, #4]!
   dbc4a:	e7c3      	b.n	dbbd4 <rshift+0x28>
   dbc4c:	4623      	mov	r3, r4
   dbc4e:	e7e1      	b.n	dbc14 <rshift+0x68>

000dbc50 <__hexdig_fun>:
   dbc50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbc54:	2b09      	cmp	r3, #9
   dbc56:	d802      	bhi.n	dbc5e <__hexdig_fun+0xe>
   dbc58:	3820      	subs	r0, #32
   dbc5a:	b2c0      	uxtb	r0, r0
   dbc5c:	4770      	bx	lr
   dbc5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dbc62:	2b05      	cmp	r3, #5
   dbc64:	d801      	bhi.n	dbc6a <__hexdig_fun+0x1a>
   dbc66:	3847      	subs	r0, #71	; 0x47
   dbc68:	e7f7      	b.n	dbc5a <__hexdig_fun+0xa>
   dbc6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dbc6e:	2b05      	cmp	r3, #5
   dbc70:	d801      	bhi.n	dbc76 <__hexdig_fun+0x26>
   dbc72:	3827      	subs	r0, #39	; 0x27
   dbc74:	e7f1      	b.n	dbc5a <__hexdig_fun+0xa>
   dbc76:	2000      	movs	r0, #0
   dbc78:	4770      	bx	lr
	...

000dbc7c <__gethex>:
   dbc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc80:	ed2d 8b02 	vpush	{d8}
   dbc84:	b089      	sub	sp, #36	; 0x24
   dbc86:	ee08 0a10 	vmov	s16, r0
   dbc8a:	9304      	str	r3, [sp, #16]
   dbc8c:	4bbc      	ldr	r3, [pc, #752]	; (dbf80 <__gethex+0x304>)
   dbc8e:	681b      	ldr	r3, [r3, #0]
   dbc90:	9301      	str	r3, [sp, #4]
   dbc92:	4618      	mov	r0, r3
   dbc94:	468b      	mov	fp, r1
   dbc96:	4690      	mov	r8, r2
   dbc98:	f7ff f8a5 	bl	dade6 <strlen>
   dbc9c:	9b01      	ldr	r3, [sp, #4]
   dbc9e:	f8db 2000 	ldr.w	r2, [fp]
   dbca2:	4403      	add	r3, r0
   dbca4:	4682      	mov	sl, r0
   dbca6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dbcaa:	9305      	str	r3, [sp, #20]
   dbcac:	1c93      	adds	r3, r2, #2
   dbcae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dbcb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dbcb6:	32fe      	adds	r2, #254	; 0xfe
   dbcb8:	18d1      	adds	r1, r2, r3
   dbcba:	461f      	mov	r7, r3
   dbcbc:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbcc0:	9100      	str	r1, [sp, #0]
   dbcc2:	2830      	cmp	r0, #48	; 0x30
   dbcc4:	d0f8      	beq.n	dbcb8 <__gethex+0x3c>
   dbcc6:	f7ff ffc3 	bl	dbc50 <__hexdig_fun>
   dbcca:	4604      	mov	r4, r0
   dbccc:	2800      	cmp	r0, #0
   dbcce:	d13a      	bne.n	dbd46 <__gethex+0xca>
   dbcd0:	9901      	ldr	r1, [sp, #4]
   dbcd2:	4652      	mov	r2, sl
   dbcd4:	4638      	mov	r0, r7
   dbcd6:	f7ff f88e 	bl	dadf6 <strncmp>
   dbcda:	4605      	mov	r5, r0
   dbcdc:	2800      	cmp	r0, #0
   dbcde:	d168      	bne.n	dbdb2 <__gethex+0x136>
   dbce0:	f817 000a 	ldrb.w	r0, [r7, sl]
   dbce4:	eb07 060a 	add.w	r6, r7, sl
   dbce8:	f7ff ffb2 	bl	dbc50 <__hexdig_fun>
   dbcec:	2800      	cmp	r0, #0
   dbcee:	d062      	beq.n	dbdb6 <__gethex+0x13a>
   dbcf0:	4633      	mov	r3, r6
   dbcf2:	7818      	ldrb	r0, [r3, #0]
   dbcf4:	2830      	cmp	r0, #48	; 0x30
   dbcf6:	461f      	mov	r7, r3
   dbcf8:	f103 0301 	add.w	r3, r3, #1
   dbcfc:	d0f9      	beq.n	dbcf2 <__gethex+0x76>
   dbcfe:	f7ff ffa7 	bl	dbc50 <__hexdig_fun>
   dbd02:	2301      	movs	r3, #1
   dbd04:	fab0 f480 	clz	r4, r0
   dbd08:	0964      	lsrs	r4, r4, #5
   dbd0a:	4635      	mov	r5, r6
   dbd0c:	9300      	str	r3, [sp, #0]
   dbd0e:	463a      	mov	r2, r7
   dbd10:	4616      	mov	r6, r2
   dbd12:	3201      	adds	r2, #1
   dbd14:	7830      	ldrb	r0, [r6, #0]
   dbd16:	f7ff ff9b 	bl	dbc50 <__hexdig_fun>
   dbd1a:	2800      	cmp	r0, #0
   dbd1c:	d1f8      	bne.n	dbd10 <__gethex+0x94>
   dbd1e:	9901      	ldr	r1, [sp, #4]
   dbd20:	4652      	mov	r2, sl
   dbd22:	4630      	mov	r0, r6
   dbd24:	f7ff f867 	bl	dadf6 <strncmp>
   dbd28:	b980      	cbnz	r0, dbd4c <__gethex+0xd0>
   dbd2a:	b94d      	cbnz	r5, dbd40 <__gethex+0xc4>
   dbd2c:	eb06 050a 	add.w	r5, r6, sl
   dbd30:	462a      	mov	r2, r5
   dbd32:	4616      	mov	r6, r2
   dbd34:	3201      	adds	r2, #1
   dbd36:	7830      	ldrb	r0, [r6, #0]
   dbd38:	f7ff ff8a 	bl	dbc50 <__hexdig_fun>
   dbd3c:	2800      	cmp	r0, #0
   dbd3e:	d1f8      	bne.n	dbd32 <__gethex+0xb6>
   dbd40:	1bad      	subs	r5, r5, r6
   dbd42:	00ad      	lsls	r5, r5, #2
   dbd44:	e004      	b.n	dbd50 <__gethex+0xd4>
   dbd46:	2400      	movs	r4, #0
   dbd48:	4625      	mov	r5, r4
   dbd4a:	e7e0      	b.n	dbd0e <__gethex+0x92>
   dbd4c:	2d00      	cmp	r5, #0
   dbd4e:	d1f7      	bne.n	dbd40 <__gethex+0xc4>
   dbd50:	7833      	ldrb	r3, [r6, #0]
   dbd52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dbd56:	2b50      	cmp	r3, #80	; 0x50
   dbd58:	d13b      	bne.n	dbdd2 <__gethex+0x156>
   dbd5a:	7873      	ldrb	r3, [r6, #1]
   dbd5c:	2b2b      	cmp	r3, #43	; 0x2b
   dbd5e:	d02c      	beq.n	dbdba <__gethex+0x13e>
   dbd60:	2b2d      	cmp	r3, #45	; 0x2d
   dbd62:	d02e      	beq.n	dbdc2 <__gethex+0x146>
   dbd64:	1c71      	adds	r1, r6, #1
   dbd66:	f04f 0900 	mov.w	r9, #0
   dbd6a:	7808      	ldrb	r0, [r1, #0]
   dbd6c:	f7ff ff70 	bl	dbc50 <__hexdig_fun>
   dbd70:	1e43      	subs	r3, r0, #1
   dbd72:	b2db      	uxtb	r3, r3
   dbd74:	2b18      	cmp	r3, #24
   dbd76:	d82c      	bhi.n	dbdd2 <__gethex+0x156>
   dbd78:	f1a0 0210 	sub.w	r2, r0, #16
   dbd7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dbd80:	f7ff ff66 	bl	dbc50 <__hexdig_fun>
   dbd84:	1e43      	subs	r3, r0, #1
   dbd86:	b2db      	uxtb	r3, r3
   dbd88:	2b18      	cmp	r3, #24
   dbd8a:	d91d      	bls.n	dbdc8 <__gethex+0x14c>
   dbd8c:	f1b9 0f00 	cmp.w	r9, #0
   dbd90:	d000      	beq.n	dbd94 <__gethex+0x118>
   dbd92:	4252      	negs	r2, r2
   dbd94:	4415      	add	r5, r2
   dbd96:	f8cb 1000 	str.w	r1, [fp]
   dbd9a:	b1e4      	cbz	r4, dbdd6 <__gethex+0x15a>
   dbd9c:	9b00      	ldr	r3, [sp, #0]
   dbd9e:	2b00      	cmp	r3, #0
   dbda0:	bf14      	ite	ne
   dbda2:	2700      	movne	r7, #0
   dbda4:	2706      	moveq	r7, #6
   dbda6:	4638      	mov	r0, r7
   dbda8:	b009      	add	sp, #36	; 0x24
   dbdaa:	ecbd 8b02 	vpop	{d8}
   dbdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbdb2:	463e      	mov	r6, r7
   dbdb4:	4625      	mov	r5, r4
   dbdb6:	2401      	movs	r4, #1
   dbdb8:	e7ca      	b.n	dbd50 <__gethex+0xd4>
   dbdba:	f04f 0900 	mov.w	r9, #0
   dbdbe:	1cb1      	adds	r1, r6, #2
   dbdc0:	e7d3      	b.n	dbd6a <__gethex+0xee>
   dbdc2:	f04f 0901 	mov.w	r9, #1
   dbdc6:	e7fa      	b.n	dbdbe <__gethex+0x142>
   dbdc8:	230a      	movs	r3, #10
   dbdca:	fb03 0202 	mla	r2, r3, r2, r0
   dbdce:	3a10      	subs	r2, #16
   dbdd0:	e7d4      	b.n	dbd7c <__gethex+0x100>
   dbdd2:	4631      	mov	r1, r6
   dbdd4:	e7df      	b.n	dbd96 <__gethex+0x11a>
   dbdd6:	1bf3      	subs	r3, r6, r7
   dbdd8:	3b01      	subs	r3, #1
   dbdda:	4621      	mov	r1, r4
   dbddc:	2b07      	cmp	r3, #7
   dbdde:	dc52      	bgt.n	dbe86 <__gethex+0x20a>
   dbde0:	ee18 0a10 	vmov	r0, s16
   dbde4:	f000 fa52 	bl	dc28c <_Balloc>
   dbde8:	f04f 0b00 	mov.w	fp, #0
   dbdec:	f100 0914 	add.w	r9, r0, #20
   dbdf0:	f1ca 0301 	rsb	r3, sl, #1
   dbdf4:	4604      	mov	r4, r0
   dbdf6:	f8cd 9008 	str.w	r9, [sp, #8]
   dbdfa:	f8cd b000 	str.w	fp, [sp]
   dbdfe:	9306      	str	r3, [sp, #24]
   dbe00:	42b7      	cmp	r7, r6
   dbe02:	d343      	bcc.n	dbe8c <__gethex+0x210>
   dbe04:	9802      	ldr	r0, [sp, #8]
   dbe06:	9b00      	ldr	r3, [sp, #0]
   dbe08:	f840 3b04 	str.w	r3, [r0], #4
   dbe0c:	eba0 0009 	sub.w	r0, r0, r9
   dbe10:	1080      	asrs	r0, r0, #2
   dbe12:	0146      	lsls	r6, r0, #5
   dbe14:	6120      	str	r0, [r4, #16]
   dbe16:	4618      	mov	r0, r3
   dbe18:	f000 faff 	bl	dc41a <__hi0bits>
   dbe1c:	1a30      	subs	r0, r6, r0
   dbe1e:	f8d8 6000 	ldr.w	r6, [r8]
   dbe22:	42b0      	cmp	r0, r6
   dbe24:	dd66      	ble.n	dbef4 <__gethex+0x278>
   dbe26:	1b87      	subs	r7, r0, r6
   dbe28:	4639      	mov	r1, r7
   dbe2a:	4620      	mov	r0, r4
   dbe2c:	f000 fe4c 	bl	dcac8 <__any_on>
   dbe30:	4682      	mov	sl, r0
   dbe32:	b1a8      	cbz	r0, dbe60 <__gethex+0x1e4>
   dbe34:	1e7b      	subs	r3, r7, #1
   dbe36:	1159      	asrs	r1, r3, #5
   dbe38:	f003 021f 	and.w	r2, r3, #31
   dbe3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dbe40:	f04f 0a01 	mov.w	sl, #1
   dbe44:	fa0a f202 	lsl.w	r2, sl, r2
   dbe48:	420a      	tst	r2, r1
   dbe4a:	d009      	beq.n	dbe60 <__gethex+0x1e4>
   dbe4c:	4553      	cmp	r3, sl
   dbe4e:	dd05      	ble.n	dbe5c <__gethex+0x1e0>
   dbe50:	1eb9      	subs	r1, r7, #2
   dbe52:	4620      	mov	r0, r4
   dbe54:	f000 fe38 	bl	dcac8 <__any_on>
   dbe58:	2800      	cmp	r0, #0
   dbe5a:	d148      	bne.n	dbeee <__gethex+0x272>
   dbe5c:	f04f 0a02 	mov.w	sl, #2
   dbe60:	4639      	mov	r1, r7
   dbe62:	4620      	mov	r0, r4
   dbe64:	f7ff fea2 	bl	dbbac <rshift>
   dbe68:	443d      	add	r5, r7
   dbe6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbe6e:	42ab      	cmp	r3, r5
   dbe70:	da4f      	bge.n	dbf12 <__gethex+0x296>
   dbe72:	ee18 0a10 	vmov	r0, s16
   dbe76:	4621      	mov	r1, r4
   dbe78:	f000 fa3c 	bl	dc2f4 <_Bfree>
   dbe7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbe7e:	2300      	movs	r3, #0
   dbe80:	6013      	str	r3, [r2, #0]
   dbe82:	27a3      	movs	r7, #163	; 0xa3
   dbe84:	e78f      	b.n	dbda6 <__gethex+0x12a>
   dbe86:	3101      	adds	r1, #1
   dbe88:	105b      	asrs	r3, r3, #1
   dbe8a:	e7a7      	b.n	dbddc <__gethex+0x160>
   dbe8c:	1e73      	subs	r3, r6, #1
   dbe8e:	9a05      	ldr	r2, [sp, #20]
   dbe90:	9303      	str	r3, [sp, #12]
   dbe92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dbe96:	4293      	cmp	r3, r2
   dbe98:	d019      	beq.n	dbece <__gethex+0x252>
   dbe9a:	f1bb 0f20 	cmp.w	fp, #32
   dbe9e:	d107      	bne.n	dbeb0 <__gethex+0x234>
   dbea0:	9b02      	ldr	r3, [sp, #8]
   dbea2:	9a00      	ldr	r2, [sp, #0]
   dbea4:	f843 2b04 	str.w	r2, [r3], #4
   dbea8:	9302      	str	r3, [sp, #8]
   dbeaa:	2300      	movs	r3, #0
   dbeac:	9300      	str	r3, [sp, #0]
   dbeae:	469b      	mov	fp, r3
   dbeb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dbeb4:	f7ff fecc 	bl	dbc50 <__hexdig_fun>
   dbeb8:	9b00      	ldr	r3, [sp, #0]
   dbeba:	f000 000f 	and.w	r0, r0, #15
   dbebe:	fa00 f00b 	lsl.w	r0, r0, fp
   dbec2:	4303      	orrs	r3, r0
   dbec4:	9300      	str	r3, [sp, #0]
   dbec6:	f10b 0b04 	add.w	fp, fp, #4
   dbeca:	9b03      	ldr	r3, [sp, #12]
   dbecc:	e00d      	b.n	dbeea <__gethex+0x26e>
   dbece:	9b03      	ldr	r3, [sp, #12]
   dbed0:	9a06      	ldr	r2, [sp, #24]
   dbed2:	4413      	add	r3, r2
   dbed4:	42bb      	cmp	r3, r7
   dbed6:	d3e0      	bcc.n	dbe9a <__gethex+0x21e>
   dbed8:	4618      	mov	r0, r3
   dbeda:	9901      	ldr	r1, [sp, #4]
   dbedc:	9307      	str	r3, [sp, #28]
   dbede:	4652      	mov	r2, sl
   dbee0:	f7fe ff89 	bl	dadf6 <strncmp>
   dbee4:	9b07      	ldr	r3, [sp, #28]
   dbee6:	2800      	cmp	r0, #0
   dbee8:	d1d7      	bne.n	dbe9a <__gethex+0x21e>
   dbeea:	461e      	mov	r6, r3
   dbeec:	e788      	b.n	dbe00 <__gethex+0x184>
   dbeee:	f04f 0a03 	mov.w	sl, #3
   dbef2:	e7b5      	b.n	dbe60 <__gethex+0x1e4>
   dbef4:	da0a      	bge.n	dbf0c <__gethex+0x290>
   dbef6:	1a37      	subs	r7, r6, r0
   dbef8:	4621      	mov	r1, r4
   dbefa:	ee18 0a10 	vmov	r0, s16
   dbefe:	463a      	mov	r2, r7
   dbf00:	f000 fbce 	bl	dc6a0 <__lshift>
   dbf04:	1bed      	subs	r5, r5, r7
   dbf06:	4604      	mov	r4, r0
   dbf08:	f100 0914 	add.w	r9, r0, #20
   dbf0c:	f04f 0a00 	mov.w	sl, #0
   dbf10:	e7ab      	b.n	dbe6a <__gethex+0x1ee>
   dbf12:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dbf16:	42a8      	cmp	r0, r5
   dbf18:	dd6d      	ble.n	dbff6 <__gethex+0x37a>
   dbf1a:	1b45      	subs	r5, r0, r5
   dbf1c:	42ae      	cmp	r6, r5
   dbf1e:	dc31      	bgt.n	dbf84 <__gethex+0x308>
   dbf20:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dbf24:	2b02      	cmp	r3, #2
   dbf26:	d023      	beq.n	dbf70 <__gethex+0x2f4>
   dbf28:	2b03      	cmp	r3, #3
   dbf2a:	d025      	beq.n	dbf78 <__gethex+0x2fc>
   dbf2c:	2b01      	cmp	r3, #1
   dbf2e:	d115      	bne.n	dbf5c <__gethex+0x2e0>
   dbf30:	42ae      	cmp	r6, r5
   dbf32:	d113      	bne.n	dbf5c <__gethex+0x2e0>
   dbf34:	2e01      	cmp	r6, #1
   dbf36:	d10b      	bne.n	dbf50 <__gethex+0x2d4>
   dbf38:	9a04      	ldr	r2, [sp, #16]
   dbf3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dbf3e:	6013      	str	r3, [r2, #0]
   dbf40:	2301      	movs	r3, #1
   dbf42:	6123      	str	r3, [r4, #16]
   dbf44:	f8c9 3000 	str.w	r3, [r9]
   dbf48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbf4a:	2762      	movs	r7, #98	; 0x62
   dbf4c:	601c      	str	r4, [r3, #0]
   dbf4e:	e72a      	b.n	dbda6 <__gethex+0x12a>
   dbf50:	1e71      	subs	r1, r6, #1
   dbf52:	4620      	mov	r0, r4
   dbf54:	f000 fdb8 	bl	dcac8 <__any_on>
   dbf58:	2800      	cmp	r0, #0
   dbf5a:	d1ed      	bne.n	dbf38 <__gethex+0x2bc>
   dbf5c:	ee18 0a10 	vmov	r0, s16
   dbf60:	4621      	mov	r1, r4
   dbf62:	f000 f9c7 	bl	dc2f4 <_Bfree>
   dbf66:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbf68:	2300      	movs	r3, #0
   dbf6a:	6013      	str	r3, [r2, #0]
   dbf6c:	2750      	movs	r7, #80	; 0x50
   dbf6e:	e71a      	b.n	dbda6 <__gethex+0x12a>
   dbf70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbf72:	2b00      	cmp	r3, #0
   dbf74:	d1f2      	bne.n	dbf5c <__gethex+0x2e0>
   dbf76:	e7df      	b.n	dbf38 <__gethex+0x2bc>
   dbf78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbf7a:	2b00      	cmp	r3, #0
   dbf7c:	d1dc      	bne.n	dbf38 <__gethex+0x2bc>
   dbf7e:	e7ed      	b.n	dbf5c <__gethex+0x2e0>
   dbf80:	000ddd4c 	.word	0x000ddd4c
   dbf84:	1e6f      	subs	r7, r5, #1
   dbf86:	f1ba 0f00 	cmp.w	sl, #0
   dbf8a:	d131      	bne.n	dbff0 <__gethex+0x374>
   dbf8c:	b127      	cbz	r7, dbf98 <__gethex+0x31c>
   dbf8e:	4639      	mov	r1, r7
   dbf90:	4620      	mov	r0, r4
   dbf92:	f000 fd99 	bl	dcac8 <__any_on>
   dbf96:	4682      	mov	sl, r0
   dbf98:	117b      	asrs	r3, r7, #5
   dbf9a:	2101      	movs	r1, #1
   dbf9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dbfa0:	f007 071f 	and.w	r7, r7, #31
   dbfa4:	fa01 f707 	lsl.w	r7, r1, r7
   dbfa8:	421f      	tst	r7, r3
   dbfaa:	4629      	mov	r1, r5
   dbfac:	4620      	mov	r0, r4
   dbfae:	bf18      	it	ne
   dbfb0:	f04a 0a02 	orrne.w	sl, sl, #2
   dbfb4:	1b76      	subs	r6, r6, r5
   dbfb6:	f7ff fdf9 	bl	dbbac <rshift>
   dbfba:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dbfbe:	2702      	movs	r7, #2
   dbfc0:	f1ba 0f00 	cmp.w	sl, #0
   dbfc4:	d048      	beq.n	dc058 <__gethex+0x3dc>
   dbfc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dbfca:	2b02      	cmp	r3, #2
   dbfcc:	d015      	beq.n	dbffa <__gethex+0x37e>
   dbfce:	2b03      	cmp	r3, #3
   dbfd0:	d017      	beq.n	dc002 <__gethex+0x386>
   dbfd2:	2b01      	cmp	r3, #1
   dbfd4:	d109      	bne.n	dbfea <__gethex+0x36e>
   dbfd6:	f01a 0f02 	tst.w	sl, #2
   dbfda:	d006      	beq.n	dbfea <__gethex+0x36e>
   dbfdc:	f8d9 0000 	ldr.w	r0, [r9]
   dbfe0:	ea4a 0a00 	orr.w	sl, sl, r0
   dbfe4:	f01a 0f01 	tst.w	sl, #1
   dbfe8:	d10e      	bne.n	dc008 <__gethex+0x38c>
   dbfea:	f047 0710 	orr.w	r7, r7, #16
   dbfee:	e033      	b.n	dc058 <__gethex+0x3dc>
   dbff0:	f04f 0a01 	mov.w	sl, #1
   dbff4:	e7d0      	b.n	dbf98 <__gethex+0x31c>
   dbff6:	2701      	movs	r7, #1
   dbff8:	e7e2      	b.n	dbfc0 <__gethex+0x344>
   dbffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbffc:	f1c3 0301 	rsb	r3, r3, #1
   dc000:	9315      	str	r3, [sp, #84]	; 0x54
   dc002:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc004:	2b00      	cmp	r3, #0
   dc006:	d0f0      	beq.n	dbfea <__gethex+0x36e>
   dc008:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc00c:	f104 0314 	add.w	r3, r4, #20
   dc010:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc014:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc018:	f04f 0c00 	mov.w	ip, #0
   dc01c:	4618      	mov	r0, r3
   dc01e:	f853 2b04 	ldr.w	r2, [r3], #4
   dc022:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc026:	d01c      	beq.n	dc062 <__gethex+0x3e6>
   dc028:	3201      	adds	r2, #1
   dc02a:	6002      	str	r2, [r0, #0]
   dc02c:	2f02      	cmp	r7, #2
   dc02e:	f104 0314 	add.w	r3, r4, #20
   dc032:	d13a      	bne.n	dc0aa <__gethex+0x42e>
   dc034:	f8d8 2000 	ldr.w	r2, [r8]
   dc038:	3a01      	subs	r2, #1
   dc03a:	42b2      	cmp	r2, r6
   dc03c:	d10a      	bne.n	dc054 <__gethex+0x3d8>
   dc03e:	1171      	asrs	r1, r6, #5
   dc040:	2201      	movs	r2, #1
   dc042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc046:	f006 061f 	and.w	r6, r6, #31
   dc04a:	fa02 f606 	lsl.w	r6, r2, r6
   dc04e:	421e      	tst	r6, r3
   dc050:	bf18      	it	ne
   dc052:	4617      	movne	r7, r2
   dc054:	f047 0720 	orr.w	r7, r7, #32
   dc058:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc05a:	601c      	str	r4, [r3, #0]
   dc05c:	9b04      	ldr	r3, [sp, #16]
   dc05e:	601d      	str	r5, [r3, #0]
   dc060:	e6a1      	b.n	dbda6 <__gethex+0x12a>
   dc062:	4299      	cmp	r1, r3
   dc064:	f843 cc04 	str.w	ip, [r3, #-4]
   dc068:	d8d8      	bhi.n	dc01c <__gethex+0x3a0>
   dc06a:	68a3      	ldr	r3, [r4, #8]
   dc06c:	4599      	cmp	r9, r3
   dc06e:	db14      	blt.n	dc09a <__gethex+0x41e>
   dc070:	6861      	ldr	r1, [r4, #4]
   dc072:	ee18 0a10 	vmov	r0, s16
   dc076:	3101      	adds	r1, #1
   dc078:	f000 f908 	bl	dc28c <_Balloc>
   dc07c:	6922      	ldr	r2, [r4, #16]
   dc07e:	3202      	adds	r2, #2
   dc080:	f104 010c 	add.w	r1, r4, #12
   dc084:	4682      	mov	sl, r0
   dc086:	0092      	lsls	r2, r2, #2
   dc088:	300c      	adds	r0, #12
   dc08a:	f7fe fe29 	bl	dace0 <memcpy>
   dc08e:	4621      	mov	r1, r4
   dc090:	ee18 0a10 	vmov	r0, s16
   dc094:	f000 f92e 	bl	dc2f4 <_Bfree>
   dc098:	4654      	mov	r4, sl
   dc09a:	6923      	ldr	r3, [r4, #16]
   dc09c:	1c5a      	adds	r2, r3, #1
   dc09e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc0a2:	6122      	str	r2, [r4, #16]
   dc0a4:	2201      	movs	r2, #1
   dc0a6:	615a      	str	r2, [r3, #20]
   dc0a8:	e7c0      	b.n	dc02c <__gethex+0x3b0>
   dc0aa:	6922      	ldr	r2, [r4, #16]
   dc0ac:	454a      	cmp	r2, r9
   dc0ae:	dd0b      	ble.n	dc0c8 <__gethex+0x44c>
   dc0b0:	2101      	movs	r1, #1
   dc0b2:	4620      	mov	r0, r4
   dc0b4:	f7ff fd7a 	bl	dbbac <rshift>
   dc0b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc0bc:	3501      	adds	r5, #1
   dc0be:	42ab      	cmp	r3, r5
   dc0c0:	f6ff aed7 	blt.w	dbe72 <__gethex+0x1f6>
   dc0c4:	2701      	movs	r7, #1
   dc0c6:	e7c5      	b.n	dc054 <__gethex+0x3d8>
   dc0c8:	f016 061f 	ands.w	r6, r6, #31
   dc0cc:	d0fa      	beq.n	dc0c4 <__gethex+0x448>
   dc0ce:	449b      	add	fp, r3
   dc0d0:	f1c6 0620 	rsb	r6, r6, #32
   dc0d4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc0d8:	f000 f99f 	bl	dc41a <__hi0bits>
   dc0dc:	42b0      	cmp	r0, r6
   dc0de:	dbe7      	blt.n	dc0b0 <__gethex+0x434>
   dc0e0:	e7f0      	b.n	dc0c4 <__gethex+0x448>
   dc0e2:	bf00      	nop

000dc0e4 <L_shift>:
   dc0e4:	f1c2 0208 	rsb	r2, r2, #8
   dc0e8:	0092      	lsls	r2, r2, #2
   dc0ea:	b570      	push	{r4, r5, r6, lr}
   dc0ec:	f1c2 0620 	rsb	r6, r2, #32
   dc0f0:	6843      	ldr	r3, [r0, #4]
   dc0f2:	6804      	ldr	r4, [r0, #0]
   dc0f4:	fa03 f506 	lsl.w	r5, r3, r6
   dc0f8:	432c      	orrs	r4, r5
   dc0fa:	40d3      	lsrs	r3, r2
   dc0fc:	6004      	str	r4, [r0, #0]
   dc0fe:	f840 3f04 	str.w	r3, [r0, #4]!
   dc102:	4288      	cmp	r0, r1
   dc104:	d3f4      	bcc.n	dc0f0 <L_shift+0xc>
   dc106:	bd70      	pop	{r4, r5, r6, pc}

000dc108 <__match>:
   dc108:	b530      	push	{r4, r5, lr}
   dc10a:	6803      	ldr	r3, [r0, #0]
   dc10c:	3301      	adds	r3, #1
   dc10e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc112:	b914      	cbnz	r4, dc11a <__match+0x12>
   dc114:	6003      	str	r3, [r0, #0]
   dc116:	2001      	movs	r0, #1
   dc118:	bd30      	pop	{r4, r5, pc}
   dc11a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc11e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc122:	2d19      	cmp	r5, #25
   dc124:	bf98      	it	ls
   dc126:	3220      	addls	r2, #32
   dc128:	42a2      	cmp	r2, r4
   dc12a:	d0f0      	beq.n	dc10e <__match+0x6>
   dc12c:	2000      	movs	r0, #0
   dc12e:	e7f3      	b.n	dc118 <__match+0x10>

000dc130 <__hexnan>:
   dc130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc134:	680b      	ldr	r3, [r1, #0]
   dc136:	6801      	ldr	r1, [r0, #0]
   dc138:	115e      	asrs	r6, r3, #5
   dc13a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc13e:	f013 031f 	ands.w	r3, r3, #31
   dc142:	b087      	sub	sp, #28
   dc144:	bf18      	it	ne
   dc146:	3604      	addne	r6, #4
   dc148:	2500      	movs	r5, #0
   dc14a:	1f37      	subs	r7, r6, #4
   dc14c:	4682      	mov	sl, r0
   dc14e:	4690      	mov	r8, r2
   dc150:	9301      	str	r3, [sp, #4]
   dc152:	f846 5c04 	str.w	r5, [r6, #-4]
   dc156:	46b9      	mov	r9, r7
   dc158:	463c      	mov	r4, r7
   dc15a:	9502      	str	r5, [sp, #8]
   dc15c:	46ab      	mov	fp, r5
   dc15e:	784a      	ldrb	r2, [r1, #1]
   dc160:	1c4b      	adds	r3, r1, #1
   dc162:	9303      	str	r3, [sp, #12]
   dc164:	b342      	cbz	r2, dc1b8 <__hexnan+0x88>
   dc166:	4610      	mov	r0, r2
   dc168:	9105      	str	r1, [sp, #20]
   dc16a:	9204      	str	r2, [sp, #16]
   dc16c:	f7ff fd70 	bl	dbc50 <__hexdig_fun>
   dc170:	2800      	cmp	r0, #0
   dc172:	d14f      	bne.n	dc214 <__hexnan+0xe4>
   dc174:	9a04      	ldr	r2, [sp, #16]
   dc176:	9905      	ldr	r1, [sp, #20]
   dc178:	2a20      	cmp	r2, #32
   dc17a:	d818      	bhi.n	dc1ae <__hexnan+0x7e>
   dc17c:	9b02      	ldr	r3, [sp, #8]
   dc17e:	459b      	cmp	fp, r3
   dc180:	dd13      	ble.n	dc1aa <__hexnan+0x7a>
   dc182:	454c      	cmp	r4, r9
   dc184:	d206      	bcs.n	dc194 <__hexnan+0x64>
   dc186:	2d07      	cmp	r5, #7
   dc188:	dc04      	bgt.n	dc194 <__hexnan+0x64>
   dc18a:	462a      	mov	r2, r5
   dc18c:	4649      	mov	r1, r9
   dc18e:	4620      	mov	r0, r4
   dc190:	f7ff ffa8 	bl	dc0e4 <L_shift>
   dc194:	4544      	cmp	r4, r8
   dc196:	d950      	bls.n	dc23a <__hexnan+0x10a>
   dc198:	2300      	movs	r3, #0
   dc19a:	f1a4 0904 	sub.w	r9, r4, #4
   dc19e:	f844 3c04 	str.w	r3, [r4, #-4]
   dc1a2:	f8cd b008 	str.w	fp, [sp, #8]
   dc1a6:	464c      	mov	r4, r9
   dc1a8:	461d      	mov	r5, r3
   dc1aa:	9903      	ldr	r1, [sp, #12]
   dc1ac:	e7d7      	b.n	dc15e <__hexnan+0x2e>
   dc1ae:	2a29      	cmp	r2, #41	; 0x29
   dc1b0:	d156      	bne.n	dc260 <__hexnan+0x130>
   dc1b2:	3102      	adds	r1, #2
   dc1b4:	f8ca 1000 	str.w	r1, [sl]
   dc1b8:	f1bb 0f00 	cmp.w	fp, #0
   dc1bc:	d050      	beq.n	dc260 <__hexnan+0x130>
   dc1be:	454c      	cmp	r4, r9
   dc1c0:	d206      	bcs.n	dc1d0 <__hexnan+0xa0>
   dc1c2:	2d07      	cmp	r5, #7
   dc1c4:	dc04      	bgt.n	dc1d0 <__hexnan+0xa0>
   dc1c6:	462a      	mov	r2, r5
   dc1c8:	4649      	mov	r1, r9
   dc1ca:	4620      	mov	r0, r4
   dc1cc:	f7ff ff8a 	bl	dc0e4 <L_shift>
   dc1d0:	4544      	cmp	r4, r8
   dc1d2:	d934      	bls.n	dc23e <__hexnan+0x10e>
   dc1d4:	f1a8 0204 	sub.w	r2, r8, #4
   dc1d8:	4623      	mov	r3, r4
   dc1da:	f853 1b04 	ldr.w	r1, [r3], #4
   dc1de:	f842 1f04 	str.w	r1, [r2, #4]!
   dc1e2:	429f      	cmp	r7, r3
   dc1e4:	d2f9      	bcs.n	dc1da <__hexnan+0xaa>
   dc1e6:	1b3b      	subs	r3, r7, r4
   dc1e8:	f023 0303 	bic.w	r3, r3, #3
   dc1ec:	3304      	adds	r3, #4
   dc1ee:	3401      	adds	r4, #1
   dc1f0:	3e03      	subs	r6, #3
   dc1f2:	42b4      	cmp	r4, r6
   dc1f4:	bf88      	it	hi
   dc1f6:	2304      	movhi	r3, #4
   dc1f8:	4443      	add	r3, r8
   dc1fa:	2200      	movs	r2, #0
   dc1fc:	f843 2b04 	str.w	r2, [r3], #4
   dc200:	429f      	cmp	r7, r3
   dc202:	d2fb      	bcs.n	dc1fc <__hexnan+0xcc>
   dc204:	683b      	ldr	r3, [r7, #0]
   dc206:	b91b      	cbnz	r3, dc210 <__hexnan+0xe0>
   dc208:	4547      	cmp	r7, r8
   dc20a:	d127      	bne.n	dc25c <__hexnan+0x12c>
   dc20c:	2301      	movs	r3, #1
   dc20e:	603b      	str	r3, [r7, #0]
   dc210:	2005      	movs	r0, #5
   dc212:	e026      	b.n	dc262 <__hexnan+0x132>
   dc214:	3501      	adds	r5, #1
   dc216:	2d08      	cmp	r5, #8
   dc218:	f10b 0b01 	add.w	fp, fp, #1
   dc21c:	dd06      	ble.n	dc22c <__hexnan+0xfc>
   dc21e:	4544      	cmp	r4, r8
   dc220:	d9c3      	bls.n	dc1aa <__hexnan+0x7a>
   dc222:	2300      	movs	r3, #0
   dc224:	f844 3c04 	str.w	r3, [r4, #-4]
   dc228:	2501      	movs	r5, #1
   dc22a:	3c04      	subs	r4, #4
   dc22c:	6822      	ldr	r2, [r4, #0]
   dc22e:	f000 000f 	and.w	r0, r0, #15
   dc232:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dc236:	6022      	str	r2, [r4, #0]
   dc238:	e7b7      	b.n	dc1aa <__hexnan+0x7a>
   dc23a:	2508      	movs	r5, #8
   dc23c:	e7b5      	b.n	dc1aa <__hexnan+0x7a>
   dc23e:	9b01      	ldr	r3, [sp, #4]
   dc240:	2b00      	cmp	r3, #0
   dc242:	d0df      	beq.n	dc204 <__hexnan+0xd4>
   dc244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc248:	f1c3 0320 	rsb	r3, r3, #32
   dc24c:	fa22 f303 	lsr.w	r3, r2, r3
   dc250:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc254:	401a      	ands	r2, r3
   dc256:	f846 2c04 	str.w	r2, [r6, #-4]
   dc25a:	e7d3      	b.n	dc204 <__hexnan+0xd4>
   dc25c:	3f04      	subs	r7, #4
   dc25e:	e7d1      	b.n	dc204 <__hexnan+0xd4>
   dc260:	2004      	movs	r0, #4
   dc262:	b007      	add	sp, #28
   dc264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc268 <__ascii_mbtowc>:
   dc268:	b082      	sub	sp, #8
   dc26a:	b901      	cbnz	r1, dc26e <__ascii_mbtowc+0x6>
   dc26c:	a901      	add	r1, sp, #4
   dc26e:	b142      	cbz	r2, dc282 <__ascii_mbtowc+0x1a>
   dc270:	b14b      	cbz	r3, dc286 <__ascii_mbtowc+0x1e>
   dc272:	7813      	ldrb	r3, [r2, #0]
   dc274:	600b      	str	r3, [r1, #0]
   dc276:	7812      	ldrb	r2, [r2, #0]
   dc278:	1e10      	subs	r0, r2, #0
   dc27a:	bf18      	it	ne
   dc27c:	2001      	movne	r0, #1
   dc27e:	b002      	add	sp, #8
   dc280:	4770      	bx	lr
   dc282:	4610      	mov	r0, r2
   dc284:	e7fb      	b.n	dc27e <__ascii_mbtowc+0x16>
   dc286:	f06f 0001 	mvn.w	r0, #1
   dc28a:	e7f8      	b.n	dc27e <__ascii_mbtowc+0x16>

000dc28c <_Balloc>:
   dc28c:	b570      	push	{r4, r5, r6, lr}
   dc28e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc290:	4604      	mov	r4, r0
   dc292:	460d      	mov	r5, r1
   dc294:	b93e      	cbnz	r6, dc2a6 <_Balloc+0x1a>
   dc296:	2010      	movs	r0, #16
   dc298:	f7fc f906 	bl	d84a8 <malloc>
   dc29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc2a0:	6260      	str	r0, [r4, #36]	; 0x24
   dc2a2:	6006      	str	r6, [r0, #0]
   dc2a4:	60c6      	str	r6, [r0, #12]
   dc2a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dc2a8:	68f3      	ldr	r3, [r6, #12]
   dc2aa:	b183      	cbz	r3, dc2ce <_Balloc+0x42>
   dc2ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc2ae:	68db      	ldr	r3, [r3, #12]
   dc2b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dc2b4:	b9b8      	cbnz	r0, dc2e6 <_Balloc+0x5a>
   dc2b6:	2101      	movs	r1, #1
   dc2b8:	fa01 f605 	lsl.w	r6, r1, r5
   dc2bc:	1d72      	adds	r2, r6, #5
   dc2be:	0092      	lsls	r2, r2, #2
   dc2c0:	4620      	mov	r0, r4
   dc2c2:	f000 fc22 	bl	dcb0a <_calloc_r>
   dc2c6:	b160      	cbz	r0, dc2e2 <_Balloc+0x56>
   dc2c8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dc2cc:	e00e      	b.n	dc2ec <_Balloc+0x60>
   dc2ce:	2221      	movs	r2, #33	; 0x21
   dc2d0:	2104      	movs	r1, #4
   dc2d2:	4620      	mov	r0, r4
   dc2d4:	f000 fc19 	bl	dcb0a <_calloc_r>
   dc2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc2da:	60f0      	str	r0, [r6, #12]
   dc2dc:	68db      	ldr	r3, [r3, #12]
   dc2de:	2b00      	cmp	r3, #0
   dc2e0:	d1e4      	bne.n	dc2ac <_Balloc+0x20>
   dc2e2:	2000      	movs	r0, #0
   dc2e4:	bd70      	pop	{r4, r5, r6, pc}
   dc2e6:	6802      	ldr	r2, [r0, #0]
   dc2e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dc2ec:	2300      	movs	r3, #0
   dc2ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dc2f2:	e7f7      	b.n	dc2e4 <_Balloc+0x58>

000dc2f4 <_Bfree>:
   dc2f4:	b570      	push	{r4, r5, r6, lr}
   dc2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc2f8:	4605      	mov	r5, r0
   dc2fa:	460c      	mov	r4, r1
   dc2fc:	b93e      	cbnz	r6, dc30e <_Bfree+0x1a>
   dc2fe:	2010      	movs	r0, #16
   dc300:	f7fc f8d2 	bl	d84a8 <malloc>
   dc304:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc308:	6268      	str	r0, [r5, #36]	; 0x24
   dc30a:	6006      	str	r6, [r0, #0]
   dc30c:	60c6      	str	r6, [r0, #12]
   dc30e:	b13c      	cbz	r4, dc320 <_Bfree+0x2c>
   dc310:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dc312:	6862      	ldr	r2, [r4, #4]
   dc314:	68db      	ldr	r3, [r3, #12]
   dc316:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc31a:	6021      	str	r1, [r4, #0]
   dc31c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dc320:	bd70      	pop	{r4, r5, r6, pc}

000dc322 <__multadd>:
   dc322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc326:	690e      	ldr	r6, [r1, #16]
   dc328:	4607      	mov	r7, r0
   dc32a:	4698      	mov	r8, r3
   dc32c:	460c      	mov	r4, r1
   dc32e:	f101 0014 	add.w	r0, r1, #20
   dc332:	2300      	movs	r3, #0
   dc334:	6805      	ldr	r5, [r0, #0]
   dc336:	b2a9      	uxth	r1, r5
   dc338:	fb02 8101 	mla	r1, r2, r1, r8
   dc33c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dc340:	0c2d      	lsrs	r5, r5, #16
   dc342:	fb02 c505 	mla	r5, r2, r5, ip
   dc346:	b289      	uxth	r1, r1
   dc348:	3301      	adds	r3, #1
   dc34a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dc34e:	429e      	cmp	r6, r3
   dc350:	f840 1b04 	str.w	r1, [r0], #4
   dc354:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dc358:	dcec      	bgt.n	dc334 <__multadd+0x12>
   dc35a:	f1b8 0f00 	cmp.w	r8, #0
   dc35e:	d01b      	beq.n	dc398 <__multadd+0x76>
   dc360:	68a3      	ldr	r3, [r4, #8]
   dc362:	42b3      	cmp	r3, r6
   dc364:	dc12      	bgt.n	dc38c <__multadd+0x6a>
   dc366:	6861      	ldr	r1, [r4, #4]
   dc368:	4638      	mov	r0, r7
   dc36a:	3101      	adds	r1, #1
   dc36c:	f7ff ff8e 	bl	dc28c <_Balloc>
   dc370:	6922      	ldr	r2, [r4, #16]
   dc372:	3202      	adds	r2, #2
   dc374:	f104 010c 	add.w	r1, r4, #12
   dc378:	4605      	mov	r5, r0
   dc37a:	0092      	lsls	r2, r2, #2
   dc37c:	300c      	adds	r0, #12
   dc37e:	f7fe fcaf 	bl	dace0 <memcpy>
   dc382:	4621      	mov	r1, r4
   dc384:	4638      	mov	r0, r7
   dc386:	f7ff ffb5 	bl	dc2f4 <_Bfree>
   dc38a:	462c      	mov	r4, r5
   dc38c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc390:	3601      	adds	r6, #1
   dc392:	f8c3 8014 	str.w	r8, [r3, #20]
   dc396:	6126      	str	r6, [r4, #16]
   dc398:	4620      	mov	r0, r4
   dc39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc39e <__s2b>:
   dc39e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc3a2:	460c      	mov	r4, r1
   dc3a4:	4615      	mov	r5, r2
   dc3a6:	461f      	mov	r7, r3
   dc3a8:	2209      	movs	r2, #9
   dc3aa:	3308      	adds	r3, #8
   dc3ac:	4606      	mov	r6, r0
   dc3ae:	fb93 f3f2 	sdiv	r3, r3, r2
   dc3b2:	2100      	movs	r1, #0
   dc3b4:	2201      	movs	r2, #1
   dc3b6:	429a      	cmp	r2, r3
   dc3b8:	db20      	blt.n	dc3fc <__s2b+0x5e>
   dc3ba:	4630      	mov	r0, r6
   dc3bc:	f7ff ff66 	bl	dc28c <_Balloc>
   dc3c0:	9b08      	ldr	r3, [sp, #32]
   dc3c2:	6143      	str	r3, [r0, #20]
   dc3c4:	2d09      	cmp	r5, #9
   dc3c6:	f04f 0301 	mov.w	r3, #1
   dc3ca:	6103      	str	r3, [r0, #16]
   dc3cc:	dd19      	ble.n	dc402 <__s2b+0x64>
   dc3ce:	f104 0909 	add.w	r9, r4, #9
   dc3d2:	46c8      	mov	r8, r9
   dc3d4:	442c      	add	r4, r5
   dc3d6:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc3da:	4601      	mov	r1, r0
   dc3dc:	3b30      	subs	r3, #48	; 0x30
   dc3de:	220a      	movs	r2, #10
   dc3e0:	4630      	mov	r0, r6
   dc3e2:	f7ff ff9e 	bl	dc322 <__multadd>
   dc3e6:	45a0      	cmp	r8, r4
   dc3e8:	d1f5      	bne.n	dc3d6 <__s2b+0x38>
   dc3ea:	f1a5 0408 	sub.w	r4, r5, #8
   dc3ee:	444c      	add	r4, r9
   dc3f0:	1b2d      	subs	r5, r5, r4
   dc3f2:	1963      	adds	r3, r4, r5
   dc3f4:	42bb      	cmp	r3, r7
   dc3f6:	db07      	blt.n	dc408 <__s2b+0x6a>
   dc3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc3fc:	0052      	lsls	r2, r2, #1
   dc3fe:	3101      	adds	r1, #1
   dc400:	e7d9      	b.n	dc3b6 <__s2b+0x18>
   dc402:	340a      	adds	r4, #10
   dc404:	2509      	movs	r5, #9
   dc406:	e7f3      	b.n	dc3f0 <__s2b+0x52>
   dc408:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc40c:	4601      	mov	r1, r0
   dc40e:	3b30      	subs	r3, #48	; 0x30
   dc410:	220a      	movs	r2, #10
   dc412:	4630      	mov	r0, r6
   dc414:	f7ff ff85 	bl	dc322 <__multadd>
   dc418:	e7eb      	b.n	dc3f2 <__s2b+0x54>

000dc41a <__hi0bits>:
   dc41a:	0c03      	lsrs	r3, r0, #16
   dc41c:	041b      	lsls	r3, r3, #16
   dc41e:	b9d3      	cbnz	r3, dc456 <__hi0bits+0x3c>
   dc420:	0400      	lsls	r0, r0, #16
   dc422:	2310      	movs	r3, #16
   dc424:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc428:	bf04      	itt	eq
   dc42a:	0200      	lsleq	r0, r0, #8
   dc42c:	3308      	addeq	r3, #8
   dc42e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc432:	bf04      	itt	eq
   dc434:	0100      	lsleq	r0, r0, #4
   dc436:	3304      	addeq	r3, #4
   dc438:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc43c:	bf04      	itt	eq
   dc43e:	0080      	lsleq	r0, r0, #2
   dc440:	3302      	addeq	r3, #2
   dc442:	2800      	cmp	r0, #0
   dc444:	db05      	blt.n	dc452 <__hi0bits+0x38>
   dc446:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc44a:	f103 0301 	add.w	r3, r3, #1
   dc44e:	bf08      	it	eq
   dc450:	2320      	moveq	r3, #32
   dc452:	4618      	mov	r0, r3
   dc454:	4770      	bx	lr
   dc456:	2300      	movs	r3, #0
   dc458:	e7e4      	b.n	dc424 <__hi0bits+0xa>

000dc45a <__lo0bits>:
   dc45a:	6803      	ldr	r3, [r0, #0]
   dc45c:	f013 0207 	ands.w	r2, r3, #7
   dc460:	4601      	mov	r1, r0
   dc462:	d00b      	beq.n	dc47c <__lo0bits+0x22>
   dc464:	07da      	lsls	r2, r3, #31
   dc466:	d424      	bmi.n	dc4b2 <__lo0bits+0x58>
   dc468:	0798      	lsls	r0, r3, #30
   dc46a:	bf49      	itett	mi
   dc46c:	085b      	lsrmi	r3, r3, #1
   dc46e:	089b      	lsrpl	r3, r3, #2
   dc470:	2001      	movmi	r0, #1
   dc472:	600b      	strmi	r3, [r1, #0]
   dc474:	bf5c      	itt	pl
   dc476:	600b      	strpl	r3, [r1, #0]
   dc478:	2002      	movpl	r0, #2
   dc47a:	4770      	bx	lr
   dc47c:	b298      	uxth	r0, r3
   dc47e:	b9b0      	cbnz	r0, dc4ae <__lo0bits+0x54>
   dc480:	0c1b      	lsrs	r3, r3, #16
   dc482:	2010      	movs	r0, #16
   dc484:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc488:	bf04      	itt	eq
   dc48a:	0a1b      	lsreq	r3, r3, #8
   dc48c:	3008      	addeq	r0, #8
   dc48e:	071a      	lsls	r2, r3, #28
   dc490:	bf04      	itt	eq
   dc492:	091b      	lsreq	r3, r3, #4
   dc494:	3004      	addeq	r0, #4
   dc496:	079a      	lsls	r2, r3, #30
   dc498:	bf04      	itt	eq
   dc49a:	089b      	lsreq	r3, r3, #2
   dc49c:	3002      	addeq	r0, #2
   dc49e:	07da      	lsls	r2, r3, #31
   dc4a0:	d403      	bmi.n	dc4aa <__lo0bits+0x50>
   dc4a2:	085b      	lsrs	r3, r3, #1
   dc4a4:	f100 0001 	add.w	r0, r0, #1
   dc4a8:	d005      	beq.n	dc4b6 <__lo0bits+0x5c>
   dc4aa:	600b      	str	r3, [r1, #0]
   dc4ac:	4770      	bx	lr
   dc4ae:	4610      	mov	r0, r2
   dc4b0:	e7e8      	b.n	dc484 <__lo0bits+0x2a>
   dc4b2:	2000      	movs	r0, #0
   dc4b4:	4770      	bx	lr
   dc4b6:	2020      	movs	r0, #32
   dc4b8:	4770      	bx	lr

000dc4ba <__i2b>:
   dc4ba:	b510      	push	{r4, lr}
   dc4bc:	460c      	mov	r4, r1
   dc4be:	2101      	movs	r1, #1
   dc4c0:	f7ff fee4 	bl	dc28c <_Balloc>
   dc4c4:	2201      	movs	r2, #1
   dc4c6:	6144      	str	r4, [r0, #20]
   dc4c8:	6102      	str	r2, [r0, #16]
   dc4ca:	bd10      	pop	{r4, pc}

000dc4cc <__multiply>:
   dc4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4d0:	4615      	mov	r5, r2
   dc4d2:	690a      	ldr	r2, [r1, #16]
   dc4d4:	692b      	ldr	r3, [r5, #16]
   dc4d6:	429a      	cmp	r2, r3
   dc4d8:	bfb8      	it	lt
   dc4da:	460b      	movlt	r3, r1
   dc4dc:	460c      	mov	r4, r1
   dc4de:	bfbc      	itt	lt
   dc4e0:	462c      	movlt	r4, r5
   dc4e2:	461d      	movlt	r5, r3
   dc4e4:	6927      	ldr	r7, [r4, #16]
   dc4e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc4ea:	68a3      	ldr	r3, [r4, #8]
   dc4ec:	6861      	ldr	r1, [r4, #4]
   dc4ee:	eb07 0609 	add.w	r6, r7, r9
   dc4f2:	42b3      	cmp	r3, r6
   dc4f4:	bfb8      	it	lt
   dc4f6:	3101      	addlt	r1, #1
   dc4f8:	b085      	sub	sp, #20
   dc4fa:	f7ff fec7 	bl	dc28c <_Balloc>
   dc4fe:	f100 0114 	add.w	r1, r0, #20
   dc502:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc506:	460b      	mov	r3, r1
   dc508:	2200      	movs	r2, #0
   dc50a:	4543      	cmp	r3, r8
   dc50c:	d31d      	bcc.n	dc54a <__multiply+0x7e>
   dc50e:	f104 0314 	add.w	r3, r4, #20
   dc512:	f105 0214 	add.w	r2, r5, #20
   dc516:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc51a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc51e:	9302      	str	r3, [sp, #8]
   dc520:	1b3b      	subs	r3, r7, r4
   dc522:	3b15      	subs	r3, #21
   dc524:	f023 0303 	bic.w	r3, r3, #3
   dc528:	3304      	adds	r3, #4
   dc52a:	f104 0515 	add.w	r5, r4, #21
   dc52e:	42af      	cmp	r7, r5
   dc530:	bf38      	it	cc
   dc532:	2304      	movcc	r3, #4
   dc534:	9301      	str	r3, [sp, #4]
   dc536:	9b02      	ldr	r3, [sp, #8]
   dc538:	9203      	str	r2, [sp, #12]
   dc53a:	4293      	cmp	r3, r2
   dc53c:	d808      	bhi.n	dc550 <__multiply+0x84>
   dc53e:	2e00      	cmp	r6, #0
   dc540:	dc5a      	bgt.n	dc5f8 <__multiply+0x12c>
   dc542:	6106      	str	r6, [r0, #16]
   dc544:	b005      	add	sp, #20
   dc546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc54a:	f843 2b04 	str.w	r2, [r3], #4
   dc54e:	e7dc      	b.n	dc50a <__multiply+0x3e>
   dc550:	f8b2 a000 	ldrh.w	sl, [r2]
   dc554:	f1ba 0f00 	cmp.w	sl, #0
   dc558:	d024      	beq.n	dc5a4 <__multiply+0xd8>
   dc55a:	f104 0e14 	add.w	lr, r4, #20
   dc55e:	4689      	mov	r9, r1
   dc560:	f04f 0c00 	mov.w	ip, #0
   dc564:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc568:	f8d9 b000 	ldr.w	fp, [r9]
   dc56c:	b2ab      	uxth	r3, r5
   dc56e:	fa1f fb8b 	uxth.w	fp, fp
   dc572:	fb0a b303 	mla	r3, sl, r3, fp
   dc576:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc57a:	f8d9 5000 	ldr.w	r5, [r9]
   dc57e:	4463      	add	r3, ip
   dc580:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc584:	fb0a c50b 	mla	r5, sl, fp, ip
   dc588:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc58c:	b29b      	uxth	r3, r3
   dc58e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc592:	4577      	cmp	r7, lr
   dc594:	f849 3b04 	str.w	r3, [r9], #4
   dc598:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc59c:	d8e2      	bhi.n	dc564 <__multiply+0x98>
   dc59e:	9b01      	ldr	r3, [sp, #4]
   dc5a0:	f841 c003 	str.w	ip, [r1, r3]
   dc5a4:	9b03      	ldr	r3, [sp, #12]
   dc5a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc5aa:	3204      	adds	r2, #4
   dc5ac:	f1b9 0f00 	cmp.w	r9, #0
   dc5b0:	d020      	beq.n	dc5f4 <__multiply+0x128>
   dc5b2:	680b      	ldr	r3, [r1, #0]
   dc5b4:	f104 0c14 	add.w	ip, r4, #20
   dc5b8:	468e      	mov	lr, r1
   dc5ba:	f04f 0a00 	mov.w	sl, #0
   dc5be:	f8bc 5000 	ldrh.w	r5, [ip]
   dc5c2:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc5c6:	fb09 b505 	mla	r5, r9, r5, fp
   dc5ca:	44aa      	add	sl, r5
   dc5cc:	b29b      	uxth	r3, r3
   dc5ce:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc5d2:	f84e 3b04 	str.w	r3, [lr], #4
   dc5d6:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc5da:	f8be 5000 	ldrh.w	r5, [lr]
   dc5de:	0c1b      	lsrs	r3, r3, #16
   dc5e0:	fb09 5303 	mla	r3, r9, r3, r5
   dc5e4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc5e8:	4567      	cmp	r7, ip
   dc5ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc5ee:	d8e6      	bhi.n	dc5be <__multiply+0xf2>
   dc5f0:	9d01      	ldr	r5, [sp, #4]
   dc5f2:	514b      	str	r3, [r1, r5]
   dc5f4:	3104      	adds	r1, #4
   dc5f6:	e79e      	b.n	dc536 <__multiply+0x6a>
   dc5f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc5fc:	2b00      	cmp	r3, #0
   dc5fe:	d1a0      	bne.n	dc542 <__multiply+0x76>
   dc600:	3e01      	subs	r6, #1
   dc602:	e79c      	b.n	dc53e <__multiply+0x72>

000dc604 <__pow5mult>:
   dc604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc608:	4615      	mov	r5, r2
   dc60a:	f012 0203 	ands.w	r2, r2, #3
   dc60e:	4606      	mov	r6, r0
   dc610:	460f      	mov	r7, r1
   dc612:	d007      	beq.n	dc624 <__pow5mult+0x20>
   dc614:	4c21      	ldr	r4, [pc, #132]	; (dc69c <__pow5mult+0x98>)
   dc616:	3a01      	subs	r2, #1
   dc618:	2300      	movs	r3, #0
   dc61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc61e:	f7ff fe80 	bl	dc322 <__multadd>
   dc622:	4607      	mov	r7, r0
   dc624:	10ad      	asrs	r5, r5, #2
   dc626:	d035      	beq.n	dc694 <__pow5mult+0x90>
   dc628:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc62a:	b93c      	cbnz	r4, dc63c <__pow5mult+0x38>
   dc62c:	2010      	movs	r0, #16
   dc62e:	f7fb ff3b 	bl	d84a8 <malloc>
   dc632:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc636:	6270      	str	r0, [r6, #36]	; 0x24
   dc638:	6004      	str	r4, [r0, #0]
   dc63a:	60c4      	str	r4, [r0, #12]
   dc63c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc640:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc644:	b94c      	cbnz	r4, dc65a <__pow5mult+0x56>
   dc646:	f240 2171 	movw	r1, #625	; 0x271
   dc64a:	4630      	mov	r0, r6
   dc64c:	f7ff ff35 	bl	dc4ba <__i2b>
   dc650:	2300      	movs	r3, #0
   dc652:	f8c8 0008 	str.w	r0, [r8, #8]
   dc656:	4604      	mov	r4, r0
   dc658:	6003      	str	r3, [r0, #0]
   dc65a:	f04f 0900 	mov.w	r9, #0
   dc65e:	07eb      	lsls	r3, r5, #31
   dc660:	d50a      	bpl.n	dc678 <__pow5mult+0x74>
   dc662:	4639      	mov	r1, r7
   dc664:	4622      	mov	r2, r4
   dc666:	4630      	mov	r0, r6
   dc668:	f7ff ff30 	bl	dc4cc <__multiply>
   dc66c:	4639      	mov	r1, r7
   dc66e:	4680      	mov	r8, r0
   dc670:	4630      	mov	r0, r6
   dc672:	f7ff fe3f 	bl	dc2f4 <_Bfree>
   dc676:	4647      	mov	r7, r8
   dc678:	106d      	asrs	r5, r5, #1
   dc67a:	d00b      	beq.n	dc694 <__pow5mult+0x90>
   dc67c:	6820      	ldr	r0, [r4, #0]
   dc67e:	b938      	cbnz	r0, dc690 <__pow5mult+0x8c>
   dc680:	4622      	mov	r2, r4
   dc682:	4621      	mov	r1, r4
   dc684:	4630      	mov	r0, r6
   dc686:	f7ff ff21 	bl	dc4cc <__multiply>
   dc68a:	6020      	str	r0, [r4, #0]
   dc68c:	f8c0 9000 	str.w	r9, [r0]
   dc690:	4604      	mov	r4, r0
   dc692:	e7e4      	b.n	dc65e <__pow5mult+0x5a>
   dc694:	4638      	mov	r0, r7
   dc696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc69a:	bf00      	nop
   dc69c:	000dde50 	.word	0x000dde50

000dc6a0 <__lshift>:
   dc6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc6a4:	460c      	mov	r4, r1
   dc6a6:	6849      	ldr	r1, [r1, #4]
   dc6a8:	6923      	ldr	r3, [r4, #16]
   dc6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc6ae:	68a3      	ldr	r3, [r4, #8]
   dc6b0:	4607      	mov	r7, r0
   dc6b2:	4691      	mov	r9, r2
   dc6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc6b8:	f108 0601 	add.w	r6, r8, #1
   dc6bc:	42b3      	cmp	r3, r6
   dc6be:	db3f      	blt.n	dc740 <__lshift+0xa0>
   dc6c0:	4638      	mov	r0, r7
   dc6c2:	f7ff fde3 	bl	dc28c <_Balloc>
   dc6c6:	2300      	movs	r3, #0
   dc6c8:	4605      	mov	r5, r0
   dc6ca:	f100 0114 	add.w	r1, r0, #20
   dc6ce:	f100 0210 	add.w	r2, r0, #16
   dc6d2:	4618      	mov	r0, r3
   dc6d4:	4553      	cmp	r3, sl
   dc6d6:	db36      	blt.n	dc746 <__lshift+0xa6>
   dc6d8:	6920      	ldr	r0, [r4, #16]
   dc6da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc6de:	f104 0314 	add.w	r3, r4, #20
   dc6e2:	f019 091f 	ands.w	r9, r9, #31
   dc6e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc6ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc6ee:	d02e      	beq.n	dc74e <__lshift+0xae>
   dc6f0:	f1c9 0e20 	rsb	lr, r9, #32
   dc6f4:	468a      	mov	sl, r1
   dc6f6:	2200      	movs	r2, #0
   dc6f8:	6818      	ldr	r0, [r3, #0]
   dc6fa:	fa00 f009 	lsl.w	r0, r0, r9
   dc6fe:	4302      	orrs	r2, r0
   dc700:	f84a 2b04 	str.w	r2, [sl], #4
   dc704:	f853 2b04 	ldr.w	r2, [r3], #4
   dc708:	459c      	cmp	ip, r3
   dc70a:	fa22 f20e 	lsr.w	r2, r2, lr
   dc70e:	d8f3      	bhi.n	dc6f8 <__lshift+0x58>
   dc710:	ebac 0304 	sub.w	r3, ip, r4
   dc714:	3b15      	subs	r3, #21
   dc716:	f023 0303 	bic.w	r3, r3, #3
   dc71a:	3304      	adds	r3, #4
   dc71c:	f104 0015 	add.w	r0, r4, #21
   dc720:	4560      	cmp	r0, ip
   dc722:	bf88      	it	hi
   dc724:	2304      	movhi	r3, #4
   dc726:	50ca      	str	r2, [r1, r3]
   dc728:	b10a      	cbz	r2, dc72e <__lshift+0x8e>
   dc72a:	f108 0602 	add.w	r6, r8, #2
   dc72e:	3e01      	subs	r6, #1
   dc730:	4638      	mov	r0, r7
   dc732:	612e      	str	r6, [r5, #16]
   dc734:	4621      	mov	r1, r4
   dc736:	f7ff fddd 	bl	dc2f4 <_Bfree>
   dc73a:	4628      	mov	r0, r5
   dc73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc740:	3101      	adds	r1, #1
   dc742:	005b      	lsls	r3, r3, #1
   dc744:	e7ba      	b.n	dc6bc <__lshift+0x1c>
   dc746:	f842 0f04 	str.w	r0, [r2, #4]!
   dc74a:	3301      	adds	r3, #1
   dc74c:	e7c2      	b.n	dc6d4 <__lshift+0x34>
   dc74e:	3904      	subs	r1, #4
   dc750:	f853 2b04 	ldr.w	r2, [r3], #4
   dc754:	f841 2f04 	str.w	r2, [r1, #4]!
   dc758:	459c      	cmp	ip, r3
   dc75a:	d8f9      	bhi.n	dc750 <__lshift+0xb0>
   dc75c:	e7e7      	b.n	dc72e <__lshift+0x8e>

000dc75e <__mcmp>:
   dc75e:	b530      	push	{r4, r5, lr}
   dc760:	6902      	ldr	r2, [r0, #16]
   dc762:	690c      	ldr	r4, [r1, #16]
   dc764:	1b12      	subs	r2, r2, r4
   dc766:	d10e      	bne.n	dc786 <__mcmp+0x28>
   dc768:	f100 0314 	add.w	r3, r0, #20
   dc76c:	3114      	adds	r1, #20
   dc76e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc772:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc776:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc77a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc77e:	42a5      	cmp	r5, r4
   dc780:	d003      	beq.n	dc78a <__mcmp+0x2c>
   dc782:	d305      	bcc.n	dc790 <__mcmp+0x32>
   dc784:	2201      	movs	r2, #1
   dc786:	4610      	mov	r0, r2
   dc788:	bd30      	pop	{r4, r5, pc}
   dc78a:	4283      	cmp	r3, r0
   dc78c:	d3f3      	bcc.n	dc776 <__mcmp+0x18>
   dc78e:	e7fa      	b.n	dc786 <__mcmp+0x28>
   dc790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc794:	e7f7      	b.n	dc786 <__mcmp+0x28>

000dc796 <__mdiff>:
   dc796:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc79a:	460c      	mov	r4, r1
   dc79c:	4606      	mov	r6, r0
   dc79e:	4611      	mov	r1, r2
   dc7a0:	4620      	mov	r0, r4
   dc7a2:	4617      	mov	r7, r2
   dc7a4:	f7ff ffdb 	bl	dc75e <__mcmp>
   dc7a8:	1e05      	subs	r5, r0, #0
   dc7aa:	d108      	bne.n	dc7be <__mdiff+0x28>
   dc7ac:	4629      	mov	r1, r5
   dc7ae:	4630      	mov	r0, r6
   dc7b0:	f7ff fd6c 	bl	dc28c <_Balloc>
   dc7b4:	2301      	movs	r3, #1
   dc7b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc7ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc7be:	bfa4      	itt	ge
   dc7c0:	463b      	movge	r3, r7
   dc7c2:	4627      	movge	r7, r4
   dc7c4:	4630      	mov	r0, r6
   dc7c6:	6879      	ldr	r1, [r7, #4]
   dc7c8:	bfa6      	itte	ge
   dc7ca:	461c      	movge	r4, r3
   dc7cc:	2500      	movge	r5, #0
   dc7ce:	2501      	movlt	r5, #1
   dc7d0:	f7ff fd5c 	bl	dc28c <_Balloc>
   dc7d4:	693e      	ldr	r6, [r7, #16]
   dc7d6:	60c5      	str	r5, [r0, #12]
   dc7d8:	6925      	ldr	r5, [r4, #16]
   dc7da:	f107 0114 	add.w	r1, r7, #20
   dc7de:	f104 0914 	add.w	r9, r4, #20
   dc7e2:	f100 0e14 	add.w	lr, r0, #20
   dc7e6:	f107 0210 	add.w	r2, r7, #16
   dc7ea:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc7ee:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc7f2:	46f2      	mov	sl, lr
   dc7f4:	2700      	movs	r7, #0
   dc7f6:	f859 3b04 	ldr.w	r3, [r9], #4
   dc7fa:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc7fe:	fa1f f883 	uxth.w	r8, r3
   dc802:	fa17 f78b 	uxtah	r7, r7, fp
   dc806:	0c1b      	lsrs	r3, r3, #16
   dc808:	eba7 0808 	sub.w	r8, r7, r8
   dc80c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc810:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc814:	fa1f f888 	uxth.w	r8, r8
   dc818:	141f      	asrs	r7, r3, #16
   dc81a:	454d      	cmp	r5, r9
   dc81c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc820:	f84a 3b04 	str.w	r3, [sl], #4
   dc824:	d8e7      	bhi.n	dc7f6 <__mdiff+0x60>
   dc826:	1b2b      	subs	r3, r5, r4
   dc828:	3b15      	subs	r3, #21
   dc82a:	f023 0303 	bic.w	r3, r3, #3
   dc82e:	3304      	adds	r3, #4
   dc830:	3415      	adds	r4, #21
   dc832:	42a5      	cmp	r5, r4
   dc834:	bf38      	it	cc
   dc836:	2304      	movcc	r3, #4
   dc838:	4419      	add	r1, r3
   dc83a:	4473      	add	r3, lr
   dc83c:	469e      	mov	lr, r3
   dc83e:	460d      	mov	r5, r1
   dc840:	4565      	cmp	r5, ip
   dc842:	d30e      	bcc.n	dc862 <__mdiff+0xcc>
   dc844:	f10c 0203 	add.w	r2, ip, #3
   dc848:	1a52      	subs	r2, r2, r1
   dc84a:	f022 0203 	bic.w	r2, r2, #3
   dc84e:	3903      	subs	r1, #3
   dc850:	458c      	cmp	ip, r1
   dc852:	bf38      	it	cc
   dc854:	2200      	movcc	r2, #0
   dc856:	441a      	add	r2, r3
   dc858:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc85c:	b17b      	cbz	r3, dc87e <__mdiff+0xe8>
   dc85e:	6106      	str	r6, [r0, #16]
   dc860:	e7ab      	b.n	dc7ba <__mdiff+0x24>
   dc862:	f855 8b04 	ldr.w	r8, [r5], #4
   dc866:	fa17 f488 	uxtah	r4, r7, r8
   dc86a:	1422      	asrs	r2, r4, #16
   dc86c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc870:	b2a4      	uxth	r4, r4
   dc872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc876:	f84e 4b04 	str.w	r4, [lr], #4
   dc87a:	1417      	asrs	r7, r2, #16
   dc87c:	e7e0      	b.n	dc840 <__mdiff+0xaa>
   dc87e:	3e01      	subs	r6, #1
   dc880:	e7ea      	b.n	dc858 <__mdiff+0xc2>
	...

000dc884 <__ulp>:
   dc884:	b082      	sub	sp, #8
   dc886:	ed8d 0b00 	vstr	d0, [sp]
   dc88a:	9b01      	ldr	r3, [sp, #4]
   dc88c:	4912      	ldr	r1, [pc, #72]	; (dc8d8 <__ulp+0x54>)
   dc88e:	4019      	ands	r1, r3
   dc890:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc894:	2900      	cmp	r1, #0
   dc896:	dd05      	ble.n	dc8a4 <__ulp+0x20>
   dc898:	2200      	movs	r2, #0
   dc89a:	460b      	mov	r3, r1
   dc89c:	ec43 2b10 	vmov	d0, r2, r3
   dc8a0:	b002      	add	sp, #8
   dc8a2:	4770      	bx	lr
   dc8a4:	4249      	negs	r1, r1
   dc8a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc8aa:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc8ae:	f04f 0200 	mov.w	r2, #0
   dc8b2:	f04f 0300 	mov.w	r3, #0
   dc8b6:	da04      	bge.n	dc8c2 <__ulp+0x3e>
   dc8b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc8bc:	fa41 f300 	asr.w	r3, r1, r0
   dc8c0:	e7ec      	b.n	dc89c <__ulp+0x18>
   dc8c2:	f1a0 0114 	sub.w	r1, r0, #20
   dc8c6:	291e      	cmp	r1, #30
   dc8c8:	bfda      	itte	le
   dc8ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc8ce:	fa20 f101 	lsrle.w	r1, r0, r1
   dc8d2:	2101      	movgt	r1, #1
   dc8d4:	460a      	mov	r2, r1
   dc8d6:	e7e1      	b.n	dc89c <__ulp+0x18>
   dc8d8:	7ff00000 	.word	0x7ff00000

000dc8dc <__b2d>:
   dc8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc8de:	6905      	ldr	r5, [r0, #16]
   dc8e0:	f100 0714 	add.w	r7, r0, #20
   dc8e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc8e8:	1f2e      	subs	r6, r5, #4
   dc8ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc8ee:	4620      	mov	r0, r4
   dc8f0:	f7ff fd93 	bl	dc41a <__hi0bits>
   dc8f4:	f1c0 0320 	rsb	r3, r0, #32
   dc8f8:	280a      	cmp	r0, #10
   dc8fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc978 <__b2d+0x9c>
   dc8fe:	600b      	str	r3, [r1, #0]
   dc900:	dc14      	bgt.n	dc92c <__b2d+0x50>
   dc902:	f1c0 0e0b 	rsb	lr, r0, #11
   dc906:	fa24 f10e 	lsr.w	r1, r4, lr
   dc90a:	42b7      	cmp	r7, r6
   dc90c:	ea41 030c 	orr.w	r3, r1, ip
   dc910:	bf34      	ite	cc
   dc912:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc916:	2100      	movcs	r1, #0
   dc918:	3015      	adds	r0, #21
   dc91a:	fa04 f000 	lsl.w	r0, r4, r0
   dc91e:	fa21 f10e 	lsr.w	r1, r1, lr
   dc922:	ea40 0201 	orr.w	r2, r0, r1
   dc926:	ec43 2b10 	vmov	d0, r2, r3
   dc92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc92c:	42b7      	cmp	r7, r6
   dc92e:	bf3a      	itte	cc
   dc930:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc934:	f1a5 0608 	subcc.w	r6, r5, #8
   dc938:	2100      	movcs	r1, #0
   dc93a:	380b      	subs	r0, #11
   dc93c:	d017      	beq.n	dc96e <__b2d+0x92>
   dc93e:	f1c0 0c20 	rsb	ip, r0, #32
   dc942:	fa04 f500 	lsl.w	r5, r4, r0
   dc946:	42be      	cmp	r6, r7
   dc948:	fa21 f40c 	lsr.w	r4, r1, ip
   dc94c:	ea45 0504 	orr.w	r5, r5, r4
   dc950:	bf8c      	ite	hi
   dc952:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc956:	2400      	movls	r4, #0
   dc958:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc95c:	fa01 f000 	lsl.w	r0, r1, r0
   dc960:	fa24 f40c 	lsr.w	r4, r4, ip
   dc964:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc968:	ea40 0204 	orr.w	r2, r0, r4
   dc96c:	e7db      	b.n	dc926 <__b2d+0x4a>
   dc96e:	ea44 030c 	orr.w	r3, r4, ip
   dc972:	460a      	mov	r2, r1
   dc974:	e7d7      	b.n	dc926 <__b2d+0x4a>
   dc976:	bf00      	nop
   dc978:	3ff00000 	.word	0x3ff00000

000dc97c <__d2b>:
   dc97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc980:	4689      	mov	r9, r1
   dc982:	2101      	movs	r1, #1
   dc984:	ec57 6b10 	vmov	r6, r7, d0
   dc988:	4690      	mov	r8, r2
   dc98a:	f7ff fc7f 	bl	dc28c <_Balloc>
   dc98e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc992:	4604      	mov	r4, r0
   dc994:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc998:	bb35      	cbnz	r5, dc9e8 <__d2b+0x6c>
   dc99a:	2e00      	cmp	r6, #0
   dc99c:	9301      	str	r3, [sp, #4]
   dc99e:	d028      	beq.n	dc9f2 <__d2b+0x76>
   dc9a0:	4668      	mov	r0, sp
   dc9a2:	9600      	str	r6, [sp, #0]
   dc9a4:	f7ff fd59 	bl	dc45a <__lo0bits>
   dc9a8:	9900      	ldr	r1, [sp, #0]
   dc9aa:	b300      	cbz	r0, dc9ee <__d2b+0x72>
   dc9ac:	9a01      	ldr	r2, [sp, #4]
   dc9ae:	f1c0 0320 	rsb	r3, r0, #32
   dc9b2:	fa02 f303 	lsl.w	r3, r2, r3
   dc9b6:	430b      	orrs	r3, r1
   dc9b8:	40c2      	lsrs	r2, r0
   dc9ba:	6163      	str	r3, [r4, #20]
   dc9bc:	9201      	str	r2, [sp, #4]
   dc9be:	9b01      	ldr	r3, [sp, #4]
   dc9c0:	61a3      	str	r3, [r4, #24]
   dc9c2:	2b00      	cmp	r3, #0
   dc9c4:	bf14      	ite	ne
   dc9c6:	2202      	movne	r2, #2
   dc9c8:	2201      	moveq	r2, #1
   dc9ca:	6122      	str	r2, [r4, #16]
   dc9cc:	b1d5      	cbz	r5, dca04 <__d2b+0x88>
   dc9ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc9d2:	4405      	add	r5, r0
   dc9d4:	f8c9 5000 	str.w	r5, [r9]
   dc9d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc9dc:	f8c8 0000 	str.w	r0, [r8]
   dc9e0:	4620      	mov	r0, r4
   dc9e2:	b003      	add	sp, #12
   dc9e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc9e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc9ec:	e7d5      	b.n	dc99a <__d2b+0x1e>
   dc9ee:	6161      	str	r1, [r4, #20]
   dc9f0:	e7e5      	b.n	dc9be <__d2b+0x42>
   dc9f2:	a801      	add	r0, sp, #4
   dc9f4:	f7ff fd31 	bl	dc45a <__lo0bits>
   dc9f8:	9b01      	ldr	r3, [sp, #4]
   dc9fa:	6163      	str	r3, [r4, #20]
   dc9fc:	2201      	movs	r2, #1
   dc9fe:	6122      	str	r2, [r4, #16]
   dca00:	3020      	adds	r0, #32
   dca02:	e7e3      	b.n	dc9cc <__d2b+0x50>
   dca04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dca08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dca0c:	f8c9 0000 	str.w	r0, [r9]
   dca10:	6918      	ldr	r0, [r3, #16]
   dca12:	f7ff fd02 	bl	dc41a <__hi0bits>
   dca16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dca1a:	e7df      	b.n	dc9dc <__d2b+0x60>

000dca1c <__ratio>:
   dca1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca20:	4688      	mov	r8, r1
   dca22:	4669      	mov	r1, sp
   dca24:	4681      	mov	r9, r0
   dca26:	f7ff ff59 	bl	dc8dc <__b2d>
   dca2a:	a901      	add	r1, sp, #4
   dca2c:	4640      	mov	r0, r8
   dca2e:	ec55 4b10 	vmov	r4, r5, d0
   dca32:	f7ff ff53 	bl	dc8dc <__b2d>
   dca36:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dca3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dca3e:	eba3 0c02 	sub.w	ip, r3, r2
   dca42:	e9dd 3200 	ldrd	r3, r2, [sp]
   dca46:	1a9b      	subs	r3, r3, r2
   dca48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dca4c:	ec51 0b10 	vmov	r0, r1, d0
   dca50:	2b00      	cmp	r3, #0
   dca52:	bfd6      	itet	le
   dca54:	460a      	movle	r2, r1
   dca56:	462a      	movgt	r2, r5
   dca58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dca5c:	468b      	mov	fp, r1
   dca5e:	462f      	mov	r7, r5
   dca60:	bfd4      	ite	le
   dca62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dca66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dca6a:	4620      	mov	r0, r4
   dca6c:	ee10 2a10 	vmov	r2, s0
   dca70:	465b      	mov	r3, fp
   dca72:	4639      	mov	r1, r7
   dca74:	f7fd fed2 	bl	da81c <__aeabi_ddiv>
   dca78:	ec41 0b10 	vmov	d0, r0, r1
   dca7c:	b003      	add	sp, #12
   dca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dca82 <__copybits>:
   dca82:	3901      	subs	r1, #1
   dca84:	b570      	push	{r4, r5, r6, lr}
   dca86:	1149      	asrs	r1, r1, #5
   dca88:	6914      	ldr	r4, [r2, #16]
   dca8a:	3101      	adds	r1, #1
   dca8c:	f102 0314 	add.w	r3, r2, #20
   dca90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dca94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dca98:	1f05      	subs	r5, r0, #4
   dca9a:	42a3      	cmp	r3, r4
   dca9c:	d30c      	bcc.n	dcab8 <__copybits+0x36>
   dca9e:	1aa3      	subs	r3, r4, r2
   dcaa0:	3b11      	subs	r3, #17
   dcaa2:	f023 0303 	bic.w	r3, r3, #3
   dcaa6:	3211      	adds	r2, #17
   dcaa8:	42a2      	cmp	r2, r4
   dcaaa:	bf88      	it	hi
   dcaac:	2300      	movhi	r3, #0
   dcaae:	4418      	add	r0, r3
   dcab0:	2300      	movs	r3, #0
   dcab2:	4288      	cmp	r0, r1
   dcab4:	d305      	bcc.n	dcac2 <__copybits+0x40>
   dcab6:	bd70      	pop	{r4, r5, r6, pc}
   dcab8:	f853 6b04 	ldr.w	r6, [r3], #4
   dcabc:	f845 6f04 	str.w	r6, [r5, #4]!
   dcac0:	e7eb      	b.n	dca9a <__copybits+0x18>
   dcac2:	f840 3b04 	str.w	r3, [r0], #4
   dcac6:	e7f4      	b.n	dcab2 <__copybits+0x30>

000dcac8 <__any_on>:
   dcac8:	f100 0214 	add.w	r2, r0, #20
   dcacc:	6900      	ldr	r0, [r0, #16]
   dcace:	114b      	asrs	r3, r1, #5
   dcad0:	4298      	cmp	r0, r3
   dcad2:	b510      	push	{r4, lr}
   dcad4:	db11      	blt.n	dcafa <__any_on+0x32>
   dcad6:	dd0a      	ble.n	dcaee <__any_on+0x26>
   dcad8:	f011 011f 	ands.w	r1, r1, #31
   dcadc:	d007      	beq.n	dcaee <__any_on+0x26>
   dcade:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcae2:	fa24 f001 	lsr.w	r0, r4, r1
   dcae6:	fa00 f101 	lsl.w	r1, r0, r1
   dcaea:	428c      	cmp	r4, r1
   dcaec:	d10b      	bne.n	dcb06 <__any_on+0x3e>
   dcaee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcaf2:	4293      	cmp	r3, r2
   dcaf4:	d803      	bhi.n	dcafe <__any_on+0x36>
   dcaf6:	2000      	movs	r0, #0
   dcaf8:	bd10      	pop	{r4, pc}
   dcafa:	4603      	mov	r3, r0
   dcafc:	e7f7      	b.n	dcaee <__any_on+0x26>
   dcafe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcb02:	2900      	cmp	r1, #0
   dcb04:	d0f5      	beq.n	dcaf2 <__any_on+0x2a>
   dcb06:	2001      	movs	r0, #1
   dcb08:	e7f6      	b.n	dcaf8 <__any_on+0x30>

000dcb0a <_calloc_r>:
   dcb0a:	b513      	push	{r0, r1, r4, lr}
   dcb0c:	434a      	muls	r2, r1
   dcb0e:	4611      	mov	r1, r2
   dcb10:	9201      	str	r2, [sp, #4]
   dcb12:	f7fb fd01 	bl	d8518 <_malloc_r>
   dcb16:	4604      	mov	r4, r0
   dcb18:	b118      	cbz	r0, dcb22 <_calloc_r+0x18>
   dcb1a:	9a01      	ldr	r2, [sp, #4]
   dcb1c:	2100      	movs	r1, #0
   dcb1e:	f7fe f907 	bl	dad30 <memset>
   dcb22:	4620      	mov	r0, r4
   dcb24:	b002      	add	sp, #8
   dcb26:	bd10      	pop	{r4, pc}

000dcb28 <nan>:
   dcb28:	ed9f 0b01 	vldr	d0, [pc, #4]	; dcb30 <nan+0x8>
   dcb2c:	4770      	bx	lr
   dcb2e:	bf00      	nop
   dcb30:	00000000 	.word	0x00000000
   dcb34:	7ff80000 	.word	0x7ff80000

000dcb38 <__ascii_wctomb>:
   dcb38:	b149      	cbz	r1, dcb4e <__ascii_wctomb+0x16>
   dcb3a:	2aff      	cmp	r2, #255	; 0xff
   dcb3c:	bf85      	ittet	hi
   dcb3e:	238a      	movhi	r3, #138	; 0x8a
   dcb40:	6003      	strhi	r3, [r0, #0]
   dcb42:	700a      	strbls	r2, [r1, #0]
   dcb44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dcb48:	bf98      	it	ls
   dcb4a:	2001      	movls	r0, #1
   dcb4c:	4770      	bx	lr
   dcb4e:	4608      	mov	r0, r1
   dcb50:	4770      	bx	lr
	...

000dcb54 <__aeabi_d2lz>:
   dcb54:	b538      	push	{r3, r4, r5, lr}
   dcb56:	2200      	movs	r2, #0
   dcb58:	2300      	movs	r3, #0
   dcb5a:	4604      	mov	r4, r0
   dcb5c:	460d      	mov	r5, r1
   dcb5e:	f7fd ffa5 	bl	daaac <__aeabi_dcmplt>
   dcb62:	b928      	cbnz	r0, dcb70 <__aeabi_d2lz+0x1c>
   dcb64:	4620      	mov	r0, r4
   dcb66:	4629      	mov	r1, r5
   dcb68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcb6c:	f7fe b84c 	b.w	dac08 <__aeabi_d2ulz>
   dcb70:	4620      	mov	r0, r4
   dcb72:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dcb76:	f7fe f847 	bl	dac08 <__aeabi_d2ulz>
   dcb7a:	4240      	negs	r0, r0
   dcb7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcb80:	bd38      	pop	{r3, r4, r5, pc}
   dcb82:	bf00      	nop

000dcb84 <dynalib_user>:
   dcb84:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dcb94:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dcba4:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dcbb4:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dcbc4:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dcbd4:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   dcbe4:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   dcbf4:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   dcc04:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   dcc14:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   dcc24:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   dcc34:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   dcc44:	726f 5320 7869 4e00 206f 6144 6174 5200     or Six.No Data.R
   dcc54:	7365 6f70 736e 2065 6552 6563 7669 6465     esponse Received
   dcc64:	5500 6b6e 6f6e 6e77 7220 7365 6f70 736e     .Unknown respons
   dcc74:	2065 6572 6563 6976 6465 2520 0069 6255     e recevied %i.Ub
   dcc84:	6469 746f 2073 6f48 6b6f 5300 7465 7420     idots Hook.Set t
   dcc94:	206f 7233 2064 6150 7472 2079 6953 006d     o 3rd Party Sim.
   dcca4:	0030 6553 2074 6f74 5020 7261 6974 6c63     0.Set to Particl
   dccb4:	2065 6953 006d 654b 7065 4120 696c 6576     e Sim.Keep Alive
   dccc4:	7320 7465 7420 206f 6925 7320 6365 4b00      set to %i sec.K
   dccd4:	6565 2070 6c41 7669 0065 6552 6f70 7472     eep Alive.Report
   dcce4:	6e69 2067 6954 656d 5320 7465 7420 206f     ing Time Set to 
   dccf4:	7325 4d20 6e69 7475 7365 002e 6553 2074     %s Minutes..Set 
   dcd04:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
   dcd14:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   dcd24:	0065 6944 6173 6c62 6465 5320 6e65 6f73     e.Disabled Senso
   dcd34:	2072 6e4f 0065 6553 736e 726f 5320 6174     r One.Sensor Sta
   dcd44:	7574 0073 6944 6173 6c62 6465 5320 6e65     tus.Disabled Sen
   dcd54:	6f73 2072 7754 006f 6944 6173 6c62 6465     sor Two.Disabled
   dcd64:	5320 6e65 6f73 2072 6854 6572 0065 6944      Sensor Three.Di
   dcd74:	6173 6c62 6465 5320 6e65 6f73 2072 6f46     sabled Sensor Fo
   dcd84:	7275 4400 7369 6261 656c 2064 6553 736e     ur.Disabled Sens
   dcd94:	726f 4620 7669 0065 6944 6173 6c62 6465     or Five.Disabled
   dcda4:	5320 6e65 6f73 2072 6953 0078 704f 7265      Sensor Six.Oper
   dcdb4:	7461 6f69 206e 6f4d 6564 2520 0069 6544     ation Mode %i.De
   dcdc4:	6976 6563 5220 7365 7465 5320 6375 6563     vice Reset Succe
   dcdd4:	7373 4c00 616f 6964 676e 5320 7379 6574     ss.Loading Syste
   dcde4:	206d 6544 6166 6c75 7374 4c00 616f 6964     m Defaults.Loadi
   dcdf4:	676e 4320 6e6f 7473 6e61 2074 6544 6166     ng Constant Defa
   dce04:	6c75 7374 3920 2e30 0039 6550 7474 6465     ults 90.9.Petted
   dce14:	5700 7461 6863 6f64 0067 7246 6d6f 2520     .Watchdog.From %
   dce24:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   dce34:	6e61 6973 6974 6e6f 4300 2054 6e4f 3a65     ansition.CT One:
   dce44:	2520 2e33 6631 4300 2054 7754 206f 3325      %3.1f.CT Two %3
   dce54:	312e 0066 5443 5420 7268 6565 203a 3325     .1f.CT Three: %3
   dce64:	312e 0066 6553 736e 726f 4620 756f 2072     .1f.Sensor Four 
   dce74:	6f43 736e 6174 746e 3a20 2520 2e33 6631     Constant : %3.1f
   dce84:	5300 6e65 6f73 2072 6946 6576 4320 6e6f     .Sensor Five Con
   dce94:	7473 6e61 2074 203a 3325 312e 0066 6553     stant : %3.1f.Se
   dcea4:	736e 726f 5320 7869 4320 6e6f 7473 6e61     nsor Six Constan
   dceb4:	2074 203a 3325 312e 0066 6f43 736e 6174     t : %3.1f.Consta
   dcec4:	746e 4f20 656e 5620 6c61 6575 7320 7465     nt One Value set
   dced4:	7420 206f 4300 6e6f 7473 6e61 2074 7754      to .Constant Tw
   dcee4:	206f 6156 756c 2065 6573 2074 6f74 0020     o Value set to .
   dcef4:	6f43 736e 6174 746e 5420 7268 6565 5620     Constant Three V
   dcf04:	6c61 6575 7320 7465 7420 206f 4300 6e6f     alue set to .Con
   dcf14:	7473 6e61 2074 6f46 7275 5620 6c61 6575     stant Four Value
   dcf24:	7320 7465 7420 206f 4300 6e6f 7473 6e61      set to .Constan
   dcf34:	2074 6946 6576 5620 6c61 6575 7320 7465     t Five Value set
   dcf44:	7420 206f 4300 6e6f 7473 6e61 2074 6953      to .Constant Si
   dcf54:	2078 6156 756c 2065 6573 2074 6f74 0020     x Value set to .
   dcf64:	6c61 6169 0073 616c 0074 6f6c 676e 7000     alias.lat.long.p
   dcf74:	6f72 7564 7463 7b00 2220 6174 7367 2022     roduct.{ "tags" 
   dcf84:	203a 227b 6c61 6169 2273 203a 2522 2273     : {"alias": "%s"
   dcf94:	222c 616c 2274 203a 2522 2273 222c 6f6c     ,"lat": "%s","lo
   dcfa4:	676e 7469 6475 2265 203a 2522 2273 222c     ngitude": "%s","
   dcfb4:	7270 646f 6375 2274 203a 2522 2273 222c     product": "%s","
   dcfc4:	6544 6976 6563 4e2d 6d61 2265 203a 2522     Device-Name": "%
   dcfd4:	2273 222c 6564 6976 6563 695f 2264 203a     s","device_id": 
   dcfe4:	2522 2273 2c7d 7622 6c61 6575 2273 203a     "%s"},"values": 
   dcff4:	227b 6573 736e 726f 6e4f 2265 253a 2e34     {"sensorOne":%4.
   dd004:	6631 202c 7322 6e65 6f73 5472 6f77 3a22     1f, "sensorTwo":
   dd014:	3425 312e 2c66 2020 7322 6e65 6f73 5472     %4.1f,  "sensorT
   dd024:	7268 6565 3a22 3425 312e 2c66 2020 7322     hree":%4.1f,  "s
   dd034:	6e65 6f73 4672 756f 2272 253a 2e34 6631     ensorFour":%4.1f
   dd044:	202c 2220 6573 736e 726f 6946 6576 3a22     ,  "sensorFive":
   dd054:	3425 312e 2c66 7322 6e65 6f73 5372 7869     %4.1f,"sensorSix
   dd064:	3a22 3425 312e 2c66 4d22 646f 2265 313a     ":%4.1f,"Mode":1
   dd074:	7d7d 7b00 7322 6e65 6f73 4f72 656e 3a22     }}.{"sensorOne":
   dd084:	3425 312e 2c66 2220 6573 736e 726f 7754     %4.1f, "sensorTw
   dd094:	226f 253a 2e34 6631 202c 2220 6573 736e     o":%4.1f,  "sens
   dd0a4:	726f 6854 6572 2265 253a 2e34 6631 202c     orThree":%4.1f, 
   dd0b4:	2220 6573 736e 726f 6f46 7275 3a22 3425      "sensorFour":%4
   dd0c4:	312e 2c66 2020 7322 6e65 6f73 4672 7669     .1f,  "sensorFiv
   dd0d4:	2265 253a 2e34 6631 222c 6573 736e 726f     e":%4.1f,"sensor
   dd0e4:	6953 2278 253a 2e34 6631 222c 6f4d 6564     Six":%4.1f,"Mode
   dd0f4:	3a22 7d31 7b00 5322 6e65 6f73 4f72 656e     ":1}.{"SensorOne
   dd104:	2252 253a 2e34 6631 202c 5322 6e65 6f73     R":%4.1f, "Senso
   dd114:	4f72 656e 2253 253a 2e34 6631 202c 2220     rOneS":%4.1f,  "
   dd124:	6553 736e 726f 6e4f 5465 3a22 3425 312e     SensorOneT":%4.1
   dd134:	2c66 2020 7322 6e65 6f73 5472 6f77 2252     f,  "sensorTwoR"
   dd144:	253a 2e34 6631 202c 2220 6573 736e 726f     :%4.1f,  "sensor
   dd154:	7754 536f 3a22 3425 312e 2c66 7322 6e65     TwoS":%4.1f,"sen
   dd164:	6f73 5472 6f77 2254 253a 2e34 6631 222c     sorTwoT":%4.1f,"
   dd174:	6f4d 6564 3a22 7d32 7b00 5322 6e65 6f73     Mode":2}.{"Senso
   dd184:	4f72 656e 2252 253a 2e34 6631 202c 5322     rOneR":%4.1f, "S
   dd194:	6e65 6f73 4f72 656e 2253 253a 2e34 6631     ensorOneS":%4.1f
   dd1a4:	202c 2220 6553 736e 726f 6e4f 5465 3a22     ,  "SensorOneT":
   dd1b4:	3425 312e 2c66 2020 7322 6e65 6f73 4672     %4.1f,  "sensorF
   dd1c4:	756f 2272 253a 2e34 6631 202c 2220 6573     our":%4.1f,  "se
   dd1d4:	736e 726f 6946 6576 3a22 3425 312e 2c66     nsorFive":%4.1f,
   dd1e4:	7322 6e65 6f73 5372 7869 3a22 3425 312e     "sensorSix":%4.1
   dd1f4:	2c66 4d22 646f 2265 333a 007d 227b 6553     f,"Mode":3}.{"Se
   dd204:	736e 726f 6e4f 5265 3a22 3425 312e 2c66     nsorOneR":%4.1f,
   dd214:	2220 6553 736e 726f 6e4f 5365 3a22 3425      "SensorOneS":%4
   dd224:	312e 2c66 2020 5322 6e65 6f73 4f72 656e     .1f,  "SensorOne
   dd234:	2254 253a 2e34 6631 202c 2220 6553 736e     T":%4.1f,  "Sens
   dd244:	726f 6e4f 4e65 3a22 3425 312e 2c66 2020     orOneN":%4.1f,  
   dd254:	7322 6e65 6f73 4672 7669 2265 253a 2e34     "sensorFive":%4.
   dd264:	6631 222c 6573 736e 726f 6953 2278 253a     1f,"sensorSix":%
   dd274:	2e34 6631 222c 6f4d 6564 3a22 7d34 7000     4.1f,"Mode":4}.p
   dd284:	776f 7265 6f6d 696e 6f74 6972 676e 685f     owermonitoring_h
   dd294:	6f6f 006b 6e69 6c66 7875 685f 6f6f 006b     ook.influx_hook.
   dd2a4:	7073 7261 2f6b 6564 6976 6563 732f 7365     spark/device/ses
   dd2b4:	6973 6e6f 652f 646e 4500 7272 726f 5320     sion/end.Error S
   dd2c4:	6174 6574 2d20 5220 7365 7465 5300 6174     tate - Reset.Sta
   dd2d4:	6574 4400 7665 6369 2065 614e 656d 2a00     te.Device Name.*
   dd2e4:	4300 696c 6e65 2074 614e 656d 6e00 206f     .Client Name.no 
   dd2f4:	6f63 666e 6769 7320 7465 6400 7461 4361     config set.dataC
   dd304:	6c61 626c 6361 006b 682f 6f6f 2d6b 6572     allback./hook-re
   dd314:	7073 6e6f 6573 702f 776f 7265 6f6d 696e     sponse/powermoni
   dd324:	6f74 6972 676e 685f 6f6f 2f6b 5200 6c65     toring_hook/.Rel
   dd334:	6165 6573 4200 7461 6574 7972 4200 7461     ease.Battery.Bat
   dd344:	6574 7972 6f43 746e 7865 0074 654b 7065     teryContext.Keep
   dd354:	4120 696c 6576 5320 6365 5200 7065 726f      Alive Sec.Repor
   dd364:	6974 676e 4420 7275 7461 6f69 006e 704f     ting Duration.Op
   dd374:	7265 7461 6f69 206e 6f4d 6564 4d00 6165     eration Mode.Mea
   dd384:	7573 6572 4e2d 776f 5600 7265 6f62 6573     sure-Now.Verbose
   dd394:	4d2d 646f 0065 6553 2074 6f43 736e 6174     -Mode.Set Consta
   dd3a4:	746e 4f20 656e 5300 7465 4320 6e6f 7473     nt One.Set Const
   dd3b4:	6e61 2074 7754 006f 6553 2074 6f43 736e     ant Two.Set Cons
   dd3c4:	6174 746e 5420 7268 6565 5300 7465 4320     tant Three.Set C
   dd3d4:	6e6f 7473 6e61 2074 6f46 7275 5300 7465     onstant Four.Set
   dd3e4:	4320 6e6f 7473 6e61 2074 6946 6576 5300      Constant Five.S
   dd3f4:	7465 4320 6e6f 7473 6e61 2074 6953 0078     et Constant Six.
   dd404:	6e45 6261 656c 5320 6e65 6f73 0072 6944     Enable Sensor.Di
   dd414:	6173 6c62 2065 6553 736e 726f 4f00 6570     sable Sensor.Ope
   dd424:	6172 6974 676e 4d20 646f 0065 6552 6f70     rating Mode.Repo
   dd434:	7472 6e69 2067 7544 6172 6974 6e6f 4d28     rting Duration(M
   dd444:	4e49 5455 5345 0029 6552 6f62 746f 4420     INUTES).Reboot D
   dd454:	7665 6369 0065 6c43 756f 4364 6e6f 6966     evice.CloudConfi
   dd464:	4467 7665 6369 4e65 746f 7365 5300 7465     gDeviceNotes.Set
   dd474:	7075 4c20 6f6f 0070 6f4c 6461 6e69 2067     up Loop.Loading 
   dd484:	6544 6166 6c75 7374 4c00 616f 6964 676e     Defaults.Loading
   dd494:	4620 6f72 206d 5246 4d41 5300 6174 7472      From FRAM.Start
   dd4a4:	7075 0000                                   up..

000dd4a8 <_ZTV5Timer>:
	...
   dd4b0:	4291 000d 42e5 000d 41d1 000d               .B...B...A..

000dd4bc <_ZTV17PublishQueueAsync>:
	...
   dd4c4:	41dd 000d 41f1 000d 719d 000d 7329 000d     .A...A...q..)s..
   dd4d4:	72e9 000d 72c7 000d 746f 000d 730f 000d     .r...r..ot...s..

000dd4e4 <_ZTV8MB85RC64>:
	...
   dd4ec:	4205 000d 4219 000d 6795 000d 682b 000d     .B...B...g..+h..
   dd4fc:	68ad 000d                                   .h..

000dd500 <_ZTV18CloudConfigStorage>:
	...
   dd508:	40cd 000d 40a9 000d 40a9 000d 58a1 000d     .@...@...@...X..
   dd518:	40d1 000d 40d3 000d 0000 0000 0000 0000     .@...@..........

000dd528 <_ZTV26CloudConfigStorageRetained>:
	...
   dd530:	40d7 000d 7715 000d 411b 000d 58a1 000d     .@...w...A...X..
   dd540:	40d1 000d 7791 000d 58e9 000d 5901 000d     .@...w...X...Y..
   dd550:	40db 000d cb98 000d cba0 000d cba4 000d     .@..............
   dd560:	cbad 000d cbb5 000d cbc1 000d cbc7 000d     ................
   dd570:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dd580:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dd5b0 <_ZL13releaseNumber>:
   dd5b0:	3131 302e 0030 0000                         11.00...

000dd5b8 <_ZL17FRAMversionNumber>:
   dd5b8:	0016 0000 6170 7472 6369 656c 642f 7665     ....particle/dev
   dd5c8:	6369 2f65 616e 656d 0000 0000               ice/name....

000dd5d4 <_ZTV16DeviceNameHelper>:
	...
   dd5dc:	6159 000d 6179 000d 6089 000d               Ya..ya...`..

000dd5e8 <_ZTV24DeviceNameHelperRetained>:
	...
   dd5f0:	618d 000d 61a1 000d 6089 000d 7277 7469     .a...a...`..writ
   dd600:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   dd610:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dd620:	7264 253d 0075 0000                         dr=%u...

000dd628 <_ZTV6MB85RC>:
	...
   dd630:	66e5 000d 66e7 000d 6795 000d 682b 000d     .f...f...g..+h..
   dd640:	68ad 000d 6564 6976 6563 6552 6461 6620     .h..deviceRead f
   dd650:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dd660:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dd670:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dd680:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dd690:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dd6a0:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dd6b0:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dd6c0:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dd6d0:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dd6e0:	0063 0000                                   c...

000dd6e4 <_ZTV12MCP79410SRAM>:
	...
   dd6ec:	696d 000d 6983 000d 695d 000d 6961 000d     mi...i..]i..ai..
   dd6fc:	69ad 000d 6c95 000d 6eb5 000d               .i...l...n..

000dd708 <_ZTV12MCP79410Time>:
	...
   dd710:	6971 000d 6975 000d                         qi..ui..

000dd718 <_ZTV14MCP79410EEPROM>:
	...
   dd720:	696f 000d 6991 000d 6965 000d 6969 000d     oi...i..ei..ii..
   dd730:	69ad 000d 6ccf 000d 70f5 000d               .i...l...p..

000dd73c <_ZTV8MCP79410>:
	...
   dd744:	6973 000d 699f 000d 7550 6c62 7369 5168     si...i..PublishQ
   dd754:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dd764:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dd774:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dd784:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dd794:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dd7a4:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dd7b4:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dd7c4:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dd7d4:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dd7e4:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dd7f4:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dd804:	7162 0000                                   bq..

000dd808 <_ZTV21PublishQueueAsyncBase>:
	...
   dd818:	719d 000d 40a9 000d 40a9 000d 40a9 000d     .q...@...@...@..
   dd828:	40a9 000d 40a9 000d                         .@...@..

000dd830 <_ZTV25PublishQueueAsyncRetained>:
	...
   dd838:	7285 000d 7299 000d 719d 000d 7329 000d     .r...r...q..)s..
   dd848:	72e9 000d 72c7 000d 746f 000d 730f 000d     .r...r..ot...s..
   dd858:	7325 682f 6f6f 2d6b 6572 7073 6e6f 6573     %s/hook-response
   dd868:	252f 2f73 7500 6470 7461 4465 7461 2061     /%s/.updateData 
   dd878:	6163 6c6c 6465 2520 0073 6c43 756f 4364     called %s.CloudC
   dd888:	6e6f 6966 5567 6470 7461 5765 6265 6f68     onfigUpdateWebho
   dd898:	6b6f 3a3a 7473 7261 5574 6470 7461 2065     ok::startUpdate 
   dd8a8:	7325 6300 6f6c 6475 6320 6e6f 656e 7463     %s.cloud connect
   dd8b8:	6465 7700 6961 2074 6f66 2072 7075 6164     ed.wait for upda
   dd8c8:	6574 6e00 206f 6164 6174 6f20 2072 7075     te.no data or up
   dd8d8:	6164 6574 6120 2074 6572 7473 7261 0074     date at restart.
   dd8e8:	6863 6365 696b 676e 6620 726f 7420 6d69     checking for tim
   dd8f8:	2065 7075 6164 6574 7300 6174 6574 7453     e update.stateSt
   dd908:	7261 5574 6470 7461 0065 7473 7461 5765     artUpdate.stateW
   dd918:	6961 5574 6470 7461 4365 6d6f 6c70 7465     aitUpdateComplet
   dd928:	2065 6974 656d 756f 0074 7473 7461 5765     e timeout.stateW
   dd938:	6961 5574 6470 7461 4365 6d6f 6c70 7465     aitUpdateComplet
   dd948:	2065 6f63 706d 656c 6574 0000               e complete..

000dd954 <_ZTV11CloudConfig>:
	...
   dd95c:	7a15 000d 7849 000d 7869 000d               .z..Ix..ix..

000dd968 <_ZTV22CloudConfigStorageData>:
	...
   dd970:	40d7 000d 7715 000d 40a9 000d 58a1 000d     .@...w...@...X..
   dd980:	40d1 000d 7791 000d 0000 0000 0000 0000     .@...w..........
   dd990:	40a9 000d                                   .@..

000dd994 <_ZTV24CloudConfigUpdateWebhook>:
	...
   dd99c:	7a89 000d 7711 000d 7a4d 000d 7761 000d     .z...w..Mz..aw..
   dd9ac:	777d 000d                                   }w..

000dd9b0 <_ZTV29CloudConfigUpdateSubscription>:
	...
   dd9b8:	7a89 000d 7711 000d 7713 000d 7735 000d     .z...w...w..5w..
   dd9c8:	774d 000d                                   Mw..

000dd9cc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd9d4:	85f1 000d 85f7 000d 8635 000d 8605 000d     ........5.......
   dd9e4:	85f3 000d                                   ....

000dd9e8 <_ZTVN5spark13EthernetClassE>:
	...
   dd9f0:	8bf3 000d 8be9 000d 8bdf 000d 8bd5 000d     ................
   dda00:	8bc9 000d 8bbd 000d 9319 000d 9321 000d     ............!...
   dda10:	8bb1 000d 8ba9 000d 8b9f 000d 8b95 000d     ................
   dda20:	9351 000d                                   Q...

000dda24 <_ZTV7TwoWire>:
	...
   dda2c:	8c11 000d 8c5b 000d 8c33 000d 8c13 000d     ....[...3.......
   dda3c:	8c3b 000d 8c43 000d 8c4b 000d 8c53 000d     ;...C...K...S...

000dda4c <_ZTV9IPAddress>:
	...
   dda54:	8d8d 000d 8d7d 000d 8d7f 000d               ....}.......

000dda60 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dda68:	8e97 000d 8e9d 000d 8eb3 000d 8eab 000d     ................
   dda78:	8e99 000d 7061 0070                         ....app.

000dda80 <_ZTVN5spark12NetworkClassE>:
	...
   dda88:	92d9 000d 92e3 000d 92ed 000d 92f7 000d     ................
   dda98:	9301 000d 930d 000d 9319 000d 9321 000d     ............!...
   ddaa8:	9329 000d 9335 000d 933d 000d 9347 000d     )...5...=...G...
   ddab8:	9351 000d 005a 2b25 3330 3a64 3025 7532     Q...Z.%+03d:%02u
   ddac8:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   ddad8:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000ddae8 <_ZTV11USARTSerial>:
	...
   ddaf0:	9a99 000d 9b05 000d 9add 000d 9445 000d     ............E...
   ddb00:	9aad 000d 9ac9 000d 9abb 000d 9ad7 000d     ................
   ddb10:	9a9b 000d 9a9f 000d                         ........

000ddb18 <_ZTV9USBSerial>:
	...
   ddb20:	9b99 000d 9c01 000d 9bd7 000d 9445 000d     ............E...
   ddb30:	9bc9 000d 9b9b 000d 9bab 000d 9bfb 000d     ................
   ddb40:	9bbb 000d 9b95 000d                         ........

000ddb48 <_ZTVN5spark9WiFiClassE>:
	...
   ddb50:	9cfb 000d 9cf1 000d 9ce7 000d 9c9d 000d     ................
   ddb60:	9cdb 000d 9ccf 000d 9319 000d 9321 000d     ............!...
   ddb70:	9cc3 000d 9cbb 000d 9cb1 000d 9ca7 000d     ................
   ddb80:	9351 000d                                   Q...

000ddb84 <_ZSt7nothrow>:
   ddb84:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   ddb94:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   ddba4:	2e25 6432 2520 0a64                          %.2d %d..

000ddbad <day_name.6145>:
   ddbad:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddbbd:	6972 6153                                    riSat

000ddbc2 <mon_name.6146>:
   ddbc2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddbd2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddbe2:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000ddbf4 <fpi.7566>:
   ddbf4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddc04:	0000 0000                                   ....

000ddc08 <fpinan.7602>:
   ddc08:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ddc20 <tinytens>:
   ddc20:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddc30:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddc40:	6f43 64ac 0628 1168                         Co.d(.h.

000ddc48 <_ctype_>:
   ddc48:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddc58:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddc68:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ddc78:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ddc88:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ddc98:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddca8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddcb8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddcc8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddd4c <_C_numeric_locale>:
   ddd4c:	ccfe 000d dbac 000d d944 2003 0043 4f50     ........D.. C.PO
   ddd5c:	4953 0058                                   SIX.

000ddd60 <__mprec_bigtens>:
   ddd60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ddd70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ddd80:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ddd88 <__mprec_tens>:
   ddd88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ddd98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddda8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dddb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dddc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dddd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddde8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dddf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dde08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dde18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dde28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dde38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dde48:	9db4 79d9 7843 44ea                         ...yCx.D

000dde50 <p05.7490>:
   dde50:	0005 0000 0019 0000 007d 0000               ........}...

000dde5c <link_const_variable_data_end>:
   dde5c:	000d5dfd 	.word	0x000d5dfd
   dde60:	000d65ed 	.word	0x000d65ed
   dde64:	000d7125 	.word	0x000d7125
   dde68:	000d7701 	.word	0x000d7701
   dde6c:	000d7e31 	.word	0x000d7e31
   dde70:	000d85c9 	.word	0x000d85c9
   dde74:	000d8bfd 	.word	0x000d8bfd
   dde78:	000d92c9 	.word	0x000d92c9
   dde7c:	000d9431 	.word	0x000d9431
   dde80:	000d94e5 	.word	0x000d94e5
   dde84:	000d9745 	.word	0x000d9745
   dde88:	000d9a85 	.word	0x000d9a85
   dde8c:	000d9d05 	.word	0x000d9d05
