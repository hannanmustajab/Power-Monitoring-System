
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a500  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000944  2003f400  000de520  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003dc20  000dee64  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000918  2003dee0  2003dee0  0002dee0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000df120  000df120  0001f120  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000df14c  000df14c  0001f14c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00237b84  00000000  00000000  0001f150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020209  00000000  00000000  00256cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00047905  00000000  00000000  00276edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003940  00000000  00000000  002be7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bf08  00000000  00000000  002c2122  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043424  00000000  00000000  002ce02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00056bed  00000000  00000000  0031144e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001480e5  00000000  00000000  0036803b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ab50  00000000  00000000  004b0120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fa65 	bl	db500 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fa87 	bl	db550 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc20 	.word	0x2003dc20
   d404c:	000dee64 	.word	0x000dee64
   d4050:	2003dedc 	.word	0x2003dedc
   d4054:	2003dee0 	.word	0x2003dee0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fac9 	bl	da5f8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de4ec 	.word	0x000de4ec
   d4080:	000de520 	.word	0x000de520

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bf12 	b.w	d5eac <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f9b7 	bl	d53fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 ba73 	b.w	da57c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bcad 	b.w	d89f4 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bcab 	b.w	d89f4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bcb1 	b.w	d8a04 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f004 bcaf 	b.w	d8a04 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 fb5a 	bl	d8768 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d8499 	.word	0x000d8499

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN18CloudConfigStorage13getDataHeaderEv>:
     * 
     * This is only available in classes derived from CloudConfigStorageData, which is all
     * of them except CloudConfigDataStatic, which is not updateable and therefore does not
     * need the structure.
     */
    virtual CloudConfigDataHeader *getDataHeader() { return 0; };
   d40cc:	2000      	movs	r0, #0
   d40ce:	4770      	bx	lr

000d40d0 <_ZN18CloudConfigStorage4loopEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };

    /**
     * @brief Called from loop(). Optional. Only needed if the storage method wants loop processing time.
     */
    virtual void loop() {};
   d40d0:	4770      	bx	lr

000d40d2 <_ZN18CloudConfigStorage10updateDataEPKc>:
     * 
     * @param json The new JSON data to save
     * 
     * This is subclassed in CloudConfigStorageData.
     */
    virtual bool updateData(const char *json) { return false; };
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr

000d40d6 <_ZN22CloudConfigStorageData13getDataHeaderEv>:
    CloudConfigStorageData &withData(CloudConfigDataHeader *header, size_t dataSize);

    /**
     * @brief Gets a pointer to the CloudConfigDataHeader structure
     */
    virtual CloudConfigDataHeader *getDataHeader() { return header; };
   d40d6:	6900      	ldr	r0, [r0, #16]
   d40d8:	4770      	bx	lr

000d40da <_ZN26CloudConfigStorageRetained4saveEv>:
    virtual void setup() { validate(); };

    /**
     * @brief Retained data doesn't require an explict save
     */
    virtual bool save() { return true; };
   d40da:	2001      	movs	r0, #1
   d40dc:	4770      	bx	lr
	...

000d40e0 <_Z11watchdogISRv>:
  fram.put(FRAM::sensorConstantsAddr,sensorConstants);
}

void watchdogISR()
{
  watchdogFlag = true;
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z11watchdogISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e5ed 	.word	0x2003e5ed

000d40ec <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ec:	6803      	ldr	r3, [r0, #0]
   d40ee:	4718      	bx	r3

000d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f0:	2a01      	cmp	r2, #1
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f4:	2a02      	cmp	r2, #2
   d40f6:	d003      	beq.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f8:	2000      	movs	r0, #0
   d40fa:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40fc:	6001      	str	r1, [r0, #0]
	      break;
   d40fe:	e7fb      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4100:	680b      	ldr	r3, [r1, #0]
   d4102:	6003      	str	r3, [r0, #0]
	}
   d4104:	e7f8      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  switch (__op)
   d4106:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4108:	bf08      	it	eq
   d410a:	6001      	streq	r1, [r0, #0]
	}
   d410c:	2000      	movs	r0, #0
   d410e:	4770      	bx	lr

000d4110 <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
	    std::forward<_ArgTypes>(__args)...);
      }
   d4110:	4770      	bx	lr

000d4112 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlPKcE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d4112:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4114:	bf08      	it	eq
   d4116:	6001      	streq	r1, [r0, #0]
	}
   d4118:	2000      	movs	r0, #0
   d411a:	4770      	bx	lr

000d411c <_ZN26CloudConfigStorageRetained5setupEv>:
    virtual void setup() { validate(); };
   d411c:	f002 bb28 	b.w	d6770 <_ZN22CloudConfigStorageData8validateEv>

000d4120 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z10measureNow6String+0x14>)
   d4124:	f005 fe54 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4128:	b118      	cbz	r0, d4132 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d412a:	4b03      	ldr	r3, [pc, #12]	; (d4138 <_Z10measureNow6String+0x18>)
   d412c:	2203      	movs	r2, #3
   d412e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dd3f3 	.word	0x000dd3f3
   d4138:	2003e5b5 	.word	0x2003e5b5

000d413c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d413c:	b510      	push	{r4, lr}
   d413e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	220a      	movs	r2, #10
   d4144:	a901      	add	r1, sp, #4
   d4146:	f008 f937 	bl	dc3b8 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d414a:	1e43      	subs	r3, r0, #1
   d414c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d414e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4150:	d831      	bhi.n	d41b6 <_Z12enableSensor6String+0x7a>
 
  if (tempSensor == 1){
   d4152:	2801      	cmp	r0, #1
   d4154:	d10a      	bne.n	d416c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d4156:	4b19      	ldr	r3, [pc, #100]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d4158:	4919      	ldr	r1, [pc, #100]	; (d41c0 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorOneConnected = true;
   d415a:	7718      	strb	r0, [r3, #28]
    sysStatusWriteNeeded = true;    
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d415c:	a802      	add	r0, sp, #8
   d415e:	f007 fa2d 	bl	db5bc <strcpy>
    sysStatusWriteNeeded = true; 
   d4162:	4b18      	ldr	r3, [pc, #96]	; (d41c4 <_Z12enableSensor6String+0x88>)
   d4164:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d4166:	4620      	mov	r0, r4
   d4168:	b042      	add	sp, #264	; 0x108
   d416a:	bd10      	pop	{r4, pc}
  } else if (tempSensor == 2){
   d416c:	2802      	cmp	r0, #2
   d416e:	d104      	bne.n	d417a <_Z12enableSensor6String+0x3e>
    sysStatus.sensorTwoConnected = true;
   d4170:	4b12      	ldr	r3, [pc, #72]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4172:	4915      	ldr	r1, [pc, #84]	; (d41c8 <_Z12enableSensor6String+0x8c>)
    sysStatus.sensorTwoConnected = true;
   d4174:	2401      	movs	r4, #1
   d4176:	775c      	strb	r4, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4178:	e7f0      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 3){
   d417a:	2803      	cmp	r0, #3
   d417c:	d104      	bne.n	d4188 <_Z12enableSensor6String+0x4c>
    sysStatus.sensorThreeConnected = true;
   d417e:	4b0f      	ldr	r3, [pc, #60]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4180:	4912      	ldr	r1, [pc, #72]	; (d41cc <_Z12enableSensor6String+0x90>)
    sysStatus.sensorThreeConnected = true;
   d4182:	2401      	movs	r4, #1
   d4184:	779c      	strb	r4, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4186:	e7e9      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 4){
   d4188:	2804      	cmp	r0, #4
   d418a:	d104      	bne.n	d4196 <_Z12enableSensor6String+0x5a>
    sysStatus.sensorFourConnected = true;
   d418c:	4b0b      	ldr	r3, [pc, #44]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d418e:	4910      	ldr	r1, [pc, #64]	; (d41d0 <_Z12enableSensor6String+0x94>)
    sysStatus.sensorFourConnected = true;
   d4190:	2401      	movs	r4, #1
   d4192:	77dc      	strb	r4, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4194:	e7e2      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 5){
   d4196:	2805      	cmp	r0, #5
   d4198:	d105      	bne.n	d41a6 <_Z12enableSensor6String+0x6a>
    sysStatus.sensorFiveConnected = true;
   d419a:	4b08      	ldr	r3, [pc, #32]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d419c:	490d      	ldr	r1, [pc, #52]	; (d41d4 <_Z12enableSensor6String+0x98>)
    sysStatus.sensorFiveConnected = true;
   d419e:	2401      	movs	r4, #1
   d41a0:	f883 4020 	strb.w	r4, [r3, #32]
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d41a4:	e7da      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 6){
   d41a6:	2806      	cmp	r0, #6
   d41a8:	d105      	bne.n	d41b6 <_Z12enableSensor6String+0x7a>
    sysStatus.sensorSixConnected = true;
   d41aa:	4b04      	ldr	r3, [pc, #16]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41ac:	490a      	ldr	r1, [pc, #40]	; (d41d8 <_Z12enableSensor6String+0x9c>)
    sysStatus.sensorSixConnected = true;
   d41ae:	2401      	movs	r4, #1
   d41b0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41b4:	e7d2      	b.n	d415c <_Z12enableSensor6String+0x20>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41b6:	2400      	movs	r4, #0
   d41b8:	e7d5      	b.n	d4166 <_Z12enableSensor6String+0x2a>
   d41ba:	bf00      	nop
   d41bc:	2003e5b8 	.word	0x2003e5b8
   d41c0:	000dd3f5 	.word	0x000dd3f5
   d41c4:	2003e5ec 	.word	0x2003e5ec
   d41c8:	000dd408 	.word	0x000dd408
   d41cc:	000dd41b 	.word	0x000dd41b
   d41d0:	000dd430 	.word	0x000dd430
   d41d4:	000dd444 	.word	0x000dd444
   d41d8:	000dd458 	.word	0x000dd458

000d41dc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41dc:	6943      	ldr	r3, [r0, #20]
   d41de:	b113      	cbz	r3, d41e6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41e0:	6983      	ldr	r3, [r0, #24]
   d41e2:	300c      	adds	r0, #12
   d41e4:	4718      	bx	r3
            callback();
        }
    }
   d41e6:	4770      	bx	lr

000d41e8 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4b03      	ldr	r3, [pc, #12]	; (d41f8 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41ec:	6003      	str	r3, [r0, #0]
   d41ee:	4604      	mov	r4, r0
   d41f0:	f003 fe84 	bl	d7efc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	000ddb28 	.word	0x000ddb28

000d41fc <_ZN17PublishQueueAsyncD0Ev>:
   d41fc:	b510      	push	{r4, lr}
   d41fe:	4604      	mov	r4, r0
   d4200:	f7ff fff2 	bl	d41e8 <_ZN17PublishQueueAsyncD1Ev>
   d4204:	4620      	mov	r0, r4
   d4206:	2138      	movs	r1, #56	; 0x38
   d4208:	f006 fb05 	bl	da816 <_ZdlPvj>
   d420c:	4620      	mov	r0, r4
   d420e:	bd10      	pop	{r4, pc}

000d4210 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4210:	b510      	push	{r4, lr}
   d4212:	4b03      	ldr	r3, [pc, #12]	; (d4220 <_ZN8MB85RC64D1Ev+0x10>)
   d4214:	6003      	str	r3, [r0, #0]
   d4216:	4604      	mov	r4, r0
   d4218:	f003 f8a0 	bl	d735c <_ZN6MB85RCD1Ev>
   d421c:	4620      	mov	r0, r4
   d421e:	bd10      	pop	{r4, pc}
   d4220:	000ddb50 	.word	0x000ddb50

000d4224 <_ZN8MB85RC64D0Ev>:
   d4224:	b510      	push	{r4, lr}
   d4226:	4604      	mov	r4, r0
   d4228:	f7ff fff2 	bl	d4210 <_ZN8MB85RC64D1Ev>
   d422c:	4620      	mov	r0, r4
   d422e:	2110      	movs	r1, #16
   d4230:	f006 faf1 	bl	da816 <_ZdlPvj>
   d4234:	4620      	mov	r0, r4
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4238:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d423a:	2100      	movs	r1, #0
   d423c:	4604      	mov	r4, r0
   d423e:	4608      	mov	r0, r1
   d4240:	f004 f8b2 	bl	d83a8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4244:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4246:	4620      	mov	r0, r4
   d4248:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d424a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d424c:	f004 f8c4 	bl	d83d8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4250:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4252:	b10c      	cbz	r4, d4258 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4254:	2301      	movs	r3, #1
   d4256:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4258:	2100      	movs	r1, #0
   d425a:	2001      	movs	r0, #1
   d425c:	f004 f8a4 	bl	d83a8 <os_thread_scheduling>
            }
        }
        if (t) {
   d4260:	b12c      	cbz	r4, d426e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4262:	6823      	ldr	r3, [r4, #0]
   d4264:	4620      	mov	r0, r4
   d4266:	689b      	ldr	r3, [r3, #8]
   d4268:	4798      	blx	r3
            t->running = false;
   d426a:	2300      	movs	r3, #0
   d426c:	7123      	strb	r3, [r4, #4]
        }
    }
   d426e:	b002      	add	sp, #8
   d4270:	bd10      	pop	{r4, pc}

000d4272 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4272:	b510      	push	{r4, lr}
   d4274:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4276:	6800      	ldr	r0, [r0, #0]
   d4278:	b108      	cbz	r0, d427e <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d427a:	f004 fbc3 	bl	d8a04 <free>
class SystemClass {
   d427e:	4620      	mov	r0, r4
   d4280:	bd10      	pop	{r4, pc}

000d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4282:	2300      	movs	r3, #0
   d4284:	2204      	movs	r2, #4
   d4286:	f004 baed 	b.w	d8864 <spark_variable>

000d428a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d428a:	b510      	push	{r4, lr}
      if (_M_manager)
   d428c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d428e:	4604      	mov	r4, r0
      if (_M_manager)
   d4290:	b113      	cbz	r3, d4298 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4292:	2203      	movs	r2, #3
   d4294:	4601      	mov	r1, r0
   d4296:	4798      	blx	r3
    }
   d4298:	4620      	mov	r0, r4
   d429a:	bd10      	pop	{r4, pc}

000d429c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d429e:	4b13      	ldr	r3, [pc, #76]	; (d42ec <_ZN5TimerD1Ev+0x50>)
   d42a0:	6003      	str	r3, [r0, #0]
   d42a2:	4604      	mov	r4, r0
        if (handle) {
   d42a4:	6880      	ldr	r0, [r0, #8]
   d42a6:	b1c8      	cbz	r0, d42dc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42a8:	2500      	movs	r5, #0
   d42aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42ae:	e9cd 3500 	strd	r3, r5, [sp]
   d42b2:	2102      	movs	r1, #2
   d42b4:	462b      	mov	r3, r5
   d42b6:	462a      	mov	r2, r5
   d42b8:	f004 f896 	bl	d83e8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42bc:	68a0      	ldr	r0, [r4, #8]
   d42be:	4629      	mov	r1, r5
   d42c0:	f004 f8ca 	bl	d8458 <os_timer_set_id>
            while (running) {
   d42c4:	7923      	ldrb	r3, [r4, #4]
   d42c6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42ca:	b113      	cbz	r3, d42d2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42cc:	f004 f864 	bl	d8398 <os_thread_yield>
            while (running) {
   d42d0:	e7f8      	b.n	d42c4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42d2:	68a0      	ldr	r0, [r4, #8]
   d42d4:	4629      	mov	r1, r5
   d42d6:	f004 f877 	bl	d83c8 <os_timer_destroy>
            handle = nullptr;
   d42da:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42dc:	f104 000c 	add.w	r0, r4, #12
   d42e0:	f7ff ffd3 	bl	d428a <_ZNSt14_Function_baseD1Ev>
    }
   d42e4:	4620      	mov	r0, r4
   d42e6:	b003      	add	sp, #12
   d42e8:	bd30      	pop	{r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	000ddb14 	.word	0x000ddb14

000d42f0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d42f0:	b510      	push	{r4, lr}
   d42f2:	4604      	mov	r4, r0
    }
   d42f4:	f7ff ffd2 	bl	d429c <_ZN5TimerD1Ev>
   d42f8:	4620      	mov	r0, r4
   d42fa:	211c      	movs	r1, #28
   d42fc:	f006 fa8b 	bl	da816 <_ZdlPvj>
   d4300:	4620      	mov	r0, r4
   d4302:	bd10      	pop	{r4, pc}

000d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4304:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4306:	4801      	ldr	r0, [pc, #4]	; (d430c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4308:	f004 bc81 	b.w	d8c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d430c:	000d8bc7 	.word	0x000d8bc7

000d4310 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4310:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4312:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4314:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4316:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d431a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d431e:	2201      	movs	r2, #1
   d4320:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4322:	4341      	muls	r1, r0
   d4324:	466a      	mov	r2, sp
   d4326:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4328:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d432c:	f004 faf2 	bl	d8914 <spark_set_connection_property>
    }
   d4330:	b003      	add	sp, #12
   d4332:	f85d fb04 	ldr.w	pc, [sp], #4

000d4336 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4336:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4338:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d433a:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d433c:	2100      	movs	r1, #0
   d433e:	b140      	cbz	r0, d4352 <_ZN5Timer12changePeriodEjj+0x1c>
   d4340:	e9cd 2100 	strd	r2, r1, [sp]
   d4344:	460a      	mov	r2, r1
   d4346:	2103      	movs	r1, #3
   d4348:	f004 f84e 	bl	d83e8 <os_timer_change>
   d434c:	fab0 f080 	clz	r0, r0
   d4350:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4352:	b003      	add	sp, #12
   d4354:	f85d fb04 	ldr.w	pc, [sp], #4

000d4358 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4358:	b513      	push	{r0, r1, r4, lr}
   d435a:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d435c:	4608      	mov	r0, r1
   d435e:	9101      	str	r1, [sp, #4]
   d4360:	f007 f951 	bl	db606 <strlen>
   d4364:	9901      	ldr	r1, [sp, #4]
   d4366:	4602      	mov	r2, r0
   d4368:	4620      	mov	r0, r4
}
   d436a:	b002      	add	sp, #8
   d436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d4370:	f005 bae0 	b.w	d9934 <_ZN5spark10JSONWriter4nameEPKcj>

000d4374 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4374:	b513      	push	{r0, r1, r4, lr}
   d4376:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4378:	4608      	mov	r0, r1
   d437a:	9101      	str	r1, [sp, #4]
   d437c:	f007 f943 	bl	db606 <strlen>
   d4380:	9901      	ldr	r1, [sp, #4]
   d4382:	4602      	mov	r2, r0
   d4384:	4620      	mov	r0, r4
}
   d4386:	b002      	add	sp, #8
   d4388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d438c:	f005 bae2 	b.w	d9954 <_ZN5spark10JSONWriter5valueEPKcj>

000d4390 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4390:	b40e      	push	{r1, r2, r3}
   d4392:	b510      	push	{r4, lr}
   d4394:	b08d      	sub	sp, #52	; 0x34
   d4396:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4398:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d439a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d439e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d43a0:	2300      	movs	r3, #0
   d43a2:	2020      	movs	r0, #32
   d43a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d43a8:	e9cd 4200 	strd	r4, r2, [sp]
   d43ac:	201e      	movs	r0, #30
   d43ae:	aa04      	add	r2, sp, #16
   d43b0:	f004 f9f2 	bl	d8798 <log_message_v>
}
   d43b4:	b00d      	add	sp, #52	; 0x34
   d43b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d43ba:	b003      	add	sp, #12
   d43bc:	4770      	bx	lr

000d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43be:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43c0:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43c2:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43c6:	f88d 3000 	strb.w	r3, [sp]
   d43ca:	f88d 5004 	strb.w	r5, [sp, #4]
   d43ce:	68e4      	ldr	r4, [r4, #12]
   d43d0:	233c      	movs	r3, #60	; 0x3c
   d43d2:	47a0      	blx	r4
	}
   d43d4:	b003      	add	sp, #12
   d43d6:	bd30      	pop	{r4, r5, pc}

000d43d8 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43d8:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d43da:	780d      	ldrb	r5, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43dc:	b093      	sub	sp, #76	; 0x4c
   d43de:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d43e0:	b96d      	cbnz	r5, d43fe <_Z14UbidotsHandlerPKcS0_+0x26>
    snprintf(responseString, sizeof(responseString),"No Data");
   d43e2:	4922      	ldr	r1, [pc, #136]	; (d446c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d43e4:	a802      	add	r0, sp, #8
   d43e6:	f007 f8e9 	bl	db5bc <strcpy>
    publishQueue.publish("Response Event",responseString,PRIVATE);
   d43ea:	f88d 5000 	strb.w	r5, [sp]
    publishQueue.publish("Response Event",responseString,PRIVATE);
   d43ee:	4b20      	ldr	r3, [pc, #128]	; (d4470 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d43f0:	4920      	ldr	r1, [pc, #128]	; (d4474 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d43f2:	781b      	ldrb	r3, [r3, #0]
   d43f4:	4820      	ldr	r0, [pc, #128]	; (d4478 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d43f6:	aa02      	add	r2, sp, #8
   d43f8:	f7ff ffe1 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d43fc:	e01b      	b.n	d4436 <_Z14UbidotsHandlerPKcS0_+0x5e>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43fe:	4608      	mov	r0, r1
   d4400:	f007 f859 	bl	db4b6 <atoi>
   d4404:	28c8      	cmp	r0, #200	; 0xc8
   d4406:	d118      	bne.n	d443a <_Z14UbidotsHandlerPKcS0_+0x62>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4408:	491c      	ldr	r1, [pc, #112]	; (d447c <_Z14UbidotsHandlerPKcS0_+0xa4>)
   d440a:	a802      	add	r0, sp, #8
   d440c:	f007 f8d6 	bl	db5bc <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4410:	2400      	movs	r4, #0
    publishQueue.publish("Response Event",responseString,PRIVATE);
   d4412:	4b17      	ldr	r3, [pc, #92]	; (d4470 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4414:	f88d 4000 	strb.w	r4, [sp]
   d4418:	781b      	ldrb	r3, [r3, #0]
   d441a:	4916      	ldr	r1, [pc, #88]	; (d4474 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d441c:	4816      	ldr	r0, [pc, #88]	; (d4478 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d441e:	aa02      	add	r2, sp, #8
   d4420:	f7ff ffcd 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4424:	f005 fec3 	bl	da1ae <_ZN9TimeClass3nowEv>
   d4428:	4b15      	ldr	r3, [pc, #84]	; (d4480 <_Z14UbidotsHandlerPKcS0_+0xa8>)
   d442a:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d442c:	4b15      	ldr	r3, [pc, #84]	; (d4484 <_Z14UbidotsHandlerPKcS0_+0xac>)
   d442e:	2201      	movs	r2, #1
   d4430:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4432:	4b15      	ldr	r3, [pc, #84]	; (d4488 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d4434:	701c      	strb	r4, [r3, #0]
}
   d4436:	b013      	add	sp, #76	; 0x4c
   d4438:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d443a:	4620      	mov	r0, r4
   d443c:	f007 f83b 	bl	db4b6 <atoi>
   d4440:	28c9      	cmp	r0, #201	; 0xc9
   d4442:	d0e1      	beq.n	d4408 <_Z14UbidotsHandlerPKcS0_+0x30>
  else if((atoi(data)) < 10000){
   d4444:	4620      	mov	r0, r4
   d4446:	f007 f836 	bl	db4b6 <atoi>
   d444a:	f242 730f 	movw	r3, #9999	; 0x270f
   d444e:	4298      	cmp	r0, r3
   d4450:	dcf1      	bgt.n	d4436 <_Z14UbidotsHandlerPKcS0_+0x5e>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4452:	4620      	mov	r0, r4
   d4454:	f007 f82f 	bl	db4b6 <atoi>
   d4458:	4a0c      	ldr	r2, [pc, #48]	; (d448c <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d445a:	4603      	mov	r3, r0
   d445c:	2140      	movs	r1, #64	; 0x40
   d445e:	a802      	add	r0, sp, #8
   d4460:	f004 fae8 	bl	d8a34 <snprintf>
   d4464:	2300      	movs	r3, #0
    publishQueue.publish("Response Event",responseString,PRIVATE);
   d4466:	f88d 3000 	strb.w	r3, [sp]
   d446a:	e7c0      	b.n	d43ee <_Z14UbidotsHandlerPKcS0_+0x16>
   d446c:	000dd46b 	.word	0x000dd46b
   d4470:	2003df2d 	.word	0x2003df2d
   d4474:	000dd473 	.word	0x000dd473
   d4478:	2003e3d0 	.word	0x2003e3d0
   d447c:	000dd482 	.word	0x000dd482
   d4480:	2003e5b8 	.word	0x2003e5b8
   d4484:	2003e5ec 	.word	0x2003e5ec
   d4488:	2003df4f 	.word	0x2003df4f
   d448c:	000dd494 	.word	0x000dd494

000d4490 <_Z16setThirdPartySim6String>:
{
   d4490:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4492:	491c      	ldr	r1, [pc, #112]	; (d4504 <_Z16setThirdPartySim6String+0x74>)
   d4494:	4605      	mov	r5, r0
   d4496:	f005 fc9b 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d449a:	4604      	mov	r4, r0
   d449c:	b300      	cbz	r0, d44e0 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d449e:	4c1a      	ldr	r4, [pc, #104]	; (d4508 <_Z16setThirdPartySim6String+0x78>)
   d44a0:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44a2:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d44a4:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44a6:	f7ff ff33 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44aa:	6863      	ldr	r3, [r4, #4]
   d44ac:	4817      	ldr	r0, [pc, #92]	; (d450c <_Z16setThirdPartySim6String+0x7c>)
   d44ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44b6:	4359      	muls	r1, r3
   d44b8:	f7ff ff3d 	bl	d4336 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44bc:	f004 f9f2 	bl	d88a4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d44c0:	b148      	cbz	r0, d44d6 <_Z16setThirdPartySim6String+0x46>
   d44c2:	2300      	movs	r3, #0
   d44c4:	f88d 3000 	strb.w	r3, [sp]
   d44c8:	4b11      	ldr	r3, [pc, #68]	; (d4510 <_Z16setThirdPartySim6String+0x80>)
   d44ca:	4a12      	ldr	r2, [pc, #72]	; (d4514 <_Z16setThirdPartySim6String+0x84>)
   d44cc:	781b      	ldrb	r3, [r3, #0]
   d44ce:	4912      	ldr	r1, [pc, #72]	; (d4518 <_Z16setThirdPartySim6String+0x88>)
   d44d0:	4812      	ldr	r0, [pc, #72]	; (d451c <_Z16setThirdPartySim6String+0x8c>)
   d44d2:	f7ff ff74 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d44d6:	4b12      	ldr	r3, [pc, #72]	; (d4520 <_Z16setThirdPartySim6String+0x90>)
   d44d8:	2001      	movs	r0, #1
   d44da:	7018      	strb	r0, [r3, #0]
}
   d44dc:	b003      	add	sp, #12
   d44de:	bd30      	pop	{r4, r5, pc}
   d44e0:	4910      	ldr	r1, [pc, #64]	; (d4524 <_Z16setThirdPartySim6String+0x94>)
   d44e2:	4628      	mov	r0, r5
   d44e4:	f005 fc74 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d44e8:	2800      	cmp	r0, #0
   d44ea:	d0f7      	beq.n	d44dc <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d44ec:	4b06      	ldr	r3, [pc, #24]	; (d4508 <_Z16setThirdPartySim6String+0x78>)
   d44ee:	705c      	strb	r4, [r3, #1]
   d44f0:	f004 f9d8 	bl	d88a4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d44f4:	2800      	cmp	r0, #0
   d44f6:	d0ee      	beq.n	d44d6 <_Z16setThirdPartySim6String+0x46>
   d44f8:	4b05      	ldr	r3, [pc, #20]	; (d4510 <_Z16setThirdPartySim6String+0x80>)
   d44fa:	f88d 4000 	strb.w	r4, [sp]
   d44fe:	781b      	ldrb	r3, [r3, #0]
   d4500:	4a09      	ldr	r2, [pc, #36]	; (d4528 <_Z16setThirdPartySim6String+0x98>)
   d4502:	e7e4      	b.n	d44ce <_Z16setThirdPartySim6String+0x3e>
   d4504:	000dd3f3 	.word	0x000dd3f3
   d4508:	2003e5b8 	.word	0x2003e5b8
   d450c:	2003e3b0 	.word	0x2003e3b0
   d4510:	2003df2d 	.word	0x2003df2d
   d4514:	000dd4b1 	.word	0x000dd4b1
   d4518:	000dd541 	.word	0x000dd541
   d451c:	2003e3d0 	.word	0x2003e3d0
   d4520:	2003e5ec 	.word	0x2003e5ec
   d4524:	000de0c6 	.word	0x000de0c6
   d4528:	000dd4c6 	.word	0x000dd4c6

000d452c <_Z12setKeepAlive6String>:
{
   d452c:	b510      	push	{r4, lr}
   d452e:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4530:	6800      	ldr	r0, [r0, #0]
   d4532:	220a      	movs	r2, #10
   d4534:	a903      	add	r1, sp, #12
   d4536:	f007 ff3f 	bl	dc3b8 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d453a:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d453e:	d822      	bhi.n	d4586 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d4540:	4c12      	ldr	r4, [pc, #72]	; (d458c <_Z12setKeepAlive6String+0x60>)
   d4542:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4544:	f7ff fee4 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4548:	6863      	ldr	r3, [r4, #4]
   d454a:	4811      	ldr	r0, [pc, #68]	; (d4590 <_Z12setKeepAlive6String+0x64>)
   d454c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4550:	4359      	muls	r1, r3
   d4552:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4556:	f7ff feee 	bl	d4336 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d455a:	6863      	ldr	r3, [r4, #4]
   d455c:	4a0d      	ldr	r2, [pc, #52]	; (d4594 <_Z12setKeepAlive6String+0x68>)
   d455e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4562:	a804      	add	r0, sp, #16
   d4564:	f004 fa66 	bl	d8a34 <snprintf>
   d4568:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d456a:	f88d 3000 	strb.w	r3, [sp]
   d456e:	4b0a      	ldr	r3, [pc, #40]	; (d4598 <_Z12setKeepAlive6String+0x6c>)
   d4570:	490a      	ldr	r1, [pc, #40]	; (d459c <_Z12setKeepAlive6String+0x70>)
   d4572:	781b      	ldrb	r3, [r3, #0]
   d4574:	480a      	ldr	r0, [pc, #40]	; (d45a0 <_Z12setKeepAlive6String+0x74>)
   d4576:	aa04      	add	r2, sp, #16
   d4578:	f7ff ff21 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d457c:	4b09      	ldr	r3, [pc, #36]	; (d45a4 <_Z12setKeepAlive6String+0x78>)
   d457e:	2001      	movs	r0, #1
   d4580:	7018      	strb	r0, [r3, #0]
}
   d4582:	b044      	add	sp, #272	; 0x110
   d4584:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4586:	2000      	movs	r0, #0
   d4588:	e7fb      	b.n	d4582 <_Z12setKeepAlive6String+0x56>
   d458a:	bf00      	nop
   d458c:	2003e5b8 	.word	0x2003e5b8
   d4590:	2003e3b0 	.word	0x2003e3b0
   d4594:	000dd4da 	.word	0x000dd4da
   d4598:	2003df2d 	.word	0x2003df2d
   d459c:	000dd4f3 	.word	0x000dd4f3
   d45a0:	2003e3d0 	.word	0x2003e3d0
   d45a4:	2003e5ec 	.word	0x2003e5ec

000d45a8 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d45a8:	b500      	push	{lr}
   d45aa:	b089      	sub	sp, #36	; 0x24
   d45ac:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d45ae:	f005 fc39 	bl	d9e24 <_ZNK6String7toFloatEv>
   d45b2:	4b0e      	ldr	r3, [pc, #56]	; (d45ec <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45b4:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d45b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45ba:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d45bc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45c0:	f005 fbd6 	bl	d9d70 <_ZN6StringC1ERKS_>
   d45c4:	2300      	movs	r3, #0
   d45c6:	f88d 3000 	strb.w	r3, [sp]
   d45ca:	4b09      	ldr	r3, [pc, #36]	; (d45f0 <_Z20setReportingDuration6String+0x48>)
   d45cc:	9a04      	ldr	r2, [sp, #16]
   d45ce:	781b      	ldrb	r3, [r3, #0]
   d45d0:	4908      	ldr	r1, [pc, #32]	; (d45f4 <_Z20setReportingDuration6String+0x4c>)
   d45d2:	4809      	ldr	r0, [pc, #36]	; (d45f8 <_Z20setReportingDuration6String+0x50>)
   d45d4:	f7ff fef3 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45d8:	a804      	add	r0, sp, #16
   d45da:	f005 fb5b 	bl	d9c94 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d45de:	4b07      	ldr	r3, [pc, #28]	; (d45fc <_Z20setReportingDuration6String+0x54>)
   d45e0:	2001      	movs	r0, #1
   d45e2:	7018      	strb	r0, [r3, #0]
}
   d45e4:	b009      	add	sp, #36	; 0x24
   d45e6:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ea:	bf00      	nop
   d45ec:	2003e5b8 	.word	0x2003e5b8
   d45f0:	2003df2d 	.word	0x2003df2d
   d45f4:	000dd4fe 	.word	0x000dd4fe
   d45f8:	2003e3d0 	.word	0x2003e3d0
   d45fc:	2003e5ec 	.word	0x2003e5ec

000d4600 <_Z14setVerboseMode6String>:
{
   d4600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4602:	4916      	ldr	r1, [pc, #88]	; (d465c <_Z14setVerboseMode6String+0x5c>)
   d4604:	4605      	mov	r5, r0
   d4606:	f005 fbe3 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d460a:	4604      	mov	r4, r0
   d460c:	b188      	cbz	r0, d4632 <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d460e:	4b14      	ldr	r3, [pc, #80]	; (d4660 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4610:	4a14      	ldr	r2, [pc, #80]	; (d4664 <_Z14setVerboseMode6String+0x64>)
   d4612:	4915      	ldr	r1, [pc, #84]	; (d4668 <_Z14setVerboseMode6String+0x68>)
   d4614:	4815      	ldr	r0, [pc, #84]	; (d466c <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d4616:	2401      	movs	r4, #1
   d4618:	725c      	strb	r4, [r3, #9]
   d461a:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d461c:	f88d 3000 	strb.w	r3, [sp]
   d4620:	4b13      	ldr	r3, [pc, #76]	; (d4670 <_Z14setVerboseMode6String+0x70>)
   d4622:	781b      	ldrb	r3, [r3, #0]
   d4624:	f7ff fecb 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4628:	4b12      	ldr	r3, [pc, #72]	; (d4674 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d462a:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d462c:	701c      	strb	r4, [r3, #0]
}
   d462e:	b003      	add	sp, #12
   d4630:	bd30      	pop	{r4, r5, pc}
   d4632:	4911      	ldr	r1, [pc, #68]	; (d4678 <_Z14setVerboseMode6String+0x78>)
   d4634:	4628      	mov	r0, r5
   d4636:	f005 fbcb 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d463a:	2800      	cmp	r0, #0
   d463c:	d0f7      	beq.n	d462e <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d463e:	4b08      	ldr	r3, [pc, #32]	; (d4660 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4640:	4a0e      	ldr	r2, [pc, #56]	; (d467c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d4642:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4644:	4b0a      	ldr	r3, [pc, #40]	; (d4670 <_Z14setVerboseMode6String+0x70>)
   d4646:	f88d 4000 	strb.w	r4, [sp]
   d464a:	781b      	ldrb	r3, [r3, #0]
   d464c:	4906      	ldr	r1, [pc, #24]	; (d4668 <_Z14setVerboseMode6String+0x68>)
   d464e:	4807      	ldr	r0, [pc, #28]	; (d466c <_Z14setVerboseMode6String+0x6c>)
   d4650:	f7ff feb5 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4654:	4b07      	ldr	r3, [pc, #28]	; (d4674 <_Z14setVerboseMode6String+0x74>)
   d4656:	2001      	movs	r0, #1
   d4658:	7018      	strb	r0, [r3, #0]
    return 1;
   d465a:	e7e8      	b.n	d462e <_Z14setVerboseMode6String+0x2e>
   d465c:	000dd3f3 	.word	0x000dd3f3
   d4660:	2003e5b8 	.word	0x2003e5b8
   d4664:	000dd520 	.word	0x000dd520
   d4668:	000dd541 	.word	0x000dd541
   d466c:	2003e3d0 	.word	0x2003e3d0
   d4670:	2003df2d 	.word	0x2003df2d
   d4674:	2003e5ec 	.word	0x2003e5ec
   d4678:	000de0c6 	.word	0x000de0c6
   d467c:	000dd531 	.word	0x000dd531

000d4680 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d4680:	b530      	push	{r4, r5, lr}
   d4682:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4684:	6800      	ldr	r0, [r0, #0]
   d4686:	220a      	movs	r2, #10
   d4688:	a903      	add	r1, sp, #12
   d468a:	f007 fe95 	bl	dc3b8 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d468e:	1e43      	subs	r3, r0, #1
   d4690:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4692:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4694:	f04f 0500 	mov.w	r5, #0
   d4698:	d842      	bhi.n	d4720 <_Z13disableSensor6String+0xa0>
 
  if (tempSensor == 1){
   d469a:	2801      	cmp	r0, #1
   d469c:	d113      	bne.n	d46c6 <_Z13disableSensor6String+0x46>
    sysStatus.sensorOneConnected = false;
   d469e:	4b21      	ldr	r3, [pc, #132]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d46a0:	4921      	ldr	r1, [pc, #132]	; (d4728 <_Z13disableSensor6String+0xa8>)
    sysStatus.sensorOneConnected = false;
   d46a2:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d46a4:	a804      	add	r0, sp, #16
   d46a6:	f006 ff89 	bl	db5bc <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d46aa:	4b20      	ldr	r3, [pc, #128]	; (d472c <_Z13disableSensor6String+0xac>)
   d46ac:	f88d 5000 	strb.w	r5, [sp]
   d46b0:	781b      	ldrb	r3, [r3, #0]
   d46b2:	491f      	ldr	r1, [pc, #124]	; (d4730 <_Z13disableSensor6String+0xb0>)
   d46b4:	481f      	ldr	r0, [pc, #124]	; (d4734 <_Z13disableSensor6String+0xb4>)
   d46b6:	aa04      	add	r2, sp, #16
   d46b8:	f7ff fe81 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
   d46bc:	4b1e      	ldr	r3, [pc, #120]	; (d4738 <_Z13disableSensor6String+0xb8>)
   d46be:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d46c0:	4620      	mov	r0, r4
   d46c2:	b045      	add	sp, #276	; 0x114
   d46c4:	bd30      	pop	{r4, r5, pc}
  } else if (tempSensor == 2){
   d46c6:	2802      	cmp	r0, #2
   d46c8:	d110      	bne.n	d46ec <_Z13disableSensor6String+0x6c>
    sysStatus.sensorTwoConnected = false;
   d46ca:	4b16      	ldr	r3, [pc, #88]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d46cc:	491b      	ldr	r1, [pc, #108]	; (d473c <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorTwoConnected = false;
   d46ce:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46d0:	a804      	add	r0, sp, #16
   d46d2:	f006 ff73 	bl	db5bc <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d46d6:	4b15      	ldr	r3, [pc, #84]	; (d472c <_Z13disableSensor6String+0xac>)
   d46d8:	f88d 5000 	strb.w	r5, [sp]
   d46dc:	781b      	ldrb	r3, [r3, #0]
   d46de:	4914      	ldr	r1, [pc, #80]	; (d4730 <_Z13disableSensor6String+0xb0>)
   d46e0:	4814      	ldr	r0, [pc, #80]	; (d4734 <_Z13disableSensor6String+0xb4>)
   d46e2:	aa04      	add	r2, sp, #16
   d46e4:	f7ff fe6b 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d46e8:	2401      	movs	r4, #1
   d46ea:	e7e7      	b.n	d46bc <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 3){
   d46ec:	2803      	cmp	r0, #3
   d46ee:	d103      	bne.n	d46f8 <_Z13disableSensor6String+0x78>
    sysStatus.sensorThreeConnected = false;
   d46f0:	4b0c      	ldr	r3, [pc, #48]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d46f2:	4913      	ldr	r1, [pc, #76]	; (d4740 <_Z13disableSensor6String+0xc0>)
    sysStatus.sensorThreeConnected = false;
   d46f4:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d46f6:	e7eb      	b.n	d46d0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 4){
   d46f8:	2804      	cmp	r0, #4
   d46fa:	d103      	bne.n	d4704 <_Z13disableSensor6String+0x84>
    sysStatus.sensorFourConnected = false;
   d46fc:	4b09      	ldr	r3, [pc, #36]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d46fe:	4911      	ldr	r1, [pc, #68]	; (d4744 <_Z13disableSensor6String+0xc4>)
    sysStatus.sensorFourConnected = false;
   d4700:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d4702:	e7e5      	b.n	d46d0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 5){
   d4704:	2805      	cmp	r0, #5
   d4706:	d104      	bne.n	d4712 <_Z13disableSensor6String+0x92>
    sysStatus.sensorFiveConnected = false;
   d4708:	4b06      	ldr	r3, [pc, #24]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d470a:	490f      	ldr	r1, [pc, #60]	; (d4748 <_Z13disableSensor6String+0xc8>)
    sysStatus.sensorFiveConnected = false;
   d470c:	f883 5020 	strb.w	r5, [r3, #32]
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d4710:	e7de      	b.n	d46d0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 6){
   d4712:	2806      	cmp	r0, #6
   d4714:	d104      	bne.n	d4720 <_Z13disableSensor6String+0xa0>
    sysStatus.sensorSixConnected = false;
   d4716:	4b03      	ldr	r3, [pc, #12]	; (d4724 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4718:	490c      	ldr	r1, [pc, #48]	; (d474c <_Z13disableSensor6String+0xcc>)
    sysStatus.sensorSixConnected = false;
   d471a:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d471e:	e7d7      	b.n	d46d0 <_Z13disableSensor6String+0x50>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4720:	462c      	mov	r4, r5
   d4722:	e7cd      	b.n	d46c0 <_Z13disableSensor6String+0x40>
   d4724:	2003e5b8 	.word	0x2003e5b8
   d4728:	000dd546 	.word	0x000dd546
   d472c:	2003df2d 	.word	0x2003df2d
   d4730:	000dd55a 	.word	0x000dd55a
   d4734:	2003e3d0 	.word	0x2003e3d0
   d4738:	2003e5ec 	.word	0x2003e5ec
   d473c:	000dd568 	.word	0x000dd568
   d4740:	000dd57c 	.word	0x000dd57c
   d4744:	000dd592 	.word	0x000dd592
   d4748:	000dd5a7 	.word	0x000dd5a7
   d474c:	000dd5bc 	.word	0x000dd5bc

000d4750 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d4750:	b500      	push	{lr}
   d4752:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4754:	6800      	ldr	r0, [r0, #0]
   d4756:	220a      	movs	r2, #10
   d4758:	a903      	add	r1, sp, #12
   d475a:	f007 fe2d 	bl	dc3b8 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d475e:	2804      	cmp	r0, #4
   d4760:	d818      	bhi.n	d4794 <_Z16setOperatingMode6String+0x44>
  else{
    sysStatus.operatingMode = tempSensor;
   d4762:	4b0d      	ldr	r3, [pc, #52]	; (d4798 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4764:	4a0d      	ldr	r2, [pc, #52]	; (d479c <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d4766:	62d8      	str	r0, [r3, #44]	; 0x2c
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4768:	f44f 7180 	mov.w	r1, #256	; 0x100
   d476c:	4603      	mov	r3, r0
   d476e:	a804      	add	r0, sp, #16
   d4770:	f004 f960 	bl	d8a34 <snprintf>
   d4774:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d4776:	f88d 3000 	strb.w	r3, [sp]
   d477a:	4b09      	ldr	r3, [pc, #36]	; (d47a0 <_Z16setOperatingMode6String+0x50>)
   d477c:	4909      	ldr	r1, [pc, #36]	; (d47a4 <_Z16setOperatingMode6String+0x54>)
   d477e:	781b      	ldrb	r3, [r3, #0]
   d4780:	4809      	ldr	r0, [pc, #36]	; (d47a8 <_Z16setOperatingMode6String+0x58>)
   d4782:	aa04      	add	r2, sp, #16
   d4784:	f7ff fe1b 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4788:	4b08      	ldr	r3, [pc, #32]	; (d47ac <_Z16setOperatingMode6String+0x5c>)
   d478a:	2001      	movs	r0, #1
   d478c:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d478e:	b045      	add	sp, #276	; 0x114
   d4790:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4794:	2000      	movs	r0, #0
   d4796:	e7fa      	b.n	d478e <_Z16setOperatingMode6String+0x3e>
   d4798:	2003e5b8 	.word	0x2003e5b8
   d479c:	000dd5d0 	.word	0x000dd5d0
   d47a0:	2003df2d 	.word	0x2003df2d
   d47a4:	000dd541 	.word	0x000dd541
   d47a8:	2003e3d0 	.word	0x2003e3d0
   d47ac:	2003e5ec 	.word	0x2003e5ec

000d47b0 <_Z11resetSystem6String>:

}

int resetSystem(String Command)

{
   d47b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d47b2:	220a      	movs	r2, #10
   d47b4:	6800      	ldr	r0, [r0, #0]
   d47b6:	a903      	add	r1, sp, #12
   d47b8:	f007 fdfe 	bl	dc3b8 <strtol>
    if (command == 1) {
   d47bc:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d47be:	4604      	mov	r4, r0
    if (command == 1) {
   d47c0:	f04f 0300 	mov.w	r3, #0
   d47c4:	d111      	bne.n	d47ea <_Z11resetSystem6String+0x3a>
      publishQueue.publish("Reset","Device Reset Success",PRIVATE);
   d47c6:	f88d 3000 	strb.w	r3, [sp]
   d47ca:	4b09      	ldr	r3, [pc, #36]	; (d47f0 <_Z11resetSystem6String+0x40>)
   d47cc:	4a09      	ldr	r2, [pc, #36]	; (d47f4 <_Z11resetSystem6String+0x44>)
   d47ce:	781b      	ldrb	r3, [r3, #0]
   d47d0:	4909      	ldr	r1, [pc, #36]	; (d47f8 <_Z11resetSystem6String+0x48>)
   d47d2:	480a      	ldr	r0, [pc, #40]	; (d47fc <_Z11resetSystem6String+0x4c>)
   d47d4:	f7ff fdf3 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(5000);
   d47d8:	f241 3088 	movw	r0, #5000	; 0x1388
   d47dc:	f004 f97a 	bl	d8ad4 <delay>
      System.reset();
   d47e0:	f005 fb6a 	bl	d9eb8 <_ZN11SystemClass5resetEv>
      return 1;
      }
    else return 0;  
  }
   d47e4:	4620      	mov	r0, r4
   d47e6:	b004      	add	sp, #16
   d47e8:	bd10      	pop	{r4, pc}
    else return 0;  
   d47ea:	461c      	mov	r4, r3
   d47ec:	e7fa      	b.n	d47e4 <_Z11resetSystem6String+0x34>
   d47ee:	bf00      	nop
   d47f0:	2003df2d 	.word	0x2003df2d
   d47f4:	000dd5e2 	.word	0x000dd5e2
   d47f8:	000dd726 	.word	0x000dd726
   d47fc:	2003e3d0 	.word	0x2003e3d0

000d4800 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4800:	b507      	push	{r0, r1, r2, lr}
   d4802:	f004 f84f 	bl	d88a4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4806:	b148      	cbz	r0, d481c <_Z18loadSystemDefaultsv+0x1c>
   d4808:	2300      	movs	r3, #0
   d480a:	f88d 3000 	strb.w	r3, [sp]
   d480e:	4b0e      	ldr	r3, [pc, #56]	; (d4848 <_Z18loadSystemDefaultsv+0x48>)
   d4810:	4a0e      	ldr	r2, [pc, #56]	; (d484c <_Z18loadSystemDefaultsv+0x4c>)
   d4812:	781b      	ldrb	r3, [r3, #0]
   d4814:	490e      	ldr	r1, [pc, #56]	; (d4850 <_Z18loadSystemDefaultsv+0x50>)
   d4816:	480f      	ldr	r0, [pc, #60]	; (d4854 <_Z18loadSystemDefaultsv+0x54>)
   d4818:	f7ff fdd1 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d481c:	4a0e      	ldr	r2, [pc, #56]	; (d4858 <_Z18loadSystemDefaultsv+0x58>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d481e:	480f      	ldr	r0, [pc, #60]	; (d485c <_Z18loadSystemDefaultsv+0x5c>)
   d4820:	2378      	movs	r3, #120	; 0x78
   d4822:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d4824:	f240 1301 	movw	r3, #257	; 0x101
   d4828:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d482a:	2300      	movs	r3, #0
   d482c:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d482e:	7293      	strb	r3, [r2, #10]
  sysStatus.reportingBoundary = 10*60;
   d4830:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4834:	6253      	str	r3, [r2, #36]	; 0x24
  sysStatus.operatingMode = 1;
   d4836:	2101      	movs	r1, #1
   d4838:	2334      	movs	r3, #52	; 0x34
   d483a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   d483c:	b003      	add	sp, #12
   d483e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4842:	f002 be2e 	b.w	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
   d4846:	bf00      	nop
   d4848:	2003df2d 	.word	0x2003df2d
   d484c:	000dd5f7 	.word	0x000dd5f7
   d4850:	000dd541 	.word	0x000dd541
   d4854:	2003e3d0 	.word	0x2003e3d0
   d4858:	2003e5b8 	.word	0x2003e5b8
   d485c:	2003e3a0 	.word	0x2003e3a0

000d4860 <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d4860:	b507      	push	{r0, r1, r2, lr}
   d4862:	f004 f81f 	bl	d88a4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d4866:	b148      	cbz	r0, d487c <_Z20loadConstantDefaultsv+0x1c>
   d4868:	2300      	movs	r3, #0
   d486a:	f88d 3000 	strb.w	r3, [sp]
   d486e:	4b0b      	ldr	r3, [pc, #44]	; (d489c <_Z20loadConstantDefaultsv+0x3c>)
   d4870:	4a0b      	ldr	r2, [pc, #44]	; (d48a0 <_Z20loadConstantDefaultsv+0x40>)
   d4872:	781b      	ldrb	r3, [r3, #0]
   d4874:	490b      	ldr	r1, [pc, #44]	; (d48a4 <_Z20loadConstantDefaultsv+0x44>)
   d4876:	480c      	ldr	r0, [pc, #48]	; (d48a8 <_Z20loadConstantDefaultsv+0x48>)
   d4878:	f7ff fda1 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d487c:	4a0b      	ldr	r2, [pc, #44]	; (d48ac <_Z20loadConstantDefaultsv+0x4c>)
   d487e:	4b0c      	ldr	r3, [pc, #48]	; (d48b0 <_Z20loadConstantDefaultsv+0x50>)
   d4880:	480c      	ldr	r0, [pc, #48]	; (d48b4 <_Z20loadConstantDefaultsv+0x54>)
   d4882:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d4884:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d4886:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d4888:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 90.9;
   d488a:	6113      	str	r3, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d488c:	6153      	str	r3, [r2, #20]
   d488e:	21a0      	movs	r1, #160	; 0xa0
   d4890:	2318      	movs	r3, #24
}
   d4892:	b003      	add	sp, #12
   d4894:	f85d eb04 	ldr.w	lr, [sp], #4
   d4898:	f002 be03 	b.w	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
   d489c:	2003df2d 	.word	0x2003df2d
   d48a0:	000dd60f 	.word	0x000dd60f
   d48a4:	000dd541 	.word	0x000dd541
   d48a8:	2003e3d0 	.word	0x2003e3d0
   d48ac:	2003e428 	.word	0x2003e428
   d48b0:	42b5cccd 	.word	0x42b5cccd
   d48b4:	2003e3a0 	.word	0x2003e3a0

000d48b8 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d48b8:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d48ba:	4c15      	ldr	r4, [pc, #84]	; (d4910 <_Z17checkSystemValuesv+0x58>)
   d48bc:	7a23      	ldrb	r3, [r4, #8]
   d48be:	2b01      	cmp	r3, #1
   d48c0:	d904      	bls.n	d48cc <_Z17checkSystemValuesv+0x14>
   d48c2:	f003 ffef 	bl	d88a4 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d48c6:	b300      	cbz	r0, d490a <_Z17checkSystemValuesv+0x52>
   d48c8:	2301      	movs	r3, #1
   d48ca:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d48cc:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d48ce:	4a11      	ldr	r2, [pc, #68]	; (d4914 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d48d0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d48d4:	bf84      	itt	hi
   d48d6:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d48da:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d48dc:	7a63      	ldrb	r3, [r4, #9]
   d48de:	2b01      	cmp	r3, #1
   d48e0:	bf84      	itt	hi
   d48e2:	2301      	movhi	r3, #1
   d48e4:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d48e6:	7aa3      	ldrb	r3, [r4, #10]
   d48e8:	2b01      	cmp	r3, #1
   d48ea:	bf84      	itt	hi
   d48ec:	2300      	movhi	r3, #0
   d48ee:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d48f0:	6963      	ldr	r3, [r4, #20]
   d48f2:	2bff      	cmp	r3, #255	; 0xff
   d48f4:	bf84      	itt	hi
   d48f6:	2300      	movhi	r3, #0
   d48f8:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d48fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d48fc:	2b05      	cmp	r3, #5
   d48fe:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d4902:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4904:	bf88      	it	hi
   d4906:	62e3      	strhi	r3, [r4, #44]	; 0x2c
}
   d4908:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d490a:	7220      	strb	r0, [r4, #8]
   d490c:	e7de      	b.n	d48cc <_Z17checkSystemValuesv+0x14>
   d490e:	bf00      	nop
   d4910:	2003e5b8 	.word	0x2003e5b8
   d4914:	2003e5ec 	.word	0x2003e5ec

000d4918 <_Z19checkConstantValuesv>:
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d4918:	4b33      	ldr	r3, [pc, #204]	; (d49e8 <_Z19checkConstantValuesv+0xd0>)
   d491a:	edd3 7a00 	vldr	s15, [r3]
   d491e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4926:	d406      	bmi.n	d4936 <_Z19checkConstantValuesv+0x1e>
   d4928:	ed9f 7a30 	vldr	s14, [pc, #192]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d492c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4934:	dd01      	ble.n	d493a <_Z19checkConstantValuesv+0x22>
   d4936:	4a2e      	ldr	r2, [pc, #184]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d4938:	601a      	str	r2, [r3, #0]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d493a:	edd3 7a01 	vldr	s15, [r3, #4]
   d493e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4946:	d406      	bmi.n	d4956 <_Z19checkConstantValuesv+0x3e>
   d4948:	ed9f 7a28 	vldr	s14, [pc, #160]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d494c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4954:	dd01      	ble.n	d495a <_Z19checkConstantValuesv+0x42>
   d4956:	4a26      	ldr	r2, [pc, #152]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d4958:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d495a:	edd3 7a02 	vldr	s15, [r3, #8]
   d495e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4966:	d406      	bmi.n	d4976 <_Z19checkConstantValuesv+0x5e>
   d4968:	ed9f 7a20 	vldr	s14, [pc, #128]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d496c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4974:	dd01      	ble.n	d497a <_Z19checkConstantValuesv+0x62>
   d4976:	4a1e      	ldr	r2, [pc, #120]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d4978:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d497a:	edd3 7a03 	vldr	s15, [r3, #12]
   d497e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4986:	d406      	bmi.n	d4996 <_Z19checkConstantValuesv+0x7e>
   d4988:	ed9f 7a18 	vldr	s14, [pc, #96]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d498c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4994:	dd01      	ble.n	d499a <_Z19checkConstantValuesv+0x82>
   d4996:	4a16      	ldr	r2, [pc, #88]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d4998:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorFiveConstant < 0.0  || sensorConstants.sensorFiveConstant > 3000.0) sensorConstants.sensorFiveConstant = 90.91;
   d499a:	edd3 7a04 	vldr	s15, [r3, #16]
   d499e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d49a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49a6:	d406      	bmi.n	d49b6 <_Z19checkConstantValuesv+0x9e>
   d49a8:	ed9f 7a10 	vldr	s14, [pc, #64]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d49ac:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49b4:	dd01      	ble.n	d49ba <_Z19checkConstantValuesv+0xa2>
   d49b6:	4a0e      	ldr	r2, [pc, #56]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d49b8:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
   d49ba:	edd3 7a05 	vldr	s15, [r3, #20]
   d49be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d49c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49c6:	d406      	bmi.n	d49d6 <_Z19checkConstantValuesv+0xbe>
   d49c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; d49ec <_Z19checkConstantValuesv+0xd4>
   d49cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49d4:	dd01      	ble.n	d49da <_Z19checkConstantValuesv+0xc2>
   d49d6:	4a06      	ldr	r2, [pc, #24]	; (d49f0 <_Z19checkConstantValuesv+0xd8>)
   d49d8:	615a      	str	r2, [r3, #20]
   d49da:	4a03      	ldr	r2, [pc, #12]	; (d49e8 <_Z19checkConstantValuesv+0xd0>)
   d49dc:	4805      	ldr	r0, [pc, #20]	; (d49f4 <_Z19checkConstantValuesv+0xdc>)
   d49de:	2318      	movs	r3, #24
   d49e0:	21a0      	movs	r1, #160	; 0xa0
   d49e2:	f002 bd5e 	b.w	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
   d49e6:	bf00      	nop
   d49e8:	2003e428 	.word	0x2003e428
   d49ec:	453b8000 	.word	0x453b8000
   d49f0:	42b5d1ec 	.word	0x42b5d1ec
   d49f4:	2003e3a0 	.word	0x2003e3a0

000d49f8 <_Z11petWatchdogv>:
{
   d49f8:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d49fa:	2101      	movs	r1, #1
   d49fc:	2005      	movs	r0, #5
   d49fe:	f005 fe94 	bl	da72a <digitalWrite>
  digitalWrite(donePin, LOW);
   d4a02:	2100      	movs	r1, #0
   d4a04:	2005      	movs	r0, #5
   d4a06:	f005 fe90 	bl	da72a <digitalWrite>
  watchdogFlag = false;
   d4a0a:	4a09      	ldr	r2, [pc, #36]	; (d4a30 <_Z11petWatchdogv+0x38>)
   d4a0c:	2300      	movs	r3, #0
   d4a0e:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d4a10:	4a08      	ldr	r2, [pc, #32]	; (d4a34 <_Z11petWatchdogv+0x3c>)
   d4a12:	7a52      	ldrb	r2, [r2, #9]
   d4a14:	b142      	cbz	r2, d4a28 <_Z11petWatchdogv+0x30>
   d4a16:	f88d 3000 	strb.w	r3, [sp]
   d4a1a:	4b07      	ldr	r3, [pc, #28]	; (d4a38 <_Z11petWatchdogv+0x40>)
   d4a1c:	4a07      	ldr	r2, [pc, #28]	; (d4a3c <_Z11petWatchdogv+0x44>)
   d4a1e:	781b      	ldrb	r3, [r3, #0]
   d4a20:	4907      	ldr	r1, [pc, #28]	; (d4a40 <_Z11petWatchdogv+0x48>)
   d4a22:	4808      	ldr	r0, [pc, #32]	; (d4a44 <_Z11petWatchdogv+0x4c>)
   d4a24:	f7ff fccb 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4a28:	b003      	add	sp, #12
   d4a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a2e:	bf00      	nop
   d4a30:	2003e5ed 	.word	0x2003e5ed
   d4a34:	2003e5b8 	.word	0x2003e5b8
   d4a38:	2003df2d 	.word	0x2003df2d
   d4a3c:	000dd62e 	.word	0x000dd62e
   d4a40:	000dd635 	.word	0x000dd635
   d4a44:	2003e3d0 	.word	0x2003e3d0

000d4a48 <_Z9sendEventv>:
{
   d4a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a4c:	ed2d 8b08 	vpush	{d8-d11}
   d4a50:	b0cc      	sub	sp, #304	; 0x130
  memset(ubidots_hook, 0, sizeof(ubidots_hook));
   d4a52:	ad0c      	add	r5, sp, #48	; 0x30
   d4a54:	f44f 7480 	mov.w	r4, #256	; 0x100
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4a58:	a803      	add	r0, sp, #12
   d4a5a:	f003 ff2b 	bl	d88b4 <spark_deviceID>
      if (sysStatus.operatingMode == 1){
   d4a5e:	4e3c      	ldr	r6, [pc, #240]	; (d4b50 <_Z9sendEventv+0x108>)
  memset(ubidots_hook, 0, sizeof(ubidots_hook));
   d4a60:	4622      	mov	r2, r4
   d4a62:	2100      	movs	r1, #0
   d4a64:	4628      	mov	r0, r5
   d4a66:	f006 fd73 	bl	db550 <memset>
        state_(BEGIN) {
   d4a6a:	2300      	movs	r3, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d4a6c:	4a39      	ldr	r2, [pc, #228]	; (d4b54 <_Z9sendEventv+0x10c>)
        state_(BEGIN) {
   d4a6e:	f88d 3020 	strb.w	r3, [sp, #32]
  ubidotsPayLoad.beginObject();
   d4a72:	a807      	add	r0, sp, #28
        n_(0) {
   d4a74:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
   d4a78:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a7a:	9207      	str	r2, [sp, #28]
   d4a7c:	f004 feb7 	bl	d97ee <_ZN5spark10JSONWriter11beginObjectEv>
      if (sysStatus.operatingMode == 1){
   d4a80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   d4a82:	4c35      	ldr	r4, [pc, #212]	; (d4b58 <_Z9sendEventv+0x110>)
   d4a84:	2b01      	cmp	r3, #1
   d4a86:	4635      	mov	r5, r6
   d4a88:	d176      	bne.n	d4b78 <_Z9sendEventv+0x130>
        if (sysStatus.sensorOneConnected) {
   d4a8a:	7f33      	ldrb	r3, [r6, #28]
   d4a8c:	b163      	cbz	r3, d4aa8 <_Z9sendEventv+0x60>
          ubidotsPayLoad.name("sensorOne").value(sensorData.sensorOneCurrent);
   d4a8e:	4933      	ldr	r1, [pc, #204]	; (d4b5c <_Z9sendEventv+0x114>)
   d4a90:	a807      	add	r0, sp, #28
   d4a92:	f7ff fc61 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4a96:	4606      	mov	r6, r0
   d4a98:	6820      	ldr	r0, [r4, #0]
   d4a9a:	f006 f94d 	bl	dad38 <__aeabi_f2d>
   d4a9e:	ec41 0b10 	vmov	d0, r0, r1
   d4aa2:	4630      	mov	r0, r6
   d4aa4:	f004 feda 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorTwoConnected) {
   d4aa8:	7f6b      	ldrb	r3, [r5, #29]
   d4aaa:	b163      	cbz	r3, d4ac6 <_Z9sendEventv+0x7e>
          ubidotsPayLoad.name("sensorTwo").value(sensorData.sensorTwoCurrent);
   d4aac:	492c      	ldr	r1, [pc, #176]	; (d4b60 <_Z9sendEventv+0x118>)
   d4aae:	a807      	add	r0, sp, #28
   d4ab0:	f7ff fc52 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ab4:	4606      	mov	r6, r0
   d4ab6:	6860      	ldr	r0, [r4, #4]
   d4ab8:	f006 f93e 	bl	dad38 <__aeabi_f2d>
   d4abc:	ec41 0b10 	vmov	d0, r0, r1
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	f004 fecb 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorThreeConnected) {
   d4ac6:	7fab      	ldrb	r3, [r5, #30]
   d4ac8:	b163      	cbz	r3, d4ae4 <_Z9sendEventv+0x9c>
          ubidotsPayLoad.name("sensorThree").value(sensorData.sensorThreeCurrent);
   d4aca:	4926      	ldr	r1, [pc, #152]	; (d4b64 <_Z9sendEventv+0x11c>)
   d4acc:	a807      	add	r0, sp, #28
   d4ace:	f7ff fc43 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ad2:	4606      	mov	r6, r0
   d4ad4:	68a0      	ldr	r0, [r4, #8]
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4ad6:	f006 f92f 	bl	dad38 <__aeabi_f2d>
   d4ada:	ec41 0b10 	vmov	d0, r0, r1
   d4ade:	4630      	mov	r0, r6
   d4ae0:	f004 febc 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFourConnected) {
   d4ae4:	7feb      	ldrb	r3, [r5, #31]
   d4ae6:	b163      	cbz	r3, d4b02 <_Z9sendEventv+0xba>
          ubidotsPayLoad.name("sensorFour").value(sensorData.sensorFourCurrent);
   d4ae8:	491f      	ldr	r1, [pc, #124]	; (d4b68 <_Z9sendEventv+0x120>)
   d4aea:	a807      	add	r0, sp, #28
   d4aec:	f7ff fc34 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4af0:	4606      	mov	r6, r0
   d4af2:	68e0      	ldr	r0, [r4, #12]
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d4af4:	f006 f920 	bl	dad38 <__aeabi_f2d>
   d4af8:	ec41 0b10 	vmov	d0, r0, r1
   d4afc:	4630      	mov	r0, r6
   d4afe:	f004 fead 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFiveConnected) {
   d4b02:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4b06:	b163      	cbz	r3, d4b22 <_Z9sendEventv+0xda>
          ubidotsPayLoad.name("sensorFive").value(sensorData.sensorFiveCurrent);
   d4b08:	4918      	ldr	r1, [pc, #96]	; (d4b6c <_Z9sendEventv+0x124>)
   d4b0a:	a807      	add	r0, sp, #28
   d4b0c:	f7ff fc24 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b10:	4606      	mov	r6, r0
   d4b12:	6920      	ldr	r0, [r4, #16]
   d4b14:	f006 f910 	bl	dad38 <__aeabi_f2d>
   d4b18:	ec41 0b10 	vmov	d0, r0, r1
   d4b1c:	4630      	mov	r0, r6
   d4b1e:	f004 fe9d 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorSixConnected) {
   d4b22:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4b26:	b163      	cbz	r3, d4b42 <_Z9sendEventv+0xfa>
          ubidotsPayLoad.name("sensorSix").value(sensorData.sensorSixCurrent);
   d4b28:	4911      	ldr	r1, [pc, #68]	; (d4b70 <_Z9sendEventv+0x128>)
   d4b2a:	a807      	add	r0, sp, #28
   d4b2c:	f7ff fc14 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b30:	4606      	mov	r6, r0
   d4b32:	6960      	ldr	r0, [r4, #20]
   d4b34:	f006 f900 	bl	dad38 <__aeabi_f2d>
   d4b38:	ec41 0b10 	vmov	d0, r0, r1
   d4b3c:	4630      	mov	r0, r6
   d4b3e:	f004 fe8d 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4b42:	490c      	ldr	r1, [pc, #48]	; (d4b74 <_Z9sendEventv+0x12c>)
   d4b44:	a807      	add	r0, sp, #28
   d4b46:	f7ff fc07 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b4a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d4b4c:	e06a      	b.n	d4c24 <_Z9sendEventv+0x1dc>
   d4b4e:	bf00      	nop
   d4b50:	2003e5b8 	.word	0x2003e5b8
   d4b54:	000de100 	.word	0x000de100
   d4b58:	2003e440 	.word	0x2003e440
   d4b5c:	000dd63e 	.word	0x000dd63e
   d4b60:	000dd648 	.word	0x000dd648
   d4b64:	000dd652 	.word	0x000dd652
   d4b68:	000dd65e 	.word	0x000dd65e
   d4b6c:	000dd669 	.word	0x000dd669
   d4b70:	000dd674 	.word	0x000dd674
   d4b74:	000dd541 	.word	0x000dd541
      else if (sysStatus.operatingMode == 2){
   d4b78:	2b02      	cmp	r3, #2
   d4b7a:	f040 8133 	bne.w	d4de4 <_Z9sendEventv+0x39c>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d4b7e:	49ca      	ldr	r1, [pc, #808]	; (d4ea8 <_Z9sendEventv+0x460>)
   d4b80:	a807      	add	r0, sp, #28
   d4b82:	f7ff fbe9 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4b86:	4605      	mov	r5, r0
   d4b88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4b8a:	f006 f8d5 	bl	dad38 <__aeabi_f2d>
   d4b8e:	ec41 0b10 	vmov	d0, r0, r1
   d4b92:	4628      	mov	r0, r5
   d4b94:	f004 fe62 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d4b98:	49c4      	ldr	r1, [pc, #784]	; (d4eac <_Z9sendEventv+0x464>)
   d4b9a:	a807      	add	r0, sp, #28
   d4b9c:	f7ff fbdc 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4ba0:	4605      	mov	r5, r0
   d4ba2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4ba4:	f006 f8c8 	bl	dad38 <__aeabi_f2d>
   d4ba8:	ec41 0b10 	vmov	d0, r0, r1
   d4bac:	4628      	mov	r0, r5
   d4bae:	f004 fe55 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4bb2:	49bf      	ldr	r1, [pc, #764]	; (d4eb0 <_Z9sendEventv+0x468>)
   d4bb4:	a807      	add	r0, sp, #28
   d4bb6:	f7ff fbcf 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4bba:	4605      	mov	r5, r0
   d4bbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4bbe:	f006 f8bb 	bl	dad38 <__aeabi_f2d>
   d4bc2:	ec41 0b10 	vmov	d0, r0, r1
   d4bc6:	4628      	mov	r0, r5
   d4bc8:	f004 fe48 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoR").value(sensorData.I_ThreePhaseLoad_Two[0]);
   d4bcc:	49b9      	ldr	r1, [pc, #740]	; (d4eb4 <_Z9sendEventv+0x46c>)
   d4bce:	a807      	add	r0, sp, #28
   d4bd0:	f7ff fbc2 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4bd4:	4605      	mov	r5, r0
   d4bd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d4bd8:	f006 f8ae 	bl	dad38 <__aeabi_f2d>
   d4bdc:	ec41 0b10 	vmov	d0, r0, r1
   d4be0:	4628      	mov	r0, r5
   d4be2:	f004 fe3b 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoS").value(sensorData.I_ThreePhaseLoad_Two[1]);
   d4be6:	49b4      	ldr	r1, [pc, #720]	; (d4eb8 <_Z9sendEventv+0x470>)
   d4be8:	a807      	add	r0, sp, #28
   d4bea:	f7ff fbb5 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4bee:	4605      	mov	r5, r0
   d4bf0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d4bf2:	f006 f8a1 	bl	dad38 <__aeabi_f2d>
   d4bf6:	ec41 0b10 	vmov	d0, r0, r1
   d4bfa:	4628      	mov	r0, r5
   d4bfc:	f004 fe2e 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoT").value(sensorData.I_ThreePhaseLoad_Two[2]);
   d4c00:	49ae      	ldr	r1, [pc, #696]	; (d4ebc <_Z9sendEventv+0x474>)
   d4c02:	a807      	add	r0, sp, #28
   d4c04:	f7ff fba8 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c08:	4605      	mov	r5, r0
   d4c0a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   d4c0c:	f006 f894 	bl	dad38 <__aeabi_f2d>
   d4c10:	ec41 0b10 	vmov	d0, r0, r1
   d4c14:	4628      	mov	r0, r5
   d4c16:	f004 fe21 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4c1a:	49a9      	ldr	r1, [pc, #676]	; (d4ec0 <_Z9sendEventv+0x478>)
   d4c1c:	a807      	add	r0, sp, #28
   d4c1e:	f7ff fb9b 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4c22:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d4c24:	f004 fe08 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
  ubidotsPayLoad.endObject();
   d4c28:	a807      	add	r0, sp, #28
   d4c2a:	f004 fdca 	bl	d97c2 <_ZN5spark10JSONWriter9endObjectEv>
  publishQueue.publish("powermonitoring_hook", ubidots_hook, PRIVATE);
   d4c2e:	2300      	movs	r3, #0
   d4c30:	f88d 3000 	strb.w	r3, [sp]
   d4c34:	4ba3      	ldr	r3, [pc, #652]	; (d4ec4 <_Z9sendEventv+0x47c>)
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.6;
   d4c36:	f8df a2a8 	ldr.w	sl, [pc, #680]	; d4ee0 <_Z9sendEventv+0x498>
  publishQueue.publish("powermonitoring_hook", ubidots_hook, PRIVATE);
   d4c3a:	781b      	ldrb	r3, [r3, #0]
   d4c3c:	49a2      	ldr	r1, [pc, #648]	; (d4ec8 <_Z9sendEventv+0x480>)
   d4c3e:	48a3      	ldr	r0, [pc, #652]	; (d4ecc <_Z9sendEventv+0x484>)
   d4c40:	aa0c      	add	r2, sp, #48	; 0x30
   d4c42:	f7ff fbbc 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.6;
   d4c46:	f8da 0000 	ldr.w	r0, [sl]
   d4c4a:	f006 f875 	bl	dad38 <__aeabi_f2d>
   d4c4e:	a392      	add	r3, pc, #584	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4c50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c54:	4680      	mov	r8, r0
   d4c56:	4689      	mov	r9, r1
   d4c58:	f006 f8c6 	bl	dade8 <__aeabi_dmul>
   d4c5c:	f006 fb94 	bl	db388 <__aeabi_d2f>
   d4c60:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  sensorData.sensorTwoPreviousLow = (sensorData.sensorTwoCurrent)*0.6;
   d4c64:	f8da 0004 	ldr.w	r0, [sl, #4]
   d4c68:	f006 f866 	bl	dad38 <__aeabi_f2d>
   d4c6c:	4602      	mov	r2, r0
   d4c6e:	460b      	mov	r3, r1
   d4c70:	ec43 2b18 	vmov	d8, r2, r3
   d4c74:	a388      	add	r3, pc, #544	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c7a:	f006 f8b5 	bl	dade8 <__aeabi_dmul>
   d4c7e:	f006 fb83 	bl	db388 <__aeabi_d2f>
   d4c82:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
  sensorData.sensorThreePreviousLow = (sensorData.sensorThreeCurrent)*0.6;
   d4c86:	f8da 0008 	ldr.w	r0, [sl, #8]
   d4c8a:	f006 f855 	bl	dad38 <__aeabi_f2d>
   d4c8e:	4602      	mov	r2, r0
   d4c90:	460b      	mov	r3, r1
   d4c92:	ec43 2b19 	vmov	d9, r2, r3
   d4c96:	a380      	add	r3, pc, #512	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c9c:	f006 f8a4 	bl	dade8 <__aeabi_dmul>
   d4ca0:	f006 fb72 	bl	db388 <__aeabi_d2f>
   d4ca4:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  sensorData.sensorFourPreviousLow = (sensorData.sensorFourCurrent)*0.6;
   d4ca8:	f8da 000c 	ldr.w	r0, [sl, #12]
   d4cac:	f006 f844 	bl	dad38 <__aeabi_f2d>
   d4cb0:	4602      	mov	r2, r0
   d4cb2:	460b      	mov	r3, r1
   d4cb4:	ec43 2b1a 	vmov	d10, r2, r3
   d4cb8:	a377      	add	r3, pc, #476	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cbe:	f006 f893 	bl	dade8 <__aeabi_dmul>
   d4cc2:	f006 fb61 	bl	db388 <__aeabi_d2f>
   d4cc6:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  sensorData.sensorFivePreviousLow = (sensorData.sensorFiveCurrent)*0.6;
   d4cca:	f8da 0010 	ldr.w	r0, [sl, #16]
   d4cce:	f006 f833 	bl	dad38 <__aeabi_f2d>
   d4cd2:	4602      	mov	r2, r0
   d4cd4:	460b      	mov	r3, r1
   d4cd6:	ec43 2b1b 	vmov	d11, r2, r3
   d4cda:	a36f      	add	r3, pc, #444	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce0:	f006 f882 	bl	dade8 <__aeabi_dmul>
   d4ce4:	f006 fb50 	bl	db388 <__aeabi_d2f>
   d4ce8:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  sensorData.sensorSixPreviousLow = (sensorData.sensorSixCurrent)*0.6;
   d4cec:	f8da 0014 	ldr.w	r0, [sl, #20]
   d4cf0:	f006 f822 	bl	dad38 <__aeabi_f2d>
   d4cf4:	a368      	add	r3, pc, #416	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cfa:	4606      	mov	r6, r0
   d4cfc:	460f      	mov	r7, r1
   d4cfe:	f006 f873 	bl	dade8 <__aeabi_dmul>
   d4d02:	f006 fb41 	bl	db388 <__aeabi_d2f>
   d4d06:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  sensorData.ThreePhaseLoadOnePreviousLow = (sensorData.I_ThreePhaseLoad_One[0])*0.6;
   d4d0a:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
   d4d0e:	f006 f813 	bl	dad38 <__aeabi_f2d>
   d4d12:	a361      	add	r3, pc, #388	; (adr r3, d4e98 <_Z9sendEventv+0x450>)
   d4d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d18:	4604      	mov	r4, r0
   d4d1a:	460d      	mov	r5, r1
   d4d1c:	f006 f864 	bl	dade8 <__aeabi_dmul>
   d4d20:	f006 fb32 	bl	db388 <__aeabi_d2f>
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4d24:	a35e      	add	r3, pc, #376	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d26:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.ThreePhaseLoadOnePreviousLow = (sensorData.I_ThreePhaseLoad_One[0])*0.6;
   d4d2a:	f8ca 0064 	str.w	r0, [sl, #100]	; 0x64
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4d2e:	4649      	mov	r1, r9
   d4d30:	4640      	mov	r0, r8
   d4d32:	f006 f859 	bl	dade8 <__aeabi_dmul>
   d4d36:	f006 fb27 	bl	db388 <__aeabi_d2f>
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4d3a:	a359      	add	r3, pc, #356	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.4;
   d4d40:	f8ca 0018 	str.w	r0, [sl, #24]
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4d44:	ec51 0b18 	vmov	r0, r1, d8
   d4d48:	f006 f84e 	bl	dade8 <__aeabi_dmul>
   d4d4c:	f006 fb1c 	bl	db388 <__aeabi_d2f>
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4d50:	a353      	add	r3, pc, #332	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d52:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.4;
   d4d56:	f8ca 001c 	str.w	r0, [sl, #28]
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4d5a:	ec51 0b19 	vmov	r0, r1, d9
   d4d5e:	f006 f843 	bl	dade8 <__aeabi_dmul>
   d4d62:	f006 fb11 	bl	db388 <__aeabi_d2f>
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4d66:	a34e      	add	r3, pc, #312	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d68:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.4;
   d4d6c:	f8ca 0020 	str.w	r0, [sl, #32]
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4d70:	ec51 0b1a 	vmov	r0, r1, d10
   d4d74:	f006 f838 	bl	dade8 <__aeabi_dmul>
   d4d78:	f006 fb06 	bl	db388 <__aeabi_d2f>
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4d7c:	a348      	add	r3, pc, #288	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.4;
   d4d82:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4d86:	ec51 0b1b 	vmov	r0, r1, d11
   d4d8a:	f006 f82d 	bl	dade8 <__aeabi_dmul>
   d4d8e:	f006 fafb 	bl	db388 <__aeabi_d2f>
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4d92:	a343      	add	r3, pc, #268	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4d94:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.4;
   d4d98:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4d9c:	4639      	mov	r1, r7
   d4d9e:	4630      	mov	r0, r6
   d4da0:	f006 f822 	bl	dade8 <__aeabi_dmul>
   d4da4:	f006 faf0 	bl	db388 <__aeabi_d2f>
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4da8:	a33d      	add	r3, pc, #244	; (adr r3, d4ea0 <_Z9sendEventv+0x458>)
   d4daa:	e9d3 2300 	ldrd	r2, r3, [r3]
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.4;
   d4dae:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4db2:	4629      	mov	r1, r5
   d4db4:	4620      	mov	r0, r4
   d4db6:	f006 f817 	bl	dade8 <__aeabi_dmul>
   d4dba:	f006 fae5 	bl	db388 <__aeabi_d2f>
  sensorDataWriteNeeded = true;
   d4dbe:	4a44      	ldr	r2, [pc, #272]	; (d4ed0 <_Z9sendEventv+0x488>)
  sensorData.ThreePhaseLoadOnePreviousHigh = (sensorData.I_ThreePhaseLoad_One[0])*1.4;
   d4dc0:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
  sensorDataWriteNeeded = true;
   d4dc4:	2301      	movs	r3, #1
   d4dc6:	7013      	strb	r3, [r2, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4dc8:	4a42      	ldr	r2, [pc, #264]	; (d4ed4 <_Z9sendEventv+0x48c>)
   d4dca:	7013      	strb	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4dcc:	f003 fb6c 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4dd0:	4b41      	ldr	r3, [pc, #260]	; (d4ed8 <_Z9sendEventv+0x490>)
   d4dd2:	6018      	str	r0, [r3, #0]
  String myDeviceID = System.deviceID();                                                        // Device ID
   d4dd4:	a803      	add	r0, sp, #12
   d4dd6:	f004 ff5d 	bl	d9c94 <_ZN6StringD1Ev>
}
   d4dda:	b04c      	add	sp, #304	; 0x130
   d4ddc:	ecbd 8b08 	vpop	{d8-d11}
   d4de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if (sysStatus.operatingMode == 3){
   d4de4:	2b03      	cmp	r3, #3
   d4de6:	d120      	bne.n	d4e2a <_Z9sendEventv+0x3e2>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d4de8:	492f      	ldr	r1, [pc, #188]	; (d4ea8 <_Z9sendEventv+0x460>)
   d4dea:	a807      	add	r0, sp, #28
   d4dec:	f7ff fab4 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4df0:	4606      	mov	r6, r0
   d4df2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4df4:	f005 ffa0 	bl	dad38 <__aeabi_f2d>
   d4df8:	ec41 0b10 	vmov	d0, r0, r1
   d4dfc:	4630      	mov	r0, r6
   d4dfe:	f004 fd2d 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d4e02:	492a      	ldr	r1, [pc, #168]	; (d4eac <_Z9sendEventv+0x464>)
   d4e04:	a807      	add	r0, sp, #28
   d4e06:	f7ff faa7 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e0a:	4606      	mov	r6, r0
   d4e0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4e0e:	f005 ff93 	bl	dad38 <__aeabi_f2d>
   d4e12:	ec41 0b10 	vmov	d0, r0, r1
   d4e16:	4630      	mov	r0, r6
   d4e18:	f004 fd20 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d4e1c:	4924      	ldr	r1, [pc, #144]	; (d4eb0 <_Z9sendEventv+0x468>)
   d4e1e:	a807      	add	r0, sp, #28
   d4e20:	f7ff fa9a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e24:	4606      	mov	r6, r0
   d4e26:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4e28:	e655      	b.n	d4ad6 <_Z9sendEventv+0x8e>
      else if (sysStatus.operatingMode == 4){
   d4e2a:	2b04      	cmp	r3, #4
   d4e2c:	f47f aefc 	bne.w	d4c28 <_Z9sendEventv+0x1e0>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.Four_ThreePhaseLoad_I[0]);
   d4e30:	491d      	ldr	r1, [pc, #116]	; (d4ea8 <_Z9sendEventv+0x460>)
   d4e32:	a807      	add	r0, sp, #28
   d4e34:	f7ff fa90 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e38:	4606      	mov	r6, r0
   d4e3a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d4e3e:	f005 ff7b 	bl	dad38 <__aeabi_f2d>
   d4e42:	ec41 0b10 	vmov	d0, r0, r1
   d4e46:	4630      	mov	r0, r6
   d4e48:	f004 fd08 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.Four_ThreePhaseLoad_I[1]);
   d4e4c:	4917      	ldr	r1, [pc, #92]	; (d4eac <_Z9sendEventv+0x464>)
   d4e4e:	a807      	add	r0, sp, #28
   d4e50:	f7ff fa82 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e54:	4606      	mov	r6, r0
   d4e56:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   d4e5a:	f005 ff6d 	bl	dad38 <__aeabi_f2d>
   d4e5e:	ec41 0b10 	vmov	d0, r0, r1
   d4e62:	4630      	mov	r0, r6
   d4e64:	f004 fcfa 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.Four_ThreePhaseLoad_I[2]);
   d4e68:	4911      	ldr	r1, [pc, #68]	; (d4eb0 <_Z9sendEventv+0x468>)
   d4e6a:	a807      	add	r0, sp, #28
   d4e6c:	f7ff fa74 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e70:	4606      	mov	r6, r0
   d4e72:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   d4e76:	f005 ff5f 	bl	dad38 <__aeabi_f2d>
   d4e7a:	ec41 0b10 	vmov	d0, r0, r1
   d4e7e:	4630      	mov	r0, r6
   d4e80:	f004 fcec 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d4e84:	4915      	ldr	r1, [pc, #84]	; (d4edc <_Z9sendEventv+0x494>)
   d4e86:	a807      	add	r0, sp, #28
   d4e88:	f7ff fa66 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d4e8c:	4606      	mov	r6, r0
   d4e8e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   d4e92:	e62f      	b.n	d4af4 <_Z9sendEventv+0xac>
   d4e94:	f3af 8000 	nop.w
   d4e98:	33333333 	.word	0x33333333
   d4e9c:	3fe33333 	.word	0x3fe33333
   d4ea0:	66666666 	.word	0x66666666
   d4ea4:	3ff66666 	.word	0x3ff66666
   d4ea8:	000dd67e 	.word	0x000dd67e
   d4eac:	000dd689 	.word	0x000dd689
   d4eb0:	000dd694 	.word	0x000dd694
   d4eb4:	000dd69f 	.word	0x000dd69f
   d4eb8:	000dd6aa 	.word	0x000dd6aa
   d4ebc:	000dd6b5 	.word	0x000dd6b5
   d4ec0:	000dd541 	.word	0x000dd541
   d4ec4:	2003df2d 	.word	0x2003df2d
   d4ec8:	000dd6cb 	.word	0x000dd6cb
   d4ecc:	2003e3d0 	.word	0x2003e3d0
   d4ed0:	2003e4f4 	.word	0x2003e4f4
   d4ed4:	2003df4f 	.word	0x2003df4f
   d4ed8:	2003e5f0 	.word	0x2003e5f0
   d4edc:	000dd6c0 	.word	0x000dd6c0
   d4ee0:	2003e440 	.word	0x2003e440

000d4ee4 <_Z22publishStateTransitionv>:
{
   d4ee4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4ee6:	4d11      	ldr	r5, [pc, #68]	; (d4f2c <_Z22publishStateTransitionv+0x48>)
   d4ee8:	4c11      	ldr	r4, [pc, #68]	; (d4f30 <_Z22publishStateTransitionv+0x4c>)
   d4eea:	4912      	ldr	r1, [pc, #72]	; (d4f34 <_Z22publishStateTransitionv+0x50>)
   d4eec:	782a      	ldrb	r2, [r5, #0]
   d4eee:	7820      	ldrb	r0, [r4, #0]
{
   d4ef0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4ef2:	231a      	movs	r3, #26
   d4ef4:	fb03 1202 	mla	r2, r3, r2, r1
   d4ef8:	9200      	str	r2, [sp, #0]
   d4efa:	fb03 1300 	mla	r3, r3, r0, r1
   d4efe:	4a0e      	ldr	r2, [pc, #56]	; (d4f38 <_Z22publishStateTransitionv+0x54>)
   d4f00:	2128      	movs	r1, #40	; 0x28
   d4f02:	a802      	add	r0, sp, #8
   d4f04:	f003 fd96 	bl	d8a34 <snprintf>
  oldState = state;
   d4f08:	782b      	ldrb	r3, [r5, #0]
   d4f0a:	7023      	strb	r3, [r4, #0]
   d4f0c:	f003 fcca 	bl	d88a4 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4f10:	b148      	cbz	r0, d4f26 <_Z22publishStateTransitionv+0x42>
   d4f12:	2300      	movs	r3, #0
   d4f14:	f88d 3000 	strb.w	r3, [sp]
   d4f18:	4b08      	ldr	r3, [pc, #32]	; (d4f3c <_Z22publishStateTransitionv+0x58>)
   d4f1a:	4909      	ldr	r1, [pc, #36]	; (d4f40 <_Z22publishStateTransitionv+0x5c>)
   d4f1c:	781b      	ldrb	r3, [r3, #0]
   d4f1e:	4809      	ldr	r0, [pc, #36]	; (d4f44 <_Z22publishStateTransitionv+0x60>)
   d4f20:	aa02      	add	r2, sp, #8
   d4f22:	f7ff fa4c 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4f26:	b00d      	add	sp, #52	; 0x34
   d4f28:	bd30      	pop	{r4, r5, pc}
   d4f2a:	bf00      	nop
   d4f2c:	2003e5b5 	.word	0x2003e5b5
   d4f30:	2003e3cc 	.word	0x2003e3cc
   d4f34:	2003dc30 	.word	0x2003dc30
   d4f38:	000dd6e0 	.word	0x000dd6e0
   d4f3c:	2003df2d 	.word	0x2003df2d
   d4f40:	000dd6ee 	.word	0x000dd6ee
   d4f44:	2003e3d0 	.word	0x2003e3d0

000d4f48 <_Z17getBatteryContextv>:
{
   d4f48:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4f4a:	4d0d      	ldr	r5, [pc, #52]	; (d4f80 <_Z17getBatteryContextv+0x38>)
   d4f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4f4e:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4f50:	ac01      	add	r4, sp, #4
   d4f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4f58:	4b0a      	ldr	r3, [pc, #40]	; (d4f84 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4f5e:	7c1b      	ldrb	r3, [r3, #16]
   d4f60:	4809      	ldr	r0, [pc, #36]	; (d4f88 <_Z17getBatteryContextv+0x40>)
   d4f62:	aa08      	add	r2, sp, #32
   d4f64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4f68:	2110      	movs	r1, #16
   d4f6a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4f6e:	4a07      	ldr	r2, [pc, #28]	; (d4f8c <_Z17getBatteryContextv+0x44>)
   d4f70:	f003 fd60 	bl	d8a34 <snprintf>
  sysStatusWriteNeeded = true;
   d4f74:	4b06      	ldr	r3, [pc, #24]	; (d4f90 <_Z17getBatteryContextv+0x48>)
   d4f76:	2201      	movs	r2, #1
   d4f78:	701a      	strb	r2, [r3, #0]
}
   d4f7a:	b009      	add	sp, #36	; 0x24
   d4f7c:	bd30      	pop	{r4, r5, pc}
   d4f7e:	bf00      	nop
   d4f80:	000ddbb8 	.word	0x000ddbb8
   d4f84:	2003e5b8 	.word	0x2003e5b8
   d4f88:	2003df2e 	.word	0x2003df2e
   d4f8c:	000dde48 	.word	0x000dde48
   d4f90:	2003e5ec 	.word	0x2003e5ec

000d4f94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d4f98:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4f9c:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4fa0:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d4fa2:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4fa6:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d4fa8:	ebad 0d04 	sub.w	sp, sp, r4
   d4fac:	ad02      	add	r5, sp, #8
   d4fae:	46ac      	mov	ip, r5
   d4fb0:	f04f 0e00 	mov.w	lr, #0
   d4fb4:	f84c eb04 	str.w	lr, [ip], #4
   d4fb8:	3802      	subs	r0, #2
   d4fba:	2800      	cmp	r0, #0
   d4fbc:	da2a      	bge.n	d5014 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4fbe:	f8df b068 	ldr.w	fp, [pc, #104]	; d5028 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4fc2:	f8df a068 	ldr.w	sl, [pc, #104]	; d502c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4fc6:	460c      	mov	r4, r1
   d4fc8:	4690      	mov	r8, r2
   d4fca:	461e      	mov	r6, r3
   d4fcc:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4fce:	454d      	cmp	r5, r9
   d4fd0:	d024      	beq.n	d501c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4fd2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4fd6:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4fda:	4658      	mov	r0, fp
   d4fdc:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4fe0:	f001 fa86 	bl	d64f0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4fe4:	ec51 0b10 	vmov	r0, r1, d0
   d4fe8:	f006 f9ce 	bl	db388 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4fec:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4ff0:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4ff4:	f005 fea0 	bl	dad38 <__aeabi_f2d>
   d4ff8:	e9da 2300 	ldrd	r2, r3, [sl]
   d4ffc:	f005 fef4 	bl	dade8 <__aeabi_dmul>
   d5000:	4b08      	ldr	r3, [pc, #32]	; (d5024 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d5002:	2200      	movs	r2, #0
   d5004:	f006 f81a 	bl	db03c <__aeabi_ddiv>
   d5008:	f006 f9be 	bl	db388 <__aeabi_d2f>
   d500c:	3410      	adds	r4, #16
   d500e:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d5012:	e7dc      	b.n	d4fce <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d5014:	f84c eb04 	str.w	lr, [ip], #4
   d5018:	3801      	subs	r0, #1
   d501a:	e7ce      	b.n	d4fba <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d501c:	3704      	adds	r7, #4
   d501e:	46bd      	mov	sp, r7
   d5020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5024:	408f4000 	.word	0x408f4000
   d5028:	2003dee8 	.word	0x2003dee8
   d502c:	2003dc28 	.word	0x2003dc28

000d5030 <_Z16takeMeasurementsv>:
{   
   d5030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5034:	ed2d 8b06 	vpush	{d8-d10}
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5038:	4c8c      	ldr	r4, [pc, #560]	; (d526c <_Z16takeMeasurementsv+0x23c>)
   d503a:	4b8d      	ldr	r3, [pc, #564]	; (d5270 <_Z16takeMeasurementsv+0x240>)
   d503c:	6820      	ldr	r0, [r4, #0]
   d503e:	f893 a000 	ldrb.w	sl, [r3]
{   
   d5042:	b0a8      	sub	sp, #160	; 0xa0
  };
   d5044:	f8cd a000 	str.w	sl, [sp]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5048:	f005 fe76 	bl	dad38 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d504c:	4b89      	ldr	r3, [pc, #548]	; (d5274 <_Z16takeMeasurementsv+0x244>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d504e:	ec41 0b1a 	vmov	d10, r0, r1
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5052:	f893 9000 	ldrb.w	r9, [r3]
  };
   d5056:	f8cd 9010 	str.w	r9, [sp, #16]
   d505a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d505e:	6860      	ldr	r0, [r4, #4]
   d5060:	f005 fe6a 	bl	dad38 <__aeabi_f2d>
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5064:	4b84      	ldr	r3, [pc, #528]	; (d5278 <_Z16takeMeasurementsv+0x248>)
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5066:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d506a:	f893 8000 	ldrb.w	r8, [r3]
  };
   d506e:	f8cd 8020 	str.w	r8, [sp, #32]
   d5072:	e9cd 0106 	strd	r0, r1, [sp, #24]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5076:	68a0      	ldr	r0, [r4, #8]
   d5078:	f005 fe5e 	bl	dad38 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d507c:	4b7f      	ldr	r3, [pc, #508]	; (d527c <_Z16takeMeasurementsv+0x24c>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d507e:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5082:	781d      	ldrb	r5, [r3, #0]
  };
   d5084:	950c      	str	r5, [sp, #48]	; 0x30
  };
   d5086:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d508a:	68e0      	ldr	r0, [r4, #12]
   d508c:	f005 fe54 	bl	dad38 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5090:	4b7b      	ldr	r3, [pc, #492]	; (d5280 <_Z16takeMeasurementsv+0x250>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5092:	4606      	mov	r6, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5094:	781b      	ldrb	r3, [r3, #0]
   d5096:	6920      	ldr	r0, [r4, #16]
   d5098:	9310      	str	r3, [sp, #64]	; 0x40
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d509a:	460f      	mov	r7, r1
  };
   d509c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d50a0:	f005 fe4a 	bl	dad38 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d50a4:	4b77      	ldr	r3, [pc, #476]	; (d5284 <_Z16takeMeasurementsv+0x254>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d50a6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d50aa:	781b      	ldrb	r3, [r3, #0]
   d50ac:	6960      	ldr	r0, [r4, #20]
   d50ae:	9314      	str	r3, [sp, #80]	; 0x50
   d50b0:	f005 fe42 	bl	dad38 <__aeabi_f2d>
    sensorData.validData = false;
   d50b4:	4c74      	ldr	r4, [pc, #464]	; (d5288 <_Z16takeMeasurementsv+0x258>)
   };
   d50b6:	9524      	str	r5, [sp, #144]	; 0x90
    if ((sysStatus.operatingMode) == 1){
   d50b8:	4d74      	ldr	r5, [pc, #464]	; (d528c <_Z16takeMeasurementsv+0x25c>)
   };
   d50ba:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    sensorData.validData = false;
   d50be:	2300      	movs	r3, #0
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d50c0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   };
   d50c4:	ed8d ab1a 	vstr	d10, [sp, #104]	; 0x68
   d50c8:	ed8d 9b1e 	vstr	d9, [sp, #120]	; 0x78
   d50cc:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
   d50d0:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
   d50d4:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   d50d8:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    sensorData.validData = false;
   d50dc:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    getBatteryContext();     
   d50e0:	f7ff ff32 	bl	d4f48 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d50e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   d50e6:	2801      	cmp	r0, #1
   d50e8:	d14a      	bne.n	d5180 <_Z16takeMeasurementsv+0x150>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d50ea:	7f2b      	ldrb	r3, [r5, #28]
   d50ec:	b14b      	cbz	r3, d5102 <_Z16takeMeasurementsv+0xd2>
   d50ee:	4868      	ldr	r0, [pc, #416]	; (d5290 <_Z16takeMeasurementsv+0x260>)
   d50f0:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d50f4:	f002 f8c8 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d50f8:	ec51 0b10 	vmov	r0, r1, d0
   d50fc:	f006 f944 	bl	db388 <__aeabi_d2f>
   d5100:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d5102:	7f6b      	ldrb	r3, [r5, #29]
   d5104:	b14b      	cbz	r3, d511a <_Z16takeMeasurementsv+0xea>
   d5106:	4863      	ldr	r0, [pc, #396]	; (d5294 <_Z16takeMeasurementsv+0x264>)
   d5108:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d510c:	f002 f8bc 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d5110:	ec51 0b10 	vmov	r0, r1, d0
   d5114:	f006 f938 	bl	db388 <__aeabi_d2f>
   d5118:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d511a:	7fab      	ldrb	r3, [r5, #30]
   d511c:	b14b      	cbz	r3, d5132 <_Z16takeMeasurementsv+0x102>
   d511e:	485e      	ldr	r0, [pc, #376]	; (d5298 <_Z16takeMeasurementsv+0x268>)
   d5120:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5124:	f002 f8b0 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d5128:	ec51 0b10 	vmov	r0, r1, d0
   d512c:	f006 f92c 	bl	db388 <__aeabi_d2f>
   d5130:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d5132:	7feb      	ldrb	r3, [r5, #31]
   d5134:	b14b      	cbz	r3, d514a <_Z16takeMeasurementsv+0x11a>
   d5136:	4859      	ldr	r0, [pc, #356]	; (d529c <_Z16takeMeasurementsv+0x26c>)
   d5138:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d513c:	f002 f8a4 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d5140:	ec51 0b10 	vmov	r0, r1, d0
   d5144:	f006 f920 	bl	db388 <__aeabi_d2f>
   d5148:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d514a:	f895 3020 	ldrb.w	r3, [r5, #32]
   d514e:	b14b      	cbz	r3, d5164 <_Z16takeMeasurementsv+0x134>
   d5150:	4853      	ldr	r0, [pc, #332]	; (d52a0 <_Z16takeMeasurementsv+0x270>)
   d5152:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5156:	f002 f897 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d515a:	ec51 0b10 	vmov	r0, r1, d0
   d515e:	f006 f913 	bl	db388 <__aeabi_d2f>
   d5162:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d5164:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d5168:	b1e3      	cbz	r3, d51a4 <_Z16takeMeasurementsv+0x174>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d516a:	484e      	ldr	r0, [pc, #312]	; (d52a4 <_Z16takeMeasurementsv+0x274>)
   d516c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5170:	f002 f88a 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d5174:	ec51 0b10 	vmov	r0, r1, d0
   d5178:	f006 f906 	bl	db388 <__aeabi_d2f>
   d517c:	6160      	str	r0, [r4, #20]
   d517e:	e011      	b.n	d51a4 <_Z16takeMeasurementsv+0x174>
    else if ((sysStatus.operatingMode) == 2){
   d5180:	2802      	cmp	r0, #2
   d5182:	d13a      	bne.n	d51fa <_Z16takeMeasurementsv+0x1ca>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d5184:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d5188:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d518c:	4669      	mov	r1, sp
   d518e:	2003      	movs	r0, #3
   d5190:	f7ff ff00 	bl	d4f94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d5194:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   d5198:	f104 0270 	add.w	r2, r4, #112	; 0x70
   d519c:	a90c      	add	r1, sp, #48	; 0x30
   d519e:	2003      	movs	r0, #3
   d51a0:	f7ff fef8 	bl	d4f94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    sensorDataWriteNeeded = true;
   d51a4:	4e40      	ldr	r6, [pc, #256]	; (d52a8 <_Z16takeMeasurementsv+0x278>)
   d51a6:	2201      	movs	r2, #1
   d51a8:	7032      	strb	r2, [r6, #0]
    if ( ((sysStatus.sensorTwoConnected && sensorData.sensorTwoCurrent> 1) && ((sensorData.sensorTwoCurrent < sensorData.sensorTwoPreviousLow) || (sensorData.sensorTwoCurrent > sensorData.sensorTwoPreviousHigh))))  {
   d51aa:	7f6a      	ldrb	r2, [r5, #29]
   d51ac:	2a00      	cmp	r2, #0
   d51ae:	d07d      	beq.n	d52ac <_Z16takeMeasurementsv+0x27c>
   d51b0:	edd4 7a01 	vldr	s15, [r4, #4]
   d51b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d51b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d51bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51c0:	dd74      	ble.n	d52ac <_Z16takeMeasurementsv+0x27c>
   d51c2:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   d51c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d51ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51ce:	d406      	bmi.n	d51de <_Z16takeMeasurementsv+0x1ae>
   d51d0:	ed94 7a07 	vldr	s14, [r4, #28]
   d51d4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d51d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51dc:	dd66      	ble.n	d52ac <_Z16takeMeasurementsv+0x27c>
    sensorData.validData = true;
   d51de:	2501      	movs	r5, #1
   d51e0:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
    sensorData.timeStamp = Time.now();
   d51e4:	f004 ffe3 	bl	da1ae <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d51e8:	7035      	strb	r5, [r6, #0]
    sensorData.timeStamp = Time.now();
   d51ea:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    return 1;
   d51ee:	4628      	mov	r0, r5
  }
   d51f0:	b028      	add	sp, #160	; 0xa0
   d51f2:	ecbd 8b06 	vpop	{d8-d10}
   d51f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (sysStatus.operatingMode == 3){
   d51fa:	2803      	cmp	r0, #3
   d51fc:	d129      	bne.n	d5252 <_Z16takeMeasurementsv+0x222>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d51fe:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d5202:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d5206:	4669      	mov	r1, sp
   d5208:	f7ff fec4 	bl	d4f94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d520c:	7feb      	ldrb	r3, [r5, #31]
   d520e:	b1eb      	cbz	r3, d524c <_Z16takeMeasurementsv+0x21c>
   d5210:	4822      	ldr	r0, [pc, #136]	; (d529c <_Z16takeMeasurementsv+0x26c>)
   d5212:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5216:	f002 f837 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d521a:	ec51 0b10 	vmov	r0, r1, d0
   d521e:	f006 f8b3 	bl	db388 <__aeabi_d2f>
   d5222:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);       
   d5224:	f895 3020 	ldrb.w	r3, [r5, #32]
   d5228:	b1eb      	cbz	r3, d5266 <_Z16takeMeasurementsv+0x236>
   d522a:	481d      	ldr	r0, [pc, #116]	; (d52a0 <_Z16takeMeasurementsv+0x270>)
   d522c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d5230:	f002 f82a 	bl	d7288 <_ZN13EnergyMonitor8calcIrmsEj>
   d5234:	ec51 0b10 	vmov	r0, r1, d0
   d5238:	f006 f8a6 	bl	db388 <__aeabi_d2f>
   d523c:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d523e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d5242:	2b00      	cmp	r3, #0
   d5244:	d191      	bne.n	d516a <_Z16takeMeasurementsv+0x13a>
      else sensorData.sensorSixCurrent=0;
   d5246:	2300      	movs	r3, #0
   d5248:	6163      	str	r3, [r4, #20]
   d524a:	e7ab      	b.n	d51a4 <_Z16takeMeasurementsv+0x174>
      else sensorData.sensorFourCurrent=0;
   d524c:	2300      	movs	r3, #0
   d524e:	60e3      	str	r3, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d5250:	e7e8      	b.n	d5224 <_Z16takeMeasurementsv+0x1f4>
    else if (sysStatus.operatingMode == 4){
   d5252:	2804      	cmp	r0, #4
   d5254:	d1a6      	bne.n	d51a4 <_Z16takeMeasurementsv+0x174>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d5256:	f104 0398 	add.w	r3, r4, #152	; 0x98
   d525a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   d525e:	a918      	add	r1, sp, #96	; 0x60
   d5260:	f7ff fe98 	bl	d4f94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d5264:	e7de      	b.n	d5224 <_Z16takeMeasurementsv+0x1f4>
      else sensorData.sensorFiveCurrent=0;                  
   d5266:	2300      	movs	r3, #0
   d5268:	6123      	str	r3, [r4, #16]
   d526a:	e7e8      	b.n	d523e <_Z16takeMeasurementsv+0x20e>
   d526c:	2003e428 	.word	0x2003e428
   d5270:	2003dc20 	.word	0x2003dc20
   d5274:	2003dc21 	.word	0x2003dc21
   d5278:	2003dc22 	.word	0x2003dc22
   d527c:	2003dc23 	.word	0x2003dc23
   d5280:	2003dc24 	.word	0x2003dc24
   d5284:	2003dc25 	.word	0x2003dc25
   d5288:	2003e440 	.word	0x2003e440
   d528c:	2003e5b8 	.word	0x2003e5b8
   d5290:	2003df50 	.word	0x2003df50
   d5294:	2003e008 	.word	0x2003e008
   d5298:	2003e0c0 	.word	0x2003e0c0
   d529c:	2003e178 	.word	0x2003e178
   d52a0:	2003e230 	.word	0x2003e230
   d52a4:	2003e2e8 	.word	0x2003e2e8
   d52a8:	2003e4f4 	.word	0x2003e4f4
    } else if ( ((sysStatus.sensorOneConnected && sensorData.sensorOneCurrent> 1) && ((sensorData.sensorOneCurrent < sensorData.sensorOnePreviousLow) || (sensorData.sensorOneCurrent > sensorData.sensorOnePreviousHigh))) ){
   d52ac:	7f2b      	ldrb	r3, [r5, #28]
   d52ae:	b1bb      	cbz	r3, d52e0 <_Z16takeMeasurementsv+0x2b0>
   d52b0:	edd4 7a00 	vldr	s15, [r4]
   d52b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d52b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52c0:	dd0e      	ble.n	d52e0 <_Z16takeMeasurementsv+0x2b0>
   d52c2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
   d52c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52ce:	d486      	bmi.n	d51de <_Z16takeMeasurementsv+0x1ae>
   d52d0:	ed94 7a06 	vldr	s14, [r4, #24]
   d52d4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52dc:	f73f af7f 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorThreeConnected && sensorData.sensorThreeCurrent >1) && ((sensorData.sensorThreeCurrent < sensorData.sensorThreePreviousLow) || (sensorData.sensorThreeCurrent > sensorData.sensorThreePreviousHigh))) ){
   d52e0:	7fab      	ldrb	r3, [r5, #30]
   d52e2:	b1c3      	cbz	r3, d5316 <_Z16takeMeasurementsv+0x2e6>
   d52e4:	edd4 7a02 	vldr	s15, [r4, #8]
   d52e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d52ec:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52f4:	dd0f      	ble.n	d5316 <_Z16takeMeasurementsv+0x2e6>
   d52f6:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d52fa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5302:	f53f af6c 	bmi.w	d51de <_Z16takeMeasurementsv+0x1ae>
   d5306:	ed94 7a08 	vldr	s14, [r4, #32]
   d530a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5312:	f73f af64 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFourConnected && sensorData.sensorFourCurrent> 1) && ((sensorData.sensorFourCurrent < sensorData.sensorFourPreviousLow) || (sensorData.sensorFourCurrent > sensorData.sensorFourPreviousHigh))) ){
   d5316:	7feb      	ldrb	r3, [r5, #31]
   d5318:	b1c3      	cbz	r3, d534c <_Z16takeMeasurementsv+0x31c>
   d531a:	edd4 7a03 	vldr	s15, [r4, #12]
   d531e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5322:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d532a:	dd0f      	ble.n	d534c <_Z16takeMeasurementsv+0x31c>
   d532c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
   d5330:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5338:	f53f af51 	bmi.w	d51de <_Z16takeMeasurementsv+0x1ae>
   d533c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
   d5340:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5348:	f73f af49 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFiveConnected && sensorData.sensorFiveCurrent> 1) && ((sensorData.sensorFiveCurrent < sensorData.sensorFivePreviousLow) || (sensorData.sensorFiveCurrent > sensorData.sensorFivePreviousHigh))) ){
   d534c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d5350:	b1c3      	cbz	r3, d5384 <_Z16takeMeasurementsv+0x354>
   d5352:	edd4 7a04 	vldr	s15, [r4, #16]
   d5356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d535a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5362:	dd0f      	ble.n	d5384 <_Z16takeMeasurementsv+0x354>
   d5364:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   d5368:	eef4 7ac7 	vcmpe.f32	s15, s14
   d536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5370:	f53f af35 	bmi.w	d51de <_Z16takeMeasurementsv+0x1ae>
   d5374:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   d5378:	eef4 7ac7 	vcmpe.f32	s15, s14
   d537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5380:	f73f af2d 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorSixConnected && sensorData.sensorSixCurrent> 1) && ((sensorData.sensorSixCurrent < sensorData.sensorSixPreviousLow) || (sensorData.sensorSixCurrent > sensorData.sensorSixPreviousHigh))) ){
   d5384:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d5388:	b1c3      	cbz	r3, d53bc <_Z16takeMeasurementsv+0x38c>
   d538a:	edd4 7a05 	vldr	s15, [r4, #20]
   d538e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5392:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d539a:	dd0f      	ble.n	d53bc <_Z16takeMeasurementsv+0x38c>
   d539c:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
   d53a0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53a8:	f53f af19 	bmi.w	d51de <_Z16takeMeasurementsv+0x1ae>
   d53ac:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
   d53b0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53b8:	f73f af11 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else if ( (((sysStatus.operatingMode == 2 || sysStatus.operatingMode ==3) && sensorData.I_ThreePhaseLoad_One[0]> 1) && ((sensorData.I_ThreePhaseLoad_One[0] < sensorData.ThreePhaseLoadOnePreviousLow) || (sensorData.I_ThreePhaseLoad_One[0] > sensorData.ThreePhaseLoadOnePreviousHigh))) ){
   d53bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d53be:	3b02      	subs	r3, #2
   d53c0:	2b01      	cmp	r3, #1
   d53c2:	d818      	bhi.n	d53f6 <_Z16takeMeasurementsv+0x3c6>
   d53c4:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
   d53c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d53cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53d4:	dd0f      	ble.n	d53f6 <_Z16takeMeasurementsv+0x3c6>
   d53d6:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
   d53da:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53e2:	f53f aefc 	bmi.w	d51de <_Z16takeMeasurementsv+0x1ae>
   d53e6:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
   d53ea:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53f2:	f73f aef4 	bgt.w	d51de <_Z16takeMeasurementsv+0x1ae>
    else return 0;
   d53f6:	2000      	movs	r0, #0
   d53f8:	e6fa      	b.n	d51f0 <_Z16takeMeasurementsv+0x1c0>
   d53fa:	bf00      	nop

000d53fc <loop>:
void loop() {
   d53fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d53fe:	4c7a      	ldr	r4, [pc, #488]	; (d55e8 <loop+0x1ec>)
   d5400:	7823      	ldrb	r3, [r4, #0]
   d5402:	3b01      	subs	r3, #1
   d5404:	2b05      	cmp	r3, #5
   d5406:	d818      	bhi.n	d543a <loop+0x3e>
   d5408:	e8df f003 	tbb	[pc, r3]
   d540c:	716503c8 	.word	0x716503c8
   d5410:	944b      	.short	0x944b
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5412:	4b76      	ldr	r3, [pc, #472]	; (d55ec <loop+0x1f0>)
   d5414:	7a5b      	ldrb	r3, [r3, #9]
   d5416:	b12b      	cbz	r3, d5424 <loop+0x28>
   d5418:	4b75      	ldr	r3, [pc, #468]	; (d55f0 <loop+0x1f4>)
   d541a:	781b      	ldrb	r3, [r3, #0]
   d541c:	2b02      	cmp	r3, #2
   d541e:	d001      	beq.n	d5424 <loop+0x28>
   d5420:	f7ff fd60 	bl	d4ee4 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d5424:	f004 fec3 	bl	da1ae <_ZN9TimeClass3nowEv>
   d5428:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d542c:	fb90 f2f3 	sdiv	r2, r0, r3
   d5430:	fb02 0313 	mls	r3, r2, r3, r0
   d5434:	b90b      	cbnz	r3, d543a <loop+0x3e>
   d5436:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d5438:	7023      	strb	r3, [r4, #0]
  DeviceNameHelperRetained::instance().loop();
   d543a:	f001 fd2d 	bl	d6e98 <_ZN24DeviceNameHelperRetained8instanceEv>
   d543e:	f001 fd07 	bl	d6e50 <_ZN16DeviceNameHelper4loopEv>
  CloudConfig::instance().loop();
   d5442:	f001 f9cb 	bl	d67dc <_ZN11CloudConfig8instanceEv>
   d5446:	f001 f9e4 	bl	d6812 <_ZN11CloudConfig4loopEv>
  rtc.loop();                                                                               // keeps the clock up to date
   d544a:	486a      	ldr	r0, [pc, #424]	; (d55f4 <loop+0x1f8>)
   d544c:	f002 fc06 	bl	d7c5c <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d5450:	4b69      	ldr	r3, [pc, #420]	; (d55f8 <loop+0x1fc>)
   d5452:	781b      	ldrb	r3, [r3, #0]
   d5454:	b10b      	cbz	r3, d545a <loop+0x5e>
   d5456:	f7ff facf 	bl	d49f8 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d545a:	4c68      	ldr	r4, [pc, #416]	; (d55fc <loop+0x200>)
   d545c:	7823      	ldrb	r3, [r4, #0]
   d545e:	b13b      	cbz	r3, d5470 <loop+0x74>
   d5460:	2334      	movs	r3, #52	; 0x34
   d5462:	4a62      	ldr	r2, [pc, #392]	; (d55ec <loop+0x1f0>)
   d5464:	4866      	ldr	r0, [pc, #408]	; (d5600 <loop+0x204>)
   d5466:	2101      	movs	r1, #1
   d5468:	f002 f81b 	bl	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d546c:	2300      	movs	r3, #0
   d546e:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d5470:	4c64      	ldr	r4, [pc, #400]	; (d5604 <loop+0x208>)
   d5472:	7823      	ldrb	r3, [r4, #0]
   d5474:	b143      	cbz	r3, d5488 <loop+0x8c>
   d5476:	23b4      	movs	r3, #180	; 0xb4
   d5478:	4a63      	ldr	r2, [pc, #396]	; (d5608 <loop+0x20c>)
   d547a:	4861      	ldr	r0, [pc, #388]	; (d5600 <loop+0x204>)
   d547c:	f44f 7100 	mov.w	r1, #512	; 0x200
   d5480:	f002 f80f 	bl	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d5484:	2300      	movs	r3, #0
   d5486:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d5488:	4c60      	ldr	r4, [pc, #384]	; (d560c <loop+0x210>)
   d548a:	7823      	ldrb	r3, [r4, #0]
   d548c:	b13b      	cbz	r3, d549e <loop+0xa2>
   d548e:	2318      	movs	r3, #24
   d5490:	4a5f      	ldr	r2, [pc, #380]	; (d5610 <loop+0x214>)
   d5492:	485b      	ldr	r0, [pc, #364]	; (d5600 <loop+0x204>)
   d5494:	21a0      	movs	r1, #160	; 0xa0
   d5496:	f002 f804 	bl	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d549a:	2300      	movs	r3, #0
   d549c:	7023      	strb	r3, [r4, #0]
}
   d549e:	b003      	add	sp, #12
   d54a0:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d54a2:	4d52      	ldr	r5, [pc, #328]	; (d55ec <loop+0x1f0>)
   d54a4:	7a6a      	ldrb	r2, [r5, #9]
   d54a6:	b12a      	cbz	r2, d54b4 <loop+0xb8>
   d54a8:	4b51      	ldr	r3, [pc, #324]	; (d55f0 <loop+0x1f4>)
   d54aa:	781b      	ldrb	r3, [r3, #0]
   d54ac:	2b05      	cmp	r3, #5
   d54ae:	d001      	beq.n	d54b4 <loop+0xb8>
   d54b0:	f7ff fd18 	bl	d4ee4 <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d54b4:	f7ff fdbc 	bl	d5030 <_Z16takeMeasurementsv>
   d54b8:	b108      	cbz	r0, d54be <loop+0xc2>
    state = REPORTING_STATE;
   d54ba:	2304      	movs	r3, #4
   d54bc:	e7bc      	b.n	d5438 <loop+0x3c>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d54be:	f004 fe76 	bl	da1ae <_ZN9TimeClass3nowEv>
   d54c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d54c4:	fb90 f2f3 	sdiv	r2, r0, r3
   d54c8:	fb02 0313 	mls	r3, r2, r3, r0
   d54cc:	b90b      	cbnz	r3, d54d2 <loop+0xd6>
   d54ce:	2303      	movs	r3, #3
   d54d0:	e7b2      	b.n	d5438 <loop+0x3c>
    else state = IDLE_STATE;
   d54d2:	2302      	movs	r3, #2
   d54d4:	e7b0      	b.n	d5438 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d54d6:	4b45      	ldr	r3, [pc, #276]	; (d55ec <loop+0x1f0>)
   d54d8:	7a5b      	ldrb	r3, [r3, #9]
   d54da:	b12b      	cbz	r3, d54e8 <loop+0xec>
   d54dc:	4b44      	ldr	r3, [pc, #272]	; (d55f0 <loop+0x1f4>)
   d54de:	781b      	ldrb	r3, [r3, #0]
   d54e0:	2b03      	cmp	r3, #3
   d54e2:	d001      	beq.n	d54e8 <loop+0xec>
   d54e4:	f7ff fcfe 	bl	d4ee4 <_Z22publishStateTransitionv>
    takeMeasurements();
   d54e8:	f7ff fda2 	bl	d5030 <_Z16takeMeasurementsv>
   d54ec:	e7e5      	b.n	d54ba <loop+0xbe>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d54ee:	4b3f      	ldr	r3, [pc, #252]	; (d55ec <loop+0x1f0>)
   d54f0:	7a5b      	ldrb	r3, [r3, #9]
   d54f2:	b12b      	cbz	r3, d5500 <loop+0x104>
   d54f4:	4b3e      	ldr	r3, [pc, #248]	; (d55f0 <loop+0x1f4>)
   d54f6:	781b      	ldrb	r3, [r3, #0]
   d54f8:	2b04      	cmp	r3, #4
   d54fa:	d001      	beq.n	d5500 <loop+0x104>
   d54fc:	f7ff fcf2 	bl	d4ee4 <_Z22publishStateTransitionv>
   d5500:	f003 f9d0 	bl	d88a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5504:	b168      	cbz	r0, d5522 <loop+0x126>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5506:	f004 fe63 	bl	da1d0 <_ZN9TimeClass4hourEv>
   d550a:	280c      	cmp	r0, #12
   d550c:	d105      	bne.n	d551a <loop+0x11e>
   d550e:	f003 f9c9 	bl	d88a4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5512:	b110      	cbz	r0, d551a <loop+0x11e>
        return spark_sync_time(NULL);
   d5514:	2000      	movs	r0, #0
   d5516:	f003 f9e5 	bl	d88e4 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d551a:	f7ff fa95 	bl	d4a48 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d551e:	2306      	movs	r3, #6
   d5520:	e78a      	b.n	d5438 <loop+0x3c>
        spark_cloud_flag_connect();
   d5522:	f003 f9b7 	bl	d8894 <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d5526:	2302      	movs	r3, #2
   d5528:	7023      	strb	r3, [r4, #0]
   d552a:	f002 ffbd 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d552e:	4b39      	ldr	r3, [pc, #228]	; (d5614 <loop+0x218>)
   d5530:	6018      	str	r0, [r3, #0]
   d5532:	e782      	b.n	d543a <loop+0x3e>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5534:	4b2d      	ldr	r3, [pc, #180]	; (d55ec <loop+0x1f0>)
   d5536:	7a5b      	ldrb	r3, [r3, #9]
   d5538:	b12b      	cbz	r3, d5546 <loop+0x14a>
   d553a:	4b2d      	ldr	r3, [pc, #180]	; (d55f0 <loop+0x1f4>)
   d553c:	781b      	ldrb	r3, [r3, #0]
   d553e:	2b06      	cmp	r3, #6
   d5540:	d001      	beq.n	d5546 <loop+0x14a>
   d5542:	f7ff fccf 	bl	d4ee4 <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d5546:	4b34      	ldr	r3, [pc, #208]	; (d5618 <loop+0x21c>)
   d5548:	781b      	ldrb	r3, [r3, #0]
   d554a:	b94b      	cbnz	r3, d5560 <loop+0x164>
   d554c:	f004 fe2f 	bl	da1ae <_ZN9TimeClass3nowEv>
   d5550:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d5554:	fb90 f2f3 	sdiv	r2, r0, r3
   d5558:	fb02 0313 	mls	r3, r2, r3, r0
   d555c:	2b00      	cmp	r3, #0
   d555e:	d0b8      	beq.n	d54d2 <loop+0xd6>
   d5560:	f002 ffa2 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d5564:	4b2d      	ldr	r3, [pc, #180]	; (d561c <loop+0x220>)
   d5566:	681b      	ldr	r3, [r3, #0]
   d5568:	1ac0      	subs	r0, r0, r3
   d556a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d556e:	4298      	cmp	r0, r3
   d5570:	f67f af63 	bls.w	d543a <loop+0x3e>
   d5574:	f002 ff98 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5578:	4d26      	ldr	r5, [pc, #152]	; (d5614 <loop+0x218>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d557a:	4a29      	ldr	r2, [pc, #164]	; (d5620 <loop+0x224>)
      resetTimeStamp = millis();
   d557c:	6028      	str	r0, [r5, #0]
   d557e:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5580:	f88d 3000 	strb.w	r3, [sp]
   d5584:	4b27      	ldr	r3, [pc, #156]	; (d5624 <loop+0x228>)
   d5586:	4928      	ldr	r1, [pc, #160]	; (d5628 <loop+0x22c>)
   d5588:	781b      	ldrb	r3, [r3, #0]
   d558a:	4828      	ldr	r0, [pc, #160]	; (d562c <loop+0x230>)
   d558c:	f7fe ff17 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d5590:	2301      	movs	r3, #1
   d5592:	7023      	strb	r3, [r4, #0]
   d5594:	f002 ff88 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5598:	6028      	str	r0, [r5, #0]
   d559a:	e74e      	b.n	d543a <loop+0x3e>
    if (state != oldState) publishStateTransition();
   d559c:	4b14      	ldr	r3, [pc, #80]	; (d55f0 <loop+0x1f4>)
   d559e:	781b      	ldrb	r3, [r3, #0]
   d55a0:	2b01      	cmp	r3, #1
   d55a2:	d001      	beq.n	d55a8 <loop+0x1ac>
   d55a4:	f7ff fc9e 	bl	d4ee4 <_Z22publishStateTransitionv>
   d55a8:	f002 ff7e 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d55ac:	4b19      	ldr	r3, [pc, #100]	; (d5614 <loop+0x218>)
   d55ae:	681b      	ldr	r3, [r3, #0]
   d55b0:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d55b4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d55b8:	4283      	cmp	r3, r0
   d55ba:	f4bf af3e 	bcs.w	d543a <loop+0x3e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d55be:	f003 f971 	bl	d88a4 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d55c2:	b148      	cbz	r0, d55d8 <loop+0x1dc>
   d55c4:	2300      	movs	r3, #0
   d55c6:	f88d 3000 	strb.w	r3, [sp]
   d55ca:	4b16      	ldr	r3, [pc, #88]	; (d5624 <loop+0x228>)
   d55cc:	4a18      	ldr	r2, [pc, #96]	; (d5630 <loop+0x234>)
   d55ce:	781b      	ldrb	r3, [r3, #0]
   d55d0:	4918      	ldr	r1, [pc, #96]	; (d5634 <loop+0x238>)
   d55d2:	4816      	ldr	r0, [pc, #88]	; (d562c <loop+0x230>)
   d55d4:	f7fe fef3 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d55d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d55dc:	f003 fa7a 	bl	d8ad4 <delay>
      System.reset();
   d55e0:	f004 fc6a 	bl	d9eb8 <_ZN11SystemClass5resetEv>
   d55e4:	e729      	b.n	d543a <loop+0x3e>
   d55e6:	bf00      	nop
   d55e8:	2003e5b5 	.word	0x2003e5b5
   d55ec:	2003e5b8 	.word	0x2003e5b8
   d55f0:	2003e3cc 	.word	0x2003e3cc
   d55f4:	2003e40c 	.word	0x2003e40c
   d55f8:	2003e5ed 	.word	0x2003e5ed
   d55fc:	2003e5ec 	.word	0x2003e5ec
   d5600:	2003e3a0 	.word	0x2003e3a0
   d5604:	2003e4f4 	.word	0x2003e4f4
   d5608:	2003e440 	.word	0x2003e440
   d560c:	2003df4e 	.word	0x2003df4e
   d5610:	2003e428 	.word	0x2003e428
   d5614:	2003e408 	.word	0x2003e408
   d5618:	2003df4f 	.word	0x2003df4f
   d561c:	2003e5f0 	.word	0x2003e5f0
   d5620:	000de240 	.word	0x000de240
   d5624:	2003df2d 	.word	0x2003df2d
   d5628:	000dd6ff 	.word	0x000dd6ff
   d562c:	2003e3d0 	.word	0x2003e3d0
   d5630:	000dd718 	.word	0x000dd718
   d5634:	000dd72c 	.word	0x000dd72c

000d5638 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d5638:	b510      	push	{r4, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d563a:	4c20      	ldr	r4, [pc, #128]	; (d56bc <_Z11loadEmonlibv+0x84>)
   d563c:	6820      	ldr	r0, [r4, #0]
   d563e:	f005 fb7b 	bl	dad38 <__aeabi_f2d>
   d5642:	4b1f      	ldr	r3, [pc, #124]	; (d56c0 <_Z11loadEmonlibv+0x88>)
   d5644:	ec41 0b10 	vmov	d0, r0, r1
   d5648:	7819      	ldrb	r1, [r3, #0]
   d564a:	481e      	ldr	r0, [pc, #120]	; (d56c4 <_Z11loadEmonlibv+0x8c>)
   d564c:	f001 fe12 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d5650:	6860      	ldr	r0, [r4, #4]
   d5652:	f005 fb71 	bl	dad38 <__aeabi_f2d>
   d5656:	4b1c      	ldr	r3, [pc, #112]	; (d56c8 <_Z11loadEmonlibv+0x90>)
   d5658:	ec41 0b10 	vmov	d0, r0, r1
   d565c:	7819      	ldrb	r1, [r3, #0]
   d565e:	481b      	ldr	r0, [pc, #108]	; (d56cc <_Z11loadEmonlibv+0x94>)
   d5660:	f001 fe08 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d5664:	68a0      	ldr	r0, [r4, #8]
   d5666:	f005 fb67 	bl	dad38 <__aeabi_f2d>
   d566a:	4b19      	ldr	r3, [pc, #100]	; (d56d0 <_Z11loadEmonlibv+0x98>)
   d566c:	ec41 0b10 	vmov	d0, r0, r1
   d5670:	7819      	ldrb	r1, [r3, #0]
   d5672:	4818      	ldr	r0, [pc, #96]	; (d56d4 <_Z11loadEmonlibv+0x9c>)
   d5674:	f001 fdfe 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5678:	68e0      	ldr	r0, [r4, #12]
   d567a:	f005 fb5d 	bl	dad38 <__aeabi_f2d>
   d567e:	4b16      	ldr	r3, [pc, #88]	; (d56d8 <_Z11loadEmonlibv+0xa0>)
   d5680:	ec41 0b10 	vmov	d0, r0, r1
   d5684:	7819      	ldrb	r1, [r3, #0]
   d5686:	4815      	ldr	r0, [pc, #84]	; (d56dc <_Z11loadEmonlibv+0xa4>)
   d5688:	f001 fdf4 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d568c:	6920      	ldr	r0, [r4, #16]
   d568e:	f005 fb53 	bl	dad38 <__aeabi_f2d>
   d5692:	4b13      	ldr	r3, [pc, #76]	; (d56e0 <_Z11loadEmonlibv+0xa8>)
   d5694:	ec41 0b10 	vmov	d0, r0, r1
   d5698:	7819      	ldrb	r1, [r3, #0]
   d569a:	4812      	ldr	r0, [pc, #72]	; (d56e4 <_Z11loadEmonlibv+0xac>)
   d569c:	f001 fdea 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d56a0:	6960      	ldr	r0, [r4, #20]
   d56a2:	f005 fb49 	bl	dad38 <__aeabi_f2d>
   d56a6:	4b10      	ldr	r3, [pc, #64]	; (d56e8 <_Z11loadEmonlibv+0xb0>)
   d56a8:	ec41 0b10 	vmov	d0, r0, r1
   d56ac:	7819      	ldrb	r1, [r3, #0]
   d56ae:	480f      	ldr	r0, [pc, #60]	; (d56ec <_Z11loadEmonlibv+0xb4>)
   d56b0:	f001 fde0 	bl	d7274 <_ZN13EnergyMonitor7currentEjd>
  constantsStatusWriteNeeded = true;
   d56b4:	4b0e      	ldr	r3, [pc, #56]	; (d56f0 <_Z11loadEmonlibv+0xb8>)
   d56b6:	2201      	movs	r2, #1
   d56b8:	701a      	strb	r2, [r3, #0]
}
   d56ba:	bd10      	pop	{r4, pc}
   d56bc:	2003e428 	.word	0x2003e428
   d56c0:	2003dc20 	.word	0x2003dc20
   d56c4:	2003df50 	.word	0x2003df50
   d56c8:	2003dc21 	.word	0x2003dc21
   d56cc:	2003e008 	.word	0x2003e008
   d56d0:	2003dc22 	.word	0x2003dc22
   d56d4:	2003e0c0 	.word	0x2003e0c0
   d56d8:	2003dc23 	.word	0x2003dc23
   d56dc:	2003e178 	.word	0x2003e178
   d56e0:	2003dc24 	.word	0x2003dc24
   d56e4:	2003e230 	.word	0x2003e230
   d56e8:	2003dc25 	.word	0x2003dc25
   d56ec:	2003e2e8 	.word	0x2003e2e8
   d56f0:	2003df4e 	.word	0x2003df4e

000d56f4 <_Z20updateConstantValuesv>:
{   
   d56f4:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d56f6:	4c22      	ldr	r4, [pc, #136]	; (d5780 <_Z20updateConstantValuesv+0x8c>)
   d56f8:	6820      	ldr	r0, [r4, #0]
   d56fa:	f005 fb1d 	bl	dad38 <__aeabi_f2d>
   d56fe:	4a21      	ldr	r2, [pc, #132]	; (d5784 <_Z20updateConstantValuesv+0x90>)
   d5700:	e9cd 0100 	strd	r0, r1, [sp]
   d5704:	2120      	movs	r1, #32
   d5706:	4820      	ldr	r0, [pc, #128]	; (d5788 <_Z20updateConstantValuesv+0x94>)
   d5708:	f003 f994 	bl	d8a34 <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d570c:	6860      	ldr	r0, [r4, #4]
   d570e:	f005 fb13 	bl	dad38 <__aeabi_f2d>
   d5712:	4a1e      	ldr	r2, [pc, #120]	; (d578c <_Z20updateConstantValuesv+0x98>)
   d5714:	e9cd 0100 	strd	r0, r1, [sp]
   d5718:	2120      	movs	r1, #32
   d571a:	481d      	ldr	r0, [pc, #116]	; (d5790 <_Z20updateConstantValuesv+0x9c>)
   d571c:	f003 f98a 	bl	d8a34 <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d5720:	68a0      	ldr	r0, [r4, #8]
   d5722:	f005 fb09 	bl	dad38 <__aeabi_f2d>
   d5726:	4a1b      	ldr	r2, [pc, #108]	; (d5794 <_Z20updateConstantValuesv+0xa0>)
   d5728:	e9cd 0100 	strd	r0, r1, [sp]
   d572c:	2120      	movs	r1, #32
   d572e:	481a      	ldr	r0, [pc, #104]	; (d5798 <_Z20updateConstantValuesv+0xa4>)
   d5730:	f003 f980 	bl	d8a34 <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d5734:	68e0      	ldr	r0, [r4, #12]
   d5736:	f005 faff 	bl	dad38 <__aeabi_f2d>
   d573a:	4a18      	ldr	r2, [pc, #96]	; (d579c <_Z20updateConstantValuesv+0xa8>)
   d573c:	e9cd 0100 	strd	r0, r1, [sp]
   d5740:	2120      	movs	r1, #32
   d5742:	4817      	ldr	r0, [pc, #92]	; (d57a0 <_Z20updateConstantValuesv+0xac>)
   d5744:	f003 f976 	bl	d8a34 <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d5748:	6920      	ldr	r0, [r4, #16]
   d574a:	f005 faf5 	bl	dad38 <__aeabi_f2d>
   d574e:	4a15      	ldr	r2, [pc, #84]	; (d57a4 <_Z20updateConstantValuesv+0xb0>)
   d5750:	e9cd 0100 	strd	r0, r1, [sp]
   d5754:	2120      	movs	r1, #32
   d5756:	4814      	ldr	r0, [pc, #80]	; (d57a8 <_Z20updateConstantValuesv+0xb4>)
   d5758:	f003 f96c 	bl	d8a34 <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d575c:	6960      	ldr	r0, [r4, #20]
   d575e:	f005 faeb 	bl	dad38 <__aeabi_f2d>
   d5762:	4a12      	ldr	r2, [pc, #72]	; (d57ac <_Z20updateConstantValuesv+0xb8>)
   d5764:	e9cd 0100 	strd	r0, r1, [sp]
   d5768:	2120      	movs	r1, #32
   d576a:	4811      	ldr	r0, [pc, #68]	; (d57b0 <_Z20updateConstantValuesv+0xbc>)
   d576c:	f003 f962 	bl	d8a34 <snprintf>
    loadEmonlib();
   d5770:	f7ff ff62 	bl	d5638 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d5774:	4b0f      	ldr	r3, [pc, #60]	; (d57b4 <_Z20updateConstantValuesv+0xc0>)
   d5776:	2201      	movs	r2, #1
   d5778:	701a      	strb	r2, [r3, #0]
} 
   d577a:	b002      	add	sp, #8
   d577c:	bd10      	pop	{r4, pc}
   d577e:	bf00      	nop
   d5780:	2003e428 	.word	0x2003e428
   d5784:	000dd732 	.word	0x000dd732
   d5788:	2003e535 	.word	0x2003e535
   d578c:	000dd740 	.word	0x000dd740
   d5790:	2003e595 	.word	0x2003e595
   d5794:	000dd74d 	.word	0x000dd74d
   d5798:	2003e575 	.word	0x2003e575
   d579c:	000dd75d 	.word	0x000dd75d
   d57a0:	2003e515 	.word	0x2003e515
   d57a4:	000dd77a 	.word	0x000dd77a
   d57a8:	2003e4f5 	.word	0x2003e4f5
   d57ac:	000dd797 	.word	0x000dd797
   d57b0:	2003e555 	.word	0x2003e555
   d57b4:	2003df4e 	.word	0x2003df4e

000d57b8 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d57b8:	b500      	push	{lr}
   d57ba:	b089      	sub	sp, #36	; 0x24
   d57bc:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d57be:	f004 fb31 	bl	d9e24 <_ZNK6String7toFloatEv>
   d57c2:	4b0d      	ldr	r3, [pc, #52]	; (d57f8 <_Z14setConstantOne6String+0x40>)
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d57c4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d57c6:	ed83 0a00 	vstr	s0, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d57ca:	a804      	add	r0, sp, #16
   d57cc:	f004 fad0 	bl	d9d70 <_ZN6StringC1ERKS_>
   d57d0:	2300      	movs	r3, #0
   d57d2:	f88d 3000 	strb.w	r3, [sp]
   d57d6:	4b09      	ldr	r3, [pc, #36]	; (d57fc <_Z14setConstantOne6String+0x44>)
   d57d8:	9a04      	ldr	r2, [sp, #16]
   d57da:	781b      	ldrb	r3, [r3, #0]
   d57dc:	4908      	ldr	r1, [pc, #32]	; (d5800 <_Z14setConstantOne6String+0x48>)
   d57de:	4809      	ldr	r0, [pc, #36]	; (d5804 <_Z14setConstantOne6String+0x4c>)
   d57e0:	f7fe fded 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d57e4:	a804      	add	r0, sp, #16
   d57e6:	f004 fa55 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d57ea:	f7ff ff83 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d57ee:	2001      	movs	r0, #1
   d57f0:	b009      	add	sp, #36	; 0x24
   d57f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d57f6:	bf00      	nop
   d57f8:	2003e428 	.word	0x2003e428
   d57fc:	2003df2d 	.word	0x2003df2d
   d5800:	000dd7b3 	.word	0x000dd7b3
   d5804:	2003e3d0 	.word	0x2003e3d0

000d5808 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d5808:	b500      	push	{lr}
   d580a:	b089      	sub	sp, #36	; 0x24
   d580c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d580e:	f004 fb09 	bl	d9e24 <_ZNK6String7toFloatEv>
   d5812:	4b0d      	ldr	r3, [pc, #52]	; (d5848 <_Z14setConstantTwo6String+0x40>)
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d5814:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d5816:	ed83 0a01 	vstr	s0, [r3, #4]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d581a:	a804      	add	r0, sp, #16
   d581c:	f004 faa8 	bl	d9d70 <_ZN6StringC1ERKS_>
   d5820:	2300      	movs	r3, #0
   d5822:	f88d 3000 	strb.w	r3, [sp]
   d5826:	4b09      	ldr	r3, [pc, #36]	; (d584c <_Z14setConstantTwo6String+0x44>)
   d5828:	9a04      	ldr	r2, [sp, #16]
   d582a:	781b      	ldrb	r3, [r3, #0]
   d582c:	4908      	ldr	r1, [pc, #32]	; (d5850 <_Z14setConstantTwo6String+0x48>)
   d582e:	4809      	ldr	r0, [pc, #36]	; (d5854 <_Z14setConstantTwo6String+0x4c>)
   d5830:	f7fe fdc5 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5834:	a804      	add	r0, sp, #16
   d5836:	f004 fa2d 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d583a:	f7ff ff5b 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d583e:	2001      	movs	r0, #1
   d5840:	b009      	add	sp, #36	; 0x24
   d5842:	f85d fb04 	ldr.w	pc, [sp], #4
   d5846:	bf00      	nop
   d5848:	2003e428 	.word	0x2003e428
   d584c:	2003df2d 	.word	0x2003df2d
   d5850:	000dd7ce 	.word	0x000dd7ce
   d5854:	2003e3d0 	.word	0x2003e3d0

000d5858 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5858:	b500      	push	{lr}
   d585a:	b089      	sub	sp, #36	; 0x24
   d585c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d585e:	f004 fae1 	bl	d9e24 <_ZNK6String7toFloatEv>
   d5862:	4b0d      	ldr	r3, [pc, #52]	; (d5898 <_Z16setConstantThree6String+0x40>)
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5864:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5866:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d586a:	a804      	add	r0, sp, #16
   d586c:	f004 fa80 	bl	d9d70 <_ZN6StringC1ERKS_>
   d5870:	2300      	movs	r3, #0
   d5872:	f88d 3000 	strb.w	r3, [sp]
   d5876:	4b09      	ldr	r3, [pc, #36]	; (d589c <_Z16setConstantThree6String+0x44>)
   d5878:	9a04      	ldr	r2, [sp, #16]
   d587a:	781b      	ldrb	r3, [r3, #0]
   d587c:	4908      	ldr	r1, [pc, #32]	; (d58a0 <_Z16setConstantThree6String+0x48>)
   d587e:	4809      	ldr	r0, [pc, #36]	; (d58a4 <_Z16setConstantThree6String+0x4c>)
   d5880:	f7fe fd9d 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5884:	a804      	add	r0, sp, #16
   d5886:	f004 fa05 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d588a:	f7ff ff33 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d588e:	2001      	movs	r0, #1
   d5890:	b009      	add	sp, #36	; 0x24
   d5892:	f85d fb04 	ldr.w	pc, [sp], #4
   d5896:	bf00      	nop
   d5898:	2003e428 	.word	0x2003e428
   d589c:	2003df2d 	.word	0x2003df2d
   d58a0:	000dd7e9 	.word	0x000dd7e9
   d58a4:	2003e3d0 	.word	0x2003e3d0

000d58a8 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d58a8:	b500      	push	{lr}
   d58aa:	b089      	sub	sp, #36	; 0x24
   d58ac:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d58ae:	f004 fab9 	bl	d9e24 <_ZNK6String7toFloatEv>
   d58b2:	4b0d      	ldr	r3, [pc, #52]	; (d58e8 <_Z15setConstantFour6String+0x40>)
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d58b4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d58b6:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d58ba:	a804      	add	r0, sp, #16
   d58bc:	f004 fa58 	bl	d9d70 <_ZN6StringC1ERKS_>
   d58c0:	2300      	movs	r3, #0
   d58c2:	f88d 3000 	strb.w	r3, [sp]
   d58c6:	4b09      	ldr	r3, [pc, #36]	; (d58ec <_Z15setConstantFour6String+0x44>)
   d58c8:	9a04      	ldr	r2, [sp, #16]
   d58ca:	781b      	ldrb	r3, [r3, #0]
   d58cc:	4908      	ldr	r1, [pc, #32]	; (d58f0 <_Z15setConstantFour6String+0x48>)
   d58ce:	4809      	ldr	r0, [pc, #36]	; (d58f4 <_Z15setConstantFour6String+0x4c>)
   d58d0:	f7fe fd75 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d58d4:	a804      	add	r0, sp, #16
   d58d6:	f004 f9dd 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d58da:	f7ff ff0b 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d58de:	2001      	movs	r0, #1
   d58e0:	b009      	add	sp, #36	; 0x24
   d58e2:	f85d fb04 	ldr.w	pc, [sp], #4
   d58e6:	bf00      	nop
   d58e8:	2003e428 	.word	0x2003e428
   d58ec:	2003df2d 	.word	0x2003df2d
   d58f0:	000dd806 	.word	0x000dd806
   d58f4:	2003e3d0 	.word	0x2003e3d0

000d58f8 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d58f8:	b500      	push	{lr}
   d58fa:	b089      	sub	sp, #36	; 0x24
   d58fc:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d58fe:	f004 fa91 	bl	d9e24 <_ZNK6String7toFloatEv>
   d5902:	4b0d      	ldr	r3, [pc, #52]	; (d5938 <_Z15setConstantFive6String+0x40>)
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d5904:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d5906:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d590a:	a804      	add	r0, sp, #16
   d590c:	f004 fa30 	bl	d9d70 <_ZN6StringC1ERKS_>
   d5910:	2300      	movs	r3, #0
   d5912:	f88d 3000 	strb.w	r3, [sp]
   d5916:	4b09      	ldr	r3, [pc, #36]	; (d593c <_Z15setConstantFive6String+0x44>)
   d5918:	9a04      	ldr	r2, [sp, #16]
   d591a:	781b      	ldrb	r3, [r3, #0]
   d591c:	4908      	ldr	r1, [pc, #32]	; (d5940 <_Z15setConstantFive6String+0x48>)
   d591e:	4809      	ldr	r0, [pc, #36]	; (d5944 <_Z15setConstantFive6String+0x4c>)
   d5920:	f7fe fd4d 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5924:	a804      	add	r0, sp, #16
   d5926:	f004 f9b5 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d592a:	f7ff fee3 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d592e:	2001      	movs	r0, #1
   d5930:	b009      	add	sp, #36	; 0x24
   d5932:	f85d fb04 	ldr.w	pc, [sp], #4
   d5936:	bf00      	nop
   d5938:	2003e428 	.word	0x2003e428
   d593c:	2003df2d 	.word	0x2003df2d
   d5940:	000dd822 	.word	0x000dd822
   d5944:	2003e3d0 	.word	0x2003e3d0

000d5948 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5948:	b500      	push	{lr}
   d594a:	b089      	sub	sp, #36	; 0x24
   d594c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d594e:	f004 fa69 	bl	d9e24 <_ZNK6String7toFloatEv>
   d5952:	4b0d      	ldr	r3, [pc, #52]	; (d5988 <_Z14setConstantSix6String+0x40>)
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5954:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5956:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d595a:	a804      	add	r0, sp, #16
   d595c:	f004 fa08 	bl	d9d70 <_ZN6StringC1ERKS_>
   d5960:	2300      	movs	r3, #0
   d5962:	f88d 3000 	strb.w	r3, [sp]
   d5966:	4b09      	ldr	r3, [pc, #36]	; (d598c <_Z14setConstantSix6String+0x44>)
   d5968:	9a04      	ldr	r2, [sp, #16]
   d596a:	781b      	ldrb	r3, [r3, #0]
   d596c:	4908      	ldr	r1, [pc, #32]	; (d5990 <_Z14setConstantSix6String+0x48>)
   d596e:	4809      	ldr	r0, [pc, #36]	; (d5994 <_Z14setConstantSix6String+0x4c>)
   d5970:	f7fe fd25 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5974:	a804      	add	r0, sp, #16
   d5976:	f004 f98d 	bl	d9c94 <_ZN6StringD1Ev>
  updateConstantValues();
   d597a:	f7ff febb 	bl	d56f4 <_Z20updateConstantValuesv>
}
   d597e:	2001      	movs	r0, #1
   d5980:	b009      	add	sp, #36	; 0x24
   d5982:	f85d fb04 	ldr.w	pc, [sp], #4
   d5986:	bf00      	nop
   d5988:	2003e428 	.word	0x2003e428
   d598c:	2003df2d 	.word	0x2003df2d
   d5990:	000dd83e 	.word	0x000dd83e
   d5994:	2003e3d0 	.word	0x2003e3d0

000d5998 <_Z17sendConfigurationv>:
  }
  else return 0;
}

// This function is used for onsite checking and debugging. It sends device configuration as json data. 
void sendConfiguration(){
   d5998:	b5f0      	push	{r4, r5, r6, r7, lr}
   d599a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  char data[512];
  memset(data, 0, sizeof(data));
   d599e:	f44f 7400 	mov.w	r4, #512	; 0x200
   d59a2:	ae0c      	add	r6, sp, #48	; 0x30
   d59a4:	4622      	mov	r2, r4
   d59a6:	2100      	movs	r1, #0
   d59a8:	4630      	mov	r0, r6
   d59aa:	f005 fdd1 	bl	db550 <memset>
        state_(BEGIN) {
   d59ae:	2300      	movs	r3, #0
        n_(0) {
   d59b0:	4aa8      	ldr	r2, [pc, #672]	; (d5c54 <_Z17sendConfigurationv+0x2bc>)
        state_(BEGIN) {
   d59b2:	f88d 3020 	strb.w	r3, [sp, #32]
  JSONBufferWriter writer(data, sizeof(data));
  writer.beginObject();
   d59b6:	a807      	add	r0, sp, #28
        n_(0) {
   d59b8:	9207      	str	r2, [sp, #28]
   d59ba:	930b      	str	r3, [sp, #44]	; 0x2c
   d59bc:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
   d59c0:	f003 ff15 	bl	d97ee <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("Name").value(DeviceNameHelperRetained::instance().getName());
   d59c4:	49a4      	ldr	r1, [pc, #656]	; (d5c58 <_Z17sendConfigurationv+0x2c0>)
   d59c6:	a807      	add	r0, sp, #28
   d59c8:	f7fe fcc6 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d59cc:	4604      	mov	r4, r0
   d59ce:	f001 fa63 	bl	d6e98 <_ZN24DeviceNameHelperRetained8instanceEv>
   d59d2:	6841      	ldr	r1, [r0, #4]
    /**
     * @brief Returns the device name as a c-string
     * 
     * May return an empty string if the name has not been retrieved yet
     */
    const char *getName() const { return data ? data->name : ""; };
   d59d4:	2900      	cmp	r1, #0
   d59d6:	f000 8097 	beq.w	d5b08 <_Z17sendConfigurationv+0x170>
   d59da:	310c      	adds	r1, #12
   d59dc:	4620      	mov	r0, r4
   d59de:	f7fe fcc9 	bl	d4374 <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Release").value(releaseNumber);
   d59e2:	499e      	ldr	r1, [pc, #632]	; (d5c5c <_Z17sendConfigurationv+0x2c4>)
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d59e4:	4c9e      	ldr	r4, [pc, #632]	; (d5c60 <_Z17sendConfigurationv+0x2c8>)
    writer.name("Release").value(releaseNumber);
   d59e6:	a807      	add	r0, sp, #28
   d59e8:	f7fe fcb6 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d59ec:	499d      	ldr	r1, [pc, #628]	; (d5c64 <_Z17sendConfigurationv+0x2cc>)
   d59ee:	f7fe fcc1 	bl	d4374 <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d59f2:	499d      	ldr	r1, [pc, #628]	; (d5c68 <_Z17sendConfigurationv+0x2d0>)
   d59f4:	a807      	add	r0, sp, #28
   d59f6:	f7fe fcaf 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d59fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d59fc:	4605      	mov	r5, r0
   d59fe:	220a      	movs	r2, #10
   d5a00:	a803      	add	r0, sp, #12
   d5a02:	f004 f9d2 	bl	d9daa <_ZN6StringC1Eih>
    return value(val.c_str(), val.length());
   d5a06:	9a05      	ldr	r2, [sp, #20]
   d5a08:	9903      	ldr	r1, [sp, #12]
   d5a0a:	4628      	mov	r0, r5
   d5a0c:	f003 ffa2 	bl	d9954 <_ZN5spark10JSONWriter5valueEPKcj>
   d5a10:	a803      	add	r0, sp, #12
   d5a12:	f004 f93f 	bl	d9c94 <_ZN6StringD1Ev>
    writer.name("Sensors");
   d5a16:	4995      	ldr	r1, [pc, #596]	; (d5c6c <_Z17sendConfigurationv+0x2d4>)
   d5a18:	a807      	add	r0, sp, #28
   d5a1a:	f7fe fc9d 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
    writer.beginObject();
   d5a1e:	a807      	add	r0, sp, #28
   d5a20:	f003 fee5 	bl	d97ee <_ZN5spark10JSONWriter11beginObjectEv>
      if ((sysStatus.operatingMode) == 1){
   d5a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5a26:	2b01      	cmp	r3, #1
   d5a28:	d170      	bne.n	d5b0c <_Z17sendConfigurationv+0x174>
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d5a2a:	4991      	ldr	r1, [pc, #580]	; (d5c70 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5a2c:	4d91      	ldr	r5, [pc, #580]	; (d5c74 <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d5a2e:	a807      	add	r0, sp, #28
   d5a30:	f7fe fc92 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a34:	7f21      	ldrb	r1, [r4, #28]
   d5a36:	f003 fee7 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5a3a:	498f      	ldr	r1, [pc, #572]	; (d5c78 <_Z17sendConfigurationv+0x2e0>)
   d5a3c:	a807      	add	r0, sp, #28
   d5a3e:	f7fe fc8b 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a42:	4607      	mov	r7, r0
   d5a44:	6828      	ldr	r0, [r5, #0]
   d5a46:	f005 f977 	bl	dad38 <__aeabi_f2d>
   d5a4a:	ec41 0b10 	vmov	d0, r0, r1
   d5a4e:	4638      	mov	r0, r7
   d5a50:	f003 ff04 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(sysStatus.sensorTwoConnected);
   d5a54:	4989      	ldr	r1, [pc, #548]	; (d5c7c <_Z17sendConfigurationv+0x2e4>)
   d5a56:	a807      	add	r0, sp, #28
   d5a58:	f7fe fc7e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a5c:	7f61      	ldrb	r1, [r4, #29]
   d5a5e:	f003 fed3 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5a62:	4987      	ldr	r1, [pc, #540]	; (d5c80 <_Z17sendConfigurationv+0x2e8>)
   d5a64:	a807      	add	r0, sp, #28
   d5a66:	f7fe fc77 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a6a:	4607      	mov	r7, r0
   d5a6c:	6868      	ldr	r0, [r5, #4]
   d5a6e:	f005 f963 	bl	dad38 <__aeabi_f2d>
   d5a72:	ec41 0b10 	vmov	d0, r0, r1
   d5a76:	4638      	mov	r0, r7
   d5a78:	f003 fef0 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(sysStatus.sensorThreeConnected);
   d5a7c:	4981      	ldr	r1, [pc, #516]	; (d5c84 <_Z17sendConfigurationv+0x2ec>)
   d5a7e:	a807      	add	r0, sp, #28
   d5a80:	f7fe fc6a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a84:	7fa1      	ldrb	r1, [r4, #30]
   d5a86:	f003 febf 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConnected").value(true);
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
        writer.name("SensorTwoConnected").value(true);
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
        writer.name("SensorThreeConnected").value(true);
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d5a8a:	497f      	ldr	r1, [pc, #508]	; (d5c88 <_Z17sendConfigurationv+0x2f0>)
   d5a8c:	a807      	add	r0, sp, #28
   d5a8e:	f7fe fc63 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5a92:	4607      	mov	r7, r0
   d5a94:	68a8      	ldr	r0, [r5, #8]
   d5a96:	f005 f94f 	bl	dad38 <__aeabi_f2d>
   d5a9a:	ec41 0b10 	vmov	d0, r0, r1
   d5a9e:	4638      	mov	r0, r7
   d5aa0:	f003 fedc 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(sysStatus.sensorFourConnected);
   d5aa4:	4979      	ldr	r1, [pc, #484]	; (d5c8c <_Z17sendConfigurationv+0x2f4>)
   d5aa6:	a807      	add	r0, sp, #28
   d5aa8:	f7fe fc56 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5aac:	7fe1      	ldrb	r1, [r4, #31]
   d5aae:	f003 feab 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d5ab2:	4977      	ldr	r1, [pc, #476]	; (d5c90 <_Z17sendConfigurationv+0x2f8>)
   d5ab4:	a807      	add	r0, sp, #28
   d5ab6:	f7fe fc4f 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5aba:	4607      	mov	r7, r0
   d5abc:	68e8      	ldr	r0, [r5, #12]
   d5abe:	f005 f93b 	bl	dad38 <__aeabi_f2d>
   d5ac2:	ec41 0b10 	vmov	d0, r0, r1
   d5ac6:	4638      	mov	r0, r7
   d5ac8:	f003 fec8 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(sysStatus.sensorFiveConnected);
   d5acc:	4971      	ldr	r1, [pc, #452]	; (d5c94 <_Z17sendConfigurationv+0x2fc>)
   d5ace:	a807      	add	r0, sp, #28
   d5ad0:	f7fe fc42 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5ad4:	f894 1020 	ldrb.w	r1, [r4, #32]
   d5ad8:	f003 fe96 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d5adc:	496e      	ldr	r1, [pc, #440]	; (d5c98 <_Z17sendConfigurationv+0x300>)
   d5ade:	a807      	add	r0, sp, #28
   d5ae0:	f7fe fc3a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5ae4:	4607      	mov	r7, r0
   d5ae6:	6928      	ldr	r0, [r5, #16]
   d5ae8:	f005 f926 	bl	dad38 <__aeabi_f2d>
   d5aec:	ec41 0b10 	vmov	d0, r0, r1
   d5af0:	4638      	mov	r0, r7
   d5af2:	f003 feb3 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(sysStatus.sensorSixConnected);
   d5af6:	4969      	ldr	r1, [pc, #420]	; (d5c9c <_Z17sendConfigurationv+0x304>)
   d5af8:	a807      	add	r0, sp, #28
   d5afa:	f7fe fc2d 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5afe:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d5b02:	f003 fe81 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
   d5b06:	e070      	b.n	d5bea <_Z17sendConfigurationv+0x252>
   d5b08:	4965      	ldr	r1, [pc, #404]	; (d5ca0 <_Z17sendConfigurationv+0x308>)
   d5b0a:	e767      	b.n	d59dc <_Z17sendConfigurationv+0x44>
      else if ((sysStatus.operatingMode) == 2){
   d5b0c:	2b02      	cmp	r3, #2
   d5b0e:	f040 80d7 	bne.w	d5cc0 <_Z17sendConfigurationv+0x328>
        writer.name("SensorOneConnected").value(true);
   d5b12:	4957      	ldr	r1, [pc, #348]	; (d5c70 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5b14:	4d57      	ldr	r5, [pc, #348]	; (d5c74 <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(true);
   d5b16:	a807      	add	r0, sp, #28
   d5b18:	f7fe fc1e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b1c:	2101      	movs	r1, #1
   d5b1e:	f003 fe8b 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5b22:	4955      	ldr	r1, [pc, #340]	; (d5c78 <_Z17sendConfigurationv+0x2e0>)
   d5b24:	a807      	add	r0, sp, #28
   d5b26:	f7fe fc17 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b2a:	4607      	mov	r7, r0
   d5b2c:	6828      	ldr	r0, [r5, #0]
   d5b2e:	f005 f903 	bl	dad38 <__aeabi_f2d>
   d5b32:	ec41 0b10 	vmov	d0, r0, r1
   d5b36:	4638      	mov	r0, r7
   d5b38:	f003 fe90 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d5b3c:	494f      	ldr	r1, [pc, #316]	; (d5c7c <_Z17sendConfigurationv+0x2e4>)
   d5b3e:	a807      	add	r0, sp, #28
   d5b40:	f7fe fc0a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b44:	2101      	movs	r1, #1
   d5b46:	f003 fe77 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5b4a:	494d      	ldr	r1, [pc, #308]	; (d5c80 <_Z17sendConfigurationv+0x2e8>)
   d5b4c:	a807      	add	r0, sp, #28
   d5b4e:	f7fe fc03 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b52:	4607      	mov	r7, r0
   d5b54:	6868      	ldr	r0, [r5, #4]
   d5b56:	f005 f8ef 	bl	dad38 <__aeabi_f2d>
   d5b5a:	ec41 0b10 	vmov	d0, r0, r1
   d5b5e:	4638      	mov	r0, r7
   d5b60:	f003 fe7c 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d5b64:	4947      	ldr	r1, [pc, #284]	; (d5c84 <_Z17sendConfigurationv+0x2ec>)
   d5b66:	a807      	add	r0, sp, #28
   d5b68:	f7fe fbf6 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b6c:	2101      	movs	r1, #1
   d5b6e:	f003 fe63 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d5b72:	4945      	ldr	r1, [pc, #276]	; (d5c88 <_Z17sendConfigurationv+0x2f0>)
   d5b74:	a807      	add	r0, sp, #28
   d5b76:	f7fe fbef 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b7a:	4607      	mov	r7, r0
   d5b7c:	68a8      	ldr	r0, [r5, #8]
   d5b7e:	f005 f8db 	bl	dad38 <__aeabi_f2d>
   d5b82:	ec41 0b10 	vmov	d0, r0, r1
   d5b86:	4638      	mov	r0, r7
   d5b88:	f003 fe68 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(true);
   d5b8c:	493f      	ldr	r1, [pc, #252]	; (d5c8c <_Z17sendConfigurationv+0x2f4>)
   d5b8e:	a807      	add	r0, sp, #28
   d5b90:	f7fe fbe2 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5b94:	2101      	movs	r1, #1
   d5b96:	f003 fe4f 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d5b9a:	493d      	ldr	r1, [pc, #244]	; (d5c90 <_Z17sendConfigurationv+0x2f8>)
   d5b9c:	a807      	add	r0, sp, #28
   d5b9e:	f7fe fbdb 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5ba2:	4607      	mov	r7, r0
   d5ba4:	68e8      	ldr	r0, [r5, #12]
   d5ba6:	f005 f8c7 	bl	dad38 <__aeabi_f2d>
   d5baa:	ec41 0b10 	vmov	d0, r0, r1
   d5bae:	4638      	mov	r0, r7
   d5bb0:	f003 fe54 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(true);
   d5bb4:	4937      	ldr	r1, [pc, #220]	; (d5c94 <_Z17sendConfigurationv+0x2fc>)
   d5bb6:	a807      	add	r0, sp, #28
   d5bb8:	f7fe fbce 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bbc:	2101      	movs	r1, #1
   d5bbe:	f003 fe3b 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d5bc2:	4935      	ldr	r1, [pc, #212]	; (d5c98 <_Z17sendConfigurationv+0x300>)
   d5bc4:	a807      	add	r0, sp, #28
   d5bc6:	f7fe fbc7 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bca:	4607      	mov	r7, r0
   d5bcc:	6928      	ldr	r0, [r5, #16]
   d5bce:	f005 f8b3 	bl	dad38 <__aeabi_f2d>
   d5bd2:	ec41 0b10 	vmov	d0, r0, r1
   d5bd6:	4638      	mov	r0, r7
   d5bd8:	f003 fe40 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(true);
   d5bdc:	492f      	ldr	r1, [pc, #188]	; (d5c9c <_Z17sendConfigurationv+0x304>)
   d5bde:	a807      	add	r0, sp, #28
   d5be0:	f7fe fbba 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5be4:	2101      	movs	r1, #1
   d5be6:	f003 fe27 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorSixConstant").value(sensorConstants.sensorSixConstant);
   d5bea:	492e      	ldr	r1, [pc, #184]	; (d5ca4 <_Z17sendConfigurationv+0x30c>)
   d5bec:	a807      	add	r0, sp, #28
   d5bee:	f7fe fbb3 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5bf2:	4607      	mov	r7, r0
   d5bf4:	6968      	ldr	r0, [r5, #20]
   d5bf6:	f005 f89f 	bl	dad38 <__aeabi_f2d>
   d5bfa:	ec41 0b10 	vmov	d0, r0, r1
   d5bfe:	4638      	mov	r0, r7
   d5c00:	f003 fe2c 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
      }
    writer.endObject();
   d5c04:	a807      	add	r0, sp, #28
   d5c06:	f003 fddc 	bl	d97c2 <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("Third Party Sim").value(sysStatus.thirdPartySim);
   d5c0a:	4927      	ldr	r1, [pc, #156]	; (d5ca8 <_Z17sendConfigurationv+0x310>)
   d5c0c:	a807      	add	r0, sp, #28
   d5c0e:	f7fe fba3 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c12:	7861      	ldrb	r1, [r4, #1]
   d5c14:	f003 fdf8 	bl	d9808 <_ZN5spark10JSONWriter5valueEb>
    writer.name("KeepAlive").value(sysStatus.keepAlive);
   d5c18:	4924      	ldr	r1, [pc, #144]	; (d5cac <_Z17sendConfigurationv+0x314>)
   d5c1a:	a807      	add	r0, sp, #28
   d5c1c:	f7fe fb9c 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c20:	6861      	ldr	r1, [r4, #4]
   d5c22:	f003 fe09 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
    writer.name("Reporting Duration").value(sysStatus.reportingBoundary);
   d5c26:	4922      	ldr	r1, [pc, #136]	; (d5cb0 <_Z17sendConfigurationv+0x318>)
   d5c28:	a807      	add	r0, sp, #28
   d5c2a:	f7fe fb95 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5c2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d5c30:	f003 fe02 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
  writer.endObject();
   d5c34:	a807      	add	r0, sp, #28
   d5c36:	f003 fdc4 	bl	d97c2 <_ZN5spark10JSONWriter9endObjectEv>
   d5c3a:	2300      	movs	r3, #0

  publishQueue.publish("System Configuration",data,PRIVATE);
   d5c3c:	f88d 3000 	strb.w	r3, [sp]
   d5c40:	4b1c      	ldr	r3, [pc, #112]	; (d5cb4 <_Z17sendConfigurationv+0x31c>)
   d5c42:	491d      	ldr	r1, [pc, #116]	; (d5cb8 <_Z17sendConfigurationv+0x320>)
   d5c44:	781b      	ldrb	r3, [r3, #0]
   d5c46:	481d      	ldr	r0, [pc, #116]	; (d5cbc <_Z17sendConfigurationv+0x324>)
   d5c48:	4632      	mov	r2, r6
   d5c4a:	f7fe fbb8 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 
   d5c4e:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   d5c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c54:	000de100 	.word	0x000de100
   d5c58:	000dd859 	.word	0x000dd859
   d5c5c:	000dd85e 	.word	0x000dd85e
   d5c60:	2003e5b8 	.word	0x2003e5b8
   d5c64:	000ddc14 	.word	0x000ddc14
   d5c68:	000dd866 	.word	0x000dd866
   d5c6c:	000dd875 	.word	0x000dd875
   d5c70:	000dd87d 	.word	0x000dd87d
   d5c74:	2003e428 	.word	0x2003e428
   d5c78:	000dd890 	.word	0x000dd890
   d5c7c:	000dd8a2 	.word	0x000dd8a2
   d5c80:	000dd8b5 	.word	0x000dd8b5
   d5c84:	000dd8c7 	.word	0x000dd8c7
   d5c88:	000dd8dc 	.word	0x000dd8dc
   d5c8c:	000dd8f0 	.word	0x000dd8f0
   d5c90:	000dd904 	.word	0x000dd904
   d5c94:	000dd917 	.word	0x000dd917
   d5c98:	000dd92b 	.word	0x000dd92b
   d5c9c:	000dd93e 	.word	0x000dd93e
   d5ca0:	000de240 	.word	0x000de240
   d5ca4:	000dd951 	.word	0x000dd951
   d5ca8:	000dd963 	.word	0x000dd963
   d5cac:	000dd973 	.word	0x000dd973
   d5cb0:	000dd97d 	.word	0x000dd97d
   d5cb4:	2003df2d 	.word	0x2003df2d
   d5cb8:	000dd990 	.word	0x000dd990
   d5cbc:	2003e3d0 	.word	0x2003e3d0
      else if ((sysStatus.operatingMode) == 3){
   d5cc0:	2b03      	cmp	r3, #3
   d5cc2:	d19f      	bne.n	d5c04 <_Z17sendConfigurationv+0x26c>
        writer.name("SensorOneConnected").value(true);
   d5cc4:	4918      	ldr	r1, [pc, #96]	; (d5d28 <_Z17sendConfigurationv+0x390>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5cc6:	4d19      	ldr	r5, [pc, #100]	; (d5d2c <_Z17sendConfigurationv+0x394>)
        writer.name("SensorOneConnected").value(true);
   d5cc8:	a807      	add	r0, sp, #28
   d5cca:	f7fe fb45 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5cce:	2101      	movs	r1, #1
   d5cd0:	f003 fdb2 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5cd4:	4916      	ldr	r1, [pc, #88]	; (d5d30 <_Z17sendConfigurationv+0x398>)
   d5cd6:	a807      	add	r0, sp, #28
   d5cd8:	f7fe fb3e 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5cdc:	4607      	mov	r7, r0
   d5cde:	6828      	ldr	r0, [r5, #0]
   d5ce0:	f005 f82a 	bl	dad38 <__aeabi_f2d>
   d5ce4:	ec41 0b10 	vmov	d0, r0, r1
   d5ce8:	4638      	mov	r0, r7
   d5cea:	f003 fdb7 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d5cee:	4911      	ldr	r1, [pc, #68]	; (d5d34 <_Z17sendConfigurationv+0x39c>)
   d5cf0:	a807      	add	r0, sp, #28
   d5cf2:	f7fe fb31 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5cf6:	2101      	movs	r1, #1
   d5cf8:	f003 fd9e 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5cfc:	490e      	ldr	r1, [pc, #56]	; (d5d38 <_Z17sendConfigurationv+0x3a0>)
   d5cfe:	a807      	add	r0, sp, #28
   d5d00:	f7fe fb2a 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5d04:	4607      	mov	r7, r0
   d5d06:	6868      	ldr	r0, [r5, #4]
   d5d08:	f005 f816 	bl	dad38 <__aeabi_f2d>
   d5d0c:	ec41 0b10 	vmov	d0, r0, r1
   d5d10:	4638      	mov	r0, r7
   d5d12:	f003 fda3 	bl	d985c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d5d16:	4909      	ldr	r1, [pc, #36]	; (d5d3c <_Z17sendConfigurationv+0x3a4>)
   d5d18:	a807      	add	r0, sp, #28
   d5d1a:	f7fe fb1d 	bl	d4358 <_ZN5spark10JSONWriter4nameEPKc>
   d5d1e:	2101      	movs	r1, #1
   d5d20:	f003 fd8a 	bl	d9838 <_ZN5spark10JSONWriter5valueEi>
   d5d24:	e6b1      	b.n	d5a8a <_Z17sendConfigurationv+0xf2>
   d5d26:	bf00      	nop
   d5d28:	000dd87d 	.word	0x000dd87d
   d5d2c:	2003e428 	.word	0x2003e428
   d5d30:	000dd890 	.word	0x000dd890
   d5d34:	000dd8a2 	.word	0x000dd8a2
   d5d38:	000dd8b5 	.word	0x000dd8b5
   d5d3c:	000dd8c7 	.word	0x000dd8c7

000d5d40 <_Z25sendConfigurationFunction6String>:
{
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4904      	ldr	r1, [pc, #16]	; (d5d54 <_Z25sendConfigurationFunction6String+0x14>)
   d5d44:	f004 f844 	bl	d9dd0 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d5d48:	b110      	cbz	r0, d5d50 <_Z25sendConfigurationFunction6String+0x10>
    sendConfiguration();
   d5d4a:	f7ff fe25 	bl	d5998 <_Z17sendConfigurationv>
    return 1;
   d5d4e:	2001      	movs	r0, #1
}
   d5d50:	bd08      	pop	{r3, pc}
   d5d52:	bf00      	nop
   d5d54:	000dd3f3 	.word	0x000dd3f3

000d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5d58:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5d5a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5d5c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5d5e:	b17c      	cbz	r4, d5d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5d60:	6863      	ldr	r3, [r4, #4]
   d5d62:	3b01      	subs	r3, #1
   d5d64:	6063      	str	r3, [r4, #4]
   d5d66:	b95b      	cbnz	r3, d5d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5d68:	6823      	ldr	r3, [r4, #0]
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	689b      	ldr	r3, [r3, #8]
   d5d6e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d70:	68a3      	ldr	r3, [r4, #8]
   d5d72:	3b01      	subs	r3, #1
   d5d74:	60a3      	str	r3, [r4, #8]
   d5d76:	b91b      	cbnz	r3, d5d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5d78:	6823      	ldr	r3, [r4, #0]
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	68db      	ldr	r3, [r3, #12]
   d5d7e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5d80:	4628      	mov	r0, r5
   d5d82:	bd38      	pop	{r3, r4, r5, pc}

000d5d84 <_Z7logJsonv>:
void logJson() {
   d5d84:	b510      	push	{r4, lr}
   d5d86:	b086      	sub	sp, #24
    if (CloudConfig::instance().getJSONValueForKey("alias").isValid()) {}
   d5d88:	f000 fd28 	bl	d67dc <_ZN11CloudConfig8instanceEv>
   d5d8c:	6842      	ldr	r2, [r0, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d8e:	6853      	ldr	r3, [r2, #4]
   d5d90:	9303      	str	r3, [sp, #12]
      : _M_pi(__r._M_pi)
   d5d92:	6893      	ldr	r3, [r2, #8]
   d5d94:	9304      	str	r3, [sp, #16]
	if (_M_pi != 0)
   d5d96:	b113      	cbz	r3, d5d9e <_Z7logJsonv+0x1a>
    { ++_M_use_count; }
   d5d98:	6859      	ldr	r1, [r3, #4]
   d5d9a:	3101      	adds	r1, #1
   d5d9c:	6059      	str	r1, [r3, #4]
class JSONValue {
   d5d9e:	68d3      	ldr	r3, [r2, #12]
    JSONValue getJSONValueForKey(const char *key) { return getJSONValueForKey(jsonObj, key); }; 
   d5da0:	4a0b      	ldr	r2, [pc, #44]	; (d5dd0 <_Z7logJsonv+0x4c>)
   d5da2:	9305      	str	r3, [sp, #20]
   d5da4:	a903      	add	r1, sp, #12
   d5da6:	4668      	mov	r0, sp
   d5da8:	f000 fe37 	bl	d6a1a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dac:	a804      	add	r0, sp, #16
   d5dae:	f7ff ffd3 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return type() != JSON_TYPE_INVALID;
   d5db2:	4668      	mov	r0, sp
   d5db4:	f003 fbae 	bl	d9514 <_ZNK5spark9JSONValue4typeEv>
   d5db8:	4604      	mov	r4, r0
   d5dba:	a801      	add	r0, sp, #4
   d5dbc:	f7ff ffcc 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dc0:	b91c      	cbnz	r4, d5dca <_Z7logJsonv+0x46>
        Log.info("no config set");
   d5dc2:	4904      	ldr	r1, [pc, #16]	; (d5dd4 <_Z7logJsonv+0x50>)
   d5dc4:	4804      	ldr	r0, [pc, #16]	; (d5dd8 <_Z7logJsonv+0x54>)
   d5dc6:	f7fe fae3 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
}
   d5dca:	b006      	add	sp, #24
   d5dcc:	bd10      	pop	{r4, pc}
   d5dce:	bf00      	nop
   d5dd0:	000dd9a5 	.word	0x000dd9a5
   d5dd4:	000dd9ab 	.word	0x000dd9ab
   d5dd8:	2003e618 	.word	0x2003e618

000d5ddc <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data>:
            logJson();
   d5ddc:	f7ff bfd2 	b.w	d5d84 <_Z7logJsonv>

000d5de0 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d5de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d5de2:	4b09      	ldr	r3, [pc, #36]	; (d5e08 <_Z16keepAliveMessagev+0x28>)
   d5de4:	4a09      	ldr	r2, [pc, #36]	; (d5e0c <_Z16keepAliveMessagev+0x2c>)
   d5de6:	781b      	ldrb	r3, [r3, #0]
   d5de8:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5dea:	4909      	ldr	r1, [pc, #36]	; (d5e10 <_Z16keepAliveMessagev+0x30>)
   d5dec:	4313      	orrs	r3, r2
   d5dee:	f88d 3000 	strb.w	r3, [sp]
   d5df2:	2200      	movs	r2, #0
   d5df4:	233c      	movs	r3, #60	; 0x3c
   d5df6:	a802      	add	r0, sp, #8
   d5df8:	f002 fffc 	bl	d8df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5dfc:	a803      	add	r0, sp, #12
   d5dfe:	f7ff ffab 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e02:	b005      	add	sp, #20
   d5e04:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e08:	2003df2c 	.word	0x2003df2c
   d5e0c:	2003df2d 	.word	0x2003df2d
   d5e10:	000dd9b9 	.word	0x000dd9b9

000d5e14 <_ZN18CloudConfigStorage5parseEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };
   d5e14:	b510      	push	{r4, lr}
   d5e16:	6803      	ldr	r3, [r0, #0]
   d5e18:	b088      	sub	sp, #32
   d5e1a:	685b      	ldr	r3, [r3, #4]
   d5e1c:	4604      	mov	r4, r0
   d5e1e:	4798      	blx	r3
   d5e20:	9001      	str	r0, [sp, #4]
    return parseCopy(json, strlen(json));
   d5e22:	f005 fbf0 	bl	db606 <strlen>
   d5e26:	9901      	ldr	r1, [sp, #4]
   d5e28:	4602      	mov	r2, r0
   d5e2a:	a805      	add	r0, sp, #20
   d5e2c:	f003 fdb6 	bl	d999c <_ZN5spark9JSONValue9parseCopyEPKcj>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e30:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	__r._M_pi = _M_pi;
   d5e34:	2300      	movs	r3, #0

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5e36:	e9cd 3305 	strd	r3, r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e3a:	6863      	ldr	r3, [r4, #4]
   d5e3c:	9303      	str	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e3e:	6061      	str	r1, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e40:	68a3      	ldr	r3, [r4, #8]
	__r._M_pi = _M_pi;
   d5e42:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5e44:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
   d5e46:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
   d5e48:	f7ff ff86 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class JSONValue {
   d5e4c:	9b07      	ldr	r3, [sp, #28]
   d5e4e:	60e3      	str	r3, [r4, #12]
   d5e50:	a806      	add	r0, sp, #24
   d5e52:	f7ff ff81 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e56:	b008      	add	sp, #32
   d5e58:	bd10      	pop	{r4, pc}
	...

000d5e5c <_ZN26CloudConfigStorageRetainedD1Ev>:
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5e5c:	b510      	push	{r4, lr}
    virtual ~CloudConfigStorage() {};
   d5e5e:	4b04      	ldr	r3, [pc, #16]	; (d5e70 <_ZN26CloudConfigStorageRetainedD1Ev+0x14>)
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5e60:	4604      	mov	r4, r0
    virtual ~CloudConfigStorage() {};
   d5e62:	f840 3b04 	str.w	r3, [r0], #4
   d5e66:	3004      	adds	r0, #4
   d5e68:	f7ff ff76 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	bd10      	pop	{r4, pc}
   d5e70:	000ddb6c 	.word	0x000ddb6c

000d5e74 <_ZN26CloudConfigStorageRetainedD0Ev>:
   d5e74:	b510      	push	{r4, lr}
   d5e76:	4604      	mov	r4, r0
   d5e78:	f7ff fff0 	bl	d5e5c <_ZN26CloudConfigStorageRetainedD1Ev>
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	2118      	movs	r1, #24
   d5e80:	f004 fcc9 	bl	da816 <_ZdlPvj>
   d5e84:	4620      	mov	r0, r4
   d5e86:	bd10      	pop	{r4, pc}

000d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5e88:	b513      	push	{r0, r1, r4, lr}
   d5e8a:	460b      	mov	r3, r1
   d5e8c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5e92:	466c      	mov	r4, sp
   d5e94:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e98:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e9c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ea8:	b002      	add	sp, #8
   d5eaa:	bd10      	pop	{r4, pc}

000d5eac <setup>:
void setup() {
   d5eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5eb0:	2100      	movs	r1, #0
void setup() {
   d5eb2:	b0be      	sub	sp, #248	; 0xf8
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5eb4:	2008      	movs	r0, #8
   d5eb6:	f004 fc27 	bl	da708 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d5eba:	2101      	movs	r1, #1
   d5ebc:	2005      	movs	r0, #5
   d5ebe:	f004 fc23 	bl	da708 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d5ec2:	f7fe fd99 	bl	d49f8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	9300      	str	r3, [sp, #0]
   d5eca:	2201      	movs	r2, #1
   d5ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5ed0:	49b3      	ldr	r1, [pc, #716]	; (d61a0 <setup+0x2f4>)
   d5ed2:	2008      	movs	r0, #8
   d5ed4:	f003 f9ce 	bl	d9274 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5ed8:	4bb2      	ldr	r3, [pc, #712]	; (d61a4 <setup+0x2f8>)
   d5eda:	aa0e      	add	r2, sp, #56	; 0x38
   d5edc:	f103 0510 	add.w	r5, r3, #16
   d5ee0:	4617      	mov	r7, r2
   d5ee2:	6818      	ldr	r0, [r3, #0]
   d5ee4:	6859      	ldr	r1, [r3, #4]
   d5ee6:	4614      	mov	r4, r2
   d5ee8:	c403      	stmia	r4!, {r0, r1}
   d5eea:	3308      	adds	r3, #8
   d5eec:	42ab      	cmp	r3, r5
   d5eee:	4622      	mov	r2, r4
   d5ef0:	d1f7      	bne.n	d5ee2 <setup+0x36>
   d5ef2:	8819      	ldrh	r1, [r3, #0]
   d5ef4:	789b      	ldrb	r3, [r3, #2]
   d5ef6:	70a3      	strb	r3, [r4, #2]
   d5ef8:	8021      	strh	r1, [r4, #0]
   d5efa:	222d      	movs	r2, #45	; 0x2d
   d5efc:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d5efe:	4caa      	ldr	r4, [pc, #680]	; (d61a8 <setup+0x2fc>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5f00:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
  state = INITIALIZATION_STATE;
   d5f04:	2500      	movs	r5, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5f06:	f005 fb23 	bl	db550 <memset>
   d5f0a:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d5f0c:	7025      	strb	r5, [r4, #0]
   d5f0e:	f002 fcd1 	bl	d88b4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5f12:	462b      	mov	r3, r5
   d5f14:	227d      	movs	r2, #125	; 0x7d
   d5f16:	a91e      	add	r1, sp, #120	; 0x78
   d5f18:	a802      	add	r0, sp, #8
   d5f1a:	f003 ff6b 	bl	d9df4 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5f1e:	462b      	mov	r3, r5
   d5f20:	462a      	mov	r2, r5
   d5f22:	e9cd 5500 	strd	r5, r5, [sp]
   d5f26:	49a1      	ldr	r1, [pc, #644]	; (d61ac <setup+0x300>)
   d5f28:	a81e      	add	r0, sp, #120	; 0x78
   d5f2a:	f002 fcd3 	bl	d88d4 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5f2e:	49a0      	ldr	r1, [pc, #640]	; (d61b0 <setup+0x304>)
   d5f30:	48a0      	ldr	r0, [pc, #640]	; (d61b4 <setup+0x308>)
   d5f32:	f7fe f9a6 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f36:	49a0      	ldr	r1, [pc, #640]	; (d61b8 <setup+0x30c>)
   d5f38:	48a0      	ldr	r0, [pc, #640]	; (d61bc <setup+0x310>)
   d5f3a:	f7fe f9a2 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f3e:	49a0      	ldr	r1, [pc, #640]	; (d61c0 <setup+0x314>)
   d5f40:	48a0      	ldr	r0, [pc, #640]	; (d61c4 <setup+0x318>)
   d5f42:	f7fe f99e 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5f46:	462b      	mov	r3, r5
   d5f48:	499f      	ldr	r1, [pc, #636]	; (d61c8 <setup+0x31c>)
   d5f4a:	48a0      	ldr	r0, [pc, #640]	; (d61cc <setup+0x320>)
   d5f4c:	2202      	movs	r2, #2
   d5f4e:	f002 fc89 	bl	d8864 <spark_variable>
   d5f52:	462b      	mov	r3, r5
   d5f54:	2201      	movs	r2, #1
   d5f56:	499e      	ldr	r1, [pc, #632]	; (d61d0 <setup+0x324>)
   d5f58:	489e      	ldr	r0, [pc, #632]	; (d61d4 <setup+0x328>)
   d5f5a:	f002 fc83 	bl	d8864 <spark_variable>
        return _variable(varKey, var, STRING);
   d5f5e:	499e      	ldr	r1, [pc, #632]	; (d61d8 <setup+0x32c>)
   d5f60:	489e      	ldr	r0, [pc, #632]	; (d61dc <setup+0x330>)
   d5f62:	f7fe f98e 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f66:	499e      	ldr	r1, [pc, #632]	; (d61e0 <setup+0x334>)
   d5f68:	489e      	ldr	r0, [pc, #632]	; (d61e4 <setup+0x338>)
   d5f6a:	f7fe f98a 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f6e:	499e      	ldr	r1, [pc, #632]	; (d61e8 <setup+0x33c>)
   d5f70:	489e      	ldr	r0, [pc, #632]	; (d61ec <setup+0x340>)
   d5f72:	f7fe f986 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f76:	499e      	ldr	r1, [pc, #632]	; (d61f0 <setup+0x344>)
   d5f78:	489e      	ldr	r0, [pc, #632]	; (d61f4 <setup+0x348>)
   d5f7a:	f7fe f982 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f7e:	499e      	ldr	r1, [pc, #632]	; (d61f8 <setup+0x34c>)
   d5f80:	489e      	ldr	r0, [pc, #632]	; (d61fc <setup+0x350>)
   d5f82:	f7fe f97e 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5f86:	499e      	ldr	r1, [pc, #632]	; (d6200 <setup+0x354>)
   d5f88:	489e      	ldr	r0, [pc, #632]	; (d6204 <setup+0x358>)
   d5f8a:	f7fe f97a 	bl	d4282 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5f8e:	462b      	mov	r3, r5
   d5f90:	499d      	ldr	r1, [pc, #628]	; (d6208 <setup+0x35c>)
   d5f92:	489e      	ldr	r0, [pc, #632]	; (d620c <setup+0x360>)
   d5f94:	2202      	movs	r2, #2
   d5f96:	f002 fc65 	bl	d8864 <spark_variable>
   d5f9a:	462b      	mov	r3, r5
   d5f9c:	2202      	movs	r2, #2
   d5f9e:	499c      	ldr	r1, [pc, #624]	; (d6210 <setup+0x364>)
   d5fa0:	489c      	ldr	r0, [pc, #624]	; (d6214 <setup+0x368>)
   d5fa2:	f002 fc5f 	bl	d8864 <spark_variable>
        return _function(name, args...);
   d5fa6:	499c      	ldr	r1, [pc, #624]	; (d6218 <setup+0x36c>)
   d5fa8:	489c      	ldr	r0, [pc, #624]	; (d621c <setup+0x370>)
   d5faa:	f7fe f9ab 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fae:	499c      	ldr	r1, [pc, #624]	; (d6220 <setup+0x374>)
   d5fb0:	489c      	ldr	r0, [pc, #624]	; (d6224 <setup+0x378>)
   d5fb2:	f7fe f9a7 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fb6:	499c      	ldr	r1, [pc, #624]	; (d6228 <setup+0x37c>)
   d5fb8:	489c      	ldr	r0, [pc, #624]	; (d622c <setup+0x380>)
   d5fba:	f7fe f9a3 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fbe:	499c      	ldr	r1, [pc, #624]	; (d6230 <setup+0x384>)
   d5fc0:	489c      	ldr	r0, [pc, #624]	; (d6234 <setup+0x388>)
   d5fc2:	f7fe f99f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fc6:	499c      	ldr	r1, [pc, #624]	; (d6238 <setup+0x38c>)
   d5fc8:	4882      	ldr	r0, [pc, #520]	; (d61d4 <setup+0x328>)
   d5fca:	f7fe f99b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fce:	499b      	ldr	r1, [pc, #620]	; (d623c <setup+0x390>)
   d5fd0:	489b      	ldr	r0, [pc, #620]	; (d6240 <setup+0x394>)
   d5fd2:	f7fe f997 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fd6:	499b      	ldr	r1, [pc, #620]	; (d6244 <setup+0x398>)
   d5fd8:	489b      	ldr	r0, [pc, #620]	; (d6248 <setup+0x39c>)
   d5fda:	f7fe f993 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fde:	499b      	ldr	r1, [pc, #620]	; (d624c <setup+0x3a0>)
   d5fe0:	489b      	ldr	r0, [pc, #620]	; (d6250 <setup+0x3a4>)
   d5fe2:	f7fe f98f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fe6:	499b      	ldr	r1, [pc, #620]	; (d6254 <setup+0x3a8>)
   d5fe8:	489b      	ldr	r0, [pc, #620]	; (d6258 <setup+0x3ac>)
   d5fea:	f7fe f98b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5fee:	499b      	ldr	r1, [pc, #620]	; (d625c <setup+0x3b0>)
   d5ff0:	489b      	ldr	r0, [pc, #620]	; (d6260 <setup+0x3b4>)
   d5ff2:	f7fe f987 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5ff6:	499b      	ldr	r1, [pc, #620]	; (d6264 <setup+0x3b8>)
   d5ff8:	489b      	ldr	r0, [pc, #620]	; (d6268 <setup+0x3bc>)
   d5ffa:	f7fe f983 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5ffe:	499b      	ldr	r1, [pc, #620]	; (d626c <setup+0x3c0>)
   d6000:	489b      	ldr	r0, [pc, #620]	; (d6270 <setup+0x3c4>)
   d6002:	f7fe f97f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6006:	499b      	ldr	r1, [pc, #620]	; (d6274 <setup+0x3c8>)
   d6008:	489b      	ldr	r0, [pc, #620]	; (d6278 <setup+0x3cc>)
   d600a:	f7fe f97b 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d600e:	499b      	ldr	r1, [pc, #620]	; (d627c <setup+0x3d0>)
   d6010:	489b      	ldr	r0, [pc, #620]	; (d6280 <setup+0x3d4>)
   d6012:	f7fe f977 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6016:	499b      	ldr	r1, [pc, #620]	; (d6284 <setup+0x3d8>)
   d6018:	489b      	ldr	r0, [pc, #620]	; (d6288 <setup+0x3dc>)
   d601a:	f7fe f973 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d601e:	499b      	ldr	r1, [pc, #620]	; (d628c <setup+0x3e0>)
   d6020:	489b      	ldr	r0, [pc, #620]	; (d6290 <setup+0x3e4>)
   d6022:	f7fe f96f 	bl	d4304 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d6026:	489b      	ldr	r0, [pc, #620]	; (d6294 <setup+0x3e8>)
   d6028:	f001 fd12 	bl	d7a50 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d602c:	4629      	mov	r1, r5
   d602e:	4899      	ldr	r0, [pc, #612]	; (d6294 <setup+0x3e8>)
   d6030:	f001 fe4b 	bl	d7cca <_ZN8MCP7941010clearAlarmEi>
    CloudConfig::instance()
   d6034:	f000 fbd2 	bl	d67dc <_ZN11CloudConfig8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d6038:	4b97      	ldr	r3, [pc, #604]	; (d6298 <setup+0x3ec>)
   d603a:	9309      	str	r3, [sp, #36]	; 0x24
   d603c:	4606      	mov	r6, r0
	    _M_manager = &_My_handler::_M_manager;
   d603e:	4b97      	ldr	r3, [pc, #604]	; (d629c <setup+0x3f0>)
   d6040:	9308      	str	r3, [sp, #32]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6042:	2202      	movs	r2, #2
   d6044:	a906      	add	r1, sp, #24
   d6046:	a80a      	add	r0, sp, #40	; 0x28
    _Function_base() : _M_manager(nullptr) { }
   d6048:	950c      	str	r5, [sp, #48]	; 0x30
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d604a:	f7fe f85c 	bl	d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6050:	930d      	str	r3, [sp, #52]	; 0x34
	std::swap(_M_functor, __x._M_functor);
   d6052:	f106 010c 	add.w	r1, r6, #12
	  _M_manager = __x._M_manager;
   d6056:	9b08      	ldr	r3, [sp, #32]
   d6058:	930c      	str	r3, [sp, #48]	; 0x30
	std::swap(_M_functor, __x._M_functor);
   d605a:	a80a      	add	r0, sp, #40	; 0x28
   d605c:	f7ff ff14 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   d6062:	6972      	ldr	r2, [r6, #20]
   d6064:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d6066:	6173      	str	r3, [r6, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __a = _GLIBCXX_MOVE(__b);
   d606a:	69b2      	ldr	r2, [r6, #24]
   d606c:	920d      	str	r2, [sp, #52]	; 0x34
    class function<_Res(_ArgTypes...)>
   d606e:	a80a      	add	r0, sp, #40	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   d6070:	61b3      	str	r3, [r6, #24]
   d6072:	f7fe f90a 	bl	d428a <_ZNSt14_Function_baseD1Ev>
    CloudConfig &withUpdateFrequency(std::chrono::seconds chronoLiteral) { this->updateFrequency = chronoLiteral.count(); return *this; };
   d6076:	4b8a      	ldr	r3, [pc, #552]	; (d62a0 <setup+0x3f4>)
   d6078:	61f3      	str	r3, [r6, #28]
        .withUpdateMethod(new CloudConfigUpdateWebhook("CloudConfigDeviceNotes"))
   d607a:	202c      	movs	r0, #44	; 0x2c
   d607c:	f7fe f80b 	bl	d4096 <_Znwj>
   d6080:	4605      	mov	r5, r0
   d6082:	b110      	cbz	r0, d608a <setup+0x1de>
   d6084:	4987      	ldr	r1, [pc, #540]	; (d62a4 <setup+0x3f8>)
   d6086:	f000 fbf7 	bl	d6878 <_ZN24CloudConfigUpdateWebhookC1EPKc>
    CloudConfig &withUpdateMethod(CloudConfigUpdate *updateMethod) { this->updateMethod = updateMethod; return *this; };
   d608a:	60b5      	str	r5, [r6, #8]
        .withStorageMethod(new CloudConfigStorageRetained(&retainedConfig, sizeof(retainedConfig)))
   d608c:	2018      	movs	r0, #24
   d608e:	f7fe f802 	bl	d4096 <_Znwj>
   d6092:	4605      	mov	r5, r0
   d6094:	b130      	cbz	r0, d60a4 <setup+0x1f8>
    CloudConfigStorageRetained(void *retainedData, size_t totalSize) : CloudConfigStorageData((CloudConfigDataHeader *)retainedData, totalSize - sizeof(CloudConfigDataHeader)) {};
   d6096:	4984      	ldr	r1, [pc, #528]	; (d62a8 <setup+0x3fc>)
   d6098:	f44f 7280 	mov.w	r2, #256	; 0x100
   d609c:	f000 fb5c 	bl	d6758 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>
   d60a0:	4b82      	ldr	r3, [pc, #520]	; (d62ac <setup+0x400>)
   d60a2:	602b      	str	r3, [r5, #0]
        .setup();
   d60a4:	4630      	mov	r0, r6
    CloudConfig &withStorageMethod(CloudConfigStorage *storageMethod) { this->storageMethod = storageMethod; return *this; };
   d60a6:	6075      	str	r5, [r6, #4]
   d60a8:	f000 fd26 	bl	d6af8 <_ZN11CloudConfig5setupEv>
   d60ac:	a806      	add	r0, sp, #24
   d60ae:	f7fe f8ec 	bl	d428a <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().withNameCallback([](const char *name) {});
   d60b2:	f000 fef1 	bl	d6e98 <_ZN24DeviceNameHelperRetained8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d60b6:	4b7e      	ldr	r3, [pc, #504]	; (d62b0 <setup+0x404>)
   d60b8:	930d      	str	r3, [sp, #52]	; 0x34
   d60ba:	a90a      	add	r1, sp, #40	; 0x28
	    _M_manager = &_My_handler::_M_manager;
   d60bc:	4b7d      	ldr	r3, [pc, #500]	; (d62b4 <setup+0x408>)
   d60be:	930c      	str	r3, [sp, #48]	; 0x30
   d60c0:	f000 ff06 	bl	d6ed0 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>
    class function<_Res(_ArgTypes...)>
   d60c4:	a80a      	add	r0, sp, #40	; 0x28
   d60c6:	f7fe f8e0 	bl	d428a <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().setup(&deviceNameHelperRetained);
   d60ca:	f000 fee5 	bl	d6e98 <_ZN24DeviceNameHelperRetained8instanceEv>
   d60ce:	497a      	ldr	r1, [pc, #488]	; (d62b8 <setup+0x40c>)
   d60d0:	f000 ff68 	bl	d6fa4 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>
  fram.begin();                                                                             // Initialize the FRAM module
   d60d4:	4879      	ldr	r0, [pc, #484]	; (d62bc <setup+0x410>)
   d60d6:	f001 f957 	bl	d7388 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d60da:	2301      	movs	r3, #1
   d60dc:	4877      	ldr	r0, [pc, #476]	; (d62bc <setup+0x410>)
   d60de:	aa0a      	add	r2, sp, #40	; 0x28
   d60e0:	2100      	movs	r1, #0
   d60e2:	f001 f993 	bl	d740c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d60e6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d60ea:	2b16      	cmp	r3, #22
   d60ec:	d04b      	beq.n	d6186 <setup+0x2da>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d60ee:	4873      	ldr	r0, [pc, #460]	; (d62bc <setup+0x410>)
   d60f0:	f001 f954 	bl	d739c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d60f4:	4a72      	ldr	r2, [pc, #456]	; (d62c0 <setup+0x414>)
   d60f6:	4871      	ldr	r0, [pc, #452]	; (d62bc <setup+0x410>)
   d60f8:	2304      	movs	r3, #4
   d60fa:	2100      	movs	r1, #0
   d60fc:	f001 f9d1 	bl	d74a2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d6100:	2301      	movs	r3, #1
   d6102:	486e      	ldr	r0, [pc, #440]	; (d62bc <setup+0x410>)
   d6104:	aa0a      	add	r2, sp, #40	; 0x28
   d6106:	2100      	movs	r1, #0
   d6108:	f001 f980 	bl	d740c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d610c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6110:	2b16      	cmp	r3, #22
   d6112:	d029      	beq.n	d6168 <setup+0x2bc>
   d6114:	2301      	movs	r3, #1
   d6116:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d6118:	4d6a      	ldr	r5, [pc, #424]	; (d62c4 <setup+0x418>)
  checkConstantValues();
   d611a:	f7fe fbfd 	bl	d4918 <_Z19checkConstantValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d611e:	f7fe fbcb 	bl	d48b8 <_Z17checkSystemValuesv>
  loadEmonlib();                                                                            // Initialize the emon library modules.
   d6122:	f7ff fa89 	bl	d5638 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d6126:	786b      	ldrb	r3, [r5, #1]
   d6128:	2b00      	cmp	r3, #0
   d612a:	f000 80e5 	beq.w	d62f8 <setup+0x44c>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d612e:	2000      	movs	r0, #0
   d6130:	f002 f9ca 	bl	d84c8 <hal_timer_millis>
   d6134:	f04f 0a00 	mov.w	sl, #0
   d6138:	4606      	mov	r6, r0
   d613a:	2000      	movs	r0, #0
   d613c:	f002 f9c4 	bl	d84c8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d6140:	ebb0 0806 	subs.w	r8, r0, r6
   d6144:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d6148:	2300      	movs	r3, #0
   d614a:	f247 522f 	movw	r2, #29999	; 0x752f
   d614e:	454b      	cmp	r3, r9
   d6150:	bf08      	it	eq
   d6152:	4542      	cmpeq	r2, r8
   d6154:	f0c0 80c2 	bcc.w	d62dc <setup+0x430>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6158:	f002 fba4 	bl	d88a4 <spark_cloud_flag_connected>
   d615c:	2800      	cmp	r0, #0
   d615e:	f040 80bd 	bne.w	d62dc <setup+0x430>
            spark_process();
   d6162:	f002 fb8f 	bl	d8884 <spark_process>
        while (_while() && !_condition()) {
   d6166:	e7e8      	b.n	d613a <setup+0x28e>
        val_(0) {
   d6168:	2300      	movs	r3, #0
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d616a:	f88d 3000 	strb.w	r3, [sp]
   d616e:	4b56      	ldr	r3, [pc, #344]	; (d62c8 <setup+0x41c>)
   d6170:	4a56      	ldr	r2, [pc, #344]	; (d62cc <setup+0x420>)
   d6172:	781b      	ldrb	r3, [r3, #0]
   d6174:	4956      	ldr	r1, [pc, #344]	; (d62d0 <setup+0x424>)
   d6176:	4857      	ldr	r0, [pc, #348]	; (d62d4 <setup+0x428>)
   d6178:	f7fe f921 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d617c:	f7fe fb40 	bl	d4800 <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d6180:	f7fe fb6e 	bl	d4860 <_Z20loadConstantDefaultsv>
   d6184:	e7c8      	b.n	d6118 <setup+0x26c>
   d6186:	4a54      	ldr	r2, [pc, #336]	; (d62d8 <setup+0x42c>)
   d6188:	484c      	ldr	r0, [pc, #304]	; (d62bc <setup+0x410>)
   d618a:	2318      	movs	r3, #24
   d618c:	21a0      	movs	r1, #160	; 0xa0
   d618e:	f001 f93d 	bl	d740c <_ZN6MB85RC8readDataEjPhj>
   d6192:	4a4c      	ldr	r2, [pc, #304]	; (d62c4 <setup+0x418>)
   d6194:	4849      	ldr	r0, [pc, #292]	; (d62bc <setup+0x410>)
   d6196:	2334      	movs	r3, #52	; 0x34
   d6198:	2101      	movs	r1, #1
   d619a:	f001 f937 	bl	d740c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d619e:	e7bb      	b.n	d6118 <setup+0x26c>
   d61a0:	000d40e1 	.word	0x000d40e1
   d61a4:	000ddbd4 	.word	0x000ddbd4
   d61a8:	2003e5b5 	.word	0x2003e5b5
   d61ac:	000d43d9 	.word	0x000d43d9
   d61b0:	000ddc14 	.word	0x000ddc14
   d61b4:	000dd85e 	.word	0x000dd85e
   d61b8:	2003df3e 	.word	0x2003df3e
   d61bc:	000dd9bb 	.word	0x000dd9bb
   d61c0:	2003df2e 	.word	0x2003df2e
   d61c4:	000dd9c3 	.word	0x000dd9c3
   d61c8:	2003e5bc 	.word	0x2003e5bc
   d61cc:	000dd9d2 	.word	0x000dd9d2
   d61d0:	2003e5b9 	.word	0x2003e5b9
   d61d4:	000dd4b8 	.word	0x000dd4b8
   d61d8:	2003e535 	.word	0x2003e535
   d61dc:	000dda21 	.word	0x000dda21
   d61e0:	2003e595 	.word	0x2003e595
   d61e4:	000dda32 	.word	0x000dda32
   d61e8:	2003e575 	.word	0x2003e575
   d61ec:	000dda43 	.word	0x000dda43
   d61f0:	2003e515 	.word	0x2003e515
   d61f4:	000dda56 	.word	0x000dda56
   d61f8:	2003e4f5 	.word	0x2003e4f5
   d61fc:	000dda68 	.word	0x000dda68
   d6200:	2003e555 	.word	0x2003e555
   d6204:	000dda7a 	.word	0x000dda7a
   d6208:	2003e5dc 	.word	0x2003e5dc
   d620c:	000dd97d 	.word	0x000dd97d
   d6210:	2003e5e4 	.word	0x2003e5e4
   d6214:	000dd9e1 	.word	0x000dd9e1
   d6218:	000d4121 	.word	0x000d4121
   d621c:	000dd9f0 	.word	0x000dd9f0
   d6220:	000d5d41 	.word	0x000d5d41
   d6224:	000dd9fc 	.word	0x000dd9fc
   d6228:	000d4601 	.word	0x000d4601
   d622c:	000dda10 	.word	0x000dda10
   d6230:	000d452d 	.word	0x000d452d
   d6234:	000dd4f3 	.word	0x000dd4f3
   d6238:	000d4491 	.word	0x000d4491
   d623c:	000d57b9 	.word	0x000d57b9
   d6240:	000dda1d 	.word	0x000dda1d
   d6244:	000d5809 	.word	0x000d5809
   d6248:	000dda2e 	.word	0x000dda2e
   d624c:	000d5859 	.word	0x000d5859
   d6250:	000dda3f 	.word	0x000dda3f
   d6254:	000d58a9 	.word	0x000d58a9
   d6258:	000dda52 	.word	0x000dda52
   d625c:	000d58f9 	.word	0x000d58f9
   d6260:	000dda64 	.word	0x000dda64
   d6264:	000d5949 	.word	0x000d5949
   d6268:	000dda76 	.word	0x000dda76
   d626c:	000d413d 	.word	0x000d413d
   d6270:	000dda87 	.word	0x000dda87
   d6274:	000d4681 	.word	0x000d4681
   d6278:	000dda95 	.word	0x000dda95
   d627c:	000d4751 	.word	0x000d4751
   d6280:	000dd866 	.word	0x000dd866
   d6284:	000d45a9 	.word	0x000d45a9
   d6288:	000ddaa4 	.word	0x000ddaa4
   d628c:	000d47b1 	.word	0x000d47b1
   d6290:	000ddac0 	.word	0x000ddac0
   d6294:	2003e40c 	.word	0x2003e40c
   d6298:	000d5ddd 	.word	0x000d5ddd
   d629c:	000d4107 	.word	0x000d4107
   d62a0:	00015180 	.word	0x00015180
   d62a4:	000ddace 	.word	0x000ddace
   d62a8:	2003f400 	.word	0x2003f400
   d62ac:	000ddb94 	.word	0x000ddb94
   d62b0:	000d4111 	.word	0x000d4111
   d62b4:	000d4113 	.word	0x000d4113
   d62b8:	2003f514 	.word	0x2003f514
   d62bc:	2003e3a0 	.word	0x2003e3a0
   d62c0:	000ddc1c 	.word	0x000ddc1c
   d62c4:	2003e5b8 	.word	0x2003e5b8
   d62c8:	2003df2d 	.word	0x2003df2d
   d62cc:	000ddae5 	.word	0x000ddae5
   d62d0:	000ddaf0 	.word	0x000ddaf0
   d62d4:	2003e3d0 	.word	0x2003e3d0
   d62d8:	2003e428 	.word	0x2003e428
   d62dc:	f002 fae2 	bl	d88a4 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d62e0:	6868      	ldr	r0, [r5, #4]
   d62e2:	f7fe f815 	bl	d4310 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d62e6:	686b      	ldr	r3, [r5, #4]
   d62e8:	4815      	ldr	r0, [pc, #84]	; (d6340 <setup+0x494>)
   d62ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d62ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d62f2:	4359      	muls	r1, r3
   d62f4:	f7fe f81f 	bl	d4336 <_ZN5Timer12changePeriodEjj>
  updateConstantValues();
   d62f8:	f7ff f9fc 	bl	d56f4 <_Z20updateConstantValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d62fc:	f7fe fe98 	bl	d5030 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d6300:	7a6b      	ldrb	r3, [r5, #9]
   d6302:	b14b      	cbz	r3, d6318 <setup+0x46c>
   d6304:	2300      	movs	r3, #0
   d6306:	f88d 3000 	strb.w	r3, [sp]
   d630a:	4b0e      	ldr	r3, [pc, #56]	; (d6344 <setup+0x498>)
   d630c:	490e      	ldr	r1, [pc, #56]	; (d6348 <setup+0x49c>)
   d630e:	781b      	ldrb	r3, [r3, #0]
   d6310:	480e      	ldr	r0, [pc, #56]	; (d634c <setup+0x4a0>)
   d6312:	463a      	mov	r2, r7
   d6314:	f7fe f853 	bl	d43be <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6318:	f002 fac4 	bl	d88a4 <spark_cloud_flag_connected>
   d631c:	b910      	cbnz	r0, d6324 <setup+0x478>
            spark_process();
   d631e:	f002 fab1 	bl	d8884 <spark_process>
        while (_while() && !_condition()) {
   d6322:	e7f9      	b.n	d6318 <setup+0x46c>
   d6324:	f002 fabe 	bl	d88a4 <spark_cloud_flag_connected>
  sendConfiguration();
   d6328:	f7ff fb36 	bl	d5998 <_Z17sendConfigurationv>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d632c:	7823      	ldrb	r3, [r4, #0]
   d632e:	b90b      	cbnz	r3, d6334 <setup+0x488>
   d6330:	2302      	movs	r3, #2
   d6332:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d6334:	a802      	add	r0, sp, #8
   d6336:	f003 fcad 	bl	d9c94 <_ZN6StringD1Ev>
}
   d633a:	b03e      	add	sp, #248	; 0xf8
   d633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6340:	2003e3b0 	.word	0x2003e3b0
   d6344:	2003df2d 	.word	0x2003df2d
   d6348:	000ddb01 	.word	0x000ddb01
   d634c:	2003e3d0 	.word	0x2003e3d0

000d6350 <_GLOBAL__sub_I___appProductID>:
   d6350:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d6352:	4b50      	ldr	r3, [pc, #320]	; (d6494 <_GLOBAL__sub_I___appProductID+0x144>)
              error_(SYSTEM_ERROR_NONE) {
   d6354:	4d50      	ldr	r5, [pc, #320]	; (d6498 <_GLOBAL__sub_I___appProductID+0x148>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d6356:	4e51      	ldr	r6, [pc, #324]	; (d649c <_GLOBAL__sub_I___appProductID+0x14c>)
   d6358:	2701      	movs	r7, #1
   d635a:	701f      	strb	r7, [r3, #0]
   d635c:	4b50      	ldr	r3, [pc, #320]	; (d64a0 <_GLOBAL__sub_I___appProductID+0x150>)
   d635e:	2202      	movs	r2, #2
   d6360:	b087      	sub	sp, #28
   d6362:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d6364:	f004 f97a 	bl	da65c <spark_protocol_instance>
   d6368:	2300      	movs	r3, #0
   d636a:	461a      	mov	r2, r3
   d636c:	f643 1145 	movw	r1, #14661	; 0x3945
   d6370:	f004 f97c 	bl	da66c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d6374:	f004 f972 	bl	da65c <spark_protocol_instance>
   d6378:	2300      	movs	r3, #0
   d637a:	461a      	mov	r2, r3
   d637c:	210f      	movs	r1, #15
   d637e:	2400      	movs	r4, #0
   d6380:	f004 f97c 	bl	da67c <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d6384:	4b47      	ldr	r3, [pc, #284]	; (d64a4 <_GLOBAL__sub_I___appProductID+0x154>)
   d6386:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6388:	602c      	str	r4, [r5, #0]
   d638a:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d638c:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d638e:	4638      	mov	r0, r7
   d6390:	f002 fa12 	bl	d87b8 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d6394:	4632      	mov	r2, r6
   d6396:	4944      	ldr	r1, [pc, #272]	; (d64a8 <_GLOBAL__sub_I___appProductID+0x158>)
   d6398:	4628      	mov	r0, r5
   d639a:	f004 fa37 	bl	da80c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d639e:	4621      	mov	r1, r4
   d63a0:	4638      	mov	r0, r7
   d63a2:	f002 fa19 	bl	d87d8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d63a6:	4639      	mov	r1, r7
   d63a8:	2004      	movs	r0, #4
   d63aa:	f002 f85d 	bl	d8468 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d63ae:	f004 fa05 	bl	da7bc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d63b2:	4d3e      	ldr	r5, [pc, #248]	; (d64ac <_GLOBAL__sub_I___appProductID+0x15c>)
   d63b4:	4601      	mov	r1, r0
   d63b6:	4623      	mov	r3, r4
   d63b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d63bc:	4628      	mov	r0, r5
   d63be:	f000 ffd9 	bl	d7374 <_ZN6MB85RCC1ER7TwoWireji>
   d63c2:	4b3b      	ldr	r3, [pc, #236]	; (d64b0 <_GLOBAL__sub_I___appProductID+0x160>)
   d63c4:	602b      	str	r3, [r5, #0]
   d63c6:	4632      	mov	r2, r6
   d63c8:	493a      	ldr	r1, [pc, #232]	; (d64b4 <_GLOBAL__sub_I___appProductID+0x164>)
   d63ca:	4628      	mov	r0, r5
   d63cc:	f004 fa1e 	bl	da80c <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d63d0:	f004 f9f4 	bl	da7bc <_Z19__fetch_global_Wirev>
   d63d4:	4d38      	ldr	r5, [pc, #224]	; (d64b8 <_GLOBAL__sub_I___appProductID+0x168>)
   d63d6:	4601      	mov	r1, r0
   d63d8:	4628      	mov	r0, r5
   d63da:	f001 fa41 	bl	d7860 <_ZN8MCP79410C1ER7TwoWire>
   d63de:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d63e0:	4d36      	ldr	r5, [pc, #216]	; (d64bc <_GLOBAL__sub_I___appProductID+0x16c>)
   d63e2:	4937      	ldr	r1, [pc, #220]	; (d64c0 <_GLOBAL__sub_I___appProductID+0x170>)
   d63e4:	4632      	mov	r2, r6
   d63e6:	f004 fa11 	bl	da80c <__aeabi_atexit>
   d63ea:	4936      	ldr	r1, [pc, #216]	; (d64c4 <_GLOBAL__sub_I___appProductID+0x174>)
   d63ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d63f0:	4628      	mov	r0, r5
   d63f2:	f001 feab 	bl	d814c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d63f6:	4b34      	ldr	r3, [pc, #208]	; (d64c8 <_GLOBAL__sub_I___appProductID+0x178>)
   d63f8:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d63fa:	4632      	mov	r2, r6
   d63fc:	4933      	ldr	r1, [pc, #204]	; (d64cc <_GLOBAL__sub_I___appProductID+0x17c>)
   d63fe:	4628      	mov	r0, r5
   d6400:	f004 fa04 	bl	da80c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6404:	4b32      	ldr	r3, [pc, #200]	; (d64d0 <_GLOBAL__sub_I___appProductID+0x180>)
   d6406:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6408:	4b32      	ldr	r3, [pc, #200]	; (d64d4 <_GLOBAL__sub_I___appProductID+0x184>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d640a:	4d33      	ldr	r5, [pc, #204]	; (d64d8 <_GLOBAL__sub_I___appProductID+0x188>)
   d640c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d640e:	4b33      	ldr	r3, [pc, #204]	; (d64dc <_GLOBAL__sub_I___appProductID+0x18c>)
   d6410:	9304      	str	r3, [sp, #16]
   d6412:	4b33      	ldr	r3, [pc, #204]	; (d64e0 <_GLOBAL__sub_I___appProductID+0x190>)
   d6414:	602b      	str	r3, [r5, #0]
   d6416:	712c      	strb	r4, [r5, #4]
   d6418:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   d641a:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   d641c:	f105 010c 	add.w	r1, r5, #12
   d6420:	a802      	add	r0, sp, #8
   d6422:	f7ff fd31 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      __a = _GLIBCXX_MOVE(__b);
   d6426:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6428:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d642a:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d642c:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d642e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6430:	69aa      	ldr	r2, [r5, #24]
   d6432:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6434:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d6436:	4a2b      	ldr	r2, [pc, #172]	; (d64e4 <_GLOBAL__sub_I___appProductID+0x194>)
   d6438:	462b      	mov	r3, r5
   d643a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d643e:	e9cd 4400 	strd	r4, r4, [sp]
   d6442:	f105 0008 	add.w	r0, r5, #8
   d6446:	f001 ffb7 	bl	d83b8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d644a:	a802      	add	r0, sp, #8
   d644c:	f7fd ff1d 	bl	d428a <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d6450:	4628      	mov	r0, r5
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d6452:	4d25      	ldr	r5, [pc, #148]	; (d64e8 <_GLOBAL__sub_I___appProductID+0x198>)
Timer keepAliveTimer(1000, keepAliveMessage);
   d6454:	4925      	ldr	r1, [pc, #148]	; (d64ec <_GLOBAL__sub_I___appProductID+0x19c>)
   d6456:	4632      	mov	r2, r6
   d6458:	f004 f9d8 	bl	da80c <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d645c:	4621      	mov	r1, r4
   d645e:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d6462:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d6466:	e9c5 441c 	strd	r4, r4, [r5, #112]	; 0x70
   d646a:	e9c5 441f 	strd	r4, r4, [r5, #124]	; 0x7c
   d646e:	652c      	str	r4, [r5, #80]	; 0x50
   d6470:	65ec      	str	r4, [r5, #92]	; 0x5c
   d6472:	67ac      	str	r4, [r5, #120]	; 0x78
   d6474:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
   d6478:	2210      	movs	r2, #16
   d647a:	f105 0088 	add.w	r0, r5, #136	; 0x88
   d647e:	f005 f867 	bl	db550 <memset>
   d6482:	2210      	movs	r2, #16
   d6484:	4621      	mov	r1, r4
   d6486:	f105 0098 	add.w	r0, r5, #152	; 0x98
   d648a:	f005 f861 	bl	db550 <memset>
   d648e:	b007      	add	sp, #28
   d6490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6492:	bf00      	nop
   d6494:	2003df2d 	.word	0x2003df2d
   d6498:	2003df20 	.word	0x2003df20
   d649c:	2003dee0 	.word	0x2003dee0
   d64a0:	2003df2c 	.word	0x2003df2c
   d64a4:	ffff0000 	.word	0xffff0000
   d64a8:	000d4273 	.word	0x000d4273
   d64ac:	2003e3a0 	.word	0x2003e3a0
   d64b0:	000ddb50 	.word	0x000ddb50
   d64b4:	000d4211 	.word	0x000d4211
   d64b8:	2003e40c 	.word	0x2003e40c
   d64bc:	2003e3d0 	.word	0x2003e3d0
   d64c0:	000d75eb 	.word	0x000d75eb
   d64c4:	2003f540 	.word	0x2003f540
   d64c8:	000ddb28 	.word	0x000ddb28
   d64cc:	000d41e9 	.word	0x000d41e9
   d64d0:	000d5de1 	.word	0x000d5de1
   d64d4:	000d40ed 	.word	0x000d40ed
   d64d8:	2003e3b0 	.word	0x2003e3b0
   d64dc:	000d40f1 	.word	0x000d40f1
   d64e0:	000ddb14 	.word	0x000ddb14
   d64e4:	000d4239 	.word	0x000d4239
   d64e8:	2003e440 	.word	0x2003e440
   d64ec:	000d429d 	.word	0x000d429d

000d64f0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d64f0:	b082      	sub	sp, #8
   d64f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64f6:	a90a      	add	r1, sp, #40	; 0x28
   d64f8:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d64fc:	4b34      	ldr	r3, [pc, #208]	; (d65d0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d64fe:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d65d4 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d6502:	2200      	movs	r2, #0
   d6504:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d6508:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d650a:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d650e:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d6512:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d6516:	f004 f921 	bl	da75c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d651a:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d651e:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d6520:	f004 fbf8 	bl	dad14 <__aeabi_i2d>
   d6524:	4642      	mov	r2, r8
   d6526:	464b      	mov	r3, r9
   d6528:	4606      	mov	r6, r0
   d652a:	460f      	mov	r7, r1
   d652c:	f004 faa4 	bl	daa78 <__aeabi_dsub>
   d6530:	4652      	mov	r2, sl
   d6532:	465b      	mov	r3, fp
   d6534:	f004 fc58 	bl	dade8 <__aeabi_dmul>
   d6538:	4642      	mov	r2, r8
   d653a:	464b      	mov	r3, r9
   d653c:	f004 fa9e 	bl	daa7c <__adddf3>
   d6540:	4602      	mov	r2, r0
   d6542:	460b      	mov	r3, r1
   d6544:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d6548:	4630      	mov	r0, r6
   d654a:	4639      	mov	r1, r7
   d654c:	f004 fa94 	bl	daa78 <__aeabi_dsub>
   d6550:	4602      	mov	r2, r0
   d6552:	460b      	mov	r3, r1
   d6554:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d6558:	f004 fc46 	bl	dade8 <__aeabi_dmul>
   d655c:	4602      	mov	r2, r0
   d655e:	460b      	mov	r3, r1
   d6560:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d6564:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d6568:	f004 fa88 	bl	daa7c <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d656c:	3d01      	subs	r5, #1
    sumI += sqI;
   d656e:	4606      	mov	r6, r0
   d6570:	460f      	mov	r7, r1
   d6572:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d6576:	d1cc      	bne.n	d6512 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d657c:	a310      	add	r3, pc, #64	; (adr r3, d65c0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d657e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6582:	f004 fc31 	bl	dade8 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6586:	a310      	add	r3, pc, #64	; (adr r3, d65c8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d6588:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d658c:	4680      	mov	r8, r0
   d658e:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d6590:	4630      	mov	r0, r6
   d6592:	4639      	mov	r1, r7
   d6594:	f004 fd52 	bl	db03c <__aeabi_ddiv>
   d6598:	ec41 0b10 	vmov	d0, r0, r1
   d659c:	f004 f944 	bl	da828 <sqrt>

  //Reset accumulators
  sumI = 0;
   d65a0:	2200      	movs	r2, #0
   d65a2:	2300      	movs	r3, #0
   d65a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d65a8:	ec51 0b10 	vmov	r0, r1, d0
   d65ac:	4642      	mov	r2, r8
   d65ae:	464b      	mov	r3, r9
   d65b0:	f004 fc1a 	bl	dade8 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d65b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65b8:	ec41 0b10 	vmov	d0, r0, r1
   d65bc:	b002      	add	sp, #8
   d65be:	4770      	bx	lr
   d65c0:	66666666 	.word	0x66666666
   d65c4:	3f4a6666 	.word	0x3f4a6666
   d65c8:	00000000 	.word	0x00000000
   d65cc:	4099f800 	.word	0x4099f800
   d65d0:	40a00000 	.word	0x40a00000
   d65d4:	3f300000 	.word	0x3f300000

000d65d8 <_ZN17CloudConfigUpdate4loopEv>:
    virtual void loop() {};
   d65d8:	4770      	bx	lr

000d65da <_ZN17CloudConfigUpdate11startUpdateEv>:
    virtual void startUpdate() {};
   d65da:	4770      	bx	lr

000d65dc <_ZN22CloudConfigStorageData11getJsonDataEv>:

    parse();
}

const char * const CloudConfigStorageData::getJsonData() const {
    return &((const char * const)header)[sizeof(CloudConfigDataHeader)];
   d65dc:	6900      	ldr	r0, [r0, #16]
}
   d65de:	3014      	adds	r0, #20
   d65e0:	4770      	bx	lr

000d65e2 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d65e2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d65e4:	4603      	mov	r3, r0
	switch (__op)
   d65e6:	d102      	bne.n	d65ee <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d65e8:	6001      	str	r1, [r0, #0]
      }
   d65ea:	2000      	movs	r0, #0
   d65ec:	4770      	bx	lr
	  switch (__op)
   d65ee:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d65f0:	bf04      	itt	eq
   d65f2:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d65f6:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d65fa:	e7f6      	b.n	d65ea <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d65fc <_ZN29CloudConfigUpdateSubscriptionD1Ev>:
 * 
 * You will probably want to subclass this if you want to be able to have the device request an update
 * since there is no way for this class to know how to request it. See CloudConfigUpdateWebhook for
 * and example of using startUpdate() to make a request.
 */
class CloudConfigUpdateSubscription : public CloudConfigUpdate {
   d65fc:	b510      	push	{r4, lr}
   d65fe:	4b04      	ldr	r3, [pc, #16]	; (d6610 <_ZN29CloudConfigUpdateSubscriptionD1Ev+0x14>)
   d6600:	4604      	mov	r4, r0
   d6602:	f840 3b0c 	str.w	r3, [r0], #12
   d6606:	f003 fb45 	bl	d9c94 <_ZN6StringD1Ev>
   d660a:	4620      	mov	r0, r4
   d660c:	bd10      	pop	{r4, pc}
   d660e:	bf00      	nop
   d6610:	000ddd80 	.word	0x000ddd80

000d6614 <_ZN29CloudConfigUpdateSubscriptionD0Ev>:
   d6614:	b510      	push	{r4, lr}
   d6616:	4604      	mov	r4, r0
   d6618:	f7ff fff0 	bl	d65fc <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d661c:	4620      	mov	r0, r4
   d661e:	211c      	movs	r1, #28
   d6620:	f004 f8f9 	bl	da816 <_ZdlPvj>
   d6624:	4620      	mov	r0, r4
   d6626:	bd10      	pop	{r4, pc}

000d6628 <_ZN24CloudConfigUpdateWebhookD1Ev>:
 * Two examples that use this are the Devices Notes example and Google Sheets example.
 * 
 * This is derived from CloudConfigUpdateSubscription but is different because it subscribes
 * to a webhook response event, not eventName.
 */
class CloudConfigUpdateWebhook : public CloudConfigUpdateSubscription {
   d6628:	b510      	push	{r4, lr}
   d662a:	4b05      	ldr	r3, [pc, #20]	; (d6640 <_ZN24CloudConfigUpdateWebhookD1Ev+0x18>)
   d662c:	4604      	mov	r4, r0
   d662e:	f840 3b1c 	str.w	r3, [r0], #28
   d6632:	f003 fb2f 	bl	d9c94 <_ZN6StringD1Ev>
   d6636:	4620      	mov	r0, r4
   d6638:	f7ff ffe0 	bl	d65fc <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d663c:	4620      	mov	r0, r4
   d663e:	bd10      	pop	{r4, pc}
   d6640:	000ddd64 	.word	0x000ddd64

000d6644 <_ZN24CloudConfigUpdateWebhookD0Ev>:
   d6644:	b510      	push	{r4, lr}
   d6646:	4604      	mov	r4, r0
   d6648:	f7ff ffee 	bl	d6628 <_ZN24CloudConfigUpdateWebhookD1Ev>
   d664c:	4620      	mov	r0, r4
   d664e:	212c      	movs	r1, #44	; 0x2c
   d6650:	f004 f8e1 	bl	da816 <_ZdlPvj>
   d6654:	4620      	mov	r0, r4
   d6656:	bd10      	pop	{r4, pc}

000d6658 <_ZN22CloudConfigStorageData10updateDataEPKc>:

char *CloudConfigStorageData::getJsonData() {
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
}

bool CloudConfigStorageData::updateData(const char *json) {
   d6658:	b513      	push	{r0, r1, r4, lr}
   d665a:	4604      	mov	r4, r0
    size_t jsonLen = strlen(json);
   d665c:	4608      	mov	r0, r1
   d665e:	9101      	str	r1, [sp, #4]
   d6660:	f004 ffd1 	bl	db606 <strlen>
    if (jsonLen < (dataSize - 1)) {
   d6664:	6963      	ldr	r3, [r4, #20]
   d6666:	3b01      	subs	r3, #1
   d6668:	4283      	cmp	r3, r0
   d666a:	d90f      	bls.n	d668c <_ZN22CloudConfigStorageData10updateDataEPKc+0x34>
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
   d666c:	6920      	ldr	r0, [r4, #16]
        strcpy(getJsonData(), json);
   d666e:	9901      	ldr	r1, [sp, #4]
   d6670:	3014      	adds	r0, #20
   d6672:	f004 ffa3 	bl	db5bc <strcpy>
        parse();
   d6676:	6823      	ldr	r3, [r4, #0]
   d6678:	4620      	mov	r0, r4
   d667a:	68db      	ldr	r3, [r3, #12]
   d667c:	4798      	blx	r3
        return save();
   d667e:	6823      	ldr	r3, [r4, #0]
   d6680:	6a1b      	ldr	r3, [r3, #32]
   d6682:	4620      	mov	r0, r4
    }
    else {
        // Too long, reject
        return false;
    }
}
   d6684:	b002      	add	sp, #8
   d6686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return save();
   d668a:	4718      	bx	r3
}
   d668c:	2000      	movs	r0, #0
   d668e:	b002      	add	sp, #8
   d6690:	bd10      	pop	{r4, pc}

000d6692 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6692:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6694:	6842      	ldr	r2, [r0, #4]
   d6696:	4603      	mov	r3, r0
   d6698:	1054      	asrs	r4, r2, #1
   d669a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d669e:	07d2      	lsls	r2, r2, #31
   d66a0:	bf48      	it	mi
   d66a2:	590a      	ldrmi	r2, [r1, r4]
   d66a4:	681b      	ldr	r3, [r3, #0]
      }
   d66a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   d66aa:	bf48      	it	mi
   d66ac:	58d3      	ldrmi	r3, [r2, r3]
   d66ae:	4718      	bx	r3

000d66b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d66b0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66b2:	b538      	push	{r3, r4, r5, lr}
   d66b4:	4604      	mov	r4, r0
	  switch (__op)
   d66b6:	d007      	beq.n	d66c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d66b8:	2a03      	cmp	r2, #3
   d66ba:	d011      	beq.n	d66e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d66bc:	2a01      	cmp	r2, #1
   d66be:	d101      	bne.n	d66c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d66c0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d66c2:	6023      	str	r3, [r4, #0]
	}
   d66c4:	2000      	movs	r0, #0
   d66c6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d66c8:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d66ca:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d66cc:	f7fd fce3 	bl	d4096 <_Znwj>
   d66d0:	4603      	mov	r3, r0
   d66d2:	2800      	cmp	r0, #0
   d66d4:	d0f5      	beq.n	d66c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d66d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d66da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d66de:	e7f0      	b.n	d66c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d66e0:	6800      	ldr	r0, [r0, #0]
   d66e2:	2800      	cmp	r0, #0
   d66e4:	d0ee      	beq.n	d66c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d66e6:	210c      	movs	r1, #12
   d66e8:	f004 f895 	bl	da816 <_ZdlPvj>
   d66ec:	e7ea      	b.n	d66c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d66ee <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM29CloudConfigUpdateSubscriptionFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d66ee:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d66f0:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d66f2:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d66f4:	685c      	ldr	r4, [r3, #4]
   d66f6:	689d      	ldr	r5, [r3, #8]
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	6812      	ldr	r2, [r2, #0]
   d66fc:	1066      	asrs	r6, r4, #1
   d66fe:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d6702:	07e4      	lsls	r4, r4, #31
   d6704:	bf44      	itt	mi
   d6706:	59ac      	ldrmi	r4, [r5, r6]
   d6708:	58e3      	ldrmi	r3, [r4, r3]
      }
   d670a:	bc70      	pop	{r4, r5, r6}
   d670c:	4718      	bx	r3
	...

000d6710 <_ZN11CloudConfigD1Ev>:

CloudConfig::CloudConfig() {

}

CloudConfig::~CloudConfig() {
   d6710:	b510      	push	{r4, lr}
   d6712:	4b06      	ldr	r3, [pc, #24]	; (d672c <_ZN11CloudConfigD1Ev+0x1c>)
   d6714:	4604      	mov	r4, r0
   d6716:	f840 3b24 	str.w	r3, [r0], #36
    class function<_Res(_ArgTypes...)>
   d671a:	f7fd fdb6 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d671e:	f104 000c 	add.w	r0, r4, #12
   d6722:	f7fd fdb2 	bl	d428a <_ZNSt14_Function_baseD1Ev>

}
   d6726:	4620      	mov	r0, r4
   d6728:	bd10      	pop	{r4, pc}
   d672a:	bf00      	nop
   d672c:	000ddd24 	.word	0x000ddd24

000d6730 <_ZN11CloudConfigD0Ev>:
CloudConfig::~CloudConfig() {
   d6730:	b510      	push	{r4, lr}
   d6732:	4604      	mov	r4, r0
}
   d6734:	f7ff ffec 	bl	d6710 <_ZN11CloudConfigD1Ev>
   d6738:	4620      	mov	r0, r4
   d673a:	2138      	movs	r1, #56	; 0x38
   d673c:	f004 f86b 	bl	da816 <_ZdlPvj>
   d6740:	4620      	mov	r0, r4
   d6742:	bd10      	pop	{r4, pc}

000d6744 <_ZNK18CloudConfigStorage11hasJsonDataEv>:
    bool hasJsonData() const { return getJsonData()[0] != 0; };
   d6744:	b508      	push	{r3, lr}
   d6746:	6803      	ldr	r3, [r0, #0]
   d6748:	685b      	ldr	r3, [r3, #4]
   d674a:	4798      	blx	r3
   d674c:	7800      	ldrb	r0, [r0, #0]
   d674e:	3800      	subs	r0, #0
   d6750:	bf18      	it	ne
   d6752:	2001      	movne	r0, #1
   d6754:	bd08      	pop	{r3, pc}
	...

000d6758 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>:
CloudConfigStorageData::CloudConfigStorageData(CloudConfigDataHeader *header, size_t dataSize) : header(header), dataSize(dataSize) {
   d6758:	b510      	push	{r4, lr}
      : _M_ptr(0), _M_refcount()
   d675a:	2400      	movs	r4, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d675c:	e9c0 4401 	strd	r4, r4, [r0, #4]
        t_(nullptr) {
   d6760:	60c4      	str	r4, [r0, #12]
   d6762:	4c02      	ldr	r4, [pc, #8]	; (d676c <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj+0x14>)
   d6764:	6004      	str	r4, [r0, #0]
   d6766:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   d676a:	bd10      	pop	{r4, pc}
   d676c:	000ddd38 	.word	0x000ddd38

000d6770 <_ZN22CloudConfigStorageData8validateEv>:
void CloudConfigStorageData::validate() {
   d6770:	b570      	push	{r4, r5, r6, lr}
   d6772:	4604      	mov	r4, r0
    if (header->magic == CloudConfig::DATA_MAGIC &&
   d6774:	6900      	ldr	r0, [r0, #16]
   d6776:	4d11      	ldr	r5, [pc, #68]	; (d67bc <_ZN22CloudConfigStorageData8validateEv+0x4c>)
   d6778:	6802      	ldr	r2, [r0, #0]
   d677a:	42aa      	cmp	r2, r5
   d677c:	d106      	bne.n	d678c <_ZN22CloudConfigStorageData8validateEv+0x1c>
   d677e:	7903      	ldrb	r3, [r0, #4]
   d6780:	2b14      	cmp	r3, #20
   d6782:	d103      	bne.n	d678c <_ZN22CloudConfigStorageData8validateEv+0x1c>
        header->headerSize == (uint8_t)sizeof(CloudConfigDataHeader) &&
   d6784:	88c2      	ldrh	r2, [r0, #6]
   d6786:	8aa3      	ldrh	r3, [r4, #20]
   d6788:	429a      	cmp	r2, r3
   d678a:	d011      	beq.n	d67b0 <_ZN22CloudConfigStorageData8validateEv+0x40>
        memset(header, 0, sizeof(CloudConfigDataHeader));
   d678c:	2614      	movs	r6, #20
   d678e:	4632      	mov	r2, r6
   d6790:	2100      	movs	r1, #0
   d6792:	f004 fedd 	bl	db550 <memset>
        header->magic = CloudConfig::DATA_MAGIC;
   d6796:	6923      	ldr	r3, [r4, #16]
   d6798:	601d      	str	r5, [r3, #0]
        header->headerSize = (uint8_t)sizeof(CloudConfigDataHeader);
   d679a:	6923      	ldr	r3, [r4, #16]
   d679c:	711e      	strb	r6, [r3, #4]
        header->dataSize = (uint16_t)dataSize;
   d679e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d67a2:	80da      	strh	r2, [r3, #6]
        memset(getJsonData(), 0, dataSize);
   d67a4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   d67a8:	2100      	movs	r1, #0
   d67aa:	4430      	add	r0, r6
   d67ac:	f004 fed0 	bl	db550 <memset>
    parse();
   d67b0:	6823      	ldr	r3, [r4, #0]
   d67b2:	4620      	mov	r0, r4
   d67b4:	68db      	ldr	r3, [r3, #12]
}
   d67b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    parse();
   d67ba:	4718      	bx	r3
   d67bc:	7251dd53 	.word	0x7251dd53

000d67c0 <_ZN11CloudConfigC1Ev>:
CloudConfig::CloudConfig() {
   d67c0:	4a05      	ldr	r2, [pc, #20]	; (d67d8 <_ZN11CloudConfigC1Ev+0x18>)
   d67c2:	6002      	str	r2, [r0, #0]
   d67c4:	2200      	movs	r2, #0
   d67c6:	e9c0 2201 	strd	r2, r2, [r0, #4]
   d67ca:	e9c0 2207 	strd	r2, r2, [r0, #28]
    _Function_base() : _M_manager(nullptr) { }
   d67ce:	6142      	str	r2, [r0, #20]
   d67d0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d67d2:	6342      	str	r2, [r0, #52]	; 0x34
}
   d67d4:	4770      	bx	lr
   d67d6:	bf00      	nop
   d67d8:	000ddd24 	.word	0x000ddd24

000d67dc <_ZN11CloudConfig8instanceEv>:
CloudConfig &CloudConfig::instance() {
   d67dc:	b510      	push	{r4, lr}
    if (!_instance) {
   d67de:	4c06      	ldr	r4, [pc, #24]	; (d67f8 <_ZN11CloudConfig8instanceEv+0x1c>)
   d67e0:	6823      	ldr	r3, [r4, #0]
   d67e2:	b93b      	cbnz	r3, d67f4 <_ZN11CloudConfig8instanceEv+0x18>
        _instance = new CloudConfig();
   d67e4:	2038      	movs	r0, #56	; 0x38
   d67e6:	f7fd fc56 	bl	d4096 <_Znwj>
   d67ea:	4603      	mov	r3, r0
   d67ec:	b108      	cbz	r0, d67f2 <_ZN11CloudConfig8instanceEv+0x16>
   d67ee:	f7ff ffe7 	bl	d67c0 <_ZN11CloudConfigC1Ev>
   d67f2:	6023      	str	r3, [r4, #0]
}
   d67f4:	6820      	ldr	r0, [r4, #0]
   d67f6:	bd10      	pop	{r4, pc}
   d67f8:	2003e5f8 	.word	0x2003e5f8

000d67fc <_ZN29CloudConfigUpdateSubscription19subscriptionHandlerEPKcS1_>:

void CloudConfigUpdateSubscription::setup() {
    Particle.subscribe(eventName, &CloudConfigUpdateSubscription::subscriptionHandler, this);
}

void CloudConfigUpdateSubscription::subscriptionHandler(const char *eventName, const char *eventData) {
   d67fc:	b507      	push	{r0, r1, r2, lr}
   d67fe:	9201      	str	r2, [sp, #4]
    CloudConfig::instance().updateData(eventData);
   d6800:	f7ff ffec 	bl	d67dc <_ZN11CloudConfig8instanceEv>
   d6804:	6803      	ldr	r3, [r0, #0]
   d6806:	9901      	ldr	r1, [sp, #4]
   d6808:	681b      	ldr	r3, [r3, #0]
}
   d680a:	b003      	add	sp, #12
   d680c:	f85d eb04 	ldr.w	lr, [sp], #4
    CloudConfig::instance().updateData(eventData);
   d6810:	4718      	bx	r3

000d6812 <_ZN11CloudConfig4loopEv>:
void CloudConfig::loop() {
   d6812:	b510      	push	{r4, lr}
   d6814:	4604      	mov	r4, r0
    storageMethod->loop();
   d6816:	6840      	ldr	r0, [r0, #4]
   d6818:	6803      	ldr	r3, [r0, #0]
   d681a:	691b      	ldr	r3, [r3, #16]
   d681c:	4798      	blx	r3
    if (updateMethod) {
   d681e:	68a0      	ldr	r0, [r4, #8]
   d6820:	b110      	cbz	r0, d6828 <_ZN11CloudConfig4loopEv+0x16>
        updateMethod->loop();
   d6822:	6803      	ldr	r3, [r0, #0]
   d6824:	685b      	ldr	r3, [r3, #4]
   d6826:	4798      	blx	r3
    if (stateHandler) {
   d6828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d682a:	b133      	cbz	r3, d683a <_ZN11CloudConfig4loopEv+0x28>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d682c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d682e:	4621      	mov	r1, r4
   d6830:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   d6834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6838:	4718      	bx	r3
   d683a:	bd10      	pop	{r4, pc}

000d683c <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>:

    // This is the subscription event name (hook-response)
    withEventName(eventName);
}

CloudConfigUpdateWebhook &CloudConfigUpdateWebhook::withEventName(const char *eventName) {
   d683c:	b510      	push	{r4, lr}
   d683e:	b08a      	sub	sp, #40	; 0x28
   d6840:	4604      	mov	r4, r0
        return spark_deviceID();
   d6842:	a806      	add	r0, sp, #24
   d6844:	9101      	str	r1, [sp, #4]
   d6846:	f002 f835 	bl	d88b4 <spark_deviceID>
    // Response Template:
    // {{PARTICLE_DEVICE_ID}}/hook-response/{{PARTICLE_EVENT_NAME}}
    String s = String::format("%s/hook-response/%s/", System.deviceID().c_str(), eventName);
   d684a:	9b01      	ldr	r3, [sp, #4]
   d684c:	9a06      	ldr	r2, [sp, #24]
   d684e:	4909      	ldr	r1, [pc, #36]	; (d6874 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc+0x38>)
   d6850:	a802      	add	r0, sp, #8
   d6852:	f003 faf9 	bl	d9e48 <_ZN6String6formatEPKcz>
   d6856:	a806      	add	r0, sp, #24
   d6858:	f003 fa1c 	bl	d9c94 <_ZN6StringD1Ev>
    CloudConfigUpdateSubscription &withEventName(const char *eventName) { this->eventName = eventName; return *this; };
   d685c:	9902      	ldr	r1, [sp, #8]
   d685e:	f104 000c 	add.w	r0, r4, #12
   d6862:	f003 fa90 	bl	d9d86 <_ZN6StringaSEPKc>
   d6866:	a802      	add	r0, sp, #8
   d6868:	f003 fa14 	bl	d9c94 <_ZN6StringD1Ev>

    CloudConfigUpdateSubscription::withEventName(s);
    return *this;
}
   d686c:	4620      	mov	r0, r4
   d686e:	b00a      	add	sp, #40	; 0x28
   d6870:	bd10      	pop	{r4, pc}
   d6872:	bf00      	nop
   d6874:	000ddc20 	.word	0x000ddc20

000d6878 <_ZN24CloudConfigUpdateWebhookC1EPKc>:
    CloudConfigUpdate() {};
   d6878:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d687c:	f64e 2360 	movw	r3, #60000	; 0xea60
CloudConfigUpdateWebhook::CloudConfigUpdateWebhook(const char *eventName) {
   d6880:	b570      	push	{r4, r5, r6, lr}
   d6882:	e9c0 2301 	strd	r2, r3, [r0, #4]
   d6886:	4604      	mov	r4, r0
    CloudConfigUpdateSubscription() {};
   d6888:	4b0c      	ldr	r3, [pc, #48]	; (d68bc <_ZN24CloudConfigUpdateWebhookC1EPKc+0x44>)
   d688a:	f840 3b0c 	str.w	r3, [r0], #12
   d688e:	460d      	mov	r5, r1
   d6890:	4626      	mov	r6, r4
   d6892:	490b      	ldr	r1, [pc, #44]	; (d68c0 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d6894:	f003 fa49 	bl	d9d2a <_ZN6StringC1EPKc>
   d6898:	4b0a      	ldr	r3, [pc, #40]	; (d68c4 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x4c>)
   d689a:	f846 3b1c 	str.w	r3, [r6], #28
   d689e:	4908      	ldr	r1, [pc, #32]	; (d68c0 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d68a0:	4630      	mov	r0, r6
   d68a2:	f003 fa42 	bl	d9d2a <_ZN6StringC1EPKc>
    requestEventName = eventName;
   d68a6:	4629      	mov	r1, r5
   d68a8:	4630      	mov	r0, r6
   d68aa:	f003 fa6c 	bl	d9d86 <_ZN6StringaSEPKc>
    withEventName(eventName);
   d68ae:	4629      	mov	r1, r5
   d68b0:	4620      	mov	r0, r4
   d68b2:	f7ff ffc3 	bl	d683c <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>
}
   d68b6:	4620      	mov	r0, r4
   d68b8:	bd70      	pop	{r4, r5, r6, pc}
   d68ba:	bf00      	nop
   d68bc:	000ddd80 	.word	0x000ddd80
   d68c0:	000de240 	.word	0x000de240
   d68c4:	000ddd64 	.word	0x000ddd64

000d68c8 <_ZNKSt8functionIFvvEEclEv>:
      if (_M_empty())
   d68c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d68ca:	b510      	push	{r4, lr}
      if (_M_empty())
   d68cc:	b90a      	cbnz	r2, d68d2 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d68ce:	f003 ffa8 	bl	da822 <_ZSt25__throw_bad_function_callv>
    }
   d68d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68d6:	68c3      	ldr	r3, [r0, #12]
   d68d8:	4718      	bx	r3
	...

000d68dc <_ZN11CloudConfig10updateDataEPKc>:
bool CloudConfig::updateData(const char *json) {
   d68dc:	b538      	push	{r3, r4, r5, lr}
   d68de:	4604      	mov	r4, r0
    Log.info("updateData called %s", json);
   d68e0:	460a      	mov	r2, r1
   d68e2:	480a      	ldr	r0, [pc, #40]	; (d690c <_ZN11CloudConfig10updateDataEPKc+0x30>)
bool CloudConfig::updateData(const char *json) {
   d68e4:	460d      	mov	r5, r1
    Log.info("updateData called %s", json);
   d68e6:	490a      	ldr	r1, [pc, #40]	; (d6910 <_ZN11CloudConfig10updateDataEPKc+0x34>)
   d68e8:	f7fd fd52 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    if (storageMethod) {
   d68ec:	6860      	ldr	r0, [r4, #4]
    updateDataStatus = UpdateDataStatus::SUCCESS;
   d68ee:	2302      	movs	r3, #2
   d68f0:	6223      	str	r3, [r4, #32]
    if (storageMethod) {
   d68f2:	b148      	cbz	r0, d6908 <_ZN11CloudConfig10updateDataEPKc+0x2c>
        storageMethod->updateData(json);
   d68f4:	6803      	ldr	r3, [r0, #0]
   d68f6:	4629      	mov	r1, r5
   d68f8:	695b      	ldr	r3, [r3, #20]
   d68fa:	4798      	blx	r3
        if (dataCallback) {
   d68fc:	6963      	ldr	r3, [r4, #20]
   d68fe:	b11b      	cbz	r3, d6908 <_ZN11CloudConfig10updateDataEPKc+0x2c>
            dataCallback();
   d6900:	f104 000c 	add.w	r0, r4, #12
   d6904:	f7ff ffe0 	bl	d68c8 <_ZNKSt8functionIFvvEEclEv>
}
   d6908:	2001      	movs	r0, #1
   d690a:	bd38      	pop	{r3, r4, r5, pc}
   d690c:	2003e618 	.word	0x2003e618
   d6910:	000ddc35 	.word	0x000ddc35

000d6914 <_ZN24CloudConfigUpdateWebhook11startUpdateEv>:

void CloudConfigUpdateWebhook::startUpdate() {
   d6914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6916:	4604      	mov	r4, r0
    Log.info("CloudConfigUpdateWebhook::startUpdate %s", requestEventName.c_str());
   d6918:	69c2      	ldr	r2, [r0, #28]
   d691a:	4909      	ldr	r1, [pc, #36]	; (d6940 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x2c>)
   d691c:	4809      	ldr	r0, [pc, #36]	; (d6944 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x30>)
   d691e:	f7fd fd37 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6922:	4b09      	ldr	r3, [pc, #36]	; (d6948 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x34>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6924:	4a09      	ldr	r2, [pc, #36]	; (d694c <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x38>)
   d6926:	781b      	ldrb	r3, [r3, #0]
   d6928:	69e1      	ldr	r1, [r4, #28]
   d692a:	f88d 3000 	strb.w	r3, [sp]
   d692e:	a802      	add	r0, sp, #8
   d6930:	233c      	movs	r3, #60	; 0x3c
   d6932:	f002 fa5f 	bl	d8df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   d6936:	a803      	add	r0, sp, #12
   d6938:	f7ff fa0e 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    Particle.publish(requestEventName, "");
}
   d693c:	b004      	add	sp, #16
   d693e:	bd10      	pop	{r4, pc}
   d6940:	000ddc4a 	.word	0x000ddc4a
   d6944:	2003e618 	.word	0x2003e618
   d6948:	2003e5f4 	.word	0x2003e5f4
   d694c:	000de240 	.word	0x000de240

000d6950 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6950:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6952:	2300      	movs	r3, #0
   d6954:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6956:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6958:	4604      	mov	r4, r0
   d695a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d695c:	b12b      	cbz	r3, d696a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d695e:	2202      	movs	r2, #2
   d6960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6962:	68eb      	ldr	r3, [r5, #12]
   d6964:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6966:	68ab      	ldr	r3, [r5, #8]
   d6968:	60a3      	str	r3, [r4, #8]
    }
   d696a:	4620      	mov	r0, r4
   d696c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6970 <_ZN29CloudConfigUpdateSubscription5setupEv>:
void CloudConfigUpdateSubscription::setup() {
   d6970:	b570      	push	{r4, r5, r6, lr}
   d6972:	b08a      	sub	sp, #40	; 0x28
        operator const char*() const { return c_str(); }
   d6974:	68c6      	ldr	r6, [r0, #12]
   d6976:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6978:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d697a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d697c:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d697e:	f7fd fb8a 	bl	d4096 <_Znwj>
   d6982:	b118      	cbz	r0, d698c <_ZN29CloudConfigUpdateSubscription5setupEv+0x1c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6984:	4b13      	ldr	r3, [pc, #76]	; (d69d4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x64>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6986:	6084      	str	r4, [r0, #8]
   d6988:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d698c:	4b12      	ldr	r3, [pc, #72]	; (d69d8 <_ZN29CloudConfigUpdateSubscription5setupEv+0x68>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d698e:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6990:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d6992:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d6994:	4b11      	ldr	r3, [pc, #68]	; (d69dc <_ZN29CloudConfigUpdateSubscription5setupEv+0x6c>)
   d6996:	9304      	str	r3, [sp, #16]
   d6998:	a806      	add	r0, sp, #24
   d699a:	f7ff ffd9 	bl	d6950 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d699e:	9b08      	ldr	r3, [sp, #32]
   d69a0:	b183      	cbz	r3, d69c4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d69a2:	2010      	movs	r0, #16
   d69a4:	f7fd fb77 	bl	d4096 <_Znwj>
   d69a8:	4604      	mov	r4, r0
   d69aa:	b158      	cbz	r0, d69c4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
   d69ac:	a906      	add	r1, sp, #24
   d69ae:	f7ff ffcf 	bl	d6950 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d69b2:	2300      	movs	r3, #0
   d69b4:	e9cd 3300 	strd	r3, r3, [sp]
   d69b8:	4909      	ldr	r1, [pc, #36]	; (d69e0 <_ZN29CloudConfigUpdateSubscription5setupEv+0x70>)
   d69ba:	2301      	movs	r3, #1
   d69bc:	4622      	mov	r2, r4
   d69be:	4630      	mov	r0, r6
   d69c0:	f001 ff88 	bl	d88d4 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d69c4:	a806      	add	r0, sp, #24
   d69c6:	f7fd fc60 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d69ca:	a802      	add	r0, sp, #8
   d69cc:	f7fd fc5d 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d69d0:	b00a      	add	sp, #40	; 0x28
   d69d2:	bd70      	pop	{r4, r5, r6, pc}
   d69d4:	000d67fd 	.word	0x000d67fd
   d69d8:	000d66ef 	.word	0x000d66ef
   d69dc:	000d66b1 	.word	0x000d66b1
   d69e0:	000d8bf3 	.word	0x000d8bf3

000d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d69e4:	680b      	ldr	r3, [r1, #0]
   d69e6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d69e8:	b113      	cbz	r3, d69f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d69ea:	685a      	ldr	r2, [r3, #4]
   d69ec:	3201      	adds	r2, #1
   d69ee:	605a      	str	r2, [r3, #4]
      }
   d69f0:	4770      	bx	lr

000d69f2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d69f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d69f4:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69f6:	f851 3b04 	ldr.w	r3, [r1], #4
   d69fa:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d69fc:	4604      	mov	r4, r0
   d69fe:	a801      	add	r0, sp, #4
   d6a00:	f7ff fff0 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6a04:	466a      	mov	r2, sp
   d6a06:	4629      	mov	r1, r5
   d6a08:	4620      	mov	r0, r4
   d6a0a:	f002 feaf 	bl	d976c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6a0e:	a801      	add	r0, sp, #4
   d6a10:	f7ff f9a2 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6a14:	4620      	mov	r0, r4
   d6a16:	b003      	add	sp, #12
   d6a18:	bd30      	pop	{r4, r5, pc}

000d6a1a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>:
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6a1a:	b570      	push	{r4, r5, r6, lr}
   d6a1c:	b08c      	sub	sp, #48	; 0x30
   d6a1e:	4604      	mov	r4, r0
    JSONObjectIterator iter(parentObj);
   d6a20:	a806      	add	r0, sp, #24
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6a22:	4616      	mov	r6, r2
    JSONObjectIterator iter(parentObj);
   d6a24:	f7ff ffe5 	bl	d69f2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while(iter.next()) {
   d6a28:	a806      	add	r0, sp, #24
   d6a2a:	f002 feb7 	bl	d979c <_ZN5spark18JSONObjectIterator4nextEv>
   d6a2e:	2800      	cmp	r0, #0
   d6a30:	d02d      	beq.n	d6a8e <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x74>
    return JSONString(k_, d_);
   d6a32:	9d09      	ldr	r5, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a34:	9b06      	ldr	r3, [sp, #24]
   d6a36:	9300      	str	r3, [sp, #0]
   d6a38:	a907      	add	r1, sp, #28
   d6a3a:	a801      	add	r0, sp, #4
   d6a3c:	f7ff ffd2 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6a40:	4629      	mov	r1, r5
   d6a42:	466a      	mov	r2, sp
   d6a44:	a802      	add	r0, sp, #8
   d6a46:	f002 fe6d 	bl	d9724 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6a4a:	a801      	add	r0, sp, #4
   d6a4c:	f7ff f984 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (strcmp((const char *)iter.name(), key) == 0) {
   d6a50:	9804      	ldr	r0, [sp, #16]
   d6a52:	4631      	mov	r1, r6
   d6a54:	f004 fda8 	bl	db5a8 <strcmp>
   d6a58:	4605      	mov	r5, r0
   d6a5a:	a803      	add	r0, sp, #12
   d6a5c:	f7ff f97c 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a60:	2d00      	cmp	r5, #0
   d6a62:	d1e1      	bne.n	d6a28 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0xe>
    return JSONValue(v_, d_);
   d6a64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a66:	9b06      	ldr	r3, [sp, #24]
   d6a68:	9302      	str	r3, [sp, #8]
   d6a6a:	a907      	add	r1, sp, #28
   d6a6c:	a803      	add	r0, sp, #12
   d6a6e:	f7ff ffb9 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6a72:	aa02      	add	r2, sp, #8
   d6a74:	4629      	mov	r1, r5
   d6a76:	4620      	mov	r0, r4
   d6a78:	f002 fd3e 	bl	d94f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6a7c:	a803      	add	r0, sp, #12
   d6a7e:	f7ff f96b 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a82:	a807      	add	r0, sp, #28
   d6a84:	f7ff f968 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6a88:	4620      	mov	r0, r4
   d6a8a:	b00c      	add	sp, #48	; 0x30
   d6a8c:	bd70      	pop	{r4, r5, r6, pc}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a8e:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
   d6a92:	60a0      	str	r0, [r4, #8]
}
   d6a94:	e7f5      	b.n	d6a82 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x68>
	...

000d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6a98:	b510      	push	{r4, lr}
   d6a9a:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6a9e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6aa0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6aa2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6aa4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6aa6:	b90a      	cbnz	r2, d6aac <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6aa8:	07d9      	lsls	r1, r3, #31
   d6aaa:	d505      	bpl.n	d6ab8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6ab0:	4b0f      	ldr	r3, [pc, #60]	; (d6af0 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6ab2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6ab4:	4b0f      	ldr	r3, [pc, #60]	; (d6af4 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6ab6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ab8:	ab02      	add	r3, sp, #8
   d6aba:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6abe:	466a      	mov	r2, sp
   d6ac0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6ac8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6acc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ad0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ad2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ad6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ad8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ada:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6adc:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6ade:	4618      	mov	r0, r3
   d6ae0:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ae2:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6ae4:	9105      	str	r1, [sp, #20]
   d6ae6:	f7fd fbd0 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d6aea:	4620      	mov	r0, r4
   d6aec:	b006      	add	sp, #24
   d6aee:	bd10      	pop	{r4, pc}
   d6af0:	000d6693 	.word	0x000d6693
   d6af4:	000d65e3 	.word	0x000d65e3

000d6af8 <_ZN11CloudConfig5setupEv>:
void CloudConfig::setup() {
   d6af8:	b513      	push	{r0, r1, r4, lr}
   d6afa:	4604      	mov	r4, r0
    if (!storageMethod) {
   d6afc:	6840      	ldr	r0, [r0, #4]
   d6afe:	b180      	cbz	r0, d6b22 <_ZN11CloudConfig5setupEv+0x2a>
    storageMethod->setup();
   d6b00:	6803      	ldr	r3, [r0, #0]
   d6b02:	689b      	ldr	r3, [r3, #8]
   d6b04:	4798      	blx	r3
    if (updateMethod) {
   d6b06:	68a0      	ldr	r0, [r4, #8]
   d6b08:	b158      	cbz	r0, d6b22 <_ZN11CloudConfig5setupEv+0x2a>
        updateMethod->setup();
   d6b0a:	6803      	ldr	r3, [r0, #0]
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	4798      	blx	r3
        stateHandler = &CloudConfig::stateStart;
   d6b10:	4b05      	ldr	r3, [pc, #20]	; (d6b28 <_ZN11CloudConfig5setupEv+0x30>)
   d6b12:	9300      	str	r3, [sp, #0]
   d6b14:	4669      	mov	r1, sp
   d6b16:	2300      	movs	r3, #0
   d6b18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6b1c:	9301      	str	r3, [sp, #4]
   d6b1e:	f7ff ffbb 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6b22:	b002      	add	sp, #8
   d6b24:	bd10      	pop	{r4, pc}
   d6b26:	bf00      	nop
   d6b28:	000d6b2d 	.word	0x000d6b2d

000d6b2c <_ZN11CloudConfig10stateStartEv>:
void CloudConfig::stateStart() {
   d6b2c:	b513      	push	{r0, r1, r4, lr}
   d6b2e:	4604      	mov	r4, r0
    if (storageMethod->hasJsonData() && dataCallback) {
   d6b30:	6840      	ldr	r0, [r0, #4]
   d6b32:	f7ff fe07 	bl	d6744 <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6b36:	b128      	cbz	r0, d6b44 <_ZN11CloudConfig10stateStartEv+0x18>
   d6b38:	6963      	ldr	r3, [r4, #20]
   d6b3a:	b11b      	cbz	r3, d6b44 <_ZN11CloudConfig10stateStartEv+0x18>
        dataCallback();
   d6b3c:	f104 000c 	add.w	r0, r4, #12
   d6b40:	f7ff fec2 	bl	d68c8 <_ZNKSt8functionIFvvEEclEv>
    stateHandler = &CloudConfig::stateWaitCloudConnected;
   d6b44:	4b05      	ldr	r3, [pc, #20]	; (d6b5c <_ZN11CloudConfig10stateStartEv+0x30>)
   d6b46:	9300      	str	r3, [sp, #0]
   d6b48:	4669      	mov	r1, sp
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	f7ff ffa1 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6b56:	b002      	add	sp, #8
   d6b58:	bd10      	pop	{r4, pc}
   d6b5a:	bf00      	nop
   d6b5c:	000d6b61 	.word	0x000d6b61

000d6b60 <_ZN11CloudConfig23stateWaitCloudConnectedEv>:
void CloudConfig::stateWaitCloudConnected() {
   d6b60:	b513      	push	{r0, r1, r4, lr}
   d6b62:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6b64:	f001 fe9e 	bl	d88a4 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d6b68:	b190      	cbz	r0, d6b90 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
   d6b6a:	f003 fb03 	bl	da174 <_ZN9TimeClass7isValidEv>
   d6b6e:	b178      	cbz	r0, d6b90 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
    Log.info("cloud connected");
   d6b70:	4908      	ldr	r1, [pc, #32]	; (d6b94 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x34>)
   d6b72:	4809      	ldr	r0, [pc, #36]	; (d6b98 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x38>)
   d6b74:	f7fd fc0c 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &CloudConfig::stateWaitAfterCloudConnected;
   d6b78:	4b08      	ldr	r3, [pc, #32]	; (d6b9c <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x3c>)
   d6b7a:	9300      	str	r3, [sp, #0]
   d6b7c:	4669      	mov	r1, sp
   d6b7e:	2300      	movs	r3, #0
   d6b80:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	f7ff ff87 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6b8a:	f001 fc8d 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d6b8e:	6360      	str	r0, [r4, #52]	; 0x34
}
   d6b90:	b002      	add	sp, #8
   d6b92:	bd10      	pop	{r4, pc}
   d6b94:	000ddc73 	.word	0x000ddc73
   d6b98:	2003e618 	.word	0x2003e618
   d6b9c:	000d6ba1 	.word	0x000d6ba1

000d6ba0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv>:
void CloudConfig::stateWaitAfterCloudConnected() {
   d6ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6ba2:	4604      	mov	r4, r0
   d6ba4:	f001 fc80 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < updateMethod->waitAfterCloudConnectedMs) {
   d6ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6baa:	1ac0      	subs	r0, r0, r3
   d6bac:	68a3      	ldr	r3, [r4, #8]
   d6bae:	685b      	ldr	r3, [r3, #4]
   d6bb0:	4298      	cmp	r0, r3
   d6bb2:	d317      	bcc.n	d6be4 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x44>
    if (!storageMethod->hasJsonData() || updateFrequency == UPDATE_AT_RESTART) {
   d6bb4:	6860      	ldr	r0, [r4, #4]
   d6bb6:	f7ff fdc5 	bl	d6744 <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6bba:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d6bbe:	b198      	cbz	r0, d6be8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
   d6bc0:	69e3      	ldr	r3, [r4, #28]
   d6bc2:	3301      	adds	r3, #1
   d6bc4:	d010      	beq.n	d6be8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
        Log.info("wait for update");
   d6bc6:	490b      	ldr	r1, [pc, #44]	; (d6bf4 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x54>)
   d6bc8:	480b      	ldr	r0, [pc, #44]	; (d6bf8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6bca:	f7fd fbe1 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d6bce:	f001 fc6b 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &CloudConfig::stateWaitToUpdate;
   d6bd2:	4b0a      	ldr	r3, [pc, #40]	; (d6bfc <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x5c>)
        stateTime = millis();
   d6bd4:	6360      	str	r0, [r4, #52]	; 0x34
        stateHandler = &CloudConfig::stateStartUpdate;
   d6bd6:	9300      	str	r3, [sp, #0]
   d6bd8:	4669      	mov	r1, sp
   d6bda:	2300      	movs	r3, #0
   d6bdc:	4628      	mov	r0, r5
   d6bde:	9301      	str	r3, [sp, #4]
   d6be0:	f7ff ff5a 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6be4:	b003      	add	sp, #12
   d6be6:	bd30      	pop	{r4, r5, pc}
        Log.info("no data or update at restart");
   d6be8:	4905      	ldr	r1, [pc, #20]	; (d6c00 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x60>)
   d6bea:	4803      	ldr	r0, [pc, #12]	; (d6bf8 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6bec:	f7fd fbd0 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &CloudConfig::stateStartUpdate;
   d6bf0:	4b04      	ldr	r3, [pc, #16]	; (d6c04 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x64>)
   d6bf2:	e7f0      	b.n	d6bd6 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x36>
   d6bf4:	000ddc83 	.word	0x000ddc83
   d6bf8:	2003e618 	.word	0x2003e618
   d6bfc:	000d6c09 	.word	0x000d6c09
   d6c00:	000ddc93 	.word	0x000ddc93
   d6c04:	000d6c6d 	.word	0x000d6c6d

000d6c08 <_ZN11CloudConfig17stateWaitToUpdateEv>:
void CloudConfig::stateWaitToUpdate() {
   d6c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c0a:	4604      	mov	r4, r0
   d6c0c:	f001 fc4c 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d6c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6c12:	1ac0      	subs	r0, r0, r3
   d6c14:	f242 730f 	movw	r3, #9999	; 0x270f
   d6c18:	4298      	cmp	r0, r3
   d6c1a:	d91e      	bls.n	d6c5a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
    if (Time.isValid() && updateFrequency > 0) {
   d6c1c:	f003 faaa 	bl	da174 <_ZN9TimeClass7isValidEv>
   d6c20:	b1d8      	cbz	r0, d6c5a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
   d6c22:	69e3      	ldr	r3, [r4, #28]
   d6c24:	2b00      	cmp	r3, #0
   d6c26:	dd18      	ble.n	d6c5a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
        if (Time.now() - storageMethod->getDataHeader()->lastCheck > updateFrequency) {
   d6c28:	f003 fac1 	bl	da1ae <_ZN9TimeClass3nowEv>
   d6c2c:	4605      	mov	r5, r0
   d6c2e:	6860      	ldr	r0, [r4, #4]
   d6c30:	6803      	ldr	r3, [r0, #0]
   d6c32:	681b      	ldr	r3, [r3, #0]
   d6c34:	4798      	blx	r3
   d6c36:	6880      	ldr	r0, [r0, #8]
   d6c38:	69e3      	ldr	r3, [r4, #28]
   d6c3a:	1a2d      	subs	r5, r5, r0
   d6c3c:	429d      	cmp	r5, r3
   d6c3e:	dd0c      	ble.n	d6c5a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
            Log.info("checking for time update");
   d6c40:	4907      	ldr	r1, [pc, #28]	; (d6c60 <_ZN11CloudConfig17stateWaitToUpdateEv+0x58>)
   d6c42:	4808      	ldr	r0, [pc, #32]	; (d6c64 <_ZN11CloudConfig17stateWaitToUpdateEv+0x5c>)
   d6c44:	f7fd fba4 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
            stateHandler = &CloudConfig::stateStartUpdate;
   d6c48:	4b07      	ldr	r3, [pc, #28]	; (d6c68 <_ZN11CloudConfig17stateWaitToUpdateEv+0x60>)
   d6c4a:	9300      	str	r3, [sp, #0]
   d6c4c:	4669      	mov	r1, sp
   d6c4e:	2300      	movs	r3, #0
   d6c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	f7ff ff1f 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6c5a:	b003      	add	sp, #12
   d6c5c:	bd30      	pop	{r4, r5, pc}
   d6c5e:	bf00      	nop
   d6c60:	000ddcb0 	.word	0x000ddcb0
   d6c64:	2003e618 	.word	0x2003e618
   d6c68:	000d6c6d 	.word	0x000d6c6d

000d6c6c <_ZN11CloudConfig16stateStartUpdateEv>:
void CloudConfig::stateStartUpdate() {
   d6c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c6e:	4604      	mov	r4, r0
    Log.info("stateStartUpdate");
   d6c70:	490f      	ldr	r1, [pc, #60]	; (d6cb0 <_ZN11CloudConfig16stateStartUpdateEv+0x44>)
   d6c72:	4810      	ldr	r0, [pc, #64]	; (d6cb4 <_ZN11CloudConfig16stateStartUpdateEv+0x48>)
   d6c74:	f7fd fb8c 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6c78:	6860      	ldr	r0, [r4, #4]
   d6c7a:	6803      	ldr	r3, [r0, #0]
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	4798      	blx	r3
   d6c80:	4605      	mov	r5, r0
   d6c82:	f003 fa94 	bl	da1ae <_ZN9TimeClass3nowEv>
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6c86:	2301      	movs	r3, #1
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6c88:	60a8      	str	r0, [r5, #8]
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6c8a:	6223      	str	r3, [r4, #32]
   d6c8c:	f001 fc0c 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6c90:	4b09      	ldr	r3, [pc, #36]	; (d6cb8 <_ZN11CloudConfig16stateStartUpdateEv+0x4c>)
    stateTime = millis();
   d6c92:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6c94:	9300      	str	r3, [sp, #0]
   d6c96:	4669      	mov	r1, sp
   d6c98:	2300      	movs	r3, #0
   d6c9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c9e:	9301      	str	r3, [sp, #4]
   d6ca0:	f7ff fefa 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    updateMethod->startUpdate();
   d6ca4:	68a0      	ldr	r0, [r4, #8]
   d6ca6:	6803      	ldr	r3, [r0, #0]
   d6ca8:	689b      	ldr	r3, [r3, #8]
   d6caa:	4798      	blx	r3
}
   d6cac:	b003      	add	sp, #12
   d6cae:	bd30      	pop	{r4, r5, pc}
   d6cb0:	000ddcc9 	.word	0x000ddcc9
   d6cb4:	2003e618 	.word	0x2003e618
   d6cb8:	000d6cbd 	.word	0x000d6cbd

000d6cbc <_ZN11CloudConfig23stateWaitUpdateCompleteEv>:
void CloudConfig::stateWaitUpdateComplete() {
   d6cbc:	b513      	push	{r0, r1, r4, lr}
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6cbe:	6a03      	ldr	r3, [r0, #32]
   d6cc0:	2b01      	cmp	r3, #1
void CloudConfig::stateWaitUpdateComplete() {
   d6cc2:	4604      	mov	r4, r0
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6cc4:	d11b      	bne.n	d6cfe <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x42>
   d6cc6:	f001 fbef 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime > updateMethod->updateTimeoutMs) {
   d6cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6ccc:	1ac0      	subs	r0, r0, r3
   d6cce:	68a3      	ldr	r3, [r4, #8]
   d6cd0:	689b      	ldr	r3, [r3, #8]
   d6cd2:	4298      	cmp	r0, r3
   d6cd4:	d911      	bls.n	d6cfa <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x3e>
            Log.info("stateWaitUpdateComplete timeout");
   d6cd6:	490c      	ldr	r1, [pc, #48]	; (d6d08 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x4c>)
   d6cd8:	480c      	ldr	r0, [pc, #48]	; (d6d0c <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d6cda:	f7fd fb59 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
            updateDataStatus = UpdateDataStatus::TIMEOUT;
   d6cde:	2304      	movs	r3, #4
   d6ce0:	6223      	str	r3, [r4, #32]
   d6ce2:	f001 fbe1 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d6ce6:	4b0a      	ldr	r3, [pc, #40]	; (d6d10 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x54>)
    stateTime = millis();
   d6ce8:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d6cea:	9300      	str	r3, [sp, #0]
   d6cec:	4669      	mov	r1, sp
   d6cee:	2300      	movs	r3, #0
   d6cf0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	f7ff fecf 	bl	d6a98 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6cfa:	b002      	add	sp, #8
   d6cfc:	bd10      	pop	{r4, pc}
    Log.info("stateWaitUpdateComplete complete");
   d6cfe:	4905      	ldr	r1, [pc, #20]	; (d6d14 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x58>)
   d6d00:	4802      	ldr	r0, [pc, #8]	; (d6d0c <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d6d02:	f7fd fb45 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d6d06:	e7ec      	b.n	d6ce2 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x26>
   d6d08:	000ddcda 	.word	0x000ddcda
   d6d0c:	2003e618 	.word	0x2003e618
   d6d10:	000d6c09 	.word	0x000d6c09
   d6d14:	000ddcfa 	.word	0x000ddcfa

000d6d18 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE>:
        val_(val) {
   d6d18:	4b01      	ldr	r3, [pc, #4]	; (d6d20 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE+0x8>)
   d6d1a:	2200      	movs	r2, #0
   d6d1c:	701a      	strb	r2, [r3, #0]
}
   d6d1e:	4770      	bx	lr
   d6d20:	2003e5f4 	.word	0x2003e5f4

000d6d24 <_ZN16DeviceNameHelper4saveEv>:
}


void DeviceNameHelper::save() {
    // Overridden by DeviceNameHelperEEPROM
}
   d6d24:	4770      	bx	lr

000d6d26 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6d26:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d28:	4603      	mov	r3, r0
	switch (__op)
   d6d2a:	d102      	bne.n	d6d32 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6d2c:	6001      	str	r1, [r0, #0]
      }
   d6d2e:	2000      	movs	r0, #0
   d6d30:	4770      	bx	lr
	  switch (__op)
   d6d32:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6d34:	bf04      	itt	eq
   d6d36:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6d3a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6d3e:	e7f6      	b.n	d6d2e <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6d40 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_>:
    }
}



void DeviceNameHelper::subscriptionHandler(const char *eventName, const char *eventData) {
   d6d40:	b513      	push	{r0, r1, r4, lr}
   d6d42:	4604      	mov	r4, r0

    if (strlen(eventData) < DEVICENAMEHELPER_MAX_NAME_LEN) {
   d6d44:	4610      	mov	r0, r2
   d6d46:	9201      	str	r2, [sp, #4]
   d6d48:	f004 fc5d 	bl	db606 <strlen>
   d6d4c:	6863      	ldr	r3, [r4, #4]
   d6d4e:	9901      	ldr	r1, [sp, #4]
   d6d50:	4602      	mov	r2, r0
   d6d52:	2a1e      	cmp	r2, #30
   d6d54:	f103 000c 	add.w	r0, r3, #12
   d6d58:	d806      	bhi.n	d6d68 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x28>
        // Fits
        strcpy(data->name, eventData);
   d6d5a:	f004 fc2f 	bl	db5bc <strcpy>
    else {
        // Need to truncate
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
    }
    gotResponse = true;
   d6d5e:	2301      	movs	r3, #1
   d6d60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   d6d64:	b002      	add	sp, #8
   d6d66:	bd10      	pop	{r4, pc}
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
   d6d68:	221f      	movs	r2, #31
   d6d6a:	f004 fc66 	bl	db63a <strncpy>
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
   d6d6e:	6863      	ldr	r3, [r4, #4]
   d6d70:	2200      	movs	r2, #0
   d6d72:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   d6d76:	e7f2      	b.n	d6d5e <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x1e>

000d6d78 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d78:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6d7a:	6842      	ldr	r2, [r0, #4]
   d6d7c:	4603      	mov	r3, r0
   d6d7e:	1054      	asrs	r4, r2, #1
   d6d80:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6d84:	07d2      	lsls	r2, r2, #31
   d6d86:	bf48      	it	mi
   d6d88:	590a      	ldrmi	r2, [r1, r4]
   d6d8a:	681b      	ldr	r3, [r3, #0]
      }
   d6d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6d90:	bf48      	it	mi
   d6d92:	58d3      	ldrmi	r3, [r2, r3]
   d6d94:	4718      	bx	r3

000d6d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6d96:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d98:	b538      	push	{r3, r4, r5, lr}
   d6d9a:	4604      	mov	r4, r0
	  switch (__op)
   d6d9c:	d007      	beq.n	d6dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6d9e:	2a03      	cmp	r2, #3
   d6da0:	d011      	beq.n	d6dc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6da2:	2a01      	cmp	r2, #1
   d6da4:	d101      	bne.n	d6daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6da6:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6da8:	6023      	str	r3, [r4, #0]
	}
   d6daa:	2000      	movs	r0, #0
   d6dac:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6dae:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d6db0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6db2:	f7fd f970 	bl	d4096 <_Znwj>
   d6db6:	4603      	mov	r3, r0
   d6db8:	2800      	cmp	r0, #0
   d6dba:	d0f5      	beq.n	d6da8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6dbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d6dc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d6dc4:	e7f0      	b.n	d6da8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6dc6:	6800      	ldr	r0, [r0, #0]
   d6dc8:	2800      	cmp	r0, #0
   d6dca:	d0ee      	beq.n	d6daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6dcc:	210c      	movs	r1, #12
   d6dce:	f003 fd22 	bl	da816 <_ZdlPvj>
   d6dd2:	e7ea      	b.n	d6daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6dd4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM16DeviceNameHelperFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6dd4:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d6dd6:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
   d6dd8:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d6dda:	685c      	ldr	r4, [r3, #4]
   d6ddc:	689d      	ldr	r5, [r3, #8]
   d6dde:	681b      	ldr	r3, [r3, #0]
   d6de0:	6812      	ldr	r2, [r2, #0]
   d6de2:	1066      	asrs	r6, r4, #1
   d6de4:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d6de8:	07e4      	lsls	r4, r4, #31
   d6dea:	bf44      	itt	mi
   d6dec:	59ac      	ldrmi	r4, [r5, r6]
   d6dee:	58e3      	ldrmi	r3, [r4, r3]
      }
   d6df0:	bc70      	pop	{r4, r5, r6}
   d6df2:	4718      	bx	r3

000d6df4 <_ZN16DeviceNameHelperD1Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6df4:	b510      	push	{r4, lr}
   d6df6:	4b06      	ldr	r3, [pc, #24]	; (d6e10 <_ZN16DeviceNameHelperD1Ev+0x1c>)
   d6df8:	4604      	mov	r4, r0
   d6dfa:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d6dfe:	f7fd fa44 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d6e02:	f104 0010 	add.w	r0, r4, #16
   d6e06:	f7fd fa40 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	bd10      	pop	{r4, pc}
   d6e0e:	bf00      	nop
   d6e10:	000dddb4 	.word	0x000dddb4

000d6e14 <_ZN16DeviceNameHelperD0Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d6e14:	b510      	push	{r4, lr}
   d6e16:	4604      	mov	r4, r0
}
   d6e18:	f7ff ffec 	bl	d6df4 <_ZN16DeviceNameHelperD1Ev>
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	2138      	movs	r1, #56	; 0x38
   d6e20:	f003 fcf9 	bl	da816 <_ZdlPvj>
   d6e24:	4620      	mov	r0, r4
   d6e26:	bd10      	pop	{r4, pc}

000d6e28 <_ZN24DeviceNameHelperRetainedD1Ev>:

DeviceNameHelperRetained::DeviceNameHelperRetained() {

}

DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d6e28:	b510      	push	{r4, lr}
   d6e2a:	4b03      	ldr	r3, [pc, #12]	; (d6e38 <_ZN24DeviceNameHelperRetainedD1Ev+0x10>)
   d6e2c:	6003      	str	r3, [r0, #0]
   d6e2e:	4604      	mov	r4, r0
   d6e30:	f7ff ffe0 	bl	d6df4 <_ZN16DeviceNameHelperD1Ev>

}
   d6e34:	4620      	mov	r0, r4
   d6e36:	bd10      	pop	{r4, pc}
   d6e38:	000dddc8 	.word	0x000dddc8

000d6e3c <_ZN24DeviceNameHelperRetainedD0Ev>:
DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d6e3c:	b510      	push	{r4, lr}
   d6e3e:	4604      	mov	r4, r0
}
   d6e40:	f7ff fff2 	bl	d6e28 <_ZN24DeviceNameHelperRetainedD1Ev>
   d6e44:	4620      	mov	r0, r4
   d6e46:	2138      	movs	r1, #56	; 0x38
   d6e48:	f003 fce5 	bl	da816 <_ZdlPvj>
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	bd10      	pop	{r4, pc}

000d6e50 <_ZN16DeviceNameHelper4loopEv>:
    if (stateHandler) {
   d6e50:	6a83      	ldr	r3, [r0, #40]	; 0x28
void DeviceNameHelper::loop() {
   d6e52:	4601      	mov	r1, r0
    if (stateHandler) {
   d6e54:	b113      	cbz	r3, d6e5c <_ZN16DeviceNameHelper4loopEv+0xc>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6e58:	3020      	adds	r0, #32
   d6e5a:	4718      	bx	r3
}
   d6e5c:	4770      	bx	lr
	...

000d6e60 <_ZN16DeviceNameHelperC1Ev>:
DeviceNameHelper::DeviceNameHelper() {
   d6e60:	b530      	push	{r4, r5, lr}
   d6e62:	4a07      	ldr	r2, [pc, #28]	; (d6e80 <_ZN16DeviceNameHelperC1Ev+0x20>)
   d6e64:	6002      	str	r2, [r0, #0]
   d6e66:	2400      	movs	r4, #0
   d6e68:	2200      	movs	r2, #0
   d6e6a:	2500      	movs	r5, #0
   d6e6c:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d6e70:	6042      	str	r2, [r0, #4]
    _Function_base() : _M_manager(nullptr) { }
   d6e72:	6182      	str	r2, [r0, #24]
   d6e74:	6282      	str	r2, [r0, #40]	; 0x28
   d6e76:	6302      	str	r2, [r0, #48]	; 0x30
   d6e78:	8682      	strh	r2, [r0, #52]	; 0x34
   d6e7a:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
}
   d6e7e:	bd30      	pop	{r4, r5, pc}
   d6e80:	000dddb4 	.word	0x000dddb4

000d6e84 <_ZN24DeviceNameHelperRetainedC1Ev>:
DeviceNameHelperRetained::DeviceNameHelperRetained() {
   d6e84:	b508      	push	{r3, lr}
   d6e86:	4603      	mov	r3, r0
   d6e88:	f7ff ffea 	bl	d6e60 <_ZN16DeviceNameHelperC1Ev>
   d6e8c:	4a01      	ldr	r2, [pc, #4]	; (d6e94 <_ZN24DeviceNameHelperRetainedC1Ev+0x10>)
   d6e8e:	601a      	str	r2, [r3, #0]
}
   d6e90:	4618      	mov	r0, r3
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	000dddc8 	.word	0x000dddc8

000d6e98 <_ZN24DeviceNameHelperRetained8instanceEv>:
DeviceNameHelperRetained &DeviceNameHelperRetained::instance() {
   d6e98:	b510      	push	{r4, lr}
    if (!_instance) {
   d6e9a:	4c06      	ldr	r4, [pc, #24]	; (d6eb4 <_ZN24DeviceNameHelperRetained8instanceEv+0x1c>)
   d6e9c:	6823      	ldr	r3, [r4, #0]
   d6e9e:	b93b      	cbnz	r3, d6eb0 <_ZN24DeviceNameHelperRetained8instanceEv+0x18>
        _instance = new DeviceNameHelperRetained();
   d6ea0:	2038      	movs	r0, #56	; 0x38
   d6ea2:	f7fd f8f8 	bl	d4096 <_Znwj>
   d6ea6:	4601      	mov	r1, r0
   d6ea8:	b108      	cbz	r0, d6eae <_ZN24DeviceNameHelperRetained8instanceEv+0x16>
   d6eaa:	f7ff ffeb 	bl	d6e84 <_ZN24DeviceNameHelperRetainedC1Ev>
   d6eae:	6021      	str	r1, [r4, #0]
}
   d6eb0:	6820      	ldr	r0, [r4, #0]
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	2003e600 	.word	0x2003e600

000d6eb8 <_ZNKSt8functionIFvPKcEEclES1_>:
    function<_Res(_ArgTypes...)>::
   d6eb8:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d6eba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6ebc:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d6ebe:	b90a      	cbnz	r2, d6ec4 <_ZNKSt8functionIFvPKcEEclES1_+0xc>
	__throw_bad_function_call();
   d6ec0:	f003 fcaf 	bl	da822 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ec4:	68c3      	ldr	r3, [r0, #12]
   d6ec6:	a901      	add	r1, sp, #4
   d6ec8:	4798      	blx	r3
    }
   d6eca:	b003      	add	sp, #12
   d6ecc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ed0 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>:
DeviceNameHelper &DeviceNameHelper::withNameCallback(std::function<void(const char *)> nameCallback) {
   d6ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6ed2:	2300      	movs	r3, #0
   d6ed4:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6ed6:	688b      	ldr	r3, [r1, #8]
   d6ed8:	4604      	mov	r4, r0
   d6eda:	460d      	mov	r5, r1
    this->nameCallback = nameCallback;
   d6edc:	f100 0610 	add.w	r6, r0, #16
      if (static_cast<bool>(__x))
   d6ee0:	b133      	cbz	r3, d6ef0 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ee2:	2202      	movs	r2, #2
   d6ee4:	4668      	mov	r0, sp
   d6ee6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ee8:	68eb      	ldr	r3, [r5, #12]
   d6eea:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6eec:	68ab      	ldr	r3, [r5, #8]
   d6eee:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6ef0:	4631      	mov	r1, r6
   d6ef2:	4668      	mov	r0, sp
   d6ef4:	f7fe ffc8 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ef8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6efa:	69a2      	ldr	r2, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d6efc:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6efe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6f00:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6f02:	4668      	mov	r0, sp
   d6f04:	69e2      	ldr	r2, [r4, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f06:	61e3      	str	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6f08:	9203      	str	r2, [sp, #12]
   d6f0a:	f7fd f9be 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d6f0e:	4620      	mov	r0, r4
   d6f10:	b004      	add	sp, #16
   d6f12:	bd70      	pop	{r4, r5, r6, pc}

000d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6f16:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d6f1a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6f1c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6f1e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d6f20:	b90a      	cbnz	r2, d6f26 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d6f22:	07d9      	lsls	r1, r3, #31
   d6f24:	d505      	bpl.n	d6f32 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6f26:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d6f2a:	4b0b      	ldr	r3, [pc, #44]	; (d6f58 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d6f2c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6f2e:	4b0b      	ldr	r3, [pc, #44]	; (d6f5c <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d6f30:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6f32:	4621      	mov	r1, r4
   d6f34:	4668      	mov	r0, sp
   d6f36:	f7fe ffa7 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f3a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6f3c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f3e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f40:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6f42:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6f44:	4668      	mov	r0, sp
   d6f46:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f48:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6f4a:	9203      	str	r2, [sp, #12]
   d6f4c:	f7fd f99d 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d6f50:	4620      	mov	r0, r4
   d6f52:	b004      	add	sp, #16
   d6f54:	bd10      	pop	{r4, pc}
   d6f56:	bf00      	nop
   d6f58:	000d6d79 	.word	0x000d6d79
   d6f5c:	000d6d27 	.word	0x000d6d27

000d6f60 <_ZN16DeviceNameHelper11commonSetupEv>:
void DeviceNameHelper::commonSetup() {
   d6f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f62:	4604      	mov	r4, r0
    if (data->magic != DATA_MAGIC || data->size != sizeof(DeviceNameHelperData)) {
   d6f64:	6840      	ldr	r0, [r0, #4]
   d6f66:	4d0d      	ldr	r5, [pc, #52]	; (d6f9c <_ZN16DeviceNameHelper11commonSetupEv+0x3c>)
   d6f68:	6802      	ldr	r2, [r0, #0]
   d6f6a:	42aa      	cmp	r2, r5
   d6f6c:	d102      	bne.n	d6f74 <_ZN16DeviceNameHelper11commonSetupEv+0x14>
   d6f6e:	7903      	ldrb	r3, [r0, #4]
   d6f70:	2b2c      	cmp	r3, #44	; 0x2c
   d6f72:	d008      	beq.n	d6f86 <_ZN16DeviceNameHelper11commonSetupEv+0x26>
        memset(data, 0, sizeof(DeviceNameHelperData));     
   d6f74:	262c      	movs	r6, #44	; 0x2c
   d6f76:	4632      	mov	r2, r6
   d6f78:	2100      	movs	r1, #0
   d6f7a:	f004 fae9 	bl	db550 <memset>
        data->magic = DATA_MAGIC;
   d6f7e:	6863      	ldr	r3, [r4, #4]
   d6f80:	601d      	str	r5, [r3, #0]
        data->size = (uint8_t) sizeof(DeviceNameHelperData);
   d6f82:	6863      	ldr	r3, [r4, #4]
   d6f84:	711e      	strb	r6, [r3, #4]
    stateHandler = &DeviceNameHelper::stateStart;
   d6f86:	4b06      	ldr	r3, [pc, #24]	; (d6fa0 <_ZN16DeviceNameHelper11commonSetupEv+0x40>)
   d6f88:	9300      	str	r3, [sp, #0]
   d6f8a:	4669      	mov	r1, sp
   d6f8c:	2300      	movs	r3, #0
   d6f8e:	f104 0020 	add.w	r0, r4, #32
   d6f92:	9301      	str	r3, [sp, #4]
   d6f94:	f7ff ffbe 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6f98:	b002      	add	sp, #8
   d6f9a:	bd70      	pop	{r4, r5, r6, pc}
   d6f9c:	7787a2f2 	.word	0x7787a2f2
   d6fa0:	000d6fad 	.word	0x000d6fad

000d6fa4 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>:
    this->data = retainedData;
   d6fa4:	6041      	str	r1, [r0, #4]
    commonSetup();
   d6fa6:	f7ff bfdb 	b.w	d6f60 <_ZN16DeviceNameHelper11commonSetupEv>
	...

000d6fac <_ZN16DeviceNameHelper10stateStartEv>:
void DeviceNameHelper::stateStart() {
   d6fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (data->name[0]) {
   d6fae:	6841      	ldr	r1, [r0, #4]
   d6fb0:	7b0b      	ldrb	r3, [r1, #12]
void DeviceNameHelper::stateStart() {
   d6fb2:	4604      	mov	r4, r0
   d6fb4:	f100 0520 	add.w	r5, r0, #32
    if (data->name[0]) {
   d6fb8:	b193      	cbz	r3, d6fe0 <_ZN16DeviceNameHelper10stateStartEv+0x34>
        if (nameCallback) {
   d6fba:	6983      	ldr	r3, [r0, #24]
   d6fbc:	b11b      	cbz	r3, d6fc6 <_ZN16DeviceNameHelper10stateStartEv+0x1a>
            nameCallback(data->name);
   d6fbe:	310c      	adds	r1, #12
   d6fc0:	3010      	adds	r0, #16
   d6fc2:	f7ff ff79 	bl	d6eb8 <_ZNKSt8functionIFvPKcEEclES1_>
        stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d6fc6:	4b0a      	ldr	r3, [pc, #40]	; (d6ff0 <_ZN16DeviceNameHelper10stateStartEv+0x44>)
   d6fc8:	9300      	str	r3, [sp, #0]
   d6fca:	4669      	mov	r1, sp
   d6fcc:	2300      	movs	r3, #0
   d6fce:	4628      	mov	r0, r5
   d6fd0:	9301      	str	r3, [sp, #4]
   d6fd2:	f7ff ff9f 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6fd6:	f001 fa67 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d6fda:	6320      	str	r0, [r4, #48]	; 0x30
}
   d6fdc:	b003      	add	sp, #12
   d6fde:	bd30      	pop	{r4, r5, pc}
    stateHandler = &DeviceNameHelper::stateSubscribe;
   d6fe0:	4a04      	ldr	r2, [pc, #16]	; (d6ff4 <_ZN16DeviceNameHelper10stateStartEv+0x48>)
   d6fe2:	4669      	mov	r1, sp
   d6fe4:	4628      	mov	r0, r5
   d6fe6:	e9cd 2300 	strd	r2, r3, [sp]
   d6fea:	f7ff ff93 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6fee:	e7f5      	b.n	d6fdc <_ZN16DeviceNameHelper10stateStartEv+0x30>
   d6ff0:	000d7149 	.word	0x000d7149
   d6ff4:	000d71d1 	.word	0x000d71d1

000d6ff8 <_ZN16DeviceNameHelper18stateWaitConnectedEv>:
void DeviceNameHelper::stateWaitConnected() {
   d6ff8:	b513      	push	{r0, r1, r4, lr}
   d6ffa:	4604      	mov	r4, r0
   d6ffc:	f001 fc52 	bl	d88a4 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d7000:	b170      	cbz	r0, d7020 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
   d7002:	f003 f8b7 	bl	da174 <_ZN9TimeClass7isValidEv>
   d7006:	b158      	cbz	r0, d7020 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
    stateHandler = &DeviceNameHelper::stateWaitRequest;
   d7008:	4b06      	ldr	r3, [pc, #24]	; (d7024 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x2c>)
   d700a:	9300      	str	r3, [sp, #0]
   d700c:	4669      	mov	r1, sp
   d700e:	2300      	movs	r3, #0
   d7010:	f104 0020 	add.w	r0, r4, #32
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	f7ff ff7d 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d701a:	f001 fa45 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d701e:	6320      	str	r0, [r4, #48]	; 0x30
}
   d7020:	b002      	add	sp, #8
   d7022:	bd10      	pop	{r4, pc}
   d7024:	000d7029 	.word	0x000d7029

000d7028 <_ZN16DeviceNameHelper16stateWaitRequestEv>:
void DeviceNameHelper::stateWaitRequest() {
   d7028:	b530      	push	{r4, r5, lr}
   d702a:	4605      	mov	r5, r0
   d702c:	b085      	sub	sp, #20
   d702e:	f001 fa3b 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < POST_CONNECT_WAIT_MS) {
   d7032:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7034:	1ac0      	subs	r0, r0, r3
   d7036:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d703a:	d329      	bcc.n	d7090 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x68>
    gotResponse = false;
   d703c:	4b15      	ldr	r3, [pc, #84]	; (d7094 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d703e:	4916      	ldr	r1, [pc, #88]	; (d7098 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x70>)
   d7040:	781b      	ldrb	r3, [r3, #0]
   d7042:	f88d 3000 	strb.w	r3, [sp]
   d7046:	2200      	movs	r2, #0
   d7048:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
   d704c:	233c      	movs	r3, #60	; 0x3c
   d704e:	a802      	add	r0, sp, #8
   d7050:	f001 fed0 	bl	d8df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d7054:	9c03      	ldr	r4, [sp, #12]
   d7056:	b17c      	cbz	r4, d7078 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
      if (--_M_use_count == 0)
   d7058:	6863      	ldr	r3, [r4, #4]
   d705a:	3b01      	subs	r3, #1
   d705c:	6063      	str	r3, [r4, #4]
   d705e:	b95b      	cbnz	r3, d7078 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
          _M_dispose();
   d7060:	6823      	ldr	r3, [r4, #0]
   d7062:	4620      	mov	r0, r4
   d7064:	689b      	ldr	r3, [r3, #8]
   d7066:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7068:	68a3      	ldr	r3, [r4, #8]
   d706a:	3b01      	subs	r3, #1
   d706c:	60a3      	str	r3, [r4, #8]
   d706e:	b91b      	cbnz	r3, d7078 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
            _M_destroy();
   d7070:	6823      	ldr	r3, [r4, #0]
   d7072:	4620      	mov	r0, r4
   d7074:	68db      	ldr	r3, [r3, #12]
   d7076:	4798      	blx	r3
    stateHandler = &DeviceNameHelper::stateWaitResponse;
   d7078:	4b08      	ldr	r3, [pc, #32]	; (d709c <_ZN16DeviceNameHelper16stateWaitRequestEv+0x74>)
   d707a:	9302      	str	r3, [sp, #8]
   d707c:	a902      	add	r1, sp, #8
   d707e:	2300      	movs	r3, #0
   d7080:	f105 0020 	add.w	r0, r5, #32
   d7084:	9303      	str	r3, [sp, #12]
   d7086:	f7ff ff45 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d708a:	f001 fa0d 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d708e:	6328      	str	r0, [r5, #48]	; 0x30
}
   d7090:	b005      	add	sp, #20
   d7092:	bd30      	pop	{r4, r5, pc}
   d7094:	2003e5fc 	.word	0x2003e5fc
   d7098:	000ddd94 	.word	0x000ddd94
   d709c:	000d70a1 	.word	0x000d70a1

000d70a0 <_ZN16DeviceNameHelper17stateWaitResponseEv>:
void DeviceNameHelper::stateWaitResponse() {
   d70a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (gotResponse) {
   d70a2:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
void DeviceNameHelper::stateWaitResponse() {
   d70a6:	4604      	mov	r4, r0
    if (gotResponse) {
   d70a8:	b31d      	cbz	r5, d70f2 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x52>
        if (data->name[0]) {
   d70aa:	6846      	ldr	r6, [r0, #4]
   d70ac:	7b33      	ldrb	r3, [r6, #12]
   d70ae:	f100 0520 	add.w	r5, r0, #32
   d70b2:	b1db      	cbz	r3, d70ec <_ZN16DeviceNameHelper17stateWaitResponseEv+0x4c>
            data->lastCheck = Time.now();
   d70b4:	f003 f87b 	bl	da1ae <_ZN9TimeClass3nowEv>
   d70b8:	60b0      	str	r0, [r6, #8]
            save();
   d70ba:	6823      	ldr	r3, [r4, #0]
   d70bc:	4620      	mov	r0, r4
   d70be:	689b      	ldr	r3, [r3, #8]
   d70c0:	4798      	blx	r3
            if (nameCallback) {
   d70c2:	69a3      	ldr	r3, [r4, #24]
   d70c4:	b12b      	cbz	r3, d70d2 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x32>
                nameCallback(data->name);
   d70c6:	6861      	ldr	r1, [r4, #4]
   d70c8:	f104 0010 	add.w	r0, r4, #16
   d70cc:	310c      	adds	r1, #12
   d70ce:	f7ff fef3 	bl	d6eb8 <_ZNKSt8functionIFvPKcEEclES1_>
            stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d70d2:	4b0f      	ldr	r3, [pc, #60]	; (d7110 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x70>)
   d70d4:	9300      	str	r3, [sp, #0]
   d70d6:	2300      	movs	r3, #0
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d70d8:	9301      	str	r3, [sp, #4]
   d70da:	4669      	mov	r1, sp
   d70dc:	4628      	mov	r0, r5
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d70de:	f7ff ff19 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d70e2:	f001 f9e1 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d70e6:	6320      	str	r0, [r4, #48]	; 0x30
}
   d70e8:	b002      	add	sp, #8
   d70ea:	bd70      	pop	{r4, r5, r6, pc}
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d70ec:	4a09      	ldr	r2, [pc, #36]	; (d7114 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d70ee:	9200      	str	r2, [sp, #0]
   d70f0:	e7f2      	b.n	d70d8 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x38>
   d70f2:	f001 f9d9 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RESPONSE_WAIT_MS) {
   d70f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d70f8:	1ac0      	subs	r0, r0, r3
   d70fa:	f643 2397 	movw	r3, #14999	; 0x3a97
   d70fe:	4298      	cmp	r0, r3
   d7100:	d9f2      	bls.n	d70e8 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x48>
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d7102:	4b04      	ldr	r3, [pc, #16]	; (d7114 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d7104:	4669      	mov	r1, sp
   d7106:	e9cd 3500 	strd	r3, r5, [sp]
   d710a:	f104 0020 	add.w	r0, r4, #32
   d710e:	e7e6      	b.n	d70de <_ZN16DeviceNameHelper17stateWaitResponseEv+0x3e>
   d7110:	000d7149 	.word	0x000d7149
   d7114:	000d7119 	.word	0x000d7119

000d7118 <_ZN16DeviceNameHelper14stateWaitRetryEv>:
void DeviceNameHelper::stateWaitRetry() {
   d7118:	b513      	push	{r0, r1, r4, lr}
   d711a:	4604      	mov	r4, r0
   d711c:	f001 f9c4 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RETRY_WAIT_MS) {
   d7120:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7122:	1ac0      	subs	r0, r0, r3
   d7124:	4b06      	ldr	r3, [pc, #24]	; (d7140 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x28>)
   d7126:	4298      	cmp	r0, r3
   d7128:	d908      	bls.n	d713c <_ZN16DeviceNameHelper14stateWaitRetryEv+0x24>
        stateHandler = &DeviceNameHelper::stateWaitConnected;
   d712a:	4b06      	ldr	r3, [pc, #24]	; (d7144 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x2c>)
   d712c:	9300      	str	r3, [sp, #0]
   d712e:	4669      	mov	r1, sp
   d7130:	2300      	movs	r3, #0
   d7132:	f104 0020 	add.w	r0, r4, #32
   d7136:	9301      	str	r3, [sp, #4]
   d7138:	f7ff feec 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d713c:	b002      	add	sp, #8
   d713e:	bd10      	pop	{r4, pc}
   d7140:	000493df 	.word	0x000493df
   d7144:	000d6ff9 	.word	0x000d6ff9

000d7148 <_ZN16DeviceNameHelper16stateWaitRecheckEv>:
void DeviceNameHelper::stateWaitRecheck() {
   d7148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d714a:	4604      	mov	r4, r0
   d714c:	f001 f9ac 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d7150:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7152:	1ac0      	subs	r0, r0, r3
   d7154:	f242 730f 	movw	r3, #9999	; 0x270f
   d7158:	4298      	cmp	r0, r3
   d715a:	d91e      	bls.n	d719a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d715c:	f001 f9a4 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
    if (forceCheck) {
   d7160:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
    stateTime = millis();
   d7164:	6320      	str	r0, [r4, #48]	; 0x30
    if (forceCheck) {
   d7166:	b15d      	cbz	r5, d7180 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x38>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d7168:	4a18      	ldr	r2, [pc, #96]	; (d71cc <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
        forceCheck = false;
   d716a:	2300      	movs	r3, #0
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d716c:	e9cd 2300 	strd	r2, r3, [sp]
        forceCheck = false;
   d7170:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d7174:	4669      	mov	r1, sp
   d7176:	f104 0020 	add.w	r0, r4, #32
   d717a:	f7ff fecb 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d717e:	e00c      	b.n	d719a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
    if (checkPeriod.count() == 0) {
   d7180:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d7184:	4313      	orrs	r3, r2
   d7186:	d10a      	bne.n	d719e <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x56>
	if (_M_manager)
   d7188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d718a:	b133      	cbz	r3, d719a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = 0;
   d718c:	f104 0120 	add.w	r1, r4, #32
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d7190:	2203      	movs	r2, #3
   d7192:	4608      	mov	r0, r1
   d7194:	4798      	blx	r3
	    _M_invoker = nullptr;
   d7196:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
}
   d719a:	b003      	add	sp, #12
   d719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Time.isValid() && (data->lastCheck + checkPeriod.count()) < Time.now()) {
   d719e:	f002 ffe9 	bl	da174 <_ZN9TimeClass7isValidEv>
   d71a2:	2800      	cmp	r0, #0
   d71a4:	d0f9      	beq.n	d719a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d71a6:	6863      	ldr	r3, [r4, #4]
   d71a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
   d71ac:	689b      	ldr	r3, [r3, #8]
   d71ae:	18f6      	adds	r6, r6, r3
   d71b0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   d71b4:	f002 fffb 	bl	da1ae <_ZN9TimeClass3nowEv>
   d71b8:	17c1      	asrs	r1, r0, #31
   d71ba:	4286      	cmp	r6, r0
   d71bc:	eb77 0301 	sbcs.w	r3, r7, r1
   d71c0:	daeb      	bge.n	d719a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d71c2:	4b02      	ldr	r3, [pc, #8]	; (d71cc <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
   d71c4:	e9cd 3500 	strd	r3, r5, [sp]
   d71c8:	e7d4      	b.n	d7174 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x2c>
   d71ca:	bf00      	nop
   d71cc:	000d71d1 	.word	0x000d71d1

000d71d0 <_ZN16DeviceNameHelper14stateSubscribeEv>:
void DeviceNameHelper::stateSubscribe() {
   d71d0:	b530      	push	{r4, r5, lr}
    if (!hasSubscribed) {
   d71d2:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
void DeviceNameHelper::stateSubscribe() {
   d71d6:	b08b      	sub	sp, #44	; 0x2c
   d71d8:	4604      	mov	r4, r0
    if (!hasSubscribed) {
   d71da:	bb6d      	cbnz	r5, d7238 <_ZN16DeviceNameHelper14stateSubscribeEv+0x68>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71dc:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d71de:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71e0:	f7fc ff59 	bl	d4096 <_Znwj>
   d71e4:	b118      	cbz	r0, d71ee <_ZN16DeviceNameHelper14stateSubscribeEv+0x1e>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d71e6:	4b1a      	ldr	r3, [pc, #104]	; (d7250 <_ZN16DeviceNameHelper14stateSubscribeEv+0x80>)
   d71e8:	6084      	str	r4, [r0, #8]
   d71ea:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d71ee:	4b19      	ldr	r3, [pc, #100]	; (d7254 <_ZN16DeviceNameHelper14stateSubscribeEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71f0:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d71f2:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d71f4:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d71f6:	4b18      	ldr	r3, [pc, #96]	; (d7258 <_ZN16DeviceNameHelper14stateSubscribeEv+0x88>)
   d71f8:	9304      	str	r3, [sp, #16]
   d71fa:	a806      	add	r0, sp, #24
   d71fc:	f7ff fba8 	bl	d6950 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d7200:	9b08      	ldr	r3, [sp, #32]
   d7202:	b183      	cbz	r3, d7226 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
            auto wrapper = new wiring_event_handler_t(handler);
   d7204:	2010      	movs	r0, #16
   d7206:	f7fc ff46 	bl	d4096 <_Znwj>
   d720a:	4605      	mov	r5, r0
   d720c:	b158      	cbz	r0, d7226 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
   d720e:	a906      	add	r1, sp, #24
   d7210:	f7ff fb9e 	bl	d6950 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d7214:	2300      	movs	r3, #0
   d7216:	e9cd 3300 	strd	r3, r3, [sp]
   d721a:	4910      	ldr	r1, [pc, #64]	; (d725c <_ZN16DeviceNameHelper14stateSubscribeEv+0x8c>)
   d721c:	4810      	ldr	r0, [pc, #64]	; (d7260 <_ZN16DeviceNameHelper14stateSubscribeEv+0x90>)
   d721e:	2301      	movs	r3, #1
   d7220:	462a      	mov	r2, r5
   d7222:	f001 fb57 	bl	d88d4 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d7226:	a806      	add	r0, sp, #24
   d7228:	f7fd f82f 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d722c:	a802      	add	r0, sp, #8
   d722e:	f7fd f82c 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        hasSubscribed = true;
   d7232:	2301      	movs	r3, #1
   d7234:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    stateHandler = &DeviceNameHelper::stateWaitConnected;
   d7238:	4b0a      	ldr	r3, [pc, #40]	; (d7264 <_ZN16DeviceNameHelper14stateSubscribeEv+0x94>)
   d723a:	9306      	str	r3, [sp, #24]
   d723c:	a906      	add	r1, sp, #24
   d723e:	2300      	movs	r3, #0
   d7240:	f104 0020 	add.w	r0, r4, #32
   d7244:	9307      	str	r3, [sp, #28]
   d7246:	f7ff fe65 	bl	d6f14 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d724a:	b00b      	add	sp, #44	; 0x2c
   d724c:	bd30      	pop	{r4, r5, pc}
   d724e:	bf00      	nop
   d7250:	000d6d41 	.word	0x000d6d41
   d7254:	000d6dd5 	.word	0x000d6dd5
   d7258:	000d6d97 	.word	0x000d6d97
   d725c:	000d8bf3 	.word	0x000d8bf3
   d7260:	000ddd94 	.word	0x000ddd94
   d7264:	000d6ff9 	.word	0x000d6ff9

000d7268 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d7268:	4b01      	ldr	r3, [pc, #4]	; (d7270 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d726a:	2200      	movs	r2, #0
   d726c:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d726e:	4770      	bx	lr
   d7270:	2003e5fc 	.word	0x2003e5fc

000d7274 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d7274:	4b03      	ldr	r3, [pc, #12]	; (d7284 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d7276:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d7278:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d727a:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d727e:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d7282:	4770      	bx	lr
   d7284:	40a00000 	.word	0x40a00000

000d7288 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d7288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d728c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d7358 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d7290:	9101      	str	r1, [sp, #4]
   d7292:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d7294:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d7296:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d729a:	9b01      	ldr	r3, [sp, #4]
   d729c:	429d      	cmp	r5, r3
   d729e:	d02f      	beq.n	d7300 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d72a0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d72a2:	f003 fa5b 	bl	da75c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d72a6:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d72aa:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d72ac:	f003 fd32 	bl	dad14 <__aeabi_i2d>
   d72b0:	4642      	mov	r2, r8
   d72b2:	464b      	mov	r3, r9
   d72b4:	4606      	mov	r6, r0
   d72b6:	460f      	mov	r7, r1
   d72b8:	f003 fbde 	bl	daa78 <__aeabi_dsub>
   d72bc:	4652      	mov	r2, sl
   d72be:	465b      	mov	r3, fp
   d72c0:	f003 fd92 	bl	dade8 <__aeabi_dmul>
   d72c4:	4642      	mov	r2, r8
   d72c6:	464b      	mov	r3, r9
   d72c8:	f003 fbd8 	bl	daa7c <__adddf3>
   d72cc:	4602      	mov	r2, r0
   d72ce:	460b      	mov	r3, r1
   d72d0:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d72d4:	4630      	mov	r0, r6
   d72d6:	4639      	mov	r1, r7
   d72d8:	f003 fbce 	bl	daa78 <__aeabi_dsub>
   d72dc:	4602      	mov	r2, r0
   d72de:	460b      	mov	r3, r1
   d72e0:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d72e4:	f003 fd80 	bl	dade8 <__aeabi_dmul>
   d72e8:	4602      	mov	r2, r0
   d72ea:	460b      	mov	r3, r1
   d72ec:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d72f0:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d72f4:	f003 fbc2 	bl	daa7c <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d72f8:	3501      	adds	r5, #1
    sumI += sqI;
   d72fa:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d72fe:	e7cc      	b.n	d729a <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d7300:	a313      	add	r3, pc, #76	; (adr r3, d7350 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d7302:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7306:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d730a:	f003 fd6d 	bl	dade8 <__aeabi_dmul>
   d730e:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7310:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d7312:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7314:	f003 fcee 	bl	dacf4 <__aeabi_ui2d>
   d7318:	4602      	mov	r2, r0
   d731a:	460b      	mov	r3, r1
   d731c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d7320:	f003 fe8c 	bl	db03c <__aeabi_ddiv>
   d7324:	ec41 0b10 	vmov	d0, r0, r1
   d7328:	f003 fa7e 	bl	da828 <sqrt>
   d732c:	4632      	mov	r2, r6
   d732e:	463b      	mov	r3, r7
   d7330:	ec51 0b10 	vmov	r0, r1, d0
   d7334:	f003 fd58 	bl	dade8 <__aeabi_dmul>
   d7338:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d733c:	2200      	movs	r2, #0
   d733e:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7340:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d7344:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d7348:	b003      	add	sp, #12
   d734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d734e:	bf00      	nop
   d7350:	66666666 	.word	0x66666666
   d7354:	3f4a6666 	.word	0x3f4a6666
   d7358:	3f300000 	.word	0x3f300000

000d735c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d735c:	4770      	bx	lr

000d735e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d735e:	b510      	push	{r4, lr}
}
   d7360:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7362:	4604      	mov	r4, r0
}
   d7364:	f003 fa57 	bl	da816 <_ZdlPvj>
   d7368:	4620      	mov	r0, r4
   d736a:	bd10      	pop	{r4, pc}

000d736c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d736c:	6803      	ldr	r3, [r0, #0]
   d736e:	b2c9      	uxtb	r1, r1
   d7370:	689b      	ldr	r3, [r3, #8]
   d7372:	4718      	bx	r3

000d7374 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7374:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7376:	4d03      	ldr	r5, [pc, #12]	; (d7384 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7378:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d737c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7380:	bd30      	pop	{r4, r5, pc}
   d7382:	bf00      	nop
   d7384:	000dde08 	.word	0x000dde08

000d7388 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7388:	6840      	ldr	r0, [r0, #4]
   d738a:	f001 bf25 	b.w	d91d8 <_ZN7TwoWire5beginEv>

000d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d738e:	b510      	push	{r4, lr}
   d7390:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7392:	6800      	ldr	r0, [r0, #0]
   d7394:	f001 ff63 	bl	d925e <_ZN7TwoWire6unlockEv>
   d7398:	4620      	mov	r0, r4
   d739a:	bd10      	pop	{r4, pc}

000d739c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73a0:	b08a      	sub	sp, #40	; 0x28
   d73a2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d73a4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73a6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d73a8:	f001 ff50 	bl	d924c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d73ac:	221e      	movs	r2, #30
   d73ae:	2100      	movs	r1, #0
   d73b0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d73b2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d73b4:	f004 f8cc 	bl	db550 <memset>
		size_t framAddr = 0;
   d73b8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d73ba:	b1ef      	cbz	r7, d73f8 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d73bc:	6823      	ldr	r3, [r4, #0]
   d73be:	2f1e      	cmp	r7, #30
   d73c0:	46b8      	mov	r8, r7
   d73c2:	bf28      	it	cs
   d73c4:	f04f 081e 	movcs.w	r8, #30
   d73c8:	68dd      	ldr	r5, [r3, #12]
   d73ca:	aa02      	add	r2, sp, #8
   d73cc:	4643      	mov	r3, r8
   d73ce:	4631      	mov	r1, r6
   d73d0:	4620      	mov	r0, r4
   d73d2:	47a8      	blx	r5
			if (!result) {
   d73d4:	4605      	mov	r5, r0
   d73d6:	b958      	cbnz	r0, d73f0 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d73d8:	480a      	ldr	r0, [pc, #40]	; (d7404 <_ZN6MB85RC5eraseEv+0x68>)
   d73da:	490b      	ldr	r1, [pc, #44]	; (d7408 <_ZN6MB85RC5eraseEv+0x6c>)
   d73dc:	4632      	mov	r2, r6
   d73de:	f7fc ffd7 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d73e2:	a801      	add	r0, sp, #4
   d73e4:	f7ff ffd3 	bl	d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d73e8:	4628      	mov	r0, r5
   d73ea:	b00a      	add	sp, #40	; 0x28
   d73ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d73f0:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d73f4:	4446      	add	r6, r8
		while(totalLen > 0) {
   d73f6:	e7e0      	b.n	d73ba <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d73f8:	a801      	add	r0, sp, #4
   d73fa:	f7ff ffc8 	bl	d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d73fe:	2501      	movs	r5, #1
   d7400:	e7f2      	b.n	d73e8 <_ZN6MB85RC5eraseEv+0x4c>
   d7402:	bf00      	nop
   d7404:	2003e618 	.word	0x2003e618
   d7408:	000dddd4 	.word	0x000dddd4

000d740c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d740c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7410:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7412:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7414:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7416:	460d      	mov	r5, r1
   d7418:	4616      	mov	r6, r2
   d741a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d741c:	f001 ff16 	bl	d924c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7420:	b1a7      	cbz	r7, d744c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7422:	68e1      	ldr	r1, [r4, #12]
   d7424:	6860      	ldr	r0, [r4, #4]
   d7426:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d742a:	f001 ff08 	bl	d923e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d742e:	0a29      	lsrs	r1, r5, #8
   d7430:	6860      	ldr	r0, [r4, #4]
   d7432:	f7ff ff9b 	bl	d736c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7436:	4629      	mov	r1, r5
   d7438:	6860      	ldr	r0, [r4, #4]
   d743a:	f7ff ff97 	bl	d736c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d743e:	6860      	ldr	r0, [r4, #4]
   d7440:	2100      	movs	r1, #0
   d7442:	f001 feff 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7446:	b148      	cbz	r0, d745c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7448:	2400      	movs	r4, #0
   d744a:	e000      	b.n	d744e <_ZN6MB85RC8readDataEjPhj+0x42>
   d744c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d744e:	a801      	add	r0, sp, #4
   d7450:	f7ff ff9d 	bl	d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7454:	4620      	mov	r0, r4
   d7456:	b003      	add	sp, #12
   d7458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d745c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d745e:	7b21      	ldrb	r1, [r4, #12]
   d7460:	6860      	ldr	r0, [r4, #4]
   d7462:	46b8      	mov	r8, r7
   d7464:	bf28      	it	cs
   d7466:	f04f 0820 	movcs.w	r8, #32
   d746a:	2301      	movs	r3, #1
   d746c:	4642      	mov	r2, r8
   d746e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7472:	f001 fece 	bl	d9212 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7476:	f003 f9a1 	bl	da7bc <_Z19__fetch_global_Wirev>
   d747a:	6803      	ldr	r3, [r0, #0]
   d747c:	691b      	ldr	r3, [r3, #16]
   d747e:	4798      	blx	r3
   d7480:	4540      	cmp	r0, r8
   d7482:	dbe1      	blt.n	d7448 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7484:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7488:	f003 f998 	bl	da7bc <_Z19__fetch_global_Wirev>
   d748c:	6803      	ldr	r3, [r0, #0]
   d748e:	695b      	ldr	r3, [r3, #20]
   d7490:	4798      	blx	r3
   d7492:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7496:	454e      	cmp	r6, r9
   d7498:	d1f6      	bne.n	d7488 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d749a:	4445      	add	r5, r8
   d749c:	eba7 0708 	sub.w	r7, r7, r8
   d74a0:	e7be      	b.n	d7420 <_ZN6MB85RC8readDataEjPhj+0x14>

000d74a2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d74a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74a6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d74a8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d74aa:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d74ac:	460e      	mov	r6, r1
   d74ae:	4690      	mov	r8, r2
   d74b0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d74b2:	f001 fecb 	bl	d924c <_ZN7TwoWire4lockEv>
   d74b6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d74ba:	f1b9 0f00 	cmp.w	r9, #0
   d74be:	d02a      	beq.n	d7516 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d74c0:	b34d      	cbz	r5, d7516 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d74c2:	68e1      	ldr	r1, [r4, #12]
   d74c4:	6860      	ldr	r0, [r4, #4]
   d74c6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d74ca:	f001 feb8 	bl	d923e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d74ce:	0a31      	lsrs	r1, r6, #8
   d74d0:	6860      	ldr	r0, [r4, #4]
   d74d2:	f7ff ff4b 	bl	d736c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d74d6:	6860      	ldr	r0, [r4, #4]
   d74d8:	4631      	mov	r1, r6
   d74da:	f7ff ff47 	bl	d736c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d74de:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d74e2:	4647      	mov	r7, r8
   d74e4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d74e8:	6860      	ldr	r0, [r4, #4]
   d74ea:	f817 1b01 	ldrb.w	r1, [r7], #1
   d74ee:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d74f0:	3d01      	subs	r5, #1
				wire.write(*data);
   d74f2:	689b      	ldr	r3, [r3, #8]
   d74f4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d74f6:	4555      	cmp	r5, sl
   d74f8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d74fc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d74fe:	d001      	beq.n	d7504 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7500:	2d00      	cmp	r5, #0
   d7502:	d1f1      	bne.n	d74e8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7504:	6860      	ldr	r0, [r4, #4]
   d7506:	2101      	movs	r1, #1
   d7508:	f001 fe9c 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d750c:	2800      	cmp	r0, #0
   d750e:	d0d7      	beq.n	d74c0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7510:	f04f 0900 	mov.w	r9, #0
   d7514:	e7d1      	b.n	d74ba <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7516:	a801      	add	r0, sp, #4
   d7518:	f7ff ff39 	bl	d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d751c:	4648      	mov	r0, r9
   d751e:	b003      	add	sp, #12
   d7520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7524 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7528:	b08b      	sub	sp, #44	; 0x2c
   d752a:	460e      	mov	r6, r1
   d752c:	4615      	mov	r5, r2
   d752e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7530:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7532:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7534:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7536:	f001 fe89 	bl	d924c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d753a:	42ae      	cmp	r6, r5
   d753c:	d229      	bcs.n	d7592 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d753e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7540:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7542:	b18c      	cbz	r4, d7568 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7544:	2c1e      	cmp	r4, #30
   d7546:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7548:	f8d8 3000 	ldr.w	r3, [r8]
   d754c:	bf28      	it	cs
   d754e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7550:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7552:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7556:	aa02      	add	r2, sp, #8
   d7558:	463b      	mov	r3, r7
   d755a:	4631      	mov	r1, r6
   d755c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d755e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7560:	47c8      	blx	r9
				if (!result) {
   d7562:	b948      	cbnz	r0, d7578 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7564:	2400      	movs	r4, #0
   d7566:	e000      	b.n	d756a <_ZN6MB85RC8moveDataEjjj+0x46>
   d7568:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d756a:	a801      	add	r0, sp, #4
   d756c:	f7ff ff0f 	bl	d738e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7570:	4620      	mov	r0, r4
   d7572:	b00b      	add	sp, #44	; 0x2c
   d7574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7578:	f8d8 3000 	ldr.w	r3, [r8]
   d757c:	aa02      	add	r2, sp, #8
   d757e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7582:	4629      	mov	r1, r5
   d7584:	463b      	mov	r3, r7
   d7586:	4640      	mov	r0, r8
   d7588:	47c8      	blx	r9
				if (!result) {
   d758a:	2800      	cmp	r0, #0
   d758c:	d0ea      	beq.n	d7564 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d758e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7590:	e7d7      	b.n	d7542 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7592:	d9e9      	bls.n	d7568 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7594:	2c00      	cmp	r4, #0
   d7596:	d0e7      	beq.n	d7568 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7598:	f8d8 3000 	ldr.w	r3, [r8]
   d759c:	2c1e      	cmp	r4, #30
   d759e:	4627      	mov	r7, r4
   d75a0:	bf28      	it	cs
   d75a2:	271e      	movcs	r7, #30
   d75a4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d75a8:	aa02      	add	r2, sp, #8
   d75aa:	463b      	mov	r3, r7
   d75ac:	4631      	mov	r1, r6
   d75ae:	4640      	mov	r0, r8
   d75b0:	47c8      	blx	r9
				if (!result) {
   d75b2:	2800      	cmp	r0, #0
   d75b4:	d0d6      	beq.n	d7564 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d75b6:	f8d8 3000 	ldr.w	r3, [r8]
   d75ba:	aa02      	add	r2, sp, #8
   d75bc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d75c0:	4629      	mov	r1, r5
   d75c2:	463b      	mov	r3, r7
   d75c4:	4640      	mov	r0, r8
   d75c6:	47c8      	blx	r9
				if (!result) {
   d75c8:	2800      	cmp	r0, #0
   d75ca:	d0cb      	beq.n	d7564 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d75cc:	443e      	add	r6, r7
				framAddrTo += count;
   d75ce:	443d      	add	r5, r7
				numBytes -= count;
   d75d0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d75d2:	e7df      	b.n	d7594 <_ZN6MB85RC8moveDataEjjj+0x70>

000d75d4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d75d4:	2040      	movs	r0, #64	; 0x40
   d75d6:	4770      	bx	lr

000d75d8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d75d8:	2000      	movs	r0, #0
   d75da:	4770      	bx	lr

000d75dc <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d75dc:	2080      	movs	r0, #128	; 0x80
   d75de:	4770      	bx	lr

000d75e0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d75e0:	20ff      	movs	r0, #255	; 0xff
   d75e2:	4770      	bx	lr

000d75e4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d75e4:	4770      	bx	lr

000d75e6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d75e6:	4770      	bx	lr

000d75e8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d75e8:	4770      	bx	lr

000d75ea <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d75ea:	4770      	bx	lr

000d75ec <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d75ec:	b510      	push	{r4, lr}
}
   d75ee:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d75f0:	4604      	mov	r4, r0
}
   d75f2:	f003 f910 	bl	da816 <_ZdlPvj>
   d75f6:	4620      	mov	r0, r4
   d75f8:	bd10      	pop	{r4, pc}

000d75fa <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d75fa:	b510      	push	{r4, lr}
}
   d75fc:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d75fe:	4604      	mov	r4, r0
}
   d7600:	f003 f909 	bl	da816 <_ZdlPvj>
   d7604:	4620      	mov	r0, r4
   d7606:	bd10      	pop	{r4, pc}

000d7608 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d7608:	b510      	push	{r4, lr}
}
   d760a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d760c:	4604      	mov	r4, r0
}
   d760e:	f003 f902 	bl	da816 <_ZdlPvj>
   d7612:	4620      	mov	r0, r4
   d7614:	bd10      	pop	{r4, pc}

000d7616 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d7616:	b510      	push	{r4, lr}
}
   d7618:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d761a:	4604      	mov	r4, r0
}
   d761c:	f003 f8fb 	bl	da816 <_ZdlPvj>
   d7620:	4620      	mov	r0, r4
   d7622:	bd10      	pop	{r4, pc}

000d7624 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d7624:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d7628:	6803      	ldr	r3, [r0, #0]
   d762a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d762c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d762e:	4798      	blx	r3
   d7630:	2210      	movs	r2, #16
   d7632:	4601      	mov	r1, r0
   d7634:	4668      	mov	r0, sp
   d7636:	f003 ff8b 	bl	db550 <memset>
	size_t len = length();
   d763a:	6823      	ldr	r3, [r4, #0]
   d763c:	4620      	mov	r0, r4
   d763e:	689b      	ldr	r3, [r3, #8]
   d7640:	4798      	blx	r3
	size_t offset = 0;
   d7642:	2500      	movs	r5, #0
	size_t len = length();
   d7644:	4607      	mov	r7, r0
	bool bResult = false;
   d7646:	4628      	mov	r0, r5
	while(offset < len) {
   d7648:	42bd      	cmp	r5, r7
   d764a:	d20e      	bcs.n	d766a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d764c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d764e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d7650:	2e10      	cmp	r6, #16
   d7652:	bf28      	it	cs
   d7654:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d7656:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d765a:	466a      	mov	r2, sp
   d765c:	4633      	mov	r3, r6
   d765e:	4629      	mov	r1, r5
   d7660:	4620      	mov	r0, r4
   d7662:	47c0      	blx	r8
		if (!bResult) {
   d7664:	b108      	cbz	r0, d766a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d7666:	4435      	add	r5, r6
	while(offset < len) {
   d7668:	e7ee      	b.n	d7648 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d766a:	b004      	add	sp, #16
   d766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7670 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d7670:	f44f 7380 	mov.w	r3, #256	; 0x100
   d7674:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d7676:	f240 1301 	movw	r3, #257	; 0x101
   d767a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d767c:	2300      	movs	r3, #0
   d767e:	8203      	strh	r3, [r0, #16]
}
   d7680:	4770      	bx	lr
	...

000d7684 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d7684:	b508      	push	{r3, lr}
   d7686:	4b06      	ldr	r3, [pc, #24]	; (d76a0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d7688:	6003      	str	r3, [r0, #0]
   d768a:	4b06      	ldr	r3, [pc, #24]	; (d76a4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d768c:	6043      	str	r3, [r0, #4]
   d768e:	f240 7304 	movw	r3, #1796	; 0x704
   d7692:	8103      	strh	r3, [r0, #8]
   d7694:	2300      	movs	r3, #0
   d7696:	7443      	strb	r3, [r0, #17]
	clear();
   d7698:	f7ff ffea 	bl	d7670 <_ZN12MCP79410Time5clearEv>
}
   d769c:	bd08      	pop	{r3, pc}
   d769e:	bf00      	nop
   d76a0:	000ddee8 	.word	0x000ddee8
   d76a4:	03020100 	.word	0x03020100

000d76a8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d76a8:	0903      	lsrs	r3, r0, #4
}
   d76aa:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d76ac:	f000 000f 	and.w	r0, r0, #15
}
   d76b0:	fb02 0003 	mla	r0, r2, r3, r0
   d76b4:	4770      	bx	lr

000d76b6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d76b6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d76b8:	7a80      	ldrb	r0, [r0, #10]
   d76ba:	f7ff fff5 	bl	d76a8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d76be:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d76c2:	bd08      	pop	{r3, pc}

000d76c4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d76c4:	7ac0      	ldrb	r0, [r0, #11]
   d76c6:	f000 001f 	and.w	r0, r0, #31
   d76ca:	f7ff bfed 	b.w	d76a8 <_ZN12MCP79410Time8bcdToIntEh>

000d76ce <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d76ce:	7b00      	ldrb	r0, [r0, #12]
   d76d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d76d4:	f7ff bfe8 	b.w	d76a8 <_ZN12MCP79410Time8bcdToIntEh>

000d76d8 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d76d8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d76da:	7b81      	ldrb	r1, [r0, #14]
   d76dc:	064a      	lsls	r2, r1, #25
   d76de:	d50d      	bpl.n	d76fc <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d76e0:	f001 001f 	and.w	r0, r1, #31
   d76e4:	f7ff ffe0 	bl	d76a8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d76e8:	068b      	lsls	r3, r1, #26
   d76ea:	d503      	bpl.n	d76f4 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d76ec:	280c      	cmp	r0, #12
   d76ee:	d000      	beq.n	d76f2 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d76f0:	300c      	adds	r0, #12
}
   d76f2:	bd08      	pop	{r3, pc}
				return 0;
   d76f4:	280c      	cmp	r0, #12
   d76f6:	bf08      	it	eq
   d76f8:	2000      	moveq	r0, #0
   d76fa:	e7fa      	b.n	d76f2 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d76fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d7700:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d7704:	f7ff bfd0 	b.w	d76a8 <_ZN12MCP79410Time8bcdToIntEh>

000d7708 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d7708:	7bc0      	ldrb	r0, [r0, #15]
   d770a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d770e:	f7ff bfcb 	b.w	d76a8 <_ZN12MCP79410Time8bcdToIntEh>

000d7712 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d7712:	7c00      	ldrb	r0, [r0, #16]
   d7714:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d7718:	f7ff bfc6 	b.w	d76a8 <_ZN12MCP79410Time8bcdToIntEh>

000d771c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d771c:	b510      	push	{r4, lr}
   d771e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d7720:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d7722:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d7724:	2100      	movs	r1, #0
   d7726:	a801      	add	r0, sp, #4
   d7728:	f003 ff12 	bl	db550 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d772c:	4620      	mov	r0, r4
   d772e:	f7ff ffc2 	bl	d76b6 <_ZNK12MCP79410Time7getYearEv>
   d7732:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d7736:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d7738:	4620      	mov	r0, r4
   d773a:	f7ff ffc3 	bl	d76c4 <_ZNK12MCP79410Time8getMonthEv>
   d773e:	3801      	subs	r0, #1
   d7740:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d7742:	4620      	mov	r0, r4
   d7744:	f7ff ffc3 	bl	d76ce <_ZNK12MCP79410Time13getDayOfMonthEv>
   d7748:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d774a:	4620      	mov	r0, r4
   d774c:	f7ff ffc4 	bl	d76d8 <_ZNK12MCP79410Time7getHourEv>
   d7750:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d7752:	4620      	mov	r0, r4
   d7754:	f7ff ffd8 	bl	d7708 <_ZNK12MCP79410Time9getMinuteEv>
   d7758:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d775a:	4620      	mov	r0, r4
   d775c:	f7ff ffd9 	bl	d7712 <_ZNK12MCP79410Time9getSecondEv>
   d7760:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d7762:	a801      	add	r0, sp, #4
   d7764:	f001 f9ae 	bl	d8ac4 <mktime>
}
   d7768:	b00a      	add	sp, #40	; 0x28
   d776a:	bd10      	pop	{r4, pc}

000d776c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d776c:	210a      	movs	r1, #10
   d776e:	fb90 f2f1 	sdiv	r2, r0, r1
   d7772:	fb92 f3f1 	sdiv	r3, r2, r1
   d7776:	fb01 2313 	mls	r3, r1, r3, r2
   d777a:	011b      	lsls	r3, r3, #4
   d777c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d777e:	fb01 0012 	mls	r0, r1, r2, r0
   d7782:	4318      	orrs	r0, r3
}
   d7784:	b2c0      	uxtb	r0, r0
   d7786:	4770      	bx	lr

000d7788 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d7788:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d778a:	b510      	push	{r4, lr}
   d778c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d778e:	fb91 f0f3 	sdiv	r0, r1, r3
   d7792:	fb00 1013 	mls	r0, r0, r3, r1
   d7796:	f7ff ffe9 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
   d779a:	72a0      	strb	r0, [r4, #10]
}
   d779c:	bd10      	pop	{r4, pc}

000d779e <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d779e:	b510      	push	{r4, lr}
   d77a0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d77a2:	4608      	mov	r0, r1
   d77a4:	f7ff ffe2 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
   d77a8:	72e0      	strb	r0, [r4, #11]
}
   d77aa:	bd10      	pop	{r4, pc}

000d77ac <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d77ac:	b510      	push	{r4, lr}
   d77ae:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d77b0:	4608      	mov	r0, r1
   d77b2:	f7ff ffdb 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d77b6:	7b23      	ldrb	r3, [r4, #12]
   d77b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d77bc:	4318      	orrs	r0, r3
   d77be:	7320      	strb	r0, [r4, #12]
}
   d77c0:	bd10      	pop	{r4, pc}

000d77c2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d77c2:	b510      	push	{r4, lr}
   d77c4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d77c6:	1c48      	adds	r0, r1, #1
   d77c8:	f7ff ffd0 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d77cc:	7b63      	ldrb	r3, [r4, #13]
   d77ce:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d77d2:	4318      	orrs	r0, r3
   d77d4:	7360      	strb	r0, [r4, #13]
}
   d77d6:	bd10      	pop	{r4, pc}

000d77d8 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d77d8:	b510      	push	{r4, lr}
   d77da:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d77dc:	4608      	mov	r0, r1
   d77de:	f7ff ffc5 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
   d77e2:	73a0      	strb	r0, [r4, #14]
}
   d77e4:	bd10      	pop	{r4, pc}

000d77e6 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d77e6:	b510      	push	{r4, lr}
   d77e8:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d77ea:	4608      	mov	r0, r1
   d77ec:	f7ff ffbe 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
   d77f0:	73e0      	strb	r0, [r4, #15]
}
   d77f2:	bd10      	pop	{r4, pc}

000d77f4 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d77f4:	b510      	push	{r4, lr}
   d77f6:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d77f8:	4608      	mov	r0, r1
   d77fa:	f7ff ffb7 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d77fe:	7c23      	ldrb	r3, [r4, #16]
   d7800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d7804:	4318      	orrs	r0, r3
   d7806:	7420      	strb	r0, [r4, #16]
}
   d7808:	bd10      	pop	{r4, pc}

000d780a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d780a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d780c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d780e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d7810:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d7814:	f003 fe62 	bl	db4dc <gmtime>
   d7818:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d781a:	6941      	ldr	r1, [r0, #20]
   d781c:	4620      	mov	r0, r4
   d781e:	f7ff ffb3 	bl	d7788 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d7822:	6929      	ldr	r1, [r5, #16]
   d7824:	4620      	mov	r0, r4
   d7826:	3101      	adds	r1, #1
   d7828:	f7ff ffb9 	bl	d779e <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d782c:	68e9      	ldr	r1, [r5, #12]
   d782e:	4620      	mov	r0, r4
   d7830:	f7ff ffbc 	bl	d77ac <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d7834:	69a9      	ldr	r1, [r5, #24]
   d7836:	4620      	mov	r0, r4
   d7838:	f7ff ffc3 	bl	d77c2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d783c:	68a9      	ldr	r1, [r5, #8]
   d783e:	4620      	mov	r0, r4
   d7840:	f7ff ffca 	bl	d77d8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d7844:	6869      	ldr	r1, [r5, #4]
   d7846:	4620      	mov	r0, r4
   d7848:	f7ff ffcd 	bl	d77e6 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d784c:	6829      	ldr	r1, [r5, #0]
   d784e:	293b      	cmp	r1, #59	; 0x3b
   d7850:	bfa8      	it	ge
   d7852:	213b      	movge	r1, #59	; 0x3b
   d7854:	4620      	mov	r0, r4
   d7856:	f7ff ffcd 	bl	d77f4 <_ZN12MCP79410Time9setSecondEi>
}
   d785a:	b003      	add	sp, #12
   d785c:	bd30      	pop	{r4, r5, pc}
	...

000d7860 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d7860:	4a05      	ldr	r2, [pc, #20]	; (d7878 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d7862:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d7864:	e9c0 2100 	strd	r2, r1, [r0]
   d7868:	4a04      	ldr	r2, [pc, #16]	; (d787c <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d786a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d786c:	4a04      	ldr	r2, [pc, #16]	; (d7880 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d786e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7870:	4a04      	ldr	r2, [pc, #16]	; (d7884 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d7872:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7874:	6142      	str	r2, [r0, #20]
}
   d7876:	4770      	bx	lr
   d7878:	000ddf1c 	.word	0x000ddf1c
   d787c:	03010000 	.word	0x03010000
   d7880:	000ddec4 	.word	0x000ddec4
   d7884:	000ddef8 	.word	0x000ddef8

000d7888 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d7888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d788c:	4604      	mov	r4, r0
   d788e:	460f      	mov	r7, r1
   d7890:	4690      	mov	r8, r2
   d7892:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d7894:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d7896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7898:	429e      	cmp	r6, r3
   d789a:	d231      	bcs.n	d7900 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d789c:	6860      	ldr	r0, [r4, #4]
   d789e:	4639      	mov	r1, r7
   d78a0:	f001 fcc9 	bl	d9236 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d78a4:	eb08 0106 	add.w	r1, r8, r6
   d78a8:	6860      	ldr	r0, [r4, #4]
   d78aa:	f7ff fd5f 	bl	d736c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d78ae:	6860      	ldr	r0, [r4, #4]
   d78b0:	2100      	movs	r1, #0
   d78b2:	f001 fcc7 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d78b6:	4605      	mov	r5, r0
   d78b8:	b9d0      	cbnz	r0, d78f0 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d78ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d78bc:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d78be:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d78c0:	2a20      	cmp	r2, #32
   d78c2:	f04f 0301 	mov.w	r3, #1
   d78c6:	bf28      	it	cs
   d78c8:	2220      	movcs	r2, #32
   d78ca:	4639      	mov	r1, r7
   d78cc:	f001 fca1 	bl	d9212 <_ZN7TwoWire11requestFromEhjh>
   d78d0:	eb09 0b06 	add.w	fp, r9, r6
   d78d4:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d78d6:	eb0b 0a00 	add.w	sl, fp, r0
   d78da:	45da      	cmp	sl, fp
   d78dc:	d006      	beq.n	d78ec <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d78de:	6860      	ldr	r0, [r4, #4]
   d78e0:	6803      	ldr	r3, [r0, #0]
   d78e2:	695b      	ldr	r3, [r3, #20]
   d78e4:	4798      	blx	r3
   d78e6:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d78ea:	e7f6      	b.n	d78da <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d78ec:	442e      	add	r6, r5
	while(offset < bufLen) {
   d78ee:	e7d2      	b.n	d7896 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d78f0:	4602      	mov	r2, r0
   d78f2:	4904      	ldr	r1, [pc, #16]	; (d7904 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d78f4:	4804      	ldr	r0, [pc, #16]	; (d7908 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d78f6:	f7fc fd4b 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d78fa:	4628      	mov	r0, r5
   d78fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7900:	2500      	movs	r5, #0
	return stat;
   d7902:	e7fa      	b.n	d78fa <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d7904:	000dde1c 	.word	0x000dde1c
   d7908:	2003e604 	.word	0x2003e604

000d790c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d790c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7910:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7914:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7916:	6803      	ldr	r3, [r0, #0]
   d7918:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d791a:	4605      	mov	r5, r0
   d791c:	460c      	mov	r4, r1
   d791e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7920:	4798      	blx	r3
   d7922:	4580      	cmp	r8, r0
   d7924:	d80d      	bhi.n	d7942 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7926:	3420      	adds	r4, #32
   d7928:	6868      	ldr	r0, [r5, #4]
   d792a:	9600      	str	r6, [sp, #0]
   d792c:	463b      	mov	r3, r7
   d792e:	b2e2      	uxtb	r2, r4
   d7930:	216f      	movs	r1, #111	; 0x6f
   d7932:	f7ff ffa9 	bl	d7888 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d7936:	fab0 f080 	clz	r0, r0
   d793a:	0940      	lsrs	r0, r0, #5
}
   d793c:	b002      	add	sp, #8
   d793e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7942:	2000      	movs	r0, #0
   d7944:	e7fa      	b.n	d793c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d7946 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7946:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d794a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d794e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7950:	6803      	ldr	r3, [r0, #0]
   d7952:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7954:	4604      	mov	r4, r0
   d7956:	460d      	mov	r5, r1
   d7958:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d795a:	4798      	blx	r3
   d795c:	4580      	cmp	r8, r0
   d795e:	d80c      	bhi.n	d797a <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d7960:	6860      	ldr	r0, [r4, #4]
   d7962:	9600      	str	r6, [sp, #0]
   d7964:	463b      	mov	r3, r7
   d7966:	b2ea      	uxtb	r2, r5
   d7968:	2157      	movs	r1, #87	; 0x57
   d796a:	f7ff ff8d 	bl	d7888 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d796e:	fab0 f080 	clz	r0, r0
   d7972:	0940      	lsrs	r0, r0, #5
}
   d7974:	b002      	add	sp, #8
   d7976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d797a:	2000      	movs	r0, #0
   d797c:	e7fa      	b.n	d7974 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d797e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d797e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d7980:	1e1e      	subs	r6, r3, #0
   d7982:	bf0c      	ite	eq
   d7984:	2307      	moveq	r3, #7
   d7986:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d7988:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d798a:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d798c:	ab02      	add	r3, sp, #8
   d798e:	460a      	mov	r2, r1
   d7990:	216f      	movs	r1, #111	; 0x6f
   d7992:	f7ff ff79 	bl	d7888 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d7996:	4605      	mov	r5, r0
   d7998:	b9a8      	cbnz	r0, d79c6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d799a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d799e:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d79a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d79a4:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d79a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d79aa:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d79ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d79b0:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d79b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d79b6:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d79b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d79bc:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d79be:	b92e      	cbnz	r6, d79cc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d79c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d79c4:	72a3      	strb	r3, [r4, #10]
}
   d79c6:	4628      	mov	r0, r5
   d79c8:	b004      	add	sp, #16
   d79ca:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d79cc:	f002 fc0c 	bl	da1e8 <_ZN9TimeClass4yearEv>
   d79d0:	f7ff fecc 	bl	d776c <_ZN12MCP79410Time8intToBcdEi>
   d79d4:	72a0      	strb	r0, [r4, #10]
	return stat;
   d79d6:	e7f6      	b.n	d79c6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d79d8 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d79d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d79da:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d79dc:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d79de:	9300      	str	r3, [sp, #0]
   d79e0:	216f      	movs	r1, #111	; 0x6f
   d79e2:	ab03      	add	r3, sp, #12
   d79e4:	f7ff ff50 	bl	d7888 <_ZNK8MCP7941010deviceReadEhhPhj>
   d79e8:	b920      	cbnz	r0, d79f4 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d79ea:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d79ee:	b005      	add	sp, #20
   d79f0:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d79f4:	2000      	movs	r0, #0
   d79f6:	e7fa      	b.n	d79ee <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d79f8 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d79f8:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d79fa:	2103      	movs	r1, #3
   d79fc:	f7ff ffec 	bl	d79d8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d7a00:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d7a04:	bd08      	pop	{r3, pc}

000d7a06 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d7a06:	b538      	push	{r3, r4, r5, lr}
   d7a08:	2300      	movs	r3, #0
   d7a0a:	460c      	mov	r4, r1
   d7a0c:	460a      	mov	r2, r1
   d7a0e:	4619      	mov	r1, r3
   d7a10:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d7a12:	f7ff ffb4 	bl	d797e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d7a16:	b930      	cbnz	r0, d7a26 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7a18:	7aa3      	ldrb	r3, [r4, #10]
   d7a1a:	b123      	cbz	r3, d7a26 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d7a1c:	4628      	mov	r0, r5
}
   d7a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7a22:	f7ff bfe9 	b.w	d79f8 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d7a26:	2000      	movs	r0, #0
   d7a28:	bd38      	pop	{r3, r4, r5, pc}

000d7a2a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d7a2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7a2c:	4602      	mov	r2, r0
	MCP79410Time time;
   d7a2e:	a801      	add	r0, sp, #4
   d7a30:	f7ff fe28 	bl	d7684 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d7a34:	a901      	add	r1, sp, #4
   d7a36:	4610      	mov	r0, r2
   d7a38:	f7ff ffe5 	bl	d7a06 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d7a3c:	b128      	cbz	r0, d7a4a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d7a3e:	a801      	add	r0, sp, #4
   d7a40:	f7ff fe6c 	bl	d771c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d7a44:	b007      	add	sp, #28
   d7a46:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d7a4a:	2000      	movs	r0, #0
   d7a4c:	4601      	mov	r1, r0
   d7a4e:	e7f9      	b.n	d7a44 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d7a50 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d7a50:	b5d0      	push	{r4, r6, r7, lr}
   d7a52:	4604      	mov	r4, r0
   d7a54:	b086      	sub	sp, #24
	wire.begin();
   d7a56:	6840      	ldr	r0, [r0, #4]
   d7a58:	f001 fbbe 	bl	d91d8 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d7a5c:	f002 fb8a 	bl	da174 <_ZN9TimeClass7isValidEv>
   d7a60:	b9e8      	cbnz	r0, d7a9e <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d7a62:	7ae3      	ldrb	r3, [r4, #11]
   d7a64:	079b      	lsls	r3, r3, #30
   d7a66:	d51a      	bpl.n	d7a9e <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d7a68:	4620      	mov	r0, r4
   d7a6a:	f7ff ffde 	bl	d7a2a <_ZNK8MCP7941010getRTCTimeEv>
   d7a6e:	4606      	mov	r6, r0
   d7a70:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d7a72:	ea56 0307 	orrs.w	r3, r6, r7
   d7a76:	d012      	beq.n	d7a9e <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d7a78:	f002 fa83 	bl	d9f82 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d7a7c:	4b0a      	ldr	r3, [pc, #40]	; (d7aa8 <_ZN8MCP794105setupEv+0x58>)
   d7a7e:	490b      	ldr	r1, [pc, #44]	; (d7aac <_ZN8MCP794105setupEv+0x5c>)
   d7a80:	681b      	ldr	r3, [r3, #0]
   d7a82:	9300      	str	r3, [sp, #0]
   d7a84:	4632      	mov	r2, r6
   d7a86:	463b      	mov	r3, r7
   d7a88:	a802      	add	r0, sp, #8
   d7a8a:	f002 fb31 	bl	da0f0 <_ZN9TimeClass6formatExPKc>
   d7a8e:	4808      	ldr	r0, [pc, #32]	; (d7ab0 <_ZN8MCP794105setupEv+0x60>)
   d7a90:	9a02      	ldr	r2, [sp, #8]
   d7a92:	4908      	ldr	r1, [pc, #32]	; (d7ab4 <_ZN8MCP794105setupEv+0x64>)
   d7a94:	f7fc fc7c 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7a98:	a802      	add	r0, sp, #8
   d7a9a:	f002 f8fb 	bl	d9c94 <_ZN6StringD1Ev>
	setupDone = true;
   d7a9e:	2301      	movs	r3, #1
   d7aa0:	7223      	strb	r3, [r4, #8]
}
   d7aa2:	b006      	add	sp, #24
   d7aa4:	bdd0      	pop	{r4, r6, r7, pc}
   d7aa6:	bf00      	nop
   d7aa8:	2003dd00 	.word	0x2003dd00
   d7aac:	2003e644 	.word	0x2003e644
   d7ab0:	2003e604 	.word	0x2003e604
   d7ab4:	000dde36 	.word	0x000dde36

000d7ab8 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7abc:	4606      	mov	r6, r0
   d7abe:	4688      	mov	r8, r1
   d7ac0:	4691      	mov	r9, r2
   d7ac2:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d7ac4:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d7ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ac8:	429d      	cmp	r5, r3
   d7aca:	d229      	bcs.n	d7b20 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d7acc:	6870      	ldr	r0, [r6, #4]
   d7ace:	4641      	mov	r1, r8
   d7ad0:	f001 fbb1 	bl	d9236 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7ad4:	6870      	ldr	r0, [r6, #4]
   d7ad6:	eb09 0105 	add.w	r1, r9, r5
   d7ada:	f7ff fc47 	bl	d736c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d7ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ae0:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d7ae2:	2f1f      	cmp	r7, #31
   d7ae4:	bf28      	it	cs
   d7ae6:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d7ae8:	eb0a 0405 	add.w	r4, sl, r5
   d7aec:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d7af0:	6870      	ldr	r0, [r6, #4]
   d7af2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7af6:	6802      	ldr	r2, [r0, #0]
   d7af8:	6892      	ldr	r2, [r2, #8]
   d7afa:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d7afc:	45a3      	cmp	fp, r4
   d7afe:	d1f7      	bne.n	d7af0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d7b00:	6870      	ldr	r0, [r6, #4]
   d7b02:	2101      	movs	r1, #1
   d7b04:	f001 fb9e 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7b08:	4604      	mov	r4, r0
   d7b0a:	b138      	cbz	r0, d7b1c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d7b0c:	4602      	mov	r2, r0
   d7b0e:	4905      	ldr	r1, [pc, #20]	; (d7b24 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d7b10:	4805      	ldr	r0, [pc, #20]	; (d7b28 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d7b12:	f7fc fc3d 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d7b16:	4620      	mov	r0, r4
   d7b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d7b1c:	443d      	add	r5, r7
	while(offset < bufLen) {
   d7b1e:	e7d2      	b.n	d7ac6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d7b20:	2400      	movs	r4, #0
	return stat;
   d7b22:	e7f8      	b.n	d7b16 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d7b24:	000dde4b 	.word	0x000dde4b
   d7b28:	2003e604 	.word	0x2003e604

000d7b2c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7b30:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7b34:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7b36:	6803      	ldr	r3, [r0, #0]
   d7b38:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7b3a:	4605      	mov	r5, r0
   d7b3c:	460c      	mov	r4, r1
   d7b3e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7b40:	4798      	blx	r3
   d7b42:	4580      	cmp	r8, r0
   d7b44:	d80d      	bhi.n	d7b62 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7b46:	3420      	adds	r4, #32
   d7b48:	6868      	ldr	r0, [r5, #4]
   d7b4a:	9600      	str	r6, [sp, #0]
   d7b4c:	463b      	mov	r3, r7
   d7b4e:	b2e2      	uxtb	r2, r4
   d7b50:	216f      	movs	r1, #111	; 0x6f
   d7b52:	f7ff ffb1 	bl	d7ab8 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d7b56:	fab0 f080 	clz	r0, r0
   d7b5a:	0940      	lsrs	r0, r0, #5
}
   d7b5c:	b002      	add	sp, #8
   d7b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7b62:	2000      	movs	r0, #0
   d7b64:	e7fa      	b.n	d7b5c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d7b66 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d7b66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d7b68:	7c13      	ldrb	r3, [r2, #16]
   d7b6a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d7b6e:	7bd3      	ldrb	r3, [r2, #15]
   d7b70:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d7b74:	7b93      	ldrb	r3, [r2, #14]
   d7b76:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d7b7a:	7b53      	ldrb	r3, [r2, #13]
   d7b7c:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d7b80:	7b13      	ldrb	r3, [r2, #12]
   d7b82:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d7b86:	7ad3      	ldrb	r3, [r2, #11]
   d7b88:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d7b8c:	7a93      	ldrb	r3, [r2, #10]
   d7b8e:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d7b92:	2307      	movs	r3, #7
   d7b94:	9300      	str	r3, [sp, #0]
   d7b96:	460a      	mov	r2, r1
   d7b98:	ab02      	add	r3, sp, #8
   d7b9a:	216f      	movs	r1, #111	; 0x6f
   d7b9c:	f7ff ff8c 	bl	d7ab8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7ba0:	b005      	add	sp, #20
   d7ba2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ba6 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d7ba6:	b510      	push	{r4, lr}
   d7ba8:	b088      	sub	sp, #32
   d7baa:	4604      	mov	r4, r0
	MCP79410Time time;
   d7bac:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d7bae:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d7bb0:	f7ff fd68 	bl	d7684 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d7bb4:	9b01      	ldr	r3, [sp, #4]
   d7bb6:	a803      	add	r0, sp, #12
   d7bb8:	f7ff fe27 	bl	d780a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7bbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7bc0:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d7bc6:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7bca:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d7bce:	b16a      	cbz	r2, d7bec <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d7bd0:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d7bd4:	aa03      	add	r2, sp, #12
   d7bd6:	2100      	movs	r1, #0
   d7bd8:	4620      	mov	r0, r4
   d7bda:	f88d 3019 	strb.w	r3, [sp, #25]
   d7bde:	f7ff ffc2 	bl	d7b66 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d7be2:	fab0 f080 	clz	r0, r0
   d7be6:	0940      	lsrs	r0, r0, #5
   d7be8:	b008      	add	sp, #32
   d7bea:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7bec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d7bf0:	e7f0      	b.n	d7bd4 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d7bf4 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d7bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7bf6:	b087      	sub	sp, #28
   d7bf8:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d7bfa:	f002 fabb 	bl	da174 <_ZN9TimeClass7isValidEv>
   d7bfe:	4604      	mov	r4, r0
   d7c00:	b1e8      	cbz	r0, d7c3e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d7c02:	f002 fad4 	bl	da1ae <_ZN9TimeClass3nowEv>
   d7c06:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d7c08:	4602      	mov	r2, r0
		time_t now = Time.now();
   d7c0a:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d7c0c:	463b      	mov	r3, r7
   d7c0e:	4628      	mov	r0, r5
   d7c10:	f7ff ffc9 	bl	d7ba6 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7c14:	4b0c      	ldr	r3, [pc, #48]	; (d7c48 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d7c16:	490d      	ldr	r1, [pc, #52]	; (d7c4c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	9300      	str	r3, [sp, #0]
   d7c1c:	4632      	mov	r2, r6
   d7c1e:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d7c20:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7c22:	a802      	add	r0, sp, #8
   d7c24:	f002 fa64 	bl	da0f0 <_ZN9TimeClass6formatExPKc>
   d7c28:	4809      	ldr	r0, [pc, #36]	; (d7c50 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7c2a:	9a02      	ldr	r2, [sp, #8]
   d7c2c:	4909      	ldr	r1, [pc, #36]	; (d7c54 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d7c2e:	f7fc fbaf 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7c32:	a802      	add	r0, sp, #8
   d7c34:	f002 f82e 	bl	d9c94 <_ZN6StringD1Ev>
}
   d7c38:	4620      	mov	r0, r4
   d7c3a:	b007      	add	sp, #28
   d7c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d7c3e:	4906      	ldr	r1, [pc, #24]	; (d7c58 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d7c40:	4803      	ldr	r0, [pc, #12]	; (d7c50 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7c42:	f7fc fba5 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
   d7c46:	e7f7      	b.n	d7c38 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d7c48:	2003dd00 	.word	0x2003dd00
   d7c4c:	2003e644 	.word	0x2003e644
   d7c50:	2003e604 	.word	0x2003e604
   d7c54:	000dde66 	.word	0x000dde66
   d7c58:	000dde7c 	.word	0x000dde7c

000d7c5c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d7c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d7c5e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d7c60:	4604      	mov	r4, r0
	if (!timeSet) {
   d7c62:	b99d      	cbnz	r5, d7c8c <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d7c64:	f002 fa86 	bl	da174 <_ZN9TimeClass7isValidEv>
   d7c68:	b180      	cbz	r0, d7c8c <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d7c6a:	2200      	movs	r2, #0
   d7c6c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d7c6e:	4669      	mov	r1, sp
   d7c70:	4628      	mov	r0, r5
        tm = 0;
   d7c72:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d7c76:	f000 fe45 	bl	d8904 <spark_sync_time_last>
			if (lastSync != 0) {
   d7c7a:	b138      	cbz	r0, d7c8c <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7c7c:	7ae3      	ldrb	r3, [r4, #11]
   d7c7e:	07db      	lsls	r3, r3, #31
   d7c80:	d502      	bpl.n	d7c88 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d7c82:	4620      	mov	r0, r4
   d7c84:	f7ff ffb6 	bl	d7bf4 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d7c88:	2301      	movs	r3, #1
   d7c8a:	7263      	strb	r3, [r4, #9]
}
   d7c8c:	b003      	add	sp, #12
   d7c8e:	bd30      	pop	{r4, r5, pc}

000d7c90 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d7c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7c92:	2301      	movs	r3, #1
	buf[0] = value;
   d7c94:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7c98:	9300      	str	r3, [sp, #0]
   d7c9a:	460a      	mov	r2, r1
   d7c9c:	ab03      	add	r3, sp, #12
   d7c9e:	216f      	movs	r1, #111	; 0x6f
   d7ca0:	f7ff ff0a 	bl	d7ab8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7ca4:	b005      	add	sp, #20
   d7ca6:	f85d fb04 	ldr.w	pc, [sp], #4

000d7caa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d7caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cac:	4604      	mov	r4, r0
   d7cae:	460d      	mov	r5, r1
   d7cb0:	4617      	mov	r7, r2
   d7cb2:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d7cb4:	f7ff fe90 	bl	d79d8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d7cb8:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7cbc:	4332      	orrs	r2, r6
   d7cbe:	4629      	mov	r1, r5
   d7cc0:	4620      	mov	r0, r4
}
   d7cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d7cc6:	f7ff bfe3 	b.w	d7c90 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d7cca <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d7cca:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d7ccc:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7cce:	d80c      	bhi.n	d7cea <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7cd0:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d7cd2:	f04f 0300 	mov.w	r3, #0
   d7cd6:	bf14      	ite	ne
   d7cd8:	22df      	movne	r2, #223	; 0xdf
   d7cda:	22ef      	moveq	r2, #239	; 0xef
   d7cdc:	2107      	movs	r1, #7
   d7cde:	f7ff ffe4 	bl	d7caa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d7ce2:	fab0 f080 	clz	r0, r0
   d7ce6:	0940      	lsrs	r0, r0, #5
}
   d7ce8:	bd08      	pop	{r3, pc}
		return false;
   d7cea:	2000      	movs	r0, #0
   d7cec:	e7fc      	b.n	d7ce8 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d7cee <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7cee:	b538      	push	{r3, r4, r5, lr}
   d7cf0:	4604      	mov	r4, r0
   d7cf2:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7cf4:	6860      	ldr	r0, [r4, #4]
   d7cf6:	2157      	movs	r1, #87	; 0x57
   d7cf8:	f001 fa9d 	bl	d9236 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7cfc:	6860      	ldr	r0, [r4, #4]
   d7cfe:	2101      	movs	r1, #1
   d7d00:	f001 faa0 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d7d04:	b108      	cbz	r0, d7d0a <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d7d06:	3d01      	subs	r5, #1
   d7d08:	d1f4      	bne.n	d7cf4 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d7d0a:	bd38      	pop	{r3, r4, r5, pc}

000d7d0c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d10:	4604      	mov	r4, r0
   d7d12:	460f      	mov	r7, r1
   d7d14:	4616      	mov	r6, r2
   d7d16:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d7d1a:	45b0      	cmp	r8, r6
   d7d1c:	d020      	beq.n	d7d60 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7d1e:	6860      	ldr	r0, [r4, #4]
   d7d20:	2157      	movs	r1, #87	; 0x57
   d7d22:	f001 fa88 	bl	d9236 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7d26:	4639      	mov	r1, r7
   d7d28:	6860      	ldr	r0, [r4, #4]
   d7d2a:	f7ff fb1f 	bl	d736c <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d7d2e:	6860      	ldr	r0, [r4, #4]
   d7d30:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7d34:	6803      	ldr	r3, [r0, #0]
   d7d36:	689b      	ldr	r3, [r3, #8]
   d7d38:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d7d3a:	6860      	ldr	r0, [r4, #4]
   d7d3c:	2101      	movs	r1, #1
   d7d3e:	f001 fa81 	bl	d9244 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7d42:	3701      	adds	r7, #1
   d7d44:	4605      	mov	r5, r0
   d7d46:	b138      	cbz	r0, d7d58 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d7d48:	4602      	mov	r2, r0
   d7d4a:	4906      	ldr	r1, [pc, #24]	; (d7d64 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d7d4c:	4806      	ldr	r0, [pc, #24]	; (d7d68 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d7d4e:	f7fc fb1f 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
}
   d7d52:	4628      	mov	r0, r5
   d7d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d7d58:	4620      	mov	r0, r4
   d7d5a:	f7ff ffc8 	bl	d7cee <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d7d5e:	e7dc      	b.n	d7d1a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d7d60:	2500      	movs	r5, #0
	return stat;
   d7d62:	e7f6      	b.n	d7d52 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d7d64:	000dde91 	.word	0x000dde91
   d7d68:	2003e604 	.word	0x2003e604

000d7d6c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d7d6e:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7d70:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7d72:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7d74:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d7d76:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7d78:	4604      	mov	r4, r0
   d7d7a:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d7d7c:	4798      	blx	r3
   d7d7e:	4287      	cmp	r7, r0
   d7d80:	d80a      	bhi.n	d7d98 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d7d82:	9a01      	ldr	r2, [sp, #4]
   d7d84:	6860      	ldr	r0, [r4, #4]
   d7d86:	4633      	mov	r3, r6
   d7d88:	b2e9      	uxtb	r1, r5
   d7d8a:	f7ff ffbf 	bl	d7d0c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d7d8e:	fab0 f080 	clz	r0, r0
   d7d92:	0940      	lsrs	r0, r0, #5
}
   d7d94:	b003      	add	sp, #12
   d7d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7d98:	2000      	movs	r0, #0
   d7d9a:	e7fb      	b.n	d7d94 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d7d9c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d7d9c:	4b01      	ldr	r3, [pc, #4]	; (d7da4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d7d9e:	4a02      	ldr	r2, [pc, #8]	; (d7da8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d7da0:	601a      	str	r2, [r3, #0]
}
   d7da2:	4770      	bx	lr
   d7da4:	2003e604 	.word	0x2003e604
   d7da8:	000ddeb2 	.word	0x000ddeb2

000d7dac <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7dac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7dae:	4603      	mov	r3, r0
	switch (__op)
   d7db0:	d102      	bne.n	d7db8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7db2:	6001      	str	r1, [r0, #0]
      }
   d7db4:	2000      	movs	r0, #0
   d7db6:	4770      	bx	lr
	  switch (__op)
   d7db8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7dba:	bf04      	itt	eq
   d7dbc:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7dc0:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7dc4:	e7f6      	b.n	d7db4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7dc6 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7dc6:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7dc8:	2301      	movs	r3, #1
   d7dca:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7dcc:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7dce:	4604      	mov	r4, r0
        if (th->func) {
   d7dd0:	b143      	cbz	r3, d7de4 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d7dd2:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7dd4:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d7dd6:	2301      	movs	r3, #1
   d7dd8:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7dda:	2000      	movs	r0, #0
    }
   d7ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d7de0:	f000 bb32 	b.w	d8448 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7de4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d7de6:	2800      	cmp	r0, #0
   d7de8:	d0f5      	beq.n	d7dd6 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d7dea:	6883      	ldr	r3, [r0, #8]
   d7dec:	b90b      	cbnz	r3, d7df2 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7dee:	f002 fd18 	bl	da822 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7df2:	68c3      	ldr	r3, [r0, #12]
   d7df4:	e7ee      	b.n	d7dd4 <_ZN6Thread3runEPv+0xe>

000d7df6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7df6:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7df8:	6842      	ldr	r2, [r0, #4]
   d7dfa:	4603      	mov	r3, r0
   d7dfc:	1054      	asrs	r4, r2, #1
   d7dfe:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7e02:	07d2      	lsls	r2, r2, #31
   d7e04:	bf48      	it	mi
   d7e06:	590a      	ldrmi	r2, [r1, r4]
   d7e08:	681b      	ldr	r3, [r3, #0]
      }
   d7e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7e0e:	bf48      	it	mi
   d7e10:	58d3      	ldrmi	r3, [r2, r3]
   d7e12:	4718      	bx	r3

000d7e14 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7e14:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7e18:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7e1c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7e1e:	3008      	adds	r0, #8
   d7e20:	f000 faea 	bl	d83f8 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7e24:	2004      	movs	r0, #4
   d7e26:	f7fc f936 	bl	d4096 <_Znwj>
   d7e2a:	4605      	mov	r5, r0
   d7e2c:	b398      	cbz	r0, d7e96 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7e2e:	491b      	ldr	r1, [pc, #108]	; (d7e9c <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7e30:	2014      	movs	r0, #20
   d7e32:	f002 fcf2 	bl	da81a <_ZnwjRKSt9nothrow_t>
   d7e36:	b130      	cbz	r0, d7e46 <_ZN21PublishQueueAsyncBase5setupEv+0x32>
      : _M_head_impl() { }
   d7e38:	2300      	movs	r3, #0
            exited(false) {
   d7e3a:	e9c0 3300 	strd	r3, r3, [r0]
   d7e3e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7e42:	7403      	strb	r3, [r0, #16]
   d7e44:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7e46:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7e48:	b1a0      	cbz	r0, d7e74 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7e4a:	4b15      	ldr	r3, [pc, #84]	; (d7ea0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7e4c:	4915      	ldr	r1, [pc, #84]	; (d7ea4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d7e4e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7e52:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7e56:	e9cd 0300 	strd	r0, r3, [sp]
   d7e5a:	2202      	movs	r2, #2
   d7e5c:	4b12      	ldr	r3, [pc, #72]	; (d7ea8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d7e5e:	3004      	adds	r0, #4
   d7e60:	f000 fa92 	bl	d8388 <os_thread_create>
   d7e64:	b930      	cbnz	r0, d7e74 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7e66:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7e68:	7c1b      	ldrb	r3, [r3, #16]
   d7e6a:	b9a3      	cbnz	r3, d7e96 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7e6c:	2001      	movs	r0, #1
   d7e6e:	f000 fb0b 	bl	d8488 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d7e72:	e7f8      	b.n	d7e66 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e74:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7e76:	2300      	movs	r3, #0
   d7e78:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7e7a:	b164      	cbz	r4, d7e96 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7e7c:	6827      	ldr	r7, [r4, #0]
   d7e7e:	b137      	cbz	r7, d7e8e <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7e80:	4638      	mov	r0, r7
   d7e82:	f7fc fa02 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7e86:	2110      	movs	r1, #16
   d7e88:	4638      	mov	r0, r7
   d7e8a:	f002 fcc4 	bl	da816 <_ZdlPvj>
   d7e8e:	2114      	movs	r1, #20
   d7e90:	4620      	mov	r0, r4
   d7e92:	f002 fcc0 	bl	da816 <_ZdlPvj>
   d7e96:	6075      	str	r5, [r6, #4]
}
   d7e98:	b003      	add	sp, #12
   d7e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e9c:	000de218 	.word	0x000de218
   d7ea0:	000d80b3 	.word	0x000d80b3
   d7ea4:	000ddf24 	.word	0x000ddf24
   d7ea8:	000d7dc7 	.word	0x000d7dc7

000d7eac <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7eac:	f247 5130 	movw	r1, #30000	; 0x7530
   d7eb0:	4a08      	ldr	r2, [pc, #32]	; (d7ed4 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7eb2:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7eb4:	4908      	ldr	r1, [pc, #32]	; (d7ed8 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7eb6:	6002      	str	r2, [r0, #0]
   d7eb8:	2200      	movs	r2, #0
   d7eba:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7ebe:	4907      	ldr	r1, [pc, #28]	; (d7edc <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7ec0:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7ec2:	4907      	ldr	r1, [pc, #28]	; (d7ee0 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7ec4:	6042      	str	r2, [r0, #4]
   d7ec6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7eca:	6181      	str	r1, [r0, #24]
   d7ecc:	8502      	strh	r2, [r0, #40]	; 0x28
   d7ece:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7ed2:	4770      	bx	lr
   d7ed4:	000ddfe8 	.word	0x000ddfe8
   d7ed8:	000d821d 	.word	0x000d821d
   d7edc:	000d7df7 	.word	0x000d7df7
   d7ee0:	000d7dad 	.word	0x000d7dad

000d7ee4 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7ee4:	b510      	push	{r4, lr}
   d7ee6:	4b04      	ldr	r3, [pc, #16]	; (d7ef8 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7ee8:	4604      	mov	r4, r0
   d7eea:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7eee:	f7fc f9cc 	bl	d428a <_ZNSt14_Function_baseD1Ev>
}
   d7ef2:	4620      	mov	r0, r4
   d7ef4:	bd10      	pop	{r4, pc}
   d7ef6:	bf00      	nop
   d7ef8:	000ddfe8 	.word	0x000ddfe8

000d7efc <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7efc:	b510      	push	{r4, lr}
   d7efe:	4b03      	ldr	r3, [pc, #12]	; (d7f0c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7f00:	6003      	str	r3, [r0, #0]
   d7f02:	4604      	mov	r4, r0
   d7f04:	f7ff ffee 	bl	d7ee4 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7f08:	4620      	mov	r0, r4
   d7f0a:	bd10      	pop	{r4, pc}
   d7f0c:	000de010 	.word	0x000de010

000d7f10 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7f10:	b510      	push	{r4, lr}
   d7f12:	4604      	mov	r4, r0
}
   d7f14:	f7ff fff2 	bl	d7efc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7f18:	4620      	mov	r0, r4
   d7f1a:	2138      	movs	r1, #56	; 0x38
   d7f1c:	f002 fc7b 	bl	da816 <_ZdlPvj>
   d7f20:	4620      	mov	r0, r4
   d7f22:	bd10      	pop	{r4, pc}

000d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7f24:	6880      	ldr	r0, [r0, #8]
   d7f26:	f000 ba6f 	b.w	d8408 <os_mutex_lock>

000d7f2a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7f2a:	6880      	ldr	r0, [r0, #8]
   d7f2c:	f000 ba74 	b.w	d8418 <os_mutex_unlock>

000d7f30 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7f30:	b510      	push	{r4, lr}
   d7f32:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7f34:	6800      	ldr	r0, [r0, #0]
   d7f36:	f7ff fff8 	bl	d7f2a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7f3a:	4620      	mov	r0, r4
   d7f3c:	bd10      	pop	{r4, pc}

000d7f3e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7f3e:	b513      	push	{r0, r1, r4, lr}
   d7f40:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7f42:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7f44:	f7ff ffee 	bl	d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7f4a:	88dc      	ldrh	r4, [r3, #6]
   d7f4c:	b2a4      	uxth	r4, r4
   d7f4e:	b10c      	cbz	r4, d7f54 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7f50:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7f54:	a801      	add	r0, sp, #4
   d7f56:	f7ff ffeb 	bl	d7f30 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	b002      	add	sp, #8
   d7f5e:	bd10      	pop	{r4, pc}

000d7f60 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d7f60:	b513      	push	{r0, r1, r4, lr}
   d7f62:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7f64:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7f66:	f7ff ffdd 	bl	d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7f6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d7f6e:	b943      	cbnz	r3, d7f82 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d7f72:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7f74:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7f76:	a801      	add	r0, sp, #4
   d7f78:	f7ff ffda 	bl	d7f30 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	b002      	add	sp, #8
   d7f80:	bd10      	pop	{r4, pc}
	bool result = false;
   d7f82:	2400      	movs	r4, #0
   d7f84:	e7f7      	b.n	d7f76 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7f86 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7f86:	b513      	push	{r0, r1, r4, lr}
   d7f88:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7f8a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7f8c:	f7ff ffca 	bl	d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d7f90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d7f92:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7f94:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7f96:	f7ff ffcb 	bl	d7f30 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7f9a:	4620      	mov	r0, r4
   d7f9c:	b002      	add	sp, #8
   d7f9e:	bd10      	pop	{r4, pc}

000d7fa0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fa4:	4699      	mov	r9, r3
   d7fa6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7fa8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7fac:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7fb0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7fb4:	4604      	mov	r4, r0
   d7fb6:	460f      	mov	r7, r1
   d7fb8:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7fba:	b913      	cbnz	r3, d7fc2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7fbc:	6803      	ldr	r3, [r0, #0]
   d7fbe:	689b      	ldr	r3, [r3, #8]
   d7fc0:	4798      	blx	r3
		data = "";
   d7fc2:	4b31      	ldr	r3, [pc, #196]	; (d8088 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7fc4:	4638      	mov	r0, r7
		data = "";
   d7fc6:	2e00      	cmp	r6, #0
   d7fc8:	bf08      	it	eq
   d7fca:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7fcc:	f003 fb1b 	bl	db606 <strlen>
   d7fd0:	4605      	mov	r5, r0
   d7fd2:	4630      	mov	r0, r6
   d7fd4:	f003 fb17 	bl	db606 <strlen>
   d7fd8:	4428      	add	r0, r5
   d7fda:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7fde:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7fe0:	bf1c      	itt	ne
   d7fe2:	f025 0503 	bicne.w	r5, r5, #3
   d7fe6:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7fe8:	4633      	mov	r3, r6
   d7fea:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7fee:	e9cd 9a00 	strd	r9, sl, [sp]
   d7ff2:	4926      	ldr	r1, [pc, #152]	; (d808c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7ff4:	4826      	ldr	r0, [pc, #152]	; (d8090 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7ff6:	463a      	mov	r2, r7
   d7ff8:	f7fc f9ca 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7ffc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7ffe:	3b08      	subs	r3, #8
   d8000:	42ab      	cmp	r3, r5
   d8002:	d212      	bcs.n	d802a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d8004:	2400      	movs	r4, #0
}
   d8006:	4620      	mov	r0, r4
   d8008:	b006      	add	sp, #24
   d800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d800e:	88cb      	ldrh	r3, [r1, #6]
   d8010:	2b01      	cmp	r3, #1
   d8012:	d036      	beq.n	d8082 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d8014:	a805      	add	r0, sp, #20
   d8016:	f7ff ff8b 	bl	d7f30 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d801a:	6823      	ldr	r3, [r4, #0]
   d801c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d8020:	699b      	ldr	r3, [r3, #24]
   d8022:	4620      	mov	r0, r4
   d8024:	4798      	blx	r3
   d8026:	2800      	cmp	r0, #0
   d8028:	d0ec      	beq.n	d8004 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d802a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d802c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d802e:	f7ff ff79 	bl	d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8032:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d8034:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d8036:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8038:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d803a:	1ad2      	subs	r2, r2, r3
   d803c:	42aa      	cmp	r2, r5
   d803e:	d3e6      	bcc.n	d800e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d8040:	ea48 080a 	orr.w	r8, r8, sl
   d8044:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d8048:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d804c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d804e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d8052:	4639      	mov	r1, r7
   d8054:	4640      	mov	r0, r8
   d8056:	f003 fab1 	bl	db5bc <strcpy>
				cp += strlen(cp) + 1;
   d805a:	4640      	mov	r0, r8
   d805c:	f003 fad3 	bl	db606 <strlen>
   d8060:	3001      	adds	r0, #1
				strcpy(cp, data);
   d8062:	4631      	mov	r1, r6
   d8064:	4440      	add	r0, r8
   d8066:	f003 faa9 	bl	db5bc <strcpy>
				nextFree += size;
   d806a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d806c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d806e:	441d      	add	r5, r3
   d8070:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d8072:	88d3      	ldrh	r3, [r2, #6]
   d8074:	3301      	adds	r3, #1
   d8076:	80d3      	strh	r3, [r2, #6]
				return true;
   d8078:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d807a:	a805      	add	r0, sp, #20
   d807c:	f7ff ff58 	bl	d7f30 <_ZN11StMutexLockD1Ev>
   d8080:	e7c1      	b.n	d8006 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d8082:	2400      	movs	r4, #0
   d8084:	e7f9      	b.n	d807a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d8086:	bf00      	nop
   d8088:	000de240 	.word	0x000de240
   d808c:	000ddf36 	.word	0x000ddf36
   d8090:	2003e608 	.word	0x2003e608

000d8094 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d8094:	b508      	push	{r3, lr}
   d8096:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8098:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d809c:	69a3      	ldr	r3, [r4, #24]
   d809e:	b90b      	cbnz	r3, d80a4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d80a0:	f002 fbbf 	bl	da822 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d80a4:	69e3      	ldr	r3, [r4, #28]
   d80a6:	4621      	mov	r1, r4
   d80a8:	4628      	mov	r0, r5
   d80aa:	4798      	blx	r3
		os_thread_yield();
   d80ac:	f000 f974 	bl	d8398 <os_thread_yield>
	while(true) {
   d80b0:	e7f4      	b.n	d809c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d80b2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d80b2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d80b4:	f7ff ffee 	bl	d8094 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d80b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d80b8:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d80ba:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d80be:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d80c0:	4628      	mov	r0, r5
   d80c2:	f003 faa0 	bl	db606 <strlen>
   d80c6:	3001      	adds	r0, #1
   d80c8:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d80ca:	4628      	mov	r0, r5
   d80cc:	f003 fa9b 	bl	db606 <strlen>
	size_t offset = start - retainedBuffer;
   d80d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d80d2:	3001      	adds	r0, #1
   d80d4:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d80d6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d80d8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d80dc:	bf1c      	itt	ne
   d80de:	f1c3 0304 	rsbne	r3, r3, #4
   d80e2:	18c0      	addne	r0, r0, r3
}
   d80e4:	bd68      	pop	{r3, r5, r6, pc}

000d80e6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d80e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d80e8:	4604      	mov	r4, r0
   d80ea:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d80ec:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d80ee:	f7ff ff19 	bl	d7f24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d80f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d80f4:	88fb      	ldrh	r3, [r7, #6]
   d80f6:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d80fa:	b1e6      	cbz	r6, d8136 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d80fc:	2b01      	cmp	r3, #1
   d80fe:	d922      	bls.n	d8146 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d8100:	4629      	mov	r1, r5
   d8102:	4620      	mov	r0, r4
   d8104:	f7ff ffd8 	bl	d80b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d8108:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d810a:	4629      	mov	r1, r5
   d810c:	4620      	mov	r0, r4
   d810e:	f7ff ffd3 	bl	d80b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8112:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8114:	443a      	add	r2, r7
	if (after > 0) {
   d8116:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d8118:	4601      	mov	r1, r0
	size_t len = next - start;
   d811a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d811e:	d002      	beq.n	d8126 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d8120:	4628      	mov	r0, r5
   d8122:	f003 f9fb 	bl	db51c <memmove>
	nextFree -= len;
   d8126:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d8128:	1b9b      	subs	r3, r3, r6
   d812a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d812c:	88fb      	ldrh	r3, [r7, #6]
   d812e:	3b01      	subs	r3, #1
   d8130:	80fb      	strh	r3, [r7, #6]
	return true;
   d8132:	2601      	movs	r6, #1
   d8134:	e001      	b.n	d813a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d8136:	2b00      	cmp	r3, #0
   d8138:	d1e7      	bne.n	d810a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d813a:	a801      	add	r0, sp, #4
   d813c:	f7ff fef8 	bl	d7f30 <_ZN11StMutexLockD1Ev>
}
   d8140:	4630      	mov	r0, r6
   d8142:	b003      	add	sp, #12
   d8144:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d8146:	2600      	movs	r6, #0
   d8148:	e7f7      	b.n	d813a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d814c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8150:	460d      	mov	r5, r1
   d8152:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8154:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d8156:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8158:	f7ff fea8 	bl	d7eac <_ZN21PublishQueueAsyncBaseC1Ev>
   d815c:	4b15      	ldr	r3, [pc, #84]	; (d81b4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d815e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8162:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8164:	4b14      	ldr	r3, [pc, #80]	; (d81b8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8166:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8168:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d816a:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d816c:	4698      	mov	r8, r3
   d816e:	d117      	bne.n	d81a0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d8170:	88ab      	ldrh	r3, [r5, #4]
   d8172:	b29b      	uxth	r3, r3
   d8174:	42b3      	cmp	r3, r6
   d8176:	d113      	bne.n	d81a0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8178:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d817c:	6367      	str	r7, [r4, #52]	; 0x34
   d817e:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d8182:	88eb      	ldrh	r3, [r5, #6]
   d8184:	fa1f f289 	uxth.w	r2, r9
   d8188:	b29b      	uxth	r3, r3
   d818a:	429a      	cmp	r2, r3
   d818c:	d20e      	bcs.n	d81ac <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d818e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d8190:	4620      	mov	r0, r4
   d8192:	f7ff ff91 	bl	d80b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d8196:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d8198:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d819a:	f109 0901 	add.w	r9, r9, #1
   d819e:	d9f0      	bls.n	d8182 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d81a0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d81a2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d81a6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d81a8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d81aa:	80eb      	strh	r3, [r5, #6]
}
   d81ac:	4620      	mov	r0, r4
   d81ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d81b2:	bf00      	nop
   d81b4:	000de010 	.word	0x000de010
   d81b8:	d19cab61 	.word	0xd19cab61

000d81bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d81bc:	b510      	push	{r4, lr}
   d81be:	e9d1 2300 	ldrd	r2, r3, [r1]
   d81c2:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d81c4:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d81c6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d81c8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d81ca:	b90a      	cbnz	r2, d81d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d81cc:	07d9      	lsls	r1, r3, #31
   d81ce:	d505      	bpl.n	d81dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d81d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d81d4:	4b0f      	ldr	r3, [pc, #60]	; (d8214 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d81d6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d81d8:	4b0f      	ldr	r3, [pc, #60]	; (d8218 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d81da:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81dc:	ab02      	add	r3, sp, #8
   d81de:	e893 0003 	ldmia.w	r3, {r0, r1}
   d81e2:	466a      	mov	r2, sp
   d81e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d81e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d81ec:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d81f0:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81f4:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d81f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d81fa:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d81fc:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81fe:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8200:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d8202:	4618      	mov	r0, r3
   d8204:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8206:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8208:	9105      	str	r1, [sp, #20]
   d820a:	f7fc f83e 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	}
   d820e:	4620      	mov	r0, r4
   d8210:	b006      	add	sp, #24
   d8212:	bd10      	pop	{r4, pc}
   d8214:	000d7df7 	.word	0x000d7df7
   d8218:	000d7dad 	.word	0x000d7dad

000d821c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d821c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d821e:	4b05      	ldr	r3, [pc, #20]	; (d8234 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d8220:	9300      	str	r3, [sp, #0]
   d8222:	4669      	mov	r1, sp
   d8224:	2300      	movs	r3, #0
   d8226:	3010      	adds	r0, #16
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	f7ff ffc7 	bl	d81bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d822e:	b003      	add	sp, #12
   d8230:	f85d fb04 	ldr.w	pc, [sp], #4
   d8234:	000d8265 	.word	0x000d8265

000d8238 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d8238:	b513      	push	{r0, r1, r4, lr}
   d823a:	4604      	mov	r4, r0
   d823c:	f000 f934 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d8240:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8242:	1ac0      	subs	r0, r0, r3
   d8244:	68e3      	ldr	r3, [r4, #12]
   d8246:	4298      	cmp	r0, r3
   d8248:	d308      	bcc.n	d825c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d824a:	4b05      	ldr	r3, [pc, #20]	; (d8260 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d824c:	9300      	str	r3, [sp, #0]
   d824e:	4669      	mov	r1, sp
   d8250:	2300      	movs	r3, #0
   d8252:	f104 0010 	add.w	r0, r4, #16
   d8256:	9301      	str	r3, [sp, #4]
   d8258:	f7ff ffb0 	bl	d81bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d825c:	b002      	add	sp, #8
   d825e:	bd10      	pop	{r4, pc}
   d8260:	000d8265 	.word	0x000d8265

000d8264 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d8264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d8268:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d826c:	b086      	sub	sp, #24
   d826e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d8270:	2b00      	cmp	r3, #0
   d8272:	d164      	bne.n	d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8274:	f000 fb16 	bl	d88a4 <spark_cloud_flag_connected>
   d8278:	2800      	cmp	r0, #0
   d827a:	d060      	beq.n	d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d827c:	f000 f914 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
   d8280:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8282:	1ac0      	subs	r0, r0, r3
   d8284:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d8288:	4298      	cmp	r0, r3
   d828a:	d958      	bls.n	d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d828c:	6823      	ldr	r3, [r4, #0]
   d828e:	4620      	mov	r0, r4
   d8290:	695b      	ldr	r3, [r3, #20]
   d8292:	4798      	blx	r3
		if (data) {
   d8294:	4605      	mov	r5, r0
   d8296:	2800      	cmp	r0, #0
   d8298:	d051      	beq.n	d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d829a:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d829e:	2301      	movs	r3, #1
   d82a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d82a4:	4638      	mov	r0, r7
   d82a6:	f003 f9ae 	bl	db606 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d82aa:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d82ae:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d82b2:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d82b4:	682b      	ldr	r3, [r5, #0]
   d82b6:	492b      	ldr	r1, [pc, #172]	; (d8364 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d82b8:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d82ba:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d82bc:	4633      	mov	r3, r6
   d82be:	482a      	ldr	r0, [pc, #168]	; (d8368 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d82c0:	463a      	mov	r2, r7
   d82c2:	f7fc f865 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d82c6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d82c8:	f88d 8000 	strb.w	r8, [sp]
   d82cc:	4632      	mov	r2, r6
   d82ce:	4639      	mov	r1, r7
   d82d0:	a802      	add	r0, sp, #8
   d82d2:	f000 fd8f 	bl	d8df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d82d6:	9d02      	ldr	r5, [sp, #8]
   d82d8:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d82da:	b91b      	cbnz	r3, d82e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d82dc:	2001      	movs	r0, #1
   d82de:	f000 fbf9 	bl	d8ad4 <delay>
			while(!request.isDone()) {
   d82e2:	e7f8      	b.n	d82d6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d82e4:	2000      	movs	r0, #0
   d82e6:	f000 fa7f 	bl	d87e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d82ea:	b120      	cbz	r0, d82f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d82ec:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d82ee:	b913      	cbnz	r3, d82f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d82f0:	f000 fac8 	bl	d8884 <spark_process>
    }
   d82f4:	e7fa      	b.n	d82ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d82f6:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d82f8:	2b01      	cmp	r3, #1
   d82fa:	d123      	bne.n	d8344 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d82fc:	491b      	ldr	r1, [pc, #108]	; (d836c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d82fe:	481a      	ldr	r0, [pc, #104]	; (d8368 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8300:	f7fc f846 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d8304:	6823      	ldr	r3, [r4, #0]
   d8306:	2100      	movs	r1, #0
   d8308:	699b      	ldr	r3, [r3, #24]
   d830a:	4620      	mov	r0, r4
   d830c:	4798      	blx	r3
			isSending = false;
   d830e:	2300      	movs	r3, #0
   d8310:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d8314:	f000 f8c8 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d8318:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d831a:	9c03      	ldr	r4, [sp, #12]
   d831c:	b17c      	cbz	r4, d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d831e:	6863      	ldr	r3, [r4, #4]
   d8320:	3b01      	subs	r3, #1
   d8322:	6063      	str	r3, [r4, #4]
   d8324:	b95b      	cbnz	r3, d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d8326:	6823      	ldr	r3, [r4, #0]
   d8328:	4620      	mov	r0, r4
   d832a:	689b      	ldr	r3, [r3, #8]
   d832c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d832e:	68a3      	ldr	r3, [r4, #8]
   d8330:	3b01      	subs	r3, #1
   d8332:	60a3      	str	r3, [r4, #8]
   d8334:	b91b      	cbnz	r3, d833e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d8336:	6823      	ldr	r3, [r4, #0]
   d8338:	4620      	mov	r0, r4
   d833a:	68db      	ldr	r3, [r3, #12]
   d833c:	4798      	blx	r3
}
   d833e:	b006      	add	sp, #24
   d8340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d8344:	68e2      	ldr	r2, [r4, #12]
   d8346:	490a      	ldr	r1, [pc, #40]	; (d8370 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d8348:	4807      	ldr	r0, [pc, #28]	; (d8368 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d834a:	f7fc f821 	bl	d4390 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d834e:	4b09      	ldr	r3, [pc, #36]	; (d8374 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d8350:	9304      	str	r3, [sp, #16]
   d8352:	a904      	add	r1, sp, #16
   d8354:	2300      	movs	r3, #0
   d8356:	f104 0010 	add.w	r0, r4, #16
   d835a:	9305      	str	r3, [sp, #20]
   d835c:	f7ff ff2e 	bl	d81bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8360:	e7d5      	b.n	d830e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d8362:	bf00      	nop
   d8364:	000ddf77 	.word	0x000ddf77
   d8368:	2003e608 	.word	0x2003e608
   d836c:	000ddf98 	.word	0x000ddf98
   d8370:	000ddfaf 	.word	0x000ddfaf
   d8374:	000d8239 	.word	0x000d8239

000d8378 <_GLOBAL__sub_I_pubqLogger>:
   d8378:	4b01      	ldr	r3, [pc, #4]	; (d8380 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d837a:	4a02      	ldr	r2, [pc, #8]	; (d8384 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d837c:	601a      	str	r2, [r3, #0]
}
   d837e:	4770      	bx	lr
   d8380:	2003e608 	.word	0x2003e608
   d8384:	000ddfd6 	.word	0x000ddfd6

000d8388 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d8388:	b508      	push	{r3, lr}
   d838a:	4b02      	ldr	r3, [pc, #8]	; (d8394 <os_thread_create+0xc>)
   d838c:	681b      	ldr	r3, [r3, #0]
   d838e:	685b      	ldr	r3, [r3, #4]
   d8390:	9301      	str	r3, [sp, #4]
   d8392:	bd08      	pop	{r3, pc}
   d8394:	00030248 	.word	0x00030248

000d8398 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8398:	b508      	push	{r3, lr}
   d839a:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <os_thread_yield+0xc>)
   d839c:	681b      	ldr	r3, [r3, #0]
   d839e:	68db      	ldr	r3, [r3, #12]
   d83a0:	9301      	str	r3, [sp, #4]
   d83a2:	bd08      	pop	{r3, pc}
   d83a4:	00030248 	.word	0x00030248

000d83a8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d83a8:	b508      	push	{r3, lr}
   d83aa:	4b02      	ldr	r3, [pc, #8]	; (d83b4 <os_thread_scheduling+0xc>)
   d83ac:	681b      	ldr	r3, [r3, #0]
   d83ae:	69db      	ldr	r3, [r3, #28]
   d83b0:	9301      	str	r3, [sp, #4]
   d83b2:	bd08      	pop	{r3, pc}
   d83b4:	00030248 	.word	0x00030248

000d83b8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d83b8:	b508      	push	{r3, lr}
   d83ba:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <os_timer_create+0xc>)
   d83bc:	681b      	ldr	r3, [r3, #0]
   d83be:	6a1b      	ldr	r3, [r3, #32]
   d83c0:	9301      	str	r3, [sp, #4]
   d83c2:	bd08      	pop	{r3, pc}
   d83c4:	00030248 	.word	0x00030248

000d83c8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d83c8:	b508      	push	{r3, lr}
   d83ca:	4b02      	ldr	r3, [pc, #8]	; (d83d4 <os_timer_destroy+0xc>)
   d83cc:	681b      	ldr	r3, [r3, #0]
   d83ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83d0:	9301      	str	r3, [sp, #4]
   d83d2:	bd08      	pop	{r3, pc}
   d83d4:	00030248 	.word	0x00030248

000d83d8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d83d8:	b508      	push	{r3, lr}
   d83da:	4b02      	ldr	r3, [pc, #8]	; (d83e4 <os_timer_get_id+0xc>)
   d83dc:	681b      	ldr	r3, [r3, #0]
   d83de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d83e0:	9301      	str	r3, [sp, #4]
   d83e2:	bd08      	pop	{r3, pc}
   d83e4:	00030248 	.word	0x00030248

000d83e8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d83e8:	b508      	push	{r3, lr}
   d83ea:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <os_timer_change+0xc>)
   d83ec:	681b      	ldr	r3, [r3, #0]
   d83ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83f0:	9301      	str	r3, [sp, #4]
   d83f2:	bd08      	pop	{r3, pc}
   d83f4:	00030248 	.word	0x00030248

000d83f8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d83f8:	b508      	push	{r3, lr}
   d83fa:	4b02      	ldr	r3, [pc, #8]	; (d8404 <os_mutex_create+0xc>)
   d83fc:	681b      	ldr	r3, [r3, #0]
   d83fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8400:	9301      	str	r3, [sp, #4]
   d8402:	bd08      	pop	{r3, pc}
   d8404:	00030248 	.word	0x00030248

000d8408 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d8408:	b508      	push	{r3, lr}
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <os_mutex_lock+0xc>)
   d840c:	681b      	ldr	r3, [r3, #0]
   d840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8410:	9301      	str	r3, [sp, #4]
   d8412:	bd08      	pop	{r3, pc}
   d8414:	00030248 	.word	0x00030248

000d8418 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d8418:	b508      	push	{r3, lr}
   d841a:	4b02      	ldr	r3, [pc, #8]	; (d8424 <os_mutex_unlock+0xc>)
   d841c:	681b      	ldr	r3, [r3, #0]
   d841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8420:	9301      	str	r3, [sp, #4]
   d8422:	bd08      	pop	{r3, pc}
   d8424:	00030248 	.word	0x00030248

000d8428 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8428:	b508      	push	{r3, lr}
   d842a:	4b02      	ldr	r3, [pc, #8]	; (d8434 <os_mutex_recursive_create+0xc>)
   d842c:	681b      	ldr	r3, [r3, #0]
   d842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8430:	9301      	str	r3, [sp, #4]
   d8432:	bd08      	pop	{r3, pc}
   d8434:	00030248 	.word	0x00030248

000d8438 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8438:	b508      	push	{r3, lr}
   d843a:	4b02      	ldr	r3, [pc, #8]	; (d8444 <os_mutex_recursive_destroy+0xc>)
   d843c:	681b      	ldr	r3, [r3, #0]
   d843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8440:	9301      	str	r3, [sp, #4]
   d8442:	bd08      	pop	{r3, pc}
   d8444:	00030248 	.word	0x00030248

000d8448 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d8448:	b508      	push	{r3, lr}
   d844a:	4b02      	ldr	r3, [pc, #8]	; (d8454 <os_thread_exit+0xc>)
   d844c:	681b      	ldr	r3, [r3, #0]
   d844e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	bd08      	pop	{r3, pc}
   d8454:	00030248 	.word	0x00030248

000d8458 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8458:	b508      	push	{r3, lr}
   d845a:	4b02      	ldr	r3, [pc, #8]	; (d8464 <os_timer_set_id+0xc>)
   d845c:	681b      	ldr	r3, [r3, #0]
   d845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8460:	9301      	str	r3, [sp, #4]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	00030248 	.word	0x00030248

000d8468 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d8468:	b508      	push	{r3, lr}
   d846a:	4b02      	ldr	r3, [pc, #8]	; (d8474 <HAL_Feature_Set+0xc>)
   d846c:	681b      	ldr	r3, [r3, #0]
   d846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8470:	9301      	str	r3, [sp, #4]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	00030234 	.word	0x00030234

000d8478 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8478:	b508      	push	{r3, lr}
   d847a:	4b02      	ldr	r3, [pc, #8]	; (d8484 <HAL_RNG_GetRandomNumber+0xc>)
   d847c:	681b      	ldr	r3, [r3, #0]
   d847e:	685b      	ldr	r3, [r3, #4]
   d8480:	9301      	str	r3, [sp, #4]
   d8482:	bd08      	pop	{r3, pc}
   d8484:	00030218 	.word	0x00030218

000d8488 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d8488:	b508      	push	{r3, lr}
   d848a:	4b02      	ldr	r3, [pc, #8]	; (d8494 <HAL_Delay_Milliseconds+0xc>)
   d848c:	681b      	ldr	r3, [r3, #0]
   d848e:	689b      	ldr	r3, [r3, #8]
   d8490:	9301      	str	r3, [sp, #4]
   d8492:	bd08      	pop	{r3, pc}
   d8494:	00030218 	.word	0x00030218

000d8498 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8498:	b508      	push	{r3, lr}
   d849a:	4b02      	ldr	r3, [pc, #8]	; (d84a4 <HAL_Delay_Microseconds+0xc>)
   d849c:	681b      	ldr	r3, [r3, #0]
   d849e:	68db      	ldr	r3, [r3, #12]
   d84a0:	9301      	str	r3, [sp, #4]
   d84a2:	bd08      	pop	{r3, pc}
   d84a4:	00030218 	.word	0x00030218

000d84a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d84a8:	b508      	push	{r3, lr}
   d84aa:	4b02      	ldr	r3, [pc, #8]	; (d84b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d84ac:	681b      	ldr	r3, [r3, #0]
   d84ae:	695b      	ldr	r3, [r3, #20]
   d84b0:	9301      	str	r3, [sp, #4]
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	00030218 	.word	0x00030218

000d84b8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d84b8:	b508      	push	{r3, lr}
   d84ba:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <hal_rtc_time_is_valid+0xc>)
   d84bc:	681b      	ldr	r3, [r3, #0]
   d84be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d84c0:	9301      	str	r3, [sp, #4]
   d84c2:	bd08      	pop	{r3, pc}
   d84c4:	00030218 	.word	0x00030218

000d84c8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d84c8:	b508      	push	{r3, lr}
   d84ca:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <hal_timer_millis+0xc>)
   d84cc:	681b      	ldr	r3, [r3, #0]
   d84ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d84d0:	9301      	str	r3, [sp, #4]
   d84d2:	bd08      	pop	{r3, pc}
   d84d4:	00030218 	.word	0x00030218

000d84d8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d84d8:	b508      	push	{r3, lr}
   d84da:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <hal_rtc_get_time+0xc>)
   d84dc:	681b      	ldr	r3, [r3, #0]
   d84de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d84e0:	9301      	str	r3, [sp, #4]
   d84e2:	bd08      	pop	{r3, pc}
   d84e4:	00030218 	.word	0x00030218

000d84e8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d84e8:	b508      	push	{r3, lr}
   d84ea:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <hal_rtc_set_time+0xc>)
   d84ec:	681b      	ldr	r3, [r3, #0]
   d84ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d84f0:	9301      	str	r3, [sp, #4]
   d84f2:	bd08      	pop	{r3, pc}
   d84f4:	00030218 	.word	0x00030218

000d84f8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d84f8:	b508      	push	{r3, lr}
   d84fa:	4b02      	ldr	r3, [pc, #8]	; (d8504 <HAL_Validate_Pin_Function+0xc>)
   d84fc:	681b      	ldr	r3, [r3, #0]
   d84fe:	685b      	ldr	r3, [r3, #4]
   d8500:	9301      	str	r3, [sp, #4]
   d8502:	bd08      	pop	{r3, pc}
   d8504:	0003022c 	.word	0x0003022c

000d8508 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8508:	b508      	push	{r3, lr}
   d850a:	4b02      	ldr	r3, [pc, #8]	; (d8514 <HAL_Pin_Mode+0xc>)
   d850c:	681b      	ldr	r3, [r3, #0]
   d850e:	689b      	ldr	r3, [r3, #8]
   d8510:	9301      	str	r3, [sp, #4]
   d8512:	bd08      	pop	{r3, pc}
   d8514:	0003022c 	.word	0x0003022c

000d8518 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8518:	b508      	push	{r3, lr}
   d851a:	4b02      	ldr	r3, [pc, #8]	; (d8524 <HAL_Get_Pin_Mode+0xc>)
   d851c:	681b      	ldr	r3, [r3, #0]
   d851e:	68db      	ldr	r3, [r3, #12]
   d8520:	9301      	str	r3, [sp, #4]
   d8522:	bd08      	pop	{r3, pc}
   d8524:	0003022c 	.word	0x0003022c

000d8528 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8528:	b508      	push	{r3, lr}
   d852a:	4b02      	ldr	r3, [pc, #8]	; (d8534 <HAL_GPIO_Write+0xc>)
   d852c:	681b      	ldr	r3, [r3, #0]
   d852e:	691b      	ldr	r3, [r3, #16]
   d8530:	9301      	str	r3, [sp, #4]
   d8532:	bd08      	pop	{r3, pc}
   d8534:	0003022c 	.word	0x0003022c

000d8538 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d8538:	b508      	push	{r3, lr}
   d853a:	4b02      	ldr	r3, [pc, #8]	; (d8544 <HAL_Interrupts_Attach+0xc>)
   d853c:	681b      	ldr	r3, [r3, #0]
   d853e:	699b      	ldr	r3, [r3, #24]
   d8540:	9301      	str	r3, [sp, #4]
   d8542:	bd08      	pop	{r3, pc}
   d8544:	0003022c 	.word	0x0003022c

000d8548 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d8548:	b508      	push	{r3, lr}
   d854a:	4b02      	ldr	r3, [pc, #8]	; (d8554 <HAL_Interrupts_Detach+0xc>)
   d854c:	681b      	ldr	r3, [r3, #0]
   d854e:	69db      	ldr	r3, [r3, #28]
   d8550:	9301      	str	r3, [sp, #4]
   d8552:	bd08      	pop	{r3, pc}
   d8554:	0003022c 	.word	0x0003022c

000d8558 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d8558:	b508      	push	{r3, lr}
   d855a:	4b02      	ldr	r3, [pc, #8]	; (d8564 <hal_adc_read+0xc>)
   d855c:	681b      	ldr	r3, [r3, #0]
   d855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8560:	9301      	str	r3, [sp, #4]
   d8562:	bd08      	pop	{r3, pc}
   d8564:	0003022c 	.word	0x0003022c

000d8568 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8568:	b508      	push	{r3, lr}
   d856a:	4b02      	ldr	r3, [pc, #8]	; (d8574 <hal_i2c_begin+0xc>)
   d856c:	681b      	ldr	r3, [r3, #0]
   d856e:	68db      	ldr	r3, [r3, #12]
   d8570:	9301      	str	r3, [sp, #4]
   d8572:	bd08      	pop	{r3, pc}
   d8574:	00030228 	.word	0x00030228

000d8578 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8578:	b508      	push	{r3, lr}
   d857a:	4b02      	ldr	r3, [pc, #8]	; (d8584 <hal_i2c_begin_transmission+0xc>)
   d857c:	681b      	ldr	r3, [r3, #0]
   d857e:	699b      	ldr	r3, [r3, #24]
   d8580:	9301      	str	r3, [sp, #4]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	00030228 	.word	0x00030228

000d8588 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8588:	b508      	push	{r3, lr}
   d858a:	4b02      	ldr	r3, [pc, #8]	; (d8594 <hal_i2c_end_transmission+0xc>)
   d858c:	681b      	ldr	r3, [r3, #0]
   d858e:	69db      	ldr	r3, [r3, #28]
   d8590:	9301      	str	r3, [sp, #4]
   d8592:	bd08      	pop	{r3, pc}
   d8594:	00030228 	.word	0x00030228

000d8598 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8598:	b508      	push	{r3, lr}
   d859a:	4b02      	ldr	r3, [pc, #8]	; (d85a4 <hal_i2c_write+0xc>)
   d859c:	681b      	ldr	r3, [r3, #0]
   d859e:	6a1b      	ldr	r3, [r3, #32]
   d85a0:	9301      	str	r3, [sp, #4]
   d85a2:	bd08      	pop	{r3, pc}
   d85a4:	00030228 	.word	0x00030228

000d85a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d85a8:	b508      	push	{r3, lr}
   d85aa:	4b02      	ldr	r3, [pc, #8]	; (d85b4 <hal_i2c_available+0xc>)
   d85ac:	681b      	ldr	r3, [r3, #0]
   d85ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d85b0:	9301      	str	r3, [sp, #4]
   d85b2:	bd08      	pop	{r3, pc}
   d85b4:	00030228 	.word	0x00030228

000d85b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d85b8:	b508      	push	{r3, lr}
   d85ba:	4b02      	ldr	r3, [pc, #8]	; (d85c4 <hal_i2c_read+0xc>)
   d85bc:	681b      	ldr	r3, [r3, #0]
   d85be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d85c0:	9301      	str	r3, [sp, #4]
   d85c2:	bd08      	pop	{r3, pc}
   d85c4:	00030228 	.word	0x00030228

000d85c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d85c8:	b508      	push	{r3, lr}
   d85ca:	4b02      	ldr	r3, [pc, #8]	; (d85d4 <hal_i2c_peek+0xc>)
   d85cc:	681b      	ldr	r3, [r3, #0]
   d85ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d85d0:	9301      	str	r3, [sp, #4]
   d85d2:	bd08      	pop	{r3, pc}
   d85d4:	00030228 	.word	0x00030228

000d85d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d85d8:	b508      	push	{r3, lr}
   d85da:	4b02      	ldr	r3, [pc, #8]	; (d85e4 <hal_i2c_flush+0xc>)
   d85dc:	681b      	ldr	r3, [r3, #0]
   d85de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d85e0:	9301      	str	r3, [sp, #4]
   d85e2:	bd08      	pop	{r3, pc}
   d85e4:	00030228 	.word	0x00030228

000d85e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d85e8:	b508      	push	{r3, lr}
   d85ea:	4b02      	ldr	r3, [pc, #8]	; (d85f4 <hal_i2c_is_enabled+0xc>)
   d85ec:	681b      	ldr	r3, [r3, #0]
   d85ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d85f0:	9301      	str	r3, [sp, #4]
   d85f2:	bd08      	pop	{r3, pc}
   d85f4:	00030228 	.word	0x00030228

000d85f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d85f8:	b508      	push	{r3, lr}
   d85fa:	4b02      	ldr	r3, [pc, #8]	; (d8604 <hal_i2c_init+0xc>)
   d85fc:	681b      	ldr	r3, [r3, #0]
   d85fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8600:	9301      	str	r3, [sp, #4]
   d8602:	bd08      	pop	{r3, pc}
   d8604:	00030228 	.word	0x00030228

000d8608 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8608:	b508      	push	{r3, lr}
   d860a:	4b02      	ldr	r3, [pc, #8]	; (d8614 <hal_i2c_lock+0xc>)
   d860c:	681b      	ldr	r3, [r3, #0]
   d860e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8610:	9301      	str	r3, [sp, #4]
   d8612:	bd08      	pop	{r3, pc}
   d8614:	00030228 	.word	0x00030228

000d8618 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8618:	b508      	push	{r3, lr}
   d861a:	4b02      	ldr	r3, [pc, #8]	; (d8624 <hal_i2c_unlock+0xc>)
   d861c:	681b      	ldr	r3, [r3, #0]
   d861e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8620:	9301      	str	r3, [sp, #4]
   d8622:	bd08      	pop	{r3, pc}
   d8624:	00030228 	.word	0x00030228

000d8628 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8628:	b508      	push	{r3, lr}
   d862a:	4b02      	ldr	r3, [pc, #8]	; (d8634 <hal_i2c_request_ex+0xc>)
   d862c:	681b      	ldr	r3, [r3, #0]
   d862e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8630:	9301      	str	r3, [sp, #4]
   d8632:	bd08      	pop	{r3, pc}
   d8634:	00030228 	.word	0x00030228

000d8638 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8638:	b508      	push	{r3, lr}
   d863a:	4b02      	ldr	r3, [pc, #8]	; (d8644 <inet_inet_ntop+0xc>)
   d863c:	681b      	ldr	r3, [r3, #0]
   d863e:	695b      	ldr	r3, [r3, #20]
   d8640:	9301      	str	r3, [sp, #4]
   d8642:	bd08      	pop	{r3, pc}
   d8644:	00030264 	.word	0x00030264

000d8648 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8648:	b508      	push	{r3, lr}
   d864a:	4b02      	ldr	r3, [pc, #8]	; (d8654 <netdb_freeaddrinfo+0xc>)
   d864c:	681b      	ldr	r3, [r3, #0]
   d864e:	689b      	ldr	r3, [r3, #8]
   d8650:	9301      	str	r3, [sp, #4]
   d8652:	bd08      	pop	{r3, pc}
   d8654:	00030268 	.word	0x00030268

000d8658 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8658:	b508      	push	{r3, lr}
   d865a:	4b02      	ldr	r3, [pc, #8]	; (d8664 <netdb_getaddrinfo+0xc>)
   d865c:	681b      	ldr	r3, [r3, #0]
   d865e:	68db      	ldr	r3, [r3, #12]
   d8660:	9301      	str	r3, [sp, #4]
   d8662:	bd08      	pop	{r3, pc}
   d8664:	00030268 	.word	0x00030268

000d8668 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8668:	b508      	push	{r3, lr}
   d866a:	4b02      	ldr	r3, [pc, #8]	; (d8674 <hal_spi_init+0xc>)
   d866c:	681b      	ldr	r3, [r3, #0]
   d866e:	69db      	ldr	r3, [r3, #28]
   d8670:	9301      	str	r3, [sp, #4]
   d8672:	bd08      	pop	{r3, pc}
   d8674:	00030230 	.word	0x00030230

000d8678 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8678:	b508      	push	{r3, lr}
   d867a:	4b02      	ldr	r3, [pc, #8]	; (d8684 <hal_spi_is_enabled+0xc>)
   d867c:	681b      	ldr	r3, [r3, #0]
   d867e:	6a1b      	ldr	r3, [r3, #32]
   d8680:	9301      	str	r3, [sp, #4]
   d8682:	bd08      	pop	{r3, pc}
   d8684:	00030230 	.word	0x00030230

000d8688 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8688:	b508      	push	{r3, lr}
   d868a:	4b02      	ldr	r3, [pc, #8]	; (d8694 <hal_usart_init+0xc>)
   d868c:	681b      	ldr	r3, [r3, #0]
   d868e:	681b      	ldr	r3, [r3, #0]
   d8690:	9301      	str	r3, [sp, #4]
   d8692:	bd08      	pop	{r3, pc}
   d8694:	0003023c 	.word	0x0003023c

000d8698 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8698:	b508      	push	{r3, lr}
   d869a:	4b02      	ldr	r3, [pc, #8]	; (d86a4 <hal_usart_write+0xc>)
   d869c:	681b      	ldr	r3, [r3, #0]
   d869e:	68db      	ldr	r3, [r3, #12]
   d86a0:	9301      	str	r3, [sp, #4]
   d86a2:	bd08      	pop	{r3, pc}
   d86a4:	0003023c 	.word	0x0003023c

000d86a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d86a8:	b508      	push	{r3, lr}
   d86aa:	4b02      	ldr	r3, [pc, #8]	; (d86b4 <hal_usart_available+0xc>)
   d86ac:	681b      	ldr	r3, [r3, #0]
   d86ae:	691b      	ldr	r3, [r3, #16]
   d86b0:	9301      	str	r3, [sp, #4]
   d86b2:	bd08      	pop	{r3, pc}
   d86b4:	0003023c 	.word	0x0003023c

000d86b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d86b8:	b508      	push	{r3, lr}
   d86ba:	4b02      	ldr	r3, [pc, #8]	; (d86c4 <hal_usart_read+0xc>)
   d86bc:	681b      	ldr	r3, [r3, #0]
   d86be:	695b      	ldr	r3, [r3, #20]
   d86c0:	9301      	str	r3, [sp, #4]
   d86c2:	bd08      	pop	{r3, pc}
   d86c4:	0003023c 	.word	0x0003023c

000d86c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d86c8:	b508      	push	{r3, lr}
   d86ca:	4b02      	ldr	r3, [pc, #8]	; (d86d4 <hal_usart_peek+0xc>)
   d86cc:	681b      	ldr	r3, [r3, #0]
   d86ce:	699b      	ldr	r3, [r3, #24]
   d86d0:	9301      	str	r3, [sp, #4]
   d86d2:	bd08      	pop	{r3, pc}
   d86d4:	0003023c 	.word	0x0003023c

000d86d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d86d8:	b508      	push	{r3, lr}
   d86da:	4b02      	ldr	r3, [pc, #8]	; (d86e4 <hal_usart_flush+0xc>)
   d86dc:	681b      	ldr	r3, [r3, #0]
   d86de:	69db      	ldr	r3, [r3, #28]
   d86e0:	9301      	str	r3, [sp, #4]
   d86e2:	bd08      	pop	{r3, pc}
   d86e4:	0003023c 	.word	0x0003023c

000d86e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d86e8:	b508      	push	{r3, lr}
   d86ea:	4b02      	ldr	r3, [pc, #8]	; (d86f4 <hal_usart_is_enabled+0xc>)
   d86ec:	681b      	ldr	r3, [r3, #0]
   d86ee:	6a1b      	ldr	r3, [r3, #32]
   d86f0:	9301      	str	r3, [sp, #4]
   d86f2:	bd08      	pop	{r3, pc}
   d86f4:	0003023c 	.word	0x0003023c

000d86f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d86f8:	b508      	push	{r3, lr}
   d86fa:	4b02      	ldr	r3, [pc, #8]	; (d8704 <hal_usart_available_data_for_write+0xc>)
   d86fc:	681b      	ldr	r3, [r3, #0]
   d86fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8700:	9301      	str	r3, [sp, #4]
   d8702:	bd08      	pop	{r3, pc}
   d8704:	0003023c 	.word	0x0003023c

000d8708 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8708:	b508      	push	{r3, lr}
   d870a:	4b02      	ldr	r3, [pc, #8]	; (d8714 <HAL_USB_USART_Init+0xc>)
   d870c:	681b      	ldr	r3, [r3, #0]
   d870e:	681b      	ldr	r3, [r3, #0]
   d8710:	9301      	str	r3, [sp, #4]
   d8712:	bd08      	pop	{r3, pc}
   d8714:	0003024c 	.word	0x0003024c

000d8718 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8718:	b508      	push	{r3, lr}
   d871a:	4b02      	ldr	r3, [pc, #8]	; (d8724 <HAL_USB_USART_Available_Data+0xc>)
   d871c:	681b      	ldr	r3, [r3, #0]
   d871e:	691b      	ldr	r3, [r3, #16]
   d8720:	9301      	str	r3, [sp, #4]
   d8722:	bd08      	pop	{r3, pc}
   d8724:	0003024c 	.word	0x0003024c

000d8728 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8728:	b508      	push	{r3, lr}
   d872a:	4b02      	ldr	r3, [pc, #8]	; (d8734 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d872c:	681b      	ldr	r3, [r3, #0]
   d872e:	695b      	ldr	r3, [r3, #20]
   d8730:	9301      	str	r3, [sp, #4]
   d8732:	bd08      	pop	{r3, pc}
   d8734:	0003024c 	.word	0x0003024c

000d8738 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8738:	b508      	push	{r3, lr}
   d873a:	4b02      	ldr	r3, [pc, #8]	; (d8744 <HAL_USB_USART_Receive_Data+0xc>)
   d873c:	681b      	ldr	r3, [r3, #0]
   d873e:	699b      	ldr	r3, [r3, #24]
   d8740:	9301      	str	r3, [sp, #4]
   d8742:	bd08      	pop	{r3, pc}
   d8744:	0003024c 	.word	0x0003024c

000d8748 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8748:	b508      	push	{r3, lr}
   d874a:	4b02      	ldr	r3, [pc, #8]	; (d8754 <HAL_USB_USART_Send_Data+0xc>)
   d874c:	681b      	ldr	r3, [r3, #0]
   d874e:	69db      	ldr	r3, [r3, #28]
   d8750:	9301      	str	r3, [sp, #4]
   d8752:	bd08      	pop	{r3, pc}
   d8754:	0003024c 	.word	0x0003024c

000d8758 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8758:	b508      	push	{r3, lr}
   d875a:	4b02      	ldr	r3, [pc, #8]	; (d8764 <HAL_USB_USART_Flush_Data+0xc>)
   d875c:	681b      	ldr	r3, [r3, #0]
   d875e:	6a1b      	ldr	r3, [r3, #32]
   d8760:	9301      	str	r3, [sp, #4]
   d8762:	bd08      	pop	{r3, pc}
   d8764:	0003024c 	.word	0x0003024c

000d8768 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8768:	b508      	push	{r3, lr}
   d876a:	4b02      	ldr	r3, [pc, #8]	; (d8774 <panic_+0xc>)
   d876c:	681b      	ldr	r3, [r3, #0]
   d876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8770:	9301      	str	r3, [sp, #4]
   d8772:	bd08      	pop	{r3, pc}
   d8774:	00030260 	.word	0x00030260

000d8778 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d8778:	b508      	push	{r3, lr}
   d877a:	4b02      	ldr	r3, [pc, #8]	; (d8784 <jsmn_init+0xc>)
   d877c:	681b      	ldr	r3, [r3, #0]
   d877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8780:	9301      	str	r3, [sp, #4]
   d8782:	bd08      	pop	{r3, pc}
   d8784:	00030260 	.word	0x00030260

000d8788 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d8788:	b508      	push	{r3, lr}
   d878a:	4b02      	ldr	r3, [pc, #8]	; (d8794 <jsmn_parse+0xc>)
   d878c:	681b      	ldr	r3, [r3, #0]
   d878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8790:	9301      	str	r3, [sp, #4]
   d8792:	bd08      	pop	{r3, pc}
   d8794:	00030260 	.word	0x00030260

000d8798 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8798:	b508      	push	{r3, lr}
   d879a:	4b02      	ldr	r3, [pc, #8]	; (d87a4 <log_message_v+0xc>)
   d879c:	681b      	ldr	r3, [r3, #0]
   d879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d87a0:	9301      	str	r3, [sp, #4]
   d87a2:	bd08      	pop	{r3, pc}
   d87a4:	00030260 	.word	0x00030260

000d87a8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d87a8:	b508      	push	{r3, lr}
   d87aa:	4b02      	ldr	r3, [pc, #8]	; (d87b4 <system_mode+0xc>)
   d87ac:	681b      	ldr	r3, [r3, #0]
   d87ae:	681b      	ldr	r3, [r3, #0]
   d87b0:	9301      	str	r3, [sp, #4]
   d87b2:	bd08      	pop	{r3, pc}
   d87b4:	00030220 	.word	0x00030220

000d87b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d87b8:	b508      	push	{r3, lr}
   d87ba:	4b02      	ldr	r3, [pc, #8]	; (d87c4 <set_system_mode+0xc>)
   d87bc:	681b      	ldr	r3, [r3, #0]
   d87be:	685b      	ldr	r3, [r3, #4]
   d87c0:	9301      	str	r3, [sp, #4]
   d87c2:	bd08      	pop	{r3, pc}
   d87c4:	00030220 	.word	0x00030220

000d87c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d87c8:	b508      	push	{r3, lr}
   d87ca:	4b02      	ldr	r3, [pc, #8]	; (d87d4 <system_delay_ms+0xc>)
   d87cc:	681b      	ldr	r3, [r3, #0]
   d87ce:	695b      	ldr	r3, [r3, #20]
   d87d0:	9301      	str	r3, [sp, #4]
   d87d2:	bd08      	pop	{r3, pc}
   d87d4:	00030220 	.word	0x00030220

000d87d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d87d8:	b508      	push	{r3, lr}
   d87da:	4b02      	ldr	r3, [pc, #8]	; (d87e4 <system_thread_set_state+0xc>)
   d87dc:	681b      	ldr	r3, [r3, #0]
   d87de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d87e0:	9301      	str	r3, [sp, #4]
   d87e2:	bd08      	pop	{r3, pc}
   d87e4:	00030220 	.word	0x00030220

000d87e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d87e8:	b508      	push	{r3, lr}
   d87ea:	4b02      	ldr	r3, [pc, #8]	; (d87f4 <application_thread_current+0xc>)
   d87ec:	681b      	ldr	r3, [r3, #0]
   d87ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d87f0:	9301      	str	r3, [sp, #4]
   d87f2:	bd08      	pop	{r3, pc}
   d87f4:	00030220 	.word	0x00030220

000d87f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d87f8:	b508      	push	{r3, lr}
   d87fa:	4b02      	ldr	r3, [pc, #8]	; (d8804 <application_thread_invoke+0xc>)
   d87fc:	681b      	ldr	r3, [r3, #0]
   d87fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8800:	9301      	str	r3, [sp, #4]
   d8802:	bd08      	pop	{r3, pc}
   d8804:	00030220 	.word	0x00030220

000d8808 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8808:	b508      	push	{r3, lr}
   d880a:	4b02      	ldr	r3, [pc, #8]	; (d8814 <system_thread_get_state+0xc>)
   d880c:	681b      	ldr	r3, [r3, #0]
   d880e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8810:	9301      	str	r3, [sp, #4]
   d8812:	bd08      	pop	{r3, pc}
   d8814:	00030220 	.word	0x00030220

000d8818 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8818:	b508      	push	{r3, lr}
   d881a:	4b02      	ldr	r3, [pc, #8]	; (d8824 <system_notify_time_changed+0xc>)
   d881c:	681b      	ldr	r3, [r3, #0]
   d881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8820:	9301      	str	r3, [sp, #4]
   d8822:	bd08      	pop	{r3, pc}
   d8824:	00030220 	.word	0x00030220

000d8828 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8828:	b508      	push	{r3, lr}
   d882a:	4b03      	ldr	r3, [pc, #12]	; (d8838 <system_ctrl_set_app_request_handler+0x10>)
   d882c:	681b      	ldr	r3, [r3, #0]
   d882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8832:	9301      	str	r3, [sp, #4]
   d8834:	bd08      	pop	{r3, pc}
   d8836:	0000      	.short	0x0000
   d8838:	00030220 	.word	0x00030220

000d883c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d883c:	b508      	push	{r3, lr}
   d883e:	4b03      	ldr	r3, [pc, #12]	; (d884c <system_ctrl_set_result+0x10>)
   d8840:	681b      	ldr	r3, [r3, #0]
   d8842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8846:	9301      	str	r3, [sp, #4]
   d8848:	bd08      	pop	{r3, pc}
   d884a:	0000      	.short	0x0000
   d884c:	00030220 	.word	0x00030220

000d8850 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8850:	b508      	push	{r3, lr}
   d8852:	4b03      	ldr	r3, [pc, #12]	; (d8860 <system_reset+0x10>)
   d8854:	681b      	ldr	r3, [r3, #0]
   d8856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d885a:	9301      	str	r3, [sp, #4]
   d885c:	bd08      	pop	{r3, pc}
   d885e:	0000      	.short	0x0000
   d8860:	00030220 	.word	0x00030220

000d8864 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8864:	b508      	push	{r3, lr}
   d8866:	4b02      	ldr	r3, [pc, #8]	; (d8870 <spark_variable+0xc>)
   d8868:	681b      	ldr	r3, [r3, #0]
   d886a:	681b      	ldr	r3, [r3, #0]
   d886c:	9301      	str	r3, [sp, #4]
   d886e:	bd08      	pop	{r3, pc}
   d8870:	00030244 	.word	0x00030244

000d8874 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8874:	b508      	push	{r3, lr}
   d8876:	4b02      	ldr	r3, [pc, #8]	; (d8880 <spark_function+0xc>)
   d8878:	681b      	ldr	r3, [r3, #0]
   d887a:	685b      	ldr	r3, [r3, #4]
   d887c:	9301      	str	r3, [sp, #4]
   d887e:	bd08      	pop	{r3, pc}
   d8880:	00030244 	.word	0x00030244

000d8884 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8884:	b508      	push	{r3, lr}
   d8886:	4b02      	ldr	r3, [pc, #8]	; (d8890 <spark_process+0xc>)
   d8888:	681b      	ldr	r3, [r3, #0]
   d888a:	689b      	ldr	r3, [r3, #8]
   d888c:	9301      	str	r3, [sp, #4]
   d888e:	bd08      	pop	{r3, pc}
   d8890:	00030244 	.word	0x00030244

000d8894 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8894:	b508      	push	{r3, lr}
   d8896:	4b02      	ldr	r3, [pc, #8]	; (d88a0 <spark_cloud_flag_connect+0xc>)
   d8898:	681b      	ldr	r3, [r3, #0]
   d889a:	68db      	ldr	r3, [r3, #12]
   d889c:	9301      	str	r3, [sp, #4]
   d889e:	bd08      	pop	{r3, pc}
   d88a0:	00030244 	.word	0x00030244

000d88a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d88a4:	b508      	push	{r3, lr}
   d88a6:	4b02      	ldr	r3, [pc, #8]	; (d88b0 <spark_cloud_flag_connected+0xc>)
   d88a8:	681b      	ldr	r3, [r3, #0]
   d88aa:	695b      	ldr	r3, [r3, #20]
   d88ac:	9301      	str	r3, [sp, #4]
   d88ae:	bd08      	pop	{r3, pc}
   d88b0:	00030244 	.word	0x00030244

000d88b4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d88b4:	b508      	push	{r3, lr}
   d88b6:	4b02      	ldr	r3, [pc, #8]	; (d88c0 <spark_deviceID+0xc>)
   d88b8:	681b      	ldr	r3, [r3, #0]
   d88ba:	69db      	ldr	r3, [r3, #28]
   d88bc:	9301      	str	r3, [sp, #4]
   d88be:	bd08      	pop	{r3, pc}
   d88c0:	00030244 	.word	0x00030244

000d88c4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d88c4:	b508      	push	{r3, lr}
   d88c6:	4b02      	ldr	r3, [pc, #8]	; (d88d0 <spark_send_event+0xc>)
   d88c8:	681b      	ldr	r3, [r3, #0]
   d88ca:	6a1b      	ldr	r3, [r3, #32]
   d88cc:	9301      	str	r3, [sp, #4]
   d88ce:	bd08      	pop	{r3, pc}
   d88d0:	00030244 	.word	0x00030244

000d88d4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d88d4:	b508      	push	{r3, lr}
   d88d6:	4b02      	ldr	r3, [pc, #8]	; (d88e0 <spark_subscribe+0xc>)
   d88d8:	681b      	ldr	r3, [r3, #0]
   d88da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d88dc:	9301      	str	r3, [sp, #4]
   d88de:	bd08      	pop	{r3, pc}
   d88e0:	00030244 	.word	0x00030244

000d88e4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d88e4:	b508      	push	{r3, lr}
   d88e6:	4b02      	ldr	r3, [pc, #8]	; (d88f0 <spark_sync_time+0xc>)
   d88e8:	681b      	ldr	r3, [r3, #0]
   d88ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d88ec:	9301      	str	r3, [sp, #4]
   d88ee:	bd08      	pop	{r3, pc}
   d88f0:	00030244 	.word	0x00030244

000d88f4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d88f4:	b508      	push	{r3, lr}
   d88f6:	4b02      	ldr	r3, [pc, #8]	; (d8900 <spark_sync_time_pending+0xc>)
   d88f8:	681b      	ldr	r3, [r3, #0]
   d88fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d88fc:	9301      	str	r3, [sp, #4]
   d88fe:	bd08      	pop	{r3, pc}
   d8900:	00030244 	.word	0x00030244

000d8904 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8904:	b508      	push	{r3, lr}
   d8906:	4b02      	ldr	r3, [pc, #8]	; (d8910 <spark_sync_time_last+0xc>)
   d8908:	681b      	ldr	r3, [r3, #0]
   d890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d890c:	9301      	str	r3, [sp, #4]
   d890e:	bd08      	pop	{r3, pc}
   d8910:	00030244 	.word	0x00030244

000d8914 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d8914:	b508      	push	{r3, lr}
   d8916:	4b02      	ldr	r3, [pc, #8]	; (d8920 <spark_set_connection_property+0xc>)
   d8918:	681b      	ldr	r3, [r3, #0]
   d891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d891c:	9301      	str	r3, [sp, #4]
   d891e:	bd08      	pop	{r3, pc}
   d8920:	00030244 	.word	0x00030244

000d8924 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8924:	b508      	push	{r3, lr}
   d8926:	4b02      	ldr	r3, [pc, #8]	; (d8930 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8928:	681b      	ldr	r3, [r3, #0]
   d892a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d892c:	9301      	str	r3, [sp, #4]
   d892e:	bd08      	pop	{r3, pc}
   d8930:	00030244 	.word	0x00030244

000d8934 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8934:	b508      	push	{r3, lr}
   d8936:	4b02      	ldr	r3, [pc, #8]	; (d8940 <network_connect+0xc>)
   d8938:	681b      	ldr	r3, [r3, #0]
   d893a:	685b      	ldr	r3, [r3, #4]
   d893c:	9301      	str	r3, [sp, #4]
   d893e:	bd08      	pop	{r3, pc}
   d8940:	00030240 	.word	0x00030240

000d8944 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8944:	b508      	push	{r3, lr}
   d8946:	4b02      	ldr	r3, [pc, #8]	; (d8950 <network_connecting+0xc>)
   d8948:	681b      	ldr	r3, [r3, #0]
   d894a:	689b      	ldr	r3, [r3, #8]
   d894c:	9301      	str	r3, [sp, #4]
   d894e:	bd08      	pop	{r3, pc}
   d8950:	00030240 	.word	0x00030240

000d8954 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8954:	b508      	push	{r3, lr}
   d8956:	4b02      	ldr	r3, [pc, #8]	; (d8960 <network_disconnect+0xc>)
   d8958:	681b      	ldr	r3, [r3, #0]
   d895a:	68db      	ldr	r3, [r3, #12]
   d895c:	9301      	str	r3, [sp, #4]
   d895e:	bd08      	pop	{r3, pc}
   d8960:	00030240 	.word	0x00030240

000d8964 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8964:	b508      	push	{r3, lr}
   d8966:	4b02      	ldr	r3, [pc, #8]	; (d8970 <network_ready+0xc>)
   d8968:	681b      	ldr	r3, [r3, #0]
   d896a:	691b      	ldr	r3, [r3, #16]
   d896c:	9301      	str	r3, [sp, #4]
   d896e:	bd08      	pop	{r3, pc}
   d8970:	00030240 	.word	0x00030240

000d8974 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8974:	b508      	push	{r3, lr}
   d8976:	4b02      	ldr	r3, [pc, #8]	; (d8980 <network_on+0xc>)
   d8978:	681b      	ldr	r3, [r3, #0]
   d897a:	695b      	ldr	r3, [r3, #20]
   d897c:	9301      	str	r3, [sp, #4]
   d897e:	bd08      	pop	{r3, pc}
   d8980:	00030240 	.word	0x00030240

000d8984 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8984:	b508      	push	{r3, lr}
   d8986:	4b02      	ldr	r3, [pc, #8]	; (d8990 <network_off+0xc>)
   d8988:	681b      	ldr	r3, [r3, #0]
   d898a:	699b      	ldr	r3, [r3, #24]
   d898c:	9301      	str	r3, [sp, #4]
   d898e:	bd08      	pop	{r3, pc}
   d8990:	00030240 	.word	0x00030240

000d8994 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8994:	b508      	push	{r3, lr}
   d8996:	4b02      	ldr	r3, [pc, #8]	; (d89a0 <network_listen+0xc>)
   d8998:	681b      	ldr	r3, [r3, #0]
   d899a:	69db      	ldr	r3, [r3, #28]
   d899c:	9301      	str	r3, [sp, #4]
   d899e:	bd08      	pop	{r3, pc}
   d89a0:	00030240 	.word	0x00030240

000d89a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d89a4:	b508      	push	{r3, lr}
   d89a6:	4b02      	ldr	r3, [pc, #8]	; (d89b0 <network_listening+0xc>)
   d89a8:	681b      	ldr	r3, [r3, #0]
   d89aa:	6a1b      	ldr	r3, [r3, #32]
   d89ac:	9301      	str	r3, [sp, #4]
   d89ae:	bd08      	pop	{r3, pc}
   d89b0:	00030240 	.word	0x00030240

000d89b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d89b4:	b508      	push	{r3, lr}
   d89b6:	4b02      	ldr	r3, [pc, #8]	; (d89c0 <network_set_listen_timeout+0xc>)
   d89b8:	681b      	ldr	r3, [r3, #0]
   d89ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d89bc:	9301      	str	r3, [sp, #4]
   d89be:	bd08      	pop	{r3, pc}
   d89c0:	00030240 	.word	0x00030240

000d89c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d89c4:	b508      	push	{r3, lr}
   d89c6:	4b02      	ldr	r3, [pc, #8]	; (d89d0 <network_get_listen_timeout+0xc>)
   d89c8:	681b      	ldr	r3, [r3, #0]
   d89ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d89cc:	9301      	str	r3, [sp, #4]
   d89ce:	bd08      	pop	{r3, pc}
   d89d0:	00030240 	.word	0x00030240

000d89d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d89d4:	b508      	push	{r3, lr}
   d89d6:	4b02      	ldr	r3, [pc, #8]	; (d89e0 <network_is_on+0xc>)
   d89d8:	681b      	ldr	r3, [r3, #0]
   d89da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d89dc:	9301      	str	r3, [sp, #4]
   d89de:	bd08      	pop	{r3, pc}
   d89e0:	00030240 	.word	0x00030240

000d89e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d89e4:	b508      	push	{r3, lr}
   d89e6:	4b02      	ldr	r3, [pc, #8]	; (d89f0 <network_is_off+0xc>)
   d89e8:	681b      	ldr	r3, [r3, #0]
   d89ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d89ec:	9301      	str	r3, [sp, #4]
   d89ee:	bd08      	pop	{r3, pc}
   d89f0:	00030240 	.word	0x00030240

000d89f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d89f4:	b508      	push	{r3, lr}
   d89f6:	4b02      	ldr	r3, [pc, #8]	; (d8a00 <malloc+0xc>)
   d89f8:	681b      	ldr	r3, [r3, #0]
   d89fa:	681b      	ldr	r3, [r3, #0]
   d89fc:	9301      	str	r3, [sp, #4]
   d89fe:	bd08      	pop	{r3, pc}
   d8a00:	0003021c 	.word	0x0003021c

000d8a04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8a04:	b508      	push	{r3, lr}
   d8a06:	4b02      	ldr	r3, [pc, #8]	; (d8a10 <free+0xc>)
   d8a08:	681b      	ldr	r3, [r3, #0]
   d8a0a:	685b      	ldr	r3, [r3, #4]
   d8a0c:	9301      	str	r3, [sp, #4]
   d8a0e:	bd08      	pop	{r3, pc}
   d8a10:	0003021c 	.word	0x0003021c

000d8a14 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8a14:	b508      	push	{r3, lr}
   d8a16:	4b02      	ldr	r3, [pc, #8]	; (d8a20 <realloc+0xc>)
   d8a18:	681b      	ldr	r3, [r3, #0]
   d8a1a:	689b      	ldr	r3, [r3, #8]
   d8a1c:	9301      	str	r3, [sp, #4]
   d8a1e:	bd08      	pop	{r3, pc}
   d8a20:	0003021c 	.word	0x0003021c

000d8a24 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8a24:	b508      	push	{r3, lr}
   d8a26:	4b02      	ldr	r3, [pc, #8]	; (d8a30 <siprintf+0xc>)
   d8a28:	681b      	ldr	r3, [r3, #0]
   d8a2a:	691b      	ldr	r3, [r3, #16]
   d8a2c:	9301      	str	r3, [sp, #4]
   d8a2e:	bd08      	pop	{r3, pc}
   d8a30:	0003021c 	.word	0x0003021c

000d8a34 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8a34:	b508      	push	{r3, lr}
   d8a36:	4b02      	ldr	r3, [pc, #8]	; (d8a40 <snprintf+0xc>)
   d8a38:	681b      	ldr	r3, [r3, #0]
   d8a3a:	69db      	ldr	r3, [r3, #28]
   d8a3c:	9301      	str	r3, [sp, #4]
   d8a3e:	bd08      	pop	{r3, pc}
   d8a40:	0003021c 	.word	0x0003021c

000d8a44 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8a44:	b508      	push	{r3, lr}
   d8a46:	4b02      	ldr	r3, [pc, #8]	; (d8a50 <vsnprintf+0xc>)
   d8a48:	681b      	ldr	r3, [r3, #0]
   d8a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8a4c:	9301      	str	r3, [sp, #4]
   d8a4e:	bd08      	pop	{r3, pc}
   d8a50:	0003021c 	.word	0x0003021c

000d8a54 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8a54:	b508      	push	{r3, lr}
   d8a56:	4b02      	ldr	r3, [pc, #8]	; (d8a60 <abort+0xc>)
   d8a58:	681b      	ldr	r3, [r3, #0]
   d8a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a5c:	9301      	str	r3, [sp, #4]
   d8a5e:	bd08      	pop	{r3, pc}
   d8a60:	0003021c 	.word	0x0003021c

000d8a64 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8a64:	b508      	push	{r3, lr}
   d8a66:	4b02      	ldr	r3, [pc, #8]	; (d8a70 <_malloc_r+0xc>)
   d8a68:	681b      	ldr	r3, [r3, #0]
   d8a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a6c:	9301      	str	r3, [sp, #4]
   d8a6e:	bd08      	pop	{r3, pc}
   d8a70:	0003021c 	.word	0x0003021c

000d8a74 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8a74:	b508      	push	{r3, lr}
   d8a76:	4b02      	ldr	r3, [pc, #8]	; (d8a80 <__errno+0xc>)
   d8a78:	681b      	ldr	r3, [r3, #0]
   d8a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8a7c:	9301      	str	r3, [sp, #4]
   d8a7e:	bd08      	pop	{r3, pc}
   d8a80:	0003021c 	.word	0x0003021c

000d8a84 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8a84:	b508      	push	{r3, lr}
   d8a86:	4b02      	ldr	r3, [pc, #8]	; (d8a90 <newlib_impure_ptr_callback+0xc>)
   d8a88:	681b      	ldr	r3, [r3, #0]
   d8a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8a8c:	9301      	str	r3, [sp, #4]
   d8a8e:	bd08      	pop	{r3, pc}
   d8a90:	0003021c 	.word	0x0003021c

000d8a94 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8a94:	b508      	push	{r3, lr}
   d8a96:	4b02      	ldr	r3, [pc, #8]	; (d8aa0 <strftime+0xc>)
   d8a98:	681b      	ldr	r3, [r3, #0]
   d8a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8a9c:	9301      	str	r3, [sp, #4]
   d8a9e:	bd08      	pop	{r3, pc}
   d8aa0:	0003021c 	.word	0x0003021c

000d8aa4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8aa4:	b508      	push	{r3, lr}
   d8aa6:	4b02      	ldr	r3, [pc, #8]	; (d8ab0 <localtime_r+0xc>)
   d8aa8:	681b      	ldr	r3, [r3, #0]
   d8aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8aac:	9301      	str	r3, [sp, #4]
   d8aae:	bd08      	pop	{r3, pc}
   d8ab0:	0003021c 	.word	0x0003021c

000d8ab4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8ab4:	b508      	push	{r3, lr}
   d8ab6:	4b02      	ldr	r3, [pc, #8]	; (d8ac0 <gmtime_r+0xc>)
   d8ab8:	681b      	ldr	r3, [r3, #0]
   d8aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8abc:	9301      	str	r3, [sp, #4]
   d8abe:	bd08      	pop	{r3, pc}
   d8ac0:	0003021c 	.word	0x0003021c

000d8ac4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8ac4:	b508      	push	{r3, lr}
   d8ac6:	4b02      	ldr	r3, [pc, #8]	; (d8ad0 <mktime+0xc>)
   d8ac8:	681b      	ldr	r3, [r3, #0]
   d8aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8acc:	9301      	str	r3, [sp, #4]
   d8ace:	bd08      	pop	{r3, pc}
   d8ad0:	0003021c 	.word	0x0003021c

000d8ad4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8ad4:	2100      	movs	r1, #0
   d8ad6:	f7ff be77 	b.w	d87c8 <system_delay_ms>

000d8ada <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8ada:	b510      	push	{r4, lr}
      if (_M_empty())
   d8adc:	6883      	ldr	r3, [r0, #8]
   d8ade:	4604      	mov	r4, r0
   d8ae0:	b90b      	cbnz	r3, d8ae6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8ae2:	f001 fe9e 	bl	da822 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ae6:	68c3      	ldr	r3, [r0, #12]
   d8ae8:	4798      	blx	r3
      if (_M_manager)
   d8aea:	68a3      	ldr	r3, [r4, #8]
   d8aec:	b11b      	cbz	r3, d8af6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8aee:	2203      	movs	r2, #3
   d8af0:	4621      	mov	r1, r4
   d8af2:	4620      	mov	r0, r4
   d8af4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8af6:	4620      	mov	r0, r4
   d8af8:	2110      	movs	r1, #16
}
   d8afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8afe:	f001 be8a 	b.w	da816 <_ZdlPvj>

000d8b02 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8b02:	b510      	push	{r4, lr}
   d8b04:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8b06:	6800      	ldr	r0, [r0, #0]
   d8b08:	b108      	cbz	r0, d8b0e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8b0a:	f7ff fc95 	bl	d8438 <os_mutex_recursive_destroy>
    }
   d8b0e:	4620      	mov	r0, r4
   d8b10:	bd10      	pop	{r4, pc}
	...

000d8b14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d8b14:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d8b16:	4c06      	ldr	r4, [pc, #24]	; (d8b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8b18:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8b1a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8b1c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8b1e:	f7ff fc83 	bl	d8428 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8b22:	4620      	mov	r0, r4
   d8b24:	4a03      	ldr	r2, [pc, #12]	; (d8b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8b26:	4904      	ldr	r1, [pc, #16]	; (d8b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8b2c:	f001 be6e 	b.w	da80c <__aeabi_atexit>
   d8b30:	2003e60c 	.word	0x2003e60c
   d8b34:	2003dee0 	.word	0x2003dee0
   d8b38:	000d8b03 	.word	0x000d8b03

000d8b3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b3c:	4770      	bx	lr

000d8b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8b3e:	2000      	movs	r0, #0
   d8b40:	4770      	bx	lr

000d8b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b42:	b510      	push	{r4, lr}
   d8b44:	2110      	movs	r1, #16
   d8b46:	4604      	mov	r4, r0
   d8b48:	f001 fe65 	bl	da816 <_ZdlPvj>
   d8b4c:	4620      	mov	r0, r4
   d8b4e:	bd10      	pop	{r4, pc}

000d8b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8b50:	b508      	push	{r3, lr}
      { delete this; }
   d8b52:	f7ff fff6 	bl	d8b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8b56:	bd08      	pop	{r3, pc}

000d8b58 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8b58:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8b5a:	2200      	movs	r2, #0
   d8b5c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8b60:	6002      	str	r2, [r0, #0]
   d8b62:	8084      	strh	r4, [r0, #4]
   d8b64:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b66:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b68:	680c      	ldr	r4, [r1, #0]
   d8b6a:	8085      	strh	r5, [r0, #4]
   d8b6c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b6e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8b70:	bd30      	pop	{r4, r5, pc}

000d8b72 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8b72:	b510      	push	{r4, lr}
   d8b74:	4604      	mov	r4, r0
    free((void*)msg_);
   d8b76:	6800      	ldr	r0, [r0, #0]
   d8b78:	f7ff ff44 	bl	d8a04 <free>
}
   d8b7c:	4620      	mov	r0, r4
   d8b7e:	bd10      	pop	{r4, pc}

000d8b80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8b80:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8b82:	68c4      	ldr	r4, [r0, #12]
   d8b84:	b1f4      	cbz	r4, d8bc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8b86:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8b88:	2b02      	cmp	r3, #2
   d8b8a:	d103      	bne.n	d8b94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8b8c:	f104 000c 	add.w	r0, r4, #12
   d8b90:	f7ff ffef 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8b94:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8b96:	b135      	cbz	r5, d8ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8b98:	4628      	mov	r0, r5
   d8b9a:	f7fb fb76 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d8b9e:	2110      	movs	r1, #16
   d8ba0:	4628      	mov	r0, r5
   d8ba2:	f001 fe38 	bl	da816 <_ZdlPvj>
   d8ba6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8ba8:	b135      	cbz	r5, d8bb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8baa:	4628      	mov	r0, r5
   d8bac:	f7fb fb6d 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d8bb0:	2110      	movs	r1, #16
   d8bb2:	4628      	mov	r0, r5
   d8bb4:	f001 fe2f 	bl	da816 <_ZdlPvj>
   d8bb8:	4620      	mov	r0, r4
   d8bba:	2114      	movs	r1, #20
   d8bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8bc0:	f001 be29 	b.w	da816 <_ZdlPvj>
   d8bc4:	bd38      	pop	{r3, r4, r5, pc}

000d8bc6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8bc6:	b510      	push	{r4, lr}
   d8bc8:	b088      	sub	sp, #32
   d8bca:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8bcc:	4668      	mov	r0, sp
   d8bce:	f001 f8ac 	bl	d9d2a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8bd2:	4669      	mov	r1, sp
   d8bd4:	a804      	add	r0, sp, #16
   d8bd6:	f001 f8cb 	bl	d9d70 <_ZN6StringC1ERKS_>
   d8bda:	a804      	add	r0, sp, #16
   d8bdc:	47a0      	blx	r4
   d8bde:	4604      	mov	r4, r0
   d8be0:	a804      	add	r0, sp, #16
   d8be2:	f001 f857 	bl	d9c94 <_ZN6StringD1Ev>
    String p(param);
   d8be6:	4668      	mov	r0, sp
   d8be8:	f001 f854 	bl	d9c94 <_ZN6StringD1Ev>
}
   d8bec:	4620      	mov	r0, r4
   d8bee:	b008      	add	sp, #32
   d8bf0:	bd10      	pop	{r4, pc}

000d8bf2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d8bf2:	b507      	push	{r0, r1, r2, lr}
   d8bf4:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d8bf8:	6882      	ldr	r2, [r0, #8]
   d8bfa:	b90a      	cbnz	r2, d8c00 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d8bfc:	f001 fe11 	bl	da822 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c00:	68c3      	ldr	r3, [r0, #12]
   d8c02:	aa01      	add	r2, sp, #4
   d8c04:	4669      	mov	r1, sp
   d8c06:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d8c08:	b003      	add	sp, #12
   d8c0a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8c0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8c10:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8c16:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8c18:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8c1a:	461a      	mov	r2, r3
   d8c1c:	4669      	mov	r1, sp
   d8c1e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8c20:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8c24:	f8ad 4000 	strh.w	r4, [sp]
   d8c28:	f7ff fe24 	bl	d8874 <spark_function>
}
   d8c2c:	b004      	add	sp, #16
   d8c2e:	bd10      	pop	{r4, pc}

000d8c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c32:	460e      	mov	r6, r1
   d8c34:	4604      	mov	r4, r0
   d8c36:	f856 3b04 	ldr.w	r3, [r6], #4
   d8c3a:	9300      	str	r3, [sp, #0]
   d8c3c:	460d      	mov	r5, r1
   d8c3e:	a801      	add	r0, sp, #4
   d8c40:	4631      	mov	r1, r6
   d8c42:	f7fd fecf 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8c46:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c48:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8c4a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c4c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8c4e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8c50:	2300      	movs	r3, #0
   d8c52:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d8c54:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8c56:	f7fd f87f 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c5a:	4630      	mov	r0, r6
   d8c5c:	f7fd f87c 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8c60:	4628      	mov	r0, r5
   d8c62:	2108      	movs	r1, #8
   d8c64:	f001 fdd7 	bl	da816 <_ZdlPvj>
        return p;
    }
   d8c68:	4620      	mov	r0, r4
   d8c6a:	b002      	add	sp, #8
   d8c6c:	bd70      	pop	{r4, r5, r6, pc}

000d8c6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8c6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8c70:	b510      	push	{r4, lr}
      if (_M_empty())
   d8c72:	b90a      	cbnz	r2, d8c78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8c74:	f001 fdd5 	bl	da822 <_ZSt25__throw_bad_function_callv>
    }
   d8c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c7c:	68c3      	ldr	r3, [r0, #12]
   d8c7e:	4718      	bx	r3

000d8c80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c80:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8c82:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8c84:	f100 0110 	add.w	r1, r0, #16
   d8c88:	f7ff fff1 	bl	d8c6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8c8c:	bd08      	pop	{r3, pc}

000d8c8e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8c8e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8c90:	b510      	push	{r4, lr}
      if (_M_empty())
   d8c92:	b90a      	cbnz	r2, d8c98 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8c94:	f001 fdc5 	bl	da822 <_ZSt25__throw_bad_function_callv>
    }
   d8c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c9c:	68c3      	ldr	r3, [r0, #12]
   d8c9e:	4718      	bx	r3

000d8ca0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ca0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8ca2:	6800      	ldr	r0, [r0, #0]
   d8ca4:	f100 0110 	add.w	r1, r0, #16
   d8ca8:	f7ff fff1 	bl	d8c8e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8cac:	bd08      	pop	{r3, pc}
	...

000d8cb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8cb0:	b538      	push	{r3, r4, r5, lr}
   d8cb2:	2300      	movs	r3, #0
   d8cb4:	4604      	mov	r4, r0
   d8cb6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8cb8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8cba:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8cbc:	f7fb f9eb 	bl	d4096 <_Znwj>
   d8cc0:	b128      	cbz	r0, d8cce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8cc2:	2301      	movs	r3, #1
   d8cc4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8cc8:	4b02      	ldr	r3, [pc, #8]	; (d8cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8cca:	6003      	str	r3, [r0, #0]
   d8ccc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8cce:	6020      	str	r0, [r4, #0]
	}
   d8cd0:	4620      	mov	r0, r4
   d8cd2:	bd38      	pop	{r3, r4, r5, pc}
   d8cd4:	000de038 	.word	0x000de038

000d8cd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8cd8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8cda:	2300      	movs	r3, #0
   d8cdc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8cde:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ce0:	4604      	mov	r4, r0
   d8ce2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ce4:	b12b      	cbz	r3, d8cf2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8ce6:	2202      	movs	r2, #2
   d8ce8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8cea:	68eb      	ldr	r3, [r5, #12]
   d8cec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8cee:	68ab      	ldr	r3, [r5, #8]
   d8cf0:	60a3      	str	r3, [r4, #8]
    }
   d8cf2:	4620      	mov	r0, r4
   d8cf4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8cfa:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8cfc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8cfe:	4668      	mov	r0, sp
   d8d00:	f7ff ff2a 	bl	d8b58 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8d04:	f04f 0302 	mov.w	r3, #2
   d8d08:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8d0c:	2a00      	cmp	r2, #0
   d8d0e:	d103      	bne.n	d8d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8d10:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8d14:	2900      	cmp	r1, #0
   d8d16:	d1f7      	bne.n	d8d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8d18:	d125      	bne.n	d8d66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8d1a:	f104 050c 	add.w	r5, r4, #12
   d8d1e:	4669      	mov	r1, sp
   d8d20:	4628      	mov	r0, r5
   d8d22:	f7ff ff19 	bl	d8b58 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8d26:	f3bf 8f5b 	dmb	ish
   d8d2a:	2301      	movs	r3, #1
   d8d2c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8d2e:	2000      	movs	r0, #0
   d8d30:	f104 0308 	add.w	r3, r4, #8
   d8d34:	f3bf 8f5b 	dmb	ish
   d8d38:	e853 6f00 	ldrex	r6, [r3]
   d8d3c:	e843 0200 	strex	r2, r0, [r3]
   d8d40:	2a00      	cmp	r2, #0
   d8d42:	d1f9      	bne.n	d8d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8d44:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8d48:	b16e      	cbz	r6, d8d66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8d4a:	f7ff fd4d 	bl	d87e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8d4e:	b178      	cbz	r0, d8d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8d50:	4629      	mov	r1, r5
   d8d52:	4630      	mov	r0, r6
   d8d54:	f7ff ff8b 	bl	d8c6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8d58:	4630      	mov	r0, r6
   d8d5a:	f7fb fa96 	bl	d428a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8d5e:	2110      	movs	r1, #16
   d8d60:	4630      	mov	r0, r6
   d8d62:	f001 fd58 	bl	da816 <_ZdlPvj>
        p_->setError(std::move(error));
   d8d66:	4668      	mov	r0, sp
   d8d68:	f7ff ff03 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
    }
   d8d6c:	b009      	add	sp, #36	; 0x24
   d8d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8d70:	4631      	mov	r1, r6
   d8d72:	a802      	add	r0, sp, #8
   d8d74:	f7ff ffb0 	bl	d8cd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8d78:	68e0      	ldr	r0, [r4, #12]
   d8d7a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8d7e:	b108      	cbz	r0, d8d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8d80:	f002 fc24 	bl	db5cc <strdup>
        type_(type) {
   d8d84:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8d86:	2010      	movs	r0, #16
   d8d88:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8d8c:	f7fb f983 	bl	d4096 <_Znwj>
   d8d90:	4605      	mov	r5, r0
   d8d92:	b1e8      	cbz	r0, d8dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8d94:	2700      	movs	r7, #0
   d8d96:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d98:	2018      	movs	r0, #24
   d8d9a:	f7fb f97c 	bl	d4096 <_Znwj>
   d8d9e:	4604      	mov	r4, r0
   d8da0:	b188      	cbz	r0, d8dc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8da2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8da4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8da6:	a802      	add	r0, sp, #8
   d8da8:	f7fd f86e 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8dac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8dae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8db0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8db2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8db4:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8db6:	a906      	add	r1, sp, #24
   d8db8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8dba:	60e3      	str	r3, [r4, #12]
   d8dbc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8dc0:	9205      	str	r2, [sp, #20]
   d8dc2:	f7ff fec9 	bl	d8b58 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8dc6:	4b08      	ldr	r3, [pc, #32]	; (d8de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8dc8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8dca:	4b08      	ldr	r3, [pc, #32]	; (d8dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8dcc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8dce:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8dd0:	a806      	add	r0, sp, #24
   d8dd2:	f7ff fece 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8dd6:	a802      	add	r0, sp, #8
   d8dd8:	f7fb fa57 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8ddc:	2200      	movs	r2, #0
   d8dde:	4629      	mov	r1, r5
   d8de0:	4803      	ldr	r0, [pc, #12]	; (d8df0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8de2:	f7ff fd09 	bl	d87f8 <application_thread_invoke>
   d8de6:	e7b7      	b.n	d8d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8de8:	000d8c81 	.word	0x000d8c81
   d8dec:	000d8f19 	.word	0x000d8f19
   d8df0:	000d8adb 	.word	0x000d8adb

000d8df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8df8:	b08a      	sub	sp, #40	; 0x28
   d8dfa:	4605      	mov	r5, r0
   d8dfc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8e00:	460c      	mov	r4, r1
   d8e02:	4617      	mov	r7, r2
   d8e04:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8e06:	f7ff fd4d 	bl	d88a4 <spark_cloud_flag_connected>
   d8e0a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8e0c:	4682      	mov	sl, r0
   d8e0e:	bb38      	cbnz	r0, d8e60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8e10:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8e14:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e16:	a905      	add	r1, sp, #20
   d8e18:	4630      	mov	r0, r6
   d8e1a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8e1e:	f7ff fe9b 	bl	d8b58 <_ZN8particle5ErrorC1EOS0_>
   d8e22:	2014      	movs	r0, #20
   d8e24:	f7fb f937 	bl	d4096 <_Znwj>
   d8e28:	4604      	mov	r4, r0
   d8e2a:	b148      	cbz	r0, d8e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8e2c:	2302      	movs	r3, #2
   d8e2e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e30:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8e32:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e36:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8e38:	4631      	mov	r1, r6
   d8e3a:	300c      	adds	r0, #12
   d8e3c:	f7ff fe8c 	bl	d8b58 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e40:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8e42:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e44:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8e48:	f7ff ff32 	bl	d8cb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e4c:	4630      	mov	r0, r6
   d8e4e:	f7ff fe90 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8e52:	a805      	add	r0, sp, #20
   d8e54:	f7ff fe8d 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8e58:	4628      	mov	r0, r5
   d8e5a:	b00a      	add	sp, #40	; 0x28
   d8e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8e60:	230c      	movs	r3, #12
   d8e62:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8e66:	2014      	movs	r0, #20
   d8e68:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8e6c:	9307      	str	r3, [sp, #28]
   d8e6e:	f7fb f912 	bl	d4096 <_Znwj>
   d8e72:	4601      	mov	r1, r0
   d8e74:	b128      	cbz	r0, d8e82 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8e76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8e7a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e7e:	f880 a001 	strb.w	sl, [r0, #1]
   d8e82:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e84:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8e86:	f7ff ff13 	bl	d8cb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8e8a:	4b22      	ldr	r3, [pc, #136]	; (d8f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8e8c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8e8e:	2008      	movs	r0, #8
   d8e90:	f7fb f901 	bl	d4096 <_Znwj>
   d8e94:	4682      	mov	sl, r0
   d8e96:	b128      	cbz	r0, d8ea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e98:	9b03      	ldr	r3, [sp, #12]
   d8e9a:	f840 3b04 	str.w	r3, [r0], #4
   d8e9e:	a904      	add	r1, sp, #16
   d8ea0:	f7fd fda0 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8ea4:	9600      	str	r6, [sp, #0]
   d8ea6:	fa5f f389 	uxtb.w	r3, r9
   d8eaa:	4642      	mov	r2, r8
   d8eac:	4639      	mov	r1, r7
   d8eae:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8eb0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8eb4:	f7ff fd06 	bl	d88c4 <spark_send_event>
   d8eb8:	b9b8      	cbnz	r0, d8eea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8eba:	9b03      	ldr	r3, [sp, #12]
   d8ebc:	785b      	ldrb	r3, [r3, #1]
   d8ebe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8ec2:	b993      	cbnz	r3, d8eea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8ec4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8ec8:	a905      	add	r1, sp, #20
   d8eca:	a803      	add	r0, sp, #12
   d8ecc:	9205      	str	r2, [sp, #20]
   d8ece:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8ed2:	f7ff ff11 	bl	d8cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8ed6:	a805      	add	r0, sp, #20
   d8ed8:	f7ff fe4b 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8edc:	a805      	add	r0, sp, #20
   d8ede:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8ee0:	f7ff fea6 	bl	d8c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8ee4:	a806      	add	r0, sp, #24
   d8ee6:	f7fc ff37 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8eea:	9b03      	ldr	r3, [sp, #12]
   d8eec:	9305      	str	r3, [sp, #20]
   d8eee:	a904      	add	r1, sp, #16
   d8ef0:	a806      	add	r0, sp, #24
   d8ef2:	f7fd fd77 	bl	d69e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8ef6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8ef8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8efa:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8efc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8efe:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8f00:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8f02:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8f04:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8f06:	f7fc ff27 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f0a:	a804      	add	r0, sp, #16
   d8f0c:	f7fc ff24 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8f10:	e7a2      	b.n	d8e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8f12:	bf00      	nop
   d8f14:	000d8fdd 	.word	0x000d8fdd

000d8f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8f18:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f1c:	4605      	mov	r5, r0
	  switch (__op)
   d8f1e:	d007      	beq.n	d8f30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8f20:	2a03      	cmp	r2, #3
   d8f22:	d018      	beq.n	d8f56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8f24:	2a01      	cmp	r2, #1
   d8f26:	d101      	bne.n	d8f2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8f28:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8f2a:	6003      	str	r3, [r0, #0]
	}
   d8f2c:	2000      	movs	r0, #0
   d8f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f30:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8f32:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f34:	f7fb f8af 	bl	d4096 <_Znwj>
   d8f38:	4604      	mov	r4, r0
   d8f3a:	b150      	cbz	r0, d8f52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d8f3c:	4631      	mov	r1, r6
   d8f3e:	f7ff fecb 	bl	d8cd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8f42:	6930      	ldr	r0, [r6, #16]
   d8f44:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8f48:	b108      	cbz	r0, d8f4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8f4a:	f002 fb3f 	bl	db5cc <strdup>
        type_(type) {
   d8f4e:	6120      	str	r0, [r4, #16]
   d8f50:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8f52:	602c      	str	r4, [r5, #0]
	}
   d8f54:	e7ea      	b.n	d8f2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8f56:	6804      	ldr	r4, [r0, #0]
   d8f58:	2c00      	cmp	r4, #0
   d8f5a:	d0e7      	beq.n	d8f2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8f5c:	f104 0010 	add.w	r0, r4, #16
   d8f60:	f7ff fe07 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8f64:	4620      	mov	r0, r4
   d8f66:	f7fb f990 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8f6a:	2118      	movs	r1, #24
   d8f6c:	4620      	mov	r0, r4
   d8f6e:	f001 fc52 	bl	da816 <_ZdlPvj>
   d8f72:	e7db      	b.n	d8f2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8f74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8f76:	2300      	movs	r3, #0
   d8f78:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8f7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8f7c:	4604      	mov	r4, r0
   d8f7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8f80:	b12b      	cbz	r3, d8f8e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8f82:	2202      	movs	r2, #2
   d8f84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8f86:	68eb      	ldr	r3, [r5, #12]
   d8f88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8f8a:	68ab      	ldr	r3, [r5, #8]
   d8f8c:	60a3      	str	r3, [r4, #8]
    }
   d8f8e:	4620      	mov	r0, r4
   d8f90:	bd38      	pop	{r3, r4, r5, pc}

000d8f92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8f92:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8f94:	b570      	push	{r4, r5, r6, lr}
   d8f96:	4604      	mov	r4, r0
	  switch (__op)
   d8f98:	d007      	beq.n	d8faa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8f9a:	2a03      	cmp	r2, #3
   d8f9c:	d012      	beq.n	d8fc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8f9e:	2a01      	cmp	r2, #1
   d8fa0:	d101      	bne.n	d8fa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8fa2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8fa4:	6003      	str	r3, [r0, #0]
	}
   d8fa6:	2000      	movs	r0, #0
   d8fa8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8faa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8fac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8fae:	f7fb f872 	bl	d4096 <_Znwj>
   d8fb2:	4605      	mov	r5, r0
   d8fb4:	b120      	cbz	r0, d8fc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8fb6:	4631      	mov	r1, r6
   d8fb8:	f7ff ffdc 	bl	d8f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8fbc:	7c33      	ldrb	r3, [r6, #16]
   d8fbe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8fc0:	6025      	str	r5, [r4, #0]
	}
   d8fc2:	e7f0      	b.n	d8fa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8fc4:	6804      	ldr	r4, [r0, #0]
   d8fc6:	2c00      	cmp	r4, #0
   d8fc8:	d0ed      	beq.n	d8fa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8fca:	4620      	mov	r0, r4
   d8fcc:	f7fb f95d 	bl	d428a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8fd0:	2114      	movs	r1, #20
   d8fd2:	4620      	mov	r0, r4
   d8fd4:	f001 fc1f 	bl	da816 <_ZdlPvj>
   d8fd8:	e7e5      	b.n	d8fa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8fde:	b089      	sub	sp, #36	; 0x24
   d8fe0:	4604      	mov	r4, r0
   d8fe2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8fe4:	a801      	add	r0, sp, #4
   d8fe6:	4611      	mov	r1, r2
   d8fe8:	f7ff fe22 	bl	d8c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8fec:	b1a4      	cbz	r4, d9018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8fee:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8ff0:	b11d      	cbz	r5, d8ffa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8ff2:	4628      	mov	r0, r5
   d8ff4:	f002 faea 	bl	db5cc <strdup>
   d8ff8:	4605      	mov	r5, r0
   d8ffa:	a801      	add	r0, sp, #4
   d8ffc:	a903      	add	r1, sp, #12
        type_(type) {
   d8ffe:	9503      	str	r5, [sp, #12]
   d9000:	f8ad 4010 	strh.w	r4, [sp, #16]
   d9004:	f7ff fe78 	bl	d8cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9008:	a803      	add	r0, sp, #12
   d900a:	f7ff fdb2 	bl	d8b72 <_ZN8particle5ErrorD1Ev>
   d900e:	a802      	add	r0, sp, #8
   d9010:	f7fc fea2 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9014:	b009      	add	sp, #36	; 0x24
   d9016:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9018:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d901a:	2301      	movs	r3, #1
   d901c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9020:	2a00      	cmp	r2, #0
   d9022:	d103      	bne.n	d902c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9024:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9028:	2900      	cmp	r1, #0
   d902a:	d1f7      	bne.n	d901c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d902c:	d1ef      	bne.n	d900e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d902e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9030:	f3bf 8f5b 	dmb	ish
   d9034:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9036:	1d2b      	adds	r3, r5, #4
   d9038:	f3bf 8f5b 	dmb	ish
   d903c:	e853 6f00 	ldrex	r6, [r3]
   d9040:	e843 4200 	strex	r2, r4, [r3]
   d9044:	2a00      	cmp	r2, #0
   d9046:	d1f9      	bne.n	d903c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9048:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d904c:	2e00      	cmp	r6, #0
   d904e:	d0de      	beq.n	d900e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9050:	4620      	mov	r0, r4
   d9052:	f7ff fbc9 	bl	d87e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9056:	4607      	mov	r7, r0
   d9058:	b160      	cbz	r0, d9074 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d905a:	f105 010c 	add.w	r1, r5, #12
   d905e:	4630      	mov	r0, r6
   d9060:	f7ff fe15 	bl	d8c8e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9064:	4630      	mov	r0, r6
   d9066:	f7fb f910 	bl	d428a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d906a:	2110      	movs	r1, #16
   d906c:	4630      	mov	r0, r6
   d906e:	f001 fbd2 	bl	da816 <_ZdlPvj>
   d9072:	e7cc      	b.n	d900e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9074:	4631      	mov	r1, r6
   d9076:	a803      	add	r0, sp, #12
   d9078:	f7ff ff7c 	bl	d8f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d907c:	7b2b      	ldrb	r3, [r5, #12]
   d907e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9082:	2010      	movs	r0, #16
   d9084:	f7fb f807 	bl	d4096 <_Znwj>
   d9088:	4605      	mov	r5, r0
   d908a:	b1d0      	cbz	r0, d90c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d908c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d908e:	2014      	movs	r0, #20
   d9090:	f7fb f801 	bl	d4096 <_Znwj>
   d9094:	4604      	mov	r4, r0
   d9096:	b178      	cbz	r0, d90b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9098:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d909a:	4601      	mov	r1, r0
   d909c:	a803      	add	r0, sp, #12
   d909e:	f7fc fef3 	bl	d5e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90a2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d90a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90a6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90a8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d90aa:	9205      	str	r2, [sp, #20]
   d90ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90ae:	60e3      	str	r3, [r4, #12]
   d90b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d90b4:	9206      	str	r2, [sp, #24]
   d90b6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d90b8:	4b06      	ldr	r3, [pc, #24]	; (d90d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d90ba:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d90bc:	4b06      	ldr	r3, [pc, #24]	; (d90d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90be:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d90c0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d90c2:	a803      	add	r0, sp, #12
   d90c4:	f7fb f8e1 	bl	d428a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d90c8:	2200      	movs	r2, #0
   d90ca:	4629      	mov	r1, r5
   d90cc:	4803      	ldr	r0, [pc, #12]	; (d90dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d90ce:	f7ff fb93 	bl	d87f8 <application_thread_invoke>
   d90d2:	e7c7      	b.n	d9064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d90d4:	000d8ca1 	.word	0x000d8ca1
   d90d8:	000d8f93 	.word	0x000d8f93
   d90dc:	000d8adb 	.word	0x000d8adb

000d90e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d90e0:	2200      	movs	r2, #0
   d90e2:	6840      	ldr	r0, [r0, #4]
   d90e4:	4611      	mov	r1, r2
   d90e6:	f7ff bc5d 	b.w	d89a4 <network_listening>

000d90ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d90ea:	2200      	movs	r2, #0
   d90ec:	6840      	ldr	r0, [r0, #4]
   d90ee:	4611      	mov	r1, r2
   d90f0:	f7ff bc68 	b.w	d89c4 <network_get_listen_timeout>

000d90f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d90f4:	6840      	ldr	r0, [r0, #4]
   d90f6:	2200      	movs	r2, #0
   d90f8:	f7ff bc5c 	b.w	d89b4 <network_set_listen_timeout>

000d90fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d90fc:	6840      	ldr	r0, [r0, #4]
   d90fe:	2200      	movs	r2, #0
   d9100:	f081 0101 	eor.w	r1, r1, #1
   d9104:	f7ff bc46 	b.w	d8994 <network_listen>

000d9108 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9108:	2300      	movs	r3, #0
   d910a:	6840      	ldr	r0, [r0, #4]
   d910c:	461a      	mov	r2, r3
   d910e:	4619      	mov	r1, r3
   d9110:	f7ff bc38 	b.w	d8984 <network_off>

000d9114 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9114:	2300      	movs	r3, #0
   d9116:	6840      	ldr	r0, [r0, #4]
   d9118:	461a      	mov	r2, r3
   d911a:	4619      	mov	r1, r3
   d911c:	f7ff bc2a 	b.w	d8974 <network_on>

000d9120 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9120:	2200      	movs	r2, #0
   d9122:	6840      	ldr	r0, [r0, #4]
   d9124:	4611      	mov	r1, r2
   d9126:	f7ff bc1d 	b.w	d8964 <network_ready>

000d912a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d912a:	2200      	movs	r2, #0
   d912c:	6840      	ldr	r0, [r0, #4]
   d912e:	4611      	mov	r1, r2
   d9130:	f7ff bc08 	b.w	d8944 <network_connecting>

000d9134 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9134:	6840      	ldr	r0, [r0, #4]
   d9136:	2200      	movs	r2, #0
   d9138:	2102      	movs	r1, #2
   d913a:	f7ff bc0b 	b.w	d8954 <network_disconnect>

000d913e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d913e:	2300      	movs	r3, #0
   d9140:	6840      	ldr	r0, [r0, #4]
   d9142:	461a      	mov	r2, r3
   d9144:	f7ff bbf6 	b.w	d8934 <network_connect>

000d9148 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9148:	4b02      	ldr	r3, [pc, #8]	; (d9154 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d914a:	2203      	movs	r2, #3
   d914c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d914e:	4a02      	ldr	r2, [pc, #8]	; (d9158 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9150:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d9152:	4770      	bx	lr
   d9154:	2003e610 	.word	0x2003e610
   d9158:	000de054 	.word	0x000de054

000d915c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d915c:	4770      	bx	lr

000d915e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d915e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9160:	4606      	mov	r6, r0
   d9162:	4615      	mov	r5, r2
   d9164:	460c      	mov	r4, r1
   d9166:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9168:	42bc      	cmp	r4, r7
   d916a:	d006      	beq.n	d917a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d916c:	6833      	ldr	r3, [r6, #0]
   d916e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9172:	689b      	ldr	r3, [r3, #8]
   d9174:	4630      	mov	r0, r6
   d9176:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9178:	e7f6      	b.n	d9168 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d917a:	4628      	mov	r0, r5
   d917c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d917e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d917e:	7c00      	ldrb	r0, [r0, #16]
   d9180:	2200      	movs	r2, #0
   d9182:	f7ff ba09 	b.w	d8598 <hal_i2c_write>

000d9186 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9186:	7c00      	ldrb	r0, [r0, #16]
   d9188:	2100      	movs	r1, #0
   d918a:	f7ff ba0d 	b.w	d85a8 <hal_i2c_available>

000d918e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d918e:	7c00      	ldrb	r0, [r0, #16]
   d9190:	2100      	movs	r1, #0
   d9192:	f7ff ba11 	b.w	d85b8 <hal_i2c_read>

000d9196 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9196:	7c00      	ldrb	r0, [r0, #16]
   d9198:	2100      	movs	r1, #0
   d919a:	f7ff ba15 	b.w	d85c8 <hal_i2c_peek>

000d919e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d919e:	7c00      	ldrb	r0, [r0, #16]
   d91a0:	2100      	movs	r1, #0
   d91a2:	f7ff ba19 	b.w	d85d8 <hal_i2c_flush>

000d91a6 <_ZN7TwoWireD0Ev>:
   d91a6:	b510      	push	{r4, lr}
   d91a8:	2114      	movs	r1, #20
   d91aa:	4604      	mov	r4, r0
   d91ac:	f001 fb33 	bl	da816 <_ZdlPvj>
   d91b0:	4620      	mov	r0, r4
   d91b2:	bd10      	pop	{r4, pc}

000d91b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d91b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d91b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d91ba:	4604      	mov	r4, r0
   d91bc:	4608      	mov	r0, r1
   d91be:	2100      	movs	r1, #0
   d91c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d91c4:	4b03      	ldr	r3, [pc, #12]	; (d91d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d91c6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d91c8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d91ca:	4611      	mov	r1, r2
   d91cc:	f7ff fa14 	bl	d85f8 <hal_i2c_init>
}
   d91d0:	4620      	mov	r0, r4
   d91d2:	bd10      	pop	{r4, pc}
   d91d4:	000de090 	.word	0x000de090

000d91d8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d91d8:	2300      	movs	r3, #0
   d91da:	7c00      	ldrb	r0, [r0, #16]
   d91dc:	461a      	mov	r2, r3
   d91de:	4619      	mov	r1, r3
   d91e0:	f7ff b9c2 	b.w	d8568 <hal_i2c_begin>

000d91e4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d91e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d91e6:	2200      	movs	r2, #0
   d91e8:	2314      	movs	r3, #20
   d91ea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d91ee:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d91f2:	780b      	ldrb	r3, [r1, #0]
   d91f4:	f88d 3008 	strb.w	r3, [sp, #8]
   d91f8:	684b      	ldr	r3, [r1, #4]
   d91fa:	9303      	str	r3, [sp, #12]
   d91fc:	68cb      	ldr	r3, [r1, #12]
   d91fe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9200:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9202:	7a0b      	ldrb	r3, [r1, #8]
   d9204:	9305      	str	r3, [sp, #20]
   d9206:	a901      	add	r1, sp, #4
   d9208:	f7ff fa0e 	bl	d8628 <hal_i2c_request_ex>
}
   d920c:	b007      	add	sp, #28
   d920e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9212 <_ZN7TwoWire11requestFromEhjh>:
{
   d9212:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9214:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9216:	f88d 1000 	strb.w	r1, [sp]
   d921a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d921e:	9103      	str	r1, [sp, #12]
   d9220:	bf18      	it	ne
   d9222:	2301      	movne	r3, #1
   d9224:	4669      	mov	r1, sp
    size_ = size;
   d9226:	9201      	str	r2, [sp, #4]
   d9228:	f88d 3008 	strb.w	r3, [sp, #8]
   d922c:	f7ff ffda 	bl	d91e4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9230:	b005      	add	sp, #20
   d9232:	f85d fb04 	ldr.w	pc, [sp], #4

000d9236 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9236:	7c00      	ldrb	r0, [r0, #16]
   d9238:	2200      	movs	r2, #0
   d923a:	f7ff b99d 	b.w	d8578 <hal_i2c_begin_transmission>

000d923e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d923e:	b2c9      	uxtb	r1, r1
   d9240:	f7ff bff9 	b.w	d9236 <_ZN7TwoWire17beginTransmissionEh>

000d9244 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9244:	7c00      	ldrb	r0, [r0, #16]
   d9246:	2200      	movs	r2, #0
   d9248:	f7ff b99e 	b.w	d8588 <hal_i2c_end_transmission>

000d924c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d924c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d924e:	2100      	movs	r1, #0
   d9250:	7c00      	ldrb	r0, [r0, #16]
   d9252:	f7ff f9d9 	bl	d8608 <hal_i2c_lock>
}
   d9256:	fab0 f080 	clz	r0, r0
   d925a:	0940      	lsrs	r0, r0, #5
   d925c:	bd08      	pop	{r3, pc}

000d925e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d925e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9260:	2100      	movs	r1, #0
   d9262:	7c00      	ldrb	r0, [r0, #16]
   d9264:	f7ff f9d8 	bl	d8618 <hal_i2c_unlock>
}
   d9268:	fab0 f080 	clz	r0, r0
   d926c:	0940      	lsrs	r0, r0, #5
   d926e:	bd08      	pop	{r3, pc}

000d9270 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9270:	4700      	bx	r0
	...

000d9274 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9274:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9278:	2400      	movs	r4, #0
{
   d927a:	461d      	mov	r5, r3
   d927c:	460f      	mov	r7, r1
   d927e:	4690      	mov	r8, r2
   d9280:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9282:	f7ff f961 	bl	d8548 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d9286:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9288:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d928c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9290:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9294:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9298:	bfa2      	ittt	ge
   d929a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d929e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d92a2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d92a4:	4907      	ldr	r1, [pc, #28]	; (d92c4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d92a6:	9400      	str	r4, [sp, #0]
   d92a8:	4643      	mov	r3, r8
   d92aa:	463a      	mov	r2, r7
   d92ac:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d92ae:	bfa8      	it	ge
   d92b0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d92b4:	f7ff f940 	bl	d8538 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d92b8:	fab0 f080 	clz	r0, r0
   d92bc:	0940      	lsrs	r0, r0, #5
   d92be:	b004      	add	sp, #16
   d92c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92c4:	000d9271 	.word	0x000d9271

000d92c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d92c8:	4770      	bx	lr

000d92ca <_ZN9IPAddressD0Ev>:
   d92ca:	b510      	push	{r4, lr}
   d92cc:	2118      	movs	r1, #24
   d92ce:	4604      	mov	r4, r0
   d92d0:	f001 faa1 	bl	da816 <_ZdlPvj>
   d92d4:	4620      	mov	r0, r4
   d92d6:	bd10      	pop	{r4, pc}

000d92d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d92d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d92da:	7d03      	ldrb	r3, [r0, #20]
   d92dc:	2b06      	cmp	r3, #6
{
   d92de:	b08d      	sub	sp, #52	; 0x34
   d92e0:	460e      	mov	r6, r1
   d92e2:	f100 0704 	add.w	r7, r0, #4
   d92e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d92ea:	d012      	beq.n	d9312 <_ZNK9IPAddress7printToER5Print+0x3a>
   d92ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d92f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d92f4:	220a      	movs	r2, #10
   d92f6:	4630      	mov	r0, r6
   d92f8:	f000 fc8f 	bl	d9c1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d92fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d92fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9300:	d019      	beq.n	d9336 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9302:	2c00      	cmp	r4, #0
   d9304:	d0f4      	beq.n	d92f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9306:	212e      	movs	r1, #46	; 0x2e
   d9308:	4630      	mov	r0, r6
   d930a:	f000 fc83 	bl	d9c14 <_ZN5Print5printEc>
   d930e:	4404      	add	r4, r0
   d9310:	e7ee      	b.n	d92f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9312:	232f      	movs	r3, #47	; 0x2f
   d9314:	466a      	mov	r2, sp
   d9316:	4639      	mov	r1, r7
   d9318:	200a      	movs	r0, #10
		buf[0] = 0;
   d931a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d931e:	f7ff f98b 	bl	d8638 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9322:	4668      	mov	r0, sp
   d9324:	f002 f96f 	bl	db606 <strlen>
   d9328:	6833      	ldr	r3, [r6, #0]
   d932a:	4602      	mov	r2, r0
   d932c:	68db      	ldr	r3, [r3, #12]
   d932e:	4669      	mov	r1, sp
   d9330:	4630      	mov	r0, r6
   d9332:	4798      	blx	r3
   d9334:	4604      	mov	r4, r0
    }
    return n;
}
   d9336:	4620      	mov	r0, r4
   d9338:	b00d      	add	sp, #52	; 0x34
   d933a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d933c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d933c:	b510      	push	{r4, lr}
   d933e:	4b05      	ldr	r3, [pc, #20]	; (d9354 <_ZN9IPAddressC1Ev+0x18>)
   d9340:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9342:	2211      	movs	r2, #17
   d9344:	f840 3b04 	str.w	r3, [r0], #4
   d9348:	2100      	movs	r1, #0
   d934a:	f002 f901 	bl	db550 <memset>
}
   d934e:	4620      	mov	r0, r4
   d9350:	bd10      	pop	{r4, pc}
   d9352:	bf00      	nop
   d9354:	000de0b8 	.word	0x000de0b8

000d9358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9358:	4603      	mov	r3, r0
   d935a:	4a07      	ldr	r2, [pc, #28]	; (d9378 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d935c:	b510      	push	{r4, lr}
   d935e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9362:	f101 0210 	add.w	r2, r1, #16
   d9366:	f851 4b04 	ldr.w	r4, [r1], #4
   d936a:	f843 4b04 	str.w	r4, [r3], #4
   d936e:	4291      	cmp	r1, r2
   d9370:	d1f9      	bne.n	d9366 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9372:	780a      	ldrb	r2, [r1, #0]
   d9374:	701a      	strb	r2, [r3, #0]
}
   d9376:	bd10      	pop	{r4, pc}
   d9378:	000de0b8 	.word	0x000de0b8

000d937c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d937c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d937e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9382:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9386:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d938a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d938e:	2304      	movs	r3, #4
   d9390:	6041      	str	r1, [r0, #4]
   d9392:	7503      	strb	r3, [r0, #20]
}
   d9394:	bd10      	pop	{r4, pc}
	...

000d9398 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d9398:	b513      	push	{r0, r1, r4, lr}
   d939a:	4b05      	ldr	r3, [pc, #20]	; (d93b0 <_ZN9IPAddressC1EPKh+0x18>)
   d939c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d939e:	78cb      	ldrb	r3, [r1, #3]
   d93a0:	9300      	str	r3, [sp, #0]
   d93a2:	788b      	ldrb	r3, [r1, #2]
   d93a4:	784a      	ldrb	r2, [r1, #1]
   d93a6:	7809      	ldrb	r1, [r1, #0]
   d93a8:	f7ff ffe8 	bl	d937c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d93ac:	b002      	add	sp, #8
   d93ae:	bd10      	pop	{r4, pc}
   d93b0:	000de0b8 	.word	0x000de0b8

000d93b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d93b4:	f100 0310 	add.w	r3, r0, #16
   d93b8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d93ba:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d93be:	2901      	cmp	r1, #1
   d93c0:	4618      	mov	r0, r3
   d93c2:	d108      	bne.n	d93d6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d93c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d93c8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d93cc:	3a01      	subs	r2, #1
   d93ce:	f103 0310 	add.w	r3, r3, #16
   d93d2:	d1f2      	bne.n	d93ba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d93d4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d93d6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d93d8:	bf04      	itt	eq
   d93da:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d93de:	1852      	addeq	r2, r2, r1
   d93e0:	e7f4      	b.n	d93cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d93e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d93e2:	4770      	bx	lr

000d93e4 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d93e4:	4770      	bx	lr

000d93e6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d93e6:	2000      	movs	r0, #0
   d93e8:	4770      	bx	lr

000d93ea <_ZN5spark16JSONBufferWriterD0Ev>:
   d93ea:	b510      	push	{r4, lr}
   d93ec:	2114      	movs	r1, #20
   d93ee:	4604      	mov	r4, r0
   d93f0:	f001 fa11 	bl	da816 <_ZdlPvj>
   d93f4:	4620      	mov	r0, r4
   d93f6:	bd10      	pop	{r4, pc}

000d93f8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d93f8:	b510      	push	{r4, lr}
   d93fa:	2110      	movs	r1, #16
   d93fc:	4604      	mov	r4, r0
   d93fe:	f001 fa0a 	bl	da816 <_ZdlPvj>
   d9402:	4620      	mov	r0, r4
   d9404:	bd10      	pop	{r4, pc}

000d9406 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d9406:	b508      	push	{r3, lr}
      { delete this; }
   d9408:	f7ff fff6 	bl	d93f8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d940c:	bd08      	pop	{r3, pc}

000d940e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d940e:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d9410:	68c4      	ldr	r4, [r0, #12]
   d9412:	b17c      	cbz	r4, d9434 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d9414:	6820      	ldr	r0, [r4, #0]
   d9416:	b108      	cbz	r0, d941c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d9418:	f7fa fe43 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d941c:	7a23      	ldrb	r3, [r4, #8]
   d941e:	b11b      	cbz	r3, d9428 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d9420:	6860      	ldr	r0, [r4, #4]
   d9422:	b108      	cbz	r0, d9428 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d9424:	f7fa fe3d 	bl	d40a2 <_ZdaPv>
   d9428:	4620      	mov	r0, r4
   d942a:	210c      	movs	r1, #12
   d942c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9430:	f001 b9f1 	b.w	da816 <_ZdlPvj>
   d9434:	bd10      	pop	{r4, pc}

000d9436 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d9436:	b538      	push	{r3, r4, r5, lr}
   d9438:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d943a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   d943e:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d9440:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d9442:	d207      	bcs.n	d9454 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d9444:	1ad2      	subs	r2, r2, r3
   d9446:	6880      	ldr	r0, [r0, #8]
   d9448:	42aa      	cmp	r2, r5
   d944a:	bf28      	it	cs
   d944c:	462a      	movcs	r2, r5
   d944e:	4418      	add	r0, r3
   d9450:	f002 f856 	bl	db500 <memcpy>
    }
    n_ += size;
   d9454:	6922      	ldr	r2, [r4, #16]
   d9456:	442a      	add	r2, r5
   d9458:	6122      	str	r2, [r4, #16]
}
   d945a:	bd38      	pop	{r3, r4, r5, pc}

000d945c <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d945c:	b40e      	push	{r1, r2, r3}
   d945e:	b517      	push	{r0, r1, r2, r4, lr}
   d9460:	ab05      	add	r3, sp, #20
   d9462:	4604      	mov	r4, r0
   d9464:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d9468:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   d946a:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d946c:	6903      	ldr	r3, [r0, #16]
   d946e:	6880      	ldr	r0, [r0, #8]
   d9470:	428b      	cmp	r3, r1
   d9472:	bf38      	it	cc
   d9474:	1ac9      	subcc	r1, r1, r3
   d9476:	4418      	add	r0, r3
   d9478:	bf28      	it	cs
   d947a:	2100      	movcs	r1, #0
   d947c:	9b01      	ldr	r3, [sp, #4]
   d947e:	f7ff fae1 	bl	d8a44 <vsnprintf>
    va_end(args);
    n_ += n;
   d9482:	6923      	ldr	r3, [r4, #16]
   d9484:	4418      	add	r0, r3
   d9486:	6120      	str	r0, [r4, #16]
}
   d9488:	b003      	add	sp, #12
   d948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d948e:	b003      	add	sp, #12
   d9490:	4770      	bx	lr

000d9492 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9492:	b510      	push	{r4, lr}
          _M_dispose();
   d9494:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9496:	4604      	mov	r4, r0
          _M_dispose();
   d9498:	689b      	ldr	r3, [r3, #8]
   d949a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d949c:	68a3      	ldr	r3, [r4, #8]
   d949e:	3b01      	subs	r3, #1
   d94a0:	60a3      	str	r3, [r4, #8]
   d94a2:	b92b      	cbnz	r3, d94b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d94a4:	6823      	ldr	r3, [r4, #0]
   d94a6:	4620      	mov	r0, r4
   d94a8:	68db      	ldr	r3, [r3, #12]
    }
   d94aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d94ae:	4718      	bx	r3
    }
   d94b0:	bd10      	pop	{r4, pc}

000d94b2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d94b2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d94b4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d94b6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d94ba:	689b      	ldr	r3, [r3, #8]
   d94bc:	2201      	movs	r2, #1
   d94be:	f10d 0107 	add.w	r1, sp, #7
   d94c2:	4798      	blx	r3
}
   d94c4:	b003      	add	sp, #12
   d94c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d94ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d94ca:	b538      	push	{r3, r4, r5, lr}
   d94cc:	680b      	ldr	r3, [r1, #0]
   d94ce:	6003      	str	r3, [r0, #0]
   d94d0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d94d2:	6843      	ldr	r3, [r0, #4]
   d94d4:	429d      	cmp	r5, r3
    class __shared_ptr
   d94d6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d94d8:	d00c      	beq.n	d94f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d94da:	b115      	cbz	r5, d94e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d94dc:	686b      	ldr	r3, [r5, #4]
   d94de:	3301      	adds	r3, #1
   d94e0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d94e2:	6860      	ldr	r0, [r4, #4]
   d94e4:	b128      	cbz	r0, d94f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d94e6:	6843      	ldr	r3, [r0, #4]
   d94e8:	3b01      	subs	r3, #1
   d94ea:	6043      	str	r3, [r0, #4]
   d94ec:	b90b      	cbnz	r3, d94f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d94ee:	f7ff ffd0 	bl	d9492 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d94f2:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d94f4:	4620      	mov	r0, r4
   d94f6:	bd38      	pop	{r3, r4, r5, pc}

000d94f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d94f8:	460b      	mov	r3, r1
   d94fa:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d94fc:	2200      	movs	r2, #0
   d94fe:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9500:	e9c0 2200 	strd	r2, r2, [r0]
   d9504:	4604      	mov	r4, r0
        t_ = t;
   d9506:	6083      	str	r3, [r0, #8]
    if (t) {
   d9508:	b90b      	cbnz	r3, d950e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d950a:	4620      	mov	r0, r4
   d950c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d950e:	f7ff ffdc 	bl	d94ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9512:	e7fa      	b.n	d950a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9514 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9514:	6883      	ldr	r3, [r0, #8]
   d9516:	b1eb      	cbz	r3, d9554 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9518:	781a      	ldrb	r2, [r3, #0]
   d951a:	2a03      	cmp	r2, #3
   d951c:	d81a      	bhi.n	d9554 <_ZNK5spark9JSONValue4typeEv+0x40>
   d951e:	e8df f002 	tbb	[pc, r2]
   d9522:	1704      	.short	0x1704
   d9524:	1b02      	.short	0x1b02
   d9526:	2005      	movs	r0, #5
   d9528:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d952a:	6802      	ldr	r2, [r0, #0]
   d952c:	685b      	ldr	r3, [r3, #4]
   d952e:	6852      	ldr	r2, [r2, #4]
   d9530:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9532:	282d      	cmp	r0, #45	; 0x2d
   d9534:	d012      	beq.n	d955c <_ZNK5spark9JSONValue4typeEv+0x48>
   d9536:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d953a:	2b09      	cmp	r3, #9
   d953c:	d90e      	bls.n	d955c <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d953e:	2874      	cmp	r0, #116	; 0x74
   d9540:	d00e      	beq.n	d9560 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9542:	2866      	cmp	r0, #102	; 0x66
   d9544:	d00c      	beq.n	d9560 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9546:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d954a:	4258      	negs	r0, r3
   d954c:	4158      	adcs	r0, r3
   d954e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9550:	2006      	movs	r0, #6
   d9552:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9554:	2000      	movs	r0, #0
   d9556:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9558:	2004      	movs	r0, #4
   d955a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d955c:	2003      	movs	r0, #3
   d955e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9560:	2002      	movs	r0, #2
}
   d9562:	4770      	bx	lr

000d9564 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d9564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9568:	b086      	sub	sp, #24
   d956a:	4607      	mov	r7, r0
   d956c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d956e:	a802      	add	r0, sp, #8
   d9570:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d9572:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d9574:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d9576:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d9578:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d957a:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d957c:	f7ff f8fc 	bl	d8778 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d9580:	e9cd 4400 	strd	r4, r4, [sp]
   d9584:	4623      	mov	r3, r4
   d9586:	4642      	mov	r2, r8
   d9588:	4639      	mov	r1, r7
   d958a:	a802      	add	r0, sp, #8
   d958c:	f7ff f8fc 	bl	d8788 <jsmn_parse>
    if (n <= 0) {
   d9590:	1e06      	subs	r6, r0, #0
   d9592:	dd1e      	ble.n	d95d2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d9594:	4910      	ldr	r1, [pc, #64]	; (d95d8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d9596:	0130      	lsls	r0, r6, #4
   d9598:	f001 f941 	bl	da81e <_ZnajRKSt9nothrow_t>
    if (!t) {
   d959c:	4605      	mov	r5, r0
   d959e:	b190      	cbz	r0, d95c6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
    jsmn_init(&parser, nullptr); // Reset parser
   d95a0:	4621      	mov	r1, r4
   d95a2:	a802      	add	r0, sp, #8
   d95a4:	f7ff f8e8 	bl	d8778 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d95a8:	e9cd 6400 	strd	r6, r4, [sp]
   d95ac:	462b      	mov	r3, r5
   d95ae:	4642      	mov	r2, r8
   d95b0:	4639      	mov	r1, r7
   d95b2:	a802      	add	r0, sp, #8
   d95b4:	f7ff f8e8 	bl	d8788 <jsmn_parse>
   d95b8:	42a0      	cmp	r0, r4
   d95ba:	dd07      	ble.n	d95cc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
    *tokens = t.release();
   d95bc:	f8ca 5000 	str.w	r5, [sl]
    return true;
   d95c0:	2001      	movs	r0, #1
    *count = n;
   d95c2:	f8c9 6000 	str.w	r6, [r9]
}
   d95c6:	b006      	add	sp, #24
   d95c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   d95cc:	4628      	mov	r0, r5
   d95ce:	f7fa fd68 	bl	d40a2 <_ZdaPv>
      }
   d95d2:	4620      	mov	r0, r4
   d95d4:	e7f7      	b.n	d95c6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d95d6:	bf00      	nop
   d95d8:	000de218 	.word	0x000de218

000d95dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d95dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d95e0:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d95e2:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d95e4:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d95e6:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d95e8:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d95ea:	4607      	mov	r7, r0
    const char *s = s1;
   d95ec:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d95ee:	4619      	mov	r1, r3
                    *str = 0x0d;
   d95f0:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d95f4:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d95f8:	42b4      	cmp	r4, r6
   d95fa:	d063      	beq.n	d96c4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d95fc:	4625      	mov	r5, r4
   d95fe:	f815 2b01 	ldrb.w	r2, [r5], #1
   d9602:	2a5c      	cmp	r2, #92	; 0x5c
   d9604:	d12b      	bne.n	d965e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d9606:	42a1      	cmp	r1, r4
   d9608:	d007      	beq.n	d961a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d960a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d960e:	4618      	mov	r0, r3
   d9610:	465a      	mov	r2, fp
   d9612:	f001 ff83 	bl	db51c <memmove>
   d9616:	4603      	mov	r3, r0
                str += n;
   d9618:	445b      	add	r3, fp
            if (s == end) {
   d961a:	42b5      	cmp	r5, r6
   d961c:	d039      	beq.n	d9692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d961e:	7862      	ldrb	r2, [r4, #1]
   d9620:	2a75      	cmp	r2, #117	; 0x75
   d9622:	d12a      	bne.n	d967a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d9624:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d9626:	1ab2      	subs	r2, r6, r2
   d9628:	2a03      	cmp	r2, #3
   d962a:	dd32      	ble.n	d9692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d962c:	1da0      	adds	r0, r4, #6
   d962e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d9632:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d9636:	45ae      	cmp	lr, r5
   d9638:	d053      	beq.n	d96e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d963a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d963e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d9642:	fa5f fb82 	uxtb.w	fp, r2
   d9646:	f1bb 0f09 	cmp.w	fp, #9
   d964a:	d905      	bls.n	d9658 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d964c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d9650:	2a05      	cmp	r2, #5
   d9652:	d807      	bhi.n	d9664 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d9654:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d9658:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d965c:	e7eb      	b.n	d9636 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d965e:	4628      	mov	r0, r5
   d9660:	4604      	mov	r4, r0
   d9662:	e7c9      	b.n	d95f8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d9664:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d9668:	2a05      	cmp	r2, #5
   d966a:	d812      	bhi.n	d9692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d966c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d9670:	e7f2      	b.n	d9658 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d9672:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d9676:	4601      	mov	r1, r0
   d9678:	e7f2      	b.n	d9660 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d967a:	2a6e      	cmp	r2, #110	; 0x6e
   d967c:	d01c      	beq.n	d96b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d967e:	d80e      	bhi.n	d969e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d9680:	2a62      	cmp	r2, #98	; 0x62
   d9682:	d013      	beq.n	d96ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d9684:	d807      	bhi.n	d9696 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d9686:	2a2f      	cmp	r2, #47	; 0x2f
   d9688:	d011      	beq.n	d96ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d968a:	2a5c      	cmp	r2, #92	; 0x5c
   d968c:	d00f      	beq.n	d96ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d968e:	2a22      	cmp	r2, #34	; 0x22
   d9690:	d00d      	beq.n	d96ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d9692:	2000      	movs	r0, #0
   d9694:	e023      	b.n	d96de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d9696:	2a66      	cmp	r2, #102	; 0x66
   d9698:	d1fb      	bne.n	d9692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d969a:	220c      	movs	r2, #12
   d969c:	e007      	b.n	d96ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d969e:	2a72      	cmp	r2, #114	; 0x72
   d96a0:	d00d      	beq.n	d96be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d96a2:	2a74      	cmp	r2, #116	; 0x74
   d96a4:	d1f5      	bne.n	d9692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d96a6:	f883 a000 	strb.w	sl, [r3]
                    break;
   d96aa:	e001      	b.n	d96b0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d96ac:	2208      	movs	r2, #8
   d96ae:	701a      	strb	r2, [r3, #0]
                ++s;
   d96b0:	1ca1      	adds	r1, r4, #2
                ++str;
   d96b2:	3301      	adds	r3, #1
                ++s;
   d96b4:	4608      	mov	r0, r1
   d96b6:	e7d3      	b.n	d9660 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d96b8:	f04f 020a 	mov.w	r2, #10
   d96bc:	e7f7      	b.n	d96ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d96be:	f883 9000 	strb.w	r9, [r3]
                    break;
   d96c2:	e7f5      	b.n	d96b0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   d96c4:	42a1      	cmp	r1, r4
   d96c6:	d006      	beq.n	d96d6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d96c8:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d96ca:	4618      	mov	r0, r3
   d96cc:	4622      	mov	r2, r4
   d96ce:	f001 ff25 	bl	db51c <memmove>
   d96d2:	4603      	mov	r3, r0
        str += n;
   d96d4:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   d96d6:	eba3 0308 	sub.w	r3, r3, r8
   d96da:	60bb      	str	r3, [r7, #8]
    return true;
   d96dc:	2001      	movs	r0, #1
}
   d96de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d96e2:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d96e6:	d9c4      	bls.n	d9672 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d96e8:	4621      	mov	r1, r4
   d96ea:	e7b9      	b.n	d9660 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d96ec <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d96ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d96ee:	4604      	mov	r4, r0
   d96f0:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d96f2:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d96f6:	2700      	movs	r7, #0
    while (t != end) {
   d96f8:	42b4      	cmp	r4, r6
   d96fa:	d010      	beq.n	d971e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d96fc:	7823      	ldrb	r3, [r4, #0]
   d96fe:	2b03      	cmp	r3, #3
   d9700:	d108      	bne.n	d9714 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d9702:	4629      	mov	r1, r5
   d9704:	4620      	mov	r0, r4
   d9706:	f7ff ff69 	bl	d95dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d970a:	b148      	cbz	r0, d9720 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d970c:	68a3      	ldr	r3, [r4, #8]
   d970e:	54ef      	strb	r7, [r5, r3]
        ++t;
   d9710:	3410      	adds	r4, #16
    while (t != end) {
   d9712:	e7f1      	b.n	d96f8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d9714:	2b00      	cmp	r3, #0
   d9716:	d1fb      	bne.n	d9710 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d9718:	68a2      	ldr	r2, [r4, #8]
   d971a:	54ab      	strb	r3, [r5, r2]
   d971c:	e7f8      	b.n	d9710 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d971e:	2001      	movs	r0, #1
}
   d9720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d9724 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9724:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9726:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9728:	e9c0 3300 	strd	r3, r3, [r0]
   d972c:	4604      	mov	r4, r0
        n_(0) {
   d972e:	480e      	ldr	r0, [pc, #56]	; (d9768 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9730:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9734:	b1a9      	cbz	r1, d9762 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9736:	780b      	ldrb	r3, [r1, #0]
   d9738:	2b03      	cmp	r3, #3
   d973a:	d006      	beq.n	d974a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d973c:	b98b      	cbnz	r3, d9762 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d973e:	6813      	ldr	r3, [r2, #0]
   d9740:	6858      	ldr	r0, [r3, #4]
   d9742:	684b      	ldr	r3, [r1, #4]
   d9744:	5cc3      	ldrb	r3, [r0, r3]
   d9746:	2b6e      	cmp	r3, #110	; 0x6e
   d9748:	d007      	beq.n	d975a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d974a:	6813      	ldr	r3, [r2, #0]
   d974c:	684d      	ldr	r5, [r1, #4]
   d974e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9750:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9752:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9754:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9756:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9758:	60e3      	str	r3, [r4, #12]
   d975a:	4611      	mov	r1, r2
   d975c:	4620      	mov	r0, r4
   d975e:	f7ff feb4 	bl	d94ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9762:	4620      	mov	r0, r4
   d9764:	bd38      	pop	{r3, r4, r5, pc}
   d9766:	bf00      	nop
   d9768:	000de240 	.word	0x000de240

000d976c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d976c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d976e:	2500      	movs	r5, #0
   d9770:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d9772:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d9776:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d977a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d977e:	4604      	mov	r4, r0
   d9780:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9782:	b14b      	cbz	r3, d9798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9784:	781a      	ldrb	r2, [r3, #0]
   d9786:	2a01      	cmp	r2, #1
   d9788:	d106      	bne.n	d9798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d978a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d978e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9790:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9792:	6143      	str	r3, [r0, #20]
   d9794:	f7ff fe99 	bl	d94ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9798:	4620      	mov	r0, r4
   d979a:	bd38      	pop	{r3, r4, r5, pc}

000d979c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d979c:	b510      	push	{r4, lr}
    if (!n_) {
   d979e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d97a0:	4604      	mov	r4, r0
    if (!n_) {
   d97a2:	b163      	cbz	r3, d97be <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d97a4:	6880      	ldr	r0, [r0, #8]
   d97a6:	60e0      	str	r0, [r4, #12]
    --n_;
   d97a8:	3b01      	subs	r3, #1
    ++t_;
   d97aa:	3010      	adds	r0, #16
   d97ac:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d97ae:	6120      	str	r0, [r4, #16]
    --n_;
   d97b0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d97b2:	b113      	cbz	r3, d97ba <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d97b4:	f7ff fdfe 	bl	d93b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d97b8:	60a0      	str	r0, [r4, #8]
    return true;
   d97ba:	2001      	movs	r0, #1
   d97bc:	e000      	b.n	d97c0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d97be:	4618      	mov	r0, r3
}
   d97c0:	bd10      	pop	{r4, pc}

000d97c2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d97c2:	b510      	push	{r4, lr}
    write('}');
   d97c4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d97c6:	4604      	mov	r4, r0
    write('}');
   d97c8:	f7ff fe73 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d97cc:	2301      	movs	r3, #1
   d97ce:	7123      	strb	r3, [r4, #4]
}
   d97d0:	4620      	mov	r0, r4
   d97d2:	bd10      	pop	{r4, pc}

000d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   d97d4:	b508      	push	{r3, lr}
    switch (state_) {
   d97d6:	7903      	ldrb	r3, [r0, #4]
   d97d8:	2b01      	cmp	r3, #1
   d97da:	d002      	beq.n	d97e2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d97dc:	2b02      	cmp	r3, #2
   d97de:	d004      	beq.n	d97ea <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   d97e0:	bd08      	pop	{r3, pc}
        write(',');
   d97e2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d97e4:	f7ff fe65 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
}
   d97e8:	e7fa      	b.n	d97e0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d97ea:	213a      	movs	r1, #58	; 0x3a
   d97ec:	e7fa      	b.n	d97e4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d97ee <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d97ee:	b510      	push	{r4, lr}
   d97f0:	4604      	mov	r4, r0
    writeSeparator();
   d97f2:	f7ff ffef 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d97f6:	4620      	mov	r0, r4
   d97f8:	217b      	movs	r1, #123	; 0x7b
   d97fa:	f7ff fe5a 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d97fe:	2300      	movs	r3, #0
   d9800:	7123      	strb	r3, [r4, #4]
}
   d9802:	4620      	mov	r0, r4
   d9804:	bd10      	pop	{r4, pc}
	...

000d9808 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   d9808:	b538      	push	{r3, r4, r5, lr}
   d980a:	4604      	mov	r4, r0
   d980c:	460d      	mov	r5, r1
    writeSeparator();
   d980e:	f7ff ffe1 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   d9812:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   d9814:	689b      	ldr	r3, [r3, #8]
    if (val) {
   d9816:	b13d      	cbz	r5, d9828 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   d9818:	4905      	ldr	r1, [pc, #20]	; (d9830 <_ZN5spark10JSONWriter5valueEb+0x28>)
   d981a:	2204      	movs	r2, #4
        write("false", 5);
   d981c:	4620      	mov	r0, r4
   d981e:	4798      	blx	r3
    state_ = NEXT;
   d9820:	2301      	movs	r3, #1
   d9822:	7123      	strb	r3, [r4, #4]
}
   d9824:	4620      	mov	r0, r4
   d9826:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   d9828:	4902      	ldr	r1, [pc, #8]	; (d9834 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   d982a:	2205      	movs	r2, #5
   d982c:	e7f6      	b.n	d981c <_ZN5spark10JSONWriter5valueEb+0x14>
   d982e:	bf00      	nop
   d9830:	000de0ce 	.word	0x000de0ce
   d9834:	000de0c8 	.word	0x000de0c8

000d9838 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9838:	b513      	push	{r0, r1, r4, lr}
   d983a:	4604      	mov	r4, r0
   d983c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d983e:	f7ff ffc9 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9842:	6823      	ldr	r3, [r4, #0]
   d9844:	9a01      	ldr	r2, [sp, #4]
   d9846:	68db      	ldr	r3, [r3, #12]
   d9848:	4903      	ldr	r1, [pc, #12]	; (d9858 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d984a:	4620      	mov	r0, r4
   d984c:	4798      	blx	r3
    state_ = NEXT;
   d984e:	2301      	movs	r3, #1
}
   d9850:	4620      	mov	r0, r4
    state_ = NEXT;
   d9852:	7123      	strb	r3, [r4, #4]
}
   d9854:	b002      	add	sp, #8
   d9856:	bd10      	pop	{r4, pc}
   d9858:	000ddf74 	.word	0x000ddf74

000d985c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   d985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d985e:	4604      	mov	r4, r0
   d9860:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   d9864:	f7ff ffb6 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   d9868:	6823      	ldr	r3, [r4, #0]
   d986a:	4905      	ldr	r1, [pc, #20]	; (d9880 <_ZN5spark10JSONWriter5valueEd+0x24>)
   d986c:	68dd      	ldr	r5, [r3, #12]
   d986e:	4620      	mov	r0, r4
   d9870:	463b      	mov	r3, r7
   d9872:	4632      	mov	r2, r6
   d9874:	47a8      	blx	r5
    state_ = NEXT;
   d9876:	2301      	movs	r3, #1
   d9878:	7123      	strb	r3, [r4, #4]
}
   d987a:	4620      	mov	r0, r4
   d987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d987e:	bf00      	nop
   d9880:	000de0d3 	.word	0x000de0d3

000d9884 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9888:	460d      	mov	r5, r1
   d988a:	4617      	mov	r7, r2
    write('"');
   d988c:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   d988e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d9930 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9892:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9894:	442f      	add	r7, r5
    write('"');
   d9896:	f7ff fe0c 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d989a:	4629      	mov	r1, r5
    while (s != end) {
   d989c:	42bd      	cmp	r5, r7
   d989e:	462a      	mov	r2, r5
   d98a0:	d038      	beq.n	d9914 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d98a2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d98a6:	2e22      	cmp	r6, #34	; 0x22
   d98a8:	d003      	beq.n	d98b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d98aa:	2e5c      	cmp	r6, #92	; 0x5c
   d98ac:	d001      	beq.n	d98b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d98ae:	2e1f      	cmp	r6, #31
   d98b0:	d8f4      	bhi.n	d989c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d98b2:	6823      	ldr	r3, [r4, #0]
   d98b4:	1a52      	subs	r2, r2, r1
   d98b6:	689b      	ldr	r3, [r3, #8]
   d98b8:	4620      	mov	r0, r4
   d98ba:	4798      	blx	r3
            write('\\');
   d98bc:	215c      	movs	r1, #92	; 0x5c
   d98be:	4620      	mov	r0, r4
   d98c0:	f7ff fdf7 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d98c4:	2e0d      	cmp	r6, #13
   d98c6:	d80a      	bhi.n	d98de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d98c8:	2e07      	cmp	r6, #7
   d98ca:	d91c      	bls.n	d9906 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d98cc:	f1a6 0308 	sub.w	r3, r6, #8
   d98d0:	2b05      	cmp	r3, #5
   d98d2:	d818      	bhi.n	d9906 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d98d4:	e8df f003 	tbb	[pc, r3]
   d98d8:	17110f0d 	.word	0x17110f0d
   d98dc:	1513      	.short	0x1513
   d98de:	2e22      	cmp	r6, #34	; 0x22
   d98e0:	d001      	beq.n	d98e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d98e2:	2e5c      	cmp	r6, #92	; 0x5c
   d98e4:	d10f      	bne.n	d9906 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d98e6:	4631      	mov	r1, r6
                write('b');
   d98e8:	4620      	mov	r0, r4
   d98ea:	f7ff fde2 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   d98ee:	4629      	mov	r1, r5
    while (s != end) {
   d98f0:	e7d4      	b.n	d989c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d98f2:	2162      	movs	r1, #98	; 0x62
   d98f4:	e7f8      	b.n	d98e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d98f6:	2174      	movs	r1, #116	; 0x74
   d98f8:	e7f6      	b.n	d98e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d98fa:	216e      	movs	r1, #110	; 0x6e
   d98fc:	e7f4      	b.n	d98e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d98fe:	2166      	movs	r1, #102	; 0x66
   d9900:	e7f2      	b.n	d98e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d9902:	2172      	movs	r1, #114	; 0x72
   d9904:	e7f0      	b.n	d98e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9906:	6823      	ldr	r3, [r4, #0]
   d9908:	4632      	mov	r2, r6
   d990a:	68db      	ldr	r3, [r3, #12]
   d990c:	4641      	mov	r1, r8
   d990e:	4620      	mov	r0, r4
   d9910:	4798      	blx	r3
                break;
   d9912:	e7ec      	b.n	d98ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   d9914:	428d      	cmp	r5, r1
   d9916:	d004      	beq.n	d9922 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9918:	6823      	ldr	r3, [r4, #0]
   d991a:	1a6a      	subs	r2, r5, r1
   d991c:	689b      	ldr	r3, [r3, #8]
   d991e:	4620      	mov	r0, r4
   d9920:	4798      	blx	r3
    write('"');
   d9922:	2122      	movs	r1, #34	; 0x22
   d9924:	4620      	mov	r0, r4
   d9926:	f7ff fdc4 	bl	d94b2 <_ZN5spark10JSONWriter5writeEc>
}
   d992a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d992e:	bf00      	nop
   d9930:	000de0d6 	.word	0x000de0d6

000d9934 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9934:	b513      	push	{r0, r1, r4, lr}
   d9936:	4604      	mov	r4, r0
   d9938:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d993c:	f7ff ff4a 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9940:	4620      	mov	r0, r4
   d9942:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9946:	f7ff ff9d 	bl	d9884 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d994a:	2302      	movs	r3, #2
}
   d994c:	4620      	mov	r0, r4
    state_ = VALUE;
   d994e:	7123      	strb	r3, [r4, #4]
}
   d9950:	b002      	add	sp, #8
   d9952:	bd10      	pop	{r4, pc}

000d9954 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9954:	b513      	push	{r0, r1, r4, lr}
   d9956:	4604      	mov	r4, r0
   d9958:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d995c:	f7ff ff3a 	bl	d97d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9960:	4620      	mov	r0, r4
   d9962:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9966:	f7ff ff8d 	bl	d9884 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d996a:	2301      	movs	r3, #1
}
   d996c:	4620      	mov	r0, r4
    state_ = NEXT;
   d996e:	7123      	strb	r3, [r4, #4]
}
   d9970:	b002      	add	sp, #8
   d9972:	bd10      	pop	{r4, pc}

000d9974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9974:	b538      	push	{r3, r4, r5, lr}
   d9976:	2300      	movs	r3, #0
   d9978:	4604      	mov	r4, r0
   d997a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d997c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d997e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9980:	f7fa fb89 	bl	d4096 <_Znwj>
   d9984:	b128      	cbz	r0, d9992 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d9986:	2301      	movs	r3, #1
   d9988:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d998c:	4b02      	ldr	r3, [pc, #8]	; (d9998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d998e:	6003      	str	r3, [r0, #0]
   d9990:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9992:	6020      	str	r0, [r4, #0]
	}
   d9994:	4620      	mov	r0, r4
   d9996:	bd38      	pop	{r3, r4, r5, pc}
   d9998:	000de0e4 	.word	0x000de0e4

000d999c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d999c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d999e:	4604      	mov	r4, r0
   d99a0:	b087      	sub	sp, #28
   d99a2:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d99a4:	200c      	movs	r0, #12
   d99a6:	4927      	ldr	r1, [pc, #156]	; (d9a44 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d99a8:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d99aa:	f000 ff36 	bl	da81a <_ZnwjRKSt9nothrow_t>
   d99ae:	4601      	mov	r1, r0
   d99b0:	b118      	cbz	r0, d99ba <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d99b2:	2300      	movs	r3, #0
   d99b4:	e9c0 3300 	strd	r3, r3, [r0]
   d99b8:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d99ba:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d99bc:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d99be:	f7ff ffd9 	bl	d9974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d99c2:	9a02      	ldr	r2, [sp, #8]
   d99c4:	b942      	cbnz	r2, d99d8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d99c6:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d99ca:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d99cc:	a803      	add	r0, sp, #12
   d99ce:	f7fc f9c3 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d99d2:	4620      	mov	r0, r4
   d99d4:	b007      	add	sp, #28
   d99d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d99d8:	2300      	movs	r3, #0
   d99da:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d99dc:	4629      	mov	r1, r5
   d99de:	ab01      	add	r3, sp, #4
   d99e0:	4630      	mov	r0, r6
   d99e2:	f7ff fdbf 	bl	d9564 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d99e6:	b918      	cbnz	r0, d99f0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d99e8:	e9c4 0000 	strd	r0, r0, [r4]
   d99ec:	60a0      	str	r0, [r4, #8]
}
   d99ee:	e7ed      	b.n	d99cc <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d99f0:	4914      	ldr	r1, [pc, #80]	; (d9a44 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d99f2:	9f02      	ldr	r7, [sp, #8]
   d99f4:	1c68      	adds	r0, r5, #1
   d99f6:	f000 ff12 	bl	da81e <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d99fa:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d99fc:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d99fe:	6858      	ldr	r0, [r3, #4]
   d9a00:	2800      	cmp	r0, #0
   d9a02:	d0f1      	beq.n	d99e8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d9a04:	462a      	mov	r2, r5
   d9a06:	4631      	mov	r1, r6
   d9a08:	f001 fd7a 	bl	db500 <memcpy>
   d9a0c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9a0e:	9901      	ldr	r1, [sp, #4]
   d9a10:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d9a12:	2201      	movs	r2, #1
   d9a14:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9a16:	685a      	ldr	r2, [r3, #4]
   d9a18:	f7ff fe68 	bl	d96ec <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d9a1c:	2800      	cmp	r0, #0
   d9a1e:	d0e3      	beq.n	d99e8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d9a20:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d9a22:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a24:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d9a26:	9b03      	ldr	r3, [sp, #12]
   d9a28:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d9a2a:	b113      	cbz	r3, d9a32 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d9a2c:	685a      	ldr	r2, [r3, #4]
   d9a2e:	3201      	adds	r2, #1
   d9a30:	605a      	str	r2, [r3, #4]
   d9a32:	aa04      	add	r2, sp, #16
   d9a34:	4620      	mov	r0, r4
   d9a36:	f7ff fd5f 	bl	d94f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9a3a:	a805      	add	r0, sp, #20
   d9a3c:	f7fc f98c 	bl	d5d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a40:	e7c4      	b.n	d99cc <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d9a42:	bf00      	nop
   d9a44:	000de218 	.word	0x000de218

000d9a48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9a48:	4b01      	ldr	r3, [pc, #4]	; (d9a50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9a4a:	4a02      	ldr	r2, [pc, #8]	; (d9a54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9a4c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9a4e:	4770      	bx	lr
   d9a50:	2003e618 	.word	0x2003e618
   d9a54:	000de110 	.word	0x000de110

000d9a58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9a58:	2300      	movs	r3, #0
   d9a5a:	6840      	ldr	r0, [r0, #4]
   d9a5c:	461a      	mov	r2, r3
   d9a5e:	f7fe bf69 	b.w	d8934 <network_connect>

000d9a62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9a62:	6840      	ldr	r0, [r0, #4]
   d9a64:	2200      	movs	r2, #0
   d9a66:	2102      	movs	r1, #2
   d9a68:	f7fe bf74 	b.w	d8954 <network_disconnect>

000d9a6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9a6c:	2200      	movs	r2, #0
   d9a6e:	6840      	ldr	r0, [r0, #4]
   d9a70:	4611      	mov	r1, r2
   d9a72:	f7fe bf67 	b.w	d8944 <network_connecting>

000d9a76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9a76:	2200      	movs	r2, #0
   d9a78:	6840      	ldr	r0, [r0, #4]
   d9a7a:	4611      	mov	r1, r2
   d9a7c:	f7fe bf72 	b.w	d8964 <network_ready>

000d9a80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9a80:	2300      	movs	r3, #0
   d9a82:	6840      	ldr	r0, [r0, #4]
   d9a84:	461a      	mov	r2, r3
   d9a86:	4619      	mov	r1, r3
   d9a88:	f7fe bf74 	b.w	d8974 <network_on>

000d9a8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9a8c:	2300      	movs	r3, #0
   d9a8e:	6840      	ldr	r0, [r0, #4]
   d9a90:	461a      	mov	r2, r3
   d9a92:	4619      	mov	r1, r3
   d9a94:	f7fe bf76 	b.w	d8984 <network_off>

000d9a98 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9a98:	6840      	ldr	r0, [r0, #4]
   d9a9a:	2100      	movs	r1, #0
   d9a9c:	f7fe bf9a 	b.w	d89d4 <network_is_on>

000d9aa0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9aa0:	6840      	ldr	r0, [r0, #4]
   d9aa2:	2100      	movs	r1, #0
   d9aa4:	f7fe bf9e 	b.w	d89e4 <network_is_off>

000d9aa8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9aa8:	6840      	ldr	r0, [r0, #4]
   d9aaa:	2200      	movs	r2, #0
   d9aac:	f081 0101 	eor.w	r1, r1, #1
   d9ab0:	f7fe bf70 	b.w	d8994 <network_listen>

000d9ab4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9ab4:	6840      	ldr	r0, [r0, #4]
   d9ab6:	2200      	movs	r2, #0
   d9ab8:	f7fe bf7c 	b.w	d89b4 <network_set_listen_timeout>

000d9abc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9abc:	2200      	movs	r2, #0
   d9abe:	6840      	ldr	r0, [r0, #4]
   d9ac0:	4611      	mov	r1, r2
   d9ac2:	f7fe bf7f 	b.w	d89c4 <network_get_listen_timeout>

000d9ac6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9ac6:	2200      	movs	r2, #0
   d9ac8:	6840      	ldr	r0, [r0, #4]
   d9aca:	4611      	mov	r1, r2
   d9acc:	f7fe bf6a 	b.w	d89a4 <network_listening>

000d9ad0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9ad4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9ad6:	b095      	sub	sp, #84	; 0x54
   d9ad8:	4616      	mov	r6, r2
   d9ada:	460d      	mov	r5, r1
   d9adc:	4607      	mov	r7, r0
    IPAddress addr;
   d9ade:	f7ff fc2d 	bl	d933c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9ae2:	4621      	mov	r1, r4
   d9ae4:	2218      	movs	r2, #24
   d9ae6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9ae8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9aea:	f001 fd31 	bl	db550 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9aee:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9af0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9af4:	4621      	mov	r1, r4
   d9af6:	466b      	mov	r3, sp
   d9af8:	aa0c      	add	r2, sp, #48	; 0x30
   d9afa:	4630      	mov	r0, r6
   d9afc:	f7fe fdac 	bl	d8658 <netdb_getaddrinfo>
    if (!r) {
   d9b00:	4604      	mov	r4, r0
   d9b02:	2800      	cmp	r0, #0
   d9b04:	d14c      	bne.n	d9ba0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b06:	4602      	mov	r2, r0
   d9b08:	2101      	movs	r1, #1
   d9b0a:	6868      	ldr	r0, [r5, #4]
   d9b0c:	f7fe ff2a 	bl	d8964 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b10:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b12:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b14:	4622      	mov	r2, r4
   d9b16:	6868      	ldr	r0, [r5, #4]
   d9b18:	f7fe ff24 	bl	d8964 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b1c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b1e:	4681      	mov	r9, r0
        bool ok = false;
   d9b20:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b22:	2e00      	cmp	r6, #0
   d9b24:	d03c      	beq.n	d9ba0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d9b26:	2900      	cmp	r1, #0
   d9b28:	d13a      	bne.n	d9ba0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9b2a:	6873      	ldr	r3, [r6, #4]
   d9b2c:	2b02      	cmp	r3, #2
   d9b2e:	d003      	beq.n	d9b38 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9b30:	2b0a      	cmp	r3, #10
   d9b32:	d011      	beq.n	d9b58 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b34:	69f6      	ldr	r6, [r6, #28]
   d9b36:	e7f4      	b.n	d9b22 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9b38:	f1b8 0f00 	cmp.w	r8, #0
   d9b3c:	d00a      	beq.n	d9b54 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9b3e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d9b40:	a806      	add	r0, sp, #24
   d9b42:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d9b44:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d9b46:	f7ff fc27 	bl	d9398 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d9b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b4c:	1d3c      	adds	r4, r7, #4
   d9b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b50:	682b      	ldr	r3, [r5, #0]
   d9b52:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d9b54:	4641      	mov	r1, r8
   d9b56:	e7ed      	b.n	d9b34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9b58:	f1b9 0f00 	cmp.w	r9, #0
   d9b5c:	d101      	bne.n	d9b62 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9b5e:	4649      	mov	r1, r9
   d9b60:	e7e8      	b.n	d9b34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9b62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9b64:	2210      	movs	r2, #16
   d9b66:	a801      	add	r0, sp, #4
   d9b68:	f001 fcf2 	bl	db550 <memset>
                    a.v = 6;
   d9b6c:	2306      	movs	r3, #6
   d9b6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9b72:	ad01      	add	r5, sp, #4
   d9b74:	f104 0308 	add.w	r3, r4, #8
   d9b78:	3418      	adds	r4, #24
   d9b7a:	6818      	ldr	r0, [r3, #0]
   d9b7c:	6859      	ldr	r1, [r3, #4]
   d9b7e:	462a      	mov	r2, r5
   d9b80:	c203      	stmia	r2!, {r0, r1}
   d9b82:	3308      	adds	r3, #8
   d9b84:	42a3      	cmp	r3, r4
   d9b86:	4615      	mov	r5, r2
   d9b88:	d1f7      	bne.n	d9b7a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9b8a:	a901      	add	r1, sp, #4
   d9b8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9b8e:	ad07      	add	r5, sp, #28
   d9b90:	f7ff fbe2 	bl	d9358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b96:	1d3c      	adds	r4, r7, #4
   d9b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b9a:	682b      	ldr	r3, [r5, #0]
   d9b9c:	7023      	strb	r3, [r4, #0]
   d9b9e:	e7de      	b.n	d9b5e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9ba0:	9800      	ldr	r0, [sp, #0]
   d9ba2:	f7fe fd51 	bl	d8648 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9ba6:	4638      	mov	r0, r7
   d9ba8:	b015      	add	sp, #84	; 0x54
   d9baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9bb0:	4b02      	ldr	r3, [pc, #8]	; (d9bbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9bb2:	4a03      	ldr	r2, [pc, #12]	; (d9bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9bb4:	601a      	str	r2, [r3, #0]
   d9bb6:	2200      	movs	r2, #0
   d9bb8:	605a      	str	r2, [r3, #4]

} // spark
   d9bba:	4770      	bx	lr
   d9bbc:	2003e61c 	.word	0x2003e61c
   d9bc0:	000de11c 	.word	0x000de11c

000d9bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9bc6:	4606      	mov	r6, r0
   d9bc8:	460d      	mov	r5, r1
  size_t n = 0;
   d9bca:	188f      	adds	r7, r1, r2
   d9bcc:	2400      	movs	r4, #0
  while (size--) {
   d9bce:	42bd      	cmp	r5, r7
   d9bd0:	d00c      	beq.n	d9bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9bd2:	6833      	ldr	r3, [r6, #0]
   d9bd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9bd8:	689b      	ldr	r3, [r3, #8]
   d9bda:	4630      	mov	r0, r6
   d9bdc:	4798      	blx	r3
     if (chunk>=0)
   d9bde:	1e03      	subs	r3, r0, #0
   d9be0:	db01      	blt.n	d9be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9be2:	441c      	add	r4, r3
  while (size--) {
   d9be4:	e7f3      	b.n	d9bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9be6:	2c00      	cmp	r4, #0
   d9be8:	bf08      	it	eq
   d9bea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9bec:	4620      	mov	r0, r4
   d9bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9bf0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9bf0:	b513      	push	{r0, r1, r4, lr}
   d9bf2:	4604      	mov	r4, r0
    }
   d9bf4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9bf6:	b159      	cbz	r1, d9c10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9bf8:	9101      	str	r1, [sp, #4]
   d9bfa:	f001 fd04 	bl	db606 <strlen>
   d9bfe:	6823      	ldr	r3, [r4, #0]
   d9c00:	9901      	ldr	r1, [sp, #4]
   d9c02:	68db      	ldr	r3, [r3, #12]
   d9c04:	4602      	mov	r2, r0
   d9c06:	4620      	mov	r0, r4
    }
   d9c08:	b002      	add	sp, #8
   d9c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9c0e:	4718      	bx	r3
    }
   d9c10:	b002      	add	sp, #8
   d9c12:	bd10      	pop	{r4, pc}

000d9c14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9c14:	6803      	ldr	r3, [r0, #0]
   d9c16:	689b      	ldr	r3, [r3, #8]
   d9c18:	4718      	bx	r3

000d9c1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9c1a:	b530      	push	{r4, r5, lr}
   d9c1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9c1e:	2300      	movs	r3, #0
   d9c20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9c24:	2a01      	cmp	r2, #1
   d9c26:	bf98      	it	ls
   d9c28:	220a      	movls	r2, #10
   d9c2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9c2c:	460d      	mov	r5, r1
   d9c2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9c32:	fb01 5312 	mls	r3, r1, r2, r5
   d9c36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9c3a:	2b09      	cmp	r3, #9
   d9c3c:	bf94      	ite	ls
   d9c3e:	3330      	addls	r3, #48	; 0x30
   d9c40:	3337      	addhi	r3, #55	; 0x37
   d9c42:	b2db      	uxtb	r3, r3
  } while(n);
   d9c44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9c46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9c4a:	d9ef      	bls.n	d9c2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9c4c:	4621      	mov	r1, r4
   d9c4e:	f7ff ffcf 	bl	d9bf0 <_ZN5Print5writeEPKc>
}
   d9c52:	b00b      	add	sp, #44	; 0x2c
   d9c54:	bd30      	pop	{r4, r5, pc}

000d9c56 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9c56:	b510      	push	{r4, lr}
   d9c58:	4604      	mov	r4, r0
   d9c5a:	f7fa fb16 	bl	d428a <_ZNSt14_Function_baseD1Ev>
   d9c5e:	4620      	mov	r0, r4
   d9c60:	bd10      	pop	{r4, pc}
	...

000d9c64 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9c64:	4803      	ldr	r0, [pc, #12]	; (d9c74 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9c66:	4a04      	ldr	r2, [pc, #16]	; (d9c78 <_GLOBAL__sub_I_RGB+0x14>)
   d9c68:	4904      	ldr	r1, [pc, #16]	; (d9c7c <_GLOBAL__sub_I_RGB+0x18>)
   d9c6a:	2300      	movs	r3, #0
   d9c6c:	6083      	str	r3, [r0, #8]
   d9c6e:	f000 bdcd 	b.w	da80c <__aeabi_atexit>
   d9c72:	bf00      	nop
   d9c74:	2003e624 	.word	0x2003e624
   d9c78:	2003dee0 	.word	0x2003dee0
   d9c7c:	000d9c57 	.word	0x000d9c57

000d9c80 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9c80:	b510      	push	{r4, lr}
   d9c82:	4604      	mov	r4, r0
   d9c84:	4608      	mov	r0, r1
{
    _spi = spi;
   d9c86:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9c88:	f7fe fcee 	bl	d8668 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9c8c:	2300      	movs	r3, #0
   d9c8e:	6063      	str	r3, [r4, #4]
}
   d9c90:	4620      	mov	r0, r4
   d9c92:	bd10      	pop	{r4, pc}

000d9c94 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9c94:	b510      	push	{r4, lr}
   d9c96:	4604      	mov	r4, r0
{
	free(buffer);
   d9c98:	6800      	ldr	r0, [r0, #0]
   d9c9a:	f7fe feb3 	bl	d8a04 <free>
}
   d9c9e:	4620      	mov	r0, r4
   d9ca0:	bd10      	pop	{r4, pc}

000d9ca2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9ca2:	b510      	push	{r4, lr}
   d9ca4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9ca6:	6800      	ldr	r0, [r0, #0]
   d9ca8:	b108      	cbz	r0, d9cae <_ZN6String10invalidateEv+0xc>
   d9caa:	f7fe feab 	bl	d8a04 <free>
	buffer = NULL;
   d9cae:	2300      	movs	r3, #0
	capacity = len = 0;
   d9cb0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9cb4:	6023      	str	r3, [r4, #0]
}
   d9cb6:	bd10      	pop	{r4, pc}

000d9cb8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9cb8:	b538      	push	{r3, r4, r5, lr}
   d9cba:	4604      	mov	r4, r0
   d9cbc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9cbe:	6800      	ldr	r0, [r0, #0]
   d9cc0:	3101      	adds	r1, #1
   d9cc2:	f7fe fea7 	bl	d8a14 <realloc>
	if (newbuffer) {
   d9cc6:	b110      	cbz	r0, d9cce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9cc8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9ccc:	2001      	movs	r0, #1
	}
	return 0;
}
   d9cce:	bd38      	pop	{r3, r4, r5, pc}

000d9cd0 <_ZN6String7reserveEj>:
{
   d9cd0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9cd2:	6803      	ldr	r3, [r0, #0]
{
   d9cd4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9cd6:	b123      	cbz	r3, d9ce2 <_ZN6String7reserveEj+0x12>
   d9cd8:	6843      	ldr	r3, [r0, #4]
   d9cda:	428b      	cmp	r3, r1
   d9cdc:	d301      	bcc.n	d9ce2 <_ZN6String7reserveEj+0x12>
   d9cde:	2001      	movs	r0, #1
}
   d9ce0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9ce2:	4620      	mov	r0, r4
   d9ce4:	f7ff ffe8 	bl	d9cb8 <_ZN6String12changeBufferEj>
   d9ce8:	2800      	cmp	r0, #0
   d9cea:	d0f9      	beq.n	d9ce0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9cec:	68a3      	ldr	r3, [r4, #8]
   d9cee:	2b00      	cmp	r3, #0
   d9cf0:	d1f5      	bne.n	d9cde <_ZN6String7reserveEj+0xe>
   d9cf2:	6822      	ldr	r2, [r4, #0]
   d9cf4:	7013      	strb	r3, [r2, #0]
   d9cf6:	e7f2      	b.n	d9cde <_ZN6String7reserveEj+0xe>

000d9cf8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9cfa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9cfc:	4611      	mov	r1, r2
   d9cfe:	9201      	str	r2, [sp, #4]
{
   d9d00:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9d02:	f7ff ffe5 	bl	d9cd0 <_ZN6String7reserveEj>
   d9d06:	9a01      	ldr	r2, [sp, #4]
   d9d08:	b928      	cbnz	r0, d9d16 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9d0a:	4620      	mov	r0, r4
   d9d0c:	f7ff ffc9 	bl	d9ca2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9d10:	4620      	mov	r0, r4
   d9d12:	b003      	add	sp, #12
   d9d14:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9d16:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9d18:	4629      	mov	r1, r5
   d9d1a:	6820      	ldr	r0, [r4, #0]
   d9d1c:	f001 fbf0 	bl	db500 <memcpy>
	buffer[len] = 0;
   d9d20:	6822      	ldr	r2, [r4, #0]
   d9d22:	68a3      	ldr	r3, [r4, #8]
   d9d24:	2100      	movs	r1, #0
   d9d26:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9d28:	e7f2      	b.n	d9d10 <_ZN6String4copyEPKcj+0x18>

000d9d2a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9d2a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9d2c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9d2e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9d32:	4604      	mov	r4, r0
	len = 0;
   d9d34:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9d36:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9d38:	b141      	cbz	r1, d9d4c <_ZN6StringC1EPKc+0x22>
   d9d3a:	4608      	mov	r0, r1
   d9d3c:	9101      	str	r1, [sp, #4]
   d9d3e:	f001 fc62 	bl	db606 <strlen>
   d9d42:	9901      	ldr	r1, [sp, #4]
   d9d44:	4602      	mov	r2, r0
   d9d46:	4620      	mov	r0, r4
   d9d48:	f7ff ffd6 	bl	d9cf8 <_ZN6String4copyEPKcj>
}
   d9d4c:	4620      	mov	r0, r4
   d9d4e:	b002      	add	sp, #8
   d9d50:	bd10      	pop	{r4, pc}

000d9d52 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9d52:	4288      	cmp	r0, r1
{
   d9d54:	b510      	push	{r4, lr}
   d9d56:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9d58:	d005      	beq.n	d9d66 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9d5a:	680b      	ldr	r3, [r1, #0]
   d9d5c:	b12b      	cbz	r3, d9d6a <_ZN6StringaSERKS_+0x18>
   d9d5e:	688a      	ldr	r2, [r1, #8]
   d9d60:	4619      	mov	r1, r3
   d9d62:	f7ff ffc9 	bl	d9cf8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9d66:	4620      	mov	r0, r4
   d9d68:	bd10      	pop	{r4, pc}
	else invalidate();
   d9d6a:	f7ff ff9a 	bl	d9ca2 <_ZN6String10invalidateEv>
   d9d6e:	e7fa      	b.n	d9d66 <_ZN6StringaSERKS_+0x14>

000d9d70 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9d70:	b510      	push	{r4, lr}
	buffer = NULL;
   d9d72:	2300      	movs	r3, #0
String::String(const String &value)
   d9d74:	4604      	mov	r4, r0
	capacity = 0;
   d9d76:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9d7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9d7c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9d7e:	f7ff ffe8 	bl	d9d52 <_ZN6StringaSERKS_>
}
   d9d82:	4620      	mov	r0, r4
   d9d84:	bd10      	pop	{r4, pc}

000d9d86 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9d86:	b513      	push	{r0, r1, r4, lr}
   d9d88:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9d8a:	b159      	cbz	r1, d9da4 <_ZN6StringaSEPKc+0x1e>
   d9d8c:	4608      	mov	r0, r1
   d9d8e:	9101      	str	r1, [sp, #4]
   d9d90:	f001 fc39 	bl	db606 <strlen>
   d9d94:	9901      	ldr	r1, [sp, #4]
   d9d96:	4602      	mov	r2, r0
   d9d98:	4620      	mov	r0, r4
   d9d9a:	f7ff ffad 	bl	d9cf8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9d9e:	4620      	mov	r0, r4
   d9da0:	b002      	add	sp, #8
   d9da2:	bd10      	pop	{r4, pc}
	else invalidate();
   d9da4:	f7ff ff7d 	bl	d9ca2 <_ZN6String10invalidateEv>
   d9da8:	e7f9      	b.n	d9d9e <_ZN6StringaSEPKc+0x18>

000d9daa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d9daa:	b510      	push	{r4, lr}
   d9dac:	4604      	mov	r4, r0
   d9dae:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d9db0:	2300      	movs	r3, #0
	capacity = 0;
   d9db2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9db6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9db8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d9dba:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d9dbc:	a901      	add	r1, sp, #4
   d9dbe:	f000 fba5 	bl	da50c <itoa>
	*this = buf;
   d9dc2:	a901      	add	r1, sp, #4
   d9dc4:	4620      	mov	r0, r4
   d9dc6:	f7ff ffde 	bl	d9d86 <_ZN6StringaSEPKc>
}
   d9dca:	4620      	mov	r0, r4
   d9dcc:	b00a      	add	sp, #40	; 0x28
   d9dce:	bd10      	pop	{r4, pc}

000d9dd0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9dd0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9dd2:	6882      	ldr	r2, [r0, #8]
   d9dd4:	b93a      	cbnz	r2, d9de6 <_ZNK6String6equalsEPKc+0x16>
   d9dd6:	b121      	cbz	r1, d9de2 <_ZNK6String6equalsEPKc+0x12>
   d9dd8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9dda:	fab0 f080 	clz	r0, r0
   d9dde:	0940      	lsrs	r0, r0, #5
   d9de0:	e000      	b.n	d9de4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9de2:	2001      	movs	r0, #1
}
   d9de4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9de6:	6800      	ldr	r0, [r0, #0]
   d9de8:	b909      	cbnz	r1, d9dee <_ZNK6String6equalsEPKc+0x1e>
   d9dea:	7800      	ldrb	r0, [r0, #0]
   d9dec:	e7f5      	b.n	d9dda <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d9dee:	f001 fbdb 	bl	db5a8 <strcmp>
   d9df2:	e7f2      	b.n	d9dda <_ZNK6String6equalsEPKc+0xa>

000d9df4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9df4:	b558      	push	{r3, r4, r6, lr}
   d9df6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9df8:	b12a      	cbz	r2, d9e06 <_ZNK6String8getBytesEPhjj+0x12>
   d9dfa:	b121      	cbz	r1, d9e06 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d9dfc:	6884      	ldr	r4, [r0, #8]
   d9dfe:	42a3      	cmp	r3, r4
   d9e00:	d302      	bcc.n	d9e08 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9e02:	2300      	movs	r3, #0
   d9e04:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9e06:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9e08:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9e0a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d9e0c:	6801      	ldr	r1, [r0, #0]
   d9e0e:	4294      	cmp	r4, r2
   d9e10:	bf28      	it	cs
   d9e12:	4614      	movcs	r4, r2
   d9e14:	4419      	add	r1, r3
   d9e16:	4622      	mov	r2, r4
   d9e18:	4630      	mov	r0, r6
   d9e1a:	f001 fc0e 	bl	db63a <strncpy>
	buf[n] = 0;
   d9e1e:	2300      	movs	r3, #0
   d9e20:	5533      	strb	r3, [r6, r4]
   d9e22:	e7f0      	b.n	d9e06 <_ZNK6String8getBytesEPhjj+0x12>

000d9e24 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d9e24:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d9e26:	6800      	ldr	r0, [r0, #0]
   d9e28:	b140      	cbz	r0, d9e3c <_ZNK6String7toFloatEv+0x18>
   d9e2a:	f001 fb41 	bl	db4b0 <atof>
   d9e2e:	ec51 0b10 	vmov	r0, r1, d0
   d9e32:	f001 faa9 	bl	db388 <__aeabi_d2f>
   d9e36:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d9e3a:	bd08      	pop	{r3, pc}
	return 0;
   d9e3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9e44 <_ZNK6String7toFloatEv+0x20>
   d9e40:	e7fb      	b.n	d9e3a <_ZNK6String7toFloatEv+0x16>
   d9e42:	bf00      	nop
   d9e44:	00000000 	.word	0x00000000

000d9e48 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9e48:	b40e      	push	{r1, r2, r3}
   d9e4a:	b570      	push	{r4, r5, r6, lr}
   d9e4c:	b087      	sub	sp, #28
   d9e4e:	ad0b      	add	r5, sp, #44	; 0x2c
   d9e50:	4604      	mov	r4, r0
   d9e52:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9e56:	9201      	str	r2, [sp, #4]
   d9e58:	462b      	mov	r3, r5
   d9e5a:	2105      	movs	r1, #5
   d9e5c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d9e5e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9e60:	f7fe fdf0 	bl	d8a44 <vsnprintf>
    va_end(marker);

    String result;
   d9e64:	490b      	ldr	r1, [pc, #44]	; (d9e94 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9e66:	4606      	mov	r6, r0
    String result;
   d9e68:	4620      	mov	r0, r4
   d9e6a:	f7ff ff5e 	bl	d9d2a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d9e6e:	4631      	mov	r1, r6
   d9e70:	4620      	mov	r0, r4
   d9e72:	f7ff ff2d 	bl	d9cd0 <_ZN6String7reserveEj>
    if (result.buffer) {
   d9e76:	6820      	ldr	r0, [r4, #0]
   d9e78:	b130      	cbz	r0, d9e88 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9e7a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d9e7c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9e7e:	462b      	mov	r3, r5
   d9e80:	1c71      	adds	r1, r6, #1
   d9e82:	f7fe fddf 	bl	d8a44 <vsnprintf>
        va_end(marker);
        result.len = n;
   d9e86:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d9e88:	4620      	mov	r0, r4
   d9e8a:	b007      	add	sp, #28
   d9e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9e90:	b003      	add	sp, #12
   d9e92:	4770      	bx	lr
   d9e94:	000de240 	.word	0x000de240

000d9e98 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d9e98:	b507      	push	{r0, r1, r2, lr}
   d9e9a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9e9c:	2100      	movs	r1, #0
{
   d9e9e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9ea0:	9100      	str	r1, [sp, #0]
   d9ea2:	2001      	movs	r0, #1
   d9ea4:	218c      	movs	r1, #140	; 0x8c
   d9ea6:	f7fe fcd3 	bl	d8850 <system_reset>
}
   d9eaa:	b003      	add	sp, #12
   d9eac:	f85d fb04 	ldr.w	pc, [sp], #4

000d9eb0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d9eb0:	4601      	mov	r1, r0
    reset(0, flags);
   d9eb2:	2000      	movs	r0, #0
   d9eb4:	f7ff bff0 	b.w	d9e98 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9eb8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9eb8:	2000      	movs	r0, #0
   d9eba:	f7ff bff9 	b.w	d9eb0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9ec0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9ec0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9ec2:	4b09      	ldr	r3, [pc, #36]	; (d9ee8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9ec4:	4c09      	ldr	r4, [pc, #36]	; (d9eec <_GLOBAL__sub_I_System+0x2c>)
   d9ec6:	2202      	movs	r2, #2
   d9ec8:	2000      	movs	r0, #0
   d9eca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9ecc:	4b08      	ldr	r3, [pc, #32]	; (d9ef0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9ece:	6020      	str	r0, [r4, #0]
   d9ed0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9ed2:	71a0      	strb	r0, [r4, #6]
   d9ed4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9ed6:	f7fe fc6f 	bl	d87b8 <set_system_mode>
SystemClass System;
   d9eda:	4620      	mov	r0, r4
   d9edc:	4a05      	ldr	r2, [pc, #20]	; (d9ef4 <_GLOBAL__sub_I_System+0x34>)
   d9ede:	4906      	ldr	r1, [pc, #24]	; (d9ef8 <_GLOBAL__sub_I_System+0x38>)
   d9ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9ee4:	f000 bc92 	b.w	da80c <__aeabi_atexit>
   d9ee8:	2003e640 	.word	0x2003e640
   d9eec:	2003e634 	.word	0x2003e634
   d9ef0:	ffff0000 	.word	0xffff0000
   d9ef4:	2003dee0 	.word	0x2003dee0
   d9ef8:	000d4273 	.word	0x000d4273

000d9efc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9f00:	4a15      	ldr	r2, [pc, #84]	; (d9f58 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9f02:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9f64 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9f06:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9f0a:	18c0      	adds	r0, r0, r3
   d9f0c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9f10:	4a12      	ldr	r2, [pc, #72]	; (d9f5c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9f12:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9f16:	18c6      	adds	r6, r0, r3
   d9f18:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9f1c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9f20:	42bb      	cmp	r3, r7
   d9f22:	bf08      	it	eq
   d9f24:	42b2      	cmpeq	r2, r6
{
   d9f26:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9f28:	d013      	beq.n	d9f52 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d9f2a:	a903      	add	r1, sp, #12
   d9f2c:	4668      	mov	r0, sp
   d9f2e:	e9cd 6700 	strd	r6, r7, [sp]
   d9f32:	f7fe fdb7 	bl	d8aa4 <localtime_r>
	calendar_time.tm_year += 1900;
   d9f36:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9f38:	4d09      	ldr	r5, [pc, #36]	; (d9f60 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d9f3a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9f3e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9f40:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9f4a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9f4e:	6823      	ldr	r3, [r4, #0]
   d9f50:	602b      	str	r3, [r5, #0]
    }
}
   d9f52:	b00c      	add	sp, #48	; 0x30
   d9f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9f58:	2003e678 	.word	0x2003e678
   d9f5c:	2003e670 	.word	0x2003e670
   d9f60:	2003e64c 	.word	0x2003e64c
   d9f64:	2003e680 	.word	0x2003e680

000d9f68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9f68:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9f6a:	2000      	movs	r0, #0
   d9f6c:	f7fe fcc2 	bl	d88f4 <spark_sync_time_pending>
   d9f70:	b128      	cbz	r0, d9f7e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9f72:	f7fe fc97 	bl	d88a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9f76:	f080 0001 	eor.w	r0, r0, #1
   d9f7a:	b2c0      	uxtb	r0, r0
    }
   d9f7c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9f7e:	2001      	movs	r0, #1
   d9f80:	e7fc      	b.n	d9f7c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d9f82 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9f84:	4602      	mov	r2, r0
   d9f86:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9f88:	4668      	mov	r0, sp
    struct timeval tv = {
   d9f8a:	2100      	movs	r1, #0
    };
   d9f8c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d9f90:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9f94:	f7fe faa8 	bl	d84e8 <hal_rtc_set_time>
   d9f98:	4602      	mov	r2, r0
   d9f9a:	b910      	cbnz	r0, d9fa2 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9f9c:	4601      	mov	r1, r0
   d9f9e:	f7fe fc3b 	bl	d8818 <system_notify_time_changed>
    }
}
   d9fa2:	b005      	add	sp, #20
   d9fa4:	f85d fb04 	ldr.w	pc, [sp], #4

000d9fa8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9fa8:	b530      	push	{r4, r5, lr}
   d9faa:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9fac:	4818      	ldr	r0, [pc, #96]	; (da010 <_ZN9TimeClass7timeStrEx+0x68>)
   d9fae:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9fb2:	1852      	adds	r2, r2, r1
   d9fb4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9fb8:	4816      	ldr	r0, [pc, #88]	; (da014 <_ZN9TimeClass7timeStrEx+0x6c>)
   d9fba:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9fbe:	1852      	adds	r2, r2, r1
{
   d9fc0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9fc2:	eb40 0303 	adc.w	r3, r0, r3
   d9fc6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9fca:	2224      	movs	r2, #36	; 0x24
   d9fcc:	eb0d 0002 	add.w	r0, sp, r2
   d9fd0:	2100      	movs	r1, #0
   d9fd2:	f001 fabd 	bl	db550 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9fd6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9fd8:	a909      	add	r1, sp, #36	; 0x24
   d9fda:	4668      	mov	r0, sp
   d9fdc:	f7fe fd62 	bl	d8aa4 <localtime_r>
    char ascstr[26] = {};
   d9fe0:	2216      	movs	r2, #22
   d9fe2:	4629      	mov	r1, r5
   d9fe4:	a803      	add	r0, sp, #12
   d9fe6:	9502      	str	r5, [sp, #8]
   d9fe8:	f001 fab2 	bl	db550 <memset>
    asctime_r(&calendar_time, ascstr);
   d9fec:	a902      	add	r1, sp, #8
   d9fee:	a809      	add	r0, sp, #36	; 0x24
   d9ff0:	f001 fa38 	bl	db464 <asctime_r>
    int len = strlen(ascstr);
   d9ff4:	a802      	add	r0, sp, #8
   d9ff6:	f001 fb06 	bl	db606 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9ffa:	ab12      	add	r3, sp, #72	; 0x48
   d9ffc:	4418      	add	r0, r3
    return String(ascstr);
   d9ffe:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da000:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da004:	4620      	mov	r0, r4
   da006:	f7ff fe90 	bl	d9d2a <_ZN6StringC1EPKc>
}
   da00a:	4620      	mov	r0, r4
   da00c:	b013      	add	sp, #76	; 0x4c
   da00e:	bd30      	pop	{r4, r5, pc}
   da010:	2003e678 	.word	0x2003e678
   da014:	2003e670 	.word	0x2003e670

000da018 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da01c:	b0a5      	sub	sp, #148	; 0x94
   da01e:	4607      	mov	r7, r0
   da020:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da022:	a814      	add	r0, sp, #80	; 0x50
{
   da024:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da026:	223f      	movs	r2, #63	; 0x3f
{
   da028:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da02a:	f001 fb06 	bl	db63a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da02e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da030:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da032:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da036:	f001 fae6 	bl	db606 <strlen>
   da03a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da03c:	bb5d      	cbnz	r5, da096 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da03e:	492a      	ldr	r1, [pc, #168]	; (da0e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da040:	a803      	add	r0, sp, #12
   da042:	f001 fabb 	bl	db5bc <strcpy>
   da046:	ae14      	add	r6, sp, #80	; 0x50
{
   da048:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da04a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da04e:	45ab      	cmp	fp, r5
   da050:	d936      	bls.n	da0c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da052:	46b1      	mov	r9, r6
   da054:	f105 0a01 	add.w	sl, r5, #1
   da058:	f819 3b01 	ldrb.w	r3, [r9], #1
   da05c:	2b25      	cmp	r3, #37	; 0x25
   da05e:	d117      	bne.n	da090 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da060:	7873      	ldrb	r3, [r6, #1]
   da062:	2b7a      	cmp	r3, #122	; 0x7a
   da064:	d114      	bne.n	da090 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da066:	a803      	add	r0, sp, #12
   da068:	f001 facd 	bl	db606 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da06c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da06e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da070:	1828      	adds	r0, r5, r0
   da072:	4418      	add	r0, r3
   da074:	ebab 0205 	sub.w	r2, fp, r5
   da078:	1cb1      	adds	r1, r6, #2
   da07a:	f001 fa41 	bl	db500 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da07e:	4622      	mov	r2, r4
   da080:	a903      	add	r1, sp, #12
   da082:	4630      	mov	r0, r6
   da084:	f001 fa3c 	bl	db500 <memcpy>
            len = strlen(format_str);
   da088:	a814      	add	r0, sp, #80	; 0x50
   da08a:	f001 fabc 	bl	db606 <strlen>
   da08e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da090:	464e      	mov	r6, r9
   da092:	4655      	mov	r5, sl
   da094:	e7d9      	b.n	da04a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da096:	213c      	movs	r1, #60	; 0x3c
   da098:	fb95 f3f1 	sdiv	r3, r5, r1
   da09c:	2b00      	cmp	r3, #0
   da09e:	bfb8      	it	lt
   da0a0:	425b      	neglt	r3, r3
   da0a2:	fbb3 f2f1 	udiv	r2, r3, r1
   da0a6:	fb01 3312 	mls	r3, r1, r2, r3
   da0aa:	9300      	str	r3, [sp, #0]
   da0ac:	4a0f      	ldr	r2, [pc, #60]	; (da0ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da0ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da0b2:	2110      	movs	r1, #16
   da0b4:	a803      	add	r0, sp, #12
   da0b6:	fb95 f3f3 	sdiv	r3, r5, r3
   da0ba:	f7fe fcbb 	bl	d8a34 <snprintf>
   da0be:	e7c2      	b.n	da046 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da0c0:	2100      	movs	r1, #0
   da0c2:	222e      	movs	r2, #46	; 0x2e
   da0c4:	a808      	add	r0, sp, #32
   da0c6:	9107      	str	r1, [sp, #28]
   da0c8:	f001 fa42 	bl	db550 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da0cc:	4643      	mov	r3, r8
   da0ce:	aa14      	add	r2, sp, #80	; 0x50
   da0d0:	2132      	movs	r1, #50	; 0x32
   da0d2:	a807      	add	r0, sp, #28
   da0d4:	f7fe fcde 	bl	d8a94 <strftime>
    return String(buf);
   da0d8:	a907      	add	r1, sp, #28
   da0da:	4638      	mov	r0, r7
   da0dc:	f7ff fe25 	bl	d9d2a <_ZN6StringC1EPKc>
}
   da0e0:	4638      	mov	r0, r7
   da0e2:	b025      	add	sp, #148	; 0x94
   da0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da0e8:	000de150 	.word	0x000de150
   da0ec:	000de152 	.word	0x000de152

000da0f0 <_ZN9TimeClass6formatExPKc>:
{
   da0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   da0f2:	b08d      	sub	sp, #52	; 0x34
   da0f4:	e9cd 2300 	strd	r2, r3, [sp]
   da0f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da0fa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da0fc:	b915      	cbnz	r5, da104 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da0fe:	4b19      	ldr	r3, [pc, #100]	; (da164 <_ZN9TimeClass6formatExPKc+0x74>)
   da100:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da102:	b12d      	cbz	r5, da110 <_ZN9TimeClass6formatExPKc+0x20>
   da104:	4b18      	ldr	r3, [pc, #96]	; (da168 <_ZN9TimeClass6formatExPKc+0x78>)
   da106:	4628      	mov	r0, r5
   da108:	6819      	ldr	r1, [r3, #0]
   da10a:	f001 fa4d 	bl	db5a8 <strcmp>
   da10e:	b938      	cbnz	r0, da120 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da110:	e9dd 2300 	ldrd	r2, r3, [sp]
   da114:	4620      	mov	r0, r4
   da116:	f7ff ff47 	bl	d9fa8 <_ZN9TimeClass7timeStrEx>
}
   da11a:	4620      	mov	r0, r4
   da11c:	b00d      	add	sp, #52	; 0x34
   da11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da120:	4e12      	ldr	r6, [pc, #72]	; (da16c <_ZN9TimeClass6formatExPKc+0x7c>)
   da122:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da124:	4f12      	ldr	r7, [pc, #72]	; (da170 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da126:	e9d6 3200 	ldrd	r3, r2, [r6]
   da12a:	185b      	adds	r3, r3, r1
   da12c:	9901      	ldr	r1, [sp, #4]
   da12e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da132:	e9d7 0100 	ldrd	r0, r1, [r7]
   da136:	181b      	adds	r3, r3, r0
   da138:	eb41 0202 	adc.w	r2, r1, r2
   da13c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da140:	2100      	movs	r1, #0
   da142:	2224      	movs	r2, #36	; 0x24
   da144:	a803      	add	r0, sp, #12
   da146:	f001 fa03 	bl	db550 <memset>
    localtime_r(&t, &calendar_time);
   da14a:	a903      	add	r1, sp, #12
   da14c:	4668      	mov	r0, sp
   da14e:	f7fe fca9 	bl	d8aa4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da152:	6832      	ldr	r2, [r6, #0]
   da154:	683b      	ldr	r3, [r7, #0]
   da156:	a903      	add	r1, sp, #12
   da158:	4413      	add	r3, r2
   da15a:	4620      	mov	r0, r4
   da15c:	462a      	mov	r2, r5
   da15e:	f7ff ff5b 	bl	da018 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da162:	e7da      	b.n	da11a <_ZN9TimeClass6formatExPKc+0x2a>
   da164:	2003e648 	.word	0x2003e648
   da168:	2003dd00 	.word	0x2003dd00
   da16c:	2003e678 	.word	0x2003e678
   da170:	2003e670 	.word	0x2003e670

000da174 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da174:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da176:	2000      	movs	r0, #0
   da178:	f7fe f99e 	bl	d84b8 <hal_rtc_time_is_valid>
    if (rtcstate)
   da17c:	4604      	mov	r4, r0
   da17e:	b9a0      	cbnz	r0, da1aa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da180:	f7fe fb12 	bl	d87a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da184:	2801      	cmp	r0, #1
   da186:	d110      	bne.n	da1aa <_ZN9TimeClass7isValidEv+0x36>
   da188:	4620      	mov	r0, r4
   da18a:	f7fe fb3d 	bl	d8808 <system_thread_get_state>
   da18e:	b960      	cbnz	r0, da1aa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da190:	f7ff feea 	bl	d9f68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da194:	b910      	cbnz	r0, da19c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da196:	f7fe fb75 	bl	d8884 <spark_process>
        while (_while() && !_condition()) {
   da19a:	e7f9      	b.n	da190 <_ZN9TimeClass7isValidEv+0x1c>
   da19c:	f7ff fee4 	bl	d9f68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da1a4:	2000      	movs	r0, #0
   da1a6:	f7fe b987 	b.w	d84b8 <hal_rtc_time_is_valid>
}
   da1aa:	4620      	mov	r0, r4
   da1ac:	bd10      	pop	{r4, pc}

000da1ae <_ZN9TimeClass3nowEv>:
{
   da1ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da1b0:	f7ff ffe0 	bl	da174 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da1b4:	2210      	movs	r2, #16
   da1b6:	2100      	movs	r1, #0
   da1b8:	4668      	mov	r0, sp
   da1ba:	f001 f9c9 	bl	db550 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da1be:	2100      	movs	r1, #0
   da1c0:	4668      	mov	r0, sp
   da1c2:	f7fe f989 	bl	d84d8 <hal_rtc_get_time>
}
   da1c6:	9800      	ldr	r0, [sp, #0]
   da1c8:	b005      	add	sp, #20
   da1ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da1d0 <_ZN9TimeClass4hourEv>:
{
   da1d0:	b508      	push	{r3, lr}
	return hour(now());
   da1d2:	f7ff ffec 	bl	da1ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da1d6:	17c1      	asrs	r1, r0, #31
   da1d8:	f7ff fe90 	bl	d9efc <_ZL22Refresh_UnixTime_Cachex>
}
   da1dc:	4b01      	ldr	r3, [pc, #4]	; (da1e4 <_ZN9TimeClass4hourEv+0x14>)
   da1de:	6898      	ldr	r0, [r3, #8]
   da1e0:	bd08      	pop	{r3, pc}
   da1e2:	bf00      	nop
   da1e4:	2003e64c 	.word	0x2003e64c

000da1e8 <_ZN9TimeClass4yearEv>:
{
   da1e8:	b508      	push	{r3, lr}
	return year(now());
   da1ea:	f7ff ffe0 	bl	da1ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da1ee:	17c1      	asrs	r1, r0, #31
   da1f0:	f7ff fe84 	bl	d9efc <_ZL22Refresh_UnixTime_Cachex>
}
   da1f4:	4b01      	ldr	r3, [pc, #4]	; (da1fc <_ZN9TimeClass4yearEv+0x14>)
   da1f6:	6958      	ldr	r0, [r3, #20]
   da1f8:	bd08      	pop	{r3, pc}
   da1fa:	bf00      	nop
   da1fc:	2003e64c 	.word	0x2003e64c

000da200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da200:	4b02      	ldr	r3, [pc, #8]	; (da20c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da202:	681a      	ldr	r2, [r3, #0]
   da204:	4b02      	ldr	r3, [pc, #8]	; (da210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da206:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da208:	4770      	bx	lr
   da20a:	bf00      	nop
   da20c:	2003dd00 	.word	0x2003dd00
   da210:	2003e648 	.word	0x2003e648

000da214 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da214:	4770      	bx	lr

000da216 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da216:	7441      	strb	r1, [r0, #17]
}
   da218:	4770      	bx	lr

000da21a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   da21a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da21c:	7c00      	ldrb	r0, [r0, #16]
   da21e:	f7fe fa6b 	bl	d86f8 <hal_usart_available_data_for_write>
}
   da222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da226:	bd08      	pop	{r3, pc}

000da228 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   da228:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da22a:	7c00      	ldrb	r0, [r0, #16]
   da22c:	f7fe fa3c 	bl	d86a8 <hal_usart_available>
}
   da230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da234:	bd08      	pop	{r3, pc}

000da236 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   da236:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da238:	7c00      	ldrb	r0, [r0, #16]
   da23a:	f7fe fa45 	bl	d86c8 <hal_usart_peek>
}
   da23e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da242:	bd08      	pop	{r3, pc}

000da244 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   da244:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da246:	7c00      	ldrb	r0, [r0, #16]
   da248:	f7fe fa36 	bl	d86b8 <hal_usart_read>
}
   da24c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da250:	bd08      	pop	{r3, pc}

000da252 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   da252:	7c00      	ldrb	r0, [r0, #16]
   da254:	f7fe ba40 	b.w	d86d8 <hal_usart_flush>

000da258 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   da258:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da25a:	7c45      	ldrb	r5, [r0, #17]
{
   da25c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da25e:	b12d      	cbz	r5, da26c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   da260:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   da262:	b003      	add	sp, #12
   da264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da268:	f7fe ba16 	b.w	d8698 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da26c:	7c00      	ldrb	r0, [r0, #16]
   da26e:	9101      	str	r1, [sp, #4]
   da270:	f7fe fa42 	bl	d86f8 <hal_usart_available_data_for_write>
   da274:	2800      	cmp	r0, #0
   da276:	9901      	ldr	r1, [sp, #4]
   da278:	dcf2      	bgt.n	da260 <_ZN11USARTSerial5writeEh+0x8>
}
   da27a:	4628      	mov	r0, r5
   da27c:	b003      	add	sp, #12
   da27e:	bd30      	pop	{r4, r5, pc}

000da280 <_ZN11USARTSerialD0Ev>:
   da280:	b510      	push	{r4, lr}
   da282:	2114      	movs	r1, #20
   da284:	4604      	mov	r4, r0
   da286:	f000 fac6 	bl	da816 <_ZdlPvj>
   da28a:	4620      	mov	r0, r4
   da28c:	bd10      	pop	{r4, pc}
	...

000da290 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da290:	b510      	push	{r4, lr}
   da292:	f04f 0c00 	mov.w	ip, #0
   da296:	4604      	mov	r4, r0
   da298:	4608      	mov	r0, r1
   da29a:	4611      	mov	r1, r2
   da29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da2a0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da2a4:	4a04      	ldr	r2, [pc, #16]	; (da2b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da2a6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da2a8:	2201      	movs	r2, #1
  _serial = serial;
   da2aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da2ac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da2ae:	461a      	mov	r2, r3
   da2b0:	f7fe f9ea 	bl	d8688 <hal_usart_init>
}
   da2b4:	4620      	mov	r0, r4
   da2b6:	bd10      	pop	{r4, pc}
   da2b8:	000de184 	.word	0x000de184

000da2bc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da2bc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da2be:	4c0e      	ldr	r4, [pc, #56]	; (da2f8 <_Z22__fetch_global_Serial1v+0x3c>)
   da2c0:	7821      	ldrb	r1, [r4, #0]
   da2c2:	f3bf 8f5b 	dmb	ish
   da2c6:	f011 0101 	ands.w	r1, r1, #1
   da2ca:	d112      	bne.n	da2f2 <_Z22__fetch_global_Serial1v+0x36>
   da2cc:	4620      	mov	r0, r4
   da2ce:	9101      	str	r1, [sp, #4]
   da2d0:	f7f9 fef4 	bl	d40bc <__cxa_guard_acquire>
   da2d4:	9901      	ldr	r1, [sp, #4]
   da2d6:	b160      	cbz	r0, da2f2 <_Z22__fetch_global_Serial1v+0x36>
   da2d8:	4a08      	ldr	r2, [pc, #32]	; (da2fc <_Z22__fetch_global_Serial1v+0x40>)
   da2da:	4b09      	ldr	r3, [pc, #36]	; (da300 <_Z22__fetch_global_Serial1v+0x44>)
   da2dc:	4809      	ldr	r0, [pc, #36]	; (da304 <_Z22__fetch_global_Serial1v+0x48>)
   da2de:	f7ff ffd7 	bl	da290 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da2e2:	4620      	mov	r0, r4
   da2e4:	f7f9 feef 	bl	d40c6 <__cxa_guard_release>
   da2e8:	4a07      	ldr	r2, [pc, #28]	; (da308 <_Z22__fetch_global_Serial1v+0x4c>)
   da2ea:	4908      	ldr	r1, [pc, #32]	; (da30c <_Z22__fetch_global_Serial1v+0x50>)
   da2ec:	4805      	ldr	r0, [pc, #20]	; (da304 <_Z22__fetch_global_Serial1v+0x48>)
   da2ee:	f000 fa8d 	bl	da80c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da2f2:	4804      	ldr	r0, [pc, #16]	; (da304 <_Z22__fetch_global_Serial1v+0x48>)
   da2f4:	b002      	add	sp, #8
   da2f6:	bd10      	pop	{r4, pc}
   da2f8:	2003e688 	.word	0x2003e688
   da2fc:	2003e68c 	.word	0x2003e68c
   da300:	2003e710 	.word	0x2003e710
   da304:	2003e794 	.word	0x2003e794
   da308:	2003dee0 	.word	0x2003dee0
   da30c:	000da215 	.word	0x000da215

000da310 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da310:	7441      	strb	r1, [r0, #17]
}
   da312:	4770      	bx	lr

000da314 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da314:	4770      	bx	lr

000da316 <_ZN9USBSerial4readEv>:
{
   da316:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da318:	2100      	movs	r1, #0
   da31a:	7c00      	ldrb	r0, [r0, #16]
   da31c:	f7fe fa0c 	bl	d8738 <HAL_USB_USART_Receive_Data>
}
   da320:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da324:	bd08      	pop	{r3, pc}

000da326 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   da326:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da328:	2101      	movs	r1, #1
   da32a:	7c00      	ldrb	r0, [r0, #16]
   da32c:	f7fe fa04 	bl	d8738 <HAL_USB_USART_Receive_Data>
}
   da330:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da334:	bd08      	pop	{r3, pc}

000da336 <_ZN9USBSerial17availableForWriteEv>:
{
   da336:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da338:	7c00      	ldrb	r0, [r0, #16]
   da33a:	f7fe f9f5 	bl	d8728 <HAL_USB_USART_Available_Data_For_Write>
}
   da33e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da342:	bd08      	pop	{r3, pc}

000da344 <_ZN9USBSerial9availableEv>:
{
   da344:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da346:	7c00      	ldrb	r0, [r0, #16]
   da348:	f7fe f9e6 	bl	d8718 <HAL_USB_USART_Available_Data>
}
   da34c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da350:	bd08      	pop	{r3, pc}

000da352 <_ZN9USBSerial5writeEh>:
{
   da352:	b513      	push	{r0, r1, r4, lr}
   da354:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da356:	7c00      	ldrb	r0, [r0, #16]
{
   da358:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da35a:	f7fe f9e5 	bl	d8728 <HAL_USB_USART_Available_Data_For_Write>
   da35e:	2800      	cmp	r0, #0
   da360:	9901      	ldr	r1, [sp, #4]
   da362:	dc01      	bgt.n	da368 <_ZN9USBSerial5writeEh+0x16>
   da364:	7c60      	ldrb	r0, [r4, #17]
   da366:	b120      	cbz	r0, da372 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da368:	7c20      	ldrb	r0, [r4, #16]
   da36a:	f7fe f9ed 	bl	d8748 <HAL_USB_USART_Send_Data>
   da36e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da372:	b002      	add	sp, #8
   da374:	bd10      	pop	{r4, pc}

000da376 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da376:	7c00      	ldrb	r0, [r0, #16]
   da378:	f7fe b9ee 	b.w	d8758 <HAL_USB_USART_Flush_Data>

000da37c <_ZN9USBSerialD0Ev>:
   da37c:	b510      	push	{r4, lr}
   da37e:	2114      	movs	r1, #20
   da380:	4604      	mov	r4, r0
   da382:	f000 fa48 	bl	da816 <_ZdlPvj>
   da386:	4620      	mov	r0, r4
   da388:	bd10      	pop	{r4, pc}
	...

000da38c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da38c:	b510      	push	{r4, lr}
   da38e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da392:	4604      	mov	r4, r0
   da394:	4608      	mov	r0, r1
   da396:	2100      	movs	r1, #0
   da398:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da39c:	4b04      	ldr	r3, [pc, #16]	; (da3b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da39e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da3a0:	2301      	movs	r3, #1
  _serial = serial;
   da3a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da3a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da3a6:	4611      	mov	r1, r2
   da3a8:	f7fe f9ae 	bl	d8708 <HAL_USB_USART_Init>
}
   da3ac:	4620      	mov	r0, r4
   da3ae:	bd10      	pop	{r4, pc}
   da3b0:	000de1b4 	.word	0x000de1b4

000da3b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da3b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da3b6:	2214      	movs	r2, #20
{
   da3b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da3ba:	2100      	movs	r1, #0
   da3bc:	f001 f8c8 	bl	db550 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da3c0:	4620      	mov	r0, r4
   da3c2:	bd10      	pop	{r4, pc}

000da3c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da3c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da3c6:	4c10      	ldr	r4, [pc, #64]	; (da408 <_Z16_fetch_usbserialv+0x44>)
{
   da3c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da3ca:	a803      	add	r0, sp, #12
   da3cc:	f7ff fff2 	bl	da3b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da3d0:	7821      	ldrb	r1, [r4, #0]
   da3d2:	f3bf 8f5b 	dmb	ish
   da3d6:	f011 0101 	ands.w	r1, r1, #1
   da3da:	d111      	bne.n	da400 <_Z16_fetch_usbserialv+0x3c>
   da3dc:	4620      	mov	r0, r4
   da3de:	9101      	str	r1, [sp, #4]
   da3e0:	f7f9 fe6c 	bl	d40bc <__cxa_guard_acquire>
   da3e4:	9901      	ldr	r1, [sp, #4]
   da3e6:	b158      	cbz	r0, da400 <_Z16_fetch_usbserialv+0x3c>
   da3e8:	aa03      	add	r2, sp, #12
   da3ea:	4808      	ldr	r0, [pc, #32]	; (da40c <_Z16_fetch_usbserialv+0x48>)
   da3ec:	f7ff ffce 	bl	da38c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da3f0:	4620      	mov	r0, r4
   da3f2:	f7f9 fe68 	bl	d40c6 <__cxa_guard_release>
   da3f6:	4a06      	ldr	r2, [pc, #24]	; (da410 <_Z16_fetch_usbserialv+0x4c>)
   da3f8:	4906      	ldr	r1, [pc, #24]	; (da414 <_Z16_fetch_usbserialv+0x50>)
   da3fa:	4804      	ldr	r0, [pc, #16]	; (da40c <_Z16_fetch_usbserialv+0x48>)
   da3fc:	f000 fa06 	bl	da80c <__aeabi_atexit>
	return _usbserial;
}
   da400:	4802      	ldr	r0, [pc, #8]	; (da40c <_Z16_fetch_usbserialv+0x48>)
   da402:	b008      	add	sp, #32
   da404:	bd10      	pop	{r4, pc}
   da406:	bf00      	nop
   da408:	2003e7a8 	.word	0x2003e7a8
   da40c:	2003e7ac 	.word	0x2003e7ac
   da410:	2003dee0 	.word	0x2003dee0
   da414:	000da315 	.word	0x000da315

000da418 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   da418:	2200      	movs	r2, #0
   da41a:	6840      	ldr	r0, [r0, #4]
   da41c:	4611      	mov	r1, r2
   da41e:	f7fe baa1 	b.w	d8964 <network_ready>

000da422 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da422:	2200      	movs	r2, #0
   da424:	6840      	ldr	r0, [r0, #4]
   da426:	4611      	mov	r1, r2
   da428:	f7fe babc 	b.w	d89a4 <network_listening>

000da42c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   da42c:	2200      	movs	r2, #0
   da42e:	6840      	ldr	r0, [r0, #4]
   da430:	4611      	mov	r1, r2
   da432:	f7fe bac7 	b.w	d89c4 <network_get_listen_timeout>

000da436 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   da436:	6840      	ldr	r0, [r0, #4]
   da438:	2200      	movs	r2, #0
   da43a:	f7fe babb 	b.w	d89b4 <network_set_listen_timeout>

000da43e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   da43e:	6840      	ldr	r0, [r0, #4]
   da440:	2200      	movs	r2, #0
   da442:	f081 0101 	eor.w	r1, r1, #1
   da446:	f7fe baa5 	b.w	d8994 <network_listen>

000da44a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   da44a:	2300      	movs	r3, #0
   da44c:	6840      	ldr	r0, [r0, #4]
   da44e:	461a      	mov	r2, r3
   da450:	4619      	mov	r1, r3
   da452:	f7fe ba97 	b.w	d8984 <network_off>

000da456 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   da456:	2300      	movs	r3, #0
   da458:	6840      	ldr	r0, [r0, #4]
   da45a:	461a      	mov	r2, r3
   da45c:	4619      	mov	r1, r3
   da45e:	f7fe ba89 	b.w	d8974 <network_on>

000da462 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   da462:	2200      	movs	r2, #0
   da464:	6840      	ldr	r0, [r0, #4]
   da466:	4611      	mov	r1, r2
   da468:	f7fe ba6c 	b.w	d8944 <network_connecting>

000da46c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da46c:	6840      	ldr	r0, [r0, #4]
   da46e:	2200      	movs	r2, #0
   da470:	2102      	movs	r1, #2
   da472:	f7fe ba6f 	b.w	d8954 <network_disconnect>

000da476 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   da476:	2300      	movs	r3, #0
   da478:	6840      	ldr	r0, [r0, #4]
   da47a:	461a      	mov	r2, r3
   da47c:	f7fe ba5a 	b.w	d8934 <network_connect>

000da480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   da480:	4b02      	ldr	r3, [pc, #8]	; (da48c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   da482:	2204      	movs	r2, #4
   da484:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   da486:	4a02      	ldr	r2, [pc, #8]	; (da490 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   da488:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   da48a:	4770      	bx	lr
   da48c:	2003e7c0 	.word	0x2003e7c0
   da490:	000de1e4 	.word	0x000de1e4

000da494 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   da494:	b510      	push	{r4, lr}
   da496:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   da498:	f001 f8b5 	bl	db606 <strlen>
   da49c:	3801      	subs	r0, #1
   da49e:	1823      	adds	r3, r4, r0
   da4a0:	4620      	mov	r0, r4
	while(i<j){
   da4a2:	4283      	cmp	r3, r0
   da4a4:	d906      	bls.n	da4b4 <_Z11str_reversePc+0x20>
		c = *i;
   da4a6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   da4a8:	7819      	ldrb	r1, [r3, #0]
   da4aa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   da4ae:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   da4b2:	e7f6      	b.n	da4a2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   da4b4:	bd10      	pop	{r4, pc}

000da4b6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da4b6:	b570      	push	{r4, r5, r6, lr}
   da4b8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   da4ba:	1e91      	subs	r1, r2, #2
   da4bc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da4be:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   da4c0:	d822      	bhi.n	da508 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   da4c2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   da4c4:	b16d      	cbz	r5, da4e2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   da4c6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   da4ca:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   da4ce:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   da4d0:	2d09      	cmp	r5, #9
                *ptr += '0';
   da4d2:	bf94      	ite	ls
   da4d4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   da4d6:	3157      	addhi	r1, #87	; 0x57
   da4d8:	b2c9      	uxtb	r1, r1
   da4da:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   da4de:	4635      	mov	r5, r6
	while(a){
   da4e0:	e7f0      	b.n	da4c4 <ultoa+0xe>
   da4e2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   da4e4:	4423      	add	r3, r4
            *ptr++ = '0';
   da4e6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   da4e8:	4293      	cmp	r3, r2
   da4ea:	d902      	bls.n	da4f2 <ultoa+0x3c>
            *ptr++ = '0';
   da4ec:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   da4f0:	e7fa      	b.n	da4e8 <ultoa+0x32>
   da4f2:	1a1a      	subs	r2, r3, r0
   da4f4:	4283      	cmp	r3, r0
   da4f6:	bf38      	it	cc
   da4f8:	2200      	movcc	r2, #0

	*ptr = '\0';
   da4fa:	2300      	movs	r3, #0
   da4fc:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   da4fe:	4620      	mov	r0, r4
   da500:	f7ff ffc8 	bl	da494 <_Z11str_reversePc>
	return buffer;
   da504:	4620      	mov	r0, r4
}
   da506:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   da508:	2000      	movs	r0, #0
   da50a:	e7fc      	b.n	da506 <ultoa+0x50>

000da50c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da50c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   da50e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da510:	460c      	mov	r4, r1
   da512:	4615      	mov	r5, r2
	if(a<0){
   da514:	da0e      	bge.n	da534 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   da51a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da51e:	bf14      	ite	ne
   da520:	4258      	negne	r0, r3
   da522:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   da524:	2301      	movs	r3, #1
		*buffer = '-';
   da526:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   da528:	462a      	mov	r2, r5
   da52a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   da52c:	f7ff ffc3 	bl	da4b6 <ultoa>
	}
	return buffer;
}
   da530:	4620      	mov	r0, r4
   da532:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   da534:	2301      	movs	r3, #1
   da536:	e7f9      	b.n	da52c <itoa+0x20>

000da538 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da538:	4b01      	ldr	r3, [pc, #4]	; (da540 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da53a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da53c:	4770      	bx	lr
   da53e:	bf00      	nop
   da540:	2003dd08 	.word	0x2003dd08

000da544 <serialEventRun>:
{
   da544:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da546:	4b0b      	ldr	r3, [pc, #44]	; (da574 <serialEventRun+0x30>)
   da548:	b143      	cbz	r3, da55c <serialEventRun+0x18>
   da54a:	f7ff ff3b 	bl	da3c4 <_Z16_fetch_usbserialv>
   da54e:	6803      	ldr	r3, [r0, #0]
   da550:	691b      	ldr	r3, [r3, #16]
   da552:	4798      	blx	r3
   da554:	2800      	cmp	r0, #0
   da556:	dd01      	ble.n	da55c <serialEventRun+0x18>
        serialEvent();
   da558:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da55c:	4b06      	ldr	r3, [pc, #24]	; (da578 <serialEventRun+0x34>)
   da55e:	b143      	cbz	r3, da572 <serialEventRun+0x2e>
   da560:	f7ff feac 	bl	da2bc <_Z22__fetch_global_Serial1v>
   da564:	6803      	ldr	r3, [r0, #0]
   da566:	691b      	ldr	r3, [r3, #16]
   da568:	4798      	blx	r3
   da56a:	2800      	cmp	r0, #0
   da56c:	dd01      	ble.n	da572 <serialEventRun+0x2e>
        serialEvent1();
   da56e:	f3af 8000 	nop.w
}
   da572:	bd08      	pop	{r3, pc}
	...

000da57c <_post_loop>:
{
   da57c:	b508      	push	{r3, lr}
	serialEventRun();
   da57e:	f7ff ffe1 	bl	da544 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da582:	f7fd ff91 	bl	d84a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da586:	4b01      	ldr	r3, [pc, #4]	; (da58c <_post_loop+0x10>)
   da588:	6018      	str	r0, [r3, #0]
}
   da58a:	bd08      	pop	{r3, pc}
   da58c:	2003e7dc 	.word	0x2003e7dc

000da590 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da590:	4802      	ldr	r0, [pc, #8]	; (da59c <_Z33system_initialize_user_backup_ramv+0xc>)
   da592:	4a03      	ldr	r2, [pc, #12]	; (da5a0 <_Z33system_initialize_user_backup_ramv+0x10>)
   da594:	4903      	ldr	r1, [pc, #12]	; (da5a4 <_Z33system_initialize_user_backup_ramv+0x14>)
   da596:	1a12      	subs	r2, r2, r0
   da598:	f000 bfb2 	b.w	db500 <memcpy>
   da59c:	2003f400 	.word	0x2003f400
   da5a0:	2003fd44 	.word	0x2003fd44
   da5a4:	000de520 	.word	0x000de520

000da5a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da5a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da5aa:	2300      	movs	r3, #0
   da5ac:	9300      	str	r3, [sp, #0]
   da5ae:	461a      	mov	r2, r3
   da5b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da5b4:	f7fe f942 	bl	d883c <system_ctrl_set_result>
}
   da5b8:	b003      	add	sp, #12
   da5ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da5c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da5c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da5c2:	8843      	ldrh	r3, [r0, #2]
   da5c4:	2b0a      	cmp	r3, #10
   da5c6:	d008      	beq.n	da5da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da5c8:	2b50      	cmp	r3, #80	; 0x50
   da5ca:	d10b      	bne.n	da5e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da5cc:	4b09      	ldr	r3, [pc, #36]	; (da5f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da5ce:	681b      	ldr	r3, [r3, #0]
   da5d0:	b14b      	cbz	r3, da5e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da5d2:	b003      	add	sp, #12
   da5d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da5d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da5da:	f7ff ffe5 	bl	da5a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da5de:	b003      	add	sp, #12
   da5e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da5e4:	2300      	movs	r3, #0
   da5e6:	9300      	str	r3, [sp, #0]
   da5e8:	461a      	mov	r2, r3
   da5ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da5ee:	f7fe f925 	bl	d883c <system_ctrl_set_result>
}
   da5f2:	e7f4      	b.n	da5de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da5f4:	2003e7cc 	.word	0x2003e7cc

000da5f8 <module_user_init_hook>:
{
   da5f8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da5fa:	4c12      	ldr	r4, [pc, #72]	; (da644 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da5fc:	4812      	ldr	r0, [pc, #72]	; (da648 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da5fe:	4d13      	ldr	r5, [pc, #76]	; (da64c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da600:	2100      	movs	r1, #0
   da602:	f7fe fa3f 	bl	d8a84 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da606:	6823      	ldr	r3, [r4, #0]
   da608:	42ab      	cmp	r3, r5
   da60a:	4b11      	ldr	r3, [pc, #68]	; (da650 <module_user_init_hook+0x58>)
   da60c:	bf0c      	ite	eq
   da60e:	2201      	moveq	r2, #1
   da610:	2200      	movne	r2, #0
   da612:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da614:	d002      	beq.n	da61c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da616:	f7ff ffbb 	bl	da590 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da61a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da61c:	f7fd ff2c 	bl	d8478 <HAL_RNG_GetRandomNumber>
   da620:	4604      	mov	r4, r0
    srand(seed);
   da622:	f000 ff9d 	bl	db560 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da626:	4b0b      	ldr	r3, [pc, #44]	; (da654 <module_user_init_hook+0x5c>)
   da628:	b113      	cbz	r3, da630 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da62a:	4620      	mov	r0, r4
   da62c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da630:	2100      	movs	r1, #0
   da632:	4808      	ldr	r0, [pc, #32]	; (da654 <module_user_init_hook+0x5c>)
   da634:	f7fe f976 	bl	d8924 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da63c:	4806      	ldr	r0, [pc, #24]	; (da658 <module_user_init_hook+0x60>)
   da63e:	2100      	movs	r1, #0
   da640:	f7fe b8f2 	b.w	d8828 <system_ctrl_set_app_request_handler>
   da644:	2003fd40 	.word	0x2003fd40
   da648:	000da539 	.word	0x000da539
   da64c:	9a271c1e 	.word	0x9a271c1e
   da650:	2003e7c8 	.word	0x2003e7c8
   da654:	00000000 	.word	0x00000000
   da658:	000da5c1 	.word	0x000da5c1

000da65c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da65c:	b508      	push	{r3, lr}
   da65e:	4b02      	ldr	r3, [pc, #8]	; (da668 <spark_protocol_instance+0xc>)
   da660:	681b      	ldr	r3, [r3, #0]
   da662:	681b      	ldr	r3, [r3, #0]
   da664:	9301      	str	r3, [sp, #4]
   da666:	bd08      	pop	{r3, pc}
   da668:	0003025c 	.word	0x0003025c

000da66c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da66c:	b508      	push	{r3, lr}
   da66e:	4b02      	ldr	r3, [pc, #8]	; (da678 <spark_protocol_set_product_id+0xc>)
   da670:	681b      	ldr	r3, [r3, #0]
   da672:	685b      	ldr	r3, [r3, #4]
   da674:	9301      	str	r3, [sp, #4]
   da676:	bd08      	pop	{r3, pc}
   da678:	0003025c 	.word	0x0003025c

000da67c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da67c:	b508      	push	{r3, lr}
   da67e:	4b02      	ldr	r3, [pc, #8]	; (da688 <spark_protocol_set_product_firmware_version+0xc>)
   da680:	681b      	ldr	r3, [r3, #0]
   da682:	689b      	ldr	r3, [r3, #8]
   da684:	9301      	str	r3, [sp, #4]
   da686:	bd08      	pop	{r3, pc}
   da688:	0003025c 	.word	0x0003025c

000da68c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da68c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da68e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da690:	d902      	bls.n	da698 <pinAvailable+0xc>
    return false;
   da692:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da694:	b002      	add	sp, #8
   da696:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da698:	f1a0 030b 	sub.w	r3, r0, #11
   da69c:	2b02      	cmp	r3, #2
   da69e:	d81a      	bhi.n	da6d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da6a0:	4c17      	ldr	r4, [pc, #92]	; (da700 <pinAvailable+0x74>)
   da6a2:	7821      	ldrb	r1, [r4, #0]
   da6a4:	f3bf 8f5b 	dmb	ish
   da6a8:	f011 0101 	ands.w	r1, r1, #1
   da6ac:	d10b      	bne.n	da6c6 <pinAvailable+0x3a>
   da6ae:	4620      	mov	r0, r4
   da6b0:	9101      	str	r1, [sp, #4]
   da6b2:	f7f9 fd03 	bl	d40bc <__cxa_guard_acquire>
   da6b6:	9901      	ldr	r1, [sp, #4]
   da6b8:	b128      	cbz	r0, da6c6 <pinAvailable+0x3a>
   da6ba:	4812      	ldr	r0, [pc, #72]	; (da704 <pinAvailable+0x78>)
   da6bc:	f7ff fae0 	bl	d9c80 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da6c0:	4620      	mov	r0, r4
   da6c2:	f7f9 fd00 	bl	d40c6 <__cxa_guard_release>
   da6c6:	4b0f      	ldr	r3, [pc, #60]	; (da704 <pinAvailable+0x78>)
   da6c8:	7818      	ldrb	r0, [r3, #0]
   da6ca:	f7fd ffd5 	bl	d8678 <hal_spi_is_enabled>
   da6ce:	2800      	cmp	r0, #0
   da6d0:	d1df      	bne.n	da692 <pinAvailable+0x6>
  return true; // 'pin' is available
   da6d2:	2001      	movs	r0, #1
   da6d4:	e7de      	b.n	da694 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da6d6:	2801      	cmp	r0, #1
   da6d8:	d809      	bhi.n	da6ee <pinAvailable+0x62>
   da6da:	f000 f86f 	bl	da7bc <_Z19__fetch_global_Wirev>
   da6de:	2100      	movs	r1, #0
   da6e0:	7c00      	ldrb	r0, [r0, #16]
   da6e2:	f7fd ff81 	bl	d85e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da6e6:	f080 0001 	eor.w	r0, r0, #1
   da6ea:	b2c0      	uxtb	r0, r0
   da6ec:	e7d2      	b.n	da694 <pinAvailable+0x8>
   da6ee:	3809      	subs	r0, #9
   da6f0:	2801      	cmp	r0, #1
   da6f2:	d8ee      	bhi.n	da6d2 <pinAvailable+0x46>
   da6f4:	f7ff fde2 	bl	da2bc <_Z22__fetch_global_Serial1v>
   da6f8:	7c00      	ldrb	r0, [r0, #16]
   da6fa:	f7fd fff5 	bl	d86e8 <hal_usart_is_enabled>
   da6fe:	e7f2      	b.n	da6e6 <pinAvailable+0x5a>
   da700:	2003e7d0 	.word	0x2003e7d0
   da704:	2003e7d4 	.word	0x2003e7d4

000da708 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da708:	2823      	cmp	r0, #35	; 0x23
{
   da70a:	b538      	push	{r3, r4, r5, lr}
   da70c:	4604      	mov	r4, r0
   da70e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da710:	d80a      	bhi.n	da728 <pinMode+0x20>
   da712:	29ff      	cmp	r1, #255	; 0xff
   da714:	d008      	beq.n	da728 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da716:	f7ff ffb9 	bl	da68c <pinAvailable>
   da71a:	b128      	cbz	r0, da728 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da71c:	4629      	mov	r1, r5
   da71e:	4620      	mov	r0, r4
}
   da720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da724:	f7fd bef0 	b.w	d8508 <HAL_Pin_Mode>
}
   da728:	bd38      	pop	{r3, r4, r5, pc}

000da72a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da72a:	b538      	push	{r3, r4, r5, lr}
   da72c:	4604      	mov	r4, r0
   da72e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da730:	f7fd fef2 	bl	d8518 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da734:	28ff      	cmp	r0, #255	; 0xff
   da736:	d010      	beq.n	da75a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da738:	2806      	cmp	r0, #6
   da73a:	d804      	bhi.n	da746 <digitalWrite+0x1c>
   da73c:	234d      	movs	r3, #77	; 0x4d
   da73e:	fa23 f000 	lsr.w	r0, r3, r0
   da742:	07c3      	lsls	r3, r0, #31
   da744:	d409      	bmi.n	da75a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da746:	4620      	mov	r0, r4
   da748:	f7ff ffa0 	bl	da68c <pinAvailable>
   da74c:	b128      	cbz	r0, da75a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da74e:	4629      	mov	r1, r5
   da750:	4620      	mov	r0, r4
}
   da752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da756:	f7fd bee7 	b.w	d8528 <HAL_GPIO_Write>
}
   da75a:	bd38      	pop	{r3, r4, r5, pc}

000da75c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   da75c:	280d      	cmp	r0, #13
{
   da75e:	b510      	push	{r4, lr}
   da760:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   da762:	bf9c      	itt	ls
   da764:	340e      	addls	r4, #14
   da766:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da768:	4620      	mov	r0, r4
   da76a:	f7ff ff8f 	bl	da68c <pinAvailable>
   da76e:	b150      	cbz	r0, da786 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   da770:	2103      	movs	r1, #3
   da772:	4620      	mov	r0, r4
   da774:	f7fd fec0 	bl	d84f8 <HAL_Validate_Pin_Function>
   da778:	2803      	cmp	r0, #3
   da77a:	d104      	bne.n	da786 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   da77c:	4620      	mov	r0, r4
}
   da77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   da782:	f7fd bee9 	b.w	d8558 <hal_adc_read>
}
   da786:	2000      	movs	r0, #0
   da788:	bd10      	pop	{r4, pc}
	...

000da78c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   da78c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da78e:	2300      	movs	r3, #0
   da790:	2520      	movs	r5, #32
   da792:	8043      	strh	r3, [r0, #2]
   da794:	2314      	movs	r3, #20
{
   da796:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da798:	8003      	strh	r3, [r0, #0]
   da79a:	6085      	str	r5, [r0, #8]
   da79c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da79e:	4906      	ldr	r1, [pc, #24]	; (da7b8 <_Z17acquireWireBufferv+0x2c>)
   da7a0:	4628      	mov	r0, r5
   da7a2:	f000 f83c 	bl	da81e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da7a6:	4904      	ldr	r1, [pc, #16]	; (da7b8 <_Z17acquireWireBufferv+0x2c>)
	};
   da7a8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da7aa:	4628      	mov	r0, r5
   da7ac:	f000 f837 	bl	da81e <_ZnajRKSt9nothrow_t>
	};
   da7b0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   da7b2:	4620      	mov	r0, r4
   da7b4:	bd38      	pop	{r3, r4, r5, pc}
   da7b6:	bf00      	nop
   da7b8:	000de218 	.word	0x000de218

000da7bc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da7bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da7be:	4d0f      	ldr	r5, [pc, #60]	; (da7fc <_Z19__fetch_global_Wirev+0x40>)
   da7c0:	7829      	ldrb	r1, [r5, #0]
   da7c2:	f3bf 8f5b 	dmb	ish
   da7c6:	f011 0401 	ands.w	r4, r1, #1
{
   da7ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da7cc:	d113      	bne.n	da7f6 <_Z19__fetch_global_Wirev+0x3a>
   da7ce:	4628      	mov	r0, r5
   da7d0:	f7f9 fc74 	bl	d40bc <__cxa_guard_acquire>
   da7d4:	b178      	cbz	r0, da7f6 <_Z19__fetch_global_Wirev+0x3a>
   da7d6:	a801      	add	r0, sp, #4
   da7d8:	f7ff ffd8 	bl	da78c <_Z17acquireWireBufferv>
   da7dc:	aa01      	add	r2, sp, #4
   da7de:	4621      	mov	r1, r4
   da7e0:	4807      	ldr	r0, [pc, #28]	; (da800 <_Z19__fetch_global_Wirev+0x44>)
   da7e2:	f7fe fce7 	bl	d91b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da7e6:	4628      	mov	r0, r5
   da7e8:	f7f9 fc6d 	bl	d40c6 <__cxa_guard_release>
   da7ec:	4a05      	ldr	r2, [pc, #20]	; (da804 <_Z19__fetch_global_Wirev+0x48>)
   da7ee:	4906      	ldr	r1, [pc, #24]	; (da808 <_Z19__fetch_global_Wirev+0x4c>)
   da7f0:	4803      	ldr	r0, [pc, #12]	; (da800 <_Z19__fetch_global_Wirev+0x44>)
   da7f2:	f000 f80b 	bl	da80c <__aeabi_atexit>
	return wire;
}
   da7f6:	4802      	ldr	r0, [pc, #8]	; (da800 <_Z19__fetch_global_Wirev+0x44>)
   da7f8:	b007      	add	sp, #28
   da7fa:	bd30      	pop	{r4, r5, pc}
   da7fc:	2003e7e0 	.word	0x2003e7e0
   da800:	2003e7e4 	.word	0x2003e7e4
   da804:	2003dee0 	.word	0x2003dee0
   da808:	000d915d 	.word	0x000d915d

000da80c <__aeabi_atexit>:
   da80c:	460b      	mov	r3, r1
   da80e:	4601      	mov	r1, r0
   da810:	4618      	mov	r0, r3
   da812:	f000 be55 	b.w	db4c0 <__cxa_atexit>

000da816 <_ZdlPvj>:
   da816:	f7f9 bc42 	b.w	d409e <_ZdlPv>

000da81a <_ZnwjRKSt9nothrow_t>:
   da81a:	f7f9 bc3c 	b.w	d4096 <_Znwj>

000da81e <_ZnajRKSt9nothrow_t>:
   da81e:	f7f9 bc3c 	b.w	d409a <_Znaj>

000da822 <_ZSt25__throw_bad_function_callv>:
   da822:	b508      	push	{r3, lr}
   da824:	f7fe f916 	bl	d8a54 <abort>

000da828 <sqrt>:
   da828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da82c:	ed2d 8b02 	vpush	{d8}
   da830:	b08b      	sub	sp, #44	; 0x2c
   da832:	ec55 4b10 	vmov	r4, r5, d0
   da836:	f000 f855 	bl	da8e4 <__ieee754_sqrt>
   da83a:	4b28      	ldr	r3, [pc, #160]	; (da8dc <sqrt+0xb4>)
   da83c:	eeb0 8a40 	vmov.f32	s16, s0
   da840:	eef0 8a60 	vmov.f32	s17, s1
   da844:	f993 7000 	ldrsb.w	r7, [r3]
   da848:	1c7b      	adds	r3, r7, #1
   da84a:	d012      	beq.n	da872 <sqrt+0x4a>
   da84c:	4622      	mov	r2, r4
   da84e:	462b      	mov	r3, r5
   da850:	4620      	mov	r0, r4
   da852:	4629      	mov	r1, r5
   da854:	f000 fd62 	bl	db31c <__aeabi_dcmpun>
   da858:	4606      	mov	r6, r0
   da85a:	b950      	cbnz	r0, da872 <sqrt+0x4a>
   da85c:	f04f 0800 	mov.w	r8, #0
   da860:	f04f 0900 	mov.w	r9, #0
   da864:	4620      	mov	r0, r4
   da866:	4629      	mov	r1, r5
   da868:	4642      	mov	r2, r8
   da86a:	464b      	mov	r3, r9
   da86c:	f000 fd2e 	bl	db2cc <__aeabi_dcmplt>
   da870:	b940      	cbnz	r0, da884 <sqrt+0x5c>
   da872:	eeb0 0a48 	vmov.f32	s0, s16
   da876:	eef0 0a68 	vmov.f32	s1, s17
   da87a:	b00b      	add	sp, #44	; 0x2c
   da87c:	ecbd 8b02 	vpop	{d8}
   da880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da884:	4b16      	ldr	r3, [pc, #88]	; (da8e0 <sqrt+0xb8>)
   da886:	9608      	str	r6, [sp, #32]
   da888:	2201      	movs	r2, #1
   da88a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da88e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da892:	9200      	str	r2, [sp, #0]
   da894:	9301      	str	r3, [sp, #4]
   da896:	b197      	cbz	r7, da8be <sqrt+0x96>
   da898:	4642      	mov	r2, r8
   da89a:	464b      	mov	r3, r9
   da89c:	4640      	mov	r0, r8
   da89e:	4649      	mov	r1, r9
   da8a0:	f000 fbcc 	bl	db03c <__aeabi_ddiv>
   da8a4:	2f02      	cmp	r7, #2
   da8a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da8aa:	d10a      	bne.n	da8c2 <sqrt+0x9a>
   da8ac:	f7fe f8e2 	bl	d8a74 <__errno>
   da8b0:	2321      	movs	r3, #33	; 0x21
   da8b2:	6003      	str	r3, [r0, #0]
   da8b4:	9b08      	ldr	r3, [sp, #32]
   da8b6:	b963      	cbnz	r3, da8d2 <sqrt+0xaa>
   da8b8:	ed9d 8b06 	vldr	d8, [sp, #24]
   da8bc:	e7d9      	b.n	da872 <sqrt+0x4a>
   da8be:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da8c2:	4668      	mov	r0, sp
   da8c4:	f000 f8d2 	bl	daa6c <matherr>
   da8c8:	2800      	cmp	r0, #0
   da8ca:	d0ef      	beq.n	da8ac <sqrt+0x84>
   da8cc:	9b08      	ldr	r3, [sp, #32]
   da8ce:	2b00      	cmp	r3, #0
   da8d0:	d0f2      	beq.n	da8b8 <sqrt+0x90>
   da8d2:	f7fe f8cf 	bl	d8a74 <__errno>
   da8d6:	9b08      	ldr	r3, [sp, #32]
   da8d8:	6003      	str	r3, [r0, #0]
   da8da:	e7ed      	b.n	da8b8 <sqrt+0x90>
   da8dc:	2003dd04 	.word	0x2003dd04
   da8e0:	000de21c 	.word	0x000de21c

000da8e4 <__ieee754_sqrt>:
   da8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da8e8:	4a5f      	ldr	r2, [pc, #380]	; (daa68 <__ieee754_sqrt+0x184>)
   da8ea:	ec57 6b10 	vmov	r6, r7, d0
   da8ee:	43ba      	bics	r2, r7
   da8f0:	f000 8098 	beq.w	daa24 <__ieee754_sqrt+0x140>
   da8f4:	2f00      	cmp	r7, #0
   da8f6:	ee10 4a10 	vmov	r4, s0
   da8fa:	463b      	mov	r3, r7
   da8fc:	dd4e      	ble.n	da99c <__ieee754_sqrt+0xb8>
   da8fe:	1539      	asrs	r1, r7, #20
   da900:	d05b      	beq.n	da9ba <__ieee754_sqrt+0xd6>
   da902:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da906:	07ca      	lsls	r2, r1, #31
   da908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da90c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   da910:	d403      	bmi.n	da91a <__ieee754_sqrt+0x36>
   da912:	005b      	lsls	r3, r3, #1
   da914:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da918:	0064      	lsls	r4, r4, #1
   da91a:	0fe2      	lsrs	r2, r4, #31
   da91c:	f04f 0c00 	mov.w	ip, #0
   da920:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   da924:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   da928:	0064      	lsls	r4, r4, #1
   da92a:	4666      	mov	r6, ip
   da92c:	2516      	movs	r5, #22
   da92e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   da932:	18b1      	adds	r1, r6, r2
   da934:	4299      	cmp	r1, r3
   da936:	dc02      	bgt.n	da93e <__ieee754_sqrt+0x5a>
   da938:	1a5b      	subs	r3, r3, r1
   da93a:	188e      	adds	r6, r1, r2
   da93c:	4494      	add	ip, r2
   da93e:	005b      	lsls	r3, r3, #1
   da940:	3d01      	subs	r5, #1
   da942:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da946:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da94a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da94e:	d1f0      	bne.n	da932 <__ieee754_sqrt+0x4e>
   da950:	462f      	mov	r7, r5
   da952:	2020      	movs	r0, #32
   da954:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   da958:	e009      	b.n	da96e <__ieee754_sqrt+0x8a>
   da95a:	d03e      	beq.n	da9da <__ieee754_sqrt+0xf6>
   da95c:	0fe1      	lsrs	r1, r4, #31
   da95e:	3801      	subs	r0, #1
   da960:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da964:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   da968:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da96c:	d03e      	beq.n	da9ec <__ieee754_sqrt+0x108>
   da96e:	42b3      	cmp	r3, r6
   da970:	eb02 0105 	add.w	r1, r2, r5
   da974:	ddf1      	ble.n	da95a <__ieee754_sqrt+0x76>
   da976:	2900      	cmp	r1, #0
   da978:	eb01 0502 	add.w	r5, r1, r2
   da97c:	db09      	blt.n	da992 <__ieee754_sqrt+0xae>
   da97e:	46b0      	mov	r8, r6
   da980:	1b9b      	subs	r3, r3, r6
   da982:	42a1      	cmp	r1, r4
   da984:	bf88      	it	hi
   da986:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   da98a:	1a64      	subs	r4, r4, r1
   da98c:	4417      	add	r7, r2
   da98e:	4646      	mov	r6, r8
   da990:	e7e4      	b.n	da95c <__ieee754_sqrt+0x78>
   da992:	2d00      	cmp	r5, #0
   da994:	dbf3      	blt.n	da97e <__ieee754_sqrt+0x9a>
   da996:	f106 0801 	add.w	r8, r6, #1
   da99a:	e7f1      	b.n	da980 <__ieee754_sqrt+0x9c>
   da99c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   da9a0:	4332      	orrs	r2, r6
   da9a2:	d036      	beq.n	daa12 <__ieee754_sqrt+0x12e>
   da9a4:	2f00      	cmp	r7, #0
   da9a6:	d14d      	bne.n	daa44 <__ieee754_sqrt+0x160>
   da9a8:	4639      	mov	r1, r7
   da9aa:	0ae2      	lsrs	r2, r4, #11
   da9ac:	3915      	subs	r1, #21
   da9ae:	0564      	lsls	r4, r4, #21
   da9b0:	4613      	mov	r3, r2
   da9b2:	2a00      	cmp	r2, #0
   da9b4:	d0f9      	beq.n	da9aa <__ieee754_sqrt+0xc6>
   da9b6:	02d7      	lsls	r7, r2, #11
   da9b8:	d451      	bmi.n	daa5e <__ieee754_sqrt+0x17a>
   da9ba:	2000      	movs	r0, #0
   da9bc:	005b      	lsls	r3, r3, #1
   da9be:	02de      	lsls	r6, r3, #11
   da9c0:	4605      	mov	r5, r0
   da9c2:	f100 0001 	add.w	r0, r0, #1
   da9c6:	d5f9      	bpl.n	da9bc <__ieee754_sqrt+0xd8>
   da9c8:	461a      	mov	r2, r3
   da9ca:	4623      	mov	r3, r4
   da9cc:	4084      	lsls	r4, r0
   da9ce:	f1c0 0020 	rsb	r0, r0, #32
   da9d2:	40c3      	lsrs	r3, r0
   da9d4:	4313      	orrs	r3, r2
   da9d6:	1b49      	subs	r1, r1, r5
   da9d8:	e793      	b.n	da902 <__ieee754_sqrt+0x1e>
   da9da:	42a1      	cmp	r1, r4
   da9dc:	d8be      	bhi.n	da95c <__ieee754_sqrt+0x78>
   da9de:	2900      	cmp	r1, #0
   da9e0:	eb01 0502 	add.w	r5, r1, r2
   da9e4:	dbd5      	blt.n	da992 <__ieee754_sqrt+0xae>
   da9e6:	4698      	mov	r8, r3
   da9e8:	2300      	movs	r3, #0
   da9ea:	e7ce      	b.n	da98a <__ieee754_sqrt+0xa6>
   da9ec:	4323      	orrs	r3, r4
   da9ee:	d112      	bne.n	daa16 <__ieee754_sqrt+0x132>
   da9f0:	0878      	lsrs	r0, r7, #1
   da9f2:	ea4f 016c 	mov.w	r1, ip, asr #1
   da9f6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da9fa:	f01c 0f01 	tst.w	ip, #1
   da9fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   daa02:	bf18      	it	ne
   daa04:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   daa08:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   daa0c:	4602      	mov	r2, r0
   daa0e:	ec43 2b10 	vmov	d0, r2, r3
   daa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daa16:	1c7b      	adds	r3, r7, #1
   daa18:	bf16      	itet	ne
   daa1a:	1c78      	addne	r0, r7, #1
   daa1c:	f10c 0c01 	addeq.w	ip, ip, #1
   daa20:	0840      	lsrne	r0, r0, #1
   daa22:	e7e6      	b.n	da9f2 <__ieee754_sqrt+0x10e>
   daa24:	ee10 2a10 	vmov	r2, s0
   daa28:	ee10 0a10 	vmov	r0, s0
   daa2c:	463b      	mov	r3, r7
   daa2e:	4639      	mov	r1, r7
   daa30:	f000 f9da 	bl	dade8 <__aeabi_dmul>
   daa34:	4632      	mov	r2, r6
   daa36:	463b      	mov	r3, r7
   daa38:	f000 f820 	bl	daa7c <__adddf3>
   daa3c:	ec41 0b10 	vmov	d0, r0, r1
   daa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daa44:	ee10 2a10 	vmov	r2, s0
   daa48:	4630      	mov	r0, r6
   daa4a:	4639      	mov	r1, r7
   daa4c:	f000 f814 	bl	daa78 <__aeabi_dsub>
   daa50:	4602      	mov	r2, r0
   daa52:	460b      	mov	r3, r1
   daa54:	f000 faf2 	bl	db03c <__aeabi_ddiv>
   daa58:	ec41 0b10 	vmov	d0, r0, r1
   daa5c:	e7d9      	b.n	daa12 <__ieee754_sqrt+0x12e>
   daa5e:	4623      	mov	r3, r4
   daa60:	2020      	movs	r0, #32
   daa62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   daa66:	e7b4      	b.n	da9d2 <__ieee754_sqrt+0xee>
   daa68:	7ff00000 	.word	0x7ff00000

000daa6c <matherr>:
   daa6c:	2000      	movs	r0, #0
   daa6e:	4770      	bx	lr

000daa70 <__aeabi_drsub>:
   daa70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   daa74:	e002      	b.n	daa7c <__adddf3>
   daa76:	bf00      	nop

000daa78 <__aeabi_dsub>:
   daa78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000daa7c <__adddf3>:
   daa7c:	b530      	push	{r4, r5, lr}
   daa7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   daa82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   daa86:	ea94 0f05 	teq	r4, r5
   daa8a:	bf08      	it	eq
   daa8c:	ea90 0f02 	teqeq	r0, r2
   daa90:	bf1f      	itttt	ne
   daa92:	ea54 0c00 	orrsne.w	ip, r4, r0
   daa96:	ea55 0c02 	orrsne.w	ip, r5, r2
   daa9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   daa9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   daaa2:	f000 80e2 	beq.w	dac6a <__adddf3+0x1ee>
   daaa6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   daaaa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   daaae:	bfb8      	it	lt
   daab0:	426d      	neglt	r5, r5
   daab2:	dd0c      	ble.n	daace <__adddf3+0x52>
   daab4:	442c      	add	r4, r5
   daab6:	ea80 0202 	eor.w	r2, r0, r2
   daaba:	ea81 0303 	eor.w	r3, r1, r3
   daabe:	ea82 0000 	eor.w	r0, r2, r0
   daac2:	ea83 0101 	eor.w	r1, r3, r1
   daac6:	ea80 0202 	eor.w	r2, r0, r2
   daaca:	ea81 0303 	eor.w	r3, r1, r3
   daace:	2d36      	cmp	r5, #54	; 0x36
   daad0:	bf88      	it	hi
   daad2:	bd30      	pophi	{r4, r5, pc}
   daad4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daadc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   daae0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   daae4:	d002      	beq.n	daaec <__adddf3+0x70>
   daae6:	4240      	negs	r0, r0
   daae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daaec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   daaf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daaf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   daaf8:	d002      	beq.n	dab00 <__adddf3+0x84>
   daafa:	4252      	negs	r2, r2
   daafc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dab00:	ea94 0f05 	teq	r4, r5
   dab04:	f000 80a7 	beq.w	dac56 <__adddf3+0x1da>
   dab08:	f1a4 0401 	sub.w	r4, r4, #1
   dab0c:	f1d5 0e20 	rsbs	lr, r5, #32
   dab10:	db0d      	blt.n	dab2e <__adddf3+0xb2>
   dab12:	fa02 fc0e 	lsl.w	ip, r2, lr
   dab16:	fa22 f205 	lsr.w	r2, r2, r5
   dab1a:	1880      	adds	r0, r0, r2
   dab1c:	f141 0100 	adc.w	r1, r1, #0
   dab20:	fa03 f20e 	lsl.w	r2, r3, lr
   dab24:	1880      	adds	r0, r0, r2
   dab26:	fa43 f305 	asr.w	r3, r3, r5
   dab2a:	4159      	adcs	r1, r3
   dab2c:	e00e      	b.n	dab4c <__adddf3+0xd0>
   dab2e:	f1a5 0520 	sub.w	r5, r5, #32
   dab32:	f10e 0e20 	add.w	lr, lr, #32
   dab36:	2a01      	cmp	r2, #1
   dab38:	fa03 fc0e 	lsl.w	ip, r3, lr
   dab3c:	bf28      	it	cs
   dab3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   dab42:	fa43 f305 	asr.w	r3, r3, r5
   dab46:	18c0      	adds	r0, r0, r3
   dab48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dab4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dab50:	d507      	bpl.n	dab62 <__adddf3+0xe6>
   dab52:	f04f 0e00 	mov.w	lr, #0
   dab56:	f1dc 0c00 	rsbs	ip, ip, #0
   dab5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   dab5e:	eb6e 0101 	sbc.w	r1, lr, r1
   dab62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dab66:	d31b      	bcc.n	daba0 <__adddf3+0x124>
   dab68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dab6c:	d30c      	bcc.n	dab88 <__adddf3+0x10c>
   dab6e:	0849      	lsrs	r1, r1, #1
   dab70:	ea5f 0030 	movs.w	r0, r0, rrx
   dab74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dab78:	f104 0401 	add.w	r4, r4, #1
   dab7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dab80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dab84:	f080 809a 	bcs.w	dacbc <__adddf3+0x240>
   dab88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dab8c:	bf08      	it	eq
   dab8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab92:	f150 0000 	adcs.w	r0, r0, #0
   dab96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab9a:	ea41 0105 	orr.w	r1, r1, r5
   dab9e:	bd30      	pop	{r4, r5, pc}
   daba0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   daba4:	4140      	adcs	r0, r0
   daba6:	eb41 0101 	adc.w	r1, r1, r1
   dabaa:	3c01      	subs	r4, #1
   dabac:	bf28      	it	cs
   dabae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dabb2:	d2e9      	bcs.n	dab88 <__adddf3+0x10c>
   dabb4:	f091 0f00 	teq	r1, #0
   dabb8:	bf04      	itt	eq
   dabba:	4601      	moveq	r1, r0
   dabbc:	2000      	moveq	r0, #0
   dabbe:	fab1 f381 	clz	r3, r1
   dabc2:	bf08      	it	eq
   dabc4:	3320      	addeq	r3, #32
   dabc6:	f1a3 030b 	sub.w	r3, r3, #11
   dabca:	f1b3 0220 	subs.w	r2, r3, #32
   dabce:	da0c      	bge.n	dabea <__adddf3+0x16e>
   dabd0:	320c      	adds	r2, #12
   dabd2:	dd08      	ble.n	dabe6 <__adddf3+0x16a>
   dabd4:	f102 0c14 	add.w	ip, r2, #20
   dabd8:	f1c2 020c 	rsb	r2, r2, #12
   dabdc:	fa01 f00c 	lsl.w	r0, r1, ip
   dabe0:	fa21 f102 	lsr.w	r1, r1, r2
   dabe4:	e00c      	b.n	dac00 <__adddf3+0x184>
   dabe6:	f102 0214 	add.w	r2, r2, #20
   dabea:	bfd8      	it	le
   dabec:	f1c2 0c20 	rsble	ip, r2, #32
   dabf0:	fa01 f102 	lsl.w	r1, r1, r2
   dabf4:	fa20 fc0c 	lsr.w	ip, r0, ip
   dabf8:	bfdc      	itt	le
   dabfa:	ea41 010c 	orrle.w	r1, r1, ip
   dabfe:	4090      	lslle	r0, r2
   dac00:	1ae4      	subs	r4, r4, r3
   dac02:	bfa2      	ittt	ge
   dac04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dac08:	4329      	orrge	r1, r5
   dac0a:	bd30      	popge	{r4, r5, pc}
   dac0c:	ea6f 0404 	mvn.w	r4, r4
   dac10:	3c1f      	subs	r4, #31
   dac12:	da1c      	bge.n	dac4e <__adddf3+0x1d2>
   dac14:	340c      	adds	r4, #12
   dac16:	dc0e      	bgt.n	dac36 <__adddf3+0x1ba>
   dac18:	f104 0414 	add.w	r4, r4, #20
   dac1c:	f1c4 0220 	rsb	r2, r4, #32
   dac20:	fa20 f004 	lsr.w	r0, r0, r4
   dac24:	fa01 f302 	lsl.w	r3, r1, r2
   dac28:	ea40 0003 	orr.w	r0, r0, r3
   dac2c:	fa21 f304 	lsr.w	r3, r1, r4
   dac30:	ea45 0103 	orr.w	r1, r5, r3
   dac34:	bd30      	pop	{r4, r5, pc}
   dac36:	f1c4 040c 	rsb	r4, r4, #12
   dac3a:	f1c4 0220 	rsb	r2, r4, #32
   dac3e:	fa20 f002 	lsr.w	r0, r0, r2
   dac42:	fa01 f304 	lsl.w	r3, r1, r4
   dac46:	ea40 0003 	orr.w	r0, r0, r3
   dac4a:	4629      	mov	r1, r5
   dac4c:	bd30      	pop	{r4, r5, pc}
   dac4e:	fa21 f004 	lsr.w	r0, r1, r4
   dac52:	4629      	mov	r1, r5
   dac54:	bd30      	pop	{r4, r5, pc}
   dac56:	f094 0f00 	teq	r4, #0
   dac5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dac5e:	bf06      	itte	eq
   dac60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dac64:	3401      	addeq	r4, #1
   dac66:	3d01      	subne	r5, #1
   dac68:	e74e      	b.n	dab08 <__adddf3+0x8c>
   dac6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dac6e:	bf18      	it	ne
   dac70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dac74:	d029      	beq.n	dacca <__adddf3+0x24e>
   dac76:	ea94 0f05 	teq	r4, r5
   dac7a:	bf08      	it	eq
   dac7c:	ea90 0f02 	teqeq	r0, r2
   dac80:	d005      	beq.n	dac8e <__adddf3+0x212>
   dac82:	ea54 0c00 	orrs.w	ip, r4, r0
   dac86:	bf04      	itt	eq
   dac88:	4619      	moveq	r1, r3
   dac8a:	4610      	moveq	r0, r2
   dac8c:	bd30      	pop	{r4, r5, pc}
   dac8e:	ea91 0f03 	teq	r1, r3
   dac92:	bf1e      	ittt	ne
   dac94:	2100      	movne	r1, #0
   dac96:	2000      	movne	r0, #0
   dac98:	bd30      	popne	{r4, r5, pc}
   dac9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dac9e:	d105      	bne.n	dacac <__adddf3+0x230>
   daca0:	0040      	lsls	r0, r0, #1
   daca2:	4149      	adcs	r1, r1
   daca4:	bf28      	it	cs
   daca6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dacaa:	bd30      	pop	{r4, r5, pc}
   dacac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dacb0:	bf3c      	itt	cc
   dacb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dacb6:	bd30      	popcc	{r4, r5, pc}
   dacb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dacbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dacc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dacc4:	f04f 0000 	mov.w	r0, #0
   dacc8:	bd30      	pop	{r4, r5, pc}
   dacca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dacce:	bf1a      	itte	ne
   dacd0:	4619      	movne	r1, r3
   dacd2:	4610      	movne	r0, r2
   dacd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dacd8:	bf1c      	itt	ne
   dacda:	460b      	movne	r3, r1
   dacdc:	4602      	movne	r2, r0
   dacde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dace2:	bf06      	itte	eq
   dace4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dace8:	ea91 0f03 	teqeq	r1, r3
   dacec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dacf0:	bd30      	pop	{r4, r5, pc}
   dacf2:	bf00      	nop

000dacf4 <__aeabi_ui2d>:
   dacf4:	f090 0f00 	teq	r0, #0
   dacf8:	bf04      	itt	eq
   dacfa:	2100      	moveq	r1, #0
   dacfc:	4770      	bxeq	lr
   dacfe:	b530      	push	{r4, r5, lr}
   dad00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dad04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dad08:	f04f 0500 	mov.w	r5, #0
   dad0c:	f04f 0100 	mov.w	r1, #0
   dad10:	e750      	b.n	dabb4 <__adddf3+0x138>
   dad12:	bf00      	nop

000dad14 <__aeabi_i2d>:
   dad14:	f090 0f00 	teq	r0, #0
   dad18:	bf04      	itt	eq
   dad1a:	2100      	moveq	r1, #0
   dad1c:	4770      	bxeq	lr
   dad1e:	b530      	push	{r4, r5, lr}
   dad20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dad24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dad28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dad2c:	bf48      	it	mi
   dad2e:	4240      	negmi	r0, r0
   dad30:	f04f 0100 	mov.w	r1, #0
   dad34:	e73e      	b.n	dabb4 <__adddf3+0x138>
   dad36:	bf00      	nop

000dad38 <__aeabi_f2d>:
   dad38:	0042      	lsls	r2, r0, #1
   dad3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dad3e:	ea4f 0131 	mov.w	r1, r1, rrx
   dad42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dad46:	bf1f      	itttt	ne
   dad48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dad4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dad50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dad54:	4770      	bxne	lr
   dad56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dad5a:	bf08      	it	eq
   dad5c:	4770      	bxeq	lr
   dad5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dad62:	bf04      	itt	eq
   dad64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dad68:	4770      	bxeq	lr
   dad6a:	b530      	push	{r4, r5, lr}
   dad6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   dad70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dad74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dad78:	e71c      	b.n	dabb4 <__adddf3+0x138>
   dad7a:	bf00      	nop

000dad7c <__aeabi_ul2d>:
   dad7c:	ea50 0201 	orrs.w	r2, r0, r1
   dad80:	bf08      	it	eq
   dad82:	4770      	bxeq	lr
   dad84:	b530      	push	{r4, r5, lr}
   dad86:	f04f 0500 	mov.w	r5, #0
   dad8a:	e00a      	b.n	dada2 <__aeabi_l2d+0x16>

000dad8c <__aeabi_l2d>:
   dad8c:	ea50 0201 	orrs.w	r2, r0, r1
   dad90:	bf08      	it	eq
   dad92:	4770      	bxeq	lr
   dad94:	b530      	push	{r4, r5, lr}
   dad96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dad9a:	d502      	bpl.n	dada2 <__aeabi_l2d+0x16>
   dad9c:	4240      	negs	r0, r0
   dad9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dada2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dada6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dadaa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dadae:	f43f aed8 	beq.w	dab62 <__adddf3+0xe6>
   dadb2:	f04f 0203 	mov.w	r2, #3
   dadb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dadba:	bf18      	it	ne
   dadbc:	3203      	addne	r2, #3
   dadbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dadc2:	bf18      	it	ne
   dadc4:	3203      	addne	r2, #3
   dadc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dadca:	f1c2 0320 	rsb	r3, r2, #32
   dadce:	fa00 fc03 	lsl.w	ip, r0, r3
   dadd2:	fa20 f002 	lsr.w	r0, r0, r2
   dadd6:	fa01 fe03 	lsl.w	lr, r1, r3
   dadda:	ea40 000e 	orr.w	r0, r0, lr
   dadde:	fa21 f102 	lsr.w	r1, r1, r2
   dade2:	4414      	add	r4, r2
   dade4:	e6bd      	b.n	dab62 <__adddf3+0xe6>
   dade6:	bf00      	nop

000dade8 <__aeabi_dmul>:
   dade8:	b570      	push	{r4, r5, r6, lr}
   dadea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dadee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dadf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dadf6:	bf1d      	ittte	ne
   dadf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dadfc:	ea94 0f0c 	teqne	r4, ip
   dae00:	ea95 0f0c 	teqne	r5, ip
   dae04:	f000 f8de 	bleq	dafc4 <__aeabi_dmul+0x1dc>
   dae08:	442c      	add	r4, r5
   dae0a:	ea81 0603 	eor.w	r6, r1, r3
   dae0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dae12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dae16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dae1a:	bf18      	it	ne
   dae1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dae20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dae28:	d038      	beq.n	dae9c <__aeabi_dmul+0xb4>
   dae2a:	fba0 ce02 	umull	ip, lr, r0, r2
   dae2e:	f04f 0500 	mov.w	r5, #0
   dae32:	fbe1 e502 	umlal	lr, r5, r1, r2
   dae36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dae3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   dae3e:	f04f 0600 	mov.w	r6, #0
   dae42:	fbe1 5603 	umlal	r5, r6, r1, r3
   dae46:	f09c 0f00 	teq	ip, #0
   dae4a:	bf18      	it	ne
   dae4c:	f04e 0e01 	orrne.w	lr, lr, #1
   dae50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dae54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dae58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dae5c:	d204      	bcs.n	dae68 <__aeabi_dmul+0x80>
   dae5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dae62:	416d      	adcs	r5, r5
   dae64:	eb46 0606 	adc.w	r6, r6, r6
   dae68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dae6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dae70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dae74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dae78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dae7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dae80:	bf88      	it	hi
   dae82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dae86:	d81e      	bhi.n	daec6 <__aeabi_dmul+0xde>
   dae88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dae8c:	bf08      	it	eq
   dae8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dae92:	f150 0000 	adcs.w	r0, r0, #0
   dae96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dae9a:	bd70      	pop	{r4, r5, r6, pc}
   dae9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daea0:	ea46 0101 	orr.w	r1, r6, r1
   daea4:	ea40 0002 	orr.w	r0, r0, r2
   daea8:	ea81 0103 	eor.w	r1, r1, r3
   daeac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   daeb0:	bfc2      	ittt	gt
   daeb2:	ebd4 050c 	rsbsgt	r5, r4, ip
   daeb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daeba:	bd70      	popgt	{r4, r5, r6, pc}
   daebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daec0:	f04f 0e00 	mov.w	lr, #0
   daec4:	3c01      	subs	r4, #1
   daec6:	f300 80ab 	bgt.w	db020 <__aeabi_dmul+0x238>
   daeca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   daece:	bfde      	ittt	le
   daed0:	2000      	movle	r0, #0
   daed2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   daed6:	bd70      	pople	{r4, r5, r6, pc}
   daed8:	f1c4 0400 	rsb	r4, r4, #0
   daedc:	3c20      	subs	r4, #32
   daede:	da35      	bge.n	daf4c <__aeabi_dmul+0x164>
   daee0:	340c      	adds	r4, #12
   daee2:	dc1b      	bgt.n	daf1c <__aeabi_dmul+0x134>
   daee4:	f104 0414 	add.w	r4, r4, #20
   daee8:	f1c4 0520 	rsb	r5, r4, #32
   daeec:	fa00 f305 	lsl.w	r3, r0, r5
   daef0:	fa20 f004 	lsr.w	r0, r0, r4
   daef4:	fa01 f205 	lsl.w	r2, r1, r5
   daef8:	ea40 0002 	orr.w	r0, r0, r2
   daefc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   daf00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   daf04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daf08:	fa21 f604 	lsr.w	r6, r1, r4
   daf0c:	eb42 0106 	adc.w	r1, r2, r6
   daf10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daf14:	bf08      	it	eq
   daf16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daf1a:	bd70      	pop	{r4, r5, r6, pc}
   daf1c:	f1c4 040c 	rsb	r4, r4, #12
   daf20:	f1c4 0520 	rsb	r5, r4, #32
   daf24:	fa00 f304 	lsl.w	r3, r0, r4
   daf28:	fa20 f005 	lsr.w	r0, r0, r5
   daf2c:	fa01 f204 	lsl.w	r2, r1, r4
   daf30:	ea40 0002 	orr.w	r0, r0, r2
   daf34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daf38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daf3c:	f141 0100 	adc.w	r1, r1, #0
   daf40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daf44:	bf08      	it	eq
   daf46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daf4a:	bd70      	pop	{r4, r5, r6, pc}
   daf4c:	f1c4 0520 	rsb	r5, r4, #32
   daf50:	fa00 f205 	lsl.w	r2, r0, r5
   daf54:	ea4e 0e02 	orr.w	lr, lr, r2
   daf58:	fa20 f304 	lsr.w	r3, r0, r4
   daf5c:	fa01 f205 	lsl.w	r2, r1, r5
   daf60:	ea43 0302 	orr.w	r3, r3, r2
   daf64:	fa21 f004 	lsr.w	r0, r1, r4
   daf68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daf6c:	fa21 f204 	lsr.w	r2, r1, r4
   daf70:	ea20 0002 	bic.w	r0, r0, r2
   daf74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   daf78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daf7c:	bf08      	it	eq
   daf7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daf82:	bd70      	pop	{r4, r5, r6, pc}
   daf84:	f094 0f00 	teq	r4, #0
   daf88:	d10f      	bne.n	dafaa <__aeabi_dmul+0x1c2>
   daf8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   daf8e:	0040      	lsls	r0, r0, #1
   daf90:	eb41 0101 	adc.w	r1, r1, r1
   daf94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daf98:	bf08      	it	eq
   daf9a:	3c01      	subeq	r4, #1
   daf9c:	d0f7      	beq.n	daf8e <__aeabi_dmul+0x1a6>
   daf9e:	ea41 0106 	orr.w	r1, r1, r6
   dafa2:	f095 0f00 	teq	r5, #0
   dafa6:	bf18      	it	ne
   dafa8:	4770      	bxne	lr
   dafaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dafae:	0052      	lsls	r2, r2, #1
   dafb0:	eb43 0303 	adc.w	r3, r3, r3
   dafb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dafb8:	bf08      	it	eq
   dafba:	3d01      	subeq	r5, #1
   dafbc:	d0f7      	beq.n	dafae <__aeabi_dmul+0x1c6>
   dafbe:	ea43 0306 	orr.w	r3, r3, r6
   dafc2:	4770      	bx	lr
   dafc4:	ea94 0f0c 	teq	r4, ip
   dafc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dafcc:	bf18      	it	ne
   dafce:	ea95 0f0c 	teqne	r5, ip
   dafd2:	d00c      	beq.n	dafee <__aeabi_dmul+0x206>
   dafd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dafd8:	bf18      	it	ne
   dafda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dafde:	d1d1      	bne.n	daf84 <__aeabi_dmul+0x19c>
   dafe0:	ea81 0103 	eor.w	r1, r1, r3
   dafe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dafe8:	f04f 0000 	mov.w	r0, #0
   dafec:	bd70      	pop	{r4, r5, r6, pc}
   dafee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daff2:	bf06      	itte	eq
   daff4:	4610      	moveq	r0, r2
   daff6:	4619      	moveq	r1, r3
   daff8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daffc:	d019      	beq.n	db032 <__aeabi_dmul+0x24a>
   daffe:	ea94 0f0c 	teq	r4, ip
   db002:	d102      	bne.n	db00a <__aeabi_dmul+0x222>
   db004:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db008:	d113      	bne.n	db032 <__aeabi_dmul+0x24a>
   db00a:	ea95 0f0c 	teq	r5, ip
   db00e:	d105      	bne.n	db01c <__aeabi_dmul+0x234>
   db010:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db014:	bf1c      	itt	ne
   db016:	4610      	movne	r0, r2
   db018:	4619      	movne	r1, r3
   db01a:	d10a      	bne.n	db032 <__aeabi_dmul+0x24a>
   db01c:	ea81 0103 	eor.w	r1, r1, r3
   db020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db024:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db028:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db02c:	f04f 0000 	mov.w	r0, #0
   db030:	bd70      	pop	{r4, r5, r6, pc}
   db032:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db036:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db03a:	bd70      	pop	{r4, r5, r6, pc}

000db03c <__aeabi_ddiv>:
   db03c:	b570      	push	{r4, r5, r6, lr}
   db03e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db04a:	bf1d      	ittte	ne
   db04c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db050:	ea94 0f0c 	teqne	r4, ip
   db054:	ea95 0f0c 	teqne	r5, ip
   db058:	f000 f8a7 	bleq	db1aa <__aeabi_ddiv+0x16e>
   db05c:	eba4 0405 	sub.w	r4, r4, r5
   db060:	ea81 0e03 	eor.w	lr, r1, r3
   db064:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db068:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db06c:	f000 8088 	beq.w	db180 <__aeabi_ddiv+0x144>
   db070:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db074:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db078:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db07c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db080:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db084:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db088:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db08c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db090:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db094:	429d      	cmp	r5, r3
   db096:	bf08      	it	eq
   db098:	4296      	cmpeq	r6, r2
   db09a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db09e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db0a2:	d202      	bcs.n	db0aa <__aeabi_ddiv+0x6e>
   db0a4:	085b      	lsrs	r3, r3, #1
   db0a6:	ea4f 0232 	mov.w	r2, r2, rrx
   db0aa:	1ab6      	subs	r6, r6, r2
   db0ac:	eb65 0503 	sbc.w	r5, r5, r3
   db0b0:	085b      	lsrs	r3, r3, #1
   db0b2:	ea4f 0232 	mov.w	r2, r2, rrx
   db0b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db0ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db0be:	ebb6 0e02 	subs.w	lr, r6, r2
   db0c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   db0c6:	bf22      	ittt	cs
   db0c8:	1ab6      	subcs	r6, r6, r2
   db0ca:	4675      	movcs	r5, lr
   db0cc:	ea40 000c 	orrcs.w	r0, r0, ip
   db0d0:	085b      	lsrs	r3, r3, #1
   db0d2:	ea4f 0232 	mov.w	r2, r2, rrx
   db0d6:	ebb6 0e02 	subs.w	lr, r6, r2
   db0da:	eb75 0e03 	sbcs.w	lr, r5, r3
   db0de:	bf22      	ittt	cs
   db0e0:	1ab6      	subcs	r6, r6, r2
   db0e2:	4675      	movcs	r5, lr
   db0e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db0e8:	085b      	lsrs	r3, r3, #1
   db0ea:	ea4f 0232 	mov.w	r2, r2, rrx
   db0ee:	ebb6 0e02 	subs.w	lr, r6, r2
   db0f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   db0f6:	bf22      	ittt	cs
   db0f8:	1ab6      	subcs	r6, r6, r2
   db0fa:	4675      	movcs	r5, lr
   db0fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db100:	085b      	lsrs	r3, r3, #1
   db102:	ea4f 0232 	mov.w	r2, r2, rrx
   db106:	ebb6 0e02 	subs.w	lr, r6, r2
   db10a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db10e:	bf22      	ittt	cs
   db110:	1ab6      	subcs	r6, r6, r2
   db112:	4675      	movcs	r5, lr
   db114:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db118:	ea55 0e06 	orrs.w	lr, r5, r6
   db11c:	d018      	beq.n	db150 <__aeabi_ddiv+0x114>
   db11e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db122:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db126:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db12a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db12e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db132:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db136:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db13a:	d1c0      	bne.n	db0be <__aeabi_ddiv+0x82>
   db13c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db140:	d10b      	bne.n	db15a <__aeabi_ddiv+0x11e>
   db142:	ea41 0100 	orr.w	r1, r1, r0
   db146:	f04f 0000 	mov.w	r0, #0
   db14a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db14e:	e7b6      	b.n	db0be <__aeabi_ddiv+0x82>
   db150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db154:	bf04      	itt	eq
   db156:	4301      	orreq	r1, r0
   db158:	2000      	moveq	r0, #0
   db15a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db15e:	bf88      	it	hi
   db160:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db164:	f63f aeaf 	bhi.w	daec6 <__aeabi_dmul+0xde>
   db168:	ebb5 0c03 	subs.w	ip, r5, r3
   db16c:	bf04      	itt	eq
   db16e:	ebb6 0c02 	subseq.w	ip, r6, r2
   db172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db176:	f150 0000 	adcs.w	r0, r0, #0
   db17a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db17e:	bd70      	pop	{r4, r5, r6, pc}
   db180:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db184:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db188:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db18c:	bfc2      	ittt	gt
   db18e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db196:	bd70      	popgt	{r4, r5, r6, pc}
   db198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db19c:	f04f 0e00 	mov.w	lr, #0
   db1a0:	3c01      	subs	r4, #1
   db1a2:	e690      	b.n	daec6 <__aeabi_dmul+0xde>
   db1a4:	ea45 0e06 	orr.w	lr, r5, r6
   db1a8:	e68d      	b.n	daec6 <__aeabi_dmul+0xde>
   db1aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db1ae:	ea94 0f0c 	teq	r4, ip
   db1b2:	bf08      	it	eq
   db1b4:	ea95 0f0c 	teqeq	r5, ip
   db1b8:	f43f af3b 	beq.w	db032 <__aeabi_dmul+0x24a>
   db1bc:	ea94 0f0c 	teq	r4, ip
   db1c0:	d10a      	bne.n	db1d8 <__aeabi_ddiv+0x19c>
   db1c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db1c6:	f47f af34 	bne.w	db032 <__aeabi_dmul+0x24a>
   db1ca:	ea95 0f0c 	teq	r5, ip
   db1ce:	f47f af25 	bne.w	db01c <__aeabi_dmul+0x234>
   db1d2:	4610      	mov	r0, r2
   db1d4:	4619      	mov	r1, r3
   db1d6:	e72c      	b.n	db032 <__aeabi_dmul+0x24a>
   db1d8:	ea95 0f0c 	teq	r5, ip
   db1dc:	d106      	bne.n	db1ec <__aeabi_ddiv+0x1b0>
   db1de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db1e2:	f43f aefd 	beq.w	dafe0 <__aeabi_dmul+0x1f8>
   db1e6:	4610      	mov	r0, r2
   db1e8:	4619      	mov	r1, r3
   db1ea:	e722      	b.n	db032 <__aeabi_dmul+0x24a>
   db1ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db1f0:	bf18      	it	ne
   db1f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db1f6:	f47f aec5 	bne.w	daf84 <__aeabi_dmul+0x19c>
   db1fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db1fe:	f47f af0d 	bne.w	db01c <__aeabi_dmul+0x234>
   db202:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db206:	f47f aeeb 	bne.w	dafe0 <__aeabi_dmul+0x1f8>
   db20a:	e712      	b.n	db032 <__aeabi_dmul+0x24a>

000db20c <__gedf2>:
   db20c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db210:	e006      	b.n	db220 <__cmpdf2+0x4>
   db212:	bf00      	nop

000db214 <__ledf2>:
   db214:	f04f 0c01 	mov.w	ip, #1
   db218:	e002      	b.n	db220 <__cmpdf2+0x4>
   db21a:	bf00      	nop

000db21c <__cmpdf2>:
   db21c:	f04f 0c01 	mov.w	ip, #1
   db220:	f84d cd04 	str.w	ip, [sp, #-4]!
   db224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db22c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db230:	bf18      	it	ne
   db232:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db236:	d01b      	beq.n	db270 <__cmpdf2+0x54>
   db238:	b001      	add	sp, #4
   db23a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db23e:	bf0c      	ite	eq
   db240:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db244:	ea91 0f03 	teqne	r1, r3
   db248:	bf02      	ittt	eq
   db24a:	ea90 0f02 	teqeq	r0, r2
   db24e:	2000      	moveq	r0, #0
   db250:	4770      	bxeq	lr
   db252:	f110 0f00 	cmn.w	r0, #0
   db256:	ea91 0f03 	teq	r1, r3
   db25a:	bf58      	it	pl
   db25c:	4299      	cmppl	r1, r3
   db25e:	bf08      	it	eq
   db260:	4290      	cmpeq	r0, r2
   db262:	bf2c      	ite	cs
   db264:	17d8      	asrcs	r0, r3, #31
   db266:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db26a:	f040 0001 	orr.w	r0, r0, #1
   db26e:	4770      	bx	lr
   db270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db278:	d102      	bne.n	db280 <__cmpdf2+0x64>
   db27a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db27e:	d107      	bne.n	db290 <__cmpdf2+0x74>
   db280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db288:	d1d6      	bne.n	db238 <__cmpdf2+0x1c>
   db28a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db28e:	d0d3      	beq.n	db238 <__cmpdf2+0x1c>
   db290:	f85d 0b04 	ldr.w	r0, [sp], #4
   db294:	4770      	bx	lr
   db296:	bf00      	nop

000db298 <__aeabi_cdrcmple>:
   db298:	4684      	mov	ip, r0
   db29a:	4610      	mov	r0, r2
   db29c:	4662      	mov	r2, ip
   db29e:	468c      	mov	ip, r1
   db2a0:	4619      	mov	r1, r3
   db2a2:	4663      	mov	r3, ip
   db2a4:	e000      	b.n	db2a8 <__aeabi_cdcmpeq>
   db2a6:	bf00      	nop

000db2a8 <__aeabi_cdcmpeq>:
   db2a8:	b501      	push	{r0, lr}
   db2aa:	f7ff ffb7 	bl	db21c <__cmpdf2>
   db2ae:	2800      	cmp	r0, #0
   db2b0:	bf48      	it	mi
   db2b2:	f110 0f00 	cmnmi.w	r0, #0
   db2b6:	bd01      	pop	{r0, pc}

000db2b8 <__aeabi_dcmpeq>:
   db2b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   db2bc:	f7ff fff4 	bl	db2a8 <__aeabi_cdcmpeq>
   db2c0:	bf0c      	ite	eq
   db2c2:	2001      	moveq	r0, #1
   db2c4:	2000      	movne	r0, #0
   db2c6:	f85d fb08 	ldr.w	pc, [sp], #8
   db2ca:	bf00      	nop

000db2cc <__aeabi_dcmplt>:
   db2cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   db2d0:	f7ff ffea 	bl	db2a8 <__aeabi_cdcmpeq>
   db2d4:	bf34      	ite	cc
   db2d6:	2001      	movcc	r0, #1
   db2d8:	2000      	movcs	r0, #0
   db2da:	f85d fb08 	ldr.w	pc, [sp], #8
   db2de:	bf00      	nop

000db2e0 <__aeabi_dcmple>:
   db2e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db2e4:	f7ff ffe0 	bl	db2a8 <__aeabi_cdcmpeq>
   db2e8:	bf94      	ite	ls
   db2ea:	2001      	movls	r0, #1
   db2ec:	2000      	movhi	r0, #0
   db2ee:	f85d fb08 	ldr.w	pc, [sp], #8
   db2f2:	bf00      	nop

000db2f4 <__aeabi_dcmpge>:
   db2f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   db2f8:	f7ff ffce 	bl	db298 <__aeabi_cdrcmple>
   db2fc:	bf94      	ite	ls
   db2fe:	2001      	movls	r0, #1
   db300:	2000      	movhi	r0, #0
   db302:	f85d fb08 	ldr.w	pc, [sp], #8
   db306:	bf00      	nop

000db308 <__aeabi_dcmpgt>:
   db308:	f84d ed08 	str.w	lr, [sp, #-8]!
   db30c:	f7ff ffc4 	bl	db298 <__aeabi_cdrcmple>
   db310:	bf34      	ite	cc
   db312:	2001      	movcc	r0, #1
   db314:	2000      	movcs	r0, #0
   db316:	f85d fb08 	ldr.w	pc, [sp], #8
   db31a:	bf00      	nop

000db31c <__aeabi_dcmpun>:
   db31c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db324:	d102      	bne.n	db32c <__aeabi_dcmpun+0x10>
   db326:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db32a:	d10a      	bne.n	db342 <__aeabi_dcmpun+0x26>
   db32c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db334:	d102      	bne.n	db33c <__aeabi_dcmpun+0x20>
   db336:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db33a:	d102      	bne.n	db342 <__aeabi_dcmpun+0x26>
   db33c:	f04f 0000 	mov.w	r0, #0
   db340:	4770      	bx	lr
   db342:	f04f 0001 	mov.w	r0, #1
   db346:	4770      	bx	lr

000db348 <__aeabi_d2uiz>:
   db348:	004a      	lsls	r2, r1, #1
   db34a:	d211      	bcs.n	db370 <__aeabi_d2uiz+0x28>
   db34c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db350:	d211      	bcs.n	db376 <__aeabi_d2uiz+0x2e>
   db352:	d50d      	bpl.n	db370 <__aeabi_d2uiz+0x28>
   db354:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db358:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db35c:	d40e      	bmi.n	db37c <__aeabi_d2uiz+0x34>
   db35e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db366:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db36a:	fa23 f002 	lsr.w	r0, r3, r2
   db36e:	4770      	bx	lr
   db370:	f04f 0000 	mov.w	r0, #0
   db374:	4770      	bx	lr
   db376:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db37a:	d102      	bne.n	db382 <__aeabi_d2uiz+0x3a>
   db37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db380:	4770      	bx	lr
   db382:	f04f 0000 	mov.w	r0, #0
   db386:	4770      	bx	lr

000db388 <__aeabi_d2f>:
   db388:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db38c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db390:	bf24      	itt	cs
   db392:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db396:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db39a:	d90d      	bls.n	db3b8 <__aeabi_d2f+0x30>
   db39c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db3a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db3a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db3a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db3ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db3b0:	bf08      	it	eq
   db3b2:	f020 0001 	biceq.w	r0, r0, #1
   db3b6:	4770      	bx	lr
   db3b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db3bc:	d121      	bne.n	db402 <__aeabi_d2f+0x7a>
   db3be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db3c2:	bfbc      	itt	lt
   db3c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db3c8:	4770      	bxlt	lr
   db3ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db3ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db3d2:	f1c2 0218 	rsb	r2, r2, #24
   db3d6:	f1c2 0c20 	rsb	ip, r2, #32
   db3da:	fa10 f30c 	lsls.w	r3, r0, ip
   db3de:	fa20 f002 	lsr.w	r0, r0, r2
   db3e2:	bf18      	it	ne
   db3e4:	f040 0001 	orrne.w	r0, r0, #1
   db3e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db3ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db3f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   db3f4:	ea40 000c 	orr.w	r0, r0, ip
   db3f8:	fa23 f302 	lsr.w	r3, r3, r2
   db3fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db400:	e7cc      	b.n	db39c <__aeabi_d2f+0x14>
   db402:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db406:	d107      	bne.n	db418 <__aeabi_d2f+0x90>
   db408:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db40c:	bf1e      	ittt	ne
   db40e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db412:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db416:	4770      	bxne	lr
   db418:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db41c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db424:	4770      	bx	lr
   db426:	bf00      	nop

000db428 <__aeabi_d2ulz>:
   db428:	b5d0      	push	{r4, r6, r7, lr}
   db42a:	4b0c      	ldr	r3, [pc, #48]	; (db45c <__aeabi_d2ulz+0x34>)
   db42c:	2200      	movs	r2, #0
   db42e:	4606      	mov	r6, r0
   db430:	460f      	mov	r7, r1
   db432:	f7ff fcd9 	bl	dade8 <__aeabi_dmul>
   db436:	f7ff ff87 	bl	db348 <__aeabi_d2uiz>
   db43a:	4604      	mov	r4, r0
   db43c:	f7ff fc5a 	bl	dacf4 <__aeabi_ui2d>
   db440:	4b07      	ldr	r3, [pc, #28]	; (db460 <__aeabi_d2ulz+0x38>)
   db442:	2200      	movs	r2, #0
   db444:	f7ff fcd0 	bl	dade8 <__aeabi_dmul>
   db448:	4602      	mov	r2, r0
   db44a:	460b      	mov	r3, r1
   db44c:	4630      	mov	r0, r6
   db44e:	4639      	mov	r1, r7
   db450:	f7ff fb12 	bl	daa78 <__aeabi_dsub>
   db454:	f7ff ff78 	bl	db348 <__aeabi_d2uiz>
   db458:	4621      	mov	r1, r4
   db45a:	bdd0      	pop	{r4, r6, r7, pc}
   db45c:	3df00000 	.word	0x3df00000
   db460:	41f00000 	.word	0x41f00000

000db464 <asctime_r>:
   db464:	b510      	push	{r4, lr}
   db466:	460c      	mov	r4, r1
   db468:	6941      	ldr	r1, [r0, #20]
   db46a:	6903      	ldr	r3, [r0, #16]
   db46c:	6982      	ldr	r2, [r0, #24]
   db46e:	b086      	sub	sp, #24
   db470:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db474:	9104      	str	r1, [sp, #16]
   db476:	6801      	ldr	r1, [r0, #0]
   db478:	9103      	str	r1, [sp, #12]
   db47a:	6841      	ldr	r1, [r0, #4]
   db47c:	9102      	str	r1, [sp, #8]
   db47e:	6881      	ldr	r1, [r0, #8]
   db480:	9101      	str	r1, [sp, #4]
   db482:	68c1      	ldr	r1, [r0, #12]
   db484:	9100      	str	r1, [sp, #0]
   db486:	4907      	ldr	r1, [pc, #28]	; (db4a4 <asctime_r+0x40>)
   db488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db48c:	440b      	add	r3, r1
   db48e:	4906      	ldr	r1, [pc, #24]	; (db4a8 <asctime_r+0x44>)
   db490:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db494:	440a      	add	r2, r1
   db496:	4620      	mov	r0, r4
   db498:	4904      	ldr	r1, [pc, #16]	; (db4ac <asctime_r+0x48>)
   db49a:	f7fd fac3 	bl	d8a24 <siprintf>
   db49e:	4620      	mov	r0, r4
   db4a0:	b006      	add	sp, #24
   db4a2:	bd10      	pop	{r4, pc}
   db4a4:	000de256 	.word	0x000de256
   db4a8:	000de241 	.word	0x000de241
   db4ac:	000de221 	.word	0x000de221

000db4b0 <atof>:
   db4b0:	2100      	movs	r1, #0
   db4b2:	f000 befb 	b.w	dc2ac <strtod>

000db4b6 <atoi>:
   db4b6:	220a      	movs	r2, #10
   db4b8:	2100      	movs	r1, #0
   db4ba:	f000 bf7d 	b.w	dc3b8 <strtol>
	...

000db4c0 <__cxa_atexit>:
   db4c0:	b510      	push	{r4, lr}
   db4c2:	4c05      	ldr	r4, [pc, #20]	; (db4d8 <__cxa_atexit+0x18>)
   db4c4:	4613      	mov	r3, r2
   db4c6:	b12c      	cbz	r4, db4d4 <__cxa_atexit+0x14>
   db4c8:	460a      	mov	r2, r1
   db4ca:	4601      	mov	r1, r0
   db4cc:	2002      	movs	r0, #2
   db4ce:	f3af 8000 	nop.w
   db4d2:	bd10      	pop	{r4, pc}
   db4d4:	4620      	mov	r0, r4
   db4d6:	e7fc      	b.n	db4d2 <__cxa_atexit+0x12>
   db4d8:	00000000 	.word	0x00000000

000db4dc <gmtime>:
   db4dc:	b538      	push	{r3, r4, r5, lr}
   db4de:	4b07      	ldr	r3, [pc, #28]	; (db4fc <gmtime+0x20>)
   db4e0:	681d      	ldr	r5, [r3, #0]
   db4e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   db4e4:	4604      	mov	r4, r0
   db4e6:	b91b      	cbnz	r3, db4f0 <gmtime+0x14>
   db4e8:	2024      	movs	r0, #36	; 0x24
   db4ea:	f7fd fa83 	bl	d89f4 <malloc>
   db4ee:	63e8      	str	r0, [r5, #60]	; 0x3c
   db4f0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   db4f2:	4620      	mov	r0, r4
   db4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db4f8:	f7fd badc 	b.w	d8ab4 <gmtime_r>
   db4fc:	2003dd08 	.word	0x2003dd08

000db500 <memcpy>:
   db500:	440a      	add	r2, r1
   db502:	4291      	cmp	r1, r2
   db504:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db508:	d100      	bne.n	db50c <memcpy+0xc>
   db50a:	4770      	bx	lr
   db50c:	b510      	push	{r4, lr}
   db50e:	f811 4b01 	ldrb.w	r4, [r1], #1
   db512:	f803 4f01 	strb.w	r4, [r3, #1]!
   db516:	4291      	cmp	r1, r2
   db518:	d1f9      	bne.n	db50e <memcpy+0xe>
   db51a:	bd10      	pop	{r4, pc}

000db51c <memmove>:
   db51c:	4288      	cmp	r0, r1
   db51e:	b510      	push	{r4, lr}
   db520:	eb01 0402 	add.w	r4, r1, r2
   db524:	d902      	bls.n	db52c <memmove+0x10>
   db526:	4284      	cmp	r4, r0
   db528:	4623      	mov	r3, r4
   db52a:	d807      	bhi.n	db53c <memmove+0x20>
   db52c:	1e43      	subs	r3, r0, #1
   db52e:	42a1      	cmp	r1, r4
   db530:	d008      	beq.n	db544 <memmove+0x28>
   db532:	f811 2b01 	ldrb.w	r2, [r1], #1
   db536:	f803 2f01 	strb.w	r2, [r3, #1]!
   db53a:	e7f8      	b.n	db52e <memmove+0x12>
   db53c:	4402      	add	r2, r0
   db53e:	4601      	mov	r1, r0
   db540:	428a      	cmp	r2, r1
   db542:	d100      	bne.n	db546 <memmove+0x2a>
   db544:	bd10      	pop	{r4, pc}
   db546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db54e:	e7f7      	b.n	db540 <memmove+0x24>

000db550 <memset>:
   db550:	4402      	add	r2, r0
   db552:	4603      	mov	r3, r0
   db554:	4293      	cmp	r3, r2
   db556:	d100      	bne.n	db55a <memset+0xa>
   db558:	4770      	bx	lr
   db55a:	f803 1b01 	strb.w	r1, [r3], #1
   db55e:	e7f9      	b.n	db554 <memset+0x4>

000db560 <srand>:
   db560:	b538      	push	{r3, r4, r5, lr}
   db562:	4b0d      	ldr	r3, [pc, #52]	; (db598 <srand+0x38>)
   db564:	681d      	ldr	r5, [r3, #0]
   db566:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db568:	4604      	mov	r4, r0
   db56a:	b97b      	cbnz	r3, db58c <srand+0x2c>
   db56c:	2018      	movs	r0, #24
   db56e:	f7fd fa41 	bl	d89f4 <malloc>
   db572:	4a0a      	ldr	r2, [pc, #40]	; (db59c <srand+0x3c>)
   db574:	4b0a      	ldr	r3, [pc, #40]	; (db5a0 <srand+0x40>)
   db576:	63a8      	str	r0, [r5, #56]	; 0x38
   db578:	e9c0 2300 	strd	r2, r3, [r0]
   db57c:	4b09      	ldr	r3, [pc, #36]	; (db5a4 <srand+0x44>)
   db57e:	6083      	str	r3, [r0, #8]
   db580:	230b      	movs	r3, #11
   db582:	8183      	strh	r3, [r0, #12]
   db584:	2201      	movs	r2, #1
   db586:	2300      	movs	r3, #0
   db588:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db58c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db58e:	2200      	movs	r2, #0
   db590:	611c      	str	r4, [r3, #16]
   db592:	615a      	str	r2, [r3, #20]
   db594:	bd38      	pop	{r3, r4, r5, pc}
   db596:	bf00      	nop
   db598:	2003dd08 	.word	0x2003dd08
   db59c:	abcd330e 	.word	0xabcd330e
   db5a0:	e66d1234 	.word	0xe66d1234
   db5a4:	0005deec 	.word	0x0005deec

000db5a8 <strcmp>:
   db5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   db5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   db5b0:	2a01      	cmp	r2, #1
   db5b2:	bf28      	it	cs
   db5b4:	429a      	cmpcs	r2, r3
   db5b6:	d0f7      	beq.n	db5a8 <strcmp>
   db5b8:	1ad0      	subs	r0, r2, r3
   db5ba:	4770      	bx	lr

000db5bc <strcpy>:
   db5bc:	4603      	mov	r3, r0
   db5be:	f811 2b01 	ldrb.w	r2, [r1], #1
   db5c2:	f803 2b01 	strb.w	r2, [r3], #1
   db5c6:	2a00      	cmp	r2, #0
   db5c8:	d1f9      	bne.n	db5be <strcpy+0x2>
   db5ca:	4770      	bx	lr

000db5cc <strdup>:
   db5cc:	4b02      	ldr	r3, [pc, #8]	; (db5d8 <strdup+0xc>)
   db5ce:	4601      	mov	r1, r0
   db5d0:	6818      	ldr	r0, [r3, #0]
   db5d2:	f000 b803 	b.w	db5dc <_strdup_r>
   db5d6:	bf00      	nop
   db5d8:	2003dd08 	.word	0x2003dd08

000db5dc <_strdup_r>:
   db5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db5de:	4604      	mov	r4, r0
   db5e0:	4608      	mov	r0, r1
   db5e2:	460d      	mov	r5, r1
   db5e4:	f000 f80f 	bl	db606 <strlen>
   db5e8:	1c42      	adds	r2, r0, #1
   db5ea:	4611      	mov	r1, r2
   db5ec:	4620      	mov	r0, r4
   db5ee:	9201      	str	r2, [sp, #4]
   db5f0:	f7fd fa38 	bl	d8a64 <_malloc_r>
   db5f4:	4604      	mov	r4, r0
   db5f6:	b118      	cbz	r0, db600 <_strdup_r+0x24>
   db5f8:	9a01      	ldr	r2, [sp, #4]
   db5fa:	4629      	mov	r1, r5
   db5fc:	f7ff ff80 	bl	db500 <memcpy>
   db600:	4620      	mov	r0, r4
   db602:	b003      	add	sp, #12
   db604:	bd30      	pop	{r4, r5, pc}

000db606 <strlen>:
   db606:	4603      	mov	r3, r0
   db608:	f813 2b01 	ldrb.w	r2, [r3], #1
   db60c:	2a00      	cmp	r2, #0
   db60e:	d1fb      	bne.n	db608 <strlen+0x2>
   db610:	1a18      	subs	r0, r3, r0
   db612:	3801      	subs	r0, #1
   db614:	4770      	bx	lr

000db616 <strncmp>:
   db616:	b510      	push	{r4, lr}
   db618:	b16a      	cbz	r2, db636 <strncmp+0x20>
   db61a:	3901      	subs	r1, #1
   db61c:	1884      	adds	r4, r0, r2
   db61e:	f810 3b01 	ldrb.w	r3, [r0], #1
   db622:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db626:	4293      	cmp	r3, r2
   db628:	d103      	bne.n	db632 <strncmp+0x1c>
   db62a:	42a0      	cmp	r0, r4
   db62c:	d001      	beq.n	db632 <strncmp+0x1c>
   db62e:	2b00      	cmp	r3, #0
   db630:	d1f5      	bne.n	db61e <strncmp+0x8>
   db632:	1a98      	subs	r0, r3, r2
   db634:	bd10      	pop	{r4, pc}
   db636:	4610      	mov	r0, r2
   db638:	e7fc      	b.n	db634 <strncmp+0x1e>

000db63a <strncpy>:
   db63a:	b510      	push	{r4, lr}
   db63c:	3901      	subs	r1, #1
   db63e:	4603      	mov	r3, r0
   db640:	b132      	cbz	r2, db650 <strncpy+0x16>
   db642:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db646:	f803 4b01 	strb.w	r4, [r3], #1
   db64a:	3a01      	subs	r2, #1
   db64c:	2c00      	cmp	r4, #0
   db64e:	d1f7      	bne.n	db640 <strncpy+0x6>
   db650:	441a      	add	r2, r3
   db652:	2100      	movs	r1, #0
   db654:	4293      	cmp	r3, r2
   db656:	d100      	bne.n	db65a <strncpy+0x20>
   db658:	bd10      	pop	{r4, pc}
   db65a:	f803 1b01 	strb.w	r1, [r3], #1
   db65e:	e7f9      	b.n	db654 <strncpy+0x1a>

000db660 <sulp>:
   db660:	b570      	push	{r4, r5, r6, lr}
   db662:	4604      	mov	r4, r0
   db664:	460d      	mov	r5, r1
   db666:	ec45 4b10 	vmov	d0, r4, r5
   db66a:	4616      	mov	r6, r2
   db66c:	f001 fd1a 	bl	dd0a4 <__ulp>
   db670:	ec51 0b10 	vmov	r0, r1, d0
   db674:	b17e      	cbz	r6, db696 <sulp+0x36>
   db676:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db67a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db67e:	2b00      	cmp	r3, #0
   db680:	dd09      	ble.n	db696 <sulp+0x36>
   db682:	051b      	lsls	r3, r3, #20
   db684:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db688:	2400      	movs	r4, #0
   db68a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db68e:	4622      	mov	r2, r4
   db690:	462b      	mov	r3, r5
   db692:	f7ff fba9 	bl	dade8 <__aeabi_dmul>
   db696:	bd70      	pop	{r4, r5, r6, pc}

000db698 <_strtod_l>:
   db698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db69c:	b0a3      	sub	sp, #140	; 0x8c
   db69e:	461f      	mov	r7, r3
   db6a0:	2300      	movs	r3, #0
   db6a2:	931e      	str	r3, [sp, #120]	; 0x78
   db6a4:	4ba4      	ldr	r3, [pc, #656]	; (db938 <_strtod_l+0x2a0>)
   db6a6:	9219      	str	r2, [sp, #100]	; 0x64
   db6a8:	681b      	ldr	r3, [r3, #0]
   db6aa:	9307      	str	r3, [sp, #28]
   db6ac:	4604      	mov	r4, r0
   db6ae:	4618      	mov	r0, r3
   db6b0:	4688      	mov	r8, r1
   db6b2:	f7ff ffa8 	bl	db606 <strlen>
   db6b6:	f04f 0a00 	mov.w	sl, #0
   db6ba:	4605      	mov	r5, r0
   db6bc:	f04f 0b00 	mov.w	fp, #0
   db6c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db6c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db6c6:	781a      	ldrb	r2, [r3, #0]
   db6c8:	2a2b      	cmp	r2, #43	; 0x2b
   db6ca:	d04c      	beq.n	db766 <_strtod_l+0xce>
   db6cc:	d839      	bhi.n	db742 <_strtod_l+0xaa>
   db6ce:	2a0d      	cmp	r2, #13
   db6d0:	d832      	bhi.n	db738 <_strtod_l+0xa0>
   db6d2:	2a08      	cmp	r2, #8
   db6d4:	d832      	bhi.n	db73c <_strtod_l+0xa4>
   db6d6:	2a00      	cmp	r2, #0
   db6d8:	d03c      	beq.n	db754 <_strtod_l+0xbc>
   db6da:	2300      	movs	r3, #0
   db6dc:	930e      	str	r3, [sp, #56]	; 0x38
   db6de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   db6e0:	7833      	ldrb	r3, [r6, #0]
   db6e2:	2b30      	cmp	r3, #48	; 0x30
   db6e4:	f040 80b4 	bne.w	db850 <_strtod_l+0x1b8>
   db6e8:	7873      	ldrb	r3, [r6, #1]
   db6ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db6ee:	2b58      	cmp	r3, #88	; 0x58
   db6f0:	d16c      	bne.n	db7cc <_strtod_l+0x134>
   db6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db6f4:	9301      	str	r3, [sp, #4]
   db6f6:	ab1e      	add	r3, sp, #120	; 0x78
   db6f8:	9702      	str	r7, [sp, #8]
   db6fa:	9300      	str	r3, [sp, #0]
   db6fc:	4a8f      	ldr	r2, [pc, #572]	; (db93c <_strtod_l+0x2a4>)
   db6fe:	ab1f      	add	r3, sp, #124	; 0x7c
   db700:	a91d      	add	r1, sp, #116	; 0x74
   db702:	4620      	mov	r0, r4
   db704:	f000 feca 	bl	dc49c <__gethex>
   db708:	f010 0707 	ands.w	r7, r0, #7
   db70c:	4605      	mov	r5, r0
   db70e:	d005      	beq.n	db71c <_strtod_l+0x84>
   db710:	2f06      	cmp	r7, #6
   db712:	d12a      	bne.n	db76a <_strtod_l+0xd2>
   db714:	3601      	adds	r6, #1
   db716:	2300      	movs	r3, #0
   db718:	961d      	str	r6, [sp, #116]	; 0x74
   db71a:	930e      	str	r3, [sp, #56]	; 0x38
   db71c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db71e:	2b00      	cmp	r3, #0
   db720:	f040 8596 	bne.w	dc250 <_strtod_l+0xbb8>
   db724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db726:	b1db      	cbz	r3, db760 <_strtod_l+0xc8>
   db728:	4652      	mov	r2, sl
   db72a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db72e:	ec43 2b10 	vmov	d0, r2, r3
   db732:	b023      	add	sp, #140	; 0x8c
   db734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db738:	2a20      	cmp	r2, #32
   db73a:	d1ce      	bne.n	db6da <_strtod_l+0x42>
   db73c:	3301      	adds	r3, #1
   db73e:	931d      	str	r3, [sp, #116]	; 0x74
   db740:	e7c0      	b.n	db6c4 <_strtod_l+0x2c>
   db742:	2a2d      	cmp	r2, #45	; 0x2d
   db744:	d1c9      	bne.n	db6da <_strtod_l+0x42>
   db746:	2201      	movs	r2, #1
   db748:	920e      	str	r2, [sp, #56]	; 0x38
   db74a:	1c5a      	adds	r2, r3, #1
   db74c:	921d      	str	r2, [sp, #116]	; 0x74
   db74e:	785b      	ldrb	r3, [r3, #1]
   db750:	2b00      	cmp	r3, #0
   db752:	d1c4      	bne.n	db6de <_strtod_l+0x46>
   db754:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db756:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db75a:	2b00      	cmp	r3, #0
   db75c:	f040 8576 	bne.w	dc24c <_strtod_l+0xbb4>
   db760:	4652      	mov	r2, sl
   db762:	465b      	mov	r3, fp
   db764:	e7e3      	b.n	db72e <_strtod_l+0x96>
   db766:	2200      	movs	r2, #0
   db768:	e7ee      	b.n	db748 <_strtod_l+0xb0>
   db76a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db76c:	b13a      	cbz	r2, db77e <_strtod_l+0xe6>
   db76e:	2135      	movs	r1, #53	; 0x35
   db770:	a820      	add	r0, sp, #128	; 0x80
   db772:	f001 fd96 	bl	dd2a2 <__copybits>
   db776:	991e      	ldr	r1, [sp, #120]	; 0x78
   db778:	4620      	mov	r0, r4
   db77a:	f001 f9cb 	bl	dcb14 <_Bfree>
   db77e:	3f01      	subs	r7, #1
   db780:	2f05      	cmp	r7, #5
   db782:	d807      	bhi.n	db794 <_strtod_l+0xfc>
   db784:	e8df f007 	tbb	[pc, r7]
   db788:	1d180b0e 	.word	0x1d180b0e
   db78c:	030e      	.short	0x030e
   db78e:	f04f 0b00 	mov.w	fp, #0
   db792:	46da      	mov	sl, fp
   db794:	0728      	lsls	r0, r5, #28
   db796:	d5c1      	bpl.n	db71c <_strtod_l+0x84>
   db798:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db79c:	e7be      	b.n	db71c <_strtod_l+0x84>
   db79e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   db7a2:	e7f7      	b.n	db794 <_strtod_l+0xfc>
   db7a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   db7a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   db7aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db7ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db7b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db7b6:	e7ed      	b.n	db794 <_strtod_l+0xfc>
   db7b8:	f8df b184 	ldr.w	fp, [pc, #388]	; db940 <_strtod_l+0x2a8>
   db7bc:	f04f 0a00 	mov.w	sl, #0
   db7c0:	e7e8      	b.n	db794 <_strtod_l+0xfc>
   db7c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db7c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db7ca:	e7e3      	b.n	db794 <_strtod_l+0xfc>
   db7cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db7ce:	1c5a      	adds	r2, r3, #1
   db7d0:	921d      	str	r2, [sp, #116]	; 0x74
   db7d2:	785b      	ldrb	r3, [r3, #1]
   db7d4:	2b30      	cmp	r3, #48	; 0x30
   db7d6:	d0f9      	beq.n	db7cc <_strtod_l+0x134>
   db7d8:	2b00      	cmp	r3, #0
   db7da:	d09f      	beq.n	db71c <_strtod_l+0x84>
   db7dc:	2301      	movs	r3, #1
   db7de:	f04f 0900 	mov.w	r9, #0
   db7e2:	9304      	str	r3, [sp, #16]
   db7e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db7e6:	930a      	str	r3, [sp, #40]	; 0x28
   db7e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db7ec:	464f      	mov	r7, r9
   db7ee:	220a      	movs	r2, #10
   db7f0:	981d      	ldr	r0, [sp, #116]	; 0x74
   db7f2:	7806      	ldrb	r6, [r0, #0]
   db7f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db7f8:	b2d9      	uxtb	r1, r3
   db7fa:	2909      	cmp	r1, #9
   db7fc:	d92a      	bls.n	db854 <_strtod_l+0x1bc>
   db7fe:	9907      	ldr	r1, [sp, #28]
   db800:	462a      	mov	r2, r5
   db802:	f7ff ff08 	bl	db616 <strncmp>
   db806:	b398      	cbz	r0, db870 <_strtod_l+0x1d8>
   db808:	2000      	movs	r0, #0
   db80a:	4633      	mov	r3, r6
   db80c:	463d      	mov	r5, r7
   db80e:	9007      	str	r0, [sp, #28]
   db810:	4602      	mov	r2, r0
   db812:	2b65      	cmp	r3, #101	; 0x65
   db814:	d001      	beq.n	db81a <_strtod_l+0x182>
   db816:	2b45      	cmp	r3, #69	; 0x45
   db818:	d118      	bne.n	db84c <_strtod_l+0x1b4>
   db81a:	b91d      	cbnz	r5, db824 <_strtod_l+0x18c>
   db81c:	9b04      	ldr	r3, [sp, #16]
   db81e:	4303      	orrs	r3, r0
   db820:	d098      	beq.n	db754 <_strtod_l+0xbc>
   db822:	2500      	movs	r5, #0
   db824:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db828:	f108 0301 	add.w	r3, r8, #1
   db82c:	931d      	str	r3, [sp, #116]	; 0x74
   db82e:	f898 3001 	ldrb.w	r3, [r8, #1]
   db832:	2b2b      	cmp	r3, #43	; 0x2b
   db834:	d075      	beq.n	db922 <_strtod_l+0x28a>
   db836:	2b2d      	cmp	r3, #45	; 0x2d
   db838:	d07b      	beq.n	db932 <_strtod_l+0x29a>
   db83a:	f04f 0c00 	mov.w	ip, #0
   db83e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db842:	2909      	cmp	r1, #9
   db844:	f240 8082 	bls.w	db94c <_strtod_l+0x2b4>
   db848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db84c:	2600      	movs	r6, #0
   db84e:	e09d      	b.n	db98c <_strtod_l+0x2f4>
   db850:	2300      	movs	r3, #0
   db852:	e7c4      	b.n	db7de <_strtod_l+0x146>
   db854:	2f08      	cmp	r7, #8
   db856:	bfd8      	it	le
   db858:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db85a:	f100 0001 	add.w	r0, r0, #1
   db85e:	bfda      	itte	le
   db860:	fb02 3301 	mlale	r3, r2, r1, r3
   db864:	9309      	strle	r3, [sp, #36]	; 0x24
   db866:	fb02 3909 	mlagt	r9, r2, r9, r3
   db86a:	3701      	adds	r7, #1
   db86c:	901d      	str	r0, [sp, #116]	; 0x74
   db86e:	e7bf      	b.n	db7f0 <_strtod_l+0x158>
   db870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db872:	195a      	adds	r2, r3, r5
   db874:	921d      	str	r2, [sp, #116]	; 0x74
   db876:	5d5b      	ldrb	r3, [r3, r5]
   db878:	2f00      	cmp	r7, #0
   db87a:	d037      	beq.n	db8ec <_strtod_l+0x254>
   db87c:	9007      	str	r0, [sp, #28]
   db87e:	463d      	mov	r5, r7
   db880:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db884:	2a09      	cmp	r2, #9
   db886:	d912      	bls.n	db8ae <_strtod_l+0x216>
   db888:	2201      	movs	r2, #1
   db88a:	e7c2      	b.n	db812 <_strtod_l+0x17a>
   db88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db88e:	1c5a      	adds	r2, r3, #1
   db890:	921d      	str	r2, [sp, #116]	; 0x74
   db892:	785b      	ldrb	r3, [r3, #1]
   db894:	3001      	adds	r0, #1
   db896:	2b30      	cmp	r3, #48	; 0x30
   db898:	d0f8      	beq.n	db88c <_strtod_l+0x1f4>
   db89a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db89e:	2a08      	cmp	r2, #8
   db8a0:	f200 84db 	bhi.w	dc25a <_strtod_l+0xbc2>
   db8a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db8a6:	9007      	str	r0, [sp, #28]
   db8a8:	2000      	movs	r0, #0
   db8aa:	920a      	str	r2, [sp, #40]	; 0x28
   db8ac:	4605      	mov	r5, r0
   db8ae:	3b30      	subs	r3, #48	; 0x30
   db8b0:	f100 0201 	add.w	r2, r0, #1
   db8b4:	d014      	beq.n	db8e0 <_strtod_l+0x248>
   db8b6:	9907      	ldr	r1, [sp, #28]
   db8b8:	4411      	add	r1, r2
   db8ba:	9107      	str	r1, [sp, #28]
   db8bc:	462a      	mov	r2, r5
   db8be:	eb00 0e05 	add.w	lr, r0, r5
   db8c2:	210a      	movs	r1, #10
   db8c4:	4572      	cmp	r2, lr
   db8c6:	d113      	bne.n	db8f0 <_strtod_l+0x258>
   db8c8:	182a      	adds	r2, r5, r0
   db8ca:	2a08      	cmp	r2, #8
   db8cc:	f105 0501 	add.w	r5, r5, #1
   db8d0:	4405      	add	r5, r0
   db8d2:	dc1c      	bgt.n	db90e <_strtod_l+0x276>
   db8d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   db8d6:	220a      	movs	r2, #10
   db8d8:	fb02 3301 	mla	r3, r2, r1, r3
   db8dc:	9309      	str	r3, [sp, #36]	; 0x24
   db8de:	2200      	movs	r2, #0
   db8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db8e2:	1c59      	adds	r1, r3, #1
   db8e4:	911d      	str	r1, [sp, #116]	; 0x74
   db8e6:	785b      	ldrb	r3, [r3, #1]
   db8e8:	4610      	mov	r0, r2
   db8ea:	e7c9      	b.n	db880 <_strtod_l+0x1e8>
   db8ec:	4638      	mov	r0, r7
   db8ee:	e7d2      	b.n	db896 <_strtod_l+0x1fe>
   db8f0:	2a08      	cmp	r2, #8
   db8f2:	dc04      	bgt.n	db8fe <_strtod_l+0x266>
   db8f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db8f6:	434e      	muls	r6, r1
   db8f8:	9609      	str	r6, [sp, #36]	; 0x24
   db8fa:	3201      	adds	r2, #1
   db8fc:	e7e2      	b.n	db8c4 <_strtod_l+0x22c>
   db8fe:	f102 0c01 	add.w	ip, r2, #1
   db902:	f1bc 0f10 	cmp.w	ip, #16
   db906:	bfd8      	it	le
   db908:	fb01 f909 	mulle.w	r9, r1, r9
   db90c:	e7f5      	b.n	db8fa <_strtod_l+0x262>
   db90e:	2d10      	cmp	r5, #16
   db910:	bfdc      	itt	le
   db912:	220a      	movle	r2, #10
   db914:	fb02 3909 	mlale	r9, r2, r9, r3
   db918:	e7e1      	b.n	db8de <_strtod_l+0x246>
   db91a:	2300      	movs	r3, #0
   db91c:	9307      	str	r3, [sp, #28]
   db91e:	2201      	movs	r2, #1
   db920:	e77c      	b.n	db81c <_strtod_l+0x184>
   db922:	f04f 0c00 	mov.w	ip, #0
   db926:	f108 0302 	add.w	r3, r8, #2
   db92a:	931d      	str	r3, [sp, #116]	; 0x74
   db92c:	f898 3002 	ldrb.w	r3, [r8, #2]
   db930:	e785      	b.n	db83e <_strtod_l+0x1a6>
   db932:	f04f 0c01 	mov.w	ip, #1
   db936:	e7f6      	b.n	db926 <_strtod_l+0x28e>
   db938:	000de3dc 	.word	0x000de3dc
   db93c:	000de288 	.word	0x000de288
   db940:	7ff00000 	.word	0x7ff00000
   db944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db946:	1c59      	adds	r1, r3, #1
   db948:	911d      	str	r1, [sp, #116]	; 0x74
   db94a:	785b      	ldrb	r3, [r3, #1]
   db94c:	2b30      	cmp	r3, #48	; 0x30
   db94e:	d0f9      	beq.n	db944 <_strtod_l+0x2ac>
   db950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db954:	2908      	cmp	r1, #8
   db956:	f63f af79 	bhi.w	db84c <_strtod_l+0x1b4>
   db95a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db95e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db960:	9308      	str	r3, [sp, #32]
   db962:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db964:	1c59      	adds	r1, r3, #1
   db966:	911d      	str	r1, [sp, #116]	; 0x74
   db968:	785b      	ldrb	r3, [r3, #1]
   db96a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db96e:	2e09      	cmp	r6, #9
   db970:	d937      	bls.n	db9e2 <_strtod_l+0x34a>
   db972:	9e08      	ldr	r6, [sp, #32]
   db974:	1b89      	subs	r1, r1, r6
   db976:	2908      	cmp	r1, #8
   db978:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db97c:	dc02      	bgt.n	db984 <_strtod_l+0x2ec>
   db97e:	4576      	cmp	r6, lr
   db980:	bfa8      	it	ge
   db982:	4676      	movge	r6, lr
   db984:	f1bc 0f00 	cmp.w	ip, #0
   db988:	d000      	beq.n	db98c <_strtod_l+0x2f4>
   db98a:	4276      	negs	r6, r6
   db98c:	2d00      	cmp	r5, #0
   db98e:	d14f      	bne.n	dba30 <_strtod_l+0x398>
   db990:	9904      	ldr	r1, [sp, #16]
   db992:	4301      	orrs	r1, r0
   db994:	f47f aec2 	bne.w	db71c <_strtod_l+0x84>
   db998:	2a00      	cmp	r2, #0
   db99a:	f47f aedb 	bne.w	db754 <_strtod_l+0xbc>
   db99e:	2b69      	cmp	r3, #105	; 0x69
   db9a0:	d027      	beq.n	db9f2 <_strtod_l+0x35a>
   db9a2:	dc24      	bgt.n	db9ee <_strtod_l+0x356>
   db9a4:	2b49      	cmp	r3, #73	; 0x49
   db9a6:	d024      	beq.n	db9f2 <_strtod_l+0x35a>
   db9a8:	2b4e      	cmp	r3, #78	; 0x4e
   db9aa:	f47f aed3 	bne.w	db754 <_strtod_l+0xbc>
   db9ae:	499e      	ldr	r1, [pc, #632]	; (dbc28 <_strtod_l+0x590>)
   db9b0:	a81d      	add	r0, sp, #116	; 0x74
   db9b2:	f000 ffb9 	bl	dc928 <__match>
   db9b6:	2800      	cmp	r0, #0
   db9b8:	f43f aecc 	beq.w	db754 <_strtod_l+0xbc>
   db9bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db9be:	781b      	ldrb	r3, [r3, #0]
   db9c0:	2b28      	cmp	r3, #40	; 0x28
   db9c2:	d12d      	bne.n	dba20 <_strtod_l+0x388>
   db9c4:	4999      	ldr	r1, [pc, #612]	; (dbc2c <_strtod_l+0x594>)
   db9c6:	aa20      	add	r2, sp, #128	; 0x80
   db9c8:	a81d      	add	r0, sp, #116	; 0x74
   db9ca:	f000 ffc1 	bl	dc950 <__hexnan>
   db9ce:	2805      	cmp	r0, #5
   db9d0:	d126      	bne.n	dba20 <_strtod_l+0x388>
   db9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db9d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db9d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db9dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db9e0:	e69c      	b.n	db71c <_strtod_l+0x84>
   db9e2:	210a      	movs	r1, #10
   db9e4:	fb01 3e0e 	mla	lr, r1, lr, r3
   db9e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db9ec:	e7b9      	b.n	db962 <_strtod_l+0x2ca>
   db9ee:	2b6e      	cmp	r3, #110	; 0x6e
   db9f0:	e7db      	b.n	db9aa <_strtod_l+0x312>
   db9f2:	498f      	ldr	r1, [pc, #572]	; (dbc30 <_strtod_l+0x598>)
   db9f4:	a81d      	add	r0, sp, #116	; 0x74
   db9f6:	f000 ff97 	bl	dc928 <__match>
   db9fa:	2800      	cmp	r0, #0
   db9fc:	f43f aeaa 	beq.w	db754 <_strtod_l+0xbc>
   dba00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba02:	498c      	ldr	r1, [pc, #560]	; (dbc34 <_strtod_l+0x59c>)
   dba04:	3b01      	subs	r3, #1
   dba06:	a81d      	add	r0, sp, #116	; 0x74
   dba08:	931d      	str	r3, [sp, #116]	; 0x74
   dba0a:	f000 ff8d 	bl	dc928 <__match>
   dba0e:	b910      	cbnz	r0, dba16 <_strtod_l+0x37e>
   dba10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba12:	3301      	adds	r3, #1
   dba14:	931d      	str	r3, [sp, #116]	; 0x74
   dba16:	f8df b22c 	ldr.w	fp, [pc, #556]	; dbc44 <_strtod_l+0x5ac>
   dba1a:	f04f 0a00 	mov.w	sl, #0
   dba1e:	e67d      	b.n	db71c <_strtod_l+0x84>
   dba20:	4885      	ldr	r0, [pc, #532]	; (dbc38 <_strtod_l+0x5a0>)
   dba22:	f001 fc91 	bl	dd348 <nan>
   dba26:	ed8d 0b04 	vstr	d0, [sp, #16]
   dba2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dba2e:	e675      	b.n	db71c <_strtod_l+0x84>
   dba30:	9b07      	ldr	r3, [sp, #28]
   dba32:	9809      	ldr	r0, [sp, #36]	; 0x24
   dba34:	1af3      	subs	r3, r6, r3
   dba36:	2f00      	cmp	r7, #0
   dba38:	bf08      	it	eq
   dba3a:	462f      	moveq	r7, r5
   dba3c:	2d10      	cmp	r5, #16
   dba3e:	9308      	str	r3, [sp, #32]
   dba40:	46a8      	mov	r8, r5
   dba42:	bfa8      	it	ge
   dba44:	f04f 0810 	movge.w	r8, #16
   dba48:	f7ff f954 	bl	dacf4 <__aeabi_ui2d>
   dba4c:	2d09      	cmp	r5, #9
   dba4e:	4682      	mov	sl, r0
   dba50:	468b      	mov	fp, r1
   dba52:	dd13      	ble.n	dba7c <_strtod_l+0x3e4>
   dba54:	4b79      	ldr	r3, [pc, #484]	; (dbc3c <_strtod_l+0x5a4>)
   dba56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dba5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dba5e:	f7ff f9c3 	bl	dade8 <__aeabi_dmul>
   dba62:	4682      	mov	sl, r0
   dba64:	4648      	mov	r0, r9
   dba66:	468b      	mov	fp, r1
   dba68:	f7ff f944 	bl	dacf4 <__aeabi_ui2d>
   dba6c:	4602      	mov	r2, r0
   dba6e:	460b      	mov	r3, r1
   dba70:	4650      	mov	r0, sl
   dba72:	4659      	mov	r1, fp
   dba74:	f7ff f802 	bl	daa7c <__adddf3>
   dba78:	4682      	mov	sl, r0
   dba7a:	468b      	mov	fp, r1
   dba7c:	2d0f      	cmp	r5, #15
   dba7e:	dc38      	bgt.n	dbaf2 <_strtod_l+0x45a>
   dba80:	9b08      	ldr	r3, [sp, #32]
   dba82:	2b00      	cmp	r3, #0
   dba84:	f43f ae4a 	beq.w	db71c <_strtod_l+0x84>
   dba88:	dd24      	ble.n	dbad4 <_strtod_l+0x43c>
   dba8a:	2b16      	cmp	r3, #22
   dba8c:	dc0b      	bgt.n	dbaa6 <_strtod_l+0x40e>
   dba8e:	4d6b      	ldr	r5, [pc, #428]	; (dbc3c <_strtod_l+0x5a4>)
   dba90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dba94:	e9d5 0100 	ldrd	r0, r1, [r5]
   dba98:	4652      	mov	r2, sl
   dba9a:	465b      	mov	r3, fp
   dba9c:	f7ff f9a4 	bl	dade8 <__aeabi_dmul>
   dbaa0:	4682      	mov	sl, r0
   dbaa2:	468b      	mov	fp, r1
   dbaa4:	e63a      	b.n	db71c <_strtod_l+0x84>
   dbaa6:	9a08      	ldr	r2, [sp, #32]
   dbaa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dbaac:	4293      	cmp	r3, r2
   dbaae:	db20      	blt.n	dbaf2 <_strtod_l+0x45a>
   dbab0:	4c62      	ldr	r4, [pc, #392]	; (dbc3c <_strtod_l+0x5a4>)
   dbab2:	f1c5 050f 	rsb	r5, r5, #15
   dbab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dbaba:	4652      	mov	r2, sl
   dbabc:	465b      	mov	r3, fp
   dbabe:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbac2:	f7ff f991 	bl	dade8 <__aeabi_dmul>
   dbac6:	9b08      	ldr	r3, [sp, #32]
   dbac8:	1b5d      	subs	r5, r3, r5
   dbaca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dbace:	e9d4 2300 	ldrd	r2, r3, [r4]
   dbad2:	e7e3      	b.n	dba9c <_strtod_l+0x404>
   dbad4:	9b08      	ldr	r3, [sp, #32]
   dbad6:	3316      	adds	r3, #22
   dbad8:	db0b      	blt.n	dbaf2 <_strtod_l+0x45a>
   dbada:	9b07      	ldr	r3, [sp, #28]
   dbadc:	4a57      	ldr	r2, [pc, #348]	; (dbc3c <_strtod_l+0x5a4>)
   dbade:	1b9e      	subs	r6, r3, r6
   dbae0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dbae4:	e9d6 2300 	ldrd	r2, r3, [r6]
   dbae8:	4650      	mov	r0, sl
   dbaea:	4659      	mov	r1, fp
   dbaec:	f7ff faa6 	bl	db03c <__aeabi_ddiv>
   dbaf0:	e7d6      	b.n	dbaa0 <_strtod_l+0x408>
   dbaf2:	9b08      	ldr	r3, [sp, #32]
   dbaf4:	eba5 0808 	sub.w	r8, r5, r8
   dbaf8:	4498      	add	r8, r3
   dbafa:	f1b8 0f00 	cmp.w	r8, #0
   dbafe:	dd71      	ble.n	dbbe4 <_strtod_l+0x54c>
   dbb00:	f018 030f 	ands.w	r3, r8, #15
   dbb04:	d00a      	beq.n	dbb1c <_strtod_l+0x484>
   dbb06:	494d      	ldr	r1, [pc, #308]	; (dbc3c <_strtod_l+0x5a4>)
   dbb08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dbb0c:	4652      	mov	r2, sl
   dbb0e:	465b      	mov	r3, fp
   dbb10:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbb14:	f7ff f968 	bl	dade8 <__aeabi_dmul>
   dbb18:	4682      	mov	sl, r0
   dbb1a:	468b      	mov	fp, r1
   dbb1c:	f038 080f 	bics.w	r8, r8, #15
   dbb20:	d04d      	beq.n	dbbbe <_strtod_l+0x526>
   dbb22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dbb26:	dd22      	ble.n	dbb6e <_strtod_l+0x4d6>
   dbb28:	2500      	movs	r5, #0
   dbb2a:	462e      	mov	r6, r5
   dbb2c:	9509      	str	r5, [sp, #36]	; 0x24
   dbb2e:	9507      	str	r5, [sp, #28]
   dbb30:	2322      	movs	r3, #34	; 0x22
   dbb32:	f8df b110 	ldr.w	fp, [pc, #272]	; dbc44 <_strtod_l+0x5ac>
   dbb36:	6023      	str	r3, [r4, #0]
   dbb38:	f04f 0a00 	mov.w	sl, #0
   dbb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbb3e:	2b00      	cmp	r3, #0
   dbb40:	f43f adec 	beq.w	db71c <_strtod_l+0x84>
   dbb44:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbb46:	4620      	mov	r0, r4
   dbb48:	f000 ffe4 	bl	dcb14 <_Bfree>
   dbb4c:	9907      	ldr	r1, [sp, #28]
   dbb4e:	4620      	mov	r0, r4
   dbb50:	f000 ffe0 	bl	dcb14 <_Bfree>
   dbb54:	4631      	mov	r1, r6
   dbb56:	4620      	mov	r0, r4
   dbb58:	f000 ffdc 	bl	dcb14 <_Bfree>
   dbb5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbb5e:	4620      	mov	r0, r4
   dbb60:	f000 ffd8 	bl	dcb14 <_Bfree>
   dbb64:	4629      	mov	r1, r5
   dbb66:	4620      	mov	r0, r4
   dbb68:	f000 ffd4 	bl	dcb14 <_Bfree>
   dbb6c:	e5d6      	b.n	db71c <_strtod_l+0x84>
   dbb6e:	2300      	movs	r3, #0
   dbb70:	ea4f 1828 	mov.w	r8, r8, asr #4
   dbb74:	4650      	mov	r0, sl
   dbb76:	4659      	mov	r1, fp
   dbb78:	4699      	mov	r9, r3
   dbb7a:	f1b8 0f01 	cmp.w	r8, #1
   dbb7e:	dc21      	bgt.n	dbbc4 <_strtod_l+0x52c>
   dbb80:	b10b      	cbz	r3, dbb86 <_strtod_l+0x4ee>
   dbb82:	4682      	mov	sl, r0
   dbb84:	468b      	mov	fp, r1
   dbb86:	4b2e      	ldr	r3, [pc, #184]	; (dbc40 <_strtod_l+0x5a8>)
   dbb88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dbb8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dbb90:	4652      	mov	r2, sl
   dbb92:	465b      	mov	r3, fp
   dbb94:	e9d9 0100 	ldrd	r0, r1, [r9]
   dbb98:	f7ff f926 	bl	dade8 <__aeabi_dmul>
   dbb9c:	4b29      	ldr	r3, [pc, #164]	; (dbc44 <_strtod_l+0x5ac>)
   dbb9e:	460a      	mov	r2, r1
   dbba0:	400b      	ands	r3, r1
   dbba2:	4929      	ldr	r1, [pc, #164]	; (dbc48 <_strtod_l+0x5b0>)
   dbba4:	428b      	cmp	r3, r1
   dbba6:	4682      	mov	sl, r0
   dbba8:	d8be      	bhi.n	dbb28 <_strtod_l+0x490>
   dbbaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dbbae:	428b      	cmp	r3, r1
   dbbb0:	bf86      	itte	hi
   dbbb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dbc4c <_strtod_l+0x5b4>
   dbbb6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dbbba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dbbbe:	2300      	movs	r3, #0
   dbbc0:	9304      	str	r3, [sp, #16]
   dbbc2:	e081      	b.n	dbcc8 <_strtod_l+0x630>
   dbbc4:	f018 0f01 	tst.w	r8, #1
   dbbc8:	d007      	beq.n	dbbda <_strtod_l+0x542>
   dbbca:	4b1d      	ldr	r3, [pc, #116]	; (dbc40 <_strtod_l+0x5a8>)
   dbbcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dbbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbd4:	f7ff f908 	bl	dade8 <__aeabi_dmul>
   dbbd8:	2301      	movs	r3, #1
   dbbda:	f109 0901 	add.w	r9, r9, #1
   dbbde:	ea4f 0868 	mov.w	r8, r8, asr #1
   dbbe2:	e7ca      	b.n	dbb7a <_strtod_l+0x4e2>
   dbbe4:	d0eb      	beq.n	dbbbe <_strtod_l+0x526>
   dbbe6:	f1c8 0800 	rsb	r8, r8, #0
   dbbea:	f018 020f 	ands.w	r2, r8, #15
   dbbee:	d00a      	beq.n	dbc06 <_strtod_l+0x56e>
   dbbf0:	4b12      	ldr	r3, [pc, #72]	; (dbc3c <_strtod_l+0x5a4>)
   dbbf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dbbf6:	4650      	mov	r0, sl
   dbbf8:	4659      	mov	r1, fp
   dbbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbfe:	f7ff fa1d 	bl	db03c <__aeabi_ddiv>
   dbc02:	4682      	mov	sl, r0
   dbc04:	468b      	mov	fp, r1
   dbc06:	ea5f 1828 	movs.w	r8, r8, asr #4
   dbc0a:	d0d8      	beq.n	dbbbe <_strtod_l+0x526>
   dbc0c:	f1b8 0f1f 	cmp.w	r8, #31
   dbc10:	dd1e      	ble.n	dbc50 <_strtod_l+0x5b8>
   dbc12:	2500      	movs	r5, #0
   dbc14:	462e      	mov	r6, r5
   dbc16:	9509      	str	r5, [sp, #36]	; 0x24
   dbc18:	9507      	str	r5, [sp, #28]
   dbc1a:	2322      	movs	r3, #34	; 0x22
   dbc1c:	f04f 0a00 	mov.w	sl, #0
   dbc20:	f04f 0b00 	mov.w	fp, #0
   dbc24:	6023      	str	r3, [r4, #0]
   dbc26:	e789      	b.n	dbb3c <_strtod_l+0x4a4>
   dbc28:	000de283 	.word	0x000de283
   dbc2c:	000de29c 	.word	0x000de29c
   dbc30:	000de27a 	.word	0x000de27a
   dbc34:	000de27d 	.word	0x000de27d
   dbc38:	000de240 	.word	0x000de240
   dbc3c:	000de418 	.word	0x000de418
   dbc40:	000de3f0 	.word	0x000de3f0
   dbc44:	7ff00000 	.word	0x7ff00000
   dbc48:	7ca00000 	.word	0x7ca00000
   dbc4c:	7fefffff 	.word	0x7fefffff
   dbc50:	f018 0310 	ands.w	r3, r8, #16
   dbc54:	bf18      	it	ne
   dbc56:	236a      	movne	r3, #106	; 0x6a
   dbc58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc010 <_strtod_l+0x978>
   dbc5c:	9304      	str	r3, [sp, #16]
   dbc5e:	4650      	mov	r0, sl
   dbc60:	4659      	mov	r1, fp
   dbc62:	2300      	movs	r3, #0
   dbc64:	f018 0f01 	tst.w	r8, #1
   dbc68:	d004      	beq.n	dbc74 <_strtod_l+0x5dc>
   dbc6a:	e9d9 2300 	ldrd	r2, r3, [r9]
   dbc6e:	f7ff f8bb 	bl	dade8 <__aeabi_dmul>
   dbc72:	2301      	movs	r3, #1
   dbc74:	ea5f 0868 	movs.w	r8, r8, asr #1
   dbc78:	f109 0908 	add.w	r9, r9, #8
   dbc7c:	d1f2      	bne.n	dbc64 <_strtod_l+0x5cc>
   dbc7e:	b10b      	cbz	r3, dbc84 <_strtod_l+0x5ec>
   dbc80:	4682      	mov	sl, r0
   dbc82:	468b      	mov	fp, r1
   dbc84:	9b04      	ldr	r3, [sp, #16]
   dbc86:	b1bb      	cbz	r3, dbcb8 <_strtod_l+0x620>
   dbc88:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dbc8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbc90:	2b00      	cmp	r3, #0
   dbc92:	4659      	mov	r1, fp
   dbc94:	dd10      	ble.n	dbcb8 <_strtod_l+0x620>
   dbc96:	2b1f      	cmp	r3, #31
   dbc98:	f340 8128 	ble.w	dbeec <_strtod_l+0x854>
   dbc9c:	2b34      	cmp	r3, #52	; 0x34
   dbc9e:	bfde      	ittt	le
   dbca0:	3b20      	suble	r3, #32
   dbca2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dbca6:	fa02 f303 	lslle.w	r3, r2, r3
   dbcaa:	f04f 0a00 	mov.w	sl, #0
   dbcae:	bfcc      	ite	gt
   dbcb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dbcb4:	ea03 0b01 	andle.w	fp, r3, r1
   dbcb8:	2200      	movs	r2, #0
   dbcba:	2300      	movs	r3, #0
   dbcbc:	4650      	mov	r0, sl
   dbcbe:	4659      	mov	r1, fp
   dbcc0:	f7ff fafa 	bl	db2b8 <__aeabi_dcmpeq>
   dbcc4:	2800      	cmp	r0, #0
   dbcc6:	d1a4      	bne.n	dbc12 <_strtod_l+0x57a>
   dbcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbcca:	9300      	str	r3, [sp, #0]
   dbccc:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbcce:	462b      	mov	r3, r5
   dbcd0:	463a      	mov	r2, r7
   dbcd2:	4620      	mov	r0, r4
   dbcd4:	f000 ff73 	bl	dcbbe <__s2b>
   dbcd8:	9009      	str	r0, [sp, #36]	; 0x24
   dbcda:	2800      	cmp	r0, #0
   dbcdc:	f43f af24 	beq.w	dbb28 <_strtod_l+0x490>
   dbce0:	9b07      	ldr	r3, [sp, #28]
   dbce2:	1b9e      	subs	r6, r3, r6
   dbce4:	9b08      	ldr	r3, [sp, #32]
   dbce6:	2b00      	cmp	r3, #0
   dbce8:	bfb4      	ite	lt
   dbcea:	4633      	movlt	r3, r6
   dbcec:	2300      	movge	r3, #0
   dbcee:	9310      	str	r3, [sp, #64]	; 0x40
   dbcf0:	9b08      	ldr	r3, [sp, #32]
   dbcf2:	2500      	movs	r5, #0
   dbcf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dbcf8:	9318      	str	r3, [sp, #96]	; 0x60
   dbcfa:	462e      	mov	r6, r5
   dbcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbcfe:	4620      	mov	r0, r4
   dbd00:	6859      	ldr	r1, [r3, #4]
   dbd02:	f000 fed3 	bl	dcaac <_Balloc>
   dbd06:	9007      	str	r0, [sp, #28]
   dbd08:	2800      	cmp	r0, #0
   dbd0a:	f43f af11 	beq.w	dbb30 <_strtod_l+0x498>
   dbd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbd10:	691a      	ldr	r2, [r3, #16]
   dbd12:	3202      	adds	r2, #2
   dbd14:	f103 010c 	add.w	r1, r3, #12
   dbd18:	0092      	lsls	r2, r2, #2
   dbd1a:	300c      	adds	r0, #12
   dbd1c:	f7ff fbf0 	bl	db500 <memcpy>
   dbd20:	ec4b ab10 	vmov	d0, sl, fp
   dbd24:	aa20      	add	r2, sp, #128	; 0x80
   dbd26:	a91f      	add	r1, sp, #124	; 0x7c
   dbd28:	4620      	mov	r0, r4
   dbd2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dbd2e:	f001 fa35 	bl	dd19c <__d2b>
   dbd32:	901e      	str	r0, [sp, #120]	; 0x78
   dbd34:	2800      	cmp	r0, #0
   dbd36:	f43f aefb 	beq.w	dbb30 <_strtod_l+0x498>
   dbd3a:	2101      	movs	r1, #1
   dbd3c:	4620      	mov	r0, r4
   dbd3e:	f000 ffcc 	bl	dccda <__i2b>
   dbd42:	4606      	mov	r6, r0
   dbd44:	2800      	cmp	r0, #0
   dbd46:	f43f aef3 	beq.w	dbb30 <_strtod_l+0x498>
   dbd4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dbd4c:	9904      	ldr	r1, [sp, #16]
   dbd4e:	2b00      	cmp	r3, #0
   dbd50:	bfab      	itete	ge
   dbd52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dbd54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dbd56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dbd58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dbd5c:	bfac      	ite	ge
   dbd5e:	eb03 0902 	addge.w	r9, r3, r2
   dbd62:	1ad7      	sublt	r7, r2, r3
   dbd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dbd66:	eba3 0801 	sub.w	r8, r3, r1
   dbd6a:	4490      	add	r8, r2
   dbd6c:	4ba3      	ldr	r3, [pc, #652]	; (dbffc <_strtod_l+0x964>)
   dbd6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbd72:	4598      	cmp	r8, r3
   dbd74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dbd78:	f280 80cc 	bge.w	dbf14 <_strtod_l+0x87c>
   dbd7c:	eba3 0308 	sub.w	r3, r3, r8
   dbd80:	2b1f      	cmp	r3, #31
   dbd82:	eba2 0203 	sub.w	r2, r2, r3
   dbd86:	f04f 0101 	mov.w	r1, #1
   dbd8a:	f300 80b6 	bgt.w	dbefa <_strtod_l+0x862>
   dbd8e:	fa01 f303 	lsl.w	r3, r1, r3
   dbd92:	9311      	str	r3, [sp, #68]	; 0x44
   dbd94:	2300      	movs	r3, #0
   dbd96:	930c      	str	r3, [sp, #48]	; 0x30
   dbd98:	eb09 0802 	add.w	r8, r9, r2
   dbd9c:	9b04      	ldr	r3, [sp, #16]
   dbd9e:	45c1      	cmp	r9, r8
   dbda0:	4417      	add	r7, r2
   dbda2:	441f      	add	r7, r3
   dbda4:	464b      	mov	r3, r9
   dbda6:	bfa8      	it	ge
   dbda8:	4643      	movge	r3, r8
   dbdaa:	42bb      	cmp	r3, r7
   dbdac:	bfa8      	it	ge
   dbdae:	463b      	movge	r3, r7
   dbdb0:	2b00      	cmp	r3, #0
   dbdb2:	bfc2      	ittt	gt
   dbdb4:	eba8 0803 	subgt.w	r8, r8, r3
   dbdb8:	1aff      	subgt	r7, r7, r3
   dbdba:	eba9 0903 	subgt.w	r9, r9, r3
   dbdbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dbdc0:	2b00      	cmp	r3, #0
   dbdc2:	dd17      	ble.n	dbdf4 <_strtod_l+0x75c>
   dbdc4:	4631      	mov	r1, r6
   dbdc6:	461a      	mov	r2, r3
   dbdc8:	4620      	mov	r0, r4
   dbdca:	f001 f82b 	bl	dce24 <__pow5mult>
   dbdce:	4606      	mov	r6, r0
   dbdd0:	2800      	cmp	r0, #0
   dbdd2:	f43f aead 	beq.w	dbb30 <_strtod_l+0x498>
   dbdd6:	4601      	mov	r1, r0
   dbdd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbdda:	4620      	mov	r0, r4
   dbddc:	f000 ff86 	bl	dccec <__multiply>
   dbde0:	900f      	str	r0, [sp, #60]	; 0x3c
   dbde2:	2800      	cmp	r0, #0
   dbde4:	f43f aea4 	beq.w	dbb30 <_strtod_l+0x498>
   dbde8:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbdea:	4620      	mov	r0, r4
   dbdec:	f000 fe92 	bl	dcb14 <_Bfree>
   dbdf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbdf2:	931e      	str	r3, [sp, #120]	; 0x78
   dbdf4:	f1b8 0f00 	cmp.w	r8, #0
   dbdf8:	f300 8091 	bgt.w	dbf1e <_strtod_l+0x886>
   dbdfc:	9b08      	ldr	r3, [sp, #32]
   dbdfe:	2b00      	cmp	r3, #0
   dbe00:	dd08      	ble.n	dbe14 <_strtod_l+0x77c>
   dbe02:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dbe04:	9907      	ldr	r1, [sp, #28]
   dbe06:	4620      	mov	r0, r4
   dbe08:	f001 f80c 	bl	dce24 <__pow5mult>
   dbe0c:	9007      	str	r0, [sp, #28]
   dbe0e:	2800      	cmp	r0, #0
   dbe10:	f43f ae8e 	beq.w	dbb30 <_strtod_l+0x498>
   dbe14:	2f00      	cmp	r7, #0
   dbe16:	dd08      	ble.n	dbe2a <_strtod_l+0x792>
   dbe18:	9907      	ldr	r1, [sp, #28]
   dbe1a:	463a      	mov	r2, r7
   dbe1c:	4620      	mov	r0, r4
   dbe1e:	f001 f84f 	bl	dcec0 <__lshift>
   dbe22:	9007      	str	r0, [sp, #28]
   dbe24:	2800      	cmp	r0, #0
   dbe26:	f43f ae83 	beq.w	dbb30 <_strtod_l+0x498>
   dbe2a:	f1b9 0f00 	cmp.w	r9, #0
   dbe2e:	dd08      	ble.n	dbe42 <_strtod_l+0x7aa>
   dbe30:	4631      	mov	r1, r6
   dbe32:	464a      	mov	r2, r9
   dbe34:	4620      	mov	r0, r4
   dbe36:	f001 f843 	bl	dcec0 <__lshift>
   dbe3a:	4606      	mov	r6, r0
   dbe3c:	2800      	cmp	r0, #0
   dbe3e:	f43f ae77 	beq.w	dbb30 <_strtod_l+0x498>
   dbe42:	9a07      	ldr	r2, [sp, #28]
   dbe44:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbe46:	4620      	mov	r0, r4
   dbe48:	f001 f8b5 	bl	dcfb6 <__mdiff>
   dbe4c:	4605      	mov	r5, r0
   dbe4e:	2800      	cmp	r0, #0
   dbe50:	f43f ae6e 	beq.w	dbb30 <_strtod_l+0x498>
   dbe54:	68c3      	ldr	r3, [r0, #12]
   dbe56:	930f      	str	r3, [sp, #60]	; 0x3c
   dbe58:	2300      	movs	r3, #0
   dbe5a:	60c3      	str	r3, [r0, #12]
   dbe5c:	4631      	mov	r1, r6
   dbe5e:	f001 f88e 	bl	dcf7e <__mcmp>
   dbe62:	2800      	cmp	r0, #0
   dbe64:	da65      	bge.n	dbf32 <_strtod_l+0x89a>
   dbe66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbe68:	ea53 030a 	orrs.w	r3, r3, sl
   dbe6c:	f040 8087 	bne.w	dbf7e <_strtod_l+0x8e6>
   dbe70:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbe74:	2b00      	cmp	r3, #0
   dbe76:	f040 8082 	bne.w	dbf7e <_strtod_l+0x8e6>
   dbe7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbe7e:	0d1b      	lsrs	r3, r3, #20
   dbe80:	051b      	lsls	r3, r3, #20
   dbe82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dbe86:	d97a      	bls.n	dbf7e <_strtod_l+0x8e6>
   dbe88:	696b      	ldr	r3, [r5, #20]
   dbe8a:	b913      	cbnz	r3, dbe92 <_strtod_l+0x7fa>
   dbe8c:	692b      	ldr	r3, [r5, #16]
   dbe8e:	2b01      	cmp	r3, #1
   dbe90:	dd75      	ble.n	dbf7e <_strtod_l+0x8e6>
   dbe92:	4629      	mov	r1, r5
   dbe94:	2201      	movs	r2, #1
   dbe96:	4620      	mov	r0, r4
   dbe98:	f001 f812 	bl	dcec0 <__lshift>
   dbe9c:	4631      	mov	r1, r6
   dbe9e:	4605      	mov	r5, r0
   dbea0:	f001 f86d 	bl	dcf7e <__mcmp>
   dbea4:	2800      	cmp	r0, #0
   dbea6:	dd6a      	ble.n	dbf7e <_strtod_l+0x8e6>
   dbea8:	9904      	ldr	r1, [sp, #16]
   dbeaa:	4a55      	ldr	r2, [pc, #340]	; (dc000 <_strtod_l+0x968>)
   dbeac:	465b      	mov	r3, fp
   dbeae:	2900      	cmp	r1, #0
   dbeb0:	f000 8085 	beq.w	dbfbe <_strtod_l+0x926>
   dbeb4:	ea02 010b 	and.w	r1, r2, fp
   dbeb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dbebc:	dc7f      	bgt.n	dbfbe <_strtod_l+0x926>
   dbebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dbec2:	f77f aeaa 	ble.w	dbc1a <_strtod_l+0x582>
   dbec6:	4a4f      	ldr	r2, [pc, #316]	; (dc004 <_strtod_l+0x96c>)
   dbec8:	2300      	movs	r3, #0
   dbeca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dbece:	4650      	mov	r0, sl
   dbed0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dbed4:	4659      	mov	r1, fp
   dbed6:	f7fe ff87 	bl	dade8 <__aeabi_dmul>
   dbeda:	460b      	mov	r3, r1
   dbedc:	4303      	orrs	r3, r0
   dbede:	bf08      	it	eq
   dbee0:	2322      	moveq	r3, #34	; 0x22
   dbee2:	4682      	mov	sl, r0
   dbee4:	468b      	mov	fp, r1
   dbee6:	bf08      	it	eq
   dbee8:	6023      	streq	r3, [r4, #0]
   dbeea:	e62b      	b.n	dbb44 <_strtod_l+0x4ac>
   dbeec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbef0:	fa02 f303 	lsl.w	r3, r2, r3
   dbef4:	ea03 0a0a 	and.w	sl, r3, sl
   dbef8:	e6de      	b.n	dbcb8 <_strtod_l+0x620>
   dbefa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dbefe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dbf02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dbf06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dbf0a:	fa01 f308 	lsl.w	r3, r1, r8
   dbf0e:	930c      	str	r3, [sp, #48]	; 0x30
   dbf10:	9111      	str	r1, [sp, #68]	; 0x44
   dbf12:	e741      	b.n	dbd98 <_strtod_l+0x700>
   dbf14:	2300      	movs	r3, #0
   dbf16:	930c      	str	r3, [sp, #48]	; 0x30
   dbf18:	2301      	movs	r3, #1
   dbf1a:	9311      	str	r3, [sp, #68]	; 0x44
   dbf1c:	e73c      	b.n	dbd98 <_strtod_l+0x700>
   dbf1e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbf20:	4642      	mov	r2, r8
   dbf22:	4620      	mov	r0, r4
   dbf24:	f000 ffcc 	bl	dcec0 <__lshift>
   dbf28:	901e      	str	r0, [sp, #120]	; 0x78
   dbf2a:	2800      	cmp	r0, #0
   dbf2c:	f47f af66 	bne.w	dbdfc <_strtod_l+0x764>
   dbf30:	e5fe      	b.n	dbb30 <_strtod_l+0x498>
   dbf32:	465f      	mov	r7, fp
   dbf34:	d16e      	bne.n	dc014 <_strtod_l+0x97c>
   dbf36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dbf38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbf3c:	b342      	cbz	r2, dbf90 <_strtod_l+0x8f8>
   dbf3e:	4a32      	ldr	r2, [pc, #200]	; (dc008 <_strtod_l+0x970>)
   dbf40:	4293      	cmp	r3, r2
   dbf42:	d128      	bne.n	dbf96 <_strtod_l+0x8fe>
   dbf44:	9b04      	ldr	r3, [sp, #16]
   dbf46:	4650      	mov	r0, sl
   dbf48:	b1eb      	cbz	r3, dbf86 <_strtod_l+0x8ee>
   dbf4a:	4a2d      	ldr	r2, [pc, #180]	; (dc000 <_strtod_l+0x968>)
   dbf4c:	403a      	ands	r2, r7
   dbf4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dbf52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dbf56:	d819      	bhi.n	dbf8c <_strtod_l+0x8f4>
   dbf58:	0d12      	lsrs	r2, r2, #20
   dbf5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dbf5e:	fa01 f303 	lsl.w	r3, r1, r3
   dbf62:	4298      	cmp	r0, r3
   dbf64:	d117      	bne.n	dbf96 <_strtod_l+0x8fe>
   dbf66:	4b29      	ldr	r3, [pc, #164]	; (dc00c <_strtod_l+0x974>)
   dbf68:	429f      	cmp	r7, r3
   dbf6a:	d102      	bne.n	dbf72 <_strtod_l+0x8da>
   dbf6c:	3001      	adds	r0, #1
   dbf6e:	f43f addf 	beq.w	dbb30 <_strtod_l+0x498>
   dbf72:	4b23      	ldr	r3, [pc, #140]	; (dc000 <_strtod_l+0x968>)
   dbf74:	403b      	ands	r3, r7
   dbf76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dbf7a:	f04f 0a00 	mov.w	sl, #0
   dbf7e:	9b04      	ldr	r3, [sp, #16]
   dbf80:	2b00      	cmp	r3, #0
   dbf82:	d1a0      	bne.n	dbec6 <_strtod_l+0x82e>
   dbf84:	e5de      	b.n	dbb44 <_strtod_l+0x4ac>
   dbf86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dbf8a:	e7ea      	b.n	dbf62 <_strtod_l+0x8ca>
   dbf8c:	460b      	mov	r3, r1
   dbf8e:	e7e8      	b.n	dbf62 <_strtod_l+0x8ca>
   dbf90:	ea53 030a 	orrs.w	r3, r3, sl
   dbf94:	d088      	beq.n	dbea8 <_strtod_l+0x810>
   dbf96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dbf98:	b1db      	cbz	r3, dbfd2 <_strtod_l+0x93a>
   dbf9a:	423b      	tst	r3, r7
   dbf9c:	d0ef      	beq.n	dbf7e <_strtod_l+0x8e6>
   dbf9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbfa0:	9a04      	ldr	r2, [sp, #16]
   dbfa2:	4650      	mov	r0, sl
   dbfa4:	4659      	mov	r1, fp
   dbfa6:	b1c3      	cbz	r3, dbfda <_strtod_l+0x942>
   dbfa8:	f7ff fb5a 	bl	db660 <sulp>
   dbfac:	4602      	mov	r2, r0
   dbfae:	460b      	mov	r3, r1
   dbfb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dbfb4:	f7fe fd62 	bl	daa7c <__adddf3>
   dbfb8:	4682      	mov	sl, r0
   dbfba:	468b      	mov	fp, r1
   dbfbc:	e7df      	b.n	dbf7e <_strtod_l+0x8e6>
   dbfbe:	4013      	ands	r3, r2
   dbfc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dbfc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dbfc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dbfcc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbfd0:	e7d5      	b.n	dbf7e <_strtod_l+0x8e6>
   dbfd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dbfd4:	ea13 0f0a 	tst.w	r3, sl
   dbfd8:	e7e0      	b.n	dbf9c <_strtod_l+0x904>
   dbfda:	f7ff fb41 	bl	db660 <sulp>
   dbfde:	4602      	mov	r2, r0
   dbfe0:	460b      	mov	r3, r1
   dbfe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dbfe6:	f7fe fd47 	bl	daa78 <__aeabi_dsub>
   dbfea:	2200      	movs	r2, #0
   dbfec:	2300      	movs	r3, #0
   dbfee:	4682      	mov	sl, r0
   dbff0:	468b      	mov	fp, r1
   dbff2:	f7ff f961 	bl	db2b8 <__aeabi_dcmpeq>
   dbff6:	2800      	cmp	r0, #0
   dbff8:	d0c1      	beq.n	dbf7e <_strtod_l+0x8e6>
   dbffa:	e60e      	b.n	dbc1a <_strtod_l+0x582>
   dbffc:	fffffc02 	.word	0xfffffc02
   dc000:	7ff00000 	.word	0x7ff00000
   dc004:	39500000 	.word	0x39500000
   dc008:	000fffff 	.word	0x000fffff
   dc00c:	7fefffff 	.word	0x7fefffff
   dc010:	000de2b0 	.word	0x000de2b0
   dc014:	4631      	mov	r1, r6
   dc016:	4628      	mov	r0, r5
   dc018:	f001 f910 	bl	dd23c <__ratio>
   dc01c:	ec59 8b10 	vmov	r8, r9, d0
   dc020:	ee10 0a10 	vmov	r0, s0
   dc024:	2200      	movs	r2, #0
   dc026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc02a:	4649      	mov	r1, r9
   dc02c:	f7ff f958 	bl	db2e0 <__aeabi_dcmple>
   dc030:	2800      	cmp	r0, #0
   dc032:	d07c      	beq.n	dc12e <_strtod_l+0xa96>
   dc034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc036:	2b00      	cmp	r3, #0
   dc038:	d04c      	beq.n	dc0d4 <_strtod_l+0xa3c>
   dc03a:	4b95      	ldr	r3, [pc, #596]	; (dc290 <_strtod_l+0xbf8>)
   dc03c:	2200      	movs	r2, #0
   dc03e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc042:	f8df 924c 	ldr.w	r9, [pc, #588]	; dc290 <_strtod_l+0xbf8>
   dc046:	f04f 0800 	mov.w	r8, #0
   dc04a:	4b92      	ldr	r3, [pc, #584]	; (dc294 <_strtod_l+0xbfc>)
   dc04c:	403b      	ands	r3, r7
   dc04e:	9311      	str	r3, [sp, #68]	; 0x44
   dc050:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc052:	4b91      	ldr	r3, [pc, #580]	; (dc298 <_strtod_l+0xc00>)
   dc054:	429a      	cmp	r2, r3
   dc056:	f040 80b2 	bne.w	dc1be <_strtod_l+0xb26>
   dc05a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc05e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc062:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc066:	ec4b ab10 	vmov	d0, sl, fp
   dc06a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc06e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc072:	f001 f817 	bl	dd0a4 <__ulp>
   dc076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc07a:	ec53 2b10 	vmov	r2, r3, d0
   dc07e:	f7fe feb3 	bl	dade8 <__aeabi_dmul>
   dc082:	4652      	mov	r2, sl
   dc084:	465b      	mov	r3, fp
   dc086:	f7fe fcf9 	bl	daa7c <__adddf3>
   dc08a:	460b      	mov	r3, r1
   dc08c:	4981      	ldr	r1, [pc, #516]	; (dc294 <_strtod_l+0xbfc>)
   dc08e:	4a83      	ldr	r2, [pc, #524]	; (dc29c <_strtod_l+0xc04>)
   dc090:	4019      	ands	r1, r3
   dc092:	4291      	cmp	r1, r2
   dc094:	4682      	mov	sl, r0
   dc096:	d95e      	bls.n	dc156 <_strtod_l+0xabe>
   dc098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc09a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc09e:	4293      	cmp	r3, r2
   dc0a0:	d103      	bne.n	dc0aa <_strtod_l+0xa12>
   dc0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc0a4:	3301      	adds	r3, #1
   dc0a6:	f43f ad43 	beq.w	dbb30 <_strtod_l+0x498>
   dc0aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dc2a8 <_strtod_l+0xc10>
   dc0ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc0b2:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc0b4:	4620      	mov	r0, r4
   dc0b6:	f000 fd2d 	bl	dcb14 <_Bfree>
   dc0ba:	9907      	ldr	r1, [sp, #28]
   dc0bc:	4620      	mov	r0, r4
   dc0be:	f000 fd29 	bl	dcb14 <_Bfree>
   dc0c2:	4631      	mov	r1, r6
   dc0c4:	4620      	mov	r0, r4
   dc0c6:	f000 fd25 	bl	dcb14 <_Bfree>
   dc0ca:	4629      	mov	r1, r5
   dc0cc:	4620      	mov	r0, r4
   dc0ce:	f000 fd21 	bl	dcb14 <_Bfree>
   dc0d2:	e613      	b.n	dbcfc <_strtod_l+0x664>
   dc0d4:	f1ba 0f00 	cmp.w	sl, #0
   dc0d8:	d11b      	bne.n	dc112 <_strtod_l+0xa7a>
   dc0da:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc0de:	b9f3      	cbnz	r3, dc11e <_strtod_l+0xa86>
   dc0e0:	4b6b      	ldr	r3, [pc, #428]	; (dc290 <_strtod_l+0xbf8>)
   dc0e2:	2200      	movs	r2, #0
   dc0e4:	4640      	mov	r0, r8
   dc0e6:	4649      	mov	r1, r9
   dc0e8:	f7ff f8f0 	bl	db2cc <__aeabi_dcmplt>
   dc0ec:	b9d0      	cbnz	r0, dc124 <_strtod_l+0xa8c>
   dc0ee:	4640      	mov	r0, r8
   dc0f0:	4649      	mov	r1, r9
   dc0f2:	4b6b      	ldr	r3, [pc, #428]	; (dc2a0 <_strtod_l+0xc08>)
   dc0f4:	2200      	movs	r2, #0
   dc0f6:	f7fe fe77 	bl	dade8 <__aeabi_dmul>
   dc0fa:	4680      	mov	r8, r0
   dc0fc:	4689      	mov	r9, r1
   dc0fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc102:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc106:	931b      	str	r3, [sp, #108]	; 0x6c
   dc108:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc10c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc110:	e79b      	b.n	dc04a <_strtod_l+0x9b2>
   dc112:	f1ba 0f01 	cmp.w	sl, #1
   dc116:	d102      	bne.n	dc11e <_strtod_l+0xa86>
   dc118:	2f00      	cmp	r7, #0
   dc11a:	f43f ad7e 	beq.w	dbc1a <_strtod_l+0x582>
   dc11e:	4b61      	ldr	r3, [pc, #388]	; (dc2a4 <_strtod_l+0xc0c>)
   dc120:	2200      	movs	r2, #0
   dc122:	e78c      	b.n	dc03e <_strtod_l+0x9a6>
   dc124:	f8df 9178 	ldr.w	r9, [pc, #376]	; dc2a0 <_strtod_l+0xc08>
   dc128:	f04f 0800 	mov.w	r8, #0
   dc12c:	e7e7      	b.n	dc0fe <_strtod_l+0xa66>
   dc12e:	4b5c      	ldr	r3, [pc, #368]	; (dc2a0 <_strtod_l+0xc08>)
   dc130:	4640      	mov	r0, r8
   dc132:	4649      	mov	r1, r9
   dc134:	2200      	movs	r2, #0
   dc136:	f7fe fe57 	bl	dade8 <__aeabi_dmul>
   dc13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc13c:	4680      	mov	r8, r0
   dc13e:	4689      	mov	r9, r1
   dc140:	b933      	cbnz	r3, dc150 <_strtod_l+0xab8>
   dc142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc146:	9012      	str	r0, [sp, #72]	; 0x48
   dc148:	9313      	str	r3, [sp, #76]	; 0x4c
   dc14a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc14e:	e7dd      	b.n	dc10c <_strtod_l+0xa74>
   dc150:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc154:	e7f9      	b.n	dc14a <_strtod_l+0xab2>
   dc156:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc15a:	9b04      	ldr	r3, [sp, #16]
   dc15c:	2b00      	cmp	r3, #0
   dc15e:	d1a8      	bne.n	dc0b2 <_strtod_l+0xa1a>
   dc160:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc164:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc166:	0d1b      	lsrs	r3, r3, #20
   dc168:	051b      	lsls	r3, r3, #20
   dc16a:	429a      	cmp	r2, r3
   dc16c:	d1a1      	bne.n	dc0b2 <_strtod_l+0xa1a>
   dc16e:	4640      	mov	r0, r8
   dc170:	4649      	mov	r1, r9
   dc172:	f001 f8ff 	bl	dd374 <__aeabi_d2lz>
   dc176:	f7fe fe09 	bl	dad8c <__aeabi_l2d>
   dc17a:	4602      	mov	r2, r0
   dc17c:	460b      	mov	r3, r1
   dc17e:	4640      	mov	r0, r8
   dc180:	4649      	mov	r1, r9
   dc182:	f7fe fc79 	bl	daa78 <__aeabi_dsub>
   dc186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc188:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc18c:	ea43 030a 	orr.w	r3, r3, sl
   dc190:	4313      	orrs	r3, r2
   dc192:	4680      	mov	r8, r0
   dc194:	4689      	mov	r9, r1
   dc196:	d053      	beq.n	dc240 <_strtod_l+0xba8>
   dc198:	a335      	add	r3, pc, #212	; (adr r3, dc270 <_strtod_l+0xbd8>)
   dc19a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc19e:	f7ff f895 	bl	db2cc <__aeabi_dcmplt>
   dc1a2:	2800      	cmp	r0, #0
   dc1a4:	f47f acce 	bne.w	dbb44 <_strtod_l+0x4ac>
   dc1a8:	a333      	add	r3, pc, #204	; (adr r3, dc278 <_strtod_l+0xbe0>)
   dc1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1ae:	4640      	mov	r0, r8
   dc1b0:	4649      	mov	r1, r9
   dc1b2:	f7ff f8a9 	bl	db308 <__aeabi_dcmpgt>
   dc1b6:	2800      	cmp	r0, #0
   dc1b8:	f43f af7b 	beq.w	dc0b2 <_strtod_l+0xa1a>
   dc1bc:	e4c2      	b.n	dbb44 <_strtod_l+0x4ac>
   dc1be:	9b04      	ldr	r3, [sp, #16]
   dc1c0:	b333      	cbz	r3, dc210 <_strtod_l+0xb78>
   dc1c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc1c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dc1c8:	d822      	bhi.n	dc210 <_strtod_l+0xb78>
   dc1ca:	a32d      	add	r3, pc, #180	; (adr r3, dc280 <_strtod_l+0xbe8>)
   dc1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1d0:	4640      	mov	r0, r8
   dc1d2:	4649      	mov	r1, r9
   dc1d4:	f7ff f884 	bl	db2e0 <__aeabi_dcmple>
   dc1d8:	b1a0      	cbz	r0, dc204 <_strtod_l+0xb6c>
   dc1da:	4649      	mov	r1, r9
   dc1dc:	4640      	mov	r0, r8
   dc1de:	f7ff f8b3 	bl	db348 <__aeabi_d2uiz>
   dc1e2:	2801      	cmp	r0, #1
   dc1e4:	bf38      	it	cc
   dc1e6:	2001      	movcc	r0, #1
   dc1e8:	f7fe fd84 	bl	dacf4 <__aeabi_ui2d>
   dc1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc1ee:	4680      	mov	r8, r0
   dc1f0:	4689      	mov	r9, r1
   dc1f2:	bb13      	cbnz	r3, dc23a <_strtod_l+0xba2>
   dc1f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc1f8:	9014      	str	r0, [sp, #80]	; 0x50
   dc1fa:	9315      	str	r3, [sp, #84]	; 0x54
   dc1fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dc200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dc206:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc208:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dc20c:	1a9b      	subs	r3, r3, r2
   dc20e:	930d      	str	r3, [sp, #52]	; 0x34
   dc210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc214:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dc218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc21c:	f000 ff42 	bl	dd0a4 <__ulp>
   dc220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc224:	ec53 2b10 	vmov	r2, r3, d0
   dc228:	f7fe fdde 	bl	dade8 <__aeabi_dmul>
   dc22c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc230:	f7fe fc24 	bl	daa7c <__adddf3>
   dc234:	4682      	mov	sl, r0
   dc236:	468b      	mov	fp, r1
   dc238:	e78f      	b.n	dc15a <_strtod_l+0xac2>
   dc23a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dc23e:	e7dd      	b.n	dc1fc <_strtod_l+0xb64>
   dc240:	a311      	add	r3, pc, #68	; (adr r3, dc288 <_strtod_l+0xbf0>)
   dc242:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc246:	f7ff f841 	bl	db2cc <__aeabi_dcmplt>
   dc24a:	e7b4      	b.n	dc1b6 <_strtod_l+0xb1e>
   dc24c:	2300      	movs	r3, #0
   dc24e:	930e      	str	r3, [sp, #56]	; 0x38
   dc250:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc252:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc254:	6013      	str	r3, [r2, #0]
   dc256:	f7ff ba65 	b.w	db724 <_strtod_l+0x8c>
   dc25a:	2b65      	cmp	r3, #101	; 0x65
   dc25c:	f43f ab5d 	beq.w	db91a <_strtod_l+0x282>
   dc260:	2b45      	cmp	r3, #69	; 0x45
   dc262:	f43f ab5a 	beq.w	db91a <_strtod_l+0x282>
   dc266:	2201      	movs	r2, #1
   dc268:	f7ff bb92 	b.w	db990 <_strtod_l+0x2f8>
   dc26c:	f3af 8000 	nop.w
   dc270:	94a03595 	.word	0x94a03595
   dc274:	3fdfffff 	.word	0x3fdfffff
   dc278:	35afe535 	.word	0x35afe535
   dc27c:	3fe00000 	.word	0x3fe00000
   dc280:	ffc00000 	.word	0xffc00000
   dc284:	41dfffff 	.word	0x41dfffff
   dc288:	94a03595 	.word	0x94a03595
   dc28c:	3fcfffff 	.word	0x3fcfffff
   dc290:	3ff00000 	.word	0x3ff00000
   dc294:	7ff00000 	.word	0x7ff00000
   dc298:	7fe00000 	.word	0x7fe00000
   dc29c:	7c9fffff 	.word	0x7c9fffff
   dc2a0:	3fe00000 	.word	0x3fe00000
   dc2a4:	bff00000 	.word	0xbff00000
   dc2a8:	7fefffff 	.word	0x7fefffff

000dc2ac <strtod>:
   dc2ac:	460a      	mov	r2, r1
   dc2ae:	4601      	mov	r1, r0
   dc2b0:	4802      	ldr	r0, [pc, #8]	; (dc2bc <strtod+0x10>)
   dc2b2:	4b03      	ldr	r3, [pc, #12]	; (dc2c0 <strtod+0x14>)
   dc2b4:	6800      	ldr	r0, [r0, #0]
   dc2b6:	f7ff b9ef 	b.w	db698 <_strtod_l>
   dc2ba:	bf00      	nop
   dc2bc:	2003dd08 	.word	0x2003dd08
   dc2c0:	2003dd70 	.word	0x2003dd70

000dc2c4 <_strtol_l.isra.0>:
   dc2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc2c8:	4e3a      	ldr	r6, [pc, #232]	; (dc3b4 <_strtol_l.isra.0+0xf0>)
   dc2ca:	4686      	mov	lr, r0
   dc2cc:	468c      	mov	ip, r1
   dc2ce:	4660      	mov	r0, ip
   dc2d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc2d4:	5da5      	ldrb	r5, [r4, r6]
   dc2d6:	f015 0508 	ands.w	r5, r5, #8
   dc2da:	d1f8      	bne.n	dc2ce <_strtol_l.isra.0+0xa>
   dc2dc:	2c2d      	cmp	r4, #45	; 0x2d
   dc2de:	d133      	bne.n	dc348 <_strtol_l.isra.0+0x84>
   dc2e0:	f89c 4000 	ldrb.w	r4, [ip]
   dc2e4:	f04f 0801 	mov.w	r8, #1
   dc2e8:	f100 0c02 	add.w	ip, r0, #2
   dc2ec:	2b00      	cmp	r3, #0
   dc2ee:	d05c      	beq.n	dc3aa <_strtol_l.isra.0+0xe6>
   dc2f0:	2b10      	cmp	r3, #16
   dc2f2:	d10c      	bne.n	dc30e <_strtol_l.isra.0+0x4a>
   dc2f4:	2c30      	cmp	r4, #48	; 0x30
   dc2f6:	d10a      	bne.n	dc30e <_strtol_l.isra.0+0x4a>
   dc2f8:	f89c 0000 	ldrb.w	r0, [ip]
   dc2fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc300:	2858      	cmp	r0, #88	; 0x58
   dc302:	d14d      	bne.n	dc3a0 <_strtol_l.isra.0+0xdc>
   dc304:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc308:	2310      	movs	r3, #16
   dc30a:	f10c 0c02 	add.w	ip, ip, #2
   dc30e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc312:	3f01      	subs	r7, #1
   dc314:	2600      	movs	r6, #0
   dc316:	fbb7 f9f3 	udiv	r9, r7, r3
   dc31a:	4630      	mov	r0, r6
   dc31c:	fb03 7a19 	mls	sl, r3, r9, r7
   dc320:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc324:	2d09      	cmp	r5, #9
   dc326:	d818      	bhi.n	dc35a <_strtol_l.isra.0+0x96>
   dc328:	462c      	mov	r4, r5
   dc32a:	42a3      	cmp	r3, r4
   dc32c:	dd24      	ble.n	dc378 <_strtol_l.isra.0+0xb4>
   dc32e:	1c75      	adds	r5, r6, #1
   dc330:	d007      	beq.n	dc342 <_strtol_l.isra.0+0x7e>
   dc332:	4581      	cmp	r9, r0
   dc334:	d31d      	bcc.n	dc372 <_strtol_l.isra.0+0xae>
   dc336:	d101      	bne.n	dc33c <_strtol_l.isra.0+0x78>
   dc338:	45a2      	cmp	sl, r4
   dc33a:	db1a      	blt.n	dc372 <_strtol_l.isra.0+0xae>
   dc33c:	fb00 4003 	mla	r0, r0, r3, r4
   dc340:	2601      	movs	r6, #1
   dc342:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc346:	e7eb      	b.n	dc320 <_strtol_l.isra.0+0x5c>
   dc348:	2c2b      	cmp	r4, #43	; 0x2b
   dc34a:	bf08      	it	eq
   dc34c:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc350:	46a8      	mov	r8, r5
   dc352:	bf08      	it	eq
   dc354:	f100 0c02 	addeq.w	ip, r0, #2
   dc358:	e7c8      	b.n	dc2ec <_strtol_l.isra.0+0x28>
   dc35a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc35e:	2d19      	cmp	r5, #25
   dc360:	d801      	bhi.n	dc366 <_strtol_l.isra.0+0xa2>
   dc362:	3c37      	subs	r4, #55	; 0x37
   dc364:	e7e1      	b.n	dc32a <_strtol_l.isra.0+0x66>
   dc366:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc36a:	2d19      	cmp	r5, #25
   dc36c:	d804      	bhi.n	dc378 <_strtol_l.isra.0+0xb4>
   dc36e:	3c57      	subs	r4, #87	; 0x57
   dc370:	e7db      	b.n	dc32a <_strtol_l.isra.0+0x66>
   dc372:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc376:	e7e4      	b.n	dc342 <_strtol_l.isra.0+0x7e>
   dc378:	1c73      	adds	r3, r6, #1
   dc37a:	d106      	bne.n	dc38a <_strtol_l.isra.0+0xc6>
   dc37c:	2322      	movs	r3, #34	; 0x22
   dc37e:	f8ce 3000 	str.w	r3, [lr]
   dc382:	4638      	mov	r0, r7
   dc384:	b942      	cbnz	r2, dc398 <_strtol_l.isra.0+0xd4>
   dc386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc38a:	f1b8 0f00 	cmp.w	r8, #0
   dc38e:	d000      	beq.n	dc392 <_strtol_l.isra.0+0xce>
   dc390:	4240      	negs	r0, r0
   dc392:	2a00      	cmp	r2, #0
   dc394:	d0f7      	beq.n	dc386 <_strtol_l.isra.0+0xc2>
   dc396:	b10e      	cbz	r6, dc39c <_strtol_l.isra.0+0xd8>
   dc398:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc39c:	6011      	str	r1, [r2, #0]
   dc39e:	e7f2      	b.n	dc386 <_strtol_l.isra.0+0xc2>
   dc3a0:	2430      	movs	r4, #48	; 0x30
   dc3a2:	2b00      	cmp	r3, #0
   dc3a4:	d1b3      	bne.n	dc30e <_strtol_l.isra.0+0x4a>
   dc3a6:	2308      	movs	r3, #8
   dc3a8:	e7b1      	b.n	dc30e <_strtol_l.isra.0+0x4a>
   dc3aa:	2c30      	cmp	r4, #48	; 0x30
   dc3ac:	d0a4      	beq.n	dc2f8 <_strtol_l.isra.0+0x34>
   dc3ae:	230a      	movs	r3, #10
   dc3b0:	e7ad      	b.n	dc30e <_strtol_l.isra.0+0x4a>
   dc3b2:	bf00      	nop
   dc3b4:	000de2d9 	.word	0x000de2d9

000dc3b8 <strtol>:
   dc3b8:	4613      	mov	r3, r2
   dc3ba:	460a      	mov	r2, r1
   dc3bc:	4601      	mov	r1, r0
   dc3be:	4802      	ldr	r0, [pc, #8]	; (dc3c8 <strtol+0x10>)
   dc3c0:	6800      	ldr	r0, [r0, #0]
   dc3c2:	f7ff bf7f 	b.w	dc2c4 <_strtol_l.isra.0>
   dc3c6:	bf00      	nop
   dc3c8:	2003dd08 	.word	0x2003dd08

000dc3cc <rshift>:
   dc3cc:	6903      	ldr	r3, [r0, #16]
   dc3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dc3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
   dc3da:	f100 0414 	add.w	r4, r0, #20
   dc3de:	dd45      	ble.n	dc46c <rshift+0xa0>
   dc3e0:	f011 011f 	ands.w	r1, r1, #31
   dc3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dc3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dc3ec:	d10c      	bne.n	dc408 <rshift+0x3c>
   dc3ee:	f100 0710 	add.w	r7, r0, #16
   dc3f2:	4629      	mov	r1, r5
   dc3f4:	42b1      	cmp	r1, r6
   dc3f6:	d334      	bcc.n	dc462 <rshift+0x96>
   dc3f8:	1a9b      	subs	r3, r3, r2
   dc3fa:	009b      	lsls	r3, r3, #2
   dc3fc:	1eea      	subs	r2, r5, #3
   dc3fe:	4296      	cmp	r6, r2
   dc400:	bf38      	it	cc
   dc402:	2300      	movcc	r3, #0
   dc404:	4423      	add	r3, r4
   dc406:	e015      	b.n	dc434 <rshift+0x68>
   dc408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dc40c:	f1c1 0820 	rsb	r8, r1, #32
   dc410:	40cf      	lsrs	r7, r1
   dc412:	f105 0e04 	add.w	lr, r5, #4
   dc416:	46a1      	mov	r9, r4
   dc418:	4576      	cmp	r6, lr
   dc41a:	46f4      	mov	ip, lr
   dc41c:	d815      	bhi.n	dc44a <rshift+0x7e>
   dc41e:	1a9b      	subs	r3, r3, r2
   dc420:	009a      	lsls	r2, r3, #2
   dc422:	3a04      	subs	r2, #4
   dc424:	3501      	adds	r5, #1
   dc426:	42ae      	cmp	r6, r5
   dc428:	bf38      	it	cc
   dc42a:	2200      	movcc	r2, #0
   dc42c:	18a3      	adds	r3, r4, r2
   dc42e:	50a7      	str	r7, [r4, r2]
   dc430:	b107      	cbz	r7, dc434 <rshift+0x68>
   dc432:	3304      	adds	r3, #4
   dc434:	1b1a      	subs	r2, r3, r4
   dc436:	42a3      	cmp	r3, r4
   dc438:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dc43c:	bf08      	it	eq
   dc43e:	2300      	moveq	r3, #0
   dc440:	6102      	str	r2, [r0, #16]
   dc442:	bf08      	it	eq
   dc444:	6143      	streq	r3, [r0, #20]
   dc446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc44a:	f8dc c000 	ldr.w	ip, [ip]
   dc44e:	fa0c fc08 	lsl.w	ip, ip, r8
   dc452:	ea4c 0707 	orr.w	r7, ip, r7
   dc456:	f849 7b04 	str.w	r7, [r9], #4
   dc45a:	f85e 7b04 	ldr.w	r7, [lr], #4
   dc45e:	40cf      	lsrs	r7, r1
   dc460:	e7da      	b.n	dc418 <rshift+0x4c>
   dc462:	f851 cb04 	ldr.w	ip, [r1], #4
   dc466:	f847 cf04 	str.w	ip, [r7, #4]!
   dc46a:	e7c3      	b.n	dc3f4 <rshift+0x28>
   dc46c:	4623      	mov	r3, r4
   dc46e:	e7e1      	b.n	dc434 <rshift+0x68>

000dc470 <__hexdig_fun>:
   dc470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc474:	2b09      	cmp	r3, #9
   dc476:	d802      	bhi.n	dc47e <__hexdig_fun+0xe>
   dc478:	3820      	subs	r0, #32
   dc47a:	b2c0      	uxtb	r0, r0
   dc47c:	4770      	bx	lr
   dc47e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc482:	2b05      	cmp	r3, #5
   dc484:	d801      	bhi.n	dc48a <__hexdig_fun+0x1a>
   dc486:	3847      	subs	r0, #71	; 0x47
   dc488:	e7f7      	b.n	dc47a <__hexdig_fun+0xa>
   dc48a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc48e:	2b05      	cmp	r3, #5
   dc490:	d801      	bhi.n	dc496 <__hexdig_fun+0x26>
   dc492:	3827      	subs	r0, #39	; 0x27
   dc494:	e7f1      	b.n	dc47a <__hexdig_fun+0xa>
   dc496:	2000      	movs	r0, #0
   dc498:	4770      	bx	lr
	...

000dc49c <__gethex>:
   dc49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4a0:	ed2d 8b02 	vpush	{d8}
   dc4a4:	b089      	sub	sp, #36	; 0x24
   dc4a6:	ee08 0a10 	vmov	s16, r0
   dc4aa:	9304      	str	r3, [sp, #16]
   dc4ac:	4bbc      	ldr	r3, [pc, #752]	; (dc7a0 <__gethex+0x304>)
   dc4ae:	681b      	ldr	r3, [r3, #0]
   dc4b0:	9301      	str	r3, [sp, #4]
   dc4b2:	4618      	mov	r0, r3
   dc4b4:	468b      	mov	fp, r1
   dc4b6:	4690      	mov	r8, r2
   dc4b8:	f7ff f8a5 	bl	db606 <strlen>
   dc4bc:	9b01      	ldr	r3, [sp, #4]
   dc4be:	f8db 2000 	ldr.w	r2, [fp]
   dc4c2:	4403      	add	r3, r0
   dc4c4:	4682      	mov	sl, r0
   dc4c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc4ca:	9305      	str	r3, [sp, #20]
   dc4cc:	1c93      	adds	r3, r2, #2
   dc4ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dc4d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dc4d6:	32fe      	adds	r2, #254	; 0xfe
   dc4d8:	18d1      	adds	r1, r2, r3
   dc4da:	461f      	mov	r7, r3
   dc4dc:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc4e0:	9100      	str	r1, [sp, #0]
   dc4e2:	2830      	cmp	r0, #48	; 0x30
   dc4e4:	d0f8      	beq.n	dc4d8 <__gethex+0x3c>
   dc4e6:	f7ff ffc3 	bl	dc470 <__hexdig_fun>
   dc4ea:	4604      	mov	r4, r0
   dc4ec:	2800      	cmp	r0, #0
   dc4ee:	d13a      	bne.n	dc566 <__gethex+0xca>
   dc4f0:	9901      	ldr	r1, [sp, #4]
   dc4f2:	4652      	mov	r2, sl
   dc4f4:	4638      	mov	r0, r7
   dc4f6:	f7ff f88e 	bl	db616 <strncmp>
   dc4fa:	4605      	mov	r5, r0
   dc4fc:	2800      	cmp	r0, #0
   dc4fe:	d168      	bne.n	dc5d2 <__gethex+0x136>
   dc500:	f817 000a 	ldrb.w	r0, [r7, sl]
   dc504:	eb07 060a 	add.w	r6, r7, sl
   dc508:	f7ff ffb2 	bl	dc470 <__hexdig_fun>
   dc50c:	2800      	cmp	r0, #0
   dc50e:	d062      	beq.n	dc5d6 <__gethex+0x13a>
   dc510:	4633      	mov	r3, r6
   dc512:	7818      	ldrb	r0, [r3, #0]
   dc514:	2830      	cmp	r0, #48	; 0x30
   dc516:	461f      	mov	r7, r3
   dc518:	f103 0301 	add.w	r3, r3, #1
   dc51c:	d0f9      	beq.n	dc512 <__gethex+0x76>
   dc51e:	f7ff ffa7 	bl	dc470 <__hexdig_fun>
   dc522:	2301      	movs	r3, #1
   dc524:	fab0 f480 	clz	r4, r0
   dc528:	0964      	lsrs	r4, r4, #5
   dc52a:	4635      	mov	r5, r6
   dc52c:	9300      	str	r3, [sp, #0]
   dc52e:	463a      	mov	r2, r7
   dc530:	4616      	mov	r6, r2
   dc532:	3201      	adds	r2, #1
   dc534:	7830      	ldrb	r0, [r6, #0]
   dc536:	f7ff ff9b 	bl	dc470 <__hexdig_fun>
   dc53a:	2800      	cmp	r0, #0
   dc53c:	d1f8      	bne.n	dc530 <__gethex+0x94>
   dc53e:	9901      	ldr	r1, [sp, #4]
   dc540:	4652      	mov	r2, sl
   dc542:	4630      	mov	r0, r6
   dc544:	f7ff f867 	bl	db616 <strncmp>
   dc548:	b980      	cbnz	r0, dc56c <__gethex+0xd0>
   dc54a:	b94d      	cbnz	r5, dc560 <__gethex+0xc4>
   dc54c:	eb06 050a 	add.w	r5, r6, sl
   dc550:	462a      	mov	r2, r5
   dc552:	4616      	mov	r6, r2
   dc554:	3201      	adds	r2, #1
   dc556:	7830      	ldrb	r0, [r6, #0]
   dc558:	f7ff ff8a 	bl	dc470 <__hexdig_fun>
   dc55c:	2800      	cmp	r0, #0
   dc55e:	d1f8      	bne.n	dc552 <__gethex+0xb6>
   dc560:	1bad      	subs	r5, r5, r6
   dc562:	00ad      	lsls	r5, r5, #2
   dc564:	e004      	b.n	dc570 <__gethex+0xd4>
   dc566:	2400      	movs	r4, #0
   dc568:	4625      	mov	r5, r4
   dc56a:	e7e0      	b.n	dc52e <__gethex+0x92>
   dc56c:	2d00      	cmp	r5, #0
   dc56e:	d1f7      	bne.n	dc560 <__gethex+0xc4>
   dc570:	7833      	ldrb	r3, [r6, #0]
   dc572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc576:	2b50      	cmp	r3, #80	; 0x50
   dc578:	d13b      	bne.n	dc5f2 <__gethex+0x156>
   dc57a:	7873      	ldrb	r3, [r6, #1]
   dc57c:	2b2b      	cmp	r3, #43	; 0x2b
   dc57e:	d02c      	beq.n	dc5da <__gethex+0x13e>
   dc580:	2b2d      	cmp	r3, #45	; 0x2d
   dc582:	d02e      	beq.n	dc5e2 <__gethex+0x146>
   dc584:	1c71      	adds	r1, r6, #1
   dc586:	f04f 0900 	mov.w	r9, #0
   dc58a:	7808      	ldrb	r0, [r1, #0]
   dc58c:	f7ff ff70 	bl	dc470 <__hexdig_fun>
   dc590:	1e43      	subs	r3, r0, #1
   dc592:	b2db      	uxtb	r3, r3
   dc594:	2b18      	cmp	r3, #24
   dc596:	d82c      	bhi.n	dc5f2 <__gethex+0x156>
   dc598:	f1a0 0210 	sub.w	r2, r0, #16
   dc59c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc5a0:	f7ff ff66 	bl	dc470 <__hexdig_fun>
   dc5a4:	1e43      	subs	r3, r0, #1
   dc5a6:	b2db      	uxtb	r3, r3
   dc5a8:	2b18      	cmp	r3, #24
   dc5aa:	d91d      	bls.n	dc5e8 <__gethex+0x14c>
   dc5ac:	f1b9 0f00 	cmp.w	r9, #0
   dc5b0:	d000      	beq.n	dc5b4 <__gethex+0x118>
   dc5b2:	4252      	negs	r2, r2
   dc5b4:	4415      	add	r5, r2
   dc5b6:	f8cb 1000 	str.w	r1, [fp]
   dc5ba:	b1e4      	cbz	r4, dc5f6 <__gethex+0x15a>
   dc5bc:	9b00      	ldr	r3, [sp, #0]
   dc5be:	2b00      	cmp	r3, #0
   dc5c0:	bf14      	ite	ne
   dc5c2:	2700      	movne	r7, #0
   dc5c4:	2706      	moveq	r7, #6
   dc5c6:	4638      	mov	r0, r7
   dc5c8:	b009      	add	sp, #36	; 0x24
   dc5ca:	ecbd 8b02 	vpop	{d8}
   dc5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5d2:	463e      	mov	r6, r7
   dc5d4:	4625      	mov	r5, r4
   dc5d6:	2401      	movs	r4, #1
   dc5d8:	e7ca      	b.n	dc570 <__gethex+0xd4>
   dc5da:	f04f 0900 	mov.w	r9, #0
   dc5de:	1cb1      	adds	r1, r6, #2
   dc5e0:	e7d3      	b.n	dc58a <__gethex+0xee>
   dc5e2:	f04f 0901 	mov.w	r9, #1
   dc5e6:	e7fa      	b.n	dc5de <__gethex+0x142>
   dc5e8:	230a      	movs	r3, #10
   dc5ea:	fb03 0202 	mla	r2, r3, r2, r0
   dc5ee:	3a10      	subs	r2, #16
   dc5f0:	e7d4      	b.n	dc59c <__gethex+0x100>
   dc5f2:	4631      	mov	r1, r6
   dc5f4:	e7df      	b.n	dc5b6 <__gethex+0x11a>
   dc5f6:	1bf3      	subs	r3, r6, r7
   dc5f8:	3b01      	subs	r3, #1
   dc5fa:	4621      	mov	r1, r4
   dc5fc:	2b07      	cmp	r3, #7
   dc5fe:	dc52      	bgt.n	dc6a6 <__gethex+0x20a>
   dc600:	ee18 0a10 	vmov	r0, s16
   dc604:	f000 fa52 	bl	dcaac <_Balloc>
   dc608:	f04f 0b00 	mov.w	fp, #0
   dc60c:	f100 0914 	add.w	r9, r0, #20
   dc610:	f1ca 0301 	rsb	r3, sl, #1
   dc614:	4604      	mov	r4, r0
   dc616:	f8cd 9008 	str.w	r9, [sp, #8]
   dc61a:	f8cd b000 	str.w	fp, [sp]
   dc61e:	9306      	str	r3, [sp, #24]
   dc620:	42b7      	cmp	r7, r6
   dc622:	d343      	bcc.n	dc6ac <__gethex+0x210>
   dc624:	9802      	ldr	r0, [sp, #8]
   dc626:	9b00      	ldr	r3, [sp, #0]
   dc628:	f840 3b04 	str.w	r3, [r0], #4
   dc62c:	eba0 0009 	sub.w	r0, r0, r9
   dc630:	1080      	asrs	r0, r0, #2
   dc632:	0146      	lsls	r6, r0, #5
   dc634:	6120      	str	r0, [r4, #16]
   dc636:	4618      	mov	r0, r3
   dc638:	f000 faff 	bl	dcc3a <__hi0bits>
   dc63c:	1a30      	subs	r0, r6, r0
   dc63e:	f8d8 6000 	ldr.w	r6, [r8]
   dc642:	42b0      	cmp	r0, r6
   dc644:	dd66      	ble.n	dc714 <__gethex+0x278>
   dc646:	1b87      	subs	r7, r0, r6
   dc648:	4639      	mov	r1, r7
   dc64a:	4620      	mov	r0, r4
   dc64c:	f000 fe4c 	bl	dd2e8 <__any_on>
   dc650:	4682      	mov	sl, r0
   dc652:	b1a8      	cbz	r0, dc680 <__gethex+0x1e4>
   dc654:	1e7b      	subs	r3, r7, #1
   dc656:	1159      	asrs	r1, r3, #5
   dc658:	f003 021f 	and.w	r2, r3, #31
   dc65c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc660:	f04f 0a01 	mov.w	sl, #1
   dc664:	fa0a f202 	lsl.w	r2, sl, r2
   dc668:	420a      	tst	r2, r1
   dc66a:	d009      	beq.n	dc680 <__gethex+0x1e4>
   dc66c:	4553      	cmp	r3, sl
   dc66e:	dd05      	ble.n	dc67c <__gethex+0x1e0>
   dc670:	1eb9      	subs	r1, r7, #2
   dc672:	4620      	mov	r0, r4
   dc674:	f000 fe38 	bl	dd2e8 <__any_on>
   dc678:	2800      	cmp	r0, #0
   dc67a:	d148      	bne.n	dc70e <__gethex+0x272>
   dc67c:	f04f 0a02 	mov.w	sl, #2
   dc680:	4639      	mov	r1, r7
   dc682:	4620      	mov	r0, r4
   dc684:	f7ff fea2 	bl	dc3cc <rshift>
   dc688:	443d      	add	r5, r7
   dc68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc68e:	42ab      	cmp	r3, r5
   dc690:	da4f      	bge.n	dc732 <__gethex+0x296>
   dc692:	ee18 0a10 	vmov	r0, s16
   dc696:	4621      	mov	r1, r4
   dc698:	f000 fa3c 	bl	dcb14 <_Bfree>
   dc69c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc69e:	2300      	movs	r3, #0
   dc6a0:	6013      	str	r3, [r2, #0]
   dc6a2:	27a3      	movs	r7, #163	; 0xa3
   dc6a4:	e78f      	b.n	dc5c6 <__gethex+0x12a>
   dc6a6:	3101      	adds	r1, #1
   dc6a8:	105b      	asrs	r3, r3, #1
   dc6aa:	e7a7      	b.n	dc5fc <__gethex+0x160>
   dc6ac:	1e73      	subs	r3, r6, #1
   dc6ae:	9a05      	ldr	r2, [sp, #20]
   dc6b0:	9303      	str	r3, [sp, #12]
   dc6b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc6b6:	4293      	cmp	r3, r2
   dc6b8:	d019      	beq.n	dc6ee <__gethex+0x252>
   dc6ba:	f1bb 0f20 	cmp.w	fp, #32
   dc6be:	d107      	bne.n	dc6d0 <__gethex+0x234>
   dc6c0:	9b02      	ldr	r3, [sp, #8]
   dc6c2:	9a00      	ldr	r2, [sp, #0]
   dc6c4:	f843 2b04 	str.w	r2, [r3], #4
   dc6c8:	9302      	str	r3, [sp, #8]
   dc6ca:	2300      	movs	r3, #0
   dc6cc:	9300      	str	r3, [sp, #0]
   dc6ce:	469b      	mov	fp, r3
   dc6d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc6d4:	f7ff fecc 	bl	dc470 <__hexdig_fun>
   dc6d8:	9b00      	ldr	r3, [sp, #0]
   dc6da:	f000 000f 	and.w	r0, r0, #15
   dc6de:	fa00 f00b 	lsl.w	r0, r0, fp
   dc6e2:	4303      	orrs	r3, r0
   dc6e4:	9300      	str	r3, [sp, #0]
   dc6e6:	f10b 0b04 	add.w	fp, fp, #4
   dc6ea:	9b03      	ldr	r3, [sp, #12]
   dc6ec:	e00d      	b.n	dc70a <__gethex+0x26e>
   dc6ee:	9b03      	ldr	r3, [sp, #12]
   dc6f0:	9a06      	ldr	r2, [sp, #24]
   dc6f2:	4413      	add	r3, r2
   dc6f4:	42bb      	cmp	r3, r7
   dc6f6:	d3e0      	bcc.n	dc6ba <__gethex+0x21e>
   dc6f8:	4618      	mov	r0, r3
   dc6fa:	9901      	ldr	r1, [sp, #4]
   dc6fc:	9307      	str	r3, [sp, #28]
   dc6fe:	4652      	mov	r2, sl
   dc700:	f7fe ff89 	bl	db616 <strncmp>
   dc704:	9b07      	ldr	r3, [sp, #28]
   dc706:	2800      	cmp	r0, #0
   dc708:	d1d7      	bne.n	dc6ba <__gethex+0x21e>
   dc70a:	461e      	mov	r6, r3
   dc70c:	e788      	b.n	dc620 <__gethex+0x184>
   dc70e:	f04f 0a03 	mov.w	sl, #3
   dc712:	e7b5      	b.n	dc680 <__gethex+0x1e4>
   dc714:	da0a      	bge.n	dc72c <__gethex+0x290>
   dc716:	1a37      	subs	r7, r6, r0
   dc718:	4621      	mov	r1, r4
   dc71a:	ee18 0a10 	vmov	r0, s16
   dc71e:	463a      	mov	r2, r7
   dc720:	f000 fbce 	bl	dcec0 <__lshift>
   dc724:	1bed      	subs	r5, r5, r7
   dc726:	4604      	mov	r4, r0
   dc728:	f100 0914 	add.w	r9, r0, #20
   dc72c:	f04f 0a00 	mov.w	sl, #0
   dc730:	e7ab      	b.n	dc68a <__gethex+0x1ee>
   dc732:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc736:	42a8      	cmp	r0, r5
   dc738:	dd6d      	ble.n	dc816 <__gethex+0x37a>
   dc73a:	1b45      	subs	r5, r0, r5
   dc73c:	42ae      	cmp	r6, r5
   dc73e:	dc31      	bgt.n	dc7a4 <__gethex+0x308>
   dc740:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc744:	2b02      	cmp	r3, #2
   dc746:	d023      	beq.n	dc790 <__gethex+0x2f4>
   dc748:	2b03      	cmp	r3, #3
   dc74a:	d025      	beq.n	dc798 <__gethex+0x2fc>
   dc74c:	2b01      	cmp	r3, #1
   dc74e:	d115      	bne.n	dc77c <__gethex+0x2e0>
   dc750:	42ae      	cmp	r6, r5
   dc752:	d113      	bne.n	dc77c <__gethex+0x2e0>
   dc754:	2e01      	cmp	r6, #1
   dc756:	d10b      	bne.n	dc770 <__gethex+0x2d4>
   dc758:	9a04      	ldr	r2, [sp, #16]
   dc75a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc75e:	6013      	str	r3, [r2, #0]
   dc760:	2301      	movs	r3, #1
   dc762:	6123      	str	r3, [r4, #16]
   dc764:	f8c9 3000 	str.w	r3, [r9]
   dc768:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc76a:	2762      	movs	r7, #98	; 0x62
   dc76c:	601c      	str	r4, [r3, #0]
   dc76e:	e72a      	b.n	dc5c6 <__gethex+0x12a>
   dc770:	1e71      	subs	r1, r6, #1
   dc772:	4620      	mov	r0, r4
   dc774:	f000 fdb8 	bl	dd2e8 <__any_on>
   dc778:	2800      	cmp	r0, #0
   dc77a:	d1ed      	bne.n	dc758 <__gethex+0x2bc>
   dc77c:	ee18 0a10 	vmov	r0, s16
   dc780:	4621      	mov	r1, r4
   dc782:	f000 f9c7 	bl	dcb14 <_Bfree>
   dc786:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc788:	2300      	movs	r3, #0
   dc78a:	6013      	str	r3, [r2, #0]
   dc78c:	2750      	movs	r7, #80	; 0x50
   dc78e:	e71a      	b.n	dc5c6 <__gethex+0x12a>
   dc790:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc792:	2b00      	cmp	r3, #0
   dc794:	d1f2      	bne.n	dc77c <__gethex+0x2e0>
   dc796:	e7df      	b.n	dc758 <__gethex+0x2bc>
   dc798:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc79a:	2b00      	cmp	r3, #0
   dc79c:	d1dc      	bne.n	dc758 <__gethex+0x2bc>
   dc79e:	e7ed      	b.n	dc77c <__gethex+0x2e0>
   dc7a0:	000de3dc 	.word	0x000de3dc
   dc7a4:	1e6f      	subs	r7, r5, #1
   dc7a6:	f1ba 0f00 	cmp.w	sl, #0
   dc7aa:	d131      	bne.n	dc810 <__gethex+0x374>
   dc7ac:	b127      	cbz	r7, dc7b8 <__gethex+0x31c>
   dc7ae:	4639      	mov	r1, r7
   dc7b0:	4620      	mov	r0, r4
   dc7b2:	f000 fd99 	bl	dd2e8 <__any_on>
   dc7b6:	4682      	mov	sl, r0
   dc7b8:	117b      	asrs	r3, r7, #5
   dc7ba:	2101      	movs	r1, #1
   dc7bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc7c0:	f007 071f 	and.w	r7, r7, #31
   dc7c4:	fa01 f707 	lsl.w	r7, r1, r7
   dc7c8:	421f      	tst	r7, r3
   dc7ca:	4629      	mov	r1, r5
   dc7cc:	4620      	mov	r0, r4
   dc7ce:	bf18      	it	ne
   dc7d0:	f04a 0a02 	orrne.w	sl, sl, #2
   dc7d4:	1b76      	subs	r6, r6, r5
   dc7d6:	f7ff fdf9 	bl	dc3cc <rshift>
   dc7da:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc7de:	2702      	movs	r7, #2
   dc7e0:	f1ba 0f00 	cmp.w	sl, #0
   dc7e4:	d048      	beq.n	dc878 <__gethex+0x3dc>
   dc7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc7ea:	2b02      	cmp	r3, #2
   dc7ec:	d015      	beq.n	dc81a <__gethex+0x37e>
   dc7ee:	2b03      	cmp	r3, #3
   dc7f0:	d017      	beq.n	dc822 <__gethex+0x386>
   dc7f2:	2b01      	cmp	r3, #1
   dc7f4:	d109      	bne.n	dc80a <__gethex+0x36e>
   dc7f6:	f01a 0f02 	tst.w	sl, #2
   dc7fa:	d006      	beq.n	dc80a <__gethex+0x36e>
   dc7fc:	f8d9 0000 	ldr.w	r0, [r9]
   dc800:	ea4a 0a00 	orr.w	sl, sl, r0
   dc804:	f01a 0f01 	tst.w	sl, #1
   dc808:	d10e      	bne.n	dc828 <__gethex+0x38c>
   dc80a:	f047 0710 	orr.w	r7, r7, #16
   dc80e:	e033      	b.n	dc878 <__gethex+0x3dc>
   dc810:	f04f 0a01 	mov.w	sl, #1
   dc814:	e7d0      	b.n	dc7b8 <__gethex+0x31c>
   dc816:	2701      	movs	r7, #1
   dc818:	e7e2      	b.n	dc7e0 <__gethex+0x344>
   dc81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc81c:	f1c3 0301 	rsb	r3, r3, #1
   dc820:	9315      	str	r3, [sp, #84]	; 0x54
   dc822:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc824:	2b00      	cmp	r3, #0
   dc826:	d0f0      	beq.n	dc80a <__gethex+0x36e>
   dc828:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc82c:	f104 0314 	add.w	r3, r4, #20
   dc830:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc834:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc838:	f04f 0c00 	mov.w	ip, #0
   dc83c:	4618      	mov	r0, r3
   dc83e:	f853 2b04 	ldr.w	r2, [r3], #4
   dc842:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc846:	d01c      	beq.n	dc882 <__gethex+0x3e6>
   dc848:	3201      	adds	r2, #1
   dc84a:	6002      	str	r2, [r0, #0]
   dc84c:	2f02      	cmp	r7, #2
   dc84e:	f104 0314 	add.w	r3, r4, #20
   dc852:	d13a      	bne.n	dc8ca <__gethex+0x42e>
   dc854:	f8d8 2000 	ldr.w	r2, [r8]
   dc858:	3a01      	subs	r2, #1
   dc85a:	42b2      	cmp	r2, r6
   dc85c:	d10a      	bne.n	dc874 <__gethex+0x3d8>
   dc85e:	1171      	asrs	r1, r6, #5
   dc860:	2201      	movs	r2, #1
   dc862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc866:	f006 061f 	and.w	r6, r6, #31
   dc86a:	fa02 f606 	lsl.w	r6, r2, r6
   dc86e:	421e      	tst	r6, r3
   dc870:	bf18      	it	ne
   dc872:	4617      	movne	r7, r2
   dc874:	f047 0720 	orr.w	r7, r7, #32
   dc878:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc87a:	601c      	str	r4, [r3, #0]
   dc87c:	9b04      	ldr	r3, [sp, #16]
   dc87e:	601d      	str	r5, [r3, #0]
   dc880:	e6a1      	b.n	dc5c6 <__gethex+0x12a>
   dc882:	4299      	cmp	r1, r3
   dc884:	f843 cc04 	str.w	ip, [r3, #-4]
   dc888:	d8d8      	bhi.n	dc83c <__gethex+0x3a0>
   dc88a:	68a3      	ldr	r3, [r4, #8]
   dc88c:	4599      	cmp	r9, r3
   dc88e:	db14      	blt.n	dc8ba <__gethex+0x41e>
   dc890:	6861      	ldr	r1, [r4, #4]
   dc892:	ee18 0a10 	vmov	r0, s16
   dc896:	3101      	adds	r1, #1
   dc898:	f000 f908 	bl	dcaac <_Balloc>
   dc89c:	6922      	ldr	r2, [r4, #16]
   dc89e:	3202      	adds	r2, #2
   dc8a0:	f104 010c 	add.w	r1, r4, #12
   dc8a4:	4682      	mov	sl, r0
   dc8a6:	0092      	lsls	r2, r2, #2
   dc8a8:	300c      	adds	r0, #12
   dc8aa:	f7fe fe29 	bl	db500 <memcpy>
   dc8ae:	4621      	mov	r1, r4
   dc8b0:	ee18 0a10 	vmov	r0, s16
   dc8b4:	f000 f92e 	bl	dcb14 <_Bfree>
   dc8b8:	4654      	mov	r4, sl
   dc8ba:	6923      	ldr	r3, [r4, #16]
   dc8bc:	1c5a      	adds	r2, r3, #1
   dc8be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc8c2:	6122      	str	r2, [r4, #16]
   dc8c4:	2201      	movs	r2, #1
   dc8c6:	615a      	str	r2, [r3, #20]
   dc8c8:	e7c0      	b.n	dc84c <__gethex+0x3b0>
   dc8ca:	6922      	ldr	r2, [r4, #16]
   dc8cc:	454a      	cmp	r2, r9
   dc8ce:	dd0b      	ble.n	dc8e8 <__gethex+0x44c>
   dc8d0:	2101      	movs	r1, #1
   dc8d2:	4620      	mov	r0, r4
   dc8d4:	f7ff fd7a 	bl	dc3cc <rshift>
   dc8d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc8dc:	3501      	adds	r5, #1
   dc8de:	42ab      	cmp	r3, r5
   dc8e0:	f6ff aed7 	blt.w	dc692 <__gethex+0x1f6>
   dc8e4:	2701      	movs	r7, #1
   dc8e6:	e7c5      	b.n	dc874 <__gethex+0x3d8>
   dc8e8:	f016 061f 	ands.w	r6, r6, #31
   dc8ec:	d0fa      	beq.n	dc8e4 <__gethex+0x448>
   dc8ee:	449b      	add	fp, r3
   dc8f0:	f1c6 0620 	rsb	r6, r6, #32
   dc8f4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc8f8:	f000 f99f 	bl	dcc3a <__hi0bits>
   dc8fc:	42b0      	cmp	r0, r6
   dc8fe:	dbe7      	blt.n	dc8d0 <__gethex+0x434>
   dc900:	e7f0      	b.n	dc8e4 <__gethex+0x448>
   dc902:	bf00      	nop

000dc904 <L_shift>:
   dc904:	f1c2 0208 	rsb	r2, r2, #8
   dc908:	0092      	lsls	r2, r2, #2
   dc90a:	b570      	push	{r4, r5, r6, lr}
   dc90c:	f1c2 0620 	rsb	r6, r2, #32
   dc910:	6843      	ldr	r3, [r0, #4]
   dc912:	6804      	ldr	r4, [r0, #0]
   dc914:	fa03 f506 	lsl.w	r5, r3, r6
   dc918:	432c      	orrs	r4, r5
   dc91a:	40d3      	lsrs	r3, r2
   dc91c:	6004      	str	r4, [r0, #0]
   dc91e:	f840 3f04 	str.w	r3, [r0, #4]!
   dc922:	4288      	cmp	r0, r1
   dc924:	d3f4      	bcc.n	dc910 <L_shift+0xc>
   dc926:	bd70      	pop	{r4, r5, r6, pc}

000dc928 <__match>:
   dc928:	b530      	push	{r4, r5, lr}
   dc92a:	6803      	ldr	r3, [r0, #0]
   dc92c:	3301      	adds	r3, #1
   dc92e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc932:	b914      	cbnz	r4, dc93a <__match+0x12>
   dc934:	6003      	str	r3, [r0, #0]
   dc936:	2001      	movs	r0, #1
   dc938:	bd30      	pop	{r4, r5, pc}
   dc93a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc93e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc942:	2d19      	cmp	r5, #25
   dc944:	bf98      	it	ls
   dc946:	3220      	addls	r2, #32
   dc948:	42a2      	cmp	r2, r4
   dc94a:	d0f0      	beq.n	dc92e <__match+0x6>
   dc94c:	2000      	movs	r0, #0
   dc94e:	e7f3      	b.n	dc938 <__match+0x10>

000dc950 <__hexnan>:
   dc950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc954:	680b      	ldr	r3, [r1, #0]
   dc956:	6801      	ldr	r1, [r0, #0]
   dc958:	115e      	asrs	r6, r3, #5
   dc95a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc95e:	f013 031f 	ands.w	r3, r3, #31
   dc962:	b087      	sub	sp, #28
   dc964:	bf18      	it	ne
   dc966:	3604      	addne	r6, #4
   dc968:	2500      	movs	r5, #0
   dc96a:	1f37      	subs	r7, r6, #4
   dc96c:	4682      	mov	sl, r0
   dc96e:	4690      	mov	r8, r2
   dc970:	9301      	str	r3, [sp, #4]
   dc972:	f846 5c04 	str.w	r5, [r6, #-4]
   dc976:	46b9      	mov	r9, r7
   dc978:	463c      	mov	r4, r7
   dc97a:	9502      	str	r5, [sp, #8]
   dc97c:	46ab      	mov	fp, r5
   dc97e:	784a      	ldrb	r2, [r1, #1]
   dc980:	1c4b      	adds	r3, r1, #1
   dc982:	9303      	str	r3, [sp, #12]
   dc984:	b342      	cbz	r2, dc9d8 <__hexnan+0x88>
   dc986:	4610      	mov	r0, r2
   dc988:	9105      	str	r1, [sp, #20]
   dc98a:	9204      	str	r2, [sp, #16]
   dc98c:	f7ff fd70 	bl	dc470 <__hexdig_fun>
   dc990:	2800      	cmp	r0, #0
   dc992:	d14f      	bne.n	dca34 <__hexnan+0xe4>
   dc994:	9a04      	ldr	r2, [sp, #16]
   dc996:	9905      	ldr	r1, [sp, #20]
   dc998:	2a20      	cmp	r2, #32
   dc99a:	d818      	bhi.n	dc9ce <__hexnan+0x7e>
   dc99c:	9b02      	ldr	r3, [sp, #8]
   dc99e:	459b      	cmp	fp, r3
   dc9a0:	dd13      	ble.n	dc9ca <__hexnan+0x7a>
   dc9a2:	454c      	cmp	r4, r9
   dc9a4:	d206      	bcs.n	dc9b4 <__hexnan+0x64>
   dc9a6:	2d07      	cmp	r5, #7
   dc9a8:	dc04      	bgt.n	dc9b4 <__hexnan+0x64>
   dc9aa:	462a      	mov	r2, r5
   dc9ac:	4649      	mov	r1, r9
   dc9ae:	4620      	mov	r0, r4
   dc9b0:	f7ff ffa8 	bl	dc904 <L_shift>
   dc9b4:	4544      	cmp	r4, r8
   dc9b6:	d950      	bls.n	dca5a <__hexnan+0x10a>
   dc9b8:	2300      	movs	r3, #0
   dc9ba:	f1a4 0904 	sub.w	r9, r4, #4
   dc9be:	f844 3c04 	str.w	r3, [r4, #-4]
   dc9c2:	f8cd b008 	str.w	fp, [sp, #8]
   dc9c6:	464c      	mov	r4, r9
   dc9c8:	461d      	mov	r5, r3
   dc9ca:	9903      	ldr	r1, [sp, #12]
   dc9cc:	e7d7      	b.n	dc97e <__hexnan+0x2e>
   dc9ce:	2a29      	cmp	r2, #41	; 0x29
   dc9d0:	d156      	bne.n	dca80 <__hexnan+0x130>
   dc9d2:	3102      	adds	r1, #2
   dc9d4:	f8ca 1000 	str.w	r1, [sl]
   dc9d8:	f1bb 0f00 	cmp.w	fp, #0
   dc9dc:	d050      	beq.n	dca80 <__hexnan+0x130>
   dc9de:	454c      	cmp	r4, r9
   dc9e0:	d206      	bcs.n	dc9f0 <__hexnan+0xa0>
   dc9e2:	2d07      	cmp	r5, #7
   dc9e4:	dc04      	bgt.n	dc9f0 <__hexnan+0xa0>
   dc9e6:	462a      	mov	r2, r5
   dc9e8:	4649      	mov	r1, r9
   dc9ea:	4620      	mov	r0, r4
   dc9ec:	f7ff ff8a 	bl	dc904 <L_shift>
   dc9f0:	4544      	cmp	r4, r8
   dc9f2:	d934      	bls.n	dca5e <__hexnan+0x10e>
   dc9f4:	f1a8 0204 	sub.w	r2, r8, #4
   dc9f8:	4623      	mov	r3, r4
   dc9fa:	f853 1b04 	ldr.w	r1, [r3], #4
   dc9fe:	f842 1f04 	str.w	r1, [r2, #4]!
   dca02:	429f      	cmp	r7, r3
   dca04:	d2f9      	bcs.n	dc9fa <__hexnan+0xaa>
   dca06:	1b3b      	subs	r3, r7, r4
   dca08:	f023 0303 	bic.w	r3, r3, #3
   dca0c:	3304      	adds	r3, #4
   dca0e:	3401      	adds	r4, #1
   dca10:	3e03      	subs	r6, #3
   dca12:	42b4      	cmp	r4, r6
   dca14:	bf88      	it	hi
   dca16:	2304      	movhi	r3, #4
   dca18:	4443      	add	r3, r8
   dca1a:	2200      	movs	r2, #0
   dca1c:	f843 2b04 	str.w	r2, [r3], #4
   dca20:	429f      	cmp	r7, r3
   dca22:	d2fb      	bcs.n	dca1c <__hexnan+0xcc>
   dca24:	683b      	ldr	r3, [r7, #0]
   dca26:	b91b      	cbnz	r3, dca30 <__hexnan+0xe0>
   dca28:	4547      	cmp	r7, r8
   dca2a:	d127      	bne.n	dca7c <__hexnan+0x12c>
   dca2c:	2301      	movs	r3, #1
   dca2e:	603b      	str	r3, [r7, #0]
   dca30:	2005      	movs	r0, #5
   dca32:	e026      	b.n	dca82 <__hexnan+0x132>
   dca34:	3501      	adds	r5, #1
   dca36:	2d08      	cmp	r5, #8
   dca38:	f10b 0b01 	add.w	fp, fp, #1
   dca3c:	dd06      	ble.n	dca4c <__hexnan+0xfc>
   dca3e:	4544      	cmp	r4, r8
   dca40:	d9c3      	bls.n	dc9ca <__hexnan+0x7a>
   dca42:	2300      	movs	r3, #0
   dca44:	f844 3c04 	str.w	r3, [r4, #-4]
   dca48:	2501      	movs	r5, #1
   dca4a:	3c04      	subs	r4, #4
   dca4c:	6822      	ldr	r2, [r4, #0]
   dca4e:	f000 000f 	and.w	r0, r0, #15
   dca52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dca56:	6022      	str	r2, [r4, #0]
   dca58:	e7b7      	b.n	dc9ca <__hexnan+0x7a>
   dca5a:	2508      	movs	r5, #8
   dca5c:	e7b5      	b.n	dc9ca <__hexnan+0x7a>
   dca5e:	9b01      	ldr	r3, [sp, #4]
   dca60:	2b00      	cmp	r3, #0
   dca62:	d0df      	beq.n	dca24 <__hexnan+0xd4>
   dca64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dca68:	f1c3 0320 	rsb	r3, r3, #32
   dca6c:	fa22 f303 	lsr.w	r3, r2, r3
   dca70:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dca74:	401a      	ands	r2, r3
   dca76:	f846 2c04 	str.w	r2, [r6, #-4]
   dca7a:	e7d3      	b.n	dca24 <__hexnan+0xd4>
   dca7c:	3f04      	subs	r7, #4
   dca7e:	e7d1      	b.n	dca24 <__hexnan+0xd4>
   dca80:	2004      	movs	r0, #4
   dca82:	b007      	add	sp, #28
   dca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dca88 <__ascii_mbtowc>:
   dca88:	b082      	sub	sp, #8
   dca8a:	b901      	cbnz	r1, dca8e <__ascii_mbtowc+0x6>
   dca8c:	a901      	add	r1, sp, #4
   dca8e:	b142      	cbz	r2, dcaa2 <__ascii_mbtowc+0x1a>
   dca90:	b14b      	cbz	r3, dcaa6 <__ascii_mbtowc+0x1e>
   dca92:	7813      	ldrb	r3, [r2, #0]
   dca94:	600b      	str	r3, [r1, #0]
   dca96:	7812      	ldrb	r2, [r2, #0]
   dca98:	1e10      	subs	r0, r2, #0
   dca9a:	bf18      	it	ne
   dca9c:	2001      	movne	r0, #1
   dca9e:	b002      	add	sp, #8
   dcaa0:	4770      	bx	lr
   dcaa2:	4610      	mov	r0, r2
   dcaa4:	e7fb      	b.n	dca9e <__ascii_mbtowc+0x16>
   dcaa6:	f06f 0001 	mvn.w	r0, #1
   dcaaa:	e7f8      	b.n	dca9e <__ascii_mbtowc+0x16>

000dcaac <_Balloc>:
   dcaac:	b570      	push	{r4, r5, r6, lr}
   dcaae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dcab0:	4604      	mov	r4, r0
   dcab2:	460d      	mov	r5, r1
   dcab4:	b93e      	cbnz	r6, dcac6 <_Balloc+0x1a>
   dcab6:	2010      	movs	r0, #16
   dcab8:	f7fb ff9c 	bl	d89f4 <malloc>
   dcabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dcac0:	6260      	str	r0, [r4, #36]	; 0x24
   dcac2:	6006      	str	r6, [r0, #0]
   dcac4:	60c6      	str	r6, [r0, #12]
   dcac6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dcac8:	68f3      	ldr	r3, [r6, #12]
   dcaca:	b183      	cbz	r3, dcaee <_Balloc+0x42>
   dcacc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcace:	68db      	ldr	r3, [r3, #12]
   dcad0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dcad4:	b9b8      	cbnz	r0, dcb06 <_Balloc+0x5a>
   dcad6:	2101      	movs	r1, #1
   dcad8:	fa01 f605 	lsl.w	r6, r1, r5
   dcadc:	1d72      	adds	r2, r6, #5
   dcade:	0092      	lsls	r2, r2, #2
   dcae0:	4620      	mov	r0, r4
   dcae2:	f000 fc22 	bl	dd32a <_calloc_r>
   dcae6:	b160      	cbz	r0, dcb02 <_Balloc+0x56>
   dcae8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dcaec:	e00e      	b.n	dcb0c <_Balloc+0x60>
   dcaee:	2221      	movs	r2, #33	; 0x21
   dcaf0:	2104      	movs	r1, #4
   dcaf2:	4620      	mov	r0, r4
   dcaf4:	f000 fc19 	bl	dd32a <_calloc_r>
   dcaf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcafa:	60f0      	str	r0, [r6, #12]
   dcafc:	68db      	ldr	r3, [r3, #12]
   dcafe:	2b00      	cmp	r3, #0
   dcb00:	d1e4      	bne.n	dcacc <_Balloc+0x20>
   dcb02:	2000      	movs	r0, #0
   dcb04:	bd70      	pop	{r4, r5, r6, pc}
   dcb06:	6802      	ldr	r2, [r0, #0]
   dcb08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dcb0c:	2300      	movs	r3, #0
   dcb0e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dcb12:	e7f7      	b.n	dcb04 <_Balloc+0x58>

000dcb14 <_Bfree>:
   dcb14:	b570      	push	{r4, r5, r6, lr}
   dcb16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dcb18:	4605      	mov	r5, r0
   dcb1a:	460c      	mov	r4, r1
   dcb1c:	b93e      	cbnz	r6, dcb2e <_Bfree+0x1a>
   dcb1e:	2010      	movs	r0, #16
   dcb20:	f7fb ff68 	bl	d89f4 <malloc>
   dcb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dcb28:	6268      	str	r0, [r5, #36]	; 0x24
   dcb2a:	6006      	str	r6, [r0, #0]
   dcb2c:	60c6      	str	r6, [r0, #12]
   dcb2e:	b13c      	cbz	r4, dcb40 <_Bfree+0x2c>
   dcb30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dcb32:	6862      	ldr	r2, [r4, #4]
   dcb34:	68db      	ldr	r3, [r3, #12]
   dcb36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dcb3a:	6021      	str	r1, [r4, #0]
   dcb3c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dcb40:	bd70      	pop	{r4, r5, r6, pc}

000dcb42 <__multadd>:
   dcb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcb46:	690e      	ldr	r6, [r1, #16]
   dcb48:	4607      	mov	r7, r0
   dcb4a:	4698      	mov	r8, r3
   dcb4c:	460c      	mov	r4, r1
   dcb4e:	f101 0014 	add.w	r0, r1, #20
   dcb52:	2300      	movs	r3, #0
   dcb54:	6805      	ldr	r5, [r0, #0]
   dcb56:	b2a9      	uxth	r1, r5
   dcb58:	fb02 8101 	mla	r1, r2, r1, r8
   dcb5c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dcb60:	0c2d      	lsrs	r5, r5, #16
   dcb62:	fb02 c505 	mla	r5, r2, r5, ip
   dcb66:	b289      	uxth	r1, r1
   dcb68:	3301      	adds	r3, #1
   dcb6a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dcb6e:	429e      	cmp	r6, r3
   dcb70:	f840 1b04 	str.w	r1, [r0], #4
   dcb74:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dcb78:	dcec      	bgt.n	dcb54 <__multadd+0x12>
   dcb7a:	f1b8 0f00 	cmp.w	r8, #0
   dcb7e:	d01b      	beq.n	dcbb8 <__multadd+0x76>
   dcb80:	68a3      	ldr	r3, [r4, #8]
   dcb82:	42b3      	cmp	r3, r6
   dcb84:	dc12      	bgt.n	dcbac <__multadd+0x6a>
   dcb86:	6861      	ldr	r1, [r4, #4]
   dcb88:	4638      	mov	r0, r7
   dcb8a:	3101      	adds	r1, #1
   dcb8c:	f7ff ff8e 	bl	dcaac <_Balloc>
   dcb90:	6922      	ldr	r2, [r4, #16]
   dcb92:	3202      	adds	r2, #2
   dcb94:	f104 010c 	add.w	r1, r4, #12
   dcb98:	4605      	mov	r5, r0
   dcb9a:	0092      	lsls	r2, r2, #2
   dcb9c:	300c      	adds	r0, #12
   dcb9e:	f7fe fcaf 	bl	db500 <memcpy>
   dcba2:	4621      	mov	r1, r4
   dcba4:	4638      	mov	r0, r7
   dcba6:	f7ff ffb5 	bl	dcb14 <_Bfree>
   dcbaa:	462c      	mov	r4, r5
   dcbac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dcbb0:	3601      	adds	r6, #1
   dcbb2:	f8c3 8014 	str.w	r8, [r3, #20]
   dcbb6:	6126      	str	r6, [r4, #16]
   dcbb8:	4620      	mov	r0, r4
   dcbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcbbe <__s2b>:
   dcbbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcbc2:	460c      	mov	r4, r1
   dcbc4:	4615      	mov	r5, r2
   dcbc6:	461f      	mov	r7, r3
   dcbc8:	2209      	movs	r2, #9
   dcbca:	3308      	adds	r3, #8
   dcbcc:	4606      	mov	r6, r0
   dcbce:	fb93 f3f2 	sdiv	r3, r3, r2
   dcbd2:	2100      	movs	r1, #0
   dcbd4:	2201      	movs	r2, #1
   dcbd6:	429a      	cmp	r2, r3
   dcbd8:	db20      	blt.n	dcc1c <__s2b+0x5e>
   dcbda:	4630      	mov	r0, r6
   dcbdc:	f7ff ff66 	bl	dcaac <_Balloc>
   dcbe0:	9b08      	ldr	r3, [sp, #32]
   dcbe2:	6143      	str	r3, [r0, #20]
   dcbe4:	2d09      	cmp	r5, #9
   dcbe6:	f04f 0301 	mov.w	r3, #1
   dcbea:	6103      	str	r3, [r0, #16]
   dcbec:	dd19      	ble.n	dcc22 <__s2b+0x64>
   dcbee:	f104 0909 	add.w	r9, r4, #9
   dcbf2:	46c8      	mov	r8, r9
   dcbf4:	442c      	add	r4, r5
   dcbf6:	f818 3b01 	ldrb.w	r3, [r8], #1
   dcbfa:	4601      	mov	r1, r0
   dcbfc:	3b30      	subs	r3, #48	; 0x30
   dcbfe:	220a      	movs	r2, #10
   dcc00:	4630      	mov	r0, r6
   dcc02:	f7ff ff9e 	bl	dcb42 <__multadd>
   dcc06:	45a0      	cmp	r8, r4
   dcc08:	d1f5      	bne.n	dcbf6 <__s2b+0x38>
   dcc0a:	f1a5 0408 	sub.w	r4, r5, #8
   dcc0e:	444c      	add	r4, r9
   dcc10:	1b2d      	subs	r5, r5, r4
   dcc12:	1963      	adds	r3, r4, r5
   dcc14:	42bb      	cmp	r3, r7
   dcc16:	db07      	blt.n	dcc28 <__s2b+0x6a>
   dcc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcc1c:	0052      	lsls	r2, r2, #1
   dcc1e:	3101      	adds	r1, #1
   dcc20:	e7d9      	b.n	dcbd6 <__s2b+0x18>
   dcc22:	340a      	adds	r4, #10
   dcc24:	2509      	movs	r5, #9
   dcc26:	e7f3      	b.n	dcc10 <__s2b+0x52>
   dcc28:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcc2c:	4601      	mov	r1, r0
   dcc2e:	3b30      	subs	r3, #48	; 0x30
   dcc30:	220a      	movs	r2, #10
   dcc32:	4630      	mov	r0, r6
   dcc34:	f7ff ff85 	bl	dcb42 <__multadd>
   dcc38:	e7eb      	b.n	dcc12 <__s2b+0x54>

000dcc3a <__hi0bits>:
   dcc3a:	0c03      	lsrs	r3, r0, #16
   dcc3c:	041b      	lsls	r3, r3, #16
   dcc3e:	b9d3      	cbnz	r3, dcc76 <__hi0bits+0x3c>
   dcc40:	0400      	lsls	r0, r0, #16
   dcc42:	2310      	movs	r3, #16
   dcc44:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcc48:	bf04      	itt	eq
   dcc4a:	0200      	lsleq	r0, r0, #8
   dcc4c:	3308      	addeq	r3, #8
   dcc4e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcc52:	bf04      	itt	eq
   dcc54:	0100      	lsleq	r0, r0, #4
   dcc56:	3304      	addeq	r3, #4
   dcc58:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcc5c:	bf04      	itt	eq
   dcc5e:	0080      	lsleq	r0, r0, #2
   dcc60:	3302      	addeq	r3, #2
   dcc62:	2800      	cmp	r0, #0
   dcc64:	db05      	blt.n	dcc72 <__hi0bits+0x38>
   dcc66:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dcc6a:	f103 0301 	add.w	r3, r3, #1
   dcc6e:	bf08      	it	eq
   dcc70:	2320      	moveq	r3, #32
   dcc72:	4618      	mov	r0, r3
   dcc74:	4770      	bx	lr
   dcc76:	2300      	movs	r3, #0
   dcc78:	e7e4      	b.n	dcc44 <__hi0bits+0xa>

000dcc7a <__lo0bits>:
   dcc7a:	6803      	ldr	r3, [r0, #0]
   dcc7c:	f013 0207 	ands.w	r2, r3, #7
   dcc80:	4601      	mov	r1, r0
   dcc82:	d00b      	beq.n	dcc9c <__lo0bits+0x22>
   dcc84:	07da      	lsls	r2, r3, #31
   dcc86:	d424      	bmi.n	dccd2 <__lo0bits+0x58>
   dcc88:	0798      	lsls	r0, r3, #30
   dcc8a:	bf49      	itett	mi
   dcc8c:	085b      	lsrmi	r3, r3, #1
   dcc8e:	089b      	lsrpl	r3, r3, #2
   dcc90:	2001      	movmi	r0, #1
   dcc92:	600b      	strmi	r3, [r1, #0]
   dcc94:	bf5c      	itt	pl
   dcc96:	600b      	strpl	r3, [r1, #0]
   dcc98:	2002      	movpl	r0, #2
   dcc9a:	4770      	bx	lr
   dcc9c:	b298      	uxth	r0, r3
   dcc9e:	b9b0      	cbnz	r0, dccce <__lo0bits+0x54>
   dcca0:	0c1b      	lsrs	r3, r3, #16
   dcca2:	2010      	movs	r0, #16
   dcca4:	f013 0fff 	tst.w	r3, #255	; 0xff
   dcca8:	bf04      	itt	eq
   dccaa:	0a1b      	lsreq	r3, r3, #8
   dccac:	3008      	addeq	r0, #8
   dccae:	071a      	lsls	r2, r3, #28
   dccb0:	bf04      	itt	eq
   dccb2:	091b      	lsreq	r3, r3, #4
   dccb4:	3004      	addeq	r0, #4
   dccb6:	079a      	lsls	r2, r3, #30
   dccb8:	bf04      	itt	eq
   dccba:	089b      	lsreq	r3, r3, #2
   dccbc:	3002      	addeq	r0, #2
   dccbe:	07da      	lsls	r2, r3, #31
   dccc0:	d403      	bmi.n	dccca <__lo0bits+0x50>
   dccc2:	085b      	lsrs	r3, r3, #1
   dccc4:	f100 0001 	add.w	r0, r0, #1
   dccc8:	d005      	beq.n	dccd6 <__lo0bits+0x5c>
   dccca:	600b      	str	r3, [r1, #0]
   dcccc:	4770      	bx	lr
   dccce:	4610      	mov	r0, r2
   dccd0:	e7e8      	b.n	dcca4 <__lo0bits+0x2a>
   dccd2:	2000      	movs	r0, #0
   dccd4:	4770      	bx	lr
   dccd6:	2020      	movs	r0, #32
   dccd8:	4770      	bx	lr

000dccda <__i2b>:
   dccda:	b510      	push	{r4, lr}
   dccdc:	460c      	mov	r4, r1
   dccde:	2101      	movs	r1, #1
   dcce0:	f7ff fee4 	bl	dcaac <_Balloc>
   dcce4:	2201      	movs	r2, #1
   dcce6:	6144      	str	r4, [r0, #20]
   dcce8:	6102      	str	r2, [r0, #16]
   dccea:	bd10      	pop	{r4, pc}

000dccec <__multiply>:
   dccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dccf0:	4615      	mov	r5, r2
   dccf2:	690a      	ldr	r2, [r1, #16]
   dccf4:	692b      	ldr	r3, [r5, #16]
   dccf6:	429a      	cmp	r2, r3
   dccf8:	bfb8      	it	lt
   dccfa:	460b      	movlt	r3, r1
   dccfc:	460c      	mov	r4, r1
   dccfe:	bfbc      	itt	lt
   dcd00:	462c      	movlt	r4, r5
   dcd02:	461d      	movlt	r5, r3
   dcd04:	6927      	ldr	r7, [r4, #16]
   dcd06:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dcd0a:	68a3      	ldr	r3, [r4, #8]
   dcd0c:	6861      	ldr	r1, [r4, #4]
   dcd0e:	eb07 0609 	add.w	r6, r7, r9
   dcd12:	42b3      	cmp	r3, r6
   dcd14:	bfb8      	it	lt
   dcd16:	3101      	addlt	r1, #1
   dcd18:	b085      	sub	sp, #20
   dcd1a:	f7ff fec7 	bl	dcaac <_Balloc>
   dcd1e:	f100 0114 	add.w	r1, r0, #20
   dcd22:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dcd26:	460b      	mov	r3, r1
   dcd28:	2200      	movs	r2, #0
   dcd2a:	4543      	cmp	r3, r8
   dcd2c:	d31d      	bcc.n	dcd6a <__multiply+0x7e>
   dcd2e:	f104 0314 	add.w	r3, r4, #20
   dcd32:	f105 0214 	add.w	r2, r5, #20
   dcd36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dcd3a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dcd3e:	9302      	str	r3, [sp, #8]
   dcd40:	1b3b      	subs	r3, r7, r4
   dcd42:	3b15      	subs	r3, #21
   dcd44:	f023 0303 	bic.w	r3, r3, #3
   dcd48:	3304      	adds	r3, #4
   dcd4a:	f104 0515 	add.w	r5, r4, #21
   dcd4e:	42af      	cmp	r7, r5
   dcd50:	bf38      	it	cc
   dcd52:	2304      	movcc	r3, #4
   dcd54:	9301      	str	r3, [sp, #4]
   dcd56:	9b02      	ldr	r3, [sp, #8]
   dcd58:	9203      	str	r2, [sp, #12]
   dcd5a:	4293      	cmp	r3, r2
   dcd5c:	d808      	bhi.n	dcd70 <__multiply+0x84>
   dcd5e:	2e00      	cmp	r6, #0
   dcd60:	dc5a      	bgt.n	dce18 <__multiply+0x12c>
   dcd62:	6106      	str	r6, [r0, #16]
   dcd64:	b005      	add	sp, #20
   dcd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcd6a:	f843 2b04 	str.w	r2, [r3], #4
   dcd6e:	e7dc      	b.n	dcd2a <__multiply+0x3e>
   dcd70:	f8b2 a000 	ldrh.w	sl, [r2]
   dcd74:	f1ba 0f00 	cmp.w	sl, #0
   dcd78:	d024      	beq.n	dcdc4 <__multiply+0xd8>
   dcd7a:	f104 0e14 	add.w	lr, r4, #20
   dcd7e:	4689      	mov	r9, r1
   dcd80:	f04f 0c00 	mov.w	ip, #0
   dcd84:	f85e 5b04 	ldr.w	r5, [lr], #4
   dcd88:	f8d9 b000 	ldr.w	fp, [r9]
   dcd8c:	b2ab      	uxth	r3, r5
   dcd8e:	fa1f fb8b 	uxth.w	fp, fp
   dcd92:	fb0a b303 	mla	r3, sl, r3, fp
   dcd96:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dcd9a:	f8d9 5000 	ldr.w	r5, [r9]
   dcd9e:	4463      	add	r3, ip
   dcda0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dcda4:	fb0a c50b 	mla	r5, sl, fp, ip
   dcda8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dcdac:	b29b      	uxth	r3, r3
   dcdae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dcdb2:	4577      	cmp	r7, lr
   dcdb4:	f849 3b04 	str.w	r3, [r9], #4
   dcdb8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dcdbc:	d8e2      	bhi.n	dcd84 <__multiply+0x98>
   dcdbe:	9b01      	ldr	r3, [sp, #4]
   dcdc0:	f841 c003 	str.w	ip, [r1, r3]
   dcdc4:	9b03      	ldr	r3, [sp, #12]
   dcdc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dcdca:	3204      	adds	r2, #4
   dcdcc:	f1b9 0f00 	cmp.w	r9, #0
   dcdd0:	d020      	beq.n	dce14 <__multiply+0x128>
   dcdd2:	680b      	ldr	r3, [r1, #0]
   dcdd4:	f104 0c14 	add.w	ip, r4, #20
   dcdd8:	468e      	mov	lr, r1
   dcdda:	f04f 0a00 	mov.w	sl, #0
   dcdde:	f8bc 5000 	ldrh.w	r5, [ip]
   dcde2:	f8be b002 	ldrh.w	fp, [lr, #2]
   dcde6:	fb09 b505 	mla	r5, r9, r5, fp
   dcdea:	44aa      	add	sl, r5
   dcdec:	b29b      	uxth	r3, r3
   dcdee:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dcdf2:	f84e 3b04 	str.w	r3, [lr], #4
   dcdf6:	f85c 3b04 	ldr.w	r3, [ip], #4
   dcdfa:	f8be 5000 	ldrh.w	r5, [lr]
   dcdfe:	0c1b      	lsrs	r3, r3, #16
   dce00:	fb09 5303 	mla	r3, r9, r3, r5
   dce04:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dce08:	4567      	cmp	r7, ip
   dce0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dce0e:	d8e6      	bhi.n	dcdde <__multiply+0xf2>
   dce10:	9d01      	ldr	r5, [sp, #4]
   dce12:	514b      	str	r3, [r1, r5]
   dce14:	3104      	adds	r1, #4
   dce16:	e79e      	b.n	dcd56 <__multiply+0x6a>
   dce18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dce1c:	2b00      	cmp	r3, #0
   dce1e:	d1a0      	bne.n	dcd62 <__multiply+0x76>
   dce20:	3e01      	subs	r6, #1
   dce22:	e79c      	b.n	dcd5e <__multiply+0x72>

000dce24 <__pow5mult>:
   dce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dce28:	4615      	mov	r5, r2
   dce2a:	f012 0203 	ands.w	r2, r2, #3
   dce2e:	4606      	mov	r6, r0
   dce30:	460f      	mov	r7, r1
   dce32:	d007      	beq.n	dce44 <__pow5mult+0x20>
   dce34:	4c21      	ldr	r4, [pc, #132]	; (dcebc <__pow5mult+0x98>)
   dce36:	3a01      	subs	r2, #1
   dce38:	2300      	movs	r3, #0
   dce3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dce3e:	f7ff fe80 	bl	dcb42 <__multadd>
   dce42:	4607      	mov	r7, r0
   dce44:	10ad      	asrs	r5, r5, #2
   dce46:	d035      	beq.n	dceb4 <__pow5mult+0x90>
   dce48:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dce4a:	b93c      	cbnz	r4, dce5c <__pow5mult+0x38>
   dce4c:	2010      	movs	r0, #16
   dce4e:	f7fb fdd1 	bl	d89f4 <malloc>
   dce52:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dce56:	6270      	str	r0, [r6, #36]	; 0x24
   dce58:	6004      	str	r4, [r0, #0]
   dce5a:	60c4      	str	r4, [r0, #12]
   dce5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dce60:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dce64:	b94c      	cbnz	r4, dce7a <__pow5mult+0x56>
   dce66:	f240 2171 	movw	r1, #625	; 0x271
   dce6a:	4630      	mov	r0, r6
   dce6c:	f7ff ff35 	bl	dccda <__i2b>
   dce70:	2300      	movs	r3, #0
   dce72:	f8c8 0008 	str.w	r0, [r8, #8]
   dce76:	4604      	mov	r4, r0
   dce78:	6003      	str	r3, [r0, #0]
   dce7a:	f04f 0900 	mov.w	r9, #0
   dce7e:	07eb      	lsls	r3, r5, #31
   dce80:	d50a      	bpl.n	dce98 <__pow5mult+0x74>
   dce82:	4639      	mov	r1, r7
   dce84:	4622      	mov	r2, r4
   dce86:	4630      	mov	r0, r6
   dce88:	f7ff ff30 	bl	dccec <__multiply>
   dce8c:	4639      	mov	r1, r7
   dce8e:	4680      	mov	r8, r0
   dce90:	4630      	mov	r0, r6
   dce92:	f7ff fe3f 	bl	dcb14 <_Bfree>
   dce96:	4647      	mov	r7, r8
   dce98:	106d      	asrs	r5, r5, #1
   dce9a:	d00b      	beq.n	dceb4 <__pow5mult+0x90>
   dce9c:	6820      	ldr	r0, [r4, #0]
   dce9e:	b938      	cbnz	r0, dceb0 <__pow5mult+0x8c>
   dcea0:	4622      	mov	r2, r4
   dcea2:	4621      	mov	r1, r4
   dcea4:	4630      	mov	r0, r6
   dcea6:	f7ff ff21 	bl	dccec <__multiply>
   dceaa:	6020      	str	r0, [r4, #0]
   dceac:	f8c0 9000 	str.w	r9, [r0]
   dceb0:	4604      	mov	r4, r0
   dceb2:	e7e4      	b.n	dce7e <__pow5mult+0x5a>
   dceb4:	4638      	mov	r0, r7
   dceb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dceba:	bf00      	nop
   dcebc:	000de4e0 	.word	0x000de4e0

000dcec0 <__lshift>:
   dcec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcec4:	460c      	mov	r4, r1
   dcec6:	6849      	ldr	r1, [r1, #4]
   dcec8:	6923      	ldr	r3, [r4, #16]
   dceca:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dcece:	68a3      	ldr	r3, [r4, #8]
   dced0:	4607      	mov	r7, r0
   dced2:	4691      	mov	r9, r2
   dced4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dced8:	f108 0601 	add.w	r6, r8, #1
   dcedc:	42b3      	cmp	r3, r6
   dcede:	db3f      	blt.n	dcf60 <__lshift+0xa0>
   dcee0:	4638      	mov	r0, r7
   dcee2:	f7ff fde3 	bl	dcaac <_Balloc>
   dcee6:	2300      	movs	r3, #0
   dcee8:	4605      	mov	r5, r0
   dceea:	f100 0114 	add.w	r1, r0, #20
   dceee:	f100 0210 	add.w	r2, r0, #16
   dcef2:	4618      	mov	r0, r3
   dcef4:	4553      	cmp	r3, sl
   dcef6:	db36      	blt.n	dcf66 <__lshift+0xa6>
   dcef8:	6920      	ldr	r0, [r4, #16]
   dcefa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dcefe:	f104 0314 	add.w	r3, r4, #20
   dcf02:	f019 091f 	ands.w	r9, r9, #31
   dcf06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dcf0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dcf0e:	d02e      	beq.n	dcf6e <__lshift+0xae>
   dcf10:	f1c9 0e20 	rsb	lr, r9, #32
   dcf14:	468a      	mov	sl, r1
   dcf16:	2200      	movs	r2, #0
   dcf18:	6818      	ldr	r0, [r3, #0]
   dcf1a:	fa00 f009 	lsl.w	r0, r0, r9
   dcf1e:	4302      	orrs	r2, r0
   dcf20:	f84a 2b04 	str.w	r2, [sl], #4
   dcf24:	f853 2b04 	ldr.w	r2, [r3], #4
   dcf28:	459c      	cmp	ip, r3
   dcf2a:	fa22 f20e 	lsr.w	r2, r2, lr
   dcf2e:	d8f3      	bhi.n	dcf18 <__lshift+0x58>
   dcf30:	ebac 0304 	sub.w	r3, ip, r4
   dcf34:	3b15      	subs	r3, #21
   dcf36:	f023 0303 	bic.w	r3, r3, #3
   dcf3a:	3304      	adds	r3, #4
   dcf3c:	f104 0015 	add.w	r0, r4, #21
   dcf40:	4560      	cmp	r0, ip
   dcf42:	bf88      	it	hi
   dcf44:	2304      	movhi	r3, #4
   dcf46:	50ca      	str	r2, [r1, r3]
   dcf48:	b10a      	cbz	r2, dcf4e <__lshift+0x8e>
   dcf4a:	f108 0602 	add.w	r6, r8, #2
   dcf4e:	3e01      	subs	r6, #1
   dcf50:	4638      	mov	r0, r7
   dcf52:	612e      	str	r6, [r5, #16]
   dcf54:	4621      	mov	r1, r4
   dcf56:	f7ff fddd 	bl	dcb14 <_Bfree>
   dcf5a:	4628      	mov	r0, r5
   dcf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcf60:	3101      	adds	r1, #1
   dcf62:	005b      	lsls	r3, r3, #1
   dcf64:	e7ba      	b.n	dcedc <__lshift+0x1c>
   dcf66:	f842 0f04 	str.w	r0, [r2, #4]!
   dcf6a:	3301      	adds	r3, #1
   dcf6c:	e7c2      	b.n	dcef4 <__lshift+0x34>
   dcf6e:	3904      	subs	r1, #4
   dcf70:	f853 2b04 	ldr.w	r2, [r3], #4
   dcf74:	f841 2f04 	str.w	r2, [r1, #4]!
   dcf78:	459c      	cmp	ip, r3
   dcf7a:	d8f9      	bhi.n	dcf70 <__lshift+0xb0>
   dcf7c:	e7e7      	b.n	dcf4e <__lshift+0x8e>

000dcf7e <__mcmp>:
   dcf7e:	b530      	push	{r4, r5, lr}
   dcf80:	6902      	ldr	r2, [r0, #16]
   dcf82:	690c      	ldr	r4, [r1, #16]
   dcf84:	1b12      	subs	r2, r2, r4
   dcf86:	d10e      	bne.n	dcfa6 <__mcmp+0x28>
   dcf88:	f100 0314 	add.w	r3, r0, #20
   dcf8c:	3114      	adds	r1, #20
   dcf8e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dcf92:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dcf96:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dcf9a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dcf9e:	42a5      	cmp	r5, r4
   dcfa0:	d003      	beq.n	dcfaa <__mcmp+0x2c>
   dcfa2:	d305      	bcc.n	dcfb0 <__mcmp+0x32>
   dcfa4:	2201      	movs	r2, #1
   dcfa6:	4610      	mov	r0, r2
   dcfa8:	bd30      	pop	{r4, r5, pc}
   dcfaa:	4283      	cmp	r3, r0
   dcfac:	d3f3      	bcc.n	dcf96 <__mcmp+0x18>
   dcfae:	e7fa      	b.n	dcfa6 <__mcmp+0x28>
   dcfb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcfb4:	e7f7      	b.n	dcfa6 <__mcmp+0x28>

000dcfb6 <__mdiff>:
   dcfb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcfba:	460c      	mov	r4, r1
   dcfbc:	4606      	mov	r6, r0
   dcfbe:	4611      	mov	r1, r2
   dcfc0:	4620      	mov	r0, r4
   dcfc2:	4617      	mov	r7, r2
   dcfc4:	f7ff ffdb 	bl	dcf7e <__mcmp>
   dcfc8:	1e05      	subs	r5, r0, #0
   dcfca:	d108      	bne.n	dcfde <__mdiff+0x28>
   dcfcc:	4629      	mov	r1, r5
   dcfce:	4630      	mov	r0, r6
   dcfd0:	f7ff fd6c 	bl	dcaac <_Balloc>
   dcfd4:	2301      	movs	r3, #1
   dcfd6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dcfda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcfde:	bfa4      	itt	ge
   dcfe0:	463b      	movge	r3, r7
   dcfe2:	4627      	movge	r7, r4
   dcfe4:	4630      	mov	r0, r6
   dcfe6:	6879      	ldr	r1, [r7, #4]
   dcfe8:	bfa6      	itte	ge
   dcfea:	461c      	movge	r4, r3
   dcfec:	2500      	movge	r5, #0
   dcfee:	2501      	movlt	r5, #1
   dcff0:	f7ff fd5c 	bl	dcaac <_Balloc>
   dcff4:	693e      	ldr	r6, [r7, #16]
   dcff6:	60c5      	str	r5, [r0, #12]
   dcff8:	6925      	ldr	r5, [r4, #16]
   dcffa:	f107 0114 	add.w	r1, r7, #20
   dcffe:	f104 0914 	add.w	r9, r4, #20
   dd002:	f100 0e14 	add.w	lr, r0, #20
   dd006:	f107 0210 	add.w	r2, r7, #16
   dd00a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd00e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd012:	46f2      	mov	sl, lr
   dd014:	2700      	movs	r7, #0
   dd016:	f859 3b04 	ldr.w	r3, [r9], #4
   dd01a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd01e:	fa1f f883 	uxth.w	r8, r3
   dd022:	fa17 f78b 	uxtah	r7, r7, fp
   dd026:	0c1b      	lsrs	r3, r3, #16
   dd028:	eba7 0808 	sub.w	r8, r7, r8
   dd02c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd030:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd034:	fa1f f888 	uxth.w	r8, r8
   dd038:	141f      	asrs	r7, r3, #16
   dd03a:	454d      	cmp	r5, r9
   dd03c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd040:	f84a 3b04 	str.w	r3, [sl], #4
   dd044:	d8e7      	bhi.n	dd016 <__mdiff+0x60>
   dd046:	1b2b      	subs	r3, r5, r4
   dd048:	3b15      	subs	r3, #21
   dd04a:	f023 0303 	bic.w	r3, r3, #3
   dd04e:	3304      	adds	r3, #4
   dd050:	3415      	adds	r4, #21
   dd052:	42a5      	cmp	r5, r4
   dd054:	bf38      	it	cc
   dd056:	2304      	movcc	r3, #4
   dd058:	4419      	add	r1, r3
   dd05a:	4473      	add	r3, lr
   dd05c:	469e      	mov	lr, r3
   dd05e:	460d      	mov	r5, r1
   dd060:	4565      	cmp	r5, ip
   dd062:	d30e      	bcc.n	dd082 <__mdiff+0xcc>
   dd064:	f10c 0203 	add.w	r2, ip, #3
   dd068:	1a52      	subs	r2, r2, r1
   dd06a:	f022 0203 	bic.w	r2, r2, #3
   dd06e:	3903      	subs	r1, #3
   dd070:	458c      	cmp	ip, r1
   dd072:	bf38      	it	cc
   dd074:	2200      	movcc	r2, #0
   dd076:	441a      	add	r2, r3
   dd078:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd07c:	b17b      	cbz	r3, dd09e <__mdiff+0xe8>
   dd07e:	6106      	str	r6, [r0, #16]
   dd080:	e7ab      	b.n	dcfda <__mdiff+0x24>
   dd082:	f855 8b04 	ldr.w	r8, [r5], #4
   dd086:	fa17 f488 	uxtah	r4, r7, r8
   dd08a:	1422      	asrs	r2, r4, #16
   dd08c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd090:	b2a4      	uxth	r4, r4
   dd092:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd096:	f84e 4b04 	str.w	r4, [lr], #4
   dd09a:	1417      	asrs	r7, r2, #16
   dd09c:	e7e0      	b.n	dd060 <__mdiff+0xaa>
   dd09e:	3e01      	subs	r6, #1
   dd0a0:	e7ea      	b.n	dd078 <__mdiff+0xc2>
	...

000dd0a4 <__ulp>:
   dd0a4:	b082      	sub	sp, #8
   dd0a6:	ed8d 0b00 	vstr	d0, [sp]
   dd0aa:	9b01      	ldr	r3, [sp, #4]
   dd0ac:	4912      	ldr	r1, [pc, #72]	; (dd0f8 <__ulp+0x54>)
   dd0ae:	4019      	ands	r1, r3
   dd0b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd0b4:	2900      	cmp	r1, #0
   dd0b6:	dd05      	ble.n	dd0c4 <__ulp+0x20>
   dd0b8:	2200      	movs	r2, #0
   dd0ba:	460b      	mov	r3, r1
   dd0bc:	ec43 2b10 	vmov	d0, r2, r3
   dd0c0:	b002      	add	sp, #8
   dd0c2:	4770      	bx	lr
   dd0c4:	4249      	negs	r1, r1
   dd0c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd0ca:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd0ce:	f04f 0200 	mov.w	r2, #0
   dd0d2:	f04f 0300 	mov.w	r3, #0
   dd0d6:	da04      	bge.n	dd0e2 <__ulp+0x3e>
   dd0d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd0dc:	fa41 f300 	asr.w	r3, r1, r0
   dd0e0:	e7ec      	b.n	dd0bc <__ulp+0x18>
   dd0e2:	f1a0 0114 	sub.w	r1, r0, #20
   dd0e6:	291e      	cmp	r1, #30
   dd0e8:	bfda      	itte	le
   dd0ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd0ee:	fa20 f101 	lsrle.w	r1, r0, r1
   dd0f2:	2101      	movgt	r1, #1
   dd0f4:	460a      	mov	r2, r1
   dd0f6:	e7e1      	b.n	dd0bc <__ulp+0x18>
   dd0f8:	7ff00000 	.word	0x7ff00000

000dd0fc <__b2d>:
   dd0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd0fe:	6905      	ldr	r5, [r0, #16]
   dd100:	f100 0714 	add.w	r7, r0, #20
   dd104:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd108:	1f2e      	subs	r6, r5, #4
   dd10a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd10e:	4620      	mov	r0, r4
   dd110:	f7ff fd93 	bl	dcc3a <__hi0bits>
   dd114:	f1c0 0320 	rsb	r3, r0, #32
   dd118:	280a      	cmp	r0, #10
   dd11a:	f8df c07c 	ldr.w	ip, [pc, #124]	; dd198 <__b2d+0x9c>
   dd11e:	600b      	str	r3, [r1, #0]
   dd120:	dc14      	bgt.n	dd14c <__b2d+0x50>
   dd122:	f1c0 0e0b 	rsb	lr, r0, #11
   dd126:	fa24 f10e 	lsr.w	r1, r4, lr
   dd12a:	42b7      	cmp	r7, r6
   dd12c:	ea41 030c 	orr.w	r3, r1, ip
   dd130:	bf34      	ite	cc
   dd132:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd136:	2100      	movcs	r1, #0
   dd138:	3015      	adds	r0, #21
   dd13a:	fa04 f000 	lsl.w	r0, r4, r0
   dd13e:	fa21 f10e 	lsr.w	r1, r1, lr
   dd142:	ea40 0201 	orr.w	r2, r0, r1
   dd146:	ec43 2b10 	vmov	d0, r2, r3
   dd14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd14c:	42b7      	cmp	r7, r6
   dd14e:	bf3a      	itte	cc
   dd150:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd154:	f1a5 0608 	subcc.w	r6, r5, #8
   dd158:	2100      	movcs	r1, #0
   dd15a:	380b      	subs	r0, #11
   dd15c:	d017      	beq.n	dd18e <__b2d+0x92>
   dd15e:	f1c0 0c20 	rsb	ip, r0, #32
   dd162:	fa04 f500 	lsl.w	r5, r4, r0
   dd166:	42be      	cmp	r6, r7
   dd168:	fa21 f40c 	lsr.w	r4, r1, ip
   dd16c:	ea45 0504 	orr.w	r5, r5, r4
   dd170:	bf8c      	ite	hi
   dd172:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd176:	2400      	movls	r4, #0
   dd178:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd17c:	fa01 f000 	lsl.w	r0, r1, r0
   dd180:	fa24 f40c 	lsr.w	r4, r4, ip
   dd184:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd188:	ea40 0204 	orr.w	r2, r0, r4
   dd18c:	e7db      	b.n	dd146 <__b2d+0x4a>
   dd18e:	ea44 030c 	orr.w	r3, r4, ip
   dd192:	460a      	mov	r2, r1
   dd194:	e7d7      	b.n	dd146 <__b2d+0x4a>
   dd196:	bf00      	nop
   dd198:	3ff00000 	.word	0x3ff00000

000dd19c <__d2b>:
   dd19c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd1a0:	4689      	mov	r9, r1
   dd1a2:	2101      	movs	r1, #1
   dd1a4:	ec57 6b10 	vmov	r6, r7, d0
   dd1a8:	4690      	mov	r8, r2
   dd1aa:	f7ff fc7f 	bl	dcaac <_Balloc>
   dd1ae:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dd1b2:	4604      	mov	r4, r0
   dd1b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dd1b8:	bb35      	cbnz	r5, dd208 <__d2b+0x6c>
   dd1ba:	2e00      	cmp	r6, #0
   dd1bc:	9301      	str	r3, [sp, #4]
   dd1be:	d028      	beq.n	dd212 <__d2b+0x76>
   dd1c0:	4668      	mov	r0, sp
   dd1c2:	9600      	str	r6, [sp, #0]
   dd1c4:	f7ff fd59 	bl	dcc7a <__lo0bits>
   dd1c8:	9900      	ldr	r1, [sp, #0]
   dd1ca:	b300      	cbz	r0, dd20e <__d2b+0x72>
   dd1cc:	9a01      	ldr	r2, [sp, #4]
   dd1ce:	f1c0 0320 	rsb	r3, r0, #32
   dd1d2:	fa02 f303 	lsl.w	r3, r2, r3
   dd1d6:	430b      	orrs	r3, r1
   dd1d8:	40c2      	lsrs	r2, r0
   dd1da:	6163      	str	r3, [r4, #20]
   dd1dc:	9201      	str	r2, [sp, #4]
   dd1de:	9b01      	ldr	r3, [sp, #4]
   dd1e0:	61a3      	str	r3, [r4, #24]
   dd1e2:	2b00      	cmp	r3, #0
   dd1e4:	bf14      	ite	ne
   dd1e6:	2202      	movne	r2, #2
   dd1e8:	2201      	moveq	r2, #1
   dd1ea:	6122      	str	r2, [r4, #16]
   dd1ec:	b1d5      	cbz	r5, dd224 <__d2b+0x88>
   dd1ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dd1f2:	4405      	add	r5, r0
   dd1f4:	f8c9 5000 	str.w	r5, [r9]
   dd1f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd1fc:	f8c8 0000 	str.w	r0, [r8]
   dd200:	4620      	mov	r0, r4
   dd202:	b003      	add	sp, #12
   dd204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd20c:	e7d5      	b.n	dd1ba <__d2b+0x1e>
   dd20e:	6161      	str	r1, [r4, #20]
   dd210:	e7e5      	b.n	dd1de <__d2b+0x42>
   dd212:	a801      	add	r0, sp, #4
   dd214:	f7ff fd31 	bl	dcc7a <__lo0bits>
   dd218:	9b01      	ldr	r3, [sp, #4]
   dd21a:	6163      	str	r3, [r4, #20]
   dd21c:	2201      	movs	r2, #1
   dd21e:	6122      	str	r2, [r4, #16]
   dd220:	3020      	adds	r0, #32
   dd222:	e7e3      	b.n	dd1ec <__d2b+0x50>
   dd224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dd228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd22c:	f8c9 0000 	str.w	r0, [r9]
   dd230:	6918      	ldr	r0, [r3, #16]
   dd232:	f7ff fd02 	bl	dcc3a <__hi0bits>
   dd236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dd23a:	e7df      	b.n	dd1fc <__d2b+0x60>

000dd23c <__ratio>:
   dd23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd240:	4688      	mov	r8, r1
   dd242:	4669      	mov	r1, sp
   dd244:	4681      	mov	r9, r0
   dd246:	f7ff ff59 	bl	dd0fc <__b2d>
   dd24a:	a901      	add	r1, sp, #4
   dd24c:	4640      	mov	r0, r8
   dd24e:	ec55 4b10 	vmov	r4, r5, d0
   dd252:	f7ff ff53 	bl	dd0fc <__b2d>
   dd256:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd25a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd25e:	eba3 0c02 	sub.w	ip, r3, r2
   dd262:	e9dd 3200 	ldrd	r3, r2, [sp]
   dd266:	1a9b      	subs	r3, r3, r2
   dd268:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dd26c:	ec51 0b10 	vmov	r0, r1, d0
   dd270:	2b00      	cmp	r3, #0
   dd272:	bfd6      	itet	le
   dd274:	460a      	movle	r2, r1
   dd276:	462a      	movgt	r2, r5
   dd278:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dd27c:	468b      	mov	fp, r1
   dd27e:	462f      	mov	r7, r5
   dd280:	bfd4      	ite	le
   dd282:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dd286:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dd28a:	4620      	mov	r0, r4
   dd28c:	ee10 2a10 	vmov	r2, s0
   dd290:	465b      	mov	r3, fp
   dd292:	4639      	mov	r1, r7
   dd294:	f7fd fed2 	bl	db03c <__aeabi_ddiv>
   dd298:	ec41 0b10 	vmov	d0, r0, r1
   dd29c:	b003      	add	sp, #12
   dd29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd2a2 <__copybits>:
   dd2a2:	3901      	subs	r1, #1
   dd2a4:	b570      	push	{r4, r5, r6, lr}
   dd2a6:	1149      	asrs	r1, r1, #5
   dd2a8:	6914      	ldr	r4, [r2, #16]
   dd2aa:	3101      	adds	r1, #1
   dd2ac:	f102 0314 	add.w	r3, r2, #20
   dd2b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd2b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd2b8:	1f05      	subs	r5, r0, #4
   dd2ba:	42a3      	cmp	r3, r4
   dd2bc:	d30c      	bcc.n	dd2d8 <__copybits+0x36>
   dd2be:	1aa3      	subs	r3, r4, r2
   dd2c0:	3b11      	subs	r3, #17
   dd2c2:	f023 0303 	bic.w	r3, r3, #3
   dd2c6:	3211      	adds	r2, #17
   dd2c8:	42a2      	cmp	r2, r4
   dd2ca:	bf88      	it	hi
   dd2cc:	2300      	movhi	r3, #0
   dd2ce:	4418      	add	r0, r3
   dd2d0:	2300      	movs	r3, #0
   dd2d2:	4288      	cmp	r0, r1
   dd2d4:	d305      	bcc.n	dd2e2 <__copybits+0x40>
   dd2d6:	bd70      	pop	{r4, r5, r6, pc}
   dd2d8:	f853 6b04 	ldr.w	r6, [r3], #4
   dd2dc:	f845 6f04 	str.w	r6, [r5, #4]!
   dd2e0:	e7eb      	b.n	dd2ba <__copybits+0x18>
   dd2e2:	f840 3b04 	str.w	r3, [r0], #4
   dd2e6:	e7f4      	b.n	dd2d2 <__copybits+0x30>

000dd2e8 <__any_on>:
   dd2e8:	f100 0214 	add.w	r2, r0, #20
   dd2ec:	6900      	ldr	r0, [r0, #16]
   dd2ee:	114b      	asrs	r3, r1, #5
   dd2f0:	4298      	cmp	r0, r3
   dd2f2:	b510      	push	{r4, lr}
   dd2f4:	db11      	blt.n	dd31a <__any_on+0x32>
   dd2f6:	dd0a      	ble.n	dd30e <__any_on+0x26>
   dd2f8:	f011 011f 	ands.w	r1, r1, #31
   dd2fc:	d007      	beq.n	dd30e <__any_on+0x26>
   dd2fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd302:	fa24 f001 	lsr.w	r0, r4, r1
   dd306:	fa00 f101 	lsl.w	r1, r0, r1
   dd30a:	428c      	cmp	r4, r1
   dd30c:	d10b      	bne.n	dd326 <__any_on+0x3e>
   dd30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd312:	4293      	cmp	r3, r2
   dd314:	d803      	bhi.n	dd31e <__any_on+0x36>
   dd316:	2000      	movs	r0, #0
   dd318:	bd10      	pop	{r4, pc}
   dd31a:	4603      	mov	r3, r0
   dd31c:	e7f7      	b.n	dd30e <__any_on+0x26>
   dd31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd322:	2900      	cmp	r1, #0
   dd324:	d0f5      	beq.n	dd312 <__any_on+0x2a>
   dd326:	2001      	movs	r0, #1
   dd328:	e7f6      	b.n	dd318 <__any_on+0x30>

000dd32a <_calloc_r>:
   dd32a:	b513      	push	{r0, r1, r4, lr}
   dd32c:	434a      	muls	r2, r1
   dd32e:	4611      	mov	r1, r2
   dd330:	9201      	str	r2, [sp, #4]
   dd332:	f7fb fb97 	bl	d8a64 <_malloc_r>
   dd336:	4604      	mov	r4, r0
   dd338:	b118      	cbz	r0, dd342 <_calloc_r+0x18>
   dd33a:	9a01      	ldr	r2, [sp, #4]
   dd33c:	2100      	movs	r1, #0
   dd33e:	f7fe f907 	bl	db550 <memset>
   dd342:	4620      	mov	r0, r4
   dd344:	b002      	add	sp, #8
   dd346:	bd10      	pop	{r4, pc}

000dd348 <nan>:
   dd348:	ed9f 0b01 	vldr	d0, [pc, #4]	; dd350 <nan+0x8>
   dd34c:	4770      	bx	lr
   dd34e:	bf00      	nop
   dd350:	00000000 	.word	0x00000000
   dd354:	7ff80000 	.word	0x7ff80000

000dd358 <__ascii_wctomb>:
   dd358:	b149      	cbz	r1, dd36e <__ascii_wctomb+0x16>
   dd35a:	2aff      	cmp	r2, #255	; 0xff
   dd35c:	bf85      	ittet	hi
   dd35e:	238a      	movhi	r3, #138	; 0x8a
   dd360:	6003      	strhi	r3, [r0, #0]
   dd362:	700a      	strbls	r2, [r1, #0]
   dd364:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dd368:	bf98      	it	ls
   dd36a:	2001      	movls	r0, #1
   dd36c:	4770      	bx	lr
   dd36e:	4608      	mov	r0, r1
   dd370:	4770      	bx	lr
	...

000dd374 <__aeabi_d2lz>:
   dd374:	b538      	push	{r3, r4, r5, lr}
   dd376:	2200      	movs	r2, #0
   dd378:	2300      	movs	r3, #0
   dd37a:	4604      	mov	r4, r0
   dd37c:	460d      	mov	r5, r1
   dd37e:	f7fd ffa5 	bl	db2cc <__aeabi_dcmplt>
   dd382:	b928      	cbnz	r0, dd390 <__aeabi_d2lz+0x1c>
   dd384:	4620      	mov	r0, r4
   dd386:	4629      	mov	r1, r5
   dd388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd38c:	f7fe b84c 	b.w	db428 <__aeabi_d2ulz>
   dd390:	4620      	mov	r0, r4
   dd392:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dd396:	f7fe f847 	bl	db428 <__aeabi_d2ulz>
   dd39a:	4240      	negs	r0, r0
   dd39c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd3a0:	bd38      	pop	{r3, r4, r5, pc}
   dd3a2:	bf00      	nop

000dd3a4 <dynalib_user>:
   dd3a4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd3b4:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dd3c4:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dd3d4:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dd3e4:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dd3f4:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   dd404:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   dd414:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   dd424:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   dd434:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   dd444:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   dd454:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   dd464:	726f 5320 7869 4e00 206f 6144 6174 5200     or Six.No Data.R
   dd474:	7365 6f70 736e 2065 7645 6e65 0074 6552     esponse Event.Re
   dd484:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
   dd494:	6e55 6e6b 776f 206e 6572 7073 6e6f 6573     Unknown response
   dd4a4:	7220 6365 7665 6569 2064 6925 5300 7465      recevied %i.Set
   dd4b4:	7420 206f 7233 2064 6150 7472 2079 6953      to 3rd Party Si
   dd4c4:	006d 6553 2074 6f74 5020 7261 6974 6c63     m.Set to Particl
   dd4d4:	2065 6953 006d 654b 7065 4120 696c 6576     e Sim.Keep Alive
   dd4e4:	7320 7465 7420 206f 6925 7320 6365 4b00      set to %i sec.K
   dd4f4:	6565 2070 6c41 7669 0065 6552 6f70 7472     eep Alive.Report
   dd504:	6e69 2067 6954 656d 5320 7465 7420 206f     ing Time Set to 
   dd514:	7325 4d20 6e69 7475 7365 002e 6553 2074     %s Minutes..Set 
   dd524:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
   dd534:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   dd544:	0065 6944 6173 6c62 6465 5320 6e65 6f73     e.Disabled Senso
   dd554:	2072 6e4f 0065 6553 736e 726f 5320 6174     r One.Sensor Sta
   dd564:	7574 0073 6944 6173 6c62 6465 5320 6e65     tus.Disabled Sen
   dd574:	6f73 2072 7754 006f 6944 6173 6c62 6465     sor Two.Disabled
   dd584:	5320 6e65 6f73 2072 6854 6572 0065 6944      Sensor Three.Di
   dd594:	6173 6c62 6465 5320 6e65 6f73 2072 6f46     sabled Sensor Fo
   dd5a4:	7275 4400 7369 6261 656c 2064 6553 736e     ur.Disabled Sens
   dd5b4:	726f 4620 7669 0065 6944 6173 6c62 6465     or Five.Disabled
   dd5c4:	5320 6e65 6f73 2072 6953 0078 704f 7265      Sensor Six.Oper
   dd5d4:	7461 6f69 206e 6f4d 6564 2520 0069 6544     ation Mode %i.De
   dd5e4:	6976 6563 5220 7365 7465 5320 6375 6563     vice Reset Succe
   dd5f4:	7373 4c00 616f 6964 676e 5320 7379 6574     ss.Loading Syste
   dd604:	206d 6544 6166 6c75 7374 4c00 616f 6964     m Defaults.Loadi
   dd614:	676e 4320 6e6f 7473 6e61 2074 6544 6166     ng Constant Defa
   dd624:	6c75 7374 3920 2e30 0039 6550 7474 6465     ults 90.9.Petted
   dd634:	5700 7461 6863 6f64 0067 6573 736e 726f     .Watchdog.sensor
   dd644:	6e4f 0065 6573 736e 726f 7754 006f 6573     One.sensorTwo.se
   dd654:	736e 726f 6854 6572 0065 6573 736e 726f     nsorThree.sensor
   dd664:	6f46 7275 7300 6e65 6f73 4672 7669 0065     Four.sensorFive.
   dd674:	6573 736e 726f 6953 0078 6553 736e 726f     sensorSix.Sensor
   dd684:	6e4f 5265 5300 6e65 6f73 4f72 656e 0053     OneR.SensorOneS.
   dd694:	6553 736e 726f 6e4f 5465 5300 6e65 6f73     SensorOneT.Senso
   dd6a4:	5472 6f77 0052 6553 736e 726f 7754 536f     rTwoR.SensorTwoS
   dd6b4:	5300 6e65 6f73 5472 6f77 0054 6553 736e     .SensorTwoT.Sens
   dd6c4:	726f 6e4f 4e65 7000 776f 7265 6f6d 696e     orOneN.powermoni
   dd6d4:	6f74 6972 676e 685f 6f6f 006b 7246 6d6f     toring_hook.From
   dd6e4:	2520 2073 6f74 2520 0073 7453 7461 2065      %s to %s.State 
   dd6f4:	7254 6e61 6973 6974 6e6f 7300 6170 6b72     Transition.spark
   dd704:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   dd714:	6e65 0064 7245 6f72 2072 7453 7461 2065     end.Error State 
   dd724:	202d 6552 6573 0074 7453 7461 0065 5443     - Reset.State.CT
   dd734:	4f20 656e 203a 3325 312e 0066 5443 5420      One: %3.1f.CT T
   dd744:	6f77 2520 2e33 6631 4300 2054 6854 6572     wo %3.1f.CT Thre
   dd754:	3a65 2520 2e33 6631 5300 6e65 6f73 2072     e: %3.1f.Sensor 
   dd764:	6f46 7275 4320 6e6f 7473 6e61 2074 203a     Four Constant : 
   dd774:	3325 312e 0066 6553 736e 726f 4620 7669     %3.1f.Sensor Fiv
   dd784:	2065 6f43 736e 6174 746e 3a20 2520 2e33     e Constant : %3.
   dd794:	6631 5300 6e65 6f73 2072 6953 2078 6f43     1f.Sensor Six Co
   dd7a4:	736e 6174 746e 3a20 2520 2e33 6631 4300     nstant : %3.1f.C
   dd7b4:	6e6f 7473 6e61 2074 6e4f 2065 6156 756c     onstant One Valu
   dd7c4:	2065 6573 2074 6f74 0020 6f43 736e 6174     e set to .Consta
   dd7d4:	746e 5420 6f77 5620 6c61 6575 7320 7465     nt Two Value set
   dd7e4:	7420 206f 4300 6e6f 7473 6e61 2074 6854      to .Constant Th
   dd7f4:	6572 2065 6156 756c 2065 6573 2074 6f74     ree Value set to
   dd804:	0020 6f43 736e 6174 746e 4620 756f 2072      .Constant Four 
   dd814:	6156 756c 2065 6573 2074 6f74 0020 6f43     Value set to .Co
   dd824:	736e 6174 746e 4620 7669 2065 6156 756c     nstant Five Valu
   dd834:	2065 6573 2074 6f74 0020 6f43 736e 6174     e set to .Consta
   dd844:	746e 5320 7869 5620 6c61 6575 7320 7465     nt Six Value set
   dd854:	7420 206f 4e00 6d61 0065 6552 656c 7361      to .Name.Releas
   dd864:	0065 704f 7265 7461 6e69 2067 6f4d 6564     e.Operating Mode
   dd874:	5300 6e65 6f73 7372 5300 6e65 6f73 4f72     .Sensors.SensorO
   dd884:	656e 6f43 6e6e 6365 6574 0064 6553 736e     neConnected.Sens
   dd894:	726f 6e4f 4365 6e6f 7473 6e61 0074 6553     orOneConstant.Se
   dd8a4:	736e 726f 7754 436f 6e6f 656e 7463 6465     nsorTwoConnected
   dd8b4:	5300 6e65 6f73 5472 6f77 6f43 736e 6174     .SensorTwoConsta
   dd8c4:	746e 5300 6e65 6f73 5472 7268 6565 6f43     nt.SensorThreeCo
   dd8d4:	6e6e 6365 6574 0064 6553 736e 726f 6854     nnected.SensorTh
   dd8e4:	6572 4365 6e6f 7473 6e61 0074 6553 736e     reeConstant.Sens
   dd8f4:	726f 6f46 7275 6f43 6e6e 6365 6574 0064     orFourConnected.
   dd904:	6553 736e 726f 6f46 7275 6f43 736e 6174     SensorFourConsta
   dd914:	746e 5300 6e65 6f73 4672 7669 4365 6e6f     nt.SensorFiveCon
   dd924:	656e 7463 6465 5300 6e65 6f73 4672 7669     nected.SensorFiv
   dd934:	4365 6e6f 7473 6e61 0074 6553 736e 726f     eConstant.Sensor
   dd944:	6953 4378 6e6f 656e 7463 6465 5300 6e65     SixConnected.Sen
   dd954:	6f73 5372 7869 6f43 736e 6174 746e 5400     sorSixConstant.T
   dd964:	6968 6472 5020 7261 7974 5320 6d69 4b00     hird Party Sim.K
   dd974:	6565 4170 696c 6576 5200 7065 726f 6974     eepAlive.Reporti
   dd984:	676e 4420 7275 7461 6f69 006e 7953 7473     ng Duration.Syst
   dd994:	6d65 4320 6e6f 6966 7567 6172 6974 6e6f     em Configuration
   dd9a4:	6100 696c 7361 6e00 206f 6f63 666e 6769     .alias.no config
   dd9b4:	7320 7465 2a00 4200 7461 6574 7972 4200      set.*.Battery.B
   dd9c4:	7461 6574 7972 6f43 746e 7865 0074 654b     atteryContext.Ke
   dd9d4:	7065 4120 696c 6576 5320 6365 4f00 6570     ep Alive Sec.Ope
   dd9e4:	6172 6974 6e6f 4d20 646f 0065 654d 7361     ration Mode.Meas
   dd9f4:	7275 2d65 6f4e 0077 6843 6365 206b 6f43     ure-Now.Check Co
   dda04:	666e 6769 7275 7461 6f69 006e 6556 6272     nfiguration.Verb
   dda14:	736f 2d65 6f4d 6564 5300 7465 4320 6e6f     ose-Mode.Set Con
   dda24:	7473 6e61 2074 6e4f 0065 6553 2074 6f43     stant One.Set Co
   dda34:	736e 6174 746e 5420 6f77 5300 7465 4320     nstant Two.Set C
   dda44:	6e6f 7473 6e61 2074 6854 6572 0065 6553     onstant Three.Se
   dda54:	2074 6f43 736e 6174 746e 4620 756f 0072     t Constant Four.
   dda64:	6553 2074 6f43 736e 6174 746e 4620 7669     Set Constant Fiv
   dda74:	0065 6553 2074 6f43 736e 6174 746e 5320     e.Set Constant S
   dda84:	7869 4500 616e 6c62 2065 6553 736e 726f     ix.Enable Sensor
   dda94:	4400 7369 6261 656c 5320 6e65 6f73 0072     .Disable Sensor.
   ddaa4:	6552 6f70 7472 6e69 2067 7544 6172 6974     Reporting Durati
   ddab4:	6e6f 4d28 4e49 5455 5345 0029 6552 6f62     on(MINUTES).Rebo
   ddac4:	746f 4420 7665 6369 0065 6c43 756f 4364     ot Device.CloudC
   ddad4:	6e6f 6966 4467 7665 6369 4e65 746f 7365     onfigDeviceNotes
   ddae4:	5300 7465 7075 4c20 6f6f 0070 6f4c 6461     .Setup Loop.Load
   ddaf4:	6e69 2067 6544 6166 6c75 7374 5300 6174     ing Defaults.Sta
   ddb04:	7472 7075 0000 0000                         rtup....

000ddb0c <_ZTV5Timer>:
	...
   ddb14:	429d 000d 42f1 000d 41dd 000d               .B...B...A..

000ddb20 <_ZTV17PublishQueueAsync>:
	...
   ddb28:	41e9 000d 41fd 000d 7e15 000d 7fa1 000d     .A...A...~......
   ddb38:	7f61 000d 7f3f 000d 80e7 000d 7f87 000d     a...?...........

000ddb48 <_ZTV8MB85RC64>:
	...
   ddb50:	4211 000d 4225 000d 740d 000d 74a3 000d     .B..%B...t...t..
   ddb60:	7525 000d                                   %u..

000ddb64 <_ZTV18CloudConfigStorage>:
	...
   ddb6c:	40cd 000d 40a9 000d 40a9 000d 5e15 000d     .@...@...@...^..
   ddb7c:	40d1 000d 40d3 000d 0000 0000 0000 0000     .@...@..........

000ddb8c <_ZTV26CloudConfigStorageRetained>:
	...
   ddb94:	40d7 000d 65dd 000d 411d 000d 5e15 000d     .@...e...A...^..
   ddba4:	40d1 000d 6659 000d 5e5d 000d 5e75 000d     .@..Yf..]^..u^..
   ddbb4:	40db 000d d3b8 000d d3c0 000d d3c4 000d     .@..............
   ddbc4:	d3cd 000d d3d5 000d d3e1 000d d3e7 000d     ................
   ddbd4:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   ddbe4:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000ddc14 <_ZL13releaseNumber>:
   ddc14:	3531 312e 0030 0000                         15.10...

000ddc1c <_ZL17FRAMversionNumber>:
   ddc1c:	0016 0000 7325 682f 6f6f 2d6b 6572 7073     ....%s/hook-resp
   ddc2c:	6e6f 6573 252f 2f73 7500 6470 7461 4465     onse/%s/.updateD
   ddc3c:	7461 2061 6163 6c6c 6465 2520 0073 6c43     ata called %s.Cl
   ddc4c:	756f 4364 6e6f 6966 5567 6470 7461 5765     oudConfigUpdateW
   ddc5c:	6265 6f68 6b6f 3a3a 7473 7261 5574 6470     ebhook::startUpd
   ddc6c:	7461 2065 7325 6300 6f6c 6475 6320 6e6f     ate %s.cloud con
   ddc7c:	656e 7463 6465 7700 6961 2074 6f66 2072     nected.wait for 
   ddc8c:	7075 6164 6574 6e00 206f 6164 6174 6f20     update.no data o
   ddc9c:	2072 7075 6164 6574 6120 2074 6572 7473     r update at rest
   ddcac:	7261 0074 6863 6365 696b 676e 6620 726f     art.checking for
   ddcbc:	7420 6d69 2065 7075 6164 6574 7300 6174      time update.sta
   ddccc:	6574 7453 7261 5574 6470 7461 0065 7473     teStartUpdate.st
   ddcdc:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   ddcec:	6c70 7465 2065 6974 656d 756f 0074 7473     plete timeout.st
   ddcfc:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   ddd0c:	6c70 7465 2065 6f63 706d 656c 6574 0000     plete complete..

000ddd1c <_ZTV11CloudConfig>:
	...
   ddd24:	68dd 000d 6711 000d 6731 000d               .h...g..1g..

000ddd30 <_ZTV22CloudConfigStorageData>:
	...
   ddd38:	40d7 000d 65dd 000d 40a9 000d 5e15 000d     .@...e...@...^..
   ddd48:	40d1 000d 6659 000d 0000 0000 0000 0000     .@..Yf..........
   ddd58:	40a9 000d                                   .@..

000ddd5c <_ZTV24CloudConfigUpdateWebhook>:
	...
   ddd64:	6971 000d 65d9 000d 6915 000d 6629 000d     qi...e...i..)f..
   ddd74:	6645 000d                                   Ef..

000ddd78 <_ZTV29CloudConfigUpdateSubscription>:
	...
   ddd80:	6971 000d 65d9 000d 65db 000d 65fd 000d     qi...e...e...e..
   ddd90:	6615 000d 6170 7472 6369 656c 642f 7665     .f..particle/dev
   ddda0:	6369 2f65 616e 656d 0000 0000               ice/name....

000dddac <_ZTV16DeviceNameHelper>:
	...
   dddb4:	6df5 000d 6e15 000d 6d25 000d               .m...n..%m..

000dddc0 <_ZTV24DeviceNameHelperRetained>:
	...
   dddc8:	6e29 000d 6e3d 000d 6d25 000d 7277 7469     )n..=n..%m..writ
   dddd8:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   ddde8:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dddf8:	7264 253d 0075 0000                         dr=%u...

000dde00 <_ZTV6MB85RC>:
	...
   dde08:	735d 000d 735f 000d 740d 000d 74a3 000d     ]s.._s...t...t..
   dde18:	7525 000d 6564 6976 6563 6552 6461 6620     %u..deviceRead f
   dde28:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dde38:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dde48:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dde58:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dde68:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dde78:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dde88:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dde98:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   ddea8:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   ddeb8:	0063 0000                                   c...

000ddebc <_ZTV12MCP79410SRAM>:
	...
   ddec4:	75e5 000d 75fb 000d 75d5 000d 75d9 000d     .u...u...u...u..
   dded4:	7625 000d 790d 000d 7b2d 000d               %v...y..-{..

000ddee0 <_ZTV12MCP79410Time>:
	...
   ddee8:	75e9 000d 75ed 000d                         .u...u..

000ddef0 <_ZTV14MCP79410EEPROM>:
	...
   ddef8:	75e7 000d 7609 000d 75dd 000d 75e1 000d     .u...v...u...u..
   ddf08:	7625 000d 7947 000d 7d6d 000d               %v..Gy..m}..

000ddf14 <_ZTV8MCP79410>:
	...
   ddf1c:	75eb 000d 7617 000d 7550 6c62 7369 5168     .u...v..PublishQ
   ddf2c:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   ddf3c:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   ddf4c:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   ddf5c:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   ddf6c:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   ddf7c:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   ddf8c:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   ddf9c:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   ddfac:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   ddfbc:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   ddfcc:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   ddfdc:	7162 0000                                   bq..

000ddfe0 <_ZTV21PublishQueueAsyncBase>:
	...
   ddff0:	7e15 000d 40a9 000d 40a9 000d 40a9 000d     .~...@...@...@..
   de000:	40a9 000d 40a9 000d                         .@...@..

000de008 <_ZTV25PublishQueueAsyncRetained>:
	...
   de010:	7efd 000d 7f11 000d 7e15 000d 7fa1 000d     .~.......~......
   de020:	7f61 000d 7f3f 000d 80e7 000d 7f87 000d     a...?...........

000de030 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de038:	8b3d 000d 8b43 000d 8b81 000d 8b51 000d     =...C.......Q...
   de048:	8b3f 000d                                   ?...

000de04c <_ZTVN5spark13EthernetClassE>:
	...
   de054:	913f 000d 9135 000d 912b 000d 9121 000d     ?...5...+...!...
   de064:	9115 000d 9109 000d 9a99 000d 9aa1 000d     ................
   de074:	90fd 000d 90f5 000d 90eb 000d 90e1 000d     ................
   de084:	9ad1 000d                                   ....

000de088 <_ZTV7TwoWire>:
	...
   de090:	915d 000d 91a7 000d 917f 000d 915f 000d     ]..........._...
   de0a0:	9187 000d 918f 000d 9197 000d 919f 000d     ................

000de0b0 <_ZTV9IPAddress>:
	...
   de0b8:	92d9 000d 92c9 000d 92cb 000d 2e30 0030     ............0.0.
   de0c8:	6166 736c 0065 7274 6575 2500 0067 2575     false.true.%g.u%
   de0d8:	3430 0078                                   04x.

000de0dc <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de0e4:	93e3 000d 93f9 000d 940f 000d 9407 000d     ................
   de0f4:	93e7 000d                                   ....

000de0f8 <_ZTVN5spark16JSONBufferWriterE>:
	...
   de100:	93e5 000d 93eb 000d 9437 000d 945d 000d     ........7...]...
   de110:	7061 0070                                   app.

000de114 <_ZTVN5spark12NetworkClassE>:
	...
   de11c:	9a59 000d 9a63 000d 9a6d 000d 9a77 000d     Y...c...m...w...
   de12c:	9a81 000d 9a8d 000d 9a99 000d 9aa1 000d     ................
   de13c:	9aa9 000d 9ab5 000d 9abd 000d 9ac7 000d     ................
   de14c:	9ad1 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   de15c:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   de16c:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000de17c <_ZTV11USARTSerial>:
	...
   de184:	a215 000d a281 000d a259 000d 9bc5 000d     ........Y.......
   de194:	a229 000d a245 000d a237 000d a253 000d     )...E...7...S...
   de1a4:	a217 000d a21b 000d                         ........

000de1ac <_ZTV9USBSerial>:
	...
   de1b4:	a315 000d a37d 000d a353 000d 9bc5 000d     ....}...S.......
   de1c4:	a345 000d a317 000d a327 000d a377 000d     E.......'...w...
   de1d4:	a337 000d a311 000d                         7.......

000de1dc <_ZTVN5spark9WiFiClassE>:
	...
   de1e4:	a477 000d a46d 000d a463 000d a419 000d     w...m...c.......
   de1f4:	a457 000d a44b 000d 9a99 000d 9aa1 000d     W...K...........
   de204:	a43f 000d a437 000d a42d 000d a423 000d     ?...7...-...#...
   de214:	9ad1 000d                                   ....

000de218 <_ZSt7nothrow>:
   de218:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   de228:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   de238:	2e25 6432 2520 0a64                          %.2d %d..

000de241 <day_name.6145>:
   de241:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de251:	6972 6153                                    riSat

000de256 <mon_name.6146>:
   de256:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de266:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de276:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000de288 <fpi.7566>:
   de288:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de298:	0000 0000                                   ....

000de29c <fpinan.7602>:
   de29c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   de2ac:	0000 0000                                   ....

000de2b0 <tinytens>:
   de2b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de2c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de2d0:	6f43 64ac 0628 1168                         Co.d(.h.

000de2d8 <_ctype_>:
   de2d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de2e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de2f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de308:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de318:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de328:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de338:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de348:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de358:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de3dc <_C_numeric_locale>:
   de3dc:	d51e 000d e240 000d dd6c 2003 0043 4f50     ....@...l.. C.PO
   de3ec:	4953 0058                                   SIX.

000de3f0 <__mprec_bigtens>:
   de3f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de400:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de410:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de418 <__mprec_tens>:
   de418:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de428:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de438:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de448:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de458:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de468:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de478:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de488:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de498:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de4a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de4b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de4c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de4d8:	9db4 79d9 7843 44ea                         ...yCx.D

000de4e0 <p05.7490>:
   de4e0:	0005 0000 0019 0000 007d 0000               ........}...

000de4ec <link_const_variable_data_end>:
   de4ec:	000d6351 	.word	0x000d6351
   de4f0:	000d6d19 	.word	0x000d6d19
   de4f4:	000d7269 	.word	0x000d7269
   de4f8:	000d7d9d 	.word	0x000d7d9d
   de4fc:	000d8379 	.word	0x000d8379
   de500:	000d8b15 	.word	0x000d8b15
   de504:	000d9149 	.word	0x000d9149
   de508:	000d9a49 	.word	0x000d9a49
   de50c:	000d9bb1 	.word	0x000d9bb1
   de510:	000d9c65 	.word	0x000d9c65
   de514:	000d9ec1 	.word	0x000d9ec1
   de518:	000da201 	.word	0x000da201
   de51c:	000da481 	.word	0x000da481
