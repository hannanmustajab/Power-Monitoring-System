
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008720  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dc740  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003d808  000dcf44  0001d808  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d30  2003dac8  2003dac8  0002dac8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dd200  000dd200  0002d200  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dd22c  000dd22c  0002d22c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e6136  00000000  00000000  0002d230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bf1e  00000000  00000000  00213366  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003dda6  00000000  00000000  0022f284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003360  00000000  00000000  0026d02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a950  00000000  00000000  0027038a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fe1e  00000000  00000000  0027acda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004bc59  00000000  00000000  002baaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00133f92  00000000  00000000  00306751  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009878  00000000  00000000  0043a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fbfb 	bl	d982c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fc1d 	bl	d987c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d808 	.word	0x2003d808
   d404c:	000dcf44 	.word	0x000dcf44
   d4050:	2003dac4 	.word	0x2003dac4
   d4054:	2003dac8 	.word	0x2003dac8
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fc5f 	bl	d8924 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc70c 	.word	0x000dc70c
   d4080:	000dc738 	.word	0x000dc738

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 baf8 	b.w	d5678 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ffe5 	bl	d5058 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bc09 	b.w	d88a8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b9f9 	b.w	d748c <malloc>

000d409a <_Znaj>:
   d409a:	f003 b9f7 	b.w	d748c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b9fd 	b.w	d749c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 f8b8 	bl	d7220 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6f51 	.word	0x000d6f51

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5f9 	.word	0x2003e5f9

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f004 f893 	bl	d821e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000db723 	.word	0x000db723
   d4108:	2003e5c5 	.word	0x2003e5c5

000d410c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f006 fae7 	bl	da6e8 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d411e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d412a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f005 fbda 	bl	d98e8 <strcpy>
    sysStatusWriteNeeded = true;  
   d4134:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4146:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4148:	a802      	add	r0, sp, #8
   d414a:	f005 fbcd 	bl	d98e8 <strcpy>
    return 1;      
   d414e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4150:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d415a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4164:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4168:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5c8 	.word	0x2003e5c8
   d4184:	2003e5f8 	.word	0x2003e5f8
   d4188:	000db725 	.word	0x000db725
   d418c:	000db738 	.word	0x000db738
   d4190:	000db74b 	.word	0x000db74b
   d4194:	000db760 	.word	0x000db760
   d4198:	000db774 	.word	0x000db774
   d419c:	000db788 	.word	0x000db788

000d41a0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41a0:	6943      	ldr	r3, [r0, #20]
   d41a2:	b113      	cbz	r3, d41aa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41a4:	6983      	ldr	r3, [r0, #24]
   d41a6:	300c      	adds	r0, #12
   d41a8:	4718      	bx	r3
            callback();
        }
    }
   d41aa:	4770      	bx	lr

000d41ac <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4b03      	ldr	r3, [pc, #12]	; (d41bc <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41b0:	6003      	str	r3, [r0, #0]
   d41b2:	4604      	mov	r4, r0
   d41b4:	f002 fbfe 	bl	d69b4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41b8:	4620      	mov	r0, r4
   d41ba:	bd10      	pop	{r4, pc}
   d41bc:	000dbf98 	.word	0x000dbf98

000d41c0 <_ZN17PublishQueueAsyncD0Ev>:
   d41c0:	b510      	push	{r4, lr}
   d41c2:	4604      	mov	r4, r0
   d41c4:	f7ff fff2 	bl	d41ac <_ZN17PublishQueueAsyncD1Ev>
   d41c8:	4620      	mov	r0, r4
   d41ca:	2138      	movs	r1, #56	; 0x38
   d41cc:	f004 fcb9 	bl	d8b42 <_ZdlPvj>
   d41d0:	4620      	mov	r0, r4
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41d4:	b510      	push	{r4, lr}
   d41d6:	4b03      	ldr	r3, [pc, #12]	; (d41e4 <_ZN8MB85RC64D1Ev+0x10>)
   d41d8:	6003      	str	r3, [r0, #0]
   d41da:	4604      	mov	r4, r0
   d41dc:	f001 fe02 	bl	d5de4 <_ZN6MB85RCD1Ev>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}
   d41e4:	000dbfc0 	.word	0x000dbfc0

000d41e8 <_ZN8MB85RC64D0Ev>:
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4604      	mov	r4, r0
   d41ec:	f7ff fff2 	bl	d41d4 <_ZN8MB85RC64D1Ev>
   d41f0:	4620      	mov	r0, r4
   d41f2:	2110      	movs	r1, #16
   d41f4:	f004 fca5 	bl	d8b42 <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41fc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41fe:	2100      	movs	r1, #0
   d4200:	4604      	mov	r4, r0
   d4202:	4608      	mov	r0, r1
   d4204:	f002 fe2c 	bl	d6e60 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4208:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d420a:	4620      	mov	r0, r4
   d420c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d420e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4210:	f002 fe3e 	bl	d6e90 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4214:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4216:	b10c      	cbz	r4, d421c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4218:	2301      	movs	r3, #1
   d421a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d421c:	2100      	movs	r1, #0
   d421e:	2001      	movs	r0, #1
   d4220:	f002 fe1e 	bl	d6e60 <os_thread_scheduling>
            }
        }
        if (t) {
   d4224:	b12c      	cbz	r4, d4232 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4226:	6823      	ldr	r3, [r4, #0]
   d4228:	4620      	mov	r0, r4
   d422a:	689b      	ldr	r3, [r3, #8]
   d422c:	4798      	blx	r3
            t->running = false;
   d422e:	2300      	movs	r3, #0
   d4230:	7123      	strb	r3, [r4, #4]
        }
    }
   d4232:	b002      	add	sp, #8
   d4234:	bd10      	pop	{r4, pc}

000d4236 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4236:	b510      	push	{r4, lr}
   d4238:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d423a:	6800      	ldr	r0, [r0, #0]
   d423c:	b108      	cbz	r0, d4242 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d423e:	f003 f92d 	bl	d749c <free>
class SystemClass {
   d4242:	4620      	mov	r0, r4
   d4244:	bd10      	pop	{r4, pc}

000d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4246:	2300      	movs	r3, #0
   d4248:	2204      	movs	r2, #4
   d424a:	f003 b857 	b.w	d72fc <spark_variable>
	...

000d4250 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d4250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4252:	4b10      	ldr	r3, [pc, #64]	; (d4294 <_Z16keepAliveMessagev+0x44>)
   d4254:	4a10      	ldr	r2, [pc, #64]	; (d4298 <_Z16keepAliveMessagev+0x48>)
   d4256:	781b      	ldrb	r3, [r3, #0]
   d4258:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d425a:	4910      	ldr	r1, [pc, #64]	; (d429c <_Z16keepAliveMessagev+0x4c>)
   d425c:	4313      	orrs	r3, r2
   d425e:	f88d 3000 	strb.w	r3, [sp]
   d4262:	2200      	movs	r2, #0
   d4264:	233c      	movs	r3, #60	; 0x3c
   d4266:	a802      	add	r0, sp, #8
   d4268:	f003 fb2e 	bl	d78c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d426c:	9c03      	ldr	r4, [sp, #12]
   d426e:	b17c      	cbz	r4, d4290 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d4270:	6863      	ldr	r3, [r4, #4]
   d4272:	3b01      	subs	r3, #1
   d4274:	6063      	str	r3, [r4, #4]
   d4276:	b95b      	cbnz	r3, d4290 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	4620      	mov	r0, r4
   d427c:	689b      	ldr	r3, [r3, #8]
   d427e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4280:	68a3      	ldr	r3, [r4, #8]
   d4282:	3b01      	subs	r3, #1
   d4284:	60a3      	str	r3, [r4, #8]
   d4286:	b91b      	cbnz	r3, d4290 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d4288:	6823      	ldr	r3, [r4, #0]
   d428a:	4620      	mov	r0, r4
   d428c:	68db      	ldr	r3, [r3, #12]
   d428e:	4798      	blx	r3
}
   d4290:	b004      	add	sp, #16
   d4292:	bd10      	pop	{r4, pc}
   d4294:	2003db14 	.word	0x2003db14
   d4298:	2003db15 	.word	0x2003db15
   d429c:	000db79b 	.word	0x000db79b

000d42a0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42a0:	b510      	push	{r4, lr}
      if (_M_manager)
   d42a2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42a4:	4604      	mov	r4, r0
      if (_M_manager)
   d42a6:	b113      	cbz	r3, d42ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42a8:	2203      	movs	r2, #3
   d42aa:	4601      	mov	r1, r0
   d42ac:	4798      	blx	r3
    }
   d42ae:	4620      	mov	r0, r4
   d42b0:	bd10      	pop	{r4, pc}
	...

000d42b4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42b6:	4b13      	ldr	r3, [pc, #76]	; (d4304 <_ZN5TimerD1Ev+0x50>)
   d42b8:	6003      	str	r3, [r0, #0]
   d42ba:	4604      	mov	r4, r0
        if (handle) {
   d42bc:	6880      	ldr	r0, [r0, #8]
   d42be:	b1c8      	cbz	r0, d42f4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42c0:	2500      	movs	r5, #0
   d42c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42c6:	e9cd 3500 	strd	r3, r5, [sp]
   d42ca:	2102      	movs	r1, #2
   d42cc:	462b      	mov	r3, r5
   d42ce:	462a      	mov	r2, r5
   d42d0:	f002 fde6 	bl	d6ea0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42d4:	68a0      	ldr	r0, [r4, #8]
   d42d6:	4629      	mov	r1, r5
   d42d8:	f002 fe1a 	bl	d6f10 <os_timer_set_id>
            while (running) {
   d42dc:	7923      	ldrb	r3, [r4, #4]
   d42de:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42e2:	b113      	cbz	r3, d42ea <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42e4:	f002 fdb4 	bl	d6e50 <os_thread_yield>
            while (running) {
   d42e8:	e7f8      	b.n	d42dc <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42ea:	68a0      	ldr	r0, [r4, #8]
   d42ec:	4629      	mov	r1, r5
   d42ee:	f002 fdc7 	bl	d6e80 <os_timer_destroy>
            handle = nullptr;
   d42f2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42f4:	f104 000c 	add.w	r0, r4, #12
   d42f8:	f7ff ffd2 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
    }
   d42fc:	4620      	mov	r0, r4
   d42fe:	b003      	add	sp, #12
   d4300:	bd30      	pop	{r4, r5, pc}
   d4302:	bf00      	nop
   d4304:	000dbf84 	.word	0x000dbf84

000d4308 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4308:	b510      	push	{r4, lr}
   d430a:	4604      	mov	r4, r0
    }
   d430c:	f7ff ffd2 	bl	d42b4 <_ZN5TimerD1Ev>
   d4310:	4620      	mov	r0, r4
   d4312:	211c      	movs	r1, #28
   d4314:	f004 fc15 	bl	d8b42 <_ZdlPvj>
   d4318:	4620      	mov	r0, r4
   d431a:	bd10      	pop	{r4, pc}

000d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d431c:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d431e:	4801      	ldr	r0, [pc, #4]	; (d4324 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4320:	f003 b9df 	b.w	d76e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4324:	000d76b7 	.word	0x000d76b7

000d4328 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4328:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d432a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d432c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d432e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4336:	2201      	movs	r2, #1
   d4338:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d433a:	4341      	muls	r1, r0
   d433c:	466a      	mov	r2, sp
   d433e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4340:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4344:	f003 f832 	bl	d73ac <spark_set_connection_property>
    }
   d4348:	b003      	add	sp, #12
   d434a:	f85d fb04 	ldr.w	pc, [sp], #4

000d434e <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d434e:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4350:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4352:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4354:	2100      	movs	r1, #0
   d4356:	b140      	cbz	r0, d436a <_ZN5Timer12changePeriodEjj+0x1c>
   d4358:	e9cd 2100 	strd	r2, r1, [sp]
   d435c:	460a      	mov	r2, r1
   d435e:	2103      	movs	r1, #3
   d4360:	f002 fd9e 	bl	d6ea0 <os_timer_change>
   d4364:	fab0 f080 	clz	r0, r0
   d4368:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d436a:	b003      	add	sp, #12
   d436c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4370:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4372:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4374:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4378:	f88d 3000 	strb.w	r3, [sp]
   d437c:	f88d 5004 	strb.w	r5, [sp, #4]
   d4380:	68e4      	ldr	r4, [r4, #12]
   d4382:	233c      	movs	r3, #60	; 0x3c
   d4384:	47a0      	blx	r4
	}
   d4386:	b003      	add	sp, #12
   d4388:	bd30      	pop	{r4, r5, pc}
	...

000d438c <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d438c:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d438e:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4390:	b092      	sub	sp, #72	; 0x48
   d4392:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4394:	b97b      	cbnz	r3, d43b6 <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4396:	4919      	ldr	r1, [pc, #100]	; (d43fc <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4398:	a802      	add	r0, sp, #8
   d439a:	f005 faa5 	bl	d98e8 <strcpy>
        val_(0) {
   d439e:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d43a0:	f88d 3000 	strb.w	r3, [sp]
   d43a4:	4b16      	ldr	r3, [pc, #88]	; (d4400 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d43a6:	4917      	ldr	r1, [pc, #92]	; (d4404 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d43a8:	781b      	ldrb	r3, [r3, #0]
   d43aa:	4817      	ldr	r0, [pc, #92]	; (d4408 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43ac:	aa02      	add	r2, sp, #8
   d43ae:	f7ff ffdf 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d43b2:	b012      	add	sp, #72	; 0x48
   d43b4:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43b6:	4608      	mov	r0, r1
   d43b8:	f005 fa13 	bl	d97e2 <atoi>
   d43bc:	28c8      	cmp	r0, #200	; 0xc8
   d43be:	d10e      	bne.n	d43de <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d43c0:	4912      	ldr	r1, [pc, #72]	; (d440c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43c2:	a802      	add	r0, sp, #8
   d43c4:	f005 fa90 	bl	d98e8 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d43c8:	f004 f8d9 	bl	d857e <_ZN9TimeClass3nowEv>
   d43cc:	4b10      	ldr	r3, [pc, #64]	; (d4410 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43ce:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d43d0:	4b10      	ldr	r3, [pc, #64]	; (d4414 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43d2:	2201      	movs	r2, #1
   d43d4:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d43d6:	4b10      	ldr	r3, [pc, #64]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43d8:	2200      	movs	r2, #0
   d43da:	701a      	strb	r2, [r3, #0]
   d43dc:	e7df      	b.n	d439e <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43de:	4620      	mov	r0, r4
   d43e0:	f005 f9ff 	bl	d97e2 <atoi>
   d43e4:	28c9      	cmp	r0, #201	; 0xc9
   d43e6:	d0eb      	beq.n	d43c0 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d43e8:	4620      	mov	r0, r4
   d43ea:	f005 f9fa 	bl	d97e2 <atoi>
   d43ee:	4a0b      	ldr	r2, [pc, #44]	; (d441c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43f0:	4603      	mov	r3, r0
   d43f2:	2140      	movs	r1, #64	; 0x40
   d43f4:	a802      	add	r0, sp, #8
   d43f6:	f003 f869 	bl	d74cc <snprintf>
   d43fa:	e7d0      	b.n	d439e <_Z14UbidotsHandlerPKcS0_+0x12>
   d43fc:	000db79d 	.word	0x000db79d
   d4400:	2003db15 	.word	0x2003db15
   d4404:	000db7d4 	.word	0x000db7d4
   d4408:	2003e408 	.word	0x2003e408
   d440c:	000db7a5 	.word	0x000db7a5
   d4410:	2003e5c8 	.word	0x2003e5c8
   d4414:	2003e5f8 	.word	0x2003e5f8
   d4418:	2003db37 	.word	0x2003db37
   d441c:	000db7b7 	.word	0x000db7b7

000d4420 <_Z16setThirdPartySim6String>:
{
   d4420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4422:	491c      	ldr	r1, [pc, #112]	; (d4494 <_Z16setThirdPartySim6String+0x74>)
   d4424:	4605      	mov	r5, r0
   d4426:	f003 fefa 	bl	d821e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d442a:	4604      	mov	r4, r0
   d442c:	b300      	cbz	r0, d4470 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d442e:	4c1a      	ldr	r4, [pc, #104]	; (d4498 <_Z16setThirdPartySim6String+0x78>)
   d4430:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4432:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4434:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4436:	f7ff ff77 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d443a:	6863      	ldr	r3, [r4, #4]
   d443c:	4817      	ldr	r0, [pc, #92]	; (d449c <_Z16setThirdPartySim6String+0x7c>)
   d443e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4442:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4446:	4359      	muls	r1, r3
   d4448:	f7ff ff81 	bl	d434e <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d444c:	f002 ff76 	bl	d733c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4450:	b148      	cbz	r0, d4466 <_Z16setThirdPartySim6String+0x46>
   d4452:	2300      	movs	r3, #0
   d4454:	f88d 3000 	strb.w	r3, [sp]
   d4458:	4b11      	ldr	r3, [pc, #68]	; (d44a0 <_Z16setThirdPartySim6String+0x80>)
   d445a:	4a12      	ldr	r2, [pc, #72]	; (d44a4 <_Z16setThirdPartySim6String+0x84>)
   d445c:	781b      	ldrb	r3, [r3, #0]
   d445e:	4912      	ldr	r1, [pc, #72]	; (d44a8 <_Z16setThirdPartySim6String+0x88>)
   d4460:	4812      	ldr	r0, [pc, #72]	; (d44ac <_Z16setThirdPartySim6String+0x8c>)
   d4462:	f7ff ff85 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4466:	4b12      	ldr	r3, [pc, #72]	; (d44b0 <_Z16setThirdPartySim6String+0x90>)
   d4468:	2001      	movs	r0, #1
   d446a:	7018      	strb	r0, [r3, #0]
}
   d446c:	b003      	add	sp, #12
   d446e:	bd30      	pop	{r4, r5, pc}
   d4470:	4910      	ldr	r1, [pc, #64]	; (d44b4 <_Z16setThirdPartySim6String+0x94>)
   d4472:	4628      	mov	r0, r5
   d4474:	f003 fed3 	bl	d821e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4478:	2800      	cmp	r0, #0
   d447a:	d0f7      	beq.n	d446c <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d447c:	4b06      	ldr	r3, [pc, #24]	; (d4498 <_Z16setThirdPartySim6String+0x78>)
   d447e:	705c      	strb	r4, [r3, #1]
   d4480:	f002 ff5c 	bl	d733c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4484:	2800      	cmp	r0, #0
   d4486:	d0ee      	beq.n	d4466 <_Z16setThirdPartySim6String+0x46>
   d4488:	4b05      	ldr	r3, [pc, #20]	; (d44a0 <_Z16setThirdPartySim6String+0x80>)
   d448a:	f88d 4000 	strb.w	r4, [sp]
   d448e:	781b      	ldrb	r3, [r3, #0]
   d4490:	4a09      	ldr	r2, [pc, #36]	; (d44b8 <_Z16setThirdPartySim6String+0x98>)
   d4492:	e7e4      	b.n	d445e <_Z16setThirdPartySim6String+0x3e>
   d4494:	000db723 	.word	0x000db723
   d4498:	2003e5c8 	.word	0x2003e5c8
   d449c:	2003e3e8 	.word	0x2003e3e8
   d44a0:	2003db15 	.word	0x2003db15
   d44a4:	000db7e1 	.word	0x000db7e1
   d44a8:	000db873 	.word	0x000db873
   d44ac:	2003e408 	.word	0x2003e408
   d44b0:	2003e5f8 	.word	0x2003e5f8
   d44b4:	000db7f6 	.word	0x000db7f6
   d44b8:	000db7f8 	.word	0x000db7f8

000d44bc <_Z12setKeepAlive6String>:
{
   d44bc:	b510      	push	{r4, lr}
   d44be:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44c0:	6800      	ldr	r0, [r0, #0]
   d44c2:	220a      	movs	r2, #10
   d44c4:	a903      	add	r1, sp, #12
   d44c6:	f006 f90f 	bl	da6e8 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44ca:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44ce:	d822      	bhi.n	d4516 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d44d0:	4c12      	ldr	r4, [pc, #72]	; (d451c <_Z12setKeepAlive6String+0x60>)
   d44d2:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44d4:	f7ff ff28 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44d8:	6863      	ldr	r3, [r4, #4]
   d44da:	4811      	ldr	r0, [pc, #68]	; (d4520 <_Z12setKeepAlive6String+0x64>)
   d44dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44e0:	4359      	muls	r1, r3
   d44e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44e6:	f7ff ff32 	bl	d434e <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44ea:	6863      	ldr	r3, [r4, #4]
   d44ec:	4a0d      	ldr	r2, [pc, #52]	; (d4524 <_Z12setKeepAlive6String+0x68>)
   d44ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44f2:	a804      	add	r0, sp, #16
   d44f4:	f002 ffea 	bl	d74cc <snprintf>
   d44f8:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d44fa:	f88d 3000 	strb.w	r3, [sp]
   d44fe:	4b0a      	ldr	r3, [pc, #40]	; (d4528 <_Z12setKeepAlive6String+0x6c>)
   d4500:	490a      	ldr	r1, [pc, #40]	; (d452c <_Z12setKeepAlive6String+0x70>)
   d4502:	781b      	ldrb	r3, [r3, #0]
   d4504:	480a      	ldr	r0, [pc, #40]	; (d4530 <_Z12setKeepAlive6String+0x74>)
   d4506:	aa04      	add	r2, sp, #16
   d4508:	f7ff ff32 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d450c:	4b09      	ldr	r3, [pc, #36]	; (d4534 <_Z12setKeepAlive6String+0x78>)
   d450e:	2001      	movs	r0, #1
   d4510:	7018      	strb	r0, [r3, #0]
}
   d4512:	b044      	add	sp, #272	; 0x110
   d4514:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4516:	2000      	movs	r0, #0
   d4518:	e7fb      	b.n	d4512 <_Z12setKeepAlive6String+0x56>
   d451a:	bf00      	nop
   d451c:	2003e5c8 	.word	0x2003e5c8
   d4520:	2003e3e8 	.word	0x2003e3e8
   d4524:	000db80c 	.word	0x000db80c
   d4528:	2003db15 	.word	0x2003db15
   d452c:	000db825 	.word	0x000db825
   d4530:	2003e408 	.word	0x2003e408
   d4534:	2003e5f8 	.word	0x2003e5f8

000d4538 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d4538:	b500      	push	{lr}
   d453a:	b089      	sub	sp, #36	; 0x24
   d453c:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d453e:	f003 fe81 	bl	d8244 <_ZNK6String7toFloatEv>
   d4542:	4b0e      	ldr	r3, [pc, #56]	; (d457c <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4544:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d4546:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d454a:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d454c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4550:	f003 fe2e 	bl	d81b0 <_ZN6StringC1ERKS_>
   d4554:	2300      	movs	r3, #0
   d4556:	f88d 3000 	strb.w	r3, [sp]
   d455a:	4b09      	ldr	r3, [pc, #36]	; (d4580 <_Z20setReportingDuration6String+0x48>)
   d455c:	9a04      	ldr	r2, [sp, #16]
   d455e:	781b      	ldrb	r3, [r3, #0]
   d4560:	4908      	ldr	r1, [pc, #32]	; (d4584 <_Z20setReportingDuration6String+0x4c>)
   d4562:	4809      	ldr	r0, [pc, #36]	; (d4588 <_Z20setReportingDuration6String+0x50>)
   d4564:	f7ff ff04 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4568:	a804      	add	r0, sp, #16
   d456a:	f003 fdb3 	bl	d80d4 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d456e:	4b07      	ldr	r3, [pc, #28]	; (d458c <_Z20setReportingDuration6String+0x54>)
   d4570:	2001      	movs	r0, #1
   d4572:	7018      	strb	r0, [r3, #0]
}
   d4574:	b009      	add	sp, #36	; 0x24
   d4576:	f85d fb04 	ldr.w	pc, [sp], #4
   d457a:	bf00      	nop
   d457c:	2003e5c8 	.word	0x2003e5c8
   d4580:	2003db15 	.word	0x2003db15
   d4584:	000db830 	.word	0x000db830
   d4588:	2003e408 	.word	0x2003e408
   d458c:	2003e5f8 	.word	0x2003e5f8

000d4590 <_Z14setVerboseMode6String>:
{
   d4590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4592:	4916      	ldr	r1, [pc, #88]	; (d45ec <_Z14setVerboseMode6String+0x5c>)
   d4594:	4605      	mov	r5, r0
   d4596:	f003 fe42 	bl	d821e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d459a:	4604      	mov	r4, r0
   d459c:	b188      	cbz	r0, d45c2 <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d459e:	4b14      	ldr	r3, [pc, #80]	; (d45f0 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45a0:	4a14      	ldr	r2, [pc, #80]	; (d45f4 <_Z14setVerboseMode6String+0x64>)
   d45a2:	4915      	ldr	r1, [pc, #84]	; (d45f8 <_Z14setVerboseMode6String+0x68>)
   d45a4:	4815      	ldr	r0, [pc, #84]	; (d45fc <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d45a6:	2401      	movs	r4, #1
   d45a8:	725c      	strb	r4, [r3, #9]
   d45aa:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45ac:	f88d 3000 	strb.w	r3, [sp]
   d45b0:	4b13      	ldr	r3, [pc, #76]	; (d4600 <_Z14setVerboseMode6String+0x70>)
   d45b2:	781b      	ldrb	r3, [r3, #0]
   d45b4:	f7ff fedc 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45b8:	4b12      	ldr	r3, [pc, #72]	; (d4604 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d45ba:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d45bc:	701c      	strb	r4, [r3, #0]
}
   d45be:	b003      	add	sp, #12
   d45c0:	bd30      	pop	{r4, r5, pc}
   d45c2:	4911      	ldr	r1, [pc, #68]	; (d4608 <_Z14setVerboseMode6String+0x78>)
   d45c4:	4628      	mov	r0, r5
   d45c6:	f003 fe2a 	bl	d821e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45ca:	2800      	cmp	r0, #0
   d45cc:	d0f7      	beq.n	d45be <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d45ce:	4b08      	ldr	r3, [pc, #32]	; (d45f0 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45d0:	4a0e      	ldr	r2, [pc, #56]	; (d460c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d45d2:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45d4:	4b0a      	ldr	r3, [pc, #40]	; (d4600 <_Z14setVerboseMode6String+0x70>)
   d45d6:	f88d 4000 	strb.w	r4, [sp]
   d45da:	781b      	ldrb	r3, [r3, #0]
   d45dc:	4906      	ldr	r1, [pc, #24]	; (d45f8 <_Z14setVerboseMode6String+0x68>)
   d45de:	4807      	ldr	r0, [pc, #28]	; (d45fc <_Z14setVerboseMode6String+0x6c>)
   d45e0:	f7ff fec6 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45e4:	4b07      	ldr	r3, [pc, #28]	; (d4604 <_Z14setVerboseMode6String+0x74>)
   d45e6:	2001      	movs	r0, #1
   d45e8:	7018      	strb	r0, [r3, #0]
    return 1;
   d45ea:	e7e8      	b.n	d45be <_Z14setVerboseMode6String+0x2e>
   d45ec:	000db723 	.word	0x000db723
   d45f0:	2003e5c8 	.word	0x2003e5c8
   d45f4:	000db852 	.word	0x000db852
   d45f8:	000db873 	.word	0x000db873
   d45fc:	2003e408 	.word	0x2003e408
   d4600:	2003db15 	.word	0x2003db15
   d4604:	2003e5f8 	.word	0x2003e5f8
   d4608:	000db7f6 	.word	0x000db7f6
   d460c:	000db863 	.word	0x000db863

000d4610 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d4610:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4612:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4614:	6800      	ldr	r0, [r0, #0]
   d4616:	220a      	movs	r2, #10
   d4618:	a903      	add	r1, sp, #12
   d461a:	f006 f865 	bl	da6e8 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d461e:	1e43      	subs	r3, r0, #1
   d4620:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4622:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4624:	f04f 0500 	mov.w	r5, #0
   d4628:	d839      	bhi.n	d469e <_Z13disableSensor6String+0x8e>
 
  if (tempSensor == 1){
   d462a:	2801      	cmp	r0, #1
   d462c:	4b1d      	ldr	r3, [pc, #116]	; (d46a4 <_Z13disableSensor6String+0x94>)
   d462e:	4f1e      	ldr	r7, [pc, #120]	; (d46a8 <_Z13disableSensor6String+0x98>)
   d4630:	4e1e      	ldr	r6, [pc, #120]	; (d46ac <_Z13disableSensor6String+0x9c>)
   d4632:	d110      	bne.n	d4656 <_Z13disableSensor6String+0x46>
    sysStatus.sensorOneConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4634:	491e      	ldr	r1, [pc, #120]	; (d46b0 <_Z13disableSensor6String+0xa0>)
    sysStatus.sensorOneConnected = false;
   d4636:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4638:	a804      	add	r0, sp, #16
   d463a:	f005 f955 	bl	d98e8 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d463e:	783b      	ldrb	r3, [r7, #0]
   d4640:	491c      	ldr	r1, [pc, #112]	; (d46b4 <_Z13disableSensor6String+0xa4>)
   d4642:	481d      	ldr	r0, [pc, #116]	; (d46b8 <_Z13disableSensor6String+0xa8>)
   d4644:	f88d 5000 	strb.w	r5, [sp]
   d4648:	aa04      	add	r2, sp, #16
   d464a:	f7ff fe91 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
   d464e:	7034      	strb	r4, [r6, #0]
    return 1;      
  }
}
   d4650:	4620      	mov	r0, r4
   d4652:	b045      	add	sp, #276	; 0x114
   d4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (tempSensor == 2){
   d4656:	2802      	cmp	r0, #2
   d4658:	d10e      	bne.n	d4678 <_Z13disableSensor6String+0x68>
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d465a:	4918      	ldr	r1, [pc, #96]	; (d46bc <_Z13disableSensor6String+0xac>)
    sysStatus.sensorTwoConnected = false;
   d465c:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d465e:	a804      	add	r0, sp, #16
   d4660:	f005 f942 	bl	d98e8 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d4664:	783b      	ldrb	r3, [r7, #0]
   d4666:	4913      	ldr	r1, [pc, #76]	; (d46b4 <_Z13disableSensor6String+0xa4>)
   d4668:	4813      	ldr	r0, [pc, #76]	; (d46b8 <_Z13disableSensor6String+0xa8>)
   d466a:	f88d 5000 	strb.w	r5, [sp]
   d466e:	aa04      	add	r2, sp, #16
   d4670:	f7ff fe7e 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d4674:	2401      	movs	r4, #1
   d4676:	e7ea      	b.n	d464e <_Z13disableSensor6String+0x3e>
  else if (tempSensor == 3){
   d4678:	2803      	cmp	r0, #3
   d467a:	d102      	bne.n	d4682 <_Z13disableSensor6String+0x72>
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d467c:	4910      	ldr	r1, [pc, #64]	; (d46c0 <_Z13disableSensor6String+0xb0>)
    sysStatus.sensorThreeConnected = false;
   d467e:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d4680:	e7ed      	b.n	d465e <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 4){
   d4682:	2804      	cmp	r0, #4
   d4684:	d102      	bne.n	d468c <_Z13disableSensor6String+0x7c>
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d4686:	490f      	ldr	r1, [pc, #60]	; (d46c4 <_Z13disableSensor6String+0xb4>)
    sysStatus.sensorFourConnected = false;
   d4688:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d468a:	e7e8      	b.n	d465e <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 5){
   d468c:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d468e:	bf0b      	itete	eq
   d4690:	490d      	ldreq	r1, [pc, #52]	; (d46c8 <_Z13disableSensor6String+0xb8>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4692:	490e      	ldrne	r1, [pc, #56]	; (d46cc <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorFiveConnected = false;
   d4694:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = false;
   d4698:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d469c:	e7df      	b.n	d465e <_Z13disableSensor6String+0x4e>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d469e:	462c      	mov	r4, r5
   d46a0:	e7d6      	b.n	d4650 <_Z13disableSensor6String+0x40>
   d46a2:	bf00      	nop
   d46a4:	2003e5c8 	.word	0x2003e5c8
   d46a8:	2003db15 	.word	0x2003db15
   d46ac:	2003e5f8 	.word	0x2003e5f8
   d46b0:	000db878 	.word	0x000db878
   d46b4:	000db88c 	.word	0x000db88c
   d46b8:	2003e408 	.word	0x2003e408
   d46bc:	000db89a 	.word	0x000db89a
   d46c0:	000db8ae 	.word	0x000db8ae
   d46c4:	000db8c4 	.word	0x000db8c4
   d46c8:	000db8d9 	.word	0x000db8d9
   d46cc:	000db8ee 	.word	0x000db8ee

000d46d0 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d46d0:	b500      	push	{lr}
   d46d2:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d46d4:	6800      	ldr	r0, [r0, #0]
   d46d6:	220a      	movs	r2, #10
   d46d8:	a903      	add	r1, sp, #12
   d46da:	f006 f805 	bl	da6e8 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46de:	2804      	cmp	r0, #4
   d46e0:	d818      	bhi.n	d4714 <_Z16setOperatingMode6String+0x44>
  else{
    sysStatus.operatingMode = tempSensor;
   d46e2:	4b0d      	ldr	r3, [pc, #52]	; (d4718 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46e4:	4a0d      	ldr	r2, [pc, #52]	; (d471c <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d46e6:	6298      	str	r0, [r3, #40]	; 0x28
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46ec:	4603      	mov	r3, r0
   d46ee:	a804      	add	r0, sp, #16
   d46f0:	f002 feec 	bl	d74cc <snprintf>
   d46f4:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d46f6:	f88d 3000 	strb.w	r3, [sp]
   d46fa:	4b09      	ldr	r3, [pc, #36]	; (d4720 <_Z16setOperatingMode6String+0x50>)
   d46fc:	4909      	ldr	r1, [pc, #36]	; (d4724 <_Z16setOperatingMode6String+0x54>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	4809      	ldr	r0, [pc, #36]	; (d4728 <_Z16setOperatingMode6String+0x58>)
   d4702:	aa04      	add	r2, sp, #16
   d4704:	f7ff fe34 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4708:	4b08      	ldr	r3, [pc, #32]	; (d472c <_Z16setOperatingMode6String+0x5c>)
   d470a:	2001      	movs	r0, #1
   d470c:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d470e:	b045      	add	sp, #276	; 0x114
   d4710:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4714:	2000      	movs	r0, #0
   d4716:	e7fa      	b.n	d470e <_Z16setOperatingMode6String+0x3e>
   d4718:	2003e5c8 	.word	0x2003e5c8
   d471c:	000db902 	.word	0x000db902
   d4720:	2003db15 	.word	0x2003db15
   d4724:	000db873 	.word	0x000db873
   d4728:	2003e408 	.word	0x2003e408
   d472c:	2003e5f8 	.word	0x2003e5f8

000d4730 <_Z11resetSystem6String>:
  emon[5].current(CT6_PIN,sensorConstants.sensorSixConstant);
  constantsStatusWriteNeeded = true;

}

int resetSystem(String Command){
   d4730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4732:	220a      	movs	r2, #10
   d4734:	6800      	ldr	r0, [r0, #0]
   d4736:	a903      	add	r1, sp, #12
   d4738:	f005 ffd6 	bl	da6e8 <strtol>
  if (command == 1) {
   d473c:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d473e:	4604      	mov	r4, r0
  if (command == 1) {
   d4740:	f04f 0300 	mov.w	r3, #0
   d4744:	d111      	bne.n	d476a <_Z11resetSystem6String+0x3a>
    
    publishQueue.publish("Reset","Device Reset Success",PRIVATE);
   d4746:	f88d 3000 	strb.w	r3, [sp]
   d474a:	4b09      	ldr	r3, [pc, #36]	; (d4770 <_Z11resetSystem6String+0x40>)
   d474c:	4a09      	ldr	r2, [pc, #36]	; (d4774 <_Z11resetSystem6String+0x44>)
   d474e:	781b      	ldrb	r3, [r3, #0]
   d4750:	4909      	ldr	r1, [pc, #36]	; (d4778 <_Z11resetSystem6String+0x48>)
   d4752:	480a      	ldr	r0, [pc, #40]	; (d477c <_Z11resetSystem6String+0x4c>)
   d4754:	f7ff fe0c 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(5000);
   d4758:	f241 3088 	movw	r0, #5000	; 0x1388
   d475c:	f002 fefe 	bl	d755c <delay>
    System.reset();
   d4760:	f003 fd92 	bl	d8288 <_ZN11SystemClass5resetEv>
    return 1;
    }
  else return 0;  
   d4764:	4620      	mov	r0, r4
   d4766:	b004      	add	sp, #16
   d4768:	bd10      	pop	{r4, pc}
  else return 0;  
   d476a:	461c      	mov	r4, r3
   d476c:	e7fa      	b.n	d4764 <_Z11resetSystem6String+0x34>
   d476e:	bf00      	nop
   d4770:	2003db15 	.word	0x2003db15
   d4774:	000db914 	.word	0x000db914
   d4778:	000dbcc4 	.word	0x000dbcc4
   d477c:	2003e408 	.word	0x2003e408

000d4780 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4780:	b507      	push	{r0, r1, r2, lr}
   d4782:	f002 fddb 	bl	d733c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4786:	b148      	cbz	r0, d479c <_Z18loadSystemDefaultsv+0x1c>
   d4788:	2300      	movs	r3, #0
   d478a:	f88d 3000 	strb.w	r3, [sp]
   d478e:	4b0f      	ldr	r3, [pc, #60]	; (d47cc <_Z18loadSystemDefaultsv+0x4c>)
   d4790:	4a0f      	ldr	r2, [pc, #60]	; (d47d0 <_Z18loadSystemDefaultsv+0x50>)
   d4792:	781b      	ldrb	r3, [r3, #0]
   d4794:	490f      	ldr	r1, [pc, #60]	; (d47d4 <_Z18loadSystemDefaultsv+0x54>)
   d4796:	4810      	ldr	r0, [pc, #64]	; (d47d8 <_Z18loadSystemDefaultsv+0x58>)
   d4798:	f7ff fdea 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d479c:	4a0f      	ldr	r2, [pc, #60]	; (d47dc <_Z18loadSystemDefaultsv+0x5c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d479e:	4810      	ldr	r0, [pc, #64]	; (d47e0 <_Z18loadSystemDefaultsv+0x60>)
   d47a0:	2378      	movs	r3, #120	; 0x78
   d47a2:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d47a4:	f240 1301 	movw	r3, #257	; 0x101
   d47a8:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d47aa:	2300      	movs	r3, #0
  sysStatus.operatingMode = 1;
   d47ac:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d47ae:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d47b0:	7293      	strb	r3, [r2, #10]
  sysStatus.operatingMode = 1;
   d47b2:	f44f 7316 	mov.w	r3, #600	; 0x258
   d47b6:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   d47ba:	2330      	movs	r3, #48	; 0x30
  sysStatus.sensorOneConnected = 1;
   d47bc:	7711      	strb	r1, [r2, #28]
  sysStatus.sensorFiveConnected=1;
   d47be:	f882 1020 	strb.w	r1, [r2, #32]
}
   d47c2:	b003      	add	sp, #12
   d47c4:	f85d eb04 	ldr.w	lr, [sp], #4
   d47c8:	f001 bbc7 	b.w	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
   d47cc:	2003db15 	.word	0x2003db15
   d47d0:	000db929 	.word	0x000db929
   d47d4:	000db873 	.word	0x000db873
   d47d8:	2003e408 	.word	0x2003e408
   d47dc:	2003e5c8 	.word	0x2003e5c8
   d47e0:	2003e3d8 	.word	0x2003e3d8

000d47e4 <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d47e4:	b507      	push	{r0, r1, r2, lr}
   d47e6:	f002 fda9 	bl	d733c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d47ea:	b148      	cbz	r0, d4800 <_Z20loadConstantDefaultsv+0x1c>
   d47ec:	2300      	movs	r3, #0
   d47ee:	f88d 3000 	strb.w	r3, [sp]
   d47f2:	4b0c      	ldr	r3, [pc, #48]	; (d4824 <_Z20loadConstantDefaultsv+0x40>)
   d47f4:	4a0c      	ldr	r2, [pc, #48]	; (d4828 <_Z20loadConstantDefaultsv+0x44>)
   d47f6:	781b      	ldrb	r3, [r3, #0]
   d47f8:	490c      	ldr	r1, [pc, #48]	; (d482c <_Z20loadConstantDefaultsv+0x48>)
   d47fa:	480d      	ldr	r0, [pc, #52]	; (d4830 <_Z20loadConstantDefaultsv+0x4c>)
   d47fc:	f7ff fdb8 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d4800:	4a0c      	ldr	r2, [pc, #48]	; (d4834 <_Z20loadConstantDefaultsv+0x50>)
   d4802:	4b0d      	ldr	r3, [pc, #52]	; (d4838 <_Z20loadConstantDefaultsv+0x54>)
  sensorConstants.sensorFiveConstant = 667;
   d4804:	490d      	ldr	r1, [pc, #52]	; (d483c <_Z20loadConstantDefaultsv+0x58>)
   d4806:	480e      	ldr	r0, [pc, #56]	; (d4840 <_Z20loadConstantDefaultsv+0x5c>)
  sensorConstants.sensorOneConstant = 90.9;
   d4808:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d480a:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d480c:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d480e:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 667;
   d4810:	6111      	str	r1, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d4812:	6153      	str	r3, [r2, #20]
   d4814:	21a0      	movs	r1, #160	; 0xa0
   d4816:	2318      	movs	r3, #24
}
   d4818:	b003      	add	sp, #12
   d481a:	f85d eb04 	ldr.w	lr, [sp], #4
   d481e:	f001 bb9c 	b.w	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
   d4822:	bf00      	nop
   d4824:	2003db15 	.word	0x2003db15
   d4828:	000db941 	.word	0x000db941
   d482c:	000db873 	.word	0x000db873
   d4830:	2003e408 	.word	0x2003e408
   d4834:	2003e460 	.word	0x2003e460
   d4838:	42b5cccd 	.word	0x42b5cccd
   d483c:	4426c000 	.word	0x4426c000
   d4840:	2003e3d8 	.word	0x2003e3d8

000d4844 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4844:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4846:	4c15      	ldr	r4, [pc, #84]	; (d489c <_Z17checkSystemValuesv+0x58>)
   d4848:	7a23      	ldrb	r3, [r4, #8]
   d484a:	2b01      	cmp	r3, #1
   d484c:	d904      	bls.n	d4858 <_Z17checkSystemValuesv+0x14>
   d484e:	f002 fd75 	bl	d733c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4852:	b300      	cbz	r0, d4896 <_Z17checkSystemValuesv+0x52>
   d4854:	2301      	movs	r3, #1
   d4856:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4858:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d485a:	4a11      	ldr	r2, [pc, #68]	; (d48a0 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d485c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4860:	bf84      	itt	hi
   d4862:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4866:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d4868:	7a63      	ldrb	r3, [r4, #9]
   d486a:	2b01      	cmp	r3, #1
   d486c:	bf84      	itt	hi
   d486e:	2301      	movhi	r3, #1
   d4870:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4872:	7aa3      	ldrb	r3, [r4, #10]
   d4874:	2b01      	cmp	r3, #1
   d4876:	bf84      	itt	hi
   d4878:	2300      	movhi	r3, #0
   d487a:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d487c:	6963      	ldr	r3, [r4, #20]
   d487e:	2bff      	cmp	r3, #255	; 0xff
   d4880:	bf84      	itt	hi
   d4882:	2300      	movhi	r3, #0
   d4884:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4888:	2b05      	cmp	r3, #5
   d488a:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d488e:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4890:	bf88      	it	hi
   d4892:	62a3      	strhi	r3, [r4, #40]	; 0x28
}
   d4894:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4896:	7220      	strb	r0, [r4, #8]
   d4898:	e7de      	b.n	d4858 <_Z17checkSystemValuesv+0x14>
   d489a:	bf00      	nop
   d489c:	2003e5c8 	.word	0x2003e5c8
   d48a0:	2003e5f8 	.word	0x2003e5f8

000d48a4 <_Z19checkConstantValuesv>:
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d48a4:	4b33      	ldr	r3, [pc, #204]	; (d4974 <_Z19checkConstantValuesv+0xd0>)
   d48a6:	edd3 7a00 	vldr	s15, [r3]
   d48aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48b2:	d406      	bmi.n	d48c2 <_Z19checkConstantValuesv+0x1e>
   d48b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48c0:	dd01      	ble.n	d48c6 <_Z19checkConstantValuesv+0x22>
   d48c2:	4a2e      	ldr	r2, [pc, #184]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d48c4:	601a      	str	r2, [r3, #0]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d48c6:	edd3 7a01 	vldr	s15, [r3, #4]
   d48ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48d2:	d406      	bmi.n	d48e2 <_Z19checkConstantValuesv+0x3e>
   d48d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48e0:	dd01      	ble.n	d48e6 <_Z19checkConstantValuesv+0x42>
   d48e2:	4a26      	ldr	r2, [pc, #152]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d48e4:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d48e6:	edd3 7a02 	vldr	s15, [r3, #8]
   d48ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48f2:	d406      	bmi.n	d4902 <_Z19checkConstantValuesv+0x5e>
   d48f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48f8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4900:	dd01      	ble.n	d4906 <_Z19checkConstantValuesv+0x62>
   d4902:	4a1e      	ldr	r2, [pc, #120]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4904:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d4906:	edd3 7a03 	vldr	s15, [r3, #12]
   d490a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d490e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4912:	d406      	bmi.n	d4922 <_Z19checkConstantValuesv+0x7e>
   d4914:	ed9f 7a18 	vldr	s14, [pc, #96]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4918:	eef4 7ac7 	vcmpe.f32	s15, s14
   d491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4920:	dd01      	ble.n	d4926 <_Z19checkConstantValuesv+0x82>
   d4922:	4a16      	ldr	r2, [pc, #88]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4924:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorFiveConstant < 0.0  || sensorConstants.sensorFiveConstant > 3000.0) sensorConstants.sensorFiveConstant = 90.91;
   d4926:	edd3 7a04 	vldr	s15, [r3, #16]
   d492a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4932:	d406      	bmi.n	d4942 <_Z19checkConstantValuesv+0x9e>
   d4934:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4938:	eef4 7ac7 	vcmpe.f32	s15, s14
   d493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4940:	dd01      	ble.n	d4946 <_Z19checkConstantValuesv+0xa2>
   d4942:	4a0e      	ldr	r2, [pc, #56]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4944:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
   d4946:	edd3 7a05 	vldr	s15, [r3, #20]
   d494a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4952:	d406      	bmi.n	d4962 <_Z19checkConstantValuesv+0xbe>
   d4954:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4958:	eef4 7ac7 	vcmpe.f32	s15, s14
   d495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4960:	dd01      	ble.n	d4966 <_Z19checkConstantValuesv+0xc2>
   d4962:	4a06      	ldr	r2, [pc, #24]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4964:	615a      	str	r2, [r3, #20]
   d4966:	4a03      	ldr	r2, [pc, #12]	; (d4974 <_Z19checkConstantValuesv+0xd0>)
   d4968:	4805      	ldr	r0, [pc, #20]	; (d4980 <_Z19checkConstantValuesv+0xdc>)
   d496a:	2318      	movs	r3, #24
   d496c:	21a0      	movs	r1, #160	; 0xa0
   d496e:	f001 baf4 	b.w	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
   d4972:	bf00      	nop
   d4974:	2003e460 	.word	0x2003e460
   d4978:	453b8000 	.word	0x453b8000
   d497c:	42b5d1ec 	.word	0x42b5d1ec
   d4980:	2003e3d8 	.word	0x2003e3d8

000d4984 <_Z11petWatchdogv>:
{
   d4984:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d4986:	2101      	movs	r1, #1
   d4988:	2005      	movs	r0, #5
   d498a:	f004 f864 	bl	d8a56 <digitalWrite>
  digitalWrite(donePin, LOW);
   d498e:	2100      	movs	r1, #0
   d4990:	2005      	movs	r0, #5
   d4992:	f004 f860 	bl	d8a56 <digitalWrite>
  watchdogFlag = false;
   d4996:	4a09      	ldr	r2, [pc, #36]	; (d49bc <_Z11petWatchdogv+0x38>)
   d4998:	2300      	movs	r3, #0
   d499a:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d499c:	4a08      	ldr	r2, [pc, #32]	; (d49c0 <_Z11petWatchdogv+0x3c>)
   d499e:	7a52      	ldrb	r2, [r2, #9]
   d49a0:	b142      	cbz	r2, d49b4 <_Z11petWatchdogv+0x30>
   d49a2:	f88d 3000 	strb.w	r3, [sp]
   d49a6:	4b07      	ldr	r3, [pc, #28]	; (d49c4 <_Z11petWatchdogv+0x40>)
   d49a8:	4a07      	ldr	r2, [pc, #28]	; (d49c8 <_Z11petWatchdogv+0x44>)
   d49aa:	781b      	ldrb	r3, [r3, #0]
   d49ac:	4907      	ldr	r1, [pc, #28]	; (d49cc <_Z11petWatchdogv+0x48>)
   d49ae:	4808      	ldr	r0, [pc, #32]	; (d49d0 <_Z11petWatchdogv+0x4c>)
   d49b0:	f7ff fcde 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d49b4:	b003      	add	sp, #12
   d49b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d49ba:	bf00      	nop
   d49bc:	2003e5f9 	.word	0x2003e5f9
   d49c0:	2003e5c8 	.word	0x2003e5c8
   d49c4:	2003db15 	.word	0x2003db15
   d49c8:	000db960 	.word	0x000db960
   d49cc:	000db967 	.word	0x000db967
   d49d0:	2003e408 	.word	0x2003e408

000d49d4 <_Z9sendEventv>:
{
   d49d4:	b570      	push	{r4, r5, r6, lr}
  if (sysStatus.operatingMode == 1){
   d49d6:	4b74      	ldr	r3, [pc, #464]	; (d4ba8 <_Z9sendEventv+0x1d4>)
   d49d8:	4c74      	ldr	r4, [pc, #464]	; (d4bac <_Z9sendEventv+0x1d8>)
   d49da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49dc:	2b01      	cmp	r3, #1
{
   d49de:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
  if (sysStatus.operatingMode == 1){
   d49e2:	d176      	bne.n	d4ad2 <_Z9sendEventv+0xfe>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d49e4:	a80c      	add	r0, sp, #48	; 0x30
   d49e6:	f002 fcb1 	bl	d734c <spark_deviceID>
    snprintf(influx_hook,sizeof(influx_hook),"{ \"tags\" : {\"location\": \"Hannan-Home\",\"Device-Name\": \"KUMVA011\",\"device_id\": \"%s\"},\"values\": {\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}}",myDeviceID.c_str(),sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d49ea:	6960      	ldr	r0, [r4, #20]
   d49ec:	f004 fb3a 	bl	d9064 <__aeabi_f2d>
   d49f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d49f4:	6920      	ldr	r0, [r4, #16]
   d49f6:	f004 fb35 	bl	d9064 <__aeabi_f2d>
   d49fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d49fe:	68e0      	ldr	r0, [r4, #12]
   d4a00:	f004 fb30 	bl	d9064 <__aeabi_f2d>
   d4a04:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4a08:	68a0      	ldr	r0, [r4, #8]
   d4a0a:	f004 fb2b 	bl	d9064 <__aeabi_f2d>
   d4a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4a12:	6860      	ldr	r0, [r4, #4]
   d4a14:	f004 fb26 	bl	d9064 <__aeabi_f2d>
   d4a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4a1c:	6820      	ldr	r0, [r4, #0]
   d4a1e:	f004 fb21 	bl	d9064 <__aeabi_f2d>
   d4a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4a24:	4a62      	ldr	r2, [pc, #392]	; (d4bb0 <_Z9sendEventv+0x1dc>)
   d4a26:	e9cd 0100 	strd	r0, r1, [sp]
   d4a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4a2e:	a850      	add	r0, sp, #320	; 0x140
   d4a30:	f002 fd4c 	bl	d74cc <snprintf>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1,}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4a34:	6960      	ldr	r0, [r4, #20]
   d4a36:	f004 fb15 	bl	d9064 <__aeabi_f2d>
   d4a3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4a3e:	6920      	ldr	r0, [r4, #16]
   d4a40:	f004 fb10 	bl	d9064 <__aeabi_f2d>
   d4a44:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4a48:	68e0      	ldr	r0, [r4, #12]
   d4a4a:	f004 fb0b 	bl	d9064 <__aeabi_f2d>
   d4a4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4a52:	68a0      	ldr	r0, [r4, #8]
   d4a54:	f004 fb06 	bl	d9064 <__aeabi_f2d>
   d4a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4a5c:	6860      	ldr	r0, [r4, #4]
   d4a5e:	f004 fb01 	bl	d9064 <__aeabi_f2d>
   d4a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4a66:	6820      	ldr	r0, [r4, #0]
   d4a68:	f004 fafc 	bl	d9064 <__aeabi_f2d>
   d4a6c:	4a51      	ldr	r2, [pc, #324]	; (d4bb4 <_Z9sendEventv+0x1e0>)
   d4a6e:	e9cd 0100 	strd	r0, r1, [sp]
   d4a72:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4a76:	a810      	add	r0, sp, #64	; 0x40
   d4a78:	f002 fd28 	bl	d74cc <snprintf>
    String myDeviceID = System.deviceID();                                                              // Device ID
   d4a7c:	a80c      	add	r0, sp, #48	; 0x30
   d4a7e:	f003 fb29 	bl	d80d4 <_ZN6StringD1Ev>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4a82:	4d4d      	ldr	r5, [pc, #308]	; (d4bb8 <_Z9sendEventv+0x1e4>)
   d4a84:	494d      	ldr	r1, [pc, #308]	; (d4bbc <_Z9sendEventv+0x1e8>)
   d4a86:	782b      	ldrb	r3, [r5, #0]
   d4a88:	484d      	ldr	r0, [pc, #308]	; (d4bc0 <_Z9sendEventv+0x1ec>)
   d4a8a:	2600      	movs	r6, #0
   d4a8c:	aa10      	add	r2, sp, #64	; 0x40
   d4a8e:	f88d 6000 	strb.w	r6, [sp]
   d4a92:	f7ff fc6d 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  publishQueue.publish("influx_hook", influx_hook, PRIVATE);
   d4a96:	782b      	ldrb	r3, [r5, #0]
   d4a98:	494a      	ldr	r1, [pc, #296]	; (d4bc4 <_Z9sendEventv+0x1f0>)
   d4a9a:	f88d 6000 	strb.w	r6, [sp]
   d4a9e:	aa50      	add	r2, sp, #320	; 0x140
   d4aa0:	4847      	ldr	r0, [pc, #284]	; (d4bc0 <_Z9sendEventv+0x1ec>)
   d4aa2:	f7ff fc65 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d4aa6:	6823      	ldr	r3, [r4, #0]
   d4aa8:	61a3      	str	r3, [r4, #24]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d4aaa:	6863      	ldr	r3, [r4, #4]
   d4aac:	61e3      	str	r3, [r4, #28]
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d4aae:	68a3      	ldr	r3, [r4, #8]
   d4ab0:	6223      	str	r3, [r4, #32]
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d4ab2:	68e3      	ldr	r3, [r4, #12]
   d4ab4:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d4ab6:	6923      	ldr	r3, [r4, #16]
   d4ab8:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d4aba:	6963      	ldr	r3, [r4, #20]
   d4abc:	62e3      	str	r3, [r4, #44]	; 0x2c
  dataInFlight = true;                                                                      // set the data inflight flag
   d4abe:	4b42      	ldr	r3, [pc, #264]	; (d4bc8 <_Z9sendEventv+0x1f4>)
   d4ac0:	2201      	movs	r2, #1
   d4ac2:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ac4:	f002 fa4c 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4ac8:	4b40      	ldr	r3, [pc, #256]	; (d4bcc <_Z9sendEventv+0x1f8>)
   d4aca:	6018      	str	r0, [r3, #0]
}
   d4acc:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
   d4ad0:	bd70      	pop	{r4, r5, r6, pc}
  } else if (sysStatus.operatingMode == 2){
   d4ad2:	2b02      	cmp	r3, #2
   d4ad4:	d124      	bne.n	d4b20 <_Z9sendEventv+0x14c>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d4ad6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4ad8:	f004 fac4 	bl	d9064 <__aeabi_f2d>
   d4adc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4ae0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4ae2:	f004 fabf 	bl	d9064 <__aeabi_f2d>
   d4ae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4aea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4aec:	f004 faba 	bl	d9064 <__aeabi_f2d>
   d4af0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4af4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4af6:	f004 fab5 	bl	d9064 <__aeabi_f2d>
   d4afa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4afe:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d4b00:	f004 fab0 	bl	d9064 <__aeabi_f2d>
   d4b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b08:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d4b0a:	f004 faab 	bl	d9064 <__aeabi_f2d>
   d4b0e:	e9cd 0100 	strd	r0, r1, [sp]
   d4b12:	4a2f      	ldr	r2, [pc, #188]	; (d4bd0 <_Z9sendEventv+0x1fc>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4b14:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b18:	a810      	add	r0, sp, #64	; 0x40
   d4b1a:	f002 fcd7 	bl	d74cc <snprintf>
   d4b1e:	e7b0      	b.n	d4a82 <_Z9sendEventv+0xae>
  }else if (sysStatus.operatingMode == 3){
   d4b20:	2b03      	cmp	r3, #3
   d4b22:	d11f      	bne.n	d4b64 <_Z9sendEventv+0x190>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4b24:	6960      	ldr	r0, [r4, #20]
   d4b26:	f004 fa9d 	bl	d9064 <__aeabi_f2d>
   d4b2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4b2e:	6920      	ldr	r0, [r4, #16]
   d4b30:	f004 fa98 	bl	d9064 <__aeabi_f2d>
   d4b34:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4b38:	68e0      	ldr	r0, [r4, #12]
   d4b3a:	f004 fa93 	bl	d9064 <__aeabi_f2d>
   d4b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4b42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4b44:	f004 fa8e 	bl	d9064 <__aeabi_f2d>
   d4b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4b4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d4b4e:	f004 fa89 	bl	d9064 <__aeabi_f2d>
   d4b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b56:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d4b58:	f004 fa84 	bl	d9064 <__aeabi_f2d>
   d4b5c:	4a1d      	ldr	r2, [pc, #116]	; (d4bd4 <_Z9sendEventv+0x200>)
   d4b5e:	e9cd 0100 	strd	r0, r1, [sp]
   d4b62:	e7d7      	b.n	d4b14 <_Z9sendEventv+0x140>
  }else if (sysStatus.operatingMode == 4){
   d4b64:	2b04      	cmp	r3, #4
   d4b66:	d18c      	bne.n	d4a82 <_Z9sendEventv+0xae>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4b68:	6960      	ldr	r0, [r4, #20]
   d4b6a:	f004 fa7b 	bl	d9064 <__aeabi_f2d>
   d4b6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4b72:	6920      	ldr	r0, [r4, #16]
   d4b74:	f004 fa76 	bl	d9064 <__aeabi_f2d>
   d4b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4b7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   d4b7e:	f004 fa71 	bl	d9064 <__aeabi_f2d>
   d4b82:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4b86:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d4b88:	f004 fa6c 	bl	d9064 <__aeabi_f2d>
   d4b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4b90:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d4b92:	f004 fa67 	bl	d9064 <__aeabi_f2d>
   d4b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b9a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d4b9c:	f004 fa62 	bl	d9064 <__aeabi_f2d>
   d4ba0:	4a0d      	ldr	r2, [pc, #52]	; (d4bd8 <_Z9sendEventv+0x204>)
   d4ba2:	e9cd 0100 	strd	r0, r1, [sp]
   d4ba6:	e7b5      	b.n	d4b14 <_Z9sendEventv+0x140>
   d4ba8:	2003e5c8 	.word	0x2003e5c8
   d4bac:	2003e478 	.word	0x2003e478
   d4bb0:	000db970 	.word	0x000db970
   d4bb4:	000dba50 	.word	0x000dba50
   d4bb8:	2003db15 	.word	0x2003db15
   d4bbc:	000dbc5d 	.word	0x000dbc5d
   d4bc0:	2003e408 	.word	0x2003e408
   d4bc4:	000dbc72 	.word	0x000dbc72
   d4bc8:	2003db37 	.word	0x2003db37
   d4bcc:	2003e5fc 	.word	0x2003e5fc
   d4bd0:	000dbad3 	.word	0x000dbad3
   d4bd4:	000dbb57 	.word	0x000dbb57
   d4bd8:	000dbbda 	.word	0x000dbbda

000d4bdc <_Z22publishStateTransitionv>:
{
   d4bdc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4bde:	4d11      	ldr	r5, [pc, #68]	; (d4c24 <_Z22publishStateTransitionv+0x48>)
   d4be0:	4c11      	ldr	r4, [pc, #68]	; (d4c28 <_Z22publishStateTransitionv+0x4c>)
   d4be2:	4912      	ldr	r1, [pc, #72]	; (d4c2c <_Z22publishStateTransitionv+0x50>)
   d4be4:	782a      	ldrb	r2, [r5, #0]
   d4be6:	7820      	ldrb	r0, [r4, #0]
{
   d4be8:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4bea:	231a      	movs	r3, #26
   d4bec:	fb03 1202 	mla	r2, r3, r2, r1
   d4bf0:	9200      	str	r2, [sp, #0]
   d4bf2:	fb03 1300 	mla	r3, r3, r0, r1
   d4bf6:	4a0e      	ldr	r2, [pc, #56]	; (d4c30 <_Z22publishStateTransitionv+0x54>)
   d4bf8:	2128      	movs	r1, #40	; 0x28
   d4bfa:	a802      	add	r0, sp, #8
   d4bfc:	f002 fc66 	bl	d74cc <snprintf>
  oldState = state;
   d4c00:	782b      	ldrb	r3, [r5, #0]
   d4c02:	7023      	strb	r3, [r4, #0]
   d4c04:	f002 fb9a 	bl	d733c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4c08:	b148      	cbz	r0, d4c1e <_Z22publishStateTransitionv+0x42>
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	f88d 3000 	strb.w	r3, [sp]
   d4c10:	4b08      	ldr	r3, [pc, #32]	; (d4c34 <_Z22publishStateTransitionv+0x58>)
   d4c12:	4909      	ldr	r1, [pc, #36]	; (d4c38 <_Z22publishStateTransitionv+0x5c>)
   d4c14:	781b      	ldrb	r3, [r3, #0]
   d4c16:	4809      	ldr	r0, [pc, #36]	; (d4c3c <_Z22publishStateTransitionv+0x60>)
   d4c18:	aa02      	add	r2, sp, #8
   d4c1a:	f7ff fba9 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4c1e:	b00d      	add	sp, #52	; 0x34
   d4c20:	bd30      	pop	{r4, r5, pc}
   d4c22:	bf00      	nop
   d4c24:	2003e5c5 	.word	0x2003e5c5
   d4c28:	2003e404 	.word	0x2003e404
   d4c2c:	2003d818 	.word	0x2003d818
   d4c30:	000dbc7e 	.word	0x000dbc7e
   d4c34:	2003db15 	.word	0x2003db15
   d4c38:	000dbc8c 	.word	0x000dbc8c
   d4c3c:	2003e408 	.word	0x2003e408

000d4c40 <_Z17getBatteryContextv>:
{
   d4c40:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4c42:	4d0d      	ldr	r5, [pc, #52]	; (d4c78 <_Z17getBatteryContextv+0x38>)
   d4c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4c46:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4c48:	ac01      	add	r4, sp, #4
   d4c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4c50:	4b0a      	ldr	r3, [pc, #40]	; (d4c7c <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4c56:	7c1b      	ldrb	r3, [r3, #16]
   d4c58:	4809      	ldr	r0, [pc, #36]	; (d4c80 <_Z17getBatteryContextv+0x40>)
   d4c5a:	aa08      	add	r2, sp, #32
   d4c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4c60:	2110      	movs	r1, #16
   d4c62:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4c66:	4a07      	ldr	r2, [pc, #28]	; (d4c84 <_Z17getBatteryContextv+0x44>)
   d4c68:	f002 fc30 	bl	d74cc <snprintf>
  sysStatusWriteNeeded = true;
   d4c6c:	4b06      	ldr	r3, [pc, #24]	; (d4c88 <_Z17getBatteryContextv+0x48>)
   d4c6e:	2201      	movs	r2, #1
   d4c70:	701a      	strb	r2, [r3, #0]
}
   d4c72:	b009      	add	sp, #36	; 0x24
   d4c74:	bd30      	pop	{r4, r5, pc}
   d4c76:	bf00      	nop
   d4c78:	000dbfd4 	.word	0x000dbfd4
   d4c7c:	2003e5c8 	.word	0x2003e5c8
   d4c80:	2003db16 	.word	0x2003db16
   d4c84:	000dc0b0 	.word	0x000dc0b0
   d4c88:	2003e5f8 	.word	0x2003e5f8

000d4c8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d4c90:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4c94:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4c98:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d4c9a:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4c9e:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d4ca0:	ebad 0d04 	sub.w	sp, sp, r4
   d4ca4:	ad02      	add	r5, sp, #8
   d4ca6:	46ac      	mov	ip, r5
   d4ca8:	f04f 0e00 	mov.w	lr, #0
   d4cac:	f84c eb04 	str.w	lr, [ip], #4
   d4cb0:	3802      	subs	r0, #2
   d4cb2:	2800      	cmp	r0, #0
   d4cb4:	da2a      	bge.n	d4d0c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4cb6:	f8df b068 	ldr.w	fp, [pc, #104]	; d4d20 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4cba:	f8df a068 	ldr.w	sl, [pc, #104]	; d4d24 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4cbe:	460c      	mov	r4, r1
   d4cc0:	4690      	mov	r8, r2
   d4cc2:	461e      	mov	r6, r3
   d4cc4:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4cc6:	454d      	cmp	r5, r9
   d4cc8:	d024      	beq.n	d4d14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4cca:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4cce:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4cd2:	4658      	mov	r0, fp
   d4cd4:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4cd8:	f000 ff9a 	bl	d5c10 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4cdc:	ec51 0b10 	vmov	r0, r1, d0
   d4ce0:	f004 fce8 	bl	d96b4 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4ce4:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4ce8:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4cec:	f004 f9ba 	bl	d9064 <__aeabi_f2d>
   d4cf0:	e9da 2300 	ldrd	r2, r3, [sl]
   d4cf4:	f004 fa0e 	bl	d9114 <__aeabi_dmul>
   d4cf8:	4b08      	ldr	r3, [pc, #32]	; (d4d1c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d4cfa:	2200      	movs	r2, #0
   d4cfc:	f004 fb34 	bl	d9368 <__aeabi_ddiv>
   d4d00:	f004 fcd8 	bl	d96b4 <__aeabi_d2f>
   d4d04:	3410      	adds	r4, #16
   d4d06:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d4d0a:	e7dc      	b.n	d4cc6 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d4d0c:	f84c eb04 	str.w	lr, [ip], #4
   d4d10:	3801      	subs	r0, #1
   d4d12:	e7ce      	b.n	d4cb2 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d4d14:	3704      	adds	r7, #4
   d4d16:	46bd      	mov	sp, r7
   d4d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d1c:	408f4000 	.word	0x408f4000
   d4d20:	2003dad0 	.word	0x2003dad0
   d4d24:	2003d810 	.word	0x2003d810

000d4d28 <_Z16takeMeasurementsv>:
{   
   d4d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d2c:	ed2d 8b06 	vpush	{d8-d10}
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4d30:	4cb9      	ldr	r4, [pc, #740]	; (d5018 <_Z16takeMeasurementsv+0x2f0>)
   d4d32:	4bba      	ldr	r3, [pc, #744]	; (d501c <_Z16takeMeasurementsv+0x2f4>)
   d4d34:	6820      	ldr	r0, [r4, #0]
   d4d36:	f893 a000 	ldrb.w	sl, [r3]
{   
   d4d3a:	b0a8      	sub	sp, #160	; 0xa0
  };
   d4d3c:	f8cd a000 	str.w	sl, [sp]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4d40:	f004 f990 	bl	d9064 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4d44:	4bb6      	ldr	r3, [pc, #728]	; (d5020 <_Z16takeMeasurementsv+0x2f8>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4d46:	ec41 0b1a 	vmov	d10, r0, r1
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4d4a:	f893 9000 	ldrb.w	r9, [r3]
  };
   d4d4e:	f8cd 9010 	str.w	r9, [sp, #16]
   d4d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4d56:	6860      	ldr	r0, [r4, #4]
   d4d58:	f004 f984 	bl	d9064 <__aeabi_f2d>
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4d5c:	4bb1      	ldr	r3, [pc, #708]	; (d5024 <_Z16takeMeasurementsv+0x2fc>)
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4d5e:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4d62:	f893 8000 	ldrb.w	r8, [r3]
  };
   d4d66:	f8cd 8020 	str.w	r8, [sp, #32]
   d4d6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4d6e:	68a0      	ldr	r0, [r4, #8]
   d4d70:	f004 f978 	bl	d9064 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4d74:	4bac      	ldr	r3, [pc, #688]	; (d5028 <_Z16takeMeasurementsv+0x300>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4d76:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4d7a:	781d      	ldrb	r5, [r3, #0]
  };
   d4d7c:	950c      	str	r5, [sp, #48]	; 0x30
  };
   d4d7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4d82:	68e0      	ldr	r0, [r4, #12]
   d4d84:	f004 f96e 	bl	d9064 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4d88:	4ba8      	ldr	r3, [pc, #672]	; (d502c <_Z16takeMeasurementsv+0x304>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4d8a:	4606      	mov	r6, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4d8c:	781b      	ldrb	r3, [r3, #0]
   d4d8e:	6920      	ldr	r0, [r4, #16]
   d4d90:	9310      	str	r3, [sp, #64]	; 0x40
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4d92:	460f      	mov	r7, r1
  };
   d4d94:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4d98:	f004 f964 	bl	d9064 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4d9c:	4ba4      	ldr	r3, [pc, #656]	; (d5030 <_Z16takeMeasurementsv+0x308>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4d9e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4da2:	781b      	ldrb	r3, [r3, #0]
   d4da4:	6960      	ldr	r0, [r4, #20]
   d4da6:	9314      	str	r3, [sp, #80]	; 0x50
   d4da8:	f004 f95c 	bl	d9064 <__aeabi_f2d>
    sensorData.validData = false;
   d4dac:	4ca1      	ldr	r4, [pc, #644]	; (d5034 <_Z16takeMeasurementsv+0x30c>)
   };
   d4dae:	9524      	str	r5, [sp, #144]	; 0x90
    if ((sysStatus.operatingMode) == 1){
   d4db0:	4da1      	ldr	r5, [pc, #644]	; (d5038 <_Z16takeMeasurementsv+0x310>)
   };
   d4db2:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    sensorData.validData = false;
   d4db6:	2300      	movs	r3, #0
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4db8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   };
   d4dbc:	ed8d ab1a 	vstr	d10, [sp, #104]	; 0x68
   d4dc0:	ed8d 9b1e 	vstr	d9, [sp, #120]	; 0x78
   d4dc4:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
   d4dc8:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
   d4dcc:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   d4dd0:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    sensorData.validData = false;
   d4dd4:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    getBatteryContext();     
   d4dd8:	f7ff ff32 	bl	d4c40 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4ddc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d4dde:	2801      	cmp	r0, #1
   d4de0:	d14a      	bne.n	d4e78 <_Z16takeMeasurementsv+0x150>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4de2:	7f2b      	ldrb	r3, [r5, #28]
   d4de4:	b14b      	cbz	r3, d4dfa <_Z16takeMeasurementsv+0xd2>
   d4de6:	4895      	ldr	r0, [pc, #596]	; (d503c <_Z16takeMeasurementsv+0x314>)
   d4de8:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4dec:	f000 ff90 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4df0:	ec51 0b10 	vmov	r0, r1, d0
   d4df4:	f004 fc5e 	bl	d96b4 <__aeabi_d2f>
   d4df8:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4dfa:	7f6b      	ldrb	r3, [r5, #29]
   d4dfc:	b14b      	cbz	r3, d4e12 <_Z16takeMeasurementsv+0xea>
   d4dfe:	4890      	ldr	r0, [pc, #576]	; (d5040 <_Z16takeMeasurementsv+0x318>)
   d4e00:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e04:	f000 ff84 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e08:	ec51 0b10 	vmov	r0, r1, d0
   d4e0c:	f004 fc52 	bl	d96b4 <__aeabi_d2f>
   d4e10:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4e12:	7fab      	ldrb	r3, [r5, #30]
   d4e14:	b14b      	cbz	r3, d4e2a <_Z16takeMeasurementsv+0x102>
   d4e16:	488b      	ldr	r0, [pc, #556]	; (d5044 <_Z16takeMeasurementsv+0x31c>)
   d4e18:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e1c:	f000 ff78 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e20:	ec51 0b10 	vmov	r0, r1, d0
   d4e24:	f004 fc46 	bl	d96b4 <__aeabi_d2f>
   d4e28:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4e2a:	7feb      	ldrb	r3, [r5, #31]
   d4e2c:	b14b      	cbz	r3, d4e42 <_Z16takeMeasurementsv+0x11a>
   d4e2e:	4886      	ldr	r0, [pc, #536]	; (d5048 <_Z16takeMeasurementsv+0x320>)
   d4e30:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e34:	f000 ff6c 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e38:	ec51 0b10 	vmov	r0, r1, d0
   d4e3c:	f004 fc3a 	bl	d96b4 <__aeabi_d2f>
   d4e40:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4e42:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4e46:	b14b      	cbz	r3, d4e5c <_Z16takeMeasurementsv+0x134>
   d4e48:	4880      	ldr	r0, [pc, #512]	; (d504c <_Z16takeMeasurementsv+0x324>)
   d4e4a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e4e:	f000 ff5f 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e52:	ec51 0b10 	vmov	r0, r1, d0
   d4e56:	f004 fc2d 	bl	d96b4 <__aeabi_d2f>
   d4e5a:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d4e5c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4e60:	b1eb      	cbz	r3, d4e9e <_Z16takeMeasurementsv+0x176>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4e62:	487b      	ldr	r0, [pc, #492]	; (d5050 <_Z16takeMeasurementsv+0x328>)
   d4e64:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e68:	f000 ff52 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e6c:	ec51 0b10 	vmov	r0, r1, d0
   d4e70:	f004 fc20 	bl	d96b4 <__aeabi_d2f>
   d4e74:	6160      	str	r0, [r4, #20]
   d4e76:	e012      	b.n	d4e9e <_Z16takeMeasurementsv+0x176>
    else if ((sysStatus.operatingMode) == 2){
   d4e78:	2802      	cmp	r0, #2
   d4e7a:	f040 808f 	bne.w	d4f9c <_Z16takeMeasurementsv+0x274>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4e7e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4e82:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4e86:	4669      	mov	r1, sp
   d4e88:	2003      	movs	r0, #3
   d4e8a:	f7ff feff 	bl	d4c8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4e8e:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4e92:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4e96:	a90c      	add	r1, sp, #48	; 0x30
   d4e98:	2003      	movs	r0, #3
   d4e9a:	f7ff fef7 	bl	d4c8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4e9e:	edd4 7a00 	vldr	s15, [r4]
   d4ea2:	ed94 7a06 	vldr	s14, [r4, #24]
    sensorDataWriteNeeded = true;
   d4ea6:	4e6b      	ldr	r6, [pc, #428]	; (d5054 <_Z16takeMeasurementsv+0x32c>)
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb0:	bfd8      	it	le
   d4eb2:	eef1 7a67 	vnegle.f32	s15, s15
   d4eb6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4eba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d4ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
    sensorDataWriteNeeded = true;
   d4ec2:	2201      	movs	r2, #1
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sensorDataWriteNeeded = true;
   d4ec8:	7032      	strb	r2, [r6, #0]
    if ( ((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4eca:	da59      	bge.n	d4f80 <_Z16takeMeasurementsv+0x258>
   d4ecc:	ed94 7a01 	vldr	s14, [r4, #4]
   d4ed0:	edd4 6a07 	vldr	s13, [r4, #28]
   d4ed4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4edc:	bfd8      	it	le
   d4ede:	eeb1 7a47 	vnegle.f32	s14, s14
   d4ee2:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eee:	da47      	bge.n	d4f80 <_Z16takeMeasurementsv+0x258>
   d4ef0:	ed94 7a02 	vldr	s14, [r4, #8]
   d4ef4:	edd4 6a08 	vldr	s13, [r4, #32]
   d4ef8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f00:	bfd8      	it	le
   d4f02:	eeb1 7a47 	vnegle.f32	s14, s14
   d4f06:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f12:	da35      	bge.n	d4f80 <_Z16takeMeasurementsv+0x258>
   d4f14:	ed94 7a03 	vldr	s14, [r4, #12]
   d4f18:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4f1c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f24:	bfd8      	it	le
   d4f26:	eeb1 7a47 	vnegle.f32	s14, s14
   d4f2a:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f36:	da23      	bge.n	d4f80 <_Z16takeMeasurementsv+0x258>
   d4f38:	ed94 7a04 	vldr	s14, [r4, #16]
   d4f3c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4f40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f48:	bfd8      	it	le
   d4f4a:	eeb1 7a47 	vnegle.f32	s14, s14
   d4f4e:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f5a:	da11      	bge.n	d4f80 <_Z16takeMeasurementsv+0x258>
   d4f5c:	ed94 7a05 	vldr	s14, [r4, #20]
   d4f60:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4f64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f6c:	bfd8      	it	le
   d4f6e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4f72:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f7e:	db48      	blt.n	d5012 <_Z16takeMeasurementsv+0x2ea>
      sensorData.validData = true;
   d4f80:	2501      	movs	r5, #1
   d4f82:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
      sensorData.timeStamp = Time.now();
   d4f86:	f003 fafa 	bl	d857e <_ZN9TimeClass3nowEv>
      sensorDataWriteNeeded = true;
   d4f8a:	7035      	strb	r5, [r6, #0]
      sensorData.timeStamp = Time.now();
   d4f8c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      return 1;
   d4f90:	4628      	mov	r0, r5
  }
   d4f92:	b028      	add	sp, #160	; 0xa0
   d4f94:	ecbd 8b06 	vpop	{d8-d10}
   d4f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (sysStatus.operatingMode == 3){
   d4f9c:	2803      	cmp	r0, #3
   d4f9e:	d12a      	bne.n	d4ff6 <_Z16takeMeasurementsv+0x2ce>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4fa0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4fa4:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4fa8:	4669      	mov	r1, sp
   d4faa:	f7ff fe6f 	bl	d4c8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d4fae:	7feb      	ldrb	r3, [r5, #31]
   d4fb0:	b1f3      	cbz	r3, d4ff0 <_Z16takeMeasurementsv+0x2c8>
   d4fb2:	4825      	ldr	r0, [pc, #148]	; (d5048 <_Z16takeMeasurementsv+0x320>)
   d4fb4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4fb8:	f000 feaa 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4fbc:	ec51 0b10 	vmov	r0, r1, d0
   d4fc0:	f004 fb78 	bl	d96b4 <__aeabi_d2f>
   d4fc4:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);       
   d4fc6:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4fca:	b1fb      	cbz	r3, d500c <_Z16takeMeasurementsv+0x2e4>
   d4fcc:	481f      	ldr	r0, [pc, #124]	; (d504c <_Z16takeMeasurementsv+0x324>)
   d4fce:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4fd2:	f000 fe9d 	bl	d5d10 <_ZN13EnergyMonitor8calcIrmsEj>
   d4fd6:	ec51 0b10 	vmov	r0, r1, d0
   d4fda:	f004 fb6b 	bl	d96b4 <__aeabi_d2f>
   d4fde:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4fe0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4fe4:	2b00      	cmp	r3, #0
   d4fe6:	f47f af3c 	bne.w	d4e62 <_Z16takeMeasurementsv+0x13a>
      else sensorData.sensorSixCurrent=0;
   d4fea:	2300      	movs	r3, #0
   d4fec:	6163      	str	r3, [r4, #20]
   d4fee:	e756      	b.n	d4e9e <_Z16takeMeasurementsv+0x176>
      else sensorData.sensorFourCurrent=0;
   d4ff0:	2300      	movs	r3, #0
   d4ff2:	60e3      	str	r3, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d4ff4:	e7e7      	b.n	d4fc6 <_Z16takeMeasurementsv+0x29e>
    else if (sysStatus.operatingMode == 4){
   d4ff6:	2804      	cmp	r0, #4
   d4ff8:	f47f af51 	bne.w	d4e9e <_Z16takeMeasurementsv+0x176>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4ffc:	f104 0370 	add.w	r3, r4, #112	; 0x70
   d5000:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d5004:	a918      	add	r1, sp, #96	; 0x60
   d5006:	f7ff fe41 	bl	d4c8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d500a:	e7dc      	b.n	d4fc6 <_Z16takeMeasurementsv+0x29e>
      else sensorData.sensorFiveCurrent=0;                  
   d500c:	2300      	movs	r3, #0
   d500e:	6123      	str	r3, [r4, #16]
   d5010:	e7e6      	b.n	d4fe0 <_Z16takeMeasurementsv+0x2b8>
      } else return 0;
   d5012:	2000      	movs	r0, #0
   d5014:	e7bd      	b.n	d4f92 <_Z16takeMeasurementsv+0x26a>
   d5016:	bf00      	nop
   d5018:	2003e460 	.word	0x2003e460
   d501c:	2003d808 	.word	0x2003d808
   d5020:	2003d809 	.word	0x2003d809
   d5024:	2003d80a 	.word	0x2003d80a
   d5028:	2003d80b 	.word	0x2003d80b
   d502c:	2003d80c 	.word	0x2003d80c
   d5030:	2003d80d 	.word	0x2003d80d
   d5034:	2003e478 	.word	0x2003e478
   d5038:	2003e5c8 	.word	0x2003e5c8
   d503c:	2003df88 	.word	0x2003df88
   d5040:	2003e040 	.word	0x2003e040
   d5044:	2003e0f8 	.word	0x2003e0f8
   d5048:	2003e1b0 	.word	0x2003e1b0
   d504c:	2003e268 	.word	0x2003e268
   d5050:	2003e320 	.word	0x2003e320
   d5054:	2003e504 	.word	0x2003e504

000d5058 <loop>:
void loop() {
   d5058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d505a:	4c75      	ldr	r4, [pc, #468]	; (d5230 <loop+0x1d8>)
   d505c:	7823      	ldrb	r3, [r4, #0]
   d505e:	3b01      	subs	r3, #1
   d5060:	2b05      	cmp	r3, #5
   d5062:	d817      	bhi.n	d5094 <loop+0x3c>
   d5064:	e8df f003 	tbb	[pc, r3]
   d5068:	685c03be 	.word	0x685c03be
   d506c:	8b42      	.short	0x8b42
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d506e:	4b71      	ldr	r3, [pc, #452]	; (d5234 <loop+0x1dc>)
   d5070:	7a5b      	ldrb	r3, [r3, #9]
   d5072:	b12b      	cbz	r3, d5080 <loop+0x28>
   d5074:	4b70      	ldr	r3, [pc, #448]	; (d5238 <loop+0x1e0>)
   d5076:	781b      	ldrb	r3, [r3, #0]
   d5078:	2b02      	cmp	r3, #2
   d507a:	d001      	beq.n	d5080 <loop+0x28>
   d507c:	f7ff fdae 	bl	d4bdc <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d5080:	f003 fa7d 	bl	d857e <_ZN9TimeClass3nowEv>
   d5084:	230a      	movs	r3, #10
   d5086:	fb90 f2f3 	sdiv	r2, r0, r3
   d508a:	fb02 0313 	mls	r3, r2, r3, r0
   d508e:	b90b      	cbnz	r3, d5094 <loop+0x3c>
   d5090:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d5092:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d5094:	4869      	ldr	r0, [pc, #420]	; (d523c <loop+0x1e4>)
   d5096:	f001 fb3d 	bl	d6714 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d509a:	4b69      	ldr	r3, [pc, #420]	; (d5240 <loop+0x1e8>)
   d509c:	781b      	ldrb	r3, [r3, #0]
   d509e:	b10b      	cbz	r3, d50a4 <loop+0x4c>
   d50a0:	f7ff fc70 	bl	d4984 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d50a4:	4c67      	ldr	r4, [pc, #412]	; (d5244 <loop+0x1ec>)
   d50a6:	7823      	ldrb	r3, [r4, #0]
   d50a8:	b13b      	cbz	r3, d50ba <loop+0x62>
   d50aa:	2330      	movs	r3, #48	; 0x30
   d50ac:	4a61      	ldr	r2, [pc, #388]	; (d5234 <loop+0x1dc>)
   d50ae:	4866      	ldr	r0, [pc, #408]	; (d5248 <loop+0x1f0>)
   d50b0:	2101      	movs	r1, #1
   d50b2:	f000 ff52 	bl	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d50b6:	2300      	movs	r3, #0
   d50b8:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d50ba:	4c64      	ldr	r4, [pc, #400]	; (d524c <loop+0x1f4>)
   d50bc:	7823      	ldrb	r3, [r4, #0]
   d50be:	b143      	cbz	r3, d50d2 <loop+0x7a>
   d50c0:	238c      	movs	r3, #140	; 0x8c
   d50c2:	4a63      	ldr	r2, [pc, #396]	; (d5250 <loop+0x1f8>)
   d50c4:	4860      	ldr	r0, [pc, #384]	; (d5248 <loop+0x1f0>)
   d50c6:	f44f 7100 	mov.w	r1, #512	; 0x200
   d50ca:	f000 ff46 	bl	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d50ce:	2300      	movs	r3, #0
   d50d0:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d50d2:	4c60      	ldr	r4, [pc, #384]	; (d5254 <loop+0x1fc>)
   d50d4:	7823      	ldrb	r3, [r4, #0]
   d50d6:	b13b      	cbz	r3, d50e8 <loop+0x90>
   d50d8:	2318      	movs	r3, #24
   d50da:	4a5f      	ldr	r2, [pc, #380]	; (d5258 <loop+0x200>)
   d50dc:	485a      	ldr	r0, [pc, #360]	; (d5248 <loop+0x1f0>)
   d50de:	21a0      	movs	r1, #160	; 0xa0
   d50e0:	f000 ff3b 	bl	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d50e4:	2300      	movs	r3, #0
   d50e6:	7023      	strb	r3, [r4, #0]
}
   d50e8:	b003      	add	sp, #12
   d50ea:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50ec:	4d51      	ldr	r5, [pc, #324]	; (d5234 <loop+0x1dc>)
   d50ee:	7a6a      	ldrb	r2, [r5, #9]
   d50f0:	b12a      	cbz	r2, d50fe <loop+0xa6>
   d50f2:	4b51      	ldr	r3, [pc, #324]	; (d5238 <loop+0x1e0>)
   d50f4:	781b      	ldrb	r3, [r3, #0]
   d50f6:	2b05      	cmp	r3, #5
   d50f8:	d001      	beq.n	d50fe <loop+0xa6>
   d50fa:	f7ff fd6f 	bl	d4bdc <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d50fe:	f7ff fe13 	bl	d4d28 <_Z16takeMeasurementsv>
   d5102:	b108      	cbz	r0, d5108 <loop+0xb0>
    state = REPORTING_STATE;
   d5104:	2304      	movs	r3, #4
   d5106:	e7c4      	b.n	d5092 <loop+0x3a>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d5108:	f003 fa39 	bl	d857e <_ZN9TimeClass3nowEv>
   d510c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d510e:	fb90 f2f3 	sdiv	r2, r0, r3
   d5112:	fb02 0313 	mls	r3, r2, r3, r0
   d5116:	b90b      	cbnz	r3, d511c <loop+0xc4>
   d5118:	2303      	movs	r3, #3
   d511a:	e7ba      	b.n	d5092 <loop+0x3a>
    else state = IDLE_STATE;
   d511c:	2302      	movs	r3, #2
   d511e:	e7b8      	b.n	d5092 <loop+0x3a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5120:	4b44      	ldr	r3, [pc, #272]	; (d5234 <loop+0x1dc>)
   d5122:	7a5b      	ldrb	r3, [r3, #9]
   d5124:	b12b      	cbz	r3, d5132 <loop+0xda>
   d5126:	4b44      	ldr	r3, [pc, #272]	; (d5238 <loop+0x1e0>)
   d5128:	781b      	ldrb	r3, [r3, #0]
   d512a:	2b03      	cmp	r3, #3
   d512c:	d001      	beq.n	d5132 <loop+0xda>
   d512e:	f7ff fd55 	bl	d4bdc <_Z22publishStateTransitionv>
    takeMeasurements();
   d5132:	f7ff fdf9 	bl	d4d28 <_Z16takeMeasurementsv>
   d5136:	e7e5      	b.n	d5104 <loop+0xac>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d5138:	4b3e      	ldr	r3, [pc, #248]	; (d5234 <loop+0x1dc>)
   d513a:	7a5b      	ldrb	r3, [r3, #9]
   d513c:	b12b      	cbz	r3, d514a <loop+0xf2>
   d513e:	4b3e      	ldr	r3, [pc, #248]	; (d5238 <loop+0x1e0>)
   d5140:	781b      	ldrb	r3, [r3, #0]
   d5142:	2b04      	cmp	r3, #4
   d5144:	d001      	beq.n	d514a <loop+0xf2>
   d5146:	f7ff fd49 	bl	d4bdc <_Z22publishStateTransitionv>
   d514a:	f002 f8f7 	bl	d733c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d514e:	b168      	cbz	r0, d516c <loop+0x114>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5150:	f003 fa26 	bl	d85a0 <_ZN9TimeClass4hourEv>
   d5154:	280c      	cmp	r0, #12
   d5156:	d105      	bne.n	d5164 <loop+0x10c>
   d5158:	f002 f8f0 	bl	d733c <spark_cloud_flag_connected>
        if (!connected()) {
   d515c:	b110      	cbz	r0, d5164 <loop+0x10c>
        return spark_sync_time(NULL);
   d515e:	2000      	movs	r0, #0
   d5160:	f002 f90c 	bl	d737c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d5164:	f7ff fc36 	bl	d49d4 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5168:	2306      	movs	r3, #6
   d516a:	e792      	b.n	d5092 <loop+0x3a>
        spark_cloud_flag_connect();
   d516c:	f002 f8de 	bl	d732c <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d5170:	2302      	movs	r3, #2
   d5172:	7023      	strb	r3, [r4, #0]
   d5174:	f001 fef4 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5178:	4b38      	ldr	r3, [pc, #224]	; (d525c <loop+0x204>)
   d517a:	6018      	str	r0, [r3, #0]
   d517c:	e78a      	b.n	d5094 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d517e:	4b2d      	ldr	r3, [pc, #180]	; (d5234 <loop+0x1dc>)
   d5180:	7a5b      	ldrb	r3, [r3, #9]
   d5182:	b12b      	cbz	r3, d5190 <loop+0x138>
   d5184:	4b2c      	ldr	r3, [pc, #176]	; (d5238 <loop+0x1e0>)
   d5186:	781b      	ldrb	r3, [r3, #0]
   d5188:	2b06      	cmp	r3, #6
   d518a:	d001      	beq.n	d5190 <loop+0x138>
   d518c:	f7ff fd26 	bl	d4bdc <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d5190:	4b33      	ldr	r3, [pc, #204]	; (d5260 <loop+0x208>)
   d5192:	781b      	ldrb	r3, [r3, #0]
   d5194:	b943      	cbnz	r3, d51a8 <loop+0x150>
   d5196:	f003 f9f2 	bl	d857e <_ZN9TimeClass3nowEv>
   d519a:	230a      	movs	r3, #10
   d519c:	fb90 f2f3 	sdiv	r2, r0, r3
   d51a0:	fb02 0313 	mls	r3, r2, r3, r0
   d51a4:	2b00      	cmp	r3, #0
   d51a6:	d0b9      	beq.n	d511c <loop+0xc4>
   d51a8:	f001 feda 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d51ac:	4b2d      	ldr	r3, [pc, #180]	; (d5264 <loop+0x20c>)
   d51ae:	681b      	ldr	r3, [r3, #0]
   d51b0:	1ac0      	subs	r0, r0, r3
   d51b2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d51b6:	4298      	cmp	r0, r3
   d51b8:	f67f af6c 	bls.w	d5094 <loop+0x3c>
   d51bc:	f001 fed0 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51c0:	4d26      	ldr	r5, [pc, #152]	; (d525c <loop+0x204>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d51c2:	4a29      	ldr	r2, [pc, #164]	; (d5268 <loop+0x210>)
      resetTimeStamp = millis();
   d51c4:	6028      	str	r0, [r5, #0]
   d51c6:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d51c8:	f88d 3000 	strb.w	r3, [sp]
   d51cc:	4b27      	ldr	r3, [pc, #156]	; (d526c <loop+0x214>)
   d51ce:	4928      	ldr	r1, [pc, #160]	; (d5270 <loop+0x218>)
   d51d0:	781b      	ldrb	r3, [r3, #0]
   d51d2:	4828      	ldr	r0, [pc, #160]	; (d5274 <loop+0x21c>)
   d51d4:	f7ff f8cc 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d51d8:	2301      	movs	r3, #1
   d51da:	7023      	strb	r3, [r4, #0]
   d51dc:	f001 fec0 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51e0:	6028      	str	r0, [r5, #0]
   d51e2:	e757      	b.n	d5094 <loop+0x3c>
    if (state != oldState) publishStateTransition();
   d51e4:	4b14      	ldr	r3, [pc, #80]	; (d5238 <loop+0x1e0>)
   d51e6:	781b      	ldrb	r3, [r3, #0]
   d51e8:	2b01      	cmp	r3, #1
   d51ea:	d001      	beq.n	d51f0 <loop+0x198>
   d51ec:	f7ff fcf6 	bl	d4bdc <_Z22publishStateTransitionv>
   d51f0:	f001 feb6 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d51f4:	4b19      	ldr	r3, [pc, #100]	; (d525c <loop+0x204>)
   d51f6:	681b      	ldr	r3, [r3, #0]
   d51f8:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d51fc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d5200:	4283      	cmp	r3, r0
   d5202:	f4bf af47 	bcs.w	d5094 <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5206:	f002 f899 	bl	d733c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d520a:	b148      	cbz	r0, d5220 <loop+0x1c8>
   d520c:	2300      	movs	r3, #0
   d520e:	f88d 3000 	strb.w	r3, [sp]
   d5212:	4b16      	ldr	r3, [pc, #88]	; (d526c <loop+0x214>)
   d5214:	4a18      	ldr	r2, [pc, #96]	; (d5278 <loop+0x220>)
   d5216:	781b      	ldrb	r3, [r3, #0]
   d5218:	4918      	ldr	r1, [pc, #96]	; (d527c <loop+0x224>)
   d521a:	4816      	ldr	r0, [pc, #88]	; (d5274 <loop+0x21c>)
   d521c:	f7ff f8a8 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d5220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5224:	f002 f99a 	bl	d755c <delay>
      System.reset();
   d5228:	f003 f82e 	bl	d8288 <_ZN11SystemClass5resetEv>
   d522c:	e732      	b.n	d5094 <loop+0x3c>
   d522e:	bf00      	nop
   d5230:	2003e5c5 	.word	0x2003e5c5
   d5234:	2003e5c8 	.word	0x2003e5c8
   d5238:	2003e404 	.word	0x2003e404
   d523c:	2003e444 	.word	0x2003e444
   d5240:	2003e5f9 	.word	0x2003e5f9
   d5244:	2003e5f8 	.word	0x2003e5f8
   d5248:	2003e3d8 	.word	0x2003e3d8
   d524c:	2003e504 	.word	0x2003e504
   d5250:	2003e478 	.word	0x2003e478
   d5254:	2003db36 	.word	0x2003db36
   d5258:	2003e460 	.word	0x2003e460
   d525c:	2003e440 	.word	0x2003e440
   d5260:	2003db37 	.word	0x2003db37
   d5264:	2003e5fc 	.word	0x2003e5fc
   d5268:	000dc45c 	.word	0x000dc45c
   d526c:	2003db15 	.word	0x2003db15
   d5270:	000dbc9d 	.word	0x000dbc9d
   d5274:	2003e408 	.word	0x2003e408
   d5278:	000dbcb6 	.word	0x000dbcb6
   d527c:	000dbcca 	.word	0x000dbcca

000d5280 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d5280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d5284:	4c44      	ldr	r4, [pc, #272]	; (d5398 <_Z11loadEmonlibv+0x118>)
   d5286:	f8df b13c 	ldr.w	fp, [pc, #316]	; d53c4 <_Z11loadEmonlibv+0x144>
   d528a:	6820      	ldr	r0, [r4, #0]
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d528c:	f8df a138 	ldr.w	sl, [pc, #312]	; d53c8 <_Z11loadEmonlibv+0x148>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d5290:	f8df 9138 	ldr.w	r9, [pc, #312]	; d53cc <_Z11loadEmonlibv+0x14c>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5294:	f8df 8138 	ldr.w	r8, [pc, #312]	; d53d0 <_Z11loadEmonlibv+0x150>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d5298:	4f40      	ldr	r7, [pc, #256]	; (d539c <_Z11loadEmonlibv+0x11c>)
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d529a:	4e41      	ldr	r6, [pc, #260]	; (d53a0 <_Z11loadEmonlibv+0x120>)
  emon[0].current(CT1_PIN,sensorConstants.sensorOneConstant);
   d529c:	4d41      	ldr	r5, [pc, #260]	; (d53a4 <_Z11loadEmonlibv+0x124>)
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d529e:	f003 fee1 	bl	d9064 <__aeabi_f2d>
   d52a2:	ec41 0b10 	vmov	d0, r0, r1
   d52a6:	f89b 1000 	ldrb.w	r1, [fp]
   d52aa:	483f      	ldr	r0, [pc, #252]	; (d53a8 <_Z11loadEmonlibv+0x128>)
   d52ac:	f000 fd24 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d52b0:	6860      	ldr	r0, [r4, #4]
   d52b2:	f003 fed7 	bl	d9064 <__aeabi_f2d>
   d52b6:	ec41 0b10 	vmov	d0, r0, r1
   d52ba:	f89a 1000 	ldrb.w	r1, [sl]
   d52be:	483b      	ldr	r0, [pc, #236]	; (d53ac <_Z11loadEmonlibv+0x12c>)
   d52c0:	f000 fd1a 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d52c4:	68a0      	ldr	r0, [r4, #8]
   d52c6:	f003 fecd 	bl	d9064 <__aeabi_f2d>
   d52ca:	ec41 0b10 	vmov	d0, r0, r1
   d52ce:	f899 1000 	ldrb.w	r1, [r9]
   d52d2:	4837      	ldr	r0, [pc, #220]	; (d53b0 <_Z11loadEmonlibv+0x130>)
   d52d4:	f000 fd10 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d52d8:	68e0      	ldr	r0, [r4, #12]
   d52da:	f003 fec3 	bl	d9064 <__aeabi_f2d>
   d52de:	ec41 0b10 	vmov	d0, r0, r1
   d52e2:	f898 1000 	ldrb.w	r1, [r8]
   d52e6:	4833      	ldr	r0, [pc, #204]	; (d53b4 <_Z11loadEmonlibv+0x134>)
   d52e8:	f000 fd06 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d52ec:	6920      	ldr	r0, [r4, #16]
   d52ee:	f003 feb9 	bl	d9064 <__aeabi_f2d>
   d52f2:	ec41 0b10 	vmov	d0, r0, r1
   d52f6:	7839      	ldrb	r1, [r7, #0]
   d52f8:	482f      	ldr	r0, [pc, #188]	; (d53b8 <_Z11loadEmonlibv+0x138>)
   d52fa:	f000 fcfd 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d52fe:	6960      	ldr	r0, [r4, #20]
   d5300:	f003 feb0 	bl	d9064 <__aeabi_f2d>
   d5304:	ec41 0b10 	vmov	d0, r0, r1
   d5308:	7831      	ldrb	r1, [r6, #0]
   d530a:	482c      	ldr	r0, [pc, #176]	; (d53bc <_Z11loadEmonlibv+0x13c>)
   d530c:	f000 fcf4 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[0].current(CT1_PIN,sensorConstants.sensorOneConstant);
   d5310:	6820      	ldr	r0, [r4, #0]
   d5312:	f003 fea7 	bl	d9064 <__aeabi_f2d>
   d5316:	ec41 0b10 	vmov	d0, r0, r1
   d531a:	f89b 1000 	ldrb.w	r1, [fp]
   d531e:	4628      	mov	r0, r5
   d5320:	f000 fcea 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[1].current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d5324:	6860      	ldr	r0, [r4, #4]
   d5326:	f003 fe9d 	bl	d9064 <__aeabi_f2d>
   d532a:	ec41 0b10 	vmov	d0, r0, r1
   d532e:	f89a 1000 	ldrb.w	r1, [sl]
   d5332:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   d5336:	f000 fcdf 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[2].current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d533a:	68a0      	ldr	r0, [r4, #8]
   d533c:	f003 fe92 	bl	d9064 <__aeabi_f2d>
   d5340:	ec41 0b10 	vmov	d0, r0, r1
   d5344:	f899 1000 	ldrb.w	r1, [r9]
   d5348:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   d534c:	f000 fcd4 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[3].current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5350:	68e0      	ldr	r0, [r4, #12]
   d5352:	f003 fe87 	bl	d9064 <__aeabi_f2d>
   d5356:	ec41 0b10 	vmov	d0, r0, r1
   d535a:	f898 1000 	ldrb.w	r1, [r8]
   d535e:	f505 700a 	add.w	r0, r5, #552	; 0x228
   d5362:	f000 fcc9 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[4].current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d5366:	6920      	ldr	r0, [r4, #16]
   d5368:	f003 fe7c 	bl	d9064 <__aeabi_f2d>
   d536c:	ec41 0b10 	vmov	d0, r0, r1
   d5370:	7839      	ldrb	r1, [r7, #0]
   d5372:	f505 7038 	add.w	r0, r5, #736	; 0x2e0
   d5376:	f000 fcbf 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  emon[5].current(CT6_PIN,sensorConstants.sensorSixConstant);
   d537a:	6960      	ldr	r0, [r4, #20]
   d537c:	f003 fe72 	bl	d9064 <__aeabi_f2d>
   d5380:	ec41 0b10 	vmov	d0, r0, r1
   d5384:	7831      	ldrb	r1, [r6, #0]
   d5386:	f505 7066 	add.w	r0, r5, #920	; 0x398
   d538a:	f000 fcb5 	bl	d5cf8 <_ZN13EnergyMonitor7currentEjd>
  constantsStatusWriteNeeded = true;
   d538e:	4b0c      	ldr	r3, [pc, #48]	; (d53c0 <_Z11loadEmonlibv+0x140>)
   d5390:	2201      	movs	r2, #1
   d5392:	701a      	strb	r2, [r3, #0]
}
   d5394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5398:	2003e460 	.word	0x2003e460
   d539c:	2003d80c 	.word	0x2003d80c
   d53a0:	2003d80d 	.word	0x2003d80d
   d53a4:	2003db38 	.word	0x2003db38
   d53a8:	2003df88 	.word	0x2003df88
   d53ac:	2003e040 	.word	0x2003e040
   d53b0:	2003e0f8 	.word	0x2003e0f8
   d53b4:	2003e1b0 	.word	0x2003e1b0
   d53b8:	2003e268 	.word	0x2003e268
   d53bc:	2003e320 	.word	0x2003e320
   d53c0:	2003db36 	.word	0x2003db36
   d53c4:	2003d808 	.word	0x2003d808
   d53c8:	2003d809 	.word	0x2003d809
   d53cc:	2003d80a 	.word	0x2003d80a
   d53d0:	2003d80b 	.word	0x2003d80b

000d53d4 <_Z20updateConstantValuesv>:
{   
   d53d4:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d53d6:	4c22      	ldr	r4, [pc, #136]	; (d5460 <_Z20updateConstantValuesv+0x8c>)
   d53d8:	6820      	ldr	r0, [r4, #0]
   d53da:	f003 fe43 	bl	d9064 <__aeabi_f2d>
   d53de:	4a21      	ldr	r2, [pc, #132]	; (d5464 <_Z20updateConstantValuesv+0x90>)
   d53e0:	e9cd 0100 	strd	r0, r1, [sp]
   d53e4:	2120      	movs	r1, #32
   d53e6:	4820      	ldr	r0, [pc, #128]	; (d5468 <_Z20updateConstantValuesv+0x94>)
   d53e8:	f002 f870 	bl	d74cc <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d53ec:	6860      	ldr	r0, [r4, #4]
   d53ee:	f003 fe39 	bl	d9064 <__aeabi_f2d>
   d53f2:	4a1e      	ldr	r2, [pc, #120]	; (d546c <_Z20updateConstantValuesv+0x98>)
   d53f4:	e9cd 0100 	strd	r0, r1, [sp]
   d53f8:	2120      	movs	r1, #32
   d53fa:	481d      	ldr	r0, [pc, #116]	; (d5470 <_Z20updateConstantValuesv+0x9c>)
   d53fc:	f002 f866 	bl	d74cc <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d5400:	68a0      	ldr	r0, [r4, #8]
   d5402:	f003 fe2f 	bl	d9064 <__aeabi_f2d>
   d5406:	4a1b      	ldr	r2, [pc, #108]	; (d5474 <_Z20updateConstantValuesv+0xa0>)
   d5408:	e9cd 0100 	strd	r0, r1, [sp]
   d540c:	2120      	movs	r1, #32
   d540e:	481a      	ldr	r0, [pc, #104]	; (d5478 <_Z20updateConstantValuesv+0xa4>)
   d5410:	f002 f85c 	bl	d74cc <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d5414:	68e0      	ldr	r0, [r4, #12]
   d5416:	f003 fe25 	bl	d9064 <__aeabi_f2d>
   d541a:	4a18      	ldr	r2, [pc, #96]	; (d547c <_Z20updateConstantValuesv+0xa8>)
   d541c:	e9cd 0100 	strd	r0, r1, [sp]
   d5420:	2120      	movs	r1, #32
   d5422:	4817      	ldr	r0, [pc, #92]	; (d5480 <_Z20updateConstantValuesv+0xac>)
   d5424:	f002 f852 	bl	d74cc <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d5428:	6920      	ldr	r0, [r4, #16]
   d542a:	f003 fe1b 	bl	d9064 <__aeabi_f2d>
   d542e:	4a15      	ldr	r2, [pc, #84]	; (d5484 <_Z20updateConstantValuesv+0xb0>)
   d5430:	e9cd 0100 	strd	r0, r1, [sp]
   d5434:	2120      	movs	r1, #32
   d5436:	4814      	ldr	r0, [pc, #80]	; (d5488 <_Z20updateConstantValuesv+0xb4>)
   d5438:	f002 f848 	bl	d74cc <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d543c:	6960      	ldr	r0, [r4, #20]
   d543e:	f003 fe11 	bl	d9064 <__aeabi_f2d>
   d5442:	4a12      	ldr	r2, [pc, #72]	; (d548c <_Z20updateConstantValuesv+0xb8>)
   d5444:	e9cd 0100 	strd	r0, r1, [sp]
   d5448:	2120      	movs	r1, #32
   d544a:	4811      	ldr	r0, [pc, #68]	; (d5490 <_Z20updateConstantValuesv+0xbc>)
   d544c:	f002 f83e 	bl	d74cc <snprintf>
    loadEmonlib();
   d5450:	f7ff ff16 	bl	d5280 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d5454:	4b0f      	ldr	r3, [pc, #60]	; (d5494 <_Z20updateConstantValuesv+0xc0>)
   d5456:	2201      	movs	r2, #1
   d5458:	701a      	strb	r2, [r3, #0]
} 
   d545a:	b002      	add	sp, #8
   d545c:	bd10      	pop	{r4, pc}
   d545e:	bf00      	nop
   d5460:	2003e460 	.word	0x2003e460
   d5464:	000dbcd0 	.word	0x000dbcd0
   d5468:	2003e545 	.word	0x2003e545
   d546c:	000dbcde 	.word	0x000dbcde
   d5470:	2003e5a5 	.word	0x2003e5a5
   d5474:	000dbceb 	.word	0x000dbceb
   d5478:	2003e585 	.word	0x2003e585
   d547c:	000dbcfb 	.word	0x000dbcfb
   d5480:	2003e525 	.word	0x2003e525
   d5484:	000dbd18 	.word	0x000dbd18
   d5488:	2003e505 	.word	0x2003e505
   d548c:	000dbd35 	.word	0x000dbd35
   d5490:	2003e565 	.word	0x2003e565
   d5494:	2003db36 	.word	0x2003db36

000d5498 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d5498:	b500      	push	{lr}
   d549a:	b089      	sub	sp, #36	; 0x24
   d549c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d549e:	f002 fed1 	bl	d8244 <_ZNK6String7toFloatEv>
   d54a2:	4b0d      	ldr	r3, [pc, #52]	; (d54d8 <_Z14setConstantOne6String+0x40>)
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d54a4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d54a6:	ed83 0a00 	vstr	s0, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d54aa:	a804      	add	r0, sp, #16
   d54ac:	f002 fe80 	bl	d81b0 <_ZN6StringC1ERKS_>
   d54b0:	2300      	movs	r3, #0
   d54b2:	f88d 3000 	strb.w	r3, [sp]
   d54b6:	4b09      	ldr	r3, [pc, #36]	; (d54dc <_Z14setConstantOne6String+0x44>)
   d54b8:	9a04      	ldr	r2, [sp, #16]
   d54ba:	781b      	ldrb	r3, [r3, #0]
   d54bc:	4908      	ldr	r1, [pc, #32]	; (d54e0 <_Z14setConstantOne6String+0x48>)
   d54be:	4809      	ldr	r0, [pc, #36]	; (d54e4 <_Z14setConstantOne6String+0x4c>)
   d54c0:	f7fe ff56 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d54c4:	a804      	add	r0, sp, #16
   d54c6:	f002 fe05 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d54ca:	f7ff ff83 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d54ce:	2001      	movs	r0, #1
   d54d0:	b009      	add	sp, #36	; 0x24
   d54d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d54d6:	bf00      	nop
   d54d8:	2003e460 	.word	0x2003e460
   d54dc:	2003db15 	.word	0x2003db15
   d54e0:	000dbd51 	.word	0x000dbd51
   d54e4:	2003e408 	.word	0x2003e408

000d54e8 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d54e8:	b500      	push	{lr}
   d54ea:	b089      	sub	sp, #36	; 0x24
   d54ec:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d54ee:	f002 fea9 	bl	d8244 <_ZNK6String7toFloatEv>
   d54f2:	4b0d      	ldr	r3, [pc, #52]	; (d5528 <_Z14setConstantTwo6String+0x40>)
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d54f4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d54f6:	ed83 0a01 	vstr	s0, [r3, #4]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d54fa:	a804      	add	r0, sp, #16
   d54fc:	f002 fe58 	bl	d81b0 <_ZN6StringC1ERKS_>
   d5500:	2300      	movs	r3, #0
   d5502:	f88d 3000 	strb.w	r3, [sp]
   d5506:	4b09      	ldr	r3, [pc, #36]	; (d552c <_Z14setConstantTwo6String+0x44>)
   d5508:	9a04      	ldr	r2, [sp, #16]
   d550a:	781b      	ldrb	r3, [r3, #0]
   d550c:	4908      	ldr	r1, [pc, #32]	; (d5530 <_Z14setConstantTwo6String+0x48>)
   d550e:	4809      	ldr	r0, [pc, #36]	; (d5534 <_Z14setConstantTwo6String+0x4c>)
   d5510:	f7fe ff2e 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5514:	a804      	add	r0, sp, #16
   d5516:	f002 fddd 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d551a:	f7ff ff5b 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d551e:	2001      	movs	r0, #1
   d5520:	b009      	add	sp, #36	; 0x24
   d5522:	f85d fb04 	ldr.w	pc, [sp], #4
   d5526:	bf00      	nop
   d5528:	2003e460 	.word	0x2003e460
   d552c:	2003db15 	.word	0x2003db15
   d5530:	000dbd6c 	.word	0x000dbd6c
   d5534:	2003e408 	.word	0x2003e408

000d5538 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5538:	b500      	push	{lr}
   d553a:	b089      	sub	sp, #36	; 0x24
   d553c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d553e:	f002 fe81 	bl	d8244 <_ZNK6String7toFloatEv>
   d5542:	4b0d      	ldr	r3, [pc, #52]	; (d5578 <_Z16setConstantThree6String+0x40>)
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5544:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5546:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d554a:	a804      	add	r0, sp, #16
   d554c:	f002 fe30 	bl	d81b0 <_ZN6StringC1ERKS_>
   d5550:	2300      	movs	r3, #0
   d5552:	f88d 3000 	strb.w	r3, [sp]
   d5556:	4b09      	ldr	r3, [pc, #36]	; (d557c <_Z16setConstantThree6String+0x44>)
   d5558:	9a04      	ldr	r2, [sp, #16]
   d555a:	781b      	ldrb	r3, [r3, #0]
   d555c:	4908      	ldr	r1, [pc, #32]	; (d5580 <_Z16setConstantThree6String+0x48>)
   d555e:	4809      	ldr	r0, [pc, #36]	; (d5584 <_Z16setConstantThree6String+0x4c>)
   d5560:	f7fe ff06 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5564:	a804      	add	r0, sp, #16
   d5566:	f002 fdb5 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d556a:	f7ff ff33 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d556e:	2001      	movs	r0, #1
   d5570:	b009      	add	sp, #36	; 0x24
   d5572:	f85d fb04 	ldr.w	pc, [sp], #4
   d5576:	bf00      	nop
   d5578:	2003e460 	.word	0x2003e460
   d557c:	2003db15 	.word	0x2003db15
   d5580:	000dbd87 	.word	0x000dbd87
   d5584:	2003e408 	.word	0x2003e408

000d5588 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d5588:	b500      	push	{lr}
   d558a:	b089      	sub	sp, #36	; 0x24
   d558c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d558e:	f002 fe59 	bl	d8244 <_ZNK6String7toFloatEv>
   d5592:	4b0d      	ldr	r3, [pc, #52]	; (d55c8 <_Z15setConstantFour6String+0x40>)
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d5594:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d5596:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d559a:	a804      	add	r0, sp, #16
   d559c:	f002 fe08 	bl	d81b0 <_ZN6StringC1ERKS_>
   d55a0:	2300      	movs	r3, #0
   d55a2:	f88d 3000 	strb.w	r3, [sp]
   d55a6:	4b09      	ldr	r3, [pc, #36]	; (d55cc <_Z15setConstantFour6String+0x44>)
   d55a8:	9a04      	ldr	r2, [sp, #16]
   d55aa:	781b      	ldrb	r3, [r3, #0]
   d55ac:	4908      	ldr	r1, [pc, #32]	; (d55d0 <_Z15setConstantFour6String+0x48>)
   d55ae:	4809      	ldr	r0, [pc, #36]	; (d55d4 <_Z15setConstantFour6String+0x4c>)
   d55b0:	f7fe fede 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d55b4:	a804      	add	r0, sp, #16
   d55b6:	f002 fd8d 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d55ba:	f7ff ff0b 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d55be:	2001      	movs	r0, #1
   d55c0:	b009      	add	sp, #36	; 0x24
   d55c2:	f85d fb04 	ldr.w	pc, [sp], #4
   d55c6:	bf00      	nop
   d55c8:	2003e460 	.word	0x2003e460
   d55cc:	2003db15 	.word	0x2003db15
   d55d0:	000dbda4 	.word	0x000dbda4
   d55d4:	2003e408 	.word	0x2003e408

000d55d8 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d55d8:	b500      	push	{lr}
   d55da:	b089      	sub	sp, #36	; 0x24
   d55dc:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d55de:	f002 fe31 	bl	d8244 <_ZNK6String7toFloatEv>
   d55e2:	4b0d      	ldr	r3, [pc, #52]	; (d5618 <_Z15setConstantFive6String+0x40>)
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d55e4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d55e6:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d55ea:	a804      	add	r0, sp, #16
   d55ec:	f002 fde0 	bl	d81b0 <_ZN6StringC1ERKS_>
   d55f0:	2300      	movs	r3, #0
   d55f2:	f88d 3000 	strb.w	r3, [sp]
   d55f6:	4b09      	ldr	r3, [pc, #36]	; (d561c <_Z15setConstantFive6String+0x44>)
   d55f8:	9a04      	ldr	r2, [sp, #16]
   d55fa:	781b      	ldrb	r3, [r3, #0]
   d55fc:	4908      	ldr	r1, [pc, #32]	; (d5620 <_Z15setConstantFive6String+0x48>)
   d55fe:	4809      	ldr	r0, [pc, #36]	; (d5624 <_Z15setConstantFive6String+0x4c>)
   d5600:	f7fe feb6 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5604:	a804      	add	r0, sp, #16
   d5606:	f002 fd65 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d560a:	f7ff fee3 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d560e:	2001      	movs	r0, #1
   d5610:	b009      	add	sp, #36	; 0x24
   d5612:	f85d fb04 	ldr.w	pc, [sp], #4
   d5616:	bf00      	nop
   d5618:	2003e460 	.word	0x2003e460
   d561c:	2003db15 	.word	0x2003db15
   d5620:	000dbdc0 	.word	0x000dbdc0
   d5624:	2003e408 	.word	0x2003e408

000d5628 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5628:	b500      	push	{lr}
   d562a:	b089      	sub	sp, #36	; 0x24
   d562c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d562e:	f002 fe09 	bl	d8244 <_ZNK6String7toFloatEv>
   d5632:	4b0d      	ldr	r3, [pc, #52]	; (d5668 <_Z14setConstantSix6String+0x40>)
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5634:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5636:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d563a:	a804      	add	r0, sp, #16
   d563c:	f002 fdb8 	bl	d81b0 <_ZN6StringC1ERKS_>
   d5640:	2300      	movs	r3, #0
   d5642:	f88d 3000 	strb.w	r3, [sp]
   d5646:	4b09      	ldr	r3, [pc, #36]	; (d566c <_Z14setConstantSix6String+0x44>)
   d5648:	9a04      	ldr	r2, [sp, #16]
   d564a:	781b      	ldrb	r3, [r3, #0]
   d564c:	4908      	ldr	r1, [pc, #32]	; (d5670 <_Z14setConstantSix6String+0x48>)
   d564e:	4809      	ldr	r0, [pc, #36]	; (d5674 <_Z14setConstantSix6String+0x4c>)
   d5650:	f7fe fe8e 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5654:	a804      	add	r0, sp, #16
   d5656:	f002 fd3d 	bl	d80d4 <_ZN6StringD1Ev>
  updateConstantValues();
   d565a:	f7ff febb 	bl	d53d4 <_Z20updateConstantValuesv>
}
   d565e:	2001      	movs	r0, #1
   d5660:	b009      	add	sp, #36	; 0x24
   d5662:	f85d fb04 	ldr.w	pc, [sp], #4
   d5666:	bf00      	nop
   d5668:	2003e460 	.word	0x2003e460
   d566c:	2003db15 	.word	0x2003db15
   d5670:	000dbddc 	.word	0x000dbddc
   d5674:	2003e408 	.word	0x2003e408

000d5678 <setup>:
void setup() {
   d5678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d567c:	2100      	movs	r1, #0
void setup() {
   d567e:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5680:	2008      	movs	r0, #8
   d5682:	f003 f9d7 	bl	d8a34 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d5686:	2101      	movs	r1, #1
   d5688:	2005      	movs	r0, #5
   d568a:	f003 f9d3 	bl	d8a34 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d568e:	f7ff f979 	bl	d4984 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d5692:	2300      	movs	r3, #0
   d5694:	9300      	str	r3, [sp, #0]
   d5696:	2201      	movs	r2, #1
   d5698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d569c:	49a6      	ldr	r1, [pc, #664]	; (d5938 <setup+0x2c0>)
   d569e:	2008      	movs	r0, #8
   d56a0:	f002 fb52 	bl	d7d48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d56a4:	4ba5      	ldr	r3, [pc, #660]	; (d593c <setup+0x2c4>)
   d56a6:	aa0a      	add	r2, sp, #40	; 0x28
   d56a8:	f103 0510 	add.w	r5, r3, #16
   d56ac:	4617      	mov	r7, r2
   d56ae:	6818      	ldr	r0, [r3, #0]
   d56b0:	6859      	ldr	r1, [r3, #4]
   d56b2:	4614      	mov	r4, r2
   d56b4:	c403      	stmia	r4!, {r0, r1}
   d56b6:	3308      	adds	r3, #8
   d56b8:	42ab      	cmp	r3, r5
   d56ba:	4622      	mov	r2, r4
   d56bc:	d1f7      	bne.n	d56ae <setup+0x36>
   d56be:	8819      	ldrh	r1, [r3, #0]
   d56c0:	789b      	ldrb	r3, [r3, #2]
   d56c2:	70a3      	strb	r3, [r4, #2]
   d56c4:	222d      	movs	r2, #45	; 0x2d
   d56c6:	8021      	strh	r1, [r4, #0]
   d56c8:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d56cc:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d56ce:	4c9c      	ldr	r4, [pc, #624]	; (d5940 <setup+0x2c8>)
   d56d0:	4d9c      	ldr	r5, [pc, #624]	; (d5944 <setup+0x2cc>)
   d56d2:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d56d4:	f004 f8d2 	bl	d987c <memset>
   d56d8:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d56da:	7026      	strb	r6, [r4, #0]
   d56dc:	f001 fe36 	bl	d734c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56e0:	a902      	add	r1, sp, #8
   d56e2:	a806      	add	r0, sp, #24
   d56e4:	f002 fd64 	bl	d81b0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d56e8:	4997      	ldr	r1, [pc, #604]	; (d5948 <setup+0x2d0>)
   d56ea:	a806      	add	r0, sp, #24
   d56ec:	f002 fd82 	bl	d81f4 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d56f0:	e9cd 6600 	strd	r6, r6, [sp]
   d56f4:	4633      	mov	r3, r6
   d56f6:	4632      	mov	r2, r6
   d56f8:	4994      	ldr	r1, [pc, #592]	; (d594c <setup+0x2d4>)
   d56fa:	6800      	ldr	r0, [r0, #0]
   d56fc:	f001 fe36 	bl	d736c <spark_subscribe>
class StringSumHelper : public String
   d5700:	a806      	add	r0, sp, #24
   d5702:	f002 fce7 	bl	d80d4 <_ZN6StringD1Ev>
   d5706:	a802      	add	r0, sp, #8
   d5708:	f002 fce4 	bl	d80d4 <_ZN6StringD1Ev>
        return _variable(varKey, var, STRING);
   d570c:	4990      	ldr	r1, [pc, #576]	; (d5950 <setup+0x2d8>)
   d570e:	4891      	ldr	r0, [pc, #580]	; (d5954 <setup+0x2dc>)
   d5710:	f7fe fd99 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5714:	4990      	ldr	r1, [pc, #576]	; (d5958 <setup+0x2e0>)
   d5716:	4891      	ldr	r0, [pc, #580]	; (d595c <setup+0x2e4>)
   d5718:	f7fe fd95 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d571c:	4990      	ldr	r1, [pc, #576]	; (d5960 <setup+0x2e8>)
   d571e:	4891      	ldr	r0, [pc, #580]	; (d5964 <setup+0x2ec>)
   d5720:	f7fe fd91 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5724:	4990      	ldr	r1, [pc, #576]	; (d5968 <setup+0x2f0>)
   d5726:	4891      	ldr	r0, [pc, #580]	; (d596c <setup+0x2f4>)
   d5728:	4633      	mov	r3, r6
   d572a:	2202      	movs	r2, #2
   d572c:	f001 fde6 	bl	d72fc <spark_variable>
   d5730:	4633      	mov	r3, r6
   d5732:	2201      	movs	r2, #1
   d5734:	498e      	ldr	r1, [pc, #568]	; (d5970 <setup+0x2f8>)
   d5736:	488f      	ldr	r0, [pc, #572]	; (d5974 <setup+0x2fc>)
   d5738:	f001 fde0 	bl	d72fc <spark_variable>
        return _variable(varKey, var, STRING);
   d573c:	498e      	ldr	r1, [pc, #568]	; (d5978 <setup+0x300>)
   d573e:	488f      	ldr	r0, [pc, #572]	; (d597c <setup+0x304>)
   d5740:	f7fe fd81 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5744:	498e      	ldr	r1, [pc, #568]	; (d5980 <setup+0x308>)
   d5746:	488f      	ldr	r0, [pc, #572]	; (d5984 <setup+0x30c>)
   d5748:	f7fe fd7d 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d574c:	498e      	ldr	r1, [pc, #568]	; (d5988 <setup+0x310>)
   d574e:	488f      	ldr	r0, [pc, #572]	; (d598c <setup+0x314>)
   d5750:	f7fe fd79 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5754:	498e      	ldr	r1, [pc, #568]	; (d5990 <setup+0x318>)
   d5756:	488f      	ldr	r0, [pc, #572]	; (d5994 <setup+0x31c>)
   d5758:	f7fe fd75 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d575c:	498e      	ldr	r1, [pc, #568]	; (d5998 <setup+0x320>)
   d575e:	488f      	ldr	r0, [pc, #572]	; (d599c <setup+0x324>)
   d5760:	f7fe fd71 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5764:	498e      	ldr	r1, [pc, #568]	; (d59a0 <setup+0x328>)
   d5766:	488f      	ldr	r0, [pc, #572]	; (d59a4 <setup+0x32c>)
   d5768:	f7fe fd6d 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d576c:	498e      	ldr	r1, [pc, #568]	; (d59a8 <setup+0x330>)
   d576e:	488f      	ldr	r0, [pc, #572]	; (d59ac <setup+0x334>)
   d5770:	4633      	mov	r3, r6
   d5772:	2202      	movs	r2, #2
   d5774:	f001 fdc2 	bl	d72fc <spark_variable>
   d5778:	4633      	mov	r3, r6
   d577a:	2202      	movs	r2, #2
   d577c:	498c      	ldr	r1, [pc, #560]	; (d59b0 <setup+0x338>)
   d577e:	488d      	ldr	r0, [pc, #564]	; (d59b4 <setup+0x33c>)
   d5780:	f001 fdbc 	bl	d72fc <spark_variable>
        return _function(name, args...);
   d5784:	498c      	ldr	r1, [pc, #560]	; (d59b8 <setup+0x340>)
   d5786:	488d      	ldr	r0, [pc, #564]	; (d59bc <setup+0x344>)
   d5788:	f7fe fdc8 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d578c:	498c      	ldr	r1, [pc, #560]	; (d59c0 <setup+0x348>)
   d578e:	488d      	ldr	r0, [pc, #564]	; (d59c4 <setup+0x34c>)
   d5790:	f7fe fdc4 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5794:	498c      	ldr	r1, [pc, #560]	; (d59c8 <setup+0x350>)
   d5796:	488d      	ldr	r0, [pc, #564]	; (d59cc <setup+0x354>)
   d5798:	f7fe fdc0 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d579c:	498c      	ldr	r1, [pc, #560]	; (d59d0 <setup+0x358>)
   d579e:	4875      	ldr	r0, [pc, #468]	; (d5974 <setup+0x2fc>)
   d57a0:	f7fe fdbc 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57a4:	498b      	ldr	r1, [pc, #556]	; (d59d4 <setup+0x35c>)
   d57a6:	488c      	ldr	r0, [pc, #560]	; (d59d8 <setup+0x360>)
   d57a8:	f7fe fdb8 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57ac:	498b      	ldr	r1, [pc, #556]	; (d59dc <setup+0x364>)
   d57ae:	488c      	ldr	r0, [pc, #560]	; (d59e0 <setup+0x368>)
   d57b0:	f7fe fdb4 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57b4:	498b      	ldr	r1, [pc, #556]	; (d59e4 <setup+0x36c>)
   d57b6:	488c      	ldr	r0, [pc, #560]	; (d59e8 <setup+0x370>)
   d57b8:	f7fe fdb0 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57bc:	498b      	ldr	r1, [pc, #556]	; (d59ec <setup+0x374>)
   d57be:	488c      	ldr	r0, [pc, #560]	; (d59f0 <setup+0x378>)
   d57c0:	f7fe fdac 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57c4:	498b      	ldr	r1, [pc, #556]	; (d59f4 <setup+0x37c>)
   d57c6:	488c      	ldr	r0, [pc, #560]	; (d59f8 <setup+0x380>)
   d57c8:	f7fe fda8 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57cc:	498b      	ldr	r1, [pc, #556]	; (d59fc <setup+0x384>)
   d57ce:	488c      	ldr	r0, [pc, #560]	; (d5a00 <setup+0x388>)
   d57d0:	f7fe fda4 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57d4:	498b      	ldr	r1, [pc, #556]	; (d5a04 <setup+0x38c>)
   d57d6:	488c      	ldr	r0, [pc, #560]	; (d5a08 <setup+0x390>)
   d57d8:	f7fe fda0 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57dc:	498b      	ldr	r1, [pc, #556]	; (d5a0c <setup+0x394>)
   d57de:	488c      	ldr	r0, [pc, #560]	; (d5a10 <setup+0x398>)
   d57e0:	f7fe fd9c 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57e4:	498b      	ldr	r1, [pc, #556]	; (d5a14 <setup+0x39c>)
   d57e6:	488c      	ldr	r0, [pc, #560]	; (d5a18 <setup+0x3a0>)
   d57e8:	f7fe fd98 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57ec:	498b      	ldr	r1, [pc, #556]	; (d5a1c <setup+0x3a4>)
   d57ee:	488c      	ldr	r0, [pc, #560]	; (d5a20 <setup+0x3a8>)
   d57f0:	f7fe fd94 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d57f4:	498b      	ldr	r1, [pc, #556]	; (d5a24 <setup+0x3ac>)
   d57f6:	488c      	ldr	r0, [pc, #560]	; (d5a28 <setup+0x3b0>)
   d57f8:	f7fe fd90 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d57fc:	488b      	ldr	r0, [pc, #556]	; (d5a2c <setup+0x3b4>)
   d57fe:	f000 fe83 	bl	d6508 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5802:	4631      	mov	r1, r6
   d5804:	4889      	ldr	r0, [pc, #548]	; (d5a2c <setup+0x3b4>)
   d5806:	f000 ffbc 	bl	d6782 <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d580a:	4889      	ldr	r0, [pc, #548]	; (d5a30 <setup+0x3b8>)
   d580c:	f000 fb18 	bl	d5e40 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5810:	2301      	movs	r3, #1
   d5812:	4887      	ldr	r0, [pc, #540]	; (d5a30 <setup+0x3b8>)
   d5814:	aa06      	add	r2, sp, #24
   d5816:	4631      	mov	r1, r6
   d5818:	f000 fb54 	bl	d5ec4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d581c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5820:	2b16      	cmp	r3, #22
   d5822:	d045      	beq.n	d58b0 <setup+0x238>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d5824:	4882      	ldr	r0, [pc, #520]	; (d5a30 <setup+0x3b8>)
   d5826:	f000 fb15 	bl	d5e54 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d582a:	4a82      	ldr	r2, [pc, #520]	; (d5a34 <setup+0x3bc>)
   d582c:	4880      	ldr	r0, [pc, #512]	; (d5a30 <setup+0x3b8>)
   d582e:	2304      	movs	r3, #4
   d5830:	4631      	mov	r1, r6
   d5832:	f000 fb92 	bl	d5f5a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5836:	2301      	movs	r3, #1
   d5838:	487d      	ldr	r0, [pc, #500]	; (d5a30 <setup+0x3b8>)
   d583a:	aa06      	add	r2, sp, #24
   d583c:	4631      	mov	r1, r6
   d583e:	f000 fb41 	bl	d5ec4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d5842:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5846:	2b16      	cmp	r3, #22
   d5848:	d024      	beq.n	d5894 <setup+0x21c>
   d584a:	2301      	movs	r3, #1
   d584c:	7023      	strb	r3, [r4, #0]
  checkConstantValues();
   d584e:	f7ff f829 	bl	d48a4 <_Z19checkConstantValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5852:	f7fe fff7 	bl	d4844 <_Z17checkSystemValuesv>
  loadEmonlib();
   d5856:	f7ff fd13 	bl	d5280 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d585a:	786b      	ldrb	r3, [r5, #1]
   d585c:	2b00      	cmp	r3, #0
   d585e:	d04b      	beq.n	d58f8 <setup+0x280>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d5860:	2000      	movs	r0, #0
   d5862:	f001 fb8d 	bl	d6f80 <hal_timer_millis>
   d5866:	f04f 0a00 	mov.w	sl, #0
   d586a:	4606      	mov	r6, r0
   d586c:	2000      	movs	r0, #0
   d586e:	f001 fb87 	bl	d6f80 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5872:	ebb0 0806 	subs.w	r8, r0, r6
   d5876:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d587a:	2300      	movs	r3, #0
   d587c:	f247 522f 	movw	r2, #29999	; 0x752f
   d5880:	454b      	cmp	r3, r9
   d5882:	bf08      	it	eq
   d5884:	4542      	cmpeq	r2, r8
   d5886:	d329      	bcc.n	d58dc <setup+0x264>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5888:	f001 fd58 	bl	d733c <spark_cloud_flag_connected>
   d588c:	bb30      	cbnz	r0, d58dc <setup+0x264>
            spark_process();
   d588e:	f001 fd45 	bl	d731c <spark_process>
        while (_while() && !_condition()) {
   d5892:	e7eb      	b.n	d586c <setup+0x1f4>
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d5894:	4b68      	ldr	r3, [pc, #416]	; (d5a38 <setup+0x3c0>)
   d5896:	f88d 6000 	strb.w	r6, [sp]
   d589a:	781b      	ldrb	r3, [r3, #0]
   d589c:	4a67      	ldr	r2, [pc, #412]	; (d5a3c <setup+0x3c4>)
   d589e:	4968      	ldr	r1, [pc, #416]	; (d5a40 <setup+0x3c8>)
   d58a0:	4868      	ldr	r0, [pc, #416]	; (d5a44 <setup+0x3cc>)
   d58a2:	f7fe fd65 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d58a6:	f7fe ff6b 	bl	d4780 <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d58aa:	f7fe ff9b 	bl	d47e4 <_Z20loadConstantDefaultsv>
   d58ae:	e7ce      	b.n	d584e <setup+0x1d6>
    publishQueue.publish("Loading From FRAM","Setup Loop",PRIVATE);
   d58b0:	4b61      	ldr	r3, [pc, #388]	; (d5a38 <setup+0x3c0>)
   d58b2:	f88d 6000 	strb.w	r6, [sp]
   d58b6:	781b      	ldrb	r3, [r3, #0]
   d58b8:	4a60      	ldr	r2, [pc, #384]	; (d5a3c <setup+0x3c4>)
   d58ba:	4963      	ldr	r1, [pc, #396]	; (d5a48 <setup+0x3d0>)
   d58bc:	4861      	ldr	r0, [pc, #388]	; (d5a44 <setup+0x3cc>)
   d58be:	f7fe fd57 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d58c2:	4a62      	ldr	r2, [pc, #392]	; (d5a4c <setup+0x3d4>)
   d58c4:	485a      	ldr	r0, [pc, #360]	; (d5a30 <setup+0x3b8>)
   d58c6:	2318      	movs	r3, #24
   d58c8:	21a0      	movs	r1, #160	; 0xa0
   d58ca:	f000 fafb 	bl	d5ec4 <_ZN6MB85RC8readDataEjPhj>
   d58ce:	2330      	movs	r3, #48	; 0x30
   d58d0:	462a      	mov	r2, r5
   d58d2:	2101      	movs	r1, #1
   d58d4:	4856      	ldr	r0, [pc, #344]	; (d5a30 <setup+0x3b8>)
   d58d6:	f000 faf5 	bl	d5ec4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d58da:	e7b8      	b.n	d584e <setup+0x1d6>
   d58dc:	f001 fd2e 	bl	d733c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d58e0:	6868      	ldr	r0, [r5, #4]
   d58e2:	f7fe fd21 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d58e6:	686b      	ldr	r3, [r5, #4]
   d58e8:	4859      	ldr	r0, [pc, #356]	; (d5a50 <setup+0x3d8>)
   d58ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d58ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d58f2:	4359      	muls	r1, r3
   d58f4:	f7fe fd2b 	bl	d434e <_ZN5Timer12changePeriodEjj>
  updateConstantValues();
   d58f8:	f7ff fd6c 	bl	d53d4 <_Z20updateConstantValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d58fc:	f7ff fa14 	bl	d4d28 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d5900:	7a6b      	ldrb	r3, [r5, #9]
   d5902:	b14b      	cbz	r3, d5918 <setup+0x2a0>
   d5904:	2300      	movs	r3, #0
   d5906:	f88d 3000 	strb.w	r3, [sp]
   d590a:	4b4b      	ldr	r3, [pc, #300]	; (d5a38 <setup+0x3c0>)
   d590c:	4951      	ldr	r1, [pc, #324]	; (d5a54 <setup+0x3dc>)
   d590e:	781b      	ldrb	r3, [r3, #0]
   d5910:	484c      	ldr	r0, [pc, #304]	; (d5a44 <setup+0x3cc>)
   d5912:	463a      	mov	r2, r7
   d5914:	f7fe fd2c 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5918:	f001 fd10 	bl	d733c <spark_cloud_flag_connected>
   d591c:	b910      	cbnz	r0, d5924 <setup+0x2ac>
            spark_process();
   d591e:	f001 fcfd 	bl	d731c <spark_process>
        while (_while() && !_condition()) {
   d5922:	e7f9      	b.n	d5918 <setup+0x2a0>
   d5924:	f001 fd0a 	bl	d733c <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d5928:	7823      	ldrb	r3, [r4, #0]
   d592a:	b90b      	cbnz	r3, d5930 <setup+0x2b8>
   d592c:	2302      	movs	r3, #2
   d592e:	7023      	strb	r3, [r4, #0]
}
   d5930:	b01a      	add	sp, #104	; 0x68
   d5932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5936:	bf00      	nop
   d5938:	000d40c9 	.word	0x000d40c9
   d593c:	000dbff0 	.word	0x000dbff0
   d5940:	2003e5c5 	.word	0x2003e5c5
   d5944:	2003e5c8 	.word	0x2003e5c8
   d5948:	000dbdf7 	.word	0x000dbdf7
   d594c:	000d438d 	.word	0x000d438d
   d5950:	000dc030 	.word	0x000dc030
   d5954:	000dbe1c 	.word	0x000dbe1c
   d5958:	2003db26 	.word	0x2003db26
   d595c:	000dbe24 	.word	0x000dbe24
   d5960:	2003db16 	.word	0x2003db16
   d5964:	000dbe2c 	.word	0x000dbe2c
   d5968:	2003e5cc 	.word	0x2003e5cc
   d596c:	000dbe3b 	.word	0x000dbe3b
   d5970:	2003e5c9 	.word	0x2003e5c9
   d5974:	000db7e8 	.word	0x000db7e8
   d5978:	2003e545 	.word	0x2003e545
   d597c:	000dbe89 	.word	0x000dbe89
   d5980:	2003e5a5 	.word	0x2003e5a5
   d5984:	000dbe9a 	.word	0x000dbe9a
   d5988:	2003e585 	.word	0x2003e585
   d598c:	000dbeab 	.word	0x000dbeab
   d5990:	2003e525 	.word	0x2003e525
   d5994:	000dbebe 	.word	0x000dbebe
   d5998:	2003e505 	.word	0x2003e505
   d599c:	000dbed0 	.word	0x000dbed0
   d59a0:	2003e565 	.word	0x2003e565
   d59a4:	000dbee2 	.word	0x000dbee2
   d59a8:	2003e5ec 	.word	0x2003e5ec
   d59ac:	000dbe4a 	.word	0x000dbe4a
   d59b0:	2003e5f0 	.word	0x2003e5f0
   d59b4:	000dbe5d 	.word	0x000dbe5d
   d59b8:	000d40f1 	.word	0x000d40f1
   d59bc:	000dbe6c 	.word	0x000dbe6c
   d59c0:	000d4591 	.word	0x000d4591
   d59c4:	000dbe78 	.word	0x000dbe78
   d59c8:	000d44bd 	.word	0x000d44bd
   d59cc:	000db825 	.word	0x000db825
   d59d0:	000d4421 	.word	0x000d4421
   d59d4:	000d5499 	.word	0x000d5499
   d59d8:	000dbe85 	.word	0x000dbe85
   d59dc:	000d54e9 	.word	0x000d54e9
   d59e0:	000dbe96 	.word	0x000dbe96
   d59e4:	000d5539 	.word	0x000d5539
   d59e8:	000dbea7 	.word	0x000dbea7
   d59ec:	000d5589 	.word	0x000d5589
   d59f0:	000dbeba 	.word	0x000dbeba
   d59f4:	000d55d9 	.word	0x000d55d9
   d59f8:	000dbecc 	.word	0x000dbecc
   d59fc:	000d5629 	.word	0x000d5629
   d5a00:	000dbede 	.word	0x000dbede
   d5a04:	000d410d 	.word	0x000d410d
   d5a08:	000dbeef 	.word	0x000dbeef
   d5a0c:	000d4611 	.word	0x000d4611
   d5a10:	000dbefd 	.word	0x000dbefd
   d5a14:	000d46d1 	.word	0x000d46d1
   d5a18:	000dbf0c 	.word	0x000dbf0c
   d5a1c:	000d4539 	.word	0x000d4539
   d5a20:	000dbf1b 	.word	0x000dbf1b
   d5a24:	000d4731 	.word	0x000d4731
   d5a28:	000dbf37 	.word	0x000dbf37
   d5a2c:	2003e444 	.word	0x2003e444
   d5a30:	2003e3d8 	.word	0x2003e3d8
   d5a34:	000dc038 	.word	0x000dc038
   d5a38:	2003db15 	.word	0x2003db15
   d5a3c:	000dbf45 	.word	0x000dbf45
   d5a40:	000dbf50 	.word	0x000dbf50
   d5a44:	2003e408 	.word	0x2003e408
   d5a48:	000dbf61 	.word	0x000dbf61
   d5a4c:	2003e460 	.word	0x2003e460
   d5a50:	2003e3e8 	.word	0x2003e3e8
   d5a54:	000dbf73 	.word	0x000dbf73

000d5a58 <_GLOBAL__sub_I___appProductID>:
   d5a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d5a5c:	4b53      	ldr	r3, [pc, #332]	; (d5bac <_GLOBAL__sub_I___appProductID+0x154>)
              error_(SYSTEM_ERROR_NONE) {
   d5a5e:	4d54      	ldr	r5, [pc, #336]	; (d5bb0 <_GLOBAL__sub_I___appProductID+0x158>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5a60:	4f54      	ldr	r7, [pc, #336]	; (d5bb4 <_GLOBAL__sub_I___appProductID+0x15c>)
   d5a62:	2601      	movs	r6, #1
   d5a64:	701e      	strb	r6, [r3, #0]
   d5a66:	4b54      	ldr	r3, [pc, #336]	; (d5bb8 <_GLOBAL__sub_I___appProductID+0x160>)
   d5a68:	2202      	movs	r2, #2
   d5a6a:	b088      	sub	sp, #32
   d5a6c:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5a6e:	f002 ff8b 	bl	d8988 <spark_protocol_instance>
   d5a72:	2300      	movs	r3, #0
   d5a74:	461a      	mov	r2, r3
   d5a76:	f642 51d6 	movw	r1, #11734	; 0x2dd6
   d5a7a:	f002 ff8d 	bl	d8998 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5a7e:	f002 ff83 	bl	d8988 <spark_protocol_instance>
   d5a82:	2300      	movs	r3, #0
   d5a84:	461a      	mov	r2, r3
   d5a86:	210a      	movs	r1, #10
   d5a88:	2400      	movs	r4, #0
   d5a8a:	f002 ff8d 	bl	d89a8 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5a8e:	4b4b      	ldr	r3, [pc, #300]	; (d5bbc <_GLOBAL__sub_I___appProductID+0x164>)
   d5a90:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5a92:	602c      	str	r4, [r5, #0]
   d5a94:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5a96:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5a98:	4630      	mov	r0, r6
   d5a9a:	f001 fbd9 	bl	d7250 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5a9e:	463a      	mov	r2, r7
   d5aa0:	4947      	ldr	r1, [pc, #284]	; (d5bc0 <_GLOBAL__sub_I___appProductID+0x168>)
   d5aa2:	4628      	mov	r0, r5
   d5aa4:	f003 f848 	bl	d8b38 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5aa8:	4621      	mov	r1, r4
   d5aaa:	4630      	mov	r0, r6
   d5aac:	f001 fbe0 	bl	d7270 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5ab0:	4631      	mov	r1, r6
   d5ab2:	2004      	movs	r0, #4
   d5ab4:	f001 fa34 	bl	d6f20 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d5ab8:	f003 f816 	bl	d8ae8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5abc:	4d41      	ldr	r5, [pc, #260]	; (d5bc4 <_GLOBAL__sub_I___appProductID+0x16c>)
   d5abe:	4601      	mov	r1, r0
   d5ac0:	4623      	mov	r3, r4
   d5ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5ac6:	4628      	mov	r0, r5
   d5ac8:	f000 f9b0 	bl	d5e2c <_ZN6MB85RCC1ER7TwoWireji>
   d5acc:	4b3e      	ldr	r3, [pc, #248]	; (d5bc8 <_GLOBAL__sub_I___appProductID+0x170>)
   d5ace:	602b      	str	r3, [r5, #0]
   d5ad0:	463a      	mov	r2, r7
   d5ad2:	493e      	ldr	r1, [pc, #248]	; (d5bcc <_GLOBAL__sub_I___appProductID+0x174>)
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	f003 f82f 	bl	d8b38 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5ada:	f003 f805 	bl	d8ae8 <_Z19__fetch_global_Wirev>
   d5ade:	4d3c      	ldr	r5, [pc, #240]	; (d5bd0 <_GLOBAL__sub_I___appProductID+0x178>)
   d5ae0:	4601      	mov	r1, r0
   d5ae2:	4628      	mov	r0, r5
   d5ae4:	f000 fc18 	bl	d6318 <_ZN8MCP79410C1ER7TwoWire>
   d5ae8:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5aea:	4d3a      	ldr	r5, [pc, #232]	; (d5bd4 <_GLOBAL__sub_I___appProductID+0x17c>)
   d5aec:	493a      	ldr	r1, [pc, #232]	; (d5bd8 <_GLOBAL__sub_I___appProductID+0x180>)
   d5aee:	463a      	mov	r2, r7
   d5af0:	f003 f822 	bl	d8b38 <__aeabi_atexit>
   d5af4:	4939      	ldr	r1, [pc, #228]	; (d5bdc <_GLOBAL__sub_I___appProductID+0x184>)
   d5af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5afa:	4628      	mov	r0, r5
   d5afc:	f001 f882 	bl	d6c04 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5b00:	4b37      	ldr	r3, [pc, #220]	; (d5be0 <_GLOBAL__sub_I___appProductID+0x188>)
   d5b02:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5b04:	463a      	mov	r2, r7
   d5b06:	4937      	ldr	r1, [pc, #220]	; (d5be4 <_GLOBAL__sub_I___appProductID+0x18c>)
   d5b08:	4628      	mov	r0, r5
   d5b0a:	f003 f815 	bl	d8b38 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5b0e:	4b36      	ldr	r3, [pc, #216]	; (d5be8 <_GLOBAL__sub_I___appProductID+0x190>)
   d5b10:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b12:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5b16:	4d35      	ldr	r5, [pc, #212]	; (d5bec <_GLOBAL__sub_I___appProductID+0x194>)
   d5b18:	4b35      	ldr	r3, [pc, #212]	; (d5bf0 <_GLOBAL__sub_I___appProductID+0x198>)
   d5b1a:	602b      	str	r3, [r5, #0]
   d5b1c:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5b20:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5b22:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b26:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b2e:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b32:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5b36:	e883 0003 	stmia.w	r3, {r0, r1}
   d5b3a:	4b2e      	ldr	r3, [pc, #184]	; (d5bf4 <_GLOBAL__sub_I___appProductID+0x19c>)
   d5b3c:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5b3e:	69ab      	ldr	r3, [r5, #24]
   d5b40:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b42:	4b2d      	ldr	r3, [pc, #180]	; (d5bf8 <_GLOBAL__sub_I___appProductID+0x1a0>)
   d5b44:	712c      	strb	r4, [r5, #4]
   d5b46:	60ac      	str	r4, [r5, #8]
   d5b48:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5b4a:	4a2c      	ldr	r2, [pc, #176]	; (d5bfc <_GLOBAL__sub_I___appProductID+0x1a4>)
      __a = _GLIBCXX_MOVE(__b);
   d5b4c:	9406      	str	r4, [sp, #24]
   d5b4e:	462b      	mov	r3, r5
   d5b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5b54:	e9cd 4400 	strd	r4, r4, [sp]
   d5b58:	f105 0008 	add.w	r0, r5, #8
   d5b5c:	f001 f988 	bl	d6e70 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5b60:	4640      	mov	r0, r8
   d5b62:	f7fe fb9d 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d5b66:	463a      	mov	r2, r7
   d5b68:	4925      	ldr	r1, [pc, #148]	; (d5c00 <_GLOBAL__sub_I___appProductID+0x1a8>)
   d5b6a:	4628      	mov	r0, r5
   d5b6c:	f002 ffe4 	bl	d8b38 <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5b70:	4d24      	ldr	r5, [pc, #144]	; (d5c04 <_GLOBAL__sub_I___appProductID+0x1ac>)
struct systemStatus_structure {                     
   d5b72:	4b25      	ldr	r3, [pc, #148]	; (d5c08 <_GLOBAL__sub_I___appProductID+0x1b0>)
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5b74:	63ac      	str	r4, [r5, #56]	; 0x38
struct systemStatus_structure {                     
   d5b76:	629e      	str	r6, [r3, #40]	; 0x28
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5b78:	4621      	mov	r1, r4
   d5b7a:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
   d5b7e:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
   d5b82:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d5b86:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d5b8a:	646c      	str	r4, [r5, #68]	; 0x44
   d5b8c:	652c      	str	r4, [r5, #80]	; 0x50
   d5b8e:	65ec      	str	r4, [r5, #92]	; 0x5c
   d5b90:	2210      	movs	r2, #16
   d5b92:	f105 0060 	add.w	r0, r5, #96	; 0x60
   d5b96:	f003 fe71 	bl	d987c <memset>
   d5b9a:	2210      	movs	r2, #16
   d5b9c:	4621      	mov	r1, r4
   d5b9e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   d5ba2:	f003 fe6b 	bl	d987c <memset>
   d5ba6:	b008      	add	sp, #32
   d5ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5bac:	2003db15 	.word	0x2003db15
   d5bb0:	2003db08 	.word	0x2003db08
   d5bb4:	2003dac8 	.word	0x2003dac8
   d5bb8:	2003db14 	.word	0x2003db14
   d5bbc:	ffff0000 	.word	0xffff0000
   d5bc0:	000d4237 	.word	0x000d4237
   d5bc4:	2003e3d8 	.word	0x2003e3d8
   d5bc8:	000dbfc0 	.word	0x000dbfc0
   d5bcc:	000d41d5 	.word	0x000d41d5
   d5bd0:	2003e444 	.word	0x2003e444
   d5bd4:	2003e408 	.word	0x2003e408
   d5bd8:	000d60a3 	.word	0x000d60a3
   d5bdc:	2003f400 	.word	0x2003f400
   d5be0:	000dbf98 	.word	0x000dbf98
   d5be4:	000d41ad 	.word	0x000d41ad
   d5be8:	000d4251 	.word	0x000d4251
   d5bec:	2003e3e8 	.word	0x2003e3e8
   d5bf0:	000dbf84 	.word	0x000dbf84
   d5bf4:	000d40d9 	.word	0x000d40d9
   d5bf8:	000d40d5 	.word	0x000d40d5
   d5bfc:	000d41fd 	.word	0x000d41fd
   d5c00:	000d42b5 	.word	0x000d42b5
   d5c04:	2003e478 	.word	0x2003e478
   d5c08:	2003e5c8 	.word	0x2003e5c8
   d5c0c:	00000000 	.word	0x00000000

000d5c10 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5c10:	b082      	sub	sp, #8
   d5c12:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c16:	a90a      	add	r1, sp, #40	; 0x28
   d5c18:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d5c1c:	4b34      	ldr	r3, [pc, #208]	; (d5cf0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5c1e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d5cf4 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d5c22:	2200      	movs	r2, #0
   d5c24:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5c28:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d5c2a:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5c2e:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d5c32:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d5c36:	f002 ff27 	bl	d8a88 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5c3a:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d5c3e:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5c40:	f003 f9fe 	bl	d9040 <__aeabi_i2d>
   d5c44:	4642      	mov	r2, r8
   d5c46:	464b      	mov	r3, r9
   d5c48:	4606      	mov	r6, r0
   d5c4a:	460f      	mov	r7, r1
   d5c4c:	f003 f8aa 	bl	d8da4 <__aeabi_dsub>
   d5c50:	4652      	mov	r2, sl
   d5c52:	465b      	mov	r3, fp
   d5c54:	f003 fa5e 	bl	d9114 <__aeabi_dmul>
   d5c58:	4642      	mov	r2, r8
   d5c5a:	464b      	mov	r3, r9
   d5c5c:	f003 f8a4 	bl	d8da8 <__adddf3>
   d5c60:	4602      	mov	r2, r0
   d5c62:	460b      	mov	r3, r1
   d5c64:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d5c68:	4630      	mov	r0, r6
   d5c6a:	4639      	mov	r1, r7
   d5c6c:	f003 f89a 	bl	d8da4 <__aeabi_dsub>
   d5c70:	4602      	mov	r2, r0
   d5c72:	460b      	mov	r3, r1
   d5c74:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5c78:	f003 fa4c 	bl	d9114 <__aeabi_dmul>
   d5c7c:	4602      	mov	r2, r0
   d5c7e:	460b      	mov	r3, r1
   d5c80:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d5c84:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d5c88:	f003 f88e 	bl	d8da8 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d5c8c:	3d01      	subs	r5, #1
    sumI += sqI;
   d5c8e:	4606      	mov	r6, r0
   d5c90:	460f      	mov	r7, r1
   d5c92:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d5c96:	d1cc      	bne.n	d5c32 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d5c9c:	a310      	add	r3, pc, #64	; (adr r3, d5ce0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d5c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ca2:	f003 fa37 	bl	d9114 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5ca6:	a310      	add	r3, pc, #64	; (adr r3, d5ce8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d5ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5cac:	4680      	mov	r8, r0
   d5cae:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5cb0:	4630      	mov	r0, r6
   d5cb2:	4639      	mov	r1, r7
   d5cb4:	f003 fb58 	bl	d9368 <__aeabi_ddiv>
   d5cb8:	ec41 0b10 	vmov	d0, r0, r1
   d5cbc:	f002 ff4a 	bl	d8b54 <sqrt>

  //Reset accumulators
  sumI = 0;
   d5cc0:	2200      	movs	r2, #0
   d5cc2:	2300      	movs	r3, #0
   d5cc4:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5cc8:	ec51 0b10 	vmov	r0, r1, d0
   d5ccc:	4642      	mov	r2, r8
   d5cce:	464b      	mov	r3, r9
   d5cd0:	f003 fa20 	bl	d9114 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d5cd4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cd8:	ec41 0b10 	vmov	d0, r0, r1
   d5cdc:	b002      	add	sp, #8
   d5cde:	4770      	bx	lr
   d5ce0:	66666666 	.word	0x66666666
   d5ce4:	3f4a6666 	.word	0x3f4a6666
   d5ce8:	00000000 	.word	0x00000000
   d5cec:	4099f800 	.word	0x4099f800
   d5cf0:	40a00000 	.word	0x40a00000
   d5cf4:	3f300000 	.word	0x3f300000

000d5cf8 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d5cf8:	4b03      	ldr	r3, [pc, #12]	; (d5d08 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d5cfa:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d5cfc:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d5cfe:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5d02:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d5d06:	4770      	bx	lr
   d5d08:	40a00000 	.word	0x40a00000
   d5d0c:	00000000 	.word	0x00000000

000d5d10 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5d14:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5de0 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5d18:	9101      	str	r1, [sp, #4]
   d5d1a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d1c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5d1e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d22:	9b01      	ldr	r3, [sp, #4]
   d5d24:	429d      	cmp	r5, r3
   d5d26:	d02f      	beq.n	d5d88 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5d28:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d5d2a:	f002 fead 	bl	d8a88 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5d2e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5d32:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5d34:	f003 f984 	bl	d9040 <__aeabi_i2d>
   d5d38:	4642      	mov	r2, r8
   d5d3a:	464b      	mov	r3, r9
   d5d3c:	4606      	mov	r6, r0
   d5d3e:	460f      	mov	r7, r1
   d5d40:	f003 f830 	bl	d8da4 <__aeabi_dsub>
   d5d44:	4652      	mov	r2, sl
   d5d46:	465b      	mov	r3, fp
   d5d48:	f003 f9e4 	bl	d9114 <__aeabi_dmul>
   d5d4c:	4642      	mov	r2, r8
   d5d4e:	464b      	mov	r3, r9
   d5d50:	f003 f82a 	bl	d8da8 <__adddf3>
   d5d54:	4602      	mov	r2, r0
   d5d56:	460b      	mov	r3, r1
   d5d58:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d5d5c:	4630      	mov	r0, r6
   d5d5e:	4639      	mov	r1, r7
   d5d60:	f003 f820 	bl	d8da4 <__aeabi_dsub>
   d5d64:	4602      	mov	r2, r0
   d5d66:	460b      	mov	r3, r1
   d5d68:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5d6c:	f003 f9d2 	bl	d9114 <__aeabi_dmul>
   d5d70:	4602      	mov	r2, r0
   d5d72:	460b      	mov	r3, r1
   d5d74:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d5d78:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5d7c:	f003 f814 	bl	d8da8 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d80:	3501      	adds	r5, #1
    sumI += sqI;
   d5d82:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d86:	e7cc      	b.n	d5d22 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5d88:	a313      	add	r3, pc, #76	; (adr r3, d5dd8 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d5d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d8e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d5d92:	f003 f9bf 	bl	d9114 <__aeabi_dmul>
   d5d96:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5d98:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5d9a:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5d9c:	f003 f940 	bl	d9020 <__aeabi_ui2d>
   d5da0:	4602      	mov	r2, r0
   d5da2:	460b      	mov	r3, r1
   d5da4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5da8:	f003 fade 	bl	d9368 <__aeabi_ddiv>
   d5dac:	ec41 0b10 	vmov	d0, r0, r1
   d5db0:	f002 fed0 	bl	d8b54 <sqrt>
   d5db4:	4632      	mov	r2, r6
   d5db6:	463b      	mov	r3, r7
   d5db8:	ec51 0b10 	vmov	r0, r1, d0
   d5dbc:	f003 f9aa 	bl	d9114 <__aeabi_dmul>
   d5dc0:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5dc8:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d5dcc:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d5dd0:	b003      	add	sp, #12
   d5dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5dd6:	bf00      	nop
   d5dd8:	66666666 	.word	0x66666666
   d5ddc:	3f4a6666 	.word	0x3f4a6666
   d5de0:	3f500000 	.word	0x3f500000

000d5de4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5de4:	4770      	bx	lr

000d5de6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5de6:	b510      	push	{r4, lr}
}
   d5de8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5dea:	4604      	mov	r4, r0
}
   d5dec:	f002 fea9 	bl	d8b42 <_ZdlPvj>
   d5df0:	4620      	mov	r0, r4
   d5df2:	bd10      	pop	{r4, pc}

000d5df4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5df4:	6803      	ldr	r3, [r0, #0]
   d5df6:	b2c9      	uxtb	r1, r1
   d5df8:	689b      	ldr	r3, [r3, #8]
   d5dfa:	4718      	bx	r3

000d5dfc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5dfc:	b40e      	push	{r1, r2, r3}
   d5dfe:	b510      	push	{r4, lr}
   d5e00:	b08d      	sub	sp, #52	; 0x34
   d5e02:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5e04:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5e06:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5e0a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5e0c:	2300      	movs	r3, #0
   d5e0e:	2020      	movs	r0, #32
   d5e10:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e14:	e9cd 4200 	strd	r4, r2, [sp]
   d5e18:	201e      	movs	r0, #30
   d5e1a:	aa04      	add	r2, sp, #16
   d5e1c:	f001 fa08 	bl	d7230 <log_message_v>
}
   d5e20:	b00d      	add	sp, #52	; 0x34
   d5e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5e26:	b003      	add	sp, #12
   d5e28:	4770      	bx	lr
	...

000d5e2c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5e2c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5e2e:	4d03      	ldr	r5, [pc, #12]	; (d5e3c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5e30:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5e34:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5e38:	bd30      	pop	{r4, r5, pc}
   d5e3a:	bf00      	nop
   d5e3c:	000dc070 	.word	0x000dc070

000d5e40 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	f001 bf33 	b.w	d7cac <_ZN7TwoWire5beginEv>

000d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5e46:	b510      	push	{r4, lr}
   d5e48:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5e4a:	6800      	ldr	r0, [r0, #0]
   d5e4c:	f001 ff71 	bl	d7d32 <_ZN7TwoWire6unlockEv>
   d5e50:	4620      	mov	r0, r4
   d5e52:	bd10      	pop	{r4, pc}

000d5e54 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e58:	b08a      	sub	sp, #40	; 0x28
   d5e5a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5e5c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5e5e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5e60:	f001 ff5e 	bl	d7d20 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5e64:	221e      	movs	r2, #30
   d5e66:	2100      	movs	r1, #0
   d5e68:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5e6a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5e6c:	f003 fd06 	bl	d987c <memset>
		size_t framAddr = 0;
   d5e70:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5e72:	b1ef      	cbz	r7, d5eb0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5e74:	6823      	ldr	r3, [r4, #0]
   d5e76:	2f1e      	cmp	r7, #30
   d5e78:	46b8      	mov	r8, r7
   d5e7a:	bf28      	it	cs
   d5e7c:	f04f 081e 	movcs.w	r8, #30
   d5e80:	68dd      	ldr	r5, [r3, #12]
   d5e82:	aa02      	add	r2, sp, #8
   d5e84:	4643      	mov	r3, r8
   d5e86:	4631      	mov	r1, r6
   d5e88:	4620      	mov	r0, r4
   d5e8a:	47a8      	blx	r5
			if (!result) {
   d5e8c:	4605      	mov	r5, r0
   d5e8e:	b958      	cbnz	r0, d5ea8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5e90:	480a      	ldr	r0, [pc, #40]	; (d5ebc <_ZN6MB85RC5eraseEv+0x68>)
   d5e92:	490b      	ldr	r1, [pc, #44]	; (d5ec0 <_ZN6MB85RC5eraseEv+0x6c>)
   d5e94:	4632      	mov	r2, r6
   d5e96:	f7ff ffb1 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5e9a:	a801      	add	r0, sp, #4
   d5e9c:	f7ff ffd3 	bl	d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5ea0:	4628      	mov	r0, r5
   d5ea2:	b00a      	add	sp, #40	; 0x28
   d5ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5ea8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5eac:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5eae:	e7e0      	b.n	d5e72 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5eb0:	a801      	add	r0, sp, #4
   d5eb2:	f7ff ffc8 	bl	d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5eb6:	2501      	movs	r5, #1
   d5eb8:	e7f2      	b.n	d5ea0 <_ZN6MB85RC5eraseEv+0x4c>
   d5eba:	bf00      	nop
   d5ebc:	2003e614 	.word	0x2003e614
   d5ec0:	000dc03c 	.word	0x000dc03c

000d5ec4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5ec8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5eca:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ecc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5ece:	460d      	mov	r5, r1
   d5ed0:	4616      	mov	r6, r2
   d5ed2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5ed4:	f001 ff24 	bl	d7d20 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5ed8:	b1a7      	cbz	r7, d5f04 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5eda:	68e1      	ldr	r1, [r4, #12]
   d5edc:	6860      	ldr	r0, [r4, #4]
   d5ede:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ee2:	f001 ff16 	bl	d7d12 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5ee6:	0a29      	lsrs	r1, r5, #8
   d5ee8:	6860      	ldr	r0, [r4, #4]
   d5eea:	f7ff ff83 	bl	d5df4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5eee:	4629      	mov	r1, r5
   d5ef0:	6860      	ldr	r0, [r4, #4]
   d5ef2:	f7ff ff7f 	bl	d5df4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5ef6:	6860      	ldr	r0, [r4, #4]
   d5ef8:	2100      	movs	r1, #0
   d5efa:	f001 ff0d 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5efe:	b148      	cbz	r0, d5f14 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5f00:	2400      	movs	r4, #0
   d5f02:	e000      	b.n	d5f06 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5f04:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5f06:	a801      	add	r0, sp, #4
   d5f08:	f7ff ff9d 	bl	d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	b003      	add	sp, #12
   d5f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5f14:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5f16:	7b21      	ldrb	r1, [r4, #12]
   d5f18:	6860      	ldr	r0, [r4, #4]
   d5f1a:	46b8      	mov	r8, r7
   d5f1c:	bf28      	it	cs
   d5f1e:	f04f 0820 	movcs.w	r8, #32
   d5f22:	2301      	movs	r3, #1
   d5f24:	4642      	mov	r2, r8
   d5f26:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f2a:	f001 fedc 	bl	d7ce6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5f2e:	f002 fddb 	bl	d8ae8 <_Z19__fetch_global_Wirev>
   d5f32:	6803      	ldr	r3, [r0, #0]
   d5f34:	691b      	ldr	r3, [r3, #16]
   d5f36:	4798      	blx	r3
   d5f38:	4540      	cmp	r0, r8
   d5f3a:	dbe1      	blt.n	d5f00 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5f3c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5f40:	f002 fdd2 	bl	d8ae8 <_Z19__fetch_global_Wirev>
   d5f44:	6803      	ldr	r3, [r0, #0]
   d5f46:	695b      	ldr	r3, [r3, #20]
   d5f48:	4798      	blx	r3
   d5f4a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5f4e:	454e      	cmp	r6, r9
   d5f50:	d1f6      	bne.n	d5f40 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5f52:	4445      	add	r5, r8
   d5f54:	eba7 0708 	sub.w	r7, r7, r8
   d5f58:	e7be      	b.n	d5ed8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5f5a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5f5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f5e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5f60:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f62:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5f64:	460e      	mov	r6, r1
   d5f66:	4690      	mov	r8, r2
   d5f68:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5f6a:	f001 fed9 	bl	d7d20 <_ZN7TwoWire4lockEv>
   d5f6e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5f72:	f1b9 0f00 	cmp.w	r9, #0
   d5f76:	d02a      	beq.n	d5fce <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5f78:	b34d      	cbz	r5, d5fce <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5f7a:	68e1      	ldr	r1, [r4, #12]
   d5f7c:	6860      	ldr	r0, [r4, #4]
   d5f7e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f82:	f001 fec6 	bl	d7d12 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5f86:	0a31      	lsrs	r1, r6, #8
   d5f88:	6860      	ldr	r0, [r4, #4]
   d5f8a:	f7ff ff33 	bl	d5df4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5f8e:	6860      	ldr	r0, [r4, #4]
   d5f90:	4631      	mov	r1, r6
   d5f92:	f7ff ff2f 	bl	d5df4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5f96:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5f9a:	4647      	mov	r7, r8
   d5f9c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5fa0:	6860      	ldr	r0, [r4, #4]
   d5fa2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5fa6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5fa8:	3d01      	subs	r5, #1
				wire.write(*data);
   d5faa:	689b      	ldr	r3, [r3, #8]
   d5fac:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5fae:	4555      	cmp	r5, sl
   d5fb0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5fb4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5fb6:	d001      	beq.n	d5fbc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5fb8:	2d00      	cmp	r5, #0
   d5fba:	d1f1      	bne.n	d5fa0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5fbc:	6860      	ldr	r0, [r4, #4]
   d5fbe:	2101      	movs	r1, #1
   d5fc0:	f001 feaa 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5fc4:	2800      	cmp	r0, #0
   d5fc6:	d0d7      	beq.n	d5f78 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5fc8:	f04f 0900 	mov.w	r9, #0
   d5fcc:	e7d1      	b.n	d5f72 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5fce:	a801      	add	r0, sp, #4
   d5fd0:	f7ff ff39 	bl	d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5fd4:	4648      	mov	r0, r9
   d5fd6:	b003      	add	sp, #12
   d5fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5fdc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5fe0:	b08b      	sub	sp, #44	; 0x2c
   d5fe2:	460e      	mov	r6, r1
   d5fe4:	4615      	mov	r5, r2
   d5fe6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5fe8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5fea:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5fec:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5fee:	f001 fe97 	bl	d7d20 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5ff2:	42ae      	cmp	r6, r5
   d5ff4:	d229      	bcs.n	d604a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5ff6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5ff8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5ffa:	b18c      	cbz	r4, d6020 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5ffc:	2c1e      	cmp	r4, #30
   d5ffe:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6000:	f8d8 3000 	ldr.w	r3, [r8]
   d6004:	bf28      	it	cs
   d6006:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6008:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d600a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d600e:	aa02      	add	r2, sp, #8
   d6010:	463b      	mov	r3, r7
   d6012:	4631      	mov	r1, r6
   d6014:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6016:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6018:	47c8      	blx	r9
				if (!result) {
   d601a:	b948      	cbnz	r0, d6030 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d601c:	2400      	movs	r4, #0
   d601e:	e000      	b.n	d6022 <_ZN6MB85RC8moveDataEjjj+0x46>
   d6020:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6022:	a801      	add	r0, sp, #4
   d6024:	f7ff ff0f 	bl	d5e46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6028:	4620      	mov	r0, r4
   d602a:	b00b      	add	sp, #44	; 0x2c
   d602c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6030:	f8d8 3000 	ldr.w	r3, [r8]
   d6034:	aa02      	add	r2, sp, #8
   d6036:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d603a:	4629      	mov	r1, r5
   d603c:	463b      	mov	r3, r7
   d603e:	4640      	mov	r0, r8
   d6040:	47c8      	blx	r9
				if (!result) {
   d6042:	2800      	cmp	r0, #0
   d6044:	d0ea      	beq.n	d601c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6046:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6048:	e7d7      	b.n	d5ffa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d604a:	d9e9      	bls.n	d6020 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d604c:	2c00      	cmp	r4, #0
   d604e:	d0e7      	beq.n	d6020 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6050:	f8d8 3000 	ldr.w	r3, [r8]
   d6054:	2c1e      	cmp	r4, #30
   d6056:	4627      	mov	r7, r4
   d6058:	bf28      	it	cs
   d605a:	271e      	movcs	r7, #30
   d605c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6060:	aa02      	add	r2, sp, #8
   d6062:	463b      	mov	r3, r7
   d6064:	4631      	mov	r1, r6
   d6066:	4640      	mov	r0, r8
   d6068:	47c8      	blx	r9
				if (!result) {
   d606a:	2800      	cmp	r0, #0
   d606c:	d0d6      	beq.n	d601c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d606e:	f8d8 3000 	ldr.w	r3, [r8]
   d6072:	aa02      	add	r2, sp, #8
   d6074:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6078:	4629      	mov	r1, r5
   d607a:	463b      	mov	r3, r7
   d607c:	4640      	mov	r0, r8
   d607e:	47c8      	blx	r9
				if (!result) {
   d6080:	2800      	cmp	r0, #0
   d6082:	d0cb      	beq.n	d601c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6084:	443e      	add	r6, r7
				framAddrTo += count;
   d6086:	443d      	add	r5, r7
				numBytes -= count;
   d6088:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d608a:	e7df      	b.n	d604c <_ZN6MB85RC8moveDataEjjj+0x70>

000d608c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d608c:	2040      	movs	r0, #64	; 0x40
   d608e:	4770      	bx	lr

000d6090 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6090:	2000      	movs	r0, #0
   d6092:	4770      	bx	lr

000d6094 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d6094:	2080      	movs	r0, #128	; 0x80
   d6096:	4770      	bx	lr

000d6098 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6098:	20ff      	movs	r0, #255	; 0xff
   d609a:	4770      	bx	lr

000d609c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d609c:	4770      	bx	lr

000d609e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d609e:	4770      	bx	lr

000d60a0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d60a0:	4770      	bx	lr

000d60a2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d60a2:	4770      	bx	lr

000d60a4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d60a4:	b510      	push	{r4, lr}
}
   d60a6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d60a8:	4604      	mov	r4, r0
}
   d60aa:	f002 fd4a 	bl	d8b42 <_ZdlPvj>
   d60ae:	4620      	mov	r0, r4
   d60b0:	bd10      	pop	{r4, pc}

000d60b2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d60b2:	b510      	push	{r4, lr}
}
   d60b4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d60b6:	4604      	mov	r4, r0
}
   d60b8:	f002 fd43 	bl	d8b42 <_ZdlPvj>
   d60bc:	4620      	mov	r0, r4
   d60be:	bd10      	pop	{r4, pc}

000d60c0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d60c0:	b510      	push	{r4, lr}
}
   d60c2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d60c4:	4604      	mov	r4, r0
}
   d60c6:	f002 fd3c 	bl	d8b42 <_ZdlPvj>
   d60ca:	4620      	mov	r0, r4
   d60cc:	bd10      	pop	{r4, pc}

000d60ce <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d60ce:	b510      	push	{r4, lr}
}
   d60d0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d60d2:	4604      	mov	r4, r0
}
   d60d4:	f002 fd35 	bl	d8b42 <_ZdlPvj>
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}

000d60dc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d60dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d60e0:	6803      	ldr	r3, [r0, #0]
   d60e2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d60e4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d60e6:	4798      	blx	r3
   d60e8:	2210      	movs	r2, #16
   d60ea:	4601      	mov	r1, r0
   d60ec:	4668      	mov	r0, sp
   d60ee:	f003 fbc5 	bl	d987c <memset>
	size_t len = length();
   d60f2:	6823      	ldr	r3, [r4, #0]
   d60f4:	4620      	mov	r0, r4
   d60f6:	689b      	ldr	r3, [r3, #8]
   d60f8:	4798      	blx	r3
	size_t offset = 0;
   d60fa:	2500      	movs	r5, #0
	size_t len = length();
   d60fc:	4607      	mov	r7, r0
	bool bResult = false;
   d60fe:	4628      	mov	r0, r5
	while(offset < len) {
   d6100:	42bd      	cmp	r5, r7
   d6102:	d20e      	bcs.n	d6122 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d6104:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d6106:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d6108:	2e10      	cmp	r6, #16
   d610a:	bf28      	it	cs
   d610c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d610e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6112:	466a      	mov	r2, sp
   d6114:	4633      	mov	r3, r6
   d6116:	4629      	mov	r1, r5
   d6118:	4620      	mov	r0, r4
   d611a:	47c0      	blx	r8
		if (!bResult) {
   d611c:	b108      	cbz	r0, d6122 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d611e:	4435      	add	r5, r6
	while(offset < len) {
   d6120:	e7ee      	b.n	d6100 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d6122:	b004      	add	sp, #16
   d6124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6128 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d6128:	f44f 7380 	mov.w	r3, #256	; 0x100
   d612c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d612e:	f240 1301 	movw	r3, #257	; 0x101
   d6132:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d6134:	2300      	movs	r3, #0
   d6136:	8203      	strh	r3, [r0, #16]
}
   d6138:	4770      	bx	lr
	...

000d613c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d613c:	b508      	push	{r3, lr}
   d613e:	4b06      	ldr	r3, [pc, #24]	; (d6158 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6140:	6003      	str	r3, [r0, #0]
   d6142:	4b06      	ldr	r3, [pc, #24]	; (d615c <_ZN12MCP79410TimeC1Ev+0x20>)
   d6144:	6043      	str	r3, [r0, #4]
   d6146:	f240 7304 	movw	r3, #1796	; 0x704
   d614a:	8103      	strh	r3, [r0, #8]
   d614c:	2300      	movs	r3, #0
   d614e:	7443      	strb	r3, [r0, #17]
	clear();
   d6150:	f7ff ffea 	bl	d6128 <_ZN12MCP79410Time5clearEv>
}
   d6154:	bd08      	pop	{r3, pc}
   d6156:	bf00      	nop
   d6158:	000dc150 	.word	0x000dc150
   d615c:	03020100 	.word	0x03020100

000d6160 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6160:	0903      	lsrs	r3, r0, #4
}
   d6162:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6164:	f000 000f 	and.w	r0, r0, #15
}
   d6168:	fb02 0003 	mla	r0, r2, r3, r0
   d616c:	4770      	bx	lr

000d616e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d616e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6170:	7a80      	ldrb	r0, [r0, #10]
   d6172:	f7ff fff5 	bl	d6160 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6176:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d617a:	bd08      	pop	{r3, pc}

000d617c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d617c:	7ac0      	ldrb	r0, [r0, #11]
   d617e:	f000 001f 	and.w	r0, r0, #31
   d6182:	f7ff bfed 	b.w	d6160 <_ZN12MCP79410Time8bcdToIntEh>

000d6186 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6186:	7b00      	ldrb	r0, [r0, #12]
   d6188:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d618c:	f7ff bfe8 	b.w	d6160 <_ZN12MCP79410Time8bcdToIntEh>

000d6190 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6190:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6192:	7b81      	ldrb	r1, [r0, #14]
   d6194:	064a      	lsls	r2, r1, #25
   d6196:	d50d      	bpl.n	d61b4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6198:	f001 001f 	and.w	r0, r1, #31
   d619c:	f7ff ffe0 	bl	d6160 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d61a0:	068b      	lsls	r3, r1, #26
   d61a2:	d503      	bpl.n	d61ac <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d61a4:	280c      	cmp	r0, #12
   d61a6:	d000      	beq.n	d61aa <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d61a8:	300c      	adds	r0, #12
}
   d61aa:	bd08      	pop	{r3, pc}
				return 0;
   d61ac:	280c      	cmp	r0, #12
   d61ae:	bf08      	it	eq
   d61b0:	2000      	moveq	r0, #0
   d61b2:	e7fa      	b.n	d61aa <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d61b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d61b8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d61bc:	f7ff bfd0 	b.w	d6160 <_ZN12MCP79410Time8bcdToIntEh>

000d61c0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d61c0:	7bc0      	ldrb	r0, [r0, #15]
   d61c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d61c6:	f7ff bfcb 	b.w	d6160 <_ZN12MCP79410Time8bcdToIntEh>

000d61ca <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d61ca:	7c00      	ldrb	r0, [r0, #16]
   d61cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d61d0:	f7ff bfc6 	b.w	d6160 <_ZN12MCP79410Time8bcdToIntEh>

000d61d4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d61d4:	b510      	push	{r4, lr}
   d61d6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d61d8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d61da:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d61dc:	2100      	movs	r1, #0
   d61de:	a801      	add	r0, sp, #4
   d61e0:	f003 fb4c 	bl	d987c <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d61e4:	4620      	mov	r0, r4
   d61e6:	f7ff ffc2 	bl	d616e <_ZNK12MCP79410Time7getYearEv>
   d61ea:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d61ee:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d61f0:	4620      	mov	r0, r4
   d61f2:	f7ff ffc3 	bl	d617c <_ZNK12MCP79410Time8getMonthEv>
   d61f6:	3801      	subs	r0, #1
   d61f8:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d61fa:	4620      	mov	r0, r4
   d61fc:	f7ff ffc3 	bl	d6186 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6200:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6202:	4620      	mov	r0, r4
   d6204:	f7ff ffc4 	bl	d6190 <_ZNK12MCP79410Time7getHourEv>
   d6208:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d620a:	4620      	mov	r0, r4
   d620c:	f7ff ffd8 	bl	d61c0 <_ZNK12MCP79410Time9getMinuteEv>
   d6210:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6212:	4620      	mov	r0, r4
   d6214:	f7ff ffd9 	bl	d61ca <_ZNK12MCP79410Time9getSecondEv>
   d6218:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d621a:	a801      	add	r0, sp, #4
   d621c:	f001 f996 	bl	d754c <mktime>
}
   d6220:	b00a      	add	sp, #40	; 0x28
   d6222:	bd10      	pop	{r4, pc}

000d6224 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6224:	210a      	movs	r1, #10
   d6226:	fb90 f2f1 	sdiv	r2, r0, r1
   d622a:	fb92 f3f1 	sdiv	r3, r2, r1
   d622e:	fb01 2313 	mls	r3, r1, r3, r2
   d6232:	011b      	lsls	r3, r3, #4
   d6234:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6236:	fb01 0012 	mls	r0, r1, r2, r0
   d623a:	4318      	orrs	r0, r3
}
   d623c:	b2c0      	uxtb	r0, r0
   d623e:	4770      	bx	lr

000d6240 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6240:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6242:	b510      	push	{r4, lr}
   d6244:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6246:	fb91 f0f3 	sdiv	r0, r1, r3
   d624a:	fb00 1013 	mls	r0, r0, r3, r1
   d624e:	f7ff ffe9 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
   d6252:	72a0      	strb	r0, [r4, #10]
}
   d6254:	bd10      	pop	{r4, pc}

000d6256 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6256:	b510      	push	{r4, lr}
   d6258:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d625a:	4608      	mov	r0, r1
   d625c:	f7ff ffe2 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
   d6260:	72e0      	strb	r0, [r4, #11]
}
   d6262:	bd10      	pop	{r4, pc}

000d6264 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6264:	b510      	push	{r4, lr}
   d6266:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6268:	4608      	mov	r0, r1
   d626a:	f7ff ffdb 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d626e:	7b23      	ldrb	r3, [r4, #12]
   d6270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6274:	4318      	orrs	r0, r3
   d6276:	7320      	strb	r0, [r4, #12]
}
   d6278:	bd10      	pop	{r4, pc}

000d627a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d627a:	b510      	push	{r4, lr}
   d627c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d627e:	1c48      	adds	r0, r1, #1
   d6280:	f7ff ffd0 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6284:	7b63      	ldrb	r3, [r4, #13]
   d6286:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d628a:	4318      	orrs	r0, r3
   d628c:	7360      	strb	r0, [r4, #13]
}
   d628e:	bd10      	pop	{r4, pc}

000d6290 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6290:	b510      	push	{r4, lr}
   d6292:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6294:	4608      	mov	r0, r1
   d6296:	f7ff ffc5 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
   d629a:	73a0      	strb	r0, [r4, #14]
}
   d629c:	bd10      	pop	{r4, pc}

000d629e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d629e:	b510      	push	{r4, lr}
   d62a0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d62a2:	4608      	mov	r0, r1
   d62a4:	f7ff ffbe 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
   d62a8:	73e0      	strb	r0, [r4, #15]
}
   d62aa:	bd10      	pop	{r4, pc}

000d62ac <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d62ac:	b510      	push	{r4, lr}
   d62ae:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d62b0:	4608      	mov	r0, r1
   d62b2:	f7ff ffb7 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d62b6:	7c23      	ldrb	r3, [r4, #16]
   d62b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d62bc:	4318      	orrs	r0, r3
   d62be:	7420      	strb	r0, [r4, #16]
}
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d62c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62c4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d62c6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d62c8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d62cc:	f003 fa9c 	bl	d9808 <gmtime>
   d62d0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d62d2:	6941      	ldr	r1, [r0, #20]
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff ffb3 	bl	d6240 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d62da:	6929      	ldr	r1, [r5, #16]
   d62dc:	4620      	mov	r0, r4
   d62de:	3101      	adds	r1, #1
   d62e0:	f7ff ffb9 	bl	d6256 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d62e4:	68e9      	ldr	r1, [r5, #12]
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffbc 	bl	d6264 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d62ec:	69a9      	ldr	r1, [r5, #24]
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ffc3 	bl	d627a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d62f4:	68a9      	ldr	r1, [r5, #8]
   d62f6:	4620      	mov	r0, r4
   d62f8:	f7ff ffca 	bl	d6290 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d62fc:	6869      	ldr	r1, [r5, #4]
   d62fe:	4620      	mov	r0, r4
   d6300:	f7ff ffcd 	bl	d629e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6304:	6829      	ldr	r1, [r5, #0]
   d6306:	293b      	cmp	r1, #59	; 0x3b
   d6308:	bfa8      	it	ge
   d630a:	213b      	movge	r1, #59	; 0x3b
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff ffcd 	bl	d62ac <_ZN12MCP79410Time9setSecondEi>
}
   d6312:	b003      	add	sp, #12
   d6314:	bd30      	pop	{r4, r5, pc}
	...

000d6318 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6318:	4a05      	ldr	r2, [pc, #20]	; (d6330 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d631a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d631c:	e9c0 2100 	strd	r2, r1, [r0]
   d6320:	4a04      	ldr	r2, [pc, #16]	; (d6334 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6322:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6324:	4a04      	ldr	r2, [pc, #16]	; (d6338 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6326:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6328:	4a04      	ldr	r2, [pc, #16]	; (d633c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d632a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d632c:	6142      	str	r2, [r0, #20]
}
   d632e:	4770      	bx	lr
   d6330:	000dc184 	.word	0x000dc184
   d6334:	03010000 	.word	0x03010000
   d6338:	000dc12c 	.word	0x000dc12c
   d633c:	000dc160 	.word	0x000dc160

000d6340 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6344:	4604      	mov	r4, r0
   d6346:	460f      	mov	r7, r1
   d6348:	4690      	mov	r8, r2
   d634a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d634c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6350:	429e      	cmp	r6, r3
   d6352:	d231      	bcs.n	d63b8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6354:	6860      	ldr	r0, [r4, #4]
   d6356:	4639      	mov	r1, r7
   d6358:	f001 fcd7 	bl	d7d0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d635c:	eb08 0106 	add.w	r1, r8, r6
   d6360:	6860      	ldr	r0, [r4, #4]
   d6362:	f7ff fd47 	bl	d5df4 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6366:	6860      	ldr	r0, [r4, #4]
   d6368:	2100      	movs	r1, #0
   d636a:	f001 fcd5 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d636e:	4605      	mov	r5, r0
   d6370:	b9d0      	cbnz	r0, d63a8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6374:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6376:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6378:	2a20      	cmp	r2, #32
   d637a:	f04f 0301 	mov.w	r3, #1
   d637e:	bf28      	it	cs
   d6380:	2220      	movcs	r2, #32
   d6382:	4639      	mov	r1, r7
   d6384:	f001 fcaf 	bl	d7ce6 <_ZN7TwoWire11requestFromEhjh>
   d6388:	eb09 0b06 	add.w	fp, r9, r6
   d638c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d638e:	eb0b 0a00 	add.w	sl, fp, r0
   d6392:	45da      	cmp	sl, fp
   d6394:	d006      	beq.n	d63a4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6396:	6860      	ldr	r0, [r4, #4]
   d6398:	6803      	ldr	r3, [r0, #0]
   d639a:	695b      	ldr	r3, [r3, #20]
   d639c:	4798      	blx	r3
   d639e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d63a2:	e7f6      	b.n	d6392 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d63a4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d63a6:	e7d2      	b.n	d634e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d63a8:	4602      	mov	r2, r0
   d63aa:	4904      	ldr	r1, [pc, #16]	; (d63bc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d63ac:	4804      	ldr	r0, [pc, #16]	; (d63c0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d63ae:	f7ff fd25 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d63b2:	4628      	mov	r0, r5
   d63b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63b8:	2500      	movs	r5, #0
	return stat;
   d63ba:	e7fa      	b.n	d63b2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d63bc:	000dc084 	.word	0x000dc084
   d63c0:	2003e600 	.word	0x2003e600

000d63c4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d63c8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63cc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d63ce:	6803      	ldr	r3, [r0, #0]
   d63d0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63d2:	4605      	mov	r5, r0
   d63d4:	460c      	mov	r4, r1
   d63d6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d63d8:	4798      	blx	r3
   d63da:	4580      	cmp	r8, r0
   d63dc:	d80d      	bhi.n	d63fa <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d63de:	3420      	adds	r4, #32
   d63e0:	6868      	ldr	r0, [r5, #4]
   d63e2:	9600      	str	r6, [sp, #0]
   d63e4:	463b      	mov	r3, r7
   d63e6:	b2e2      	uxtb	r2, r4
   d63e8:	216f      	movs	r1, #111	; 0x6f
   d63ea:	f7ff ffa9 	bl	d6340 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d63ee:	fab0 f080 	clz	r0, r0
   d63f2:	0940      	lsrs	r0, r0, #5
}
   d63f4:	b002      	add	sp, #8
   d63f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d63fa:	2000      	movs	r0, #0
   d63fc:	e7fa      	b.n	d63f4 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d63fe <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6402:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6406:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6408:	6803      	ldr	r3, [r0, #0]
   d640a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d640c:	4604      	mov	r4, r0
   d640e:	460d      	mov	r5, r1
   d6410:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6412:	4798      	blx	r3
   d6414:	4580      	cmp	r8, r0
   d6416:	d80c      	bhi.n	d6432 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6418:	6860      	ldr	r0, [r4, #4]
   d641a:	9600      	str	r6, [sp, #0]
   d641c:	463b      	mov	r3, r7
   d641e:	b2ea      	uxtb	r2, r5
   d6420:	2157      	movs	r1, #87	; 0x57
   d6422:	f7ff ff8d 	bl	d6340 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6426:	fab0 f080 	clz	r0, r0
   d642a:	0940      	lsrs	r0, r0, #5
}
   d642c:	b002      	add	sp, #8
   d642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6432:	2000      	movs	r0, #0
   d6434:	e7fa      	b.n	d642c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6436 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6436:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6438:	1e1e      	subs	r6, r3, #0
   d643a:	bf0c      	ite	eq
   d643c:	2307      	moveq	r3, #7
   d643e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6440:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6442:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6444:	ab02      	add	r3, sp, #8
   d6446:	460a      	mov	r2, r1
   d6448:	216f      	movs	r1, #111	; 0x6f
   d644a:	f7ff ff79 	bl	d6340 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d644e:	4605      	mov	r5, r0
   d6450:	b9a8      	cbnz	r0, d647e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6452:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6456:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6458:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d645c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d645e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6462:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6464:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6468:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d646a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d646e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6470:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6474:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6476:	b92e      	cbnz	r6, d6484 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6478:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d647c:	72a3      	strb	r3, [r4, #10]
}
   d647e:	4628      	mov	r0, r5
   d6480:	b004      	add	sp, #16
   d6482:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6484:	f002 f898 	bl	d85b8 <_ZN9TimeClass4yearEv>
   d6488:	f7ff fecc 	bl	d6224 <_ZN12MCP79410Time8intToBcdEi>
   d648c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d648e:	e7f6      	b.n	d647e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6490 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6492:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6494:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6496:	9300      	str	r3, [sp, #0]
   d6498:	216f      	movs	r1, #111	; 0x6f
   d649a:	ab03      	add	r3, sp, #12
   d649c:	f7ff ff50 	bl	d6340 <_ZNK8MCP7941010deviceReadEhhPhj>
   d64a0:	b920      	cbnz	r0, d64ac <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d64a2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d64a6:	b005      	add	sp, #20
   d64a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d64ac:	2000      	movs	r0, #0
   d64ae:	e7fa      	b.n	d64a6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d64b0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d64b0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d64b2:	2103      	movs	r1, #3
   d64b4:	f7ff ffec 	bl	d6490 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d64b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d64bc:	bd08      	pop	{r3, pc}

000d64be <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d64be:	b538      	push	{r3, r4, r5, lr}
   d64c0:	2300      	movs	r3, #0
   d64c2:	460c      	mov	r4, r1
   d64c4:	460a      	mov	r2, r1
   d64c6:	4619      	mov	r1, r3
   d64c8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d64ca:	f7ff ffb4 	bl	d6436 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d64ce:	b930      	cbnz	r0, d64de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d64d0:	7aa3      	ldrb	r3, [r4, #10]
   d64d2:	b123      	cbz	r3, d64de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d64d4:	4628      	mov	r0, r5
}
   d64d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d64da:	f7ff bfe9 	b.w	d64b0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d64de:	2000      	movs	r0, #0
   d64e0:	bd38      	pop	{r3, r4, r5, pc}

000d64e2 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d64e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d64e4:	4602      	mov	r2, r0
	MCP79410Time time;
   d64e6:	a801      	add	r0, sp, #4
   d64e8:	f7ff fe28 	bl	d613c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d64ec:	a901      	add	r1, sp, #4
   d64ee:	4610      	mov	r0, r2
   d64f0:	f7ff ffe5 	bl	d64be <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d64f4:	b128      	cbz	r0, d6502 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d64f6:	a801      	add	r0, sp, #4
   d64f8:	f7ff fe6c 	bl	d61d4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d64fc:	b007      	add	sp, #28
   d64fe:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6502:	2000      	movs	r0, #0
   d6504:	4601      	mov	r1, r0
   d6506:	e7f9      	b.n	d64fc <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6508 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6508:	b5d0      	push	{r4, r6, r7, lr}
   d650a:	4604      	mov	r4, r0
   d650c:	b086      	sub	sp, #24
	wire.begin();
   d650e:	6840      	ldr	r0, [r0, #4]
   d6510:	f001 fbcc 	bl	d7cac <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6514:	f002 f816 	bl	d8544 <_ZN9TimeClass7isValidEv>
   d6518:	b9e8      	cbnz	r0, d6556 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d651a:	7ae3      	ldrb	r3, [r4, #11]
   d651c:	079b      	lsls	r3, r3, #30
   d651e:	d51a      	bpl.n	d6556 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6520:	4620      	mov	r0, r4
   d6522:	f7ff ffde 	bl	d64e2 <_ZNK8MCP7941010getRTCTimeEv>
   d6526:	4606      	mov	r6, r0
   d6528:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d652a:	ea56 0307 	orrs.w	r3, r6, r7
   d652e:	d012      	beq.n	d6556 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6530:	f001 ff0f 	bl	d8352 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6534:	4b0a      	ldr	r3, [pc, #40]	; (d6560 <_ZN8MCP794105setupEv+0x58>)
   d6536:	490b      	ldr	r1, [pc, #44]	; (d6564 <_ZN8MCP794105setupEv+0x5c>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	9300      	str	r3, [sp, #0]
   d653c:	4632      	mov	r2, r6
   d653e:	463b      	mov	r3, r7
   d6540:	a802      	add	r0, sp, #8
   d6542:	f001 ffbd 	bl	d84c0 <_ZN9TimeClass6formatExPKc>
   d6546:	4808      	ldr	r0, [pc, #32]	; (d6568 <_ZN8MCP794105setupEv+0x60>)
   d6548:	9a02      	ldr	r2, [sp, #8]
   d654a:	4908      	ldr	r1, [pc, #32]	; (d656c <_ZN8MCP794105setupEv+0x64>)
   d654c:	f7ff fc56 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
   d6550:	a802      	add	r0, sp, #8
   d6552:	f001 fdbf 	bl	d80d4 <_ZN6StringD1Ev>
	setupDone = true;
   d6556:	2301      	movs	r3, #1
   d6558:	7223      	strb	r3, [r4, #8]
}
   d655a:	b006      	add	sp, #24
   d655c:	bdd0      	pop	{r4, r6, r7, pc}
   d655e:	bf00      	nop
   d6560:	2003d8e8 	.word	0x2003d8e8
   d6564:	2003e640 	.word	0x2003e640
   d6568:	2003e600 	.word	0x2003e600
   d656c:	000dc09e 	.word	0x000dc09e

000d6570 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6574:	4606      	mov	r6, r0
   d6576:	4688      	mov	r8, r1
   d6578:	4691      	mov	r9, r2
   d657a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d657c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d657e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6580:	429d      	cmp	r5, r3
   d6582:	d229      	bcs.n	d65d8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6584:	6870      	ldr	r0, [r6, #4]
   d6586:	4641      	mov	r1, r8
   d6588:	f001 fbbf 	bl	d7d0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d658c:	6870      	ldr	r0, [r6, #4]
   d658e:	eb09 0105 	add.w	r1, r9, r5
   d6592:	f7ff fc2f 	bl	d5df4 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6598:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d659a:	2f1f      	cmp	r7, #31
   d659c:	bf28      	it	cs
   d659e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d65a0:	eb0a 0405 	add.w	r4, sl, r5
   d65a4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d65a8:	6870      	ldr	r0, [r6, #4]
   d65aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d65ae:	6802      	ldr	r2, [r0, #0]
   d65b0:	6892      	ldr	r2, [r2, #8]
   d65b2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d65b4:	45a3      	cmp	fp, r4
   d65b6:	d1f7      	bne.n	d65a8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d65b8:	6870      	ldr	r0, [r6, #4]
   d65ba:	2101      	movs	r1, #1
   d65bc:	f001 fbac 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d65c0:	4604      	mov	r4, r0
   d65c2:	b138      	cbz	r0, d65d4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d65c4:	4602      	mov	r2, r0
   d65c6:	4905      	ldr	r1, [pc, #20]	; (d65dc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d65c8:	4805      	ldr	r0, [pc, #20]	; (d65e0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d65ca:	f7ff fc17 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d65ce:	4620      	mov	r0, r4
   d65d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d65d4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d65d6:	e7d2      	b.n	d657e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d65d8:	2400      	movs	r4, #0
	return stat;
   d65da:	e7f8      	b.n	d65ce <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d65dc:	000dc0b3 	.word	0x000dc0b3
   d65e0:	2003e600 	.word	0x2003e600

000d65e4 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d65e8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65ec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d65ee:	6803      	ldr	r3, [r0, #0]
   d65f0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65f2:	4605      	mov	r5, r0
   d65f4:	460c      	mov	r4, r1
   d65f6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d65f8:	4798      	blx	r3
   d65fa:	4580      	cmp	r8, r0
   d65fc:	d80d      	bhi.n	d661a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d65fe:	3420      	adds	r4, #32
   d6600:	6868      	ldr	r0, [r5, #4]
   d6602:	9600      	str	r6, [sp, #0]
   d6604:	463b      	mov	r3, r7
   d6606:	b2e2      	uxtb	r2, r4
   d6608:	216f      	movs	r1, #111	; 0x6f
   d660a:	f7ff ffb1 	bl	d6570 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d660e:	fab0 f080 	clz	r0, r0
   d6612:	0940      	lsrs	r0, r0, #5
}
   d6614:	b002      	add	sp, #8
   d6616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d661a:	2000      	movs	r0, #0
   d661c:	e7fa      	b.n	d6614 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d661e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d661e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6620:	7c13      	ldrb	r3, [r2, #16]
   d6622:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6626:	7bd3      	ldrb	r3, [r2, #15]
   d6628:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d662c:	7b93      	ldrb	r3, [r2, #14]
   d662e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6632:	7b53      	ldrb	r3, [r2, #13]
   d6634:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6638:	7b13      	ldrb	r3, [r2, #12]
   d663a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d663e:	7ad3      	ldrb	r3, [r2, #11]
   d6640:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6644:	7a93      	ldrb	r3, [r2, #10]
   d6646:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d664a:	2307      	movs	r3, #7
   d664c:	9300      	str	r3, [sp, #0]
   d664e:	460a      	mov	r2, r1
   d6650:	ab02      	add	r3, sp, #8
   d6652:	216f      	movs	r1, #111	; 0x6f
   d6654:	f7ff ff8c 	bl	d6570 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6658:	b005      	add	sp, #20
   d665a:	f85d fb04 	ldr.w	pc, [sp], #4

000d665e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d665e:	b510      	push	{r4, lr}
   d6660:	b088      	sub	sp, #32
   d6662:	4604      	mov	r4, r0
	MCP79410Time time;
   d6664:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6666:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6668:	f7ff fd68 	bl	d613c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d666c:	9b01      	ldr	r3, [sp, #4]
   d666e:	a803      	add	r0, sp, #12
   d6670:	f7ff fe27 	bl	d62c2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6674:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6678:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d667a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d667e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6682:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6686:	b16a      	cbz	r2, d66a4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6688:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d668c:	aa03      	add	r2, sp, #12
   d668e:	2100      	movs	r1, #0
   d6690:	4620      	mov	r0, r4
   d6692:	f88d 3019 	strb.w	r3, [sp, #25]
   d6696:	f7ff ffc2 	bl	d661e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d669a:	fab0 f080 	clz	r0, r0
   d669e:	0940      	lsrs	r0, r0, #5
   d66a0:	b008      	add	sp, #32
   d66a2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d66a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d66a8:	e7f0      	b.n	d668c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d66ac <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d66ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ae:	b087      	sub	sp, #28
   d66b0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d66b2:	f001 ff47 	bl	d8544 <_ZN9TimeClass7isValidEv>
   d66b6:	4604      	mov	r4, r0
   d66b8:	b1e8      	cbz	r0, d66f6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d66ba:	f001 ff60 	bl	d857e <_ZN9TimeClass3nowEv>
   d66be:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d66c0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d66c2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d66c4:	463b      	mov	r3, r7
   d66c6:	4628      	mov	r0, r5
   d66c8:	f7ff ffc9 	bl	d665e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d66cc:	4b0c      	ldr	r3, [pc, #48]	; (d6700 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d66ce:	490d      	ldr	r1, [pc, #52]	; (d6704 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	9300      	str	r3, [sp, #0]
   d66d4:	4632      	mov	r2, r6
   d66d6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d66d8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d66da:	a802      	add	r0, sp, #8
   d66dc:	f001 fef0 	bl	d84c0 <_ZN9TimeClass6formatExPKc>
   d66e0:	4809      	ldr	r0, [pc, #36]	; (d6708 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d66e2:	9a02      	ldr	r2, [sp, #8]
   d66e4:	4909      	ldr	r1, [pc, #36]	; (d670c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d66e6:	f7ff fb89 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
   d66ea:	a802      	add	r0, sp, #8
   d66ec:	f001 fcf2 	bl	d80d4 <_ZN6StringD1Ev>
}
   d66f0:	4620      	mov	r0, r4
   d66f2:	b007      	add	sp, #28
   d66f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d66f6:	4906      	ldr	r1, [pc, #24]	; (d6710 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d66f8:	4803      	ldr	r0, [pc, #12]	; (d6708 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d66fa:	f7ff fb7f 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
   d66fe:	e7f7      	b.n	d66f0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6700:	2003d8e8 	.word	0x2003d8e8
   d6704:	2003e640 	.word	0x2003e640
   d6708:	2003e600 	.word	0x2003e600
   d670c:	000dc0ce 	.word	0x000dc0ce
   d6710:	000dc0e4 	.word	0x000dc0e4

000d6714 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6714:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6716:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6718:	4604      	mov	r4, r0
	if (!timeSet) {
   d671a:	b99d      	cbnz	r5, d6744 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d671c:	f001 ff12 	bl	d8544 <_ZN9TimeClass7isValidEv>
   d6720:	b180      	cbz	r0, d6744 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6722:	2200      	movs	r2, #0
   d6724:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6726:	4669      	mov	r1, sp
   d6728:	4628      	mov	r0, r5
        tm = 0;
   d672a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d672e:	f000 fe35 	bl	d739c <spark_sync_time_last>
			if (lastSync != 0) {
   d6732:	b138      	cbz	r0, d6744 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6734:	7ae3      	ldrb	r3, [r4, #11]
   d6736:	07db      	lsls	r3, r3, #31
   d6738:	d502      	bpl.n	d6740 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d673a:	4620      	mov	r0, r4
   d673c:	f7ff ffb6 	bl	d66ac <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6740:	2301      	movs	r3, #1
   d6742:	7263      	strb	r3, [r4, #9]
}
   d6744:	b003      	add	sp, #12
   d6746:	bd30      	pop	{r4, r5, pc}

000d6748 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d674a:	2301      	movs	r3, #1
	buf[0] = value;
   d674c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6750:	9300      	str	r3, [sp, #0]
   d6752:	460a      	mov	r2, r1
   d6754:	ab03      	add	r3, sp, #12
   d6756:	216f      	movs	r1, #111	; 0x6f
   d6758:	f7ff ff0a 	bl	d6570 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d675c:	b005      	add	sp, #20
   d675e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6762 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6764:	4604      	mov	r4, r0
   d6766:	460d      	mov	r5, r1
   d6768:	4617      	mov	r7, r2
   d676a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d676c:	f7ff fe90 	bl	d6490 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6770:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d6774:	4332      	orrs	r2, r6
   d6776:	4629      	mov	r1, r5
   d6778:	4620      	mov	r0, r4
}
   d677a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d677e:	f7ff bfe3 	b.w	d6748 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d6782 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d6782:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d6784:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6786:	d80c      	bhi.n	d67a2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6788:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d678a:	f04f 0300 	mov.w	r3, #0
   d678e:	bf14      	ite	ne
   d6790:	22df      	movne	r2, #223	; 0xdf
   d6792:	22ef      	moveq	r2, #239	; 0xef
   d6794:	2107      	movs	r1, #7
   d6796:	f7ff ffe4 	bl	d6762 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d679a:	fab0 f080 	clz	r0, r0
   d679e:	0940      	lsrs	r0, r0, #5
}
   d67a0:	bd08      	pop	{r3, pc}
		return false;
   d67a2:	2000      	movs	r0, #0
   d67a4:	e7fc      	b.n	d67a0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d67a6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d67a6:	b538      	push	{r3, r4, r5, lr}
   d67a8:	4604      	mov	r4, r0
   d67aa:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d67ac:	6860      	ldr	r0, [r4, #4]
   d67ae:	2157      	movs	r1, #87	; 0x57
   d67b0:	f001 faab 	bl	d7d0a <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d67b4:	6860      	ldr	r0, [r4, #4]
   d67b6:	2101      	movs	r1, #1
   d67b8:	f001 faae 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d67bc:	b108      	cbz	r0, d67c2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d67be:	3d01      	subs	r5, #1
   d67c0:	d1f4      	bne.n	d67ac <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d67c2:	bd38      	pop	{r3, r4, r5, pc}

000d67c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d67c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67c8:	4604      	mov	r4, r0
   d67ca:	460f      	mov	r7, r1
   d67cc:	4616      	mov	r6, r2
   d67ce:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d67d2:	45b0      	cmp	r8, r6
   d67d4:	d020      	beq.n	d6818 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d67d6:	6860      	ldr	r0, [r4, #4]
   d67d8:	2157      	movs	r1, #87	; 0x57
   d67da:	f001 fa96 	bl	d7d0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d67de:	4639      	mov	r1, r7
   d67e0:	6860      	ldr	r0, [r4, #4]
   d67e2:	f7ff fb07 	bl	d5df4 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d67e6:	6860      	ldr	r0, [r4, #4]
   d67e8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d67ec:	6803      	ldr	r3, [r0, #0]
   d67ee:	689b      	ldr	r3, [r3, #8]
   d67f0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d67f2:	6860      	ldr	r0, [r4, #4]
   d67f4:	2101      	movs	r1, #1
   d67f6:	f001 fa8f 	bl	d7d18 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d67fa:	3701      	adds	r7, #1
   d67fc:	4605      	mov	r5, r0
   d67fe:	b138      	cbz	r0, d6810 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6800:	4602      	mov	r2, r0
   d6802:	4906      	ldr	r1, [pc, #24]	; (d681c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6804:	4806      	ldr	r0, [pc, #24]	; (d6820 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6806:	f7ff faf9 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
}
   d680a:	4628      	mov	r0, r5
   d680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6810:	4620      	mov	r0, r4
   d6812:	f7ff ffc8 	bl	d67a6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6816:	e7dc      	b.n	d67d2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6818:	2500      	movs	r5, #0
	return stat;
   d681a:	e7f6      	b.n	d680a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d681c:	000dc0f9 	.word	0x000dc0f9
   d6820:	2003e600 	.word	0x2003e600

000d6824 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6826:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6828:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d682a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d682c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d682e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6830:	4604      	mov	r4, r0
   d6832:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6834:	4798      	blx	r3
   d6836:	4287      	cmp	r7, r0
   d6838:	d80a      	bhi.n	d6850 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d683a:	9a01      	ldr	r2, [sp, #4]
   d683c:	6860      	ldr	r0, [r4, #4]
   d683e:	4633      	mov	r3, r6
   d6840:	b2e9      	uxtb	r1, r5
   d6842:	f7ff ffbf 	bl	d67c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6846:	fab0 f080 	clz	r0, r0
   d684a:	0940      	lsrs	r0, r0, #5
}
   d684c:	b003      	add	sp, #12
   d684e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6850:	2000      	movs	r0, #0
   d6852:	e7fb      	b.n	d684c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6854 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d6854:	4b01      	ldr	r3, [pc, #4]	; (d685c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6856:	4a02      	ldr	r2, [pc, #8]	; (d6860 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6858:	601a      	str	r2, [r3, #0]
}
   d685a:	4770      	bx	lr
   d685c:	2003e600 	.word	0x2003e600
   d6860:	000dc11a 	.word	0x000dc11a

000d6864 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6864:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6866:	4603      	mov	r3, r0
	switch (__op)
   d6868:	d102      	bne.n	d6870 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d686a:	6001      	str	r1, [r0, #0]
      }
   d686c:	2000      	movs	r0, #0
   d686e:	4770      	bx	lr
	  switch (__op)
   d6870:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6872:	bf04      	itt	eq
   d6874:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6878:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d687c:	e7f6      	b.n	d686c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d687e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d687e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6880:	2301      	movs	r3, #1
   d6882:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6884:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6886:	4604      	mov	r4, r0
        if (th->func) {
   d6888:	b143      	cbz	r3, d689c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d688a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d688c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d688e:	2301      	movs	r3, #1
   d6890:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6892:	2000      	movs	r0, #0
    }
   d6894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6898:	f000 bb32 	b.w	d6f00 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d689c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d689e:	2800      	cmp	r0, #0
   d68a0:	d0f5      	beq.n	d688e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d68a2:	6883      	ldr	r3, [r0, #8]
   d68a4:	b90b      	cbnz	r3, d68aa <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d68a6:	f002 f952 	bl	d8b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68aa:	68c3      	ldr	r3, [r0, #12]
   d68ac:	e7ee      	b.n	d688c <_ZN6Thread3runEPv+0xe>

000d68ae <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d68ae:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d68b0:	6842      	ldr	r2, [r0, #4]
   d68b2:	4603      	mov	r3, r0
   d68b4:	1054      	asrs	r4, r2, #1
   d68b6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d68ba:	07d2      	lsls	r2, r2, #31
   d68bc:	bf48      	it	mi
   d68be:	590a      	ldrmi	r2, [r1, r4]
   d68c0:	681b      	ldr	r3, [r3, #0]
      }
   d68c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d68c6:	bf48      	it	mi
   d68c8:	58d3      	ldrmi	r3, [r2, r3]
   d68ca:	4718      	bx	r3

000d68cc <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d68cc:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d68ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d68d0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d68d4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d68d6:	3008      	adds	r0, #8
   d68d8:	f000 faea 	bl	d6eb0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d68dc:	2004      	movs	r0, #4
   d68de:	f7fd fbda 	bl	d4096 <_Znwj>
   d68e2:	4605      	mov	r5, r0
   d68e4:	b398      	cbz	r0, d694e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d68e6:	491b      	ldr	r1, [pc, #108]	; (d6954 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d68e8:	2014      	movs	r0, #20
   d68ea:	f002 f92c 	bl	d8b46 <_ZnwjRKSt9nothrow_t>
   d68ee:	b130      	cbz	r0, d68fe <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d68f0:	2300      	movs	r3, #0
            exited(false) {
   d68f2:	e9c0 3300 	strd	r3, r3, [r0]
   d68f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d68fa:	7403      	strb	r3, [r0, #16]
   d68fc:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d68fe:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6900:	b1a0      	cbz	r0, d692c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6902:	4b15      	ldr	r3, [pc, #84]	; (d6958 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6904:	4915      	ldr	r1, [pc, #84]	; (d695c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6906:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d690a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d690e:	e9cd 0300 	strd	r0, r3, [sp]
   d6912:	2202      	movs	r2, #2
   d6914:	4b12      	ldr	r3, [pc, #72]	; (d6960 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6916:	3004      	adds	r0, #4
   d6918:	f000 fa92 	bl	d6e40 <os_thread_create>
   d691c:	b930      	cbnz	r0, d692c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d691e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6920:	7c1b      	ldrb	r3, [r3, #16]
   d6922:	b9a3      	cbnz	r3, d694e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6924:	2001      	movs	r0, #1
   d6926:	f000 fb0b 	bl	d6f40 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d692a:	e7f8      	b.n	d691e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d692c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d692e:	2300      	movs	r3, #0
   d6930:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6932:	b164      	cbz	r4, d694e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6934:	6827      	ldr	r7, [r4, #0]
   d6936:	b137      	cbz	r7, d6946 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6938:	4638      	mov	r0, r7
   d693a:	f7fd fcb1 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d693e:	2110      	movs	r1, #16
   d6940:	4638      	mov	r0, r7
   d6942:	f002 f8fe 	bl	d8b42 <_ZdlPvj>
   d6946:	2114      	movs	r1, #20
   d6948:	4620      	mov	r0, r4
   d694a:	f002 f8fa 	bl	d8b42 <_ZdlPvj>
   d694e:	6075      	str	r5, [r6, #4]
}
   d6950:	b003      	add	sp, #12
   d6952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6954:	000dc434 	.word	0x000dc434
   d6958:	000d6b6b 	.word	0x000d6b6b
   d695c:	000dc18c 	.word	0x000dc18c
   d6960:	000d687f 	.word	0x000d687f

000d6964 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6964:	f247 5130 	movw	r1, #30000	; 0x7530
   d6968:	4a08      	ldr	r2, [pc, #32]	; (d698c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d696a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d696c:	4908      	ldr	r1, [pc, #32]	; (d6990 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d696e:	6002      	str	r2, [r0, #0]
   d6970:	2200      	movs	r2, #0
   d6972:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6976:	4907      	ldr	r1, [pc, #28]	; (d6994 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6978:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d697a:	4907      	ldr	r1, [pc, #28]	; (d6998 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d697c:	6042      	str	r2, [r0, #4]
   d697e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d6982:	6181      	str	r1, [r0, #24]
   d6984:	8502      	strh	r2, [r0, #40]	; 0x28
   d6986:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d698a:	4770      	bx	lr
   d698c:	000dc250 	.word	0x000dc250
   d6990:	000d6cd5 	.word	0x000d6cd5
   d6994:	000d68af 	.word	0x000d68af
   d6998:	000d6865 	.word	0x000d6865

000d699c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d699c:	b510      	push	{r4, lr}
   d699e:	4b04      	ldr	r3, [pc, #16]	; (d69b0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d69a0:	4604      	mov	r4, r0
   d69a2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d69a6:	f7fd fc7b 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
}
   d69aa:	4620      	mov	r0, r4
   d69ac:	bd10      	pop	{r4, pc}
   d69ae:	bf00      	nop
   d69b0:	000dc250 	.word	0x000dc250

000d69b4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d69b4:	b510      	push	{r4, lr}
   d69b6:	4b03      	ldr	r3, [pc, #12]	; (d69c4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d69b8:	6003      	str	r3, [r0, #0]
   d69ba:	4604      	mov	r4, r0
   d69bc:	f7ff ffee 	bl	d699c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd10      	pop	{r4, pc}
   d69c4:	000dc278 	.word	0x000dc278

000d69c8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d69c8:	b510      	push	{r4, lr}
   d69ca:	4604      	mov	r4, r0
}
   d69cc:	f7ff fff2 	bl	d69b4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d69d0:	4620      	mov	r0, r4
   d69d2:	2138      	movs	r1, #56	; 0x38
   d69d4:	f002 f8b5 	bl	d8b42 <_ZdlPvj>
   d69d8:	4620      	mov	r0, r4
   d69da:	bd10      	pop	{r4, pc}

000d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d69dc:	6880      	ldr	r0, [r0, #8]
   d69de:	f000 ba6f 	b.w	d6ec0 <os_mutex_lock>

000d69e2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d69e2:	6880      	ldr	r0, [r0, #8]
   d69e4:	f000 ba74 	b.w	d6ed0 <os_mutex_unlock>

000d69e8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d69e8:	b510      	push	{r4, lr}
   d69ea:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d69ec:	6800      	ldr	r0, [r0, #0]
   d69ee:	f7ff fff8 	bl	d69e2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d69f2:	4620      	mov	r0, r4
   d69f4:	bd10      	pop	{r4, pc}

000d69f6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d69f6:	b513      	push	{r0, r1, r4, lr}
   d69f8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d69fa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d69fc:	f7ff ffee 	bl	d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6a02:	88dc      	ldrh	r4, [r3, #6]
   d6a04:	b2a4      	uxth	r4, r4
   d6a06:	b10c      	cbz	r4, d6a0c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6a08:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d6a0c:	a801      	add	r0, sp, #4
   d6a0e:	f7ff ffeb 	bl	d69e8 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6a12:	4620      	mov	r0, r4
   d6a14:	b002      	add	sp, #8
   d6a16:	bd10      	pop	{r4, pc}

000d6a18 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6a18:	b513      	push	{r0, r1, r4, lr}
   d6a1a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6a1c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6a1e:	f7ff ffdd 	bl	d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6a22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6a26:	b943      	cbnz	r3, d6a3a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d6a2a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d6a2c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d6a2e:	a801      	add	r0, sp, #4
   d6a30:	f7ff ffda 	bl	d69e8 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6a34:	4620      	mov	r0, r4
   d6a36:	b002      	add	sp, #8
   d6a38:	bd10      	pop	{r4, pc}
	bool result = false;
   d6a3a:	2400      	movs	r4, #0
   d6a3c:	e7f7      	b.n	d6a2e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d6a3e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6a3e:	b513      	push	{r0, r1, r4, lr}
   d6a40:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6a42:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6a44:	f7ff ffca 	bl	d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d6a4a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d6a4c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d6a4e:	f7ff ffcb 	bl	d69e8 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6a52:	4620      	mov	r0, r4
   d6a54:	b002      	add	sp, #8
   d6a56:	bd10      	pop	{r4, pc}

000d6a58 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a5c:	4699      	mov	r9, r3
   d6a5e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d6a60:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6a64:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6a68:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6a6c:	4604      	mov	r4, r0
   d6a6e:	460f      	mov	r7, r1
   d6a70:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6a72:	b913      	cbnz	r3, d6a7a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6a74:	6803      	ldr	r3, [r0, #0]
   d6a76:	689b      	ldr	r3, [r3, #8]
   d6a78:	4798      	blx	r3
		data = "";
   d6a7a:	4b31      	ldr	r3, [pc, #196]	; (d6b40 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a7c:	4638      	mov	r0, r7
		data = "";
   d6a7e:	2e00      	cmp	r6, #0
   d6a80:	bf08      	it	eq
   d6a82:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a84:	f002 ff55 	bl	d9932 <strlen>
   d6a88:	4605      	mov	r5, r0
   d6a8a:	4630      	mov	r0, r6
   d6a8c:	f002 ff51 	bl	d9932 <strlen>
   d6a90:	4428      	add	r0, r5
   d6a92:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6a96:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6a98:	bf1c      	itt	ne
   d6a9a:	f025 0503 	bicne.w	r5, r5, #3
   d6a9e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6aa0:	4633      	mov	r3, r6
   d6aa2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d6aa6:	e9cd 9a00 	strd	r9, sl, [sp]
   d6aaa:	4926      	ldr	r1, [pc, #152]	; (d6b44 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6aac:	4826      	ldr	r0, [pc, #152]	; (d6b48 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6aae:	463a      	mov	r2, r7
   d6ab0:	f7ff f9a4 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6ab4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6ab6:	3b08      	subs	r3, #8
   d6ab8:	42ab      	cmp	r3, r5
   d6aba:	d212      	bcs.n	d6ae2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d6abc:	2400      	movs	r4, #0
}
   d6abe:	4620      	mov	r0, r4
   d6ac0:	b006      	add	sp, #24
   d6ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d6ac6:	88cb      	ldrh	r3, [r1, #6]
   d6ac8:	2b01      	cmp	r3, #1
   d6aca:	d036      	beq.n	d6b3a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d6acc:	a805      	add	r0, sp, #20
   d6ace:	f7ff ff8b 	bl	d69e8 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d6ad2:	6823      	ldr	r3, [r4, #0]
   d6ad4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6ad8:	699b      	ldr	r3, [r3, #24]
   d6ada:	4620      	mov	r0, r4
   d6adc:	4798      	blx	r3
   d6ade:	2800      	cmp	r0, #0
   d6ae0:	d0ec      	beq.n	d6abc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6ae2:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6ae4:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6ae6:	f7ff ff79 	bl	d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6aea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6aec:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d6aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6af0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6af2:	1ad2      	subs	r2, r2, r3
   d6af4:	42aa      	cmp	r2, r5
   d6af6:	d3e6      	bcc.n	d6ac6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6af8:	ea48 080a 	orr.w	r8, r8, sl
   d6afc:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6b00:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6b06:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d6b0a:	4639      	mov	r1, r7
   d6b0c:	4640      	mov	r0, r8
   d6b0e:	f002 feeb 	bl	d98e8 <strcpy>
				cp += strlen(cp) + 1;
   d6b12:	4640      	mov	r0, r8
   d6b14:	f002 ff0d 	bl	d9932 <strlen>
   d6b18:	3001      	adds	r0, #1
				strcpy(cp, data);
   d6b1a:	4631      	mov	r1, r6
   d6b1c:	4440      	add	r0, r8
   d6b1e:	f002 fee3 	bl	d98e8 <strcpy>
				nextFree += size;
   d6b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6b24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6b26:	441d      	add	r5, r3
   d6b28:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d6b2a:	88d3      	ldrh	r3, [r2, #6]
   d6b2c:	3301      	adds	r3, #1
   d6b2e:	80d3      	strh	r3, [r2, #6]
				return true;
   d6b30:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6b32:	a805      	add	r0, sp, #20
   d6b34:	f7ff ff58 	bl	d69e8 <_ZN11StMutexLockD1Ev>
   d6b38:	e7c1      	b.n	d6abe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d6b3a:	2400      	movs	r4, #0
   d6b3c:	e7f9      	b.n	d6b32 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d6b3e:	bf00      	nop
   d6b40:	000dc45c 	.word	0x000dc45c
   d6b44:	000dc19e 	.word	0x000dc19e
   d6b48:	2003e604 	.word	0x2003e604

000d6b4c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b50:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6b54:	69a3      	ldr	r3, [r4, #24]
   d6b56:	b90b      	cbnz	r3, d6b5c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6b58:	f001 fff9 	bl	d8b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b5c:	69e3      	ldr	r3, [r4, #28]
   d6b5e:	4621      	mov	r1, r4
   d6b60:	4628      	mov	r0, r5
   d6b62:	4798      	blx	r3
		os_thread_yield();
   d6b64:	f000 f974 	bl	d6e50 <os_thread_yield>
	while(true) {
   d6b68:	e7f4      	b.n	d6b54 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6b6a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6b6a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6b6c:	f7ff ffee 	bl	d6b4c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6b70 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b70:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d6b72:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b76:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b78:	4628      	mov	r0, r5
   d6b7a:	f002 feda 	bl	d9932 <strlen>
   d6b7e:	3001      	adds	r0, #1
   d6b80:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b82:	4628      	mov	r0, r5
   d6b84:	f002 fed5 	bl	d9932 <strlen>
	size_t offset = start - retainedBuffer;
   d6b88:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b8a:	3001      	adds	r0, #1
   d6b8c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d6b8e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d6b90:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6b94:	bf1c      	itt	ne
   d6b96:	f1c3 0304 	rsbne	r3, r3, #4
   d6b9a:	18c0      	addne	r0, r0, r3
}
   d6b9c:	bd68      	pop	{r3, r5, r6, pc}

000d6b9e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6ba0:	4604      	mov	r4, r0
   d6ba2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6ba4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6ba6:	f7ff ff19 	bl	d69dc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6baa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6bac:	88fb      	ldrh	r3, [r7, #6]
   d6bae:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d6bb2:	b1e6      	cbz	r6, d6bee <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d6bb4:	2b01      	cmp	r3, #1
   d6bb6:	d922      	bls.n	d6bfe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d6bb8:	4629      	mov	r1, r5
   d6bba:	4620      	mov	r0, r4
   d6bbc:	f7ff ffd8 	bl	d6b70 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6bc0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d6bc2:	4629      	mov	r1, r5
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	f7ff ffd3 	bl	d6b70 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6bca:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d6bcc:	443a      	add	r2, r7
	if (after > 0) {
   d6bce:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d6bd0:	4601      	mov	r1, r0
	size_t len = next - start;
   d6bd2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d6bd6:	d002      	beq.n	d6bde <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f002 fe35 	bl	d9848 <memmove>
	nextFree -= len;
   d6bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6be0:	1b9b      	subs	r3, r3, r6
   d6be2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d6be4:	88fb      	ldrh	r3, [r7, #6]
   d6be6:	3b01      	subs	r3, #1
   d6be8:	80fb      	strh	r3, [r7, #6]
	return true;
   d6bea:	2601      	movs	r6, #1
   d6bec:	e001      	b.n	d6bf2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d6bee:	2b00      	cmp	r3, #0
   d6bf0:	d1e7      	bne.n	d6bc2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d6bf2:	a801      	add	r0, sp, #4
   d6bf4:	f7ff fef8 	bl	d69e8 <_ZN11StMutexLockD1Ev>
}
   d6bf8:	4630      	mov	r0, r6
   d6bfa:	b003      	add	sp, #12
   d6bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d6bfe:	2600      	movs	r6, #0
   d6c00:	e7f7      	b.n	d6bf2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6c04 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c08:	460d      	mov	r5, r1
   d6c0a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6c0c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6c0e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6c10:	f7ff fea8 	bl	d6964 <_ZN21PublishQueueAsyncBaseC1Ev>
   d6c14:	4b15      	ldr	r3, [pc, #84]	; (d6c6c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6c16:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6c1a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6c1c:	4b14      	ldr	r3, [pc, #80]	; (d6c70 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6c1e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6c20:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6c22:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6c24:	4698      	mov	r8, r3
   d6c26:	d117      	bne.n	d6c58 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6c28:	88ab      	ldrh	r3, [r5, #4]
   d6c2a:	b29b      	uxth	r3, r3
   d6c2c:	42b3      	cmp	r3, r6
   d6c2e:	d113      	bne.n	d6c58 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6c30:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6c34:	6367      	str	r7, [r4, #52]	; 0x34
   d6c36:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6c3a:	88eb      	ldrh	r3, [r5, #6]
   d6c3c:	fa1f f289 	uxth.w	r2, r9
   d6c40:	b29b      	uxth	r3, r3
   d6c42:	429a      	cmp	r2, r3
   d6c44:	d20e      	bcs.n	d6c64 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6c48:	4620      	mov	r0, r4
   d6c4a:	f7ff ff91 	bl	d6b70 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6c4e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6c50:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6c52:	f109 0901 	add.w	r9, r9, #1
   d6c56:	d9f0      	bls.n	d6c3a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6c58:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6c5a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6c5e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6c60:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6c62:	80eb      	strh	r3, [r5, #6]
}
   d6c64:	4620      	mov	r0, r4
   d6c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c6a:	bf00      	nop
   d6c6c:	000dc278 	.word	0x000dc278
   d6c70:	d19cab61 	.word	0xd19cab61

000d6c74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6c74:	b510      	push	{r4, lr}
   d6c76:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6c7a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6c7c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6c7e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6c80:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6c82:	b90a      	cbnz	r2, d6c88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6c84:	07d9      	lsls	r1, r3, #31
   d6c86:	d505      	bpl.n	d6c94 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6c8c:	4b0f      	ldr	r3, [pc, #60]	; (d6ccc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6c8e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6c90:	4b0f      	ldr	r3, [pc, #60]	; (d6cd0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6c92:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c94:	ab02      	add	r3, sp, #8
   d6c96:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c9a:	466a      	mov	r2, sp
   d6c9c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6ca4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cac:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cae:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6cb2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cb4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cb6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6cb8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6cba:	4618      	mov	r0, r3
   d6cbc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cbe:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6cc0:	9105      	str	r1, [sp, #20]
   d6cc2:	f7fd faed 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	}
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	b006      	add	sp, #24
   d6cca:	bd10      	pop	{r4, pc}
   d6ccc:	000d68af 	.word	0x000d68af
   d6cd0:	000d6865 	.word	0x000d6865

000d6cd4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d6cd4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6cd6:	4b05      	ldr	r3, [pc, #20]	; (d6cec <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6cd8:	9300      	str	r3, [sp, #0]
   d6cda:	4669      	mov	r1, sp
   d6cdc:	2300      	movs	r3, #0
   d6cde:	3010      	adds	r0, #16
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	f7ff ffc7 	bl	d6c74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6ce6:	b003      	add	sp, #12
   d6ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   d6cec:	000d6d1d 	.word	0x000d6d1d

000d6cf0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6cf0:	b513      	push	{r0, r1, r4, lr}
   d6cf2:	4604      	mov	r4, r0
   d6cf4:	f000 f934 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6cfa:	1ac0      	subs	r0, r0, r3
   d6cfc:	68e3      	ldr	r3, [r4, #12]
   d6cfe:	4298      	cmp	r0, r3
   d6d00:	d308      	bcc.n	d6d14 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6d02:	4b05      	ldr	r3, [pc, #20]	; (d6d18 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6d04:	9300      	str	r3, [sp, #0]
   d6d06:	4669      	mov	r1, sp
   d6d08:	2300      	movs	r3, #0
   d6d0a:	f104 0010 	add.w	r0, r4, #16
   d6d0e:	9301      	str	r3, [sp, #4]
   d6d10:	f7ff ffb0 	bl	d6c74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6d14:	b002      	add	sp, #8
   d6d16:	bd10      	pop	{r4, pc}
   d6d18:	000d6d1d 	.word	0x000d6d1d

000d6d1c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d6d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6d20:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6d24:	b086      	sub	sp, #24
   d6d26:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6d28:	2b00      	cmp	r3, #0
   d6d2a:	d164      	bne.n	d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6d2c:	f000 fb06 	bl	d733c <spark_cloud_flag_connected>
   d6d30:	2800      	cmp	r0, #0
   d6d32:	d060      	beq.n	d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6d34:	f000 f914 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
   d6d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6d3a:	1ac0      	subs	r0, r0, r3
   d6d3c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6d40:	4298      	cmp	r0, r3
   d6d42:	d958      	bls.n	d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6d44:	6823      	ldr	r3, [r4, #0]
   d6d46:	4620      	mov	r0, r4
   d6d48:	695b      	ldr	r3, [r3, #20]
   d6d4a:	4798      	blx	r3
		if (data) {
   d6d4c:	4605      	mov	r5, r0
   d6d4e:	2800      	cmp	r0, #0
   d6d50:	d051      	beq.n	d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6d52:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6d56:	2301      	movs	r3, #1
   d6d58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d6d5c:	4638      	mov	r0, r7
   d6d5e:	f002 fde8 	bl	d9932 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6d62:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d66:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d6d6a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d6c:	682b      	ldr	r3, [r5, #0]
   d6d6e:	492b      	ldr	r1, [pc, #172]	; (d6e1c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6d70:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6d72:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d74:	4633      	mov	r3, r6
   d6d76:	482a      	ldr	r0, [pc, #168]	; (d6e20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d78:	463a      	mov	r2, r7
   d6d7a:	f7ff f83f 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6d7e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6d80:	f88d 8000 	strb.w	r8, [sp]
   d6d84:	4632      	mov	r2, r6
   d6d86:	4639      	mov	r1, r7
   d6d88:	a802      	add	r0, sp, #8
   d6d8a:	f000 fd9d 	bl	d78c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6d8e:	9d02      	ldr	r5, [sp, #8]
   d6d90:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d6d92:	b91b      	cbnz	r3, d6d9c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6d94:	2001      	movs	r0, #1
   d6d96:	f000 fbe1 	bl	d755c <delay>
			while(!request.isDone()) {
   d6d9a:	e7f8      	b.n	d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d9c:	2000      	movs	r0, #0
   d6d9e:	f000 fa6f 	bl	d7280 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6da2:	b120      	cbz	r0, d6dae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6da4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6da6:	b913      	cbnz	r3, d6dae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d6da8:	f000 fab8 	bl	d731c <spark_process>
    }
   d6dac:	e7fa      	b.n	d6da4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6dae:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d6db0:	2b01      	cmp	r3, #1
   d6db2:	d123      	bne.n	d6dfc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d6db4:	491b      	ldr	r1, [pc, #108]	; (d6e24 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6db6:	481a      	ldr	r0, [pc, #104]	; (d6e20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6db8:	f7ff f820 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6dbc:	6823      	ldr	r3, [r4, #0]
   d6dbe:	2100      	movs	r1, #0
   d6dc0:	699b      	ldr	r3, [r3, #24]
   d6dc2:	4620      	mov	r0, r4
   d6dc4:	4798      	blx	r3
			isSending = false;
   d6dc6:	2300      	movs	r3, #0
   d6dc8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6dcc:	f000 f8c8 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6dd0:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d6dd2:	9c03      	ldr	r4, [sp, #12]
   d6dd4:	b17c      	cbz	r4, d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d6dd6:	6863      	ldr	r3, [r4, #4]
   d6dd8:	3b01      	subs	r3, #1
   d6dda:	6063      	str	r3, [r4, #4]
   d6ddc:	b95b      	cbnz	r3, d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d6dde:	6823      	ldr	r3, [r4, #0]
   d6de0:	4620      	mov	r0, r4
   d6de2:	689b      	ldr	r3, [r3, #8]
   d6de4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6de6:	68a3      	ldr	r3, [r4, #8]
   d6de8:	3b01      	subs	r3, #1
   d6dea:	60a3      	str	r3, [r4, #8]
   d6dec:	b91b      	cbnz	r3, d6df6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6dee:	6823      	ldr	r3, [r4, #0]
   d6df0:	4620      	mov	r0, r4
   d6df2:	68db      	ldr	r3, [r3, #12]
   d6df4:	4798      	blx	r3
}
   d6df6:	b006      	add	sp, #24
   d6df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6dfc:	68e2      	ldr	r2, [r4, #12]
   d6dfe:	490a      	ldr	r1, [pc, #40]	; (d6e28 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6e00:	4807      	ldr	r0, [pc, #28]	; (d6e20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6e02:	f7fe fffb 	bl	d5dfc <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6e06:	4b09      	ldr	r3, [pc, #36]	; (d6e2c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6e08:	9304      	str	r3, [sp, #16]
   d6e0a:	a904      	add	r1, sp, #16
   d6e0c:	2300      	movs	r3, #0
   d6e0e:	f104 0010 	add.w	r0, r4, #16
   d6e12:	9305      	str	r3, [sp, #20]
   d6e14:	f7ff ff2e 	bl	d6c74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6e18:	e7d5      	b.n	d6dc6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6e1a:	bf00      	nop
   d6e1c:	000dc1df 	.word	0x000dc1df
   d6e20:	2003e604 	.word	0x2003e604
   d6e24:	000dc200 	.word	0x000dc200
   d6e28:	000dc217 	.word	0x000dc217
   d6e2c:	000d6cf1 	.word	0x000d6cf1

000d6e30 <_GLOBAL__sub_I_pubqLogger>:
   d6e30:	4b01      	ldr	r3, [pc, #4]	; (d6e38 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6e32:	4a02      	ldr	r2, [pc, #8]	; (d6e3c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6e34:	601a      	str	r2, [r3, #0]
}
   d6e36:	4770      	bx	lr
   d6e38:	2003e604 	.word	0x2003e604
   d6e3c:	000dc23e 	.word	0x000dc23e

000d6e40 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <os_thread_create+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	685b      	ldr	r3, [r3, #4]
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	00030248 	.word	0x00030248

000d6e50 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <os_thread_yield+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	68db      	ldr	r3, [r3, #12]
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	00030248 	.word	0x00030248

000d6e60 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <os_thread_scheduling+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	69db      	ldr	r3, [r3, #28]
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	00030248 	.word	0x00030248

000d6e70 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <os_timer_create+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	6a1b      	ldr	r3, [r3, #32]
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	00030248 	.word	0x00030248

000d6e80 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <os_timer_destroy+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030248 	.word	0x00030248

000d6e90 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <os_timer_get_id+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030248 	.word	0x00030248

000d6ea0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <os_timer_change+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030248 	.word	0x00030248

000d6eb0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <os_mutex_create+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030248 	.word	0x00030248

000d6ec0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <os_mutex_lock+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030248 	.word	0x00030248

000d6ed0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <os_mutex_unlock+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030248 	.word	0x00030248

000d6ee0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <os_mutex_recursive_create+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030248 	.word	0x00030248

000d6ef0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <os_mutex_recursive_destroy+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030248 	.word	0x00030248

000d6f00 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <os_thread_exit+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030248 	.word	0x00030248

000d6f10 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <os_timer_set_id+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030248 	.word	0x00030248

000d6f20 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <HAL_Feature_Set+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030234 	.word	0x00030234

000d6f30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <HAL_RNG_GetRandomNumber+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	685b      	ldr	r3, [r3, #4]
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	00030218 	.word	0x00030218

000d6f40 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <HAL_Delay_Milliseconds+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	689b      	ldr	r3, [r3, #8]
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	00030218 	.word	0x00030218

000d6f50 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <HAL_Delay_Microseconds+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	68db      	ldr	r3, [r3, #12]
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	00030218 	.word	0x00030218

000d6f60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	695b      	ldr	r3, [r3, #20]
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	00030218 	.word	0x00030218

000d6f70 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <hal_rtc_time_is_valid+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	00030218 	.word	0x00030218

000d6f80 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <hal_timer_millis+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030218 	.word	0x00030218

000d6f90 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <hal_rtc_get_time+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030218 	.word	0x00030218

000d6fa0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <hal_rtc_set_time+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	00030218 	.word	0x00030218

000d6fb0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <HAL_Validate_Pin_Function+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	685b      	ldr	r3, [r3, #4]
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	0003022c 	.word	0x0003022c

000d6fc0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <HAL_Pin_Mode+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	689b      	ldr	r3, [r3, #8]
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	0003022c 	.word	0x0003022c

000d6fd0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <HAL_Get_Pin_Mode+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	68db      	ldr	r3, [r3, #12]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	0003022c 	.word	0x0003022c

000d6fe0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <HAL_GPIO_Write+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	691b      	ldr	r3, [r3, #16]
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	0003022c 	.word	0x0003022c

000d6ff0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <HAL_Interrupts_Attach+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	699b      	ldr	r3, [r3, #24]
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	0003022c 	.word	0x0003022c

000d7000 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <HAL_Interrupts_Detach+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	69db      	ldr	r3, [r3, #28]
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	0003022c 	.word	0x0003022c

000d7010 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <hal_adc_read+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	0003022c 	.word	0x0003022c

000d7020 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <hal_i2c_begin+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	68db      	ldr	r3, [r3, #12]
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	00030228 	.word	0x00030228

000d7030 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b02      	ldr	r3, [pc, #8]	; (d703c <hal_i2c_begin_transmission+0xc>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	699b      	ldr	r3, [r3, #24]
   d7038:	9301      	str	r3, [sp, #4]
   d703a:	bd08      	pop	{r3, pc}
   d703c:	00030228 	.word	0x00030228

000d7040 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7040:	b508      	push	{r3, lr}
   d7042:	4b02      	ldr	r3, [pc, #8]	; (d704c <hal_i2c_end_transmission+0xc>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	69db      	ldr	r3, [r3, #28]
   d7048:	9301      	str	r3, [sp, #4]
   d704a:	bd08      	pop	{r3, pc}
   d704c:	00030228 	.word	0x00030228

000d7050 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b02      	ldr	r3, [pc, #8]	; (d705c <hal_i2c_write+0xc>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	6a1b      	ldr	r3, [r3, #32]
   d7058:	9301      	str	r3, [sp, #4]
   d705a:	bd08      	pop	{r3, pc}
   d705c:	00030228 	.word	0x00030228

000d7060 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7060:	b508      	push	{r3, lr}
   d7062:	4b02      	ldr	r3, [pc, #8]	; (d706c <hal_i2c_available+0xc>)
   d7064:	681b      	ldr	r3, [r3, #0]
   d7066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7068:	9301      	str	r3, [sp, #4]
   d706a:	bd08      	pop	{r3, pc}
   d706c:	00030228 	.word	0x00030228

000d7070 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7070:	b508      	push	{r3, lr}
   d7072:	4b02      	ldr	r3, [pc, #8]	; (d707c <hal_i2c_read+0xc>)
   d7074:	681b      	ldr	r3, [r3, #0]
   d7076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7078:	9301      	str	r3, [sp, #4]
   d707a:	bd08      	pop	{r3, pc}
   d707c:	00030228 	.word	0x00030228

000d7080 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7080:	b508      	push	{r3, lr}
   d7082:	4b02      	ldr	r3, [pc, #8]	; (d708c <hal_i2c_peek+0xc>)
   d7084:	681b      	ldr	r3, [r3, #0]
   d7086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	bd08      	pop	{r3, pc}
   d708c:	00030228 	.word	0x00030228

000d7090 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7090:	b508      	push	{r3, lr}
   d7092:	4b02      	ldr	r3, [pc, #8]	; (d709c <hal_i2c_flush+0xc>)
   d7094:	681b      	ldr	r3, [r3, #0]
   d7096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7098:	9301      	str	r3, [sp, #4]
   d709a:	bd08      	pop	{r3, pc}
   d709c:	00030228 	.word	0x00030228

000d70a0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d70a0:	b508      	push	{r3, lr}
   d70a2:	4b02      	ldr	r3, [pc, #8]	; (d70ac <hal_i2c_is_enabled+0xc>)
   d70a4:	681b      	ldr	r3, [r3, #0]
   d70a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d70a8:	9301      	str	r3, [sp, #4]
   d70aa:	bd08      	pop	{r3, pc}
   d70ac:	00030228 	.word	0x00030228

000d70b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d70b0:	b508      	push	{r3, lr}
   d70b2:	4b02      	ldr	r3, [pc, #8]	; (d70bc <hal_i2c_init+0xc>)
   d70b4:	681b      	ldr	r3, [r3, #0]
   d70b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d70b8:	9301      	str	r3, [sp, #4]
   d70ba:	bd08      	pop	{r3, pc}
   d70bc:	00030228 	.word	0x00030228

000d70c0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d70c0:	b508      	push	{r3, lr}
   d70c2:	4b02      	ldr	r3, [pc, #8]	; (d70cc <hal_i2c_lock+0xc>)
   d70c4:	681b      	ldr	r3, [r3, #0]
   d70c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d70c8:	9301      	str	r3, [sp, #4]
   d70ca:	bd08      	pop	{r3, pc}
   d70cc:	00030228 	.word	0x00030228

000d70d0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d70d0:	b508      	push	{r3, lr}
   d70d2:	4b02      	ldr	r3, [pc, #8]	; (d70dc <hal_i2c_unlock+0xc>)
   d70d4:	681b      	ldr	r3, [r3, #0]
   d70d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d70d8:	9301      	str	r3, [sp, #4]
   d70da:	bd08      	pop	{r3, pc}
   d70dc:	00030228 	.word	0x00030228

000d70e0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d70e0:	b508      	push	{r3, lr}
   d70e2:	4b02      	ldr	r3, [pc, #8]	; (d70ec <hal_i2c_request_ex+0xc>)
   d70e4:	681b      	ldr	r3, [r3, #0]
   d70e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d70e8:	9301      	str	r3, [sp, #4]
   d70ea:	bd08      	pop	{r3, pc}
   d70ec:	00030228 	.word	0x00030228

000d70f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <inet_inet_ntop+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	695b      	ldr	r3, [r3, #20]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	00030264 	.word	0x00030264

000d7100 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <netdb_freeaddrinfo+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	689b      	ldr	r3, [r3, #8]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	00030268 	.word	0x00030268

000d7110 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <netdb_getaddrinfo+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	68db      	ldr	r3, [r3, #12]
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	00030268 	.word	0x00030268

000d7120 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <hal_spi_init+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	69db      	ldr	r3, [r3, #28]
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	00030230 	.word	0x00030230

000d7130 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b02      	ldr	r3, [pc, #8]	; (d713c <hal_spi_is_enabled+0xc>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	6a1b      	ldr	r3, [r3, #32]
   d7138:	9301      	str	r3, [sp, #4]
   d713a:	bd08      	pop	{r3, pc}
   d713c:	00030230 	.word	0x00030230

000d7140 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7140:	b508      	push	{r3, lr}
   d7142:	4b02      	ldr	r3, [pc, #8]	; (d714c <hal_usart_init+0xc>)
   d7144:	681b      	ldr	r3, [r3, #0]
   d7146:	681b      	ldr	r3, [r3, #0]
   d7148:	9301      	str	r3, [sp, #4]
   d714a:	bd08      	pop	{r3, pc}
   d714c:	0003023c 	.word	0x0003023c

000d7150 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7150:	b508      	push	{r3, lr}
   d7152:	4b02      	ldr	r3, [pc, #8]	; (d715c <hal_usart_write+0xc>)
   d7154:	681b      	ldr	r3, [r3, #0]
   d7156:	68db      	ldr	r3, [r3, #12]
   d7158:	9301      	str	r3, [sp, #4]
   d715a:	bd08      	pop	{r3, pc}
   d715c:	0003023c 	.word	0x0003023c

000d7160 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7160:	b508      	push	{r3, lr}
   d7162:	4b02      	ldr	r3, [pc, #8]	; (d716c <hal_usart_available+0xc>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	691b      	ldr	r3, [r3, #16]
   d7168:	9301      	str	r3, [sp, #4]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	0003023c 	.word	0x0003023c

000d7170 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7170:	b508      	push	{r3, lr}
   d7172:	4b02      	ldr	r3, [pc, #8]	; (d717c <hal_usart_read+0xc>)
   d7174:	681b      	ldr	r3, [r3, #0]
   d7176:	695b      	ldr	r3, [r3, #20]
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	bd08      	pop	{r3, pc}
   d717c:	0003023c 	.word	0x0003023c

000d7180 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7180:	b508      	push	{r3, lr}
   d7182:	4b02      	ldr	r3, [pc, #8]	; (d718c <hal_usart_peek+0xc>)
   d7184:	681b      	ldr	r3, [r3, #0]
   d7186:	699b      	ldr	r3, [r3, #24]
   d7188:	9301      	str	r3, [sp, #4]
   d718a:	bd08      	pop	{r3, pc}
   d718c:	0003023c 	.word	0x0003023c

000d7190 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7190:	b508      	push	{r3, lr}
   d7192:	4b02      	ldr	r3, [pc, #8]	; (d719c <hal_usart_flush+0xc>)
   d7194:	681b      	ldr	r3, [r3, #0]
   d7196:	69db      	ldr	r3, [r3, #28]
   d7198:	9301      	str	r3, [sp, #4]
   d719a:	bd08      	pop	{r3, pc}
   d719c:	0003023c 	.word	0x0003023c

000d71a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d71a0:	b508      	push	{r3, lr}
   d71a2:	4b02      	ldr	r3, [pc, #8]	; (d71ac <hal_usart_is_enabled+0xc>)
   d71a4:	681b      	ldr	r3, [r3, #0]
   d71a6:	6a1b      	ldr	r3, [r3, #32]
   d71a8:	9301      	str	r3, [sp, #4]
   d71aa:	bd08      	pop	{r3, pc}
   d71ac:	0003023c 	.word	0x0003023c

000d71b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d71b0:	b508      	push	{r3, lr}
   d71b2:	4b02      	ldr	r3, [pc, #8]	; (d71bc <hal_usart_available_data_for_write+0xc>)
   d71b4:	681b      	ldr	r3, [r3, #0]
   d71b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d71b8:	9301      	str	r3, [sp, #4]
   d71ba:	bd08      	pop	{r3, pc}
   d71bc:	0003023c 	.word	0x0003023c

000d71c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d71c0:	b508      	push	{r3, lr}
   d71c2:	4b02      	ldr	r3, [pc, #8]	; (d71cc <HAL_USB_USART_Init+0xc>)
   d71c4:	681b      	ldr	r3, [r3, #0]
   d71c6:	681b      	ldr	r3, [r3, #0]
   d71c8:	9301      	str	r3, [sp, #4]
   d71ca:	bd08      	pop	{r3, pc}
   d71cc:	0003024c 	.word	0x0003024c

000d71d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d71d0:	b508      	push	{r3, lr}
   d71d2:	4b02      	ldr	r3, [pc, #8]	; (d71dc <HAL_USB_USART_Available_Data+0xc>)
   d71d4:	681b      	ldr	r3, [r3, #0]
   d71d6:	691b      	ldr	r3, [r3, #16]
   d71d8:	9301      	str	r3, [sp, #4]
   d71da:	bd08      	pop	{r3, pc}
   d71dc:	0003024c 	.word	0x0003024c

000d71e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d71e0:	b508      	push	{r3, lr}
   d71e2:	4b02      	ldr	r3, [pc, #8]	; (d71ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d71e4:	681b      	ldr	r3, [r3, #0]
   d71e6:	695b      	ldr	r3, [r3, #20]
   d71e8:	9301      	str	r3, [sp, #4]
   d71ea:	bd08      	pop	{r3, pc}
   d71ec:	0003024c 	.word	0x0003024c

000d71f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d71f0:	b508      	push	{r3, lr}
   d71f2:	4b02      	ldr	r3, [pc, #8]	; (d71fc <HAL_USB_USART_Receive_Data+0xc>)
   d71f4:	681b      	ldr	r3, [r3, #0]
   d71f6:	699b      	ldr	r3, [r3, #24]
   d71f8:	9301      	str	r3, [sp, #4]
   d71fa:	bd08      	pop	{r3, pc}
   d71fc:	0003024c 	.word	0x0003024c

000d7200 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7200:	b508      	push	{r3, lr}
   d7202:	4b02      	ldr	r3, [pc, #8]	; (d720c <HAL_USB_USART_Send_Data+0xc>)
   d7204:	681b      	ldr	r3, [r3, #0]
   d7206:	69db      	ldr	r3, [r3, #28]
   d7208:	9301      	str	r3, [sp, #4]
   d720a:	bd08      	pop	{r3, pc}
   d720c:	0003024c 	.word	0x0003024c

000d7210 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7210:	b508      	push	{r3, lr}
   d7212:	4b02      	ldr	r3, [pc, #8]	; (d721c <HAL_USB_USART_Flush_Data+0xc>)
   d7214:	681b      	ldr	r3, [r3, #0]
   d7216:	6a1b      	ldr	r3, [r3, #32]
   d7218:	9301      	str	r3, [sp, #4]
   d721a:	bd08      	pop	{r3, pc}
   d721c:	0003024c 	.word	0x0003024c

000d7220 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7220:	b508      	push	{r3, lr}
   d7222:	4b02      	ldr	r3, [pc, #8]	; (d722c <panic_+0xc>)
   d7224:	681b      	ldr	r3, [r3, #0]
   d7226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7228:	9301      	str	r3, [sp, #4]
   d722a:	bd08      	pop	{r3, pc}
   d722c:	00030260 	.word	0x00030260

000d7230 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7230:	b508      	push	{r3, lr}
   d7232:	4b02      	ldr	r3, [pc, #8]	; (d723c <log_message_v+0xc>)
   d7234:	681b      	ldr	r3, [r3, #0]
   d7236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7238:	9301      	str	r3, [sp, #4]
   d723a:	bd08      	pop	{r3, pc}
   d723c:	00030260 	.word	0x00030260

000d7240 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7240:	b508      	push	{r3, lr}
   d7242:	4b02      	ldr	r3, [pc, #8]	; (d724c <system_mode+0xc>)
   d7244:	681b      	ldr	r3, [r3, #0]
   d7246:	681b      	ldr	r3, [r3, #0]
   d7248:	9301      	str	r3, [sp, #4]
   d724a:	bd08      	pop	{r3, pc}
   d724c:	00030220 	.word	0x00030220

000d7250 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7250:	b508      	push	{r3, lr}
   d7252:	4b02      	ldr	r3, [pc, #8]	; (d725c <set_system_mode+0xc>)
   d7254:	681b      	ldr	r3, [r3, #0]
   d7256:	685b      	ldr	r3, [r3, #4]
   d7258:	9301      	str	r3, [sp, #4]
   d725a:	bd08      	pop	{r3, pc}
   d725c:	00030220 	.word	0x00030220

000d7260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7260:	b508      	push	{r3, lr}
   d7262:	4b02      	ldr	r3, [pc, #8]	; (d726c <system_delay_ms+0xc>)
   d7264:	681b      	ldr	r3, [r3, #0]
   d7266:	695b      	ldr	r3, [r3, #20]
   d7268:	9301      	str	r3, [sp, #4]
   d726a:	bd08      	pop	{r3, pc}
   d726c:	00030220 	.word	0x00030220

000d7270 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7270:	b508      	push	{r3, lr}
   d7272:	4b02      	ldr	r3, [pc, #8]	; (d727c <system_thread_set_state+0xc>)
   d7274:	681b      	ldr	r3, [r3, #0]
   d7276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7278:	9301      	str	r3, [sp, #4]
   d727a:	bd08      	pop	{r3, pc}
   d727c:	00030220 	.word	0x00030220

000d7280 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7280:	b508      	push	{r3, lr}
   d7282:	4b02      	ldr	r3, [pc, #8]	; (d728c <application_thread_current+0xc>)
   d7284:	681b      	ldr	r3, [r3, #0]
   d7286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7288:	9301      	str	r3, [sp, #4]
   d728a:	bd08      	pop	{r3, pc}
   d728c:	00030220 	.word	0x00030220

000d7290 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7290:	b508      	push	{r3, lr}
   d7292:	4b02      	ldr	r3, [pc, #8]	; (d729c <application_thread_invoke+0xc>)
   d7294:	681b      	ldr	r3, [r3, #0]
   d7296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7298:	9301      	str	r3, [sp, #4]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	00030220 	.word	0x00030220

000d72a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d72a0:	b508      	push	{r3, lr}
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <system_thread_get_state+0xc>)
   d72a4:	681b      	ldr	r3, [r3, #0]
   d72a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	bd08      	pop	{r3, pc}
   d72ac:	00030220 	.word	0x00030220

000d72b0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d72b0:	b508      	push	{r3, lr}
   d72b2:	4b02      	ldr	r3, [pc, #8]	; (d72bc <system_notify_time_changed+0xc>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d72b8:	9301      	str	r3, [sp, #4]
   d72ba:	bd08      	pop	{r3, pc}
   d72bc:	00030220 	.word	0x00030220

000d72c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d72c0:	b508      	push	{r3, lr}
   d72c2:	4b03      	ldr	r3, [pc, #12]	; (d72d0 <system_ctrl_set_app_request_handler+0x10>)
   d72c4:	681b      	ldr	r3, [r3, #0]
   d72c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d72ca:	9301      	str	r3, [sp, #4]
   d72cc:	bd08      	pop	{r3, pc}
   d72ce:	0000      	.short	0x0000
   d72d0:	00030220 	.word	0x00030220

000d72d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d72d4:	b508      	push	{r3, lr}
   d72d6:	4b03      	ldr	r3, [pc, #12]	; (d72e4 <system_ctrl_set_result+0x10>)
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d72de:	9301      	str	r3, [sp, #4]
   d72e0:	bd08      	pop	{r3, pc}
   d72e2:	0000      	.short	0x0000
   d72e4:	00030220 	.word	0x00030220

000d72e8 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d72e8:	b508      	push	{r3, lr}
   d72ea:	4b03      	ldr	r3, [pc, #12]	; (d72f8 <system_reset+0x10>)
   d72ec:	681b      	ldr	r3, [r3, #0]
   d72ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d72f2:	9301      	str	r3, [sp, #4]
   d72f4:	bd08      	pop	{r3, pc}
   d72f6:	0000      	.short	0x0000
   d72f8:	00030220 	.word	0x00030220

000d72fc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <spark_variable+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	681b      	ldr	r3, [r3, #0]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030244 	.word	0x00030244

000d730c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <spark_function+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	685b      	ldr	r3, [r3, #4]
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030244 	.word	0x00030244

000d731c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <spark_process+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	689b      	ldr	r3, [r3, #8]
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030244 	.word	0x00030244

000d732c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <spark_cloud_flag_connect+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	68db      	ldr	r3, [r3, #12]
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030244 	.word	0x00030244

000d733c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <spark_cloud_flag_connected+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	695b      	ldr	r3, [r3, #20]
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030244 	.word	0x00030244

000d734c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <spark_deviceID+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	69db      	ldr	r3, [r3, #28]
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030244 	.word	0x00030244

000d735c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <spark_send_event+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	6a1b      	ldr	r3, [r3, #32]
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030244 	.word	0x00030244

000d736c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <spark_subscribe+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030244 	.word	0x00030244

000d737c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <spark_sync_time+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	00030244 	.word	0x00030244

000d738c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <spark_sync_time_pending+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	00030244 	.word	0x00030244

000d739c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <spark_sync_time_last+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	00030244 	.word	0x00030244

000d73ac <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <spark_set_connection_property+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	00030244 	.word	0x00030244

000d73bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030244 	.word	0x00030244

000d73cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <network_connect+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	685b      	ldr	r3, [r3, #4]
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030240 	.word	0x00030240

000d73dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <network_connecting+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	689b      	ldr	r3, [r3, #8]
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030240 	.word	0x00030240

000d73ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <network_disconnect+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	68db      	ldr	r3, [r3, #12]
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030240 	.word	0x00030240

000d73fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <network_ready+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	691b      	ldr	r3, [r3, #16]
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030240 	.word	0x00030240

000d740c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <network_on+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	695b      	ldr	r3, [r3, #20]
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030240 	.word	0x00030240

000d741c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <network_off+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	699b      	ldr	r3, [r3, #24]
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030240 	.word	0x00030240

000d742c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <network_listen+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	69db      	ldr	r3, [r3, #28]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030240 	.word	0x00030240

000d743c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <network_listening+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	6a1b      	ldr	r3, [r3, #32]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030240 	.word	0x00030240

000d744c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <network_set_listen_timeout+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	00030240 	.word	0x00030240

000d745c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <network_get_listen_timeout+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	00030240 	.word	0x00030240

000d746c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <network_is_on+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	00030240 	.word	0x00030240

000d747c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <network_is_off+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	00030240 	.word	0x00030240

000d748c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <malloc+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	681b      	ldr	r3, [r3, #0]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	0003021c 	.word	0x0003021c

000d749c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <free+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	685b      	ldr	r3, [r3, #4]
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	0003021c 	.word	0x0003021c

000d74ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <realloc+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	689b      	ldr	r3, [r3, #8]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	0003021c 	.word	0x0003021c

000d74bc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <siprintf+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	691b      	ldr	r3, [r3, #16]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	0003021c 	.word	0x0003021c

000d74cc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <snprintf+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	69db      	ldr	r3, [r3, #28]
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	0003021c 	.word	0x0003021c

000d74dc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <abort+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	0003021c 	.word	0x0003021c

000d74ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <_malloc_r+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	0003021c 	.word	0x0003021c

000d74fc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <__errno+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	0003021c 	.word	0x0003021c

000d750c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <newlib_impure_ptr_callback+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	0003021c 	.word	0x0003021c

000d751c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <strftime+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	0003021c 	.word	0x0003021c

000d752c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <localtime_r+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	0003021c 	.word	0x0003021c

000d753c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <gmtime_r+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	0003021c 	.word	0x0003021c

000d754c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <mktime+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	0003021c 	.word	0x0003021c

000d755c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d755c:	2100      	movs	r1, #0
   d755e:	f7ff be7f 	b.w	d7260 <system_delay_ms>

000d7562 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7562:	b510      	push	{r4, lr}
      if (_M_empty())
   d7564:	6883      	ldr	r3, [r0, #8]
   d7566:	4604      	mov	r4, r0
   d7568:	b90b      	cbnz	r3, d756e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d756a:	f001 faf0 	bl	d8b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d756e:	68c3      	ldr	r3, [r0, #12]
   d7570:	4798      	blx	r3
      if (_M_manager)
   d7572:	68a3      	ldr	r3, [r4, #8]
   d7574:	b11b      	cbz	r3, d757e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7576:	2203      	movs	r2, #3
   d7578:	4621      	mov	r1, r4
   d757a:	4620      	mov	r0, r4
   d757c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d757e:	4620      	mov	r0, r4
   d7580:	2110      	movs	r1, #16
}
   d7582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7586:	f001 badc 	b.w	d8b42 <_ZdlPvj>

000d758a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d758a:	b510      	push	{r4, lr}
          _M_dispose();
   d758c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d758e:	4604      	mov	r4, r0
          _M_dispose();
   d7590:	689b      	ldr	r3, [r3, #8]
   d7592:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7594:	68a3      	ldr	r3, [r4, #8]
   d7596:	3b01      	subs	r3, #1
   d7598:	60a3      	str	r3, [r4, #8]
   d759a:	b92b      	cbnz	r3, d75a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d759c:	6823      	ldr	r3, [r4, #0]
   d759e:	4620      	mov	r0, r4
   d75a0:	68db      	ldr	r3, [r3, #12]
    }
   d75a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d75a6:	4718      	bx	r3
    }
   d75a8:	bd10      	pop	{r4, pc}

000d75aa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d75aa:	b510      	push	{r4, lr}
   d75ac:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d75ae:	6800      	ldr	r0, [r0, #0]
   d75b0:	b108      	cbz	r0, d75b6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d75b2:	f7ff fc9d 	bl	d6ef0 <os_mutex_recursive_destroy>
    }
   d75b6:	4620      	mov	r0, r4
   d75b8:	bd10      	pop	{r4, pc}

000d75ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d75ba:	680b      	ldr	r3, [r1, #0]
   d75bc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d75be:	b113      	cbz	r3, d75c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d75c0:	685a      	ldr	r2, [r3, #4]
   d75c2:	3201      	adds	r2, #1
   d75c4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d75c6:	4770      	bx	lr

000d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d75c8:	b510      	push	{r4, lr}
   d75ca:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d75cc:	6800      	ldr	r0, [r0, #0]
   d75ce:	b128      	cbz	r0, d75dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d75d0:	6843      	ldr	r3, [r0, #4]
   d75d2:	3b01      	subs	r3, #1
   d75d4:	6043      	str	r3, [r0, #4]
   d75d6:	b90b      	cbnz	r3, d75dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d75d8:	f7ff ffd7 	bl	d758a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d75dc:	4620      	mov	r0, r4
   d75de:	bd10      	pop	{r4, pc}

000d75e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d75e0:	b513      	push	{r0, r1, r4, lr}
   d75e2:	460b      	mov	r3, r1
   d75e4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75e6:	e9d0 0100 	ldrd	r0, r1, [r0]
   d75ea:	466c      	mov	r4, sp
   d75ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d75f0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d75f4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d75f8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d75fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7600:	b002      	add	sp, #8
   d7602:	bd10      	pop	{r4, pc}

000d7604 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7604:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7606:	4c06      	ldr	r4, [pc, #24]	; (d7620 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7608:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d760a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d760c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d760e:	f7ff fc67 	bl	d6ee0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7612:	4620      	mov	r0, r4
   d7614:	4a03      	ldr	r2, [pc, #12]	; (d7624 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7616:	4904      	ldr	r1, [pc, #16]	; (d7628 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d761c:	f001 ba8c 	b.w	d8b38 <__aeabi_atexit>
   d7620:	2003e608 	.word	0x2003e608
   d7624:	2003dac8 	.word	0x2003dac8
   d7628:	000d75ab 	.word	0x000d75ab

000d762c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d762c:	4770      	bx	lr

000d762e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d762e:	2000      	movs	r0, #0
   d7630:	4770      	bx	lr

000d7632 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7632:	b510      	push	{r4, lr}
   d7634:	2110      	movs	r1, #16
   d7636:	4604      	mov	r4, r0
   d7638:	f001 fa83 	bl	d8b42 <_ZdlPvj>
   d763c:	4620      	mov	r0, r4
   d763e:	bd10      	pop	{r4, pc}

000d7640 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7640:	b508      	push	{r3, lr}
      { delete this; }
   d7642:	f7ff fff6 	bl	d7632 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7646:	bd08      	pop	{r3, pc}

000d7648 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7648:	b530      	push	{r4, r5, lr}
        type_(type) {
   d764a:	2200      	movs	r2, #0
   d764c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7650:	6002      	str	r2, [r0, #0]
   d7652:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7654:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7656:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7658:	680c      	ldr	r4, [r1, #0]
   d765a:	8085      	strh	r5, [r0, #4]
   d765c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d765e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7660:	bd30      	pop	{r4, r5, pc}

000d7662 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7662:	b510      	push	{r4, lr}
   d7664:	4604      	mov	r4, r0
    free((void*)msg_);
   d7666:	6800      	ldr	r0, [r0, #0]
   d7668:	f7ff ff18 	bl	d749c <free>
}
   d766c:	4620      	mov	r0, r4
   d766e:	bd10      	pop	{r4, pc}

000d7670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7670:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7672:	68c4      	ldr	r4, [r0, #12]
   d7674:	b1f4      	cbz	r4, d76b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7676:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7678:	2b02      	cmp	r3, #2
   d767a:	d103      	bne.n	d7684 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d767c:	f104 000c 	add.w	r0, r4, #12
   d7680:	f7ff ffef 	bl	d7662 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7684:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7686:	b135      	cbz	r5, d7696 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7688:	4628      	mov	r0, r5
   d768a:	f7fc fe09 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d768e:	2110      	movs	r1, #16
   d7690:	4628      	mov	r0, r5
   d7692:	f001 fa56 	bl	d8b42 <_ZdlPvj>
   d7696:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7698:	b135      	cbz	r5, d76a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d769a:	4628      	mov	r0, r5
   d769c:	f7fc fe00 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d76a0:	2110      	movs	r1, #16
   d76a2:	4628      	mov	r0, r5
   d76a4:	f001 fa4d 	bl	d8b42 <_ZdlPvj>
   d76a8:	4620      	mov	r0, r4
   d76aa:	2114      	movs	r1, #20
   d76ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d76b0:	f001 ba47 	b.w	d8b42 <_ZdlPvj>
   d76b4:	bd38      	pop	{r3, r4, r5, pc}

000d76b6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d76b6:	b510      	push	{r4, lr}
   d76b8:	b088      	sub	sp, #32
   d76ba:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d76bc:	4668      	mov	r0, sp
   d76be:	f000 fd54 	bl	d816a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d76c2:	4669      	mov	r1, sp
   d76c4:	a804      	add	r0, sp, #16
   d76c6:	f000 fd73 	bl	d81b0 <_ZN6StringC1ERKS_>
   d76ca:	a804      	add	r0, sp, #16
   d76cc:	47a0      	blx	r4
   d76ce:	4604      	mov	r4, r0
   d76d0:	a804      	add	r0, sp, #16
   d76d2:	f000 fcff 	bl	d80d4 <_ZN6StringD1Ev>
    String p(param);
   d76d6:	4668      	mov	r0, sp
   d76d8:	f000 fcfc 	bl	d80d4 <_ZN6StringD1Ev>
}
   d76dc:	4620      	mov	r0, r4
   d76de:	b008      	add	sp, #32
   d76e0:	bd10      	pop	{r4, pc}

000d76e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d76e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d76e4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d76e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d76ea:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d76ec:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d76ee:	461a      	mov	r2, r3
   d76f0:	4669      	mov	r1, sp
   d76f2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d76f4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d76f8:	f8ad 4000 	strh.w	r4, [sp]
   d76fc:	f7ff fe06 	bl	d730c <spark_function>
}
   d7700:	b004      	add	sp, #16
   d7702:	bd10      	pop	{r4, pc}

000d7704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7704:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7706:	460e      	mov	r6, r1
   d7708:	4604      	mov	r4, r0
   d770a:	f856 3b04 	ldr.w	r3, [r6], #4
   d770e:	9300      	str	r3, [sp, #0]
   d7710:	460d      	mov	r5, r1
   d7712:	a801      	add	r0, sp, #4
   d7714:	4631      	mov	r1, r6
   d7716:	f7ff ff50 	bl	d75ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d771a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d771c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d771e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7720:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7722:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7724:	2300      	movs	r3, #0
   d7726:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7728:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d772a:	f7ff ff4d 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d772e:	4630      	mov	r0, r6
   d7730:	f7ff ff4a 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7734:	4628      	mov	r0, r5
   d7736:	2108      	movs	r1, #8
   d7738:	f001 fa03 	bl	d8b42 <_ZdlPvj>
        return p;
    }
   d773c:	4620      	mov	r0, r4
   d773e:	b002      	add	sp, #8
   d7740:	bd70      	pop	{r4, r5, r6, pc}

000d7742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7742:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7744:	b510      	push	{r4, lr}
      if (_M_empty())
   d7746:	b90a      	cbnz	r2, d774c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7748:	f001 fa01 	bl	d8b4e <_ZSt25__throw_bad_function_callv>
    }
   d774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7750:	68c3      	ldr	r3, [r0, #12]
   d7752:	4718      	bx	r3

000d7754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7754:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7756:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7758:	f100 0110 	add.w	r1, r0, #16
   d775c:	f7ff fff1 	bl	d7742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7760:	bd08      	pop	{r3, pc}

000d7762 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7762:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7764:	b510      	push	{r4, lr}
      if (_M_empty())
   d7766:	b90a      	cbnz	r2, d776c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7768:	f001 f9f1 	bl	d8b4e <_ZSt25__throw_bad_function_callv>
    }
   d776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7770:	68c3      	ldr	r3, [r0, #12]
   d7772:	4718      	bx	r3

000d7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7774:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7776:	6800      	ldr	r0, [r0, #0]
   d7778:	f100 0110 	add.w	r1, r0, #16
   d777c:	f7ff fff1 	bl	d7762 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7780:	bd08      	pop	{r3, pc}
	...

000d7784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7784:	b538      	push	{r3, r4, r5, lr}
   d7786:	2300      	movs	r3, #0
   d7788:	4604      	mov	r4, r0
   d778a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d778c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d778e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7790:	f7fc fc81 	bl	d4096 <_Znwj>
   d7794:	b128      	cbz	r0, d77a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7796:	2301      	movs	r3, #1
   d7798:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d779c:	4b02      	ldr	r3, [pc, #8]	; (d77a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d779e:	6003      	str	r3, [r0, #0]
   d77a0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77a2:	6020      	str	r0, [r4, #0]
	}
   d77a4:	4620      	mov	r0, r4
   d77a6:	bd38      	pop	{r3, r4, r5, pc}
   d77a8:	000dc2a0 	.word	0x000dc2a0

000d77ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d77ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d77ae:	2300      	movs	r3, #0
   d77b0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d77b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d77b4:	4604      	mov	r4, r0
   d77b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d77b8:	b12b      	cbz	r3, d77c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d77ba:	2202      	movs	r2, #2
   d77bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d77be:	68eb      	ldr	r3, [r5, #12]
   d77c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d77c2:	68ab      	ldr	r3, [r5, #8]
   d77c4:	60a3      	str	r3, [r4, #8]
    }
   d77c6:	4620      	mov	r0, r4
   d77c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d77cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d77cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d77ce:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d77d0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d77d2:	4668      	mov	r0, sp
   d77d4:	f7ff ff38 	bl	d7648 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d77d8:	f04f 0302 	mov.w	r3, #2
   d77dc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d77e0:	2a00      	cmp	r2, #0
   d77e2:	d103      	bne.n	d77ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d77e4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d77e8:	2900      	cmp	r1, #0
   d77ea:	d1f7      	bne.n	d77dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d77ec:	d125      	bne.n	d783a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d77ee:	f104 050c 	add.w	r5, r4, #12
   d77f2:	4669      	mov	r1, sp
   d77f4:	4628      	mov	r0, r5
   d77f6:	f7ff ff27 	bl	d7648 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d77fa:	f3bf 8f5b 	dmb	ish
   d77fe:	2301      	movs	r3, #1
   d7800:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7802:	2000      	movs	r0, #0
   d7804:	f104 0308 	add.w	r3, r4, #8
   d7808:	f3bf 8f5b 	dmb	ish
   d780c:	e853 6f00 	ldrex	r6, [r3]
   d7810:	e843 0200 	strex	r2, r0, [r3]
   d7814:	2a00      	cmp	r2, #0
   d7816:	d1f9      	bne.n	d780c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7818:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d781c:	b16e      	cbz	r6, d783a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d781e:	f7ff fd2f 	bl	d7280 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7822:	b178      	cbz	r0, d7844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7824:	4629      	mov	r1, r5
   d7826:	4630      	mov	r0, r6
   d7828:	f7ff ff8b 	bl	d7742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d782c:	4630      	mov	r0, r6
   d782e:	f7fc fd37 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7832:	2110      	movs	r1, #16
   d7834:	4630      	mov	r0, r6
   d7836:	f001 f984 	bl	d8b42 <_ZdlPvj>
        p_->setError(std::move(error));
   d783a:	4668      	mov	r0, sp
   d783c:	f7ff ff11 	bl	d7662 <_ZN8particle5ErrorD1Ev>
    }
   d7840:	b009      	add	sp, #36	; 0x24
   d7842:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7844:	4631      	mov	r1, r6
   d7846:	a802      	add	r0, sp, #8
   d7848:	f7ff ffb0 	bl	d77ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d784c:	68e0      	ldr	r0, [r4, #12]
   d784e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7852:	b108      	cbz	r0, d7858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7854:	f002 f850 	bl	d98f8 <strdup>
        type_(type) {
   d7858:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d785a:	2010      	movs	r0, #16
   d785c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7860:	f7fc fc19 	bl	d4096 <_Znwj>
   d7864:	4605      	mov	r5, r0
   d7866:	b1e8      	cbz	r0, d78a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7868:	2700      	movs	r7, #0
   d786a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d786c:	2018      	movs	r0, #24
   d786e:	f7fc fc12 	bl	d4096 <_Znwj>
   d7872:	4604      	mov	r4, r0
   d7874:	b188      	cbz	r0, d789a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7876:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7878:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d787a:	a802      	add	r0, sp, #8
   d787c:	f7ff feb0 	bl	d75e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7880:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7882:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7884:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7886:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7888:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d788a:	a906      	add	r1, sp, #24
   d788c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d788e:	60e3      	str	r3, [r4, #12]
   d7890:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7894:	9205      	str	r2, [sp, #20]
   d7896:	f7ff fed7 	bl	d7648 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d789a:	4b08      	ldr	r3, [pc, #32]	; (d78bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d789c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d789e:	4b08      	ldr	r3, [pc, #32]	; (d78c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d78a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d78a4:	a806      	add	r0, sp, #24
   d78a6:	f7ff fedc 	bl	d7662 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d78aa:	a802      	add	r0, sp, #8
   d78ac:	f7fc fcf8 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d78b0:	2200      	movs	r2, #0
   d78b2:	4629      	mov	r1, r5
   d78b4:	4803      	ldr	r0, [pc, #12]	; (d78c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d78b6:	f7ff fceb 	bl	d7290 <application_thread_invoke>
   d78ba:	e7b7      	b.n	d782c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d78bc:	000d7755 	.word	0x000d7755
   d78c0:	000d79ed 	.word	0x000d79ed
   d78c4:	000d7563 	.word	0x000d7563

000d78c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d78c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78cc:	b08a      	sub	sp, #40	; 0x28
   d78ce:	4605      	mov	r5, r0
   d78d0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d78d4:	460c      	mov	r4, r1
   d78d6:	4617      	mov	r7, r2
   d78d8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d78da:	f7ff fd2f 	bl	d733c <spark_cloud_flag_connected>
   d78de:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d78e0:	4682      	mov	sl, r0
   d78e2:	bb38      	cbnz	r0, d7934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d78e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d78e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d78ea:	a905      	add	r1, sp, #20
   d78ec:	4630      	mov	r0, r6
   d78ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d78f2:	f7ff fea9 	bl	d7648 <_ZN8particle5ErrorC1EOS0_>
   d78f6:	2014      	movs	r0, #20
   d78f8:	f7fc fbcd 	bl	d4096 <_Znwj>
   d78fc:	4604      	mov	r4, r0
   d78fe:	b148      	cbz	r0, d7914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7900:	2302      	movs	r3, #2
   d7902:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7904:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7906:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d790a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d790c:	4631      	mov	r1, r6
   d790e:	300c      	adds	r0, #12
   d7910:	f7ff fe9a 	bl	d7648 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7914:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7916:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7918:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d791c:	f7ff ff32 	bl	d7784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7920:	4630      	mov	r0, r6
   d7922:	f7ff fe9e 	bl	d7662 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7926:	a805      	add	r0, sp, #20
   d7928:	f7ff fe9b 	bl	d7662 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d792c:	4628      	mov	r0, r5
   d792e:	b00a      	add	sp, #40	; 0x28
   d7930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7934:	230c      	movs	r3, #12
   d7936:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d793a:	2014      	movs	r0, #20
   d793c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7940:	9307      	str	r3, [sp, #28]
   d7942:	f7fc fba8 	bl	d4096 <_Znwj>
   d7946:	4601      	mov	r1, r0
   d7948:	b128      	cbz	r0, d7956 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d794a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d794e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7952:	f880 a001 	strb.w	sl, [r0, #1]
   d7956:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7958:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d795a:	f7ff ff13 	bl	d7784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d795e:	4b22      	ldr	r3, [pc, #136]	; (d79e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7960:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7962:	2008      	movs	r0, #8
   d7964:	f7fc fb97 	bl	d4096 <_Znwj>
   d7968:	4682      	mov	sl, r0
   d796a:	b128      	cbz	r0, d7978 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d796c:	9b03      	ldr	r3, [sp, #12]
   d796e:	f840 3b04 	str.w	r3, [r0], #4
   d7972:	a904      	add	r1, sp, #16
   d7974:	f7ff fe21 	bl	d75ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7978:	9600      	str	r6, [sp, #0]
   d797a:	fa5f f389 	uxtb.w	r3, r9
   d797e:	4642      	mov	r2, r8
   d7980:	4639      	mov	r1, r7
   d7982:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7984:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7988:	f7ff fce8 	bl	d735c <spark_send_event>
   d798c:	b9b8      	cbnz	r0, d79be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d798e:	9b03      	ldr	r3, [sp, #12]
   d7990:	785b      	ldrb	r3, [r3, #1]
   d7992:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7996:	b993      	cbnz	r3, d79be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7998:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d799c:	a905      	add	r1, sp, #20
   d799e:	a803      	add	r0, sp, #12
   d79a0:	9205      	str	r2, [sp, #20]
   d79a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d79a6:	f7ff ff11 	bl	d77cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d79aa:	a805      	add	r0, sp, #20
   d79ac:	f7ff fe59 	bl	d7662 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d79b0:	a805      	add	r0, sp, #20
   d79b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d79b4:	f7ff fea6 	bl	d7704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d79b8:	a806      	add	r0, sp, #24
   d79ba:	f7ff fe05 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79be:	9b03      	ldr	r3, [sp, #12]
   d79c0:	9305      	str	r3, [sp, #20]
   d79c2:	a904      	add	r1, sp, #16
   d79c4:	a806      	add	r0, sp, #24
   d79c6:	f7ff fdf8 	bl	d75ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79ca:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79cc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79ce:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d79d0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d79d2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d79d4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d79d6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d79d8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d79da:	f7ff fdf5 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79de:	a804      	add	r0, sp, #16
   d79e0:	f7ff fdf2 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d79e4:	e7a2      	b.n	d792c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d79e6:	bf00      	nop
   d79e8:	000d7ab1 	.word	0x000d7ab1

000d79ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d79ec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d79ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d79f0:	4605      	mov	r5, r0
	  switch (__op)
   d79f2:	d007      	beq.n	d7a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d79f4:	2a03      	cmp	r2, #3
   d79f6:	d018      	beq.n	d7a2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d79f8:	2a01      	cmp	r2, #1
   d79fa:	d101      	bne.n	d7a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d79fc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d79fe:	6003      	str	r3, [r0, #0]
	}
   d7a00:	2000      	movs	r0, #0
   d7a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a04:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7a06:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a08:	f7fc fb45 	bl	d4096 <_Znwj>
   d7a0c:	4604      	mov	r4, r0
   d7a0e:	b150      	cbz	r0, d7a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7a10:	4631      	mov	r1, r6
   d7a12:	f7ff fecb 	bl	d77ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7a16:	6930      	ldr	r0, [r6, #16]
   d7a18:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7a1c:	b108      	cbz	r0, d7a22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7a1e:	f001 ff6b 	bl	d98f8 <strdup>
        type_(type) {
   d7a22:	6120      	str	r0, [r4, #16]
   d7a24:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7a26:	602c      	str	r4, [r5, #0]
	}
   d7a28:	e7ea      	b.n	d7a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7a2a:	6804      	ldr	r4, [r0, #0]
   d7a2c:	2c00      	cmp	r4, #0
   d7a2e:	d0e7      	beq.n	d7a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7a30:	f104 0010 	add.w	r0, r4, #16
   d7a34:	f7ff fe15 	bl	d7662 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7a38:	4620      	mov	r0, r4
   d7a3a:	f7fc fc31 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7a3e:	2118      	movs	r1, #24
   d7a40:	4620      	mov	r0, r4
   d7a42:	f001 f87e 	bl	d8b42 <_ZdlPvj>
   d7a46:	e7db      	b.n	d7a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7a48:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7a4a:	2300      	movs	r3, #0
   d7a4c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7a4e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7a50:	4604      	mov	r4, r0
   d7a52:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7a54:	b12b      	cbz	r3, d7a62 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a56:	2202      	movs	r2, #2
   d7a58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a5a:	68eb      	ldr	r3, [r5, #12]
   d7a5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a5e:	68ab      	ldr	r3, [r5, #8]
   d7a60:	60a3      	str	r3, [r4, #8]
    }
   d7a62:	4620      	mov	r0, r4
   d7a64:	bd38      	pop	{r3, r4, r5, pc}

000d7a66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7a66:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7a68:	b570      	push	{r4, r5, r6, lr}
   d7a6a:	4604      	mov	r4, r0
	  switch (__op)
   d7a6c:	d007      	beq.n	d7a7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7a6e:	2a03      	cmp	r2, #3
   d7a70:	d012      	beq.n	d7a98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7a72:	2a01      	cmp	r2, #1
   d7a74:	d101      	bne.n	d7a7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7a76:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7a78:	6003      	str	r3, [r0, #0]
	}
   d7a7a:	2000      	movs	r0, #0
   d7a7c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a7e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7a80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a82:	f7fc fb08 	bl	d4096 <_Znwj>
   d7a86:	4605      	mov	r5, r0
   d7a88:	b120      	cbz	r0, d7a94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7a8a:	4631      	mov	r1, r6
   d7a8c:	f7ff ffdc 	bl	d7a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7a90:	7c33      	ldrb	r3, [r6, #16]
   d7a92:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7a94:	6025      	str	r5, [r4, #0]
	}
   d7a96:	e7f0      	b.n	d7a7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7a98:	6804      	ldr	r4, [r0, #0]
   d7a9a:	2c00      	cmp	r4, #0
   d7a9c:	d0ed      	beq.n	d7a7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7a9e:	4620      	mov	r0, r4
   d7aa0:	f7fc fbfe 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7aa4:	2114      	movs	r1, #20
   d7aa6:	4620      	mov	r0, r4
   d7aa8:	f001 f84b 	bl	d8b42 <_ZdlPvj>
   d7aac:	e7e5      	b.n	d7a7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ab2:	b089      	sub	sp, #36	; 0x24
   d7ab4:	4604      	mov	r4, r0
   d7ab6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7ab8:	a801      	add	r0, sp, #4
   d7aba:	4611      	mov	r1, r2
   d7abc:	f7ff fe22 	bl	d7704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7ac0:	b1a4      	cbz	r4, d7aec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7ac2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7ac4:	b11d      	cbz	r5, d7ace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7ac6:	4628      	mov	r0, r5
   d7ac8:	f001 ff16 	bl	d98f8 <strdup>
   d7acc:	4605      	mov	r5, r0
   d7ace:	a801      	add	r0, sp, #4
   d7ad0:	a903      	add	r1, sp, #12
        type_(type) {
   d7ad2:	9503      	str	r5, [sp, #12]
   d7ad4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7ad8:	f7ff fe78 	bl	d77cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7adc:	a803      	add	r0, sp, #12
   d7ade:	f7ff fdc0 	bl	d7662 <_ZN8particle5ErrorD1Ev>
   d7ae2:	a802      	add	r0, sp, #8
   d7ae4:	f7ff fd70 	bl	d75c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ae8:	b009      	add	sp, #36	; 0x24
   d7aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7aec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7aee:	2301      	movs	r3, #1
   d7af0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7af4:	2a00      	cmp	r2, #0
   d7af6:	d103      	bne.n	d7b00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7af8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7afc:	2900      	cmp	r1, #0
   d7afe:	d1f7      	bne.n	d7af0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7b00:	d1ef      	bne.n	d7ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7b02:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7b04:	f3bf 8f5b 	dmb	ish
   d7b08:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7b0a:	1d2b      	adds	r3, r5, #4
   d7b0c:	f3bf 8f5b 	dmb	ish
   d7b10:	e853 6f00 	ldrex	r6, [r3]
   d7b14:	e843 4200 	strex	r2, r4, [r3]
   d7b18:	2a00      	cmp	r2, #0
   d7b1a:	d1f9      	bne.n	d7b10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7b1c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7b20:	2e00      	cmp	r6, #0
   d7b22:	d0de      	beq.n	d7ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7b24:	4620      	mov	r0, r4
   d7b26:	f7ff fbab 	bl	d7280 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b2a:	4607      	mov	r7, r0
   d7b2c:	b160      	cbz	r0, d7b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7b2e:	f105 010c 	add.w	r1, r5, #12
   d7b32:	4630      	mov	r0, r6
   d7b34:	f7ff fe15 	bl	d7762 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7b38:	4630      	mov	r0, r6
   d7b3a:	f7fc fbb1 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7b3e:	2110      	movs	r1, #16
   d7b40:	4630      	mov	r0, r6
   d7b42:	f000 fffe 	bl	d8b42 <_ZdlPvj>
   d7b46:	e7cc      	b.n	d7ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7b48:	4631      	mov	r1, r6
   d7b4a:	a803      	add	r0, sp, #12
   d7b4c:	f7ff ff7c 	bl	d7a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7b50:	7b2b      	ldrb	r3, [r5, #12]
   d7b52:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7b56:	2010      	movs	r0, #16
   d7b58:	f7fc fa9d 	bl	d4096 <_Znwj>
   d7b5c:	4605      	mov	r5, r0
   d7b5e:	b1d0      	cbz	r0, d7b96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7b60:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b62:	2014      	movs	r0, #20
   d7b64:	f7fc fa97 	bl	d4096 <_Znwj>
   d7b68:	4604      	mov	r4, r0
   d7b6a:	b178      	cbz	r0, d7b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7b6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7b6e:	4601      	mov	r1, r0
   d7b70:	a803      	add	r0, sp, #12
   d7b72:	f7ff fd35 	bl	d75e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7b78:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b7a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b7c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7b7e:	9205      	str	r2, [sp, #20]
   d7b80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b82:	60e3      	str	r3, [r4, #12]
   d7b84:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7b88:	9206      	str	r2, [sp, #24]
   d7b8a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7b8c:	4b06      	ldr	r3, [pc, #24]	; (d7ba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7b8e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7b90:	4b06      	ldr	r3, [pc, #24]	; (d7bac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b92:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7b94:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7b96:	a803      	add	r0, sp, #12
   d7b98:	f7fc fb82 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7b9c:	2200      	movs	r2, #0
   d7b9e:	4629      	mov	r1, r5
   d7ba0:	4803      	ldr	r0, [pc, #12]	; (d7bb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7ba2:	f7ff fb75 	bl	d7290 <application_thread_invoke>
   d7ba6:	e7c7      	b.n	d7b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7ba8:	000d7775 	.word	0x000d7775
   d7bac:	000d7a67 	.word	0x000d7a67
   d7bb0:	000d7563 	.word	0x000d7563

000d7bb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7bb4:	2200      	movs	r2, #0
   d7bb6:	6840      	ldr	r0, [r0, #4]
   d7bb8:	4611      	mov	r1, r2
   d7bba:	f7ff bc3f 	b.w	d743c <network_listening>

000d7bbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7bbe:	2200      	movs	r2, #0
   d7bc0:	6840      	ldr	r0, [r0, #4]
   d7bc2:	4611      	mov	r1, r2
   d7bc4:	f7ff bc4a 	b.w	d745c <network_get_listen_timeout>

000d7bc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7bc8:	6840      	ldr	r0, [r0, #4]
   d7bca:	2200      	movs	r2, #0
   d7bcc:	f7ff bc3e 	b.w	d744c <network_set_listen_timeout>

000d7bd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7bd0:	6840      	ldr	r0, [r0, #4]
   d7bd2:	2200      	movs	r2, #0
   d7bd4:	f081 0101 	eor.w	r1, r1, #1
   d7bd8:	f7ff bc28 	b.w	d742c <network_listen>

000d7bdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7bdc:	2300      	movs	r3, #0
   d7bde:	6840      	ldr	r0, [r0, #4]
   d7be0:	461a      	mov	r2, r3
   d7be2:	4619      	mov	r1, r3
   d7be4:	f7ff bc1a 	b.w	d741c <network_off>

000d7be8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7be8:	2300      	movs	r3, #0
   d7bea:	6840      	ldr	r0, [r0, #4]
   d7bec:	461a      	mov	r2, r3
   d7bee:	4619      	mov	r1, r3
   d7bf0:	f7ff bc0c 	b.w	d740c <network_on>

000d7bf4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7bf4:	2200      	movs	r2, #0
   d7bf6:	6840      	ldr	r0, [r0, #4]
   d7bf8:	4611      	mov	r1, r2
   d7bfa:	f7ff bbff 	b.w	d73fc <network_ready>

000d7bfe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7bfe:	2200      	movs	r2, #0
   d7c00:	6840      	ldr	r0, [r0, #4]
   d7c02:	4611      	mov	r1, r2
   d7c04:	f7ff bbea 	b.w	d73dc <network_connecting>

000d7c08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c08:	6840      	ldr	r0, [r0, #4]
   d7c0a:	2200      	movs	r2, #0
   d7c0c:	2102      	movs	r1, #2
   d7c0e:	f7ff bbed 	b.w	d73ec <network_disconnect>

000d7c12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7c12:	2300      	movs	r3, #0
   d7c14:	6840      	ldr	r0, [r0, #4]
   d7c16:	461a      	mov	r2, r3
   d7c18:	f7ff bbd8 	b.w	d73cc <network_connect>

000d7c1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7c1c:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7c1e:	2203      	movs	r2, #3
   d7c20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7c22:	4a02      	ldr	r2, [pc, #8]	; (d7c2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7c24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7c26:	4770      	bx	lr
   d7c28:	2003e60c 	.word	0x2003e60c
   d7c2c:	000dc2bc 	.word	0x000dc2bc

000d7c30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7c30:	4770      	bx	lr

000d7c32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c34:	4606      	mov	r6, r0
   d7c36:	4615      	mov	r5, r2
   d7c38:	460c      	mov	r4, r1
   d7c3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c3c:	42bc      	cmp	r4, r7
   d7c3e:	d006      	beq.n	d7c4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7c40:	6833      	ldr	r3, [r6, #0]
   d7c42:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c46:	689b      	ldr	r3, [r3, #8]
   d7c48:	4630      	mov	r0, r6
   d7c4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7c4c:	e7f6      	b.n	d7c3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7c4e:	4628      	mov	r0, r5
   d7c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7c52:	7c00      	ldrb	r0, [r0, #16]
   d7c54:	2200      	movs	r2, #0
   d7c56:	f7ff b9fb 	b.w	d7050 <hal_i2c_write>

000d7c5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7c5a:	7c00      	ldrb	r0, [r0, #16]
   d7c5c:	2100      	movs	r1, #0
   d7c5e:	f7ff b9ff 	b.w	d7060 <hal_i2c_available>

000d7c62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7c62:	7c00      	ldrb	r0, [r0, #16]
   d7c64:	2100      	movs	r1, #0
   d7c66:	f7ff ba03 	b.w	d7070 <hal_i2c_read>

000d7c6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7c6a:	7c00      	ldrb	r0, [r0, #16]
   d7c6c:	2100      	movs	r1, #0
   d7c6e:	f7ff ba07 	b.w	d7080 <hal_i2c_peek>

000d7c72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7c72:	7c00      	ldrb	r0, [r0, #16]
   d7c74:	2100      	movs	r1, #0
   d7c76:	f7ff ba0b 	b.w	d7090 <hal_i2c_flush>

000d7c7a <_ZN7TwoWireD0Ev>:
   d7c7a:	b510      	push	{r4, lr}
   d7c7c:	2114      	movs	r1, #20
   d7c7e:	4604      	mov	r4, r0
   d7c80:	f000 ff5f 	bl	d8b42 <_ZdlPvj>
   d7c84:	4620      	mov	r0, r4
   d7c86:	bd10      	pop	{r4, pc}

000d7c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7c88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7c8e:	4604      	mov	r4, r0
   d7c90:	4608      	mov	r0, r1
   d7c92:	2100      	movs	r1, #0
   d7c94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7c98:	4b03      	ldr	r3, [pc, #12]	; (d7ca8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7c9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7c9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7c9e:	4611      	mov	r1, r2
   d7ca0:	f7ff fa06 	bl	d70b0 <hal_i2c_init>
}
   d7ca4:	4620      	mov	r0, r4
   d7ca6:	bd10      	pop	{r4, pc}
   d7ca8:	000dc2f8 	.word	0x000dc2f8

000d7cac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7cac:	2300      	movs	r3, #0
   d7cae:	7c00      	ldrb	r0, [r0, #16]
   d7cb0:	461a      	mov	r2, r3
   d7cb2:	4619      	mov	r1, r3
   d7cb4:	f7ff b9b4 	b.w	d7020 <hal_i2c_begin>

000d7cb8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7cba:	2200      	movs	r2, #0
   d7cbc:	2314      	movs	r3, #20
   d7cbe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7cc2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7cc6:	780b      	ldrb	r3, [r1, #0]
   d7cc8:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ccc:	684b      	ldr	r3, [r1, #4]
   d7cce:	9303      	str	r3, [sp, #12]
   d7cd0:	68cb      	ldr	r3, [r1, #12]
   d7cd2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7cd4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7cd6:	7a0b      	ldrb	r3, [r1, #8]
   d7cd8:	9305      	str	r3, [sp, #20]
   d7cda:	a901      	add	r1, sp, #4
   d7cdc:	f7ff fa00 	bl	d70e0 <hal_i2c_request_ex>
}
   d7ce0:	b007      	add	sp, #28
   d7ce2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ce6 <_ZN7TwoWire11requestFromEhjh>:
{
   d7ce6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7ce8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7cea:	f88d 1000 	strb.w	r1, [sp]
   d7cee:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7cf2:	9103      	str	r1, [sp, #12]
   d7cf4:	bf18      	it	ne
   d7cf6:	2301      	movne	r3, #1
   d7cf8:	4669      	mov	r1, sp
    size_ = size;
   d7cfa:	9201      	str	r2, [sp, #4]
   d7cfc:	f88d 3008 	strb.w	r3, [sp, #8]
   d7d00:	f7ff ffda 	bl	d7cb8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7d04:	b005      	add	sp, #20
   d7d06:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d0a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7d0a:	7c00      	ldrb	r0, [r0, #16]
   d7d0c:	2200      	movs	r2, #0
   d7d0e:	f7ff b98f 	b.w	d7030 <hal_i2c_begin_transmission>

000d7d12 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7d12:	b2c9      	uxtb	r1, r1
   d7d14:	f7ff bff9 	b.w	d7d0a <_ZN7TwoWire17beginTransmissionEh>

000d7d18 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7d18:	7c00      	ldrb	r0, [r0, #16]
   d7d1a:	2200      	movs	r2, #0
   d7d1c:	f7ff b990 	b.w	d7040 <hal_i2c_end_transmission>

000d7d20 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7d20:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7d22:	2100      	movs	r1, #0
   d7d24:	7c00      	ldrb	r0, [r0, #16]
   d7d26:	f7ff f9cb 	bl	d70c0 <hal_i2c_lock>
}
   d7d2a:	fab0 f080 	clz	r0, r0
   d7d2e:	0940      	lsrs	r0, r0, #5
   d7d30:	bd08      	pop	{r3, pc}

000d7d32 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7d32:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7d34:	2100      	movs	r1, #0
   d7d36:	7c00      	ldrb	r0, [r0, #16]
   d7d38:	f7ff f9ca 	bl	d70d0 <hal_i2c_unlock>
}
   d7d3c:	fab0 f080 	clz	r0, r0
   d7d40:	0940      	lsrs	r0, r0, #5
   d7d42:	bd08      	pop	{r3, pc}

000d7d44 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7d44:	4700      	bx	r0
	...

000d7d48 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7d48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7d4c:	2400      	movs	r4, #0
{
   d7d4e:	461d      	mov	r5, r3
   d7d50:	460f      	mov	r7, r1
   d7d52:	4690      	mov	r8, r2
   d7d54:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7d56:	f7ff f953 	bl	d7000 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7d5a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7d5c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7d60:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7d64:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7d68:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7d6c:	bfa2      	ittt	ge
   d7d6e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7d72:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7d76:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7d78:	4907      	ldr	r1, [pc, #28]	; (d7d98 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7d7a:	9400      	str	r4, [sp, #0]
   d7d7c:	4643      	mov	r3, r8
   d7d7e:	463a      	mov	r2, r7
   d7d80:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7d82:	bfa8      	it	ge
   d7d84:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7d88:	f7ff f932 	bl	d6ff0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7d8c:	fab0 f080 	clz	r0, r0
   d7d90:	0940      	lsrs	r0, r0, #5
   d7d92:	b004      	add	sp, #16
   d7d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d98:	000d7d45 	.word	0x000d7d45

000d7d9c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7d9c:	4770      	bx	lr

000d7d9e <_ZN9IPAddressD0Ev>:
   d7d9e:	b510      	push	{r4, lr}
   d7da0:	2118      	movs	r1, #24
   d7da2:	4604      	mov	r4, r0
   d7da4:	f000 fecd 	bl	d8b42 <_ZdlPvj>
   d7da8:	4620      	mov	r0, r4
   d7daa:	bd10      	pop	{r4, pc}

000d7dac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7dac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7dae:	7d03      	ldrb	r3, [r0, #20]
   d7db0:	2b06      	cmp	r3, #6
{
   d7db2:	b08d      	sub	sp, #52	; 0x34
   d7db4:	460e      	mov	r6, r1
   d7db6:	f100 0704 	add.w	r7, r0, #4
   d7dba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7dbe:	d012      	beq.n	d7de6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7dc0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7dc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7dc8:	220a      	movs	r2, #10
   d7dca:	4630      	mov	r0, r6
   d7dcc:	f000 f945 	bl	d805a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7dd0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7dd2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7dd4:	d019      	beq.n	d7e0a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7dd6:	2c00      	cmp	r4, #0
   d7dd8:	d0f4      	beq.n	d7dc4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7dda:	212e      	movs	r1, #46	; 0x2e
   d7ddc:	4630      	mov	r0, r6
   d7dde:	f000 f939 	bl	d8054 <_ZN5Print5printEc>
   d7de2:	4404      	add	r4, r0
   d7de4:	e7ee      	b.n	d7dc4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7de6:	232f      	movs	r3, #47	; 0x2f
   d7de8:	466a      	mov	r2, sp
   d7dea:	4639      	mov	r1, r7
   d7dec:	200a      	movs	r0, #10
		buf[0] = 0;
   d7dee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7df2:	f7ff f97d 	bl	d70f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7df6:	4668      	mov	r0, sp
   d7df8:	f001 fd9b 	bl	d9932 <strlen>
   d7dfc:	6833      	ldr	r3, [r6, #0]
   d7dfe:	4602      	mov	r2, r0
   d7e00:	68db      	ldr	r3, [r3, #12]
   d7e02:	4669      	mov	r1, sp
   d7e04:	4630      	mov	r0, r6
   d7e06:	4798      	blx	r3
   d7e08:	4604      	mov	r4, r0
    }
    return n;
}
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	b00d      	add	sp, #52	; 0x34
   d7e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e10 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7e10:	b510      	push	{r4, lr}
   d7e12:	4b05      	ldr	r3, [pc, #20]	; (d7e28 <_ZN9IPAddressC1Ev+0x18>)
   d7e14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7e16:	2211      	movs	r2, #17
   d7e18:	f840 3b04 	str.w	r3, [r0], #4
   d7e1c:	2100      	movs	r1, #0
   d7e1e:	f001 fd2d 	bl	d987c <memset>
}
   d7e22:	4620      	mov	r0, r4
   d7e24:	bd10      	pop	{r4, pc}
   d7e26:	bf00      	nop
   d7e28:	000dc320 	.word	0x000dc320

000d7e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7e2c:	4603      	mov	r3, r0
   d7e2e:	4a07      	ldr	r2, [pc, #28]	; (d7e4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7e30:	b510      	push	{r4, lr}
   d7e32:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7e36:	f101 0210 	add.w	r2, r1, #16
   d7e3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7e3e:	f843 4b04 	str.w	r4, [r3], #4
   d7e42:	4291      	cmp	r1, r2
   d7e44:	d1f9      	bne.n	d7e3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7e46:	780a      	ldrb	r2, [r1, #0]
   d7e48:	701a      	strb	r2, [r3, #0]
}
   d7e4a:	bd10      	pop	{r4, pc}
   d7e4c:	000dc320 	.word	0x000dc320

000d7e50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7e50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7e52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7e56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7e5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7e5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7e62:	2304      	movs	r3, #4
   d7e64:	6041      	str	r1, [r0, #4]
   d7e66:	7503      	strb	r3, [r0, #20]
}
   d7e68:	bd10      	pop	{r4, pc}
	...

000d7e6c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7e6c:	b513      	push	{r0, r1, r4, lr}
   d7e6e:	4b05      	ldr	r3, [pc, #20]	; (d7e84 <_ZN9IPAddressC1EPKh+0x18>)
   d7e70:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7e72:	78cb      	ldrb	r3, [r1, #3]
   d7e74:	9300      	str	r3, [sp, #0]
   d7e76:	788b      	ldrb	r3, [r1, #2]
   d7e78:	784a      	ldrb	r2, [r1, #1]
   d7e7a:	7809      	ldrb	r1, [r1, #0]
   d7e7c:	f7ff ffe8 	bl	d7e50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7e80:	b002      	add	sp, #8
   d7e82:	bd10      	pop	{r4, pc}
   d7e84:	000dc320 	.word	0x000dc320

000d7e88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7e88:	4b01      	ldr	r3, [pc, #4]	; (d7e90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7e8a:	4a02      	ldr	r2, [pc, #8]	; (d7e94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7e8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7e8e:	4770      	bx	lr
   d7e90:	2003e614 	.word	0x2003e614
   d7e94:	000dc32c 	.word	0x000dc32c

000d7e98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e98:	2300      	movs	r3, #0
   d7e9a:	6840      	ldr	r0, [r0, #4]
   d7e9c:	461a      	mov	r2, r3
   d7e9e:	f7ff ba95 	b.w	d73cc <network_connect>

000d7ea2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ea2:	6840      	ldr	r0, [r0, #4]
   d7ea4:	2200      	movs	r2, #0
   d7ea6:	2102      	movs	r1, #2
   d7ea8:	f7ff baa0 	b.w	d73ec <network_disconnect>

000d7eac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7eac:	2200      	movs	r2, #0
   d7eae:	6840      	ldr	r0, [r0, #4]
   d7eb0:	4611      	mov	r1, r2
   d7eb2:	f7ff ba93 	b.w	d73dc <network_connecting>

000d7eb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7eb6:	2200      	movs	r2, #0
   d7eb8:	6840      	ldr	r0, [r0, #4]
   d7eba:	4611      	mov	r1, r2
   d7ebc:	f7ff ba9e 	b.w	d73fc <network_ready>

000d7ec0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ec0:	2300      	movs	r3, #0
   d7ec2:	6840      	ldr	r0, [r0, #4]
   d7ec4:	461a      	mov	r2, r3
   d7ec6:	4619      	mov	r1, r3
   d7ec8:	f7ff baa0 	b.w	d740c <network_on>

000d7ecc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ecc:	2300      	movs	r3, #0
   d7ece:	6840      	ldr	r0, [r0, #4]
   d7ed0:	461a      	mov	r2, r3
   d7ed2:	4619      	mov	r1, r3
   d7ed4:	f7ff baa2 	b.w	d741c <network_off>

000d7ed8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7ed8:	6840      	ldr	r0, [r0, #4]
   d7eda:	2100      	movs	r1, #0
   d7edc:	f7ff bac6 	b.w	d746c <network_is_on>

000d7ee0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7ee0:	6840      	ldr	r0, [r0, #4]
   d7ee2:	2100      	movs	r1, #0
   d7ee4:	f7ff baca 	b.w	d747c <network_is_off>

000d7ee8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ee8:	6840      	ldr	r0, [r0, #4]
   d7eea:	2200      	movs	r2, #0
   d7eec:	f081 0101 	eor.w	r1, r1, #1
   d7ef0:	f7ff ba9c 	b.w	d742c <network_listen>

000d7ef4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ef4:	6840      	ldr	r0, [r0, #4]
   d7ef6:	2200      	movs	r2, #0
   d7ef8:	f7ff baa8 	b.w	d744c <network_set_listen_timeout>

000d7efc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7efc:	2200      	movs	r2, #0
   d7efe:	6840      	ldr	r0, [r0, #4]
   d7f00:	4611      	mov	r1, r2
   d7f02:	f7ff baab 	b.w	d745c <network_get_listen_timeout>

000d7f06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f06:	2200      	movs	r2, #0
   d7f08:	6840      	ldr	r0, [r0, #4]
   d7f0a:	4611      	mov	r1, r2
   d7f0c:	f7ff ba96 	b.w	d743c <network_listening>

000d7f10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f14:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7f16:	b095      	sub	sp, #84	; 0x54
   d7f18:	4616      	mov	r6, r2
   d7f1a:	460d      	mov	r5, r1
   d7f1c:	4607      	mov	r7, r0
    IPAddress addr;
   d7f1e:	f7ff ff77 	bl	d7e10 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7f22:	4621      	mov	r1, r4
   d7f24:	2218      	movs	r2, #24
   d7f26:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7f28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f2a:	f001 fca7 	bl	d987c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f2e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7f30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f34:	4621      	mov	r1, r4
   d7f36:	466b      	mov	r3, sp
   d7f38:	aa0c      	add	r2, sp, #48	; 0x30
   d7f3a:	4630      	mov	r0, r6
   d7f3c:	f7ff f8e8 	bl	d7110 <netdb_getaddrinfo>
    if (!r) {
   d7f40:	4604      	mov	r4, r0
   d7f42:	2800      	cmp	r0, #0
   d7f44:	d14c      	bne.n	d7fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f46:	4602      	mov	r2, r0
   d7f48:	2101      	movs	r1, #1
   d7f4a:	6868      	ldr	r0, [r5, #4]
   d7f4c:	f7ff fa56 	bl	d73fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f50:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f52:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f54:	4622      	mov	r2, r4
   d7f56:	6868      	ldr	r0, [r5, #4]
   d7f58:	f7ff fa50 	bl	d73fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f5c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f5e:	4681      	mov	r9, r0
        bool ok = false;
   d7f60:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f62:	2e00      	cmp	r6, #0
   d7f64:	d03c      	beq.n	d7fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7f66:	2900      	cmp	r1, #0
   d7f68:	d13a      	bne.n	d7fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f6a:	6873      	ldr	r3, [r6, #4]
   d7f6c:	2b02      	cmp	r3, #2
   d7f6e:	d003      	beq.n	d7f78 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7f70:	2b0a      	cmp	r3, #10
   d7f72:	d011      	beq.n	d7f98 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f74:	69f6      	ldr	r6, [r6, #28]
   d7f76:	e7f4      	b.n	d7f62 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7f78:	f1b8 0f00 	cmp.w	r8, #0
   d7f7c:	d00a      	beq.n	d7f94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f7e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7f80:	a806      	add	r0, sp, #24
   d7f82:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7f84:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7f86:	f7ff ff71 	bl	d7e6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f8c:	1d3c      	adds	r4, r7, #4
   d7f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f90:	682b      	ldr	r3, [r5, #0]
   d7f92:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7f94:	4641      	mov	r1, r8
   d7f96:	e7ed      	b.n	d7f74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f98:	f1b9 0f00 	cmp.w	r9, #0
   d7f9c:	d101      	bne.n	d7fa2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7f9e:	4649      	mov	r1, r9
   d7fa0:	e7e8      	b.n	d7f74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7fa2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7fa4:	2210      	movs	r2, #16
   d7fa6:	a801      	add	r0, sp, #4
   d7fa8:	f001 fc68 	bl	d987c <memset>
                    a.v = 6;
   d7fac:	2306      	movs	r3, #6
   d7fae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7fb2:	ad01      	add	r5, sp, #4
   d7fb4:	f104 0308 	add.w	r3, r4, #8
   d7fb8:	3418      	adds	r4, #24
   d7fba:	6818      	ldr	r0, [r3, #0]
   d7fbc:	6859      	ldr	r1, [r3, #4]
   d7fbe:	462a      	mov	r2, r5
   d7fc0:	c203      	stmia	r2!, {r0, r1}
   d7fc2:	3308      	adds	r3, #8
   d7fc4:	42a3      	cmp	r3, r4
   d7fc6:	4615      	mov	r5, r2
   d7fc8:	d1f7      	bne.n	d7fba <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7fca:	a901      	add	r1, sp, #4
   d7fcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7fce:	ad07      	add	r5, sp, #28
   d7fd0:	f7ff ff2c 	bl	d7e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fd6:	1d3c      	adds	r4, r7, #4
   d7fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fda:	682b      	ldr	r3, [r5, #0]
   d7fdc:	7023      	strb	r3, [r4, #0]
   d7fde:	e7de      	b.n	d7f9e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7fe0:	9800      	ldr	r0, [sp, #0]
   d7fe2:	f7ff f88d 	bl	d7100 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7fe6:	4638      	mov	r0, r7
   d7fe8:	b015      	add	sp, #84	; 0x54
   d7fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7ff0:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ff2:	4a03      	ldr	r2, [pc, #12]	; (d8000 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ff4:	601a      	str	r2, [r3, #0]
   d7ff6:	2200      	movs	r2, #0
   d7ff8:	605a      	str	r2, [r3, #4]

} // spark
   d7ffa:	4770      	bx	lr
   d7ffc:	2003e618 	.word	0x2003e618
   d8000:	000dc338 	.word	0x000dc338

000d8004 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8006:	4606      	mov	r6, r0
   d8008:	460d      	mov	r5, r1
  size_t n = 0;
   d800a:	188f      	adds	r7, r1, r2
   d800c:	2400      	movs	r4, #0
  while (size--) {
   d800e:	42bd      	cmp	r5, r7
   d8010:	d00c      	beq.n	d802c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8012:	6833      	ldr	r3, [r6, #0]
   d8014:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8018:	689b      	ldr	r3, [r3, #8]
   d801a:	4630      	mov	r0, r6
   d801c:	4798      	blx	r3
     if (chunk>=0)
   d801e:	1e03      	subs	r3, r0, #0
   d8020:	db01      	blt.n	d8026 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8022:	441c      	add	r4, r3
  while (size--) {
   d8024:	e7f3      	b.n	d800e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8026:	2c00      	cmp	r4, #0
   d8028:	bf08      	it	eq
   d802a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d802c:	4620      	mov	r0, r4
   d802e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8030 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d8030:	b513      	push	{r0, r1, r4, lr}
   d8032:	4604      	mov	r4, r0
    }
   d8034:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8036:	b159      	cbz	r1, d8050 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8038:	9101      	str	r1, [sp, #4]
   d803a:	f001 fc7a 	bl	d9932 <strlen>
   d803e:	6823      	ldr	r3, [r4, #0]
   d8040:	9901      	ldr	r1, [sp, #4]
   d8042:	68db      	ldr	r3, [r3, #12]
   d8044:	4602      	mov	r2, r0
   d8046:	4620      	mov	r0, r4
    }
   d8048:	b002      	add	sp, #8
   d804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d804e:	4718      	bx	r3
    }
   d8050:	b002      	add	sp, #8
   d8052:	bd10      	pop	{r4, pc}

000d8054 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8054:	6803      	ldr	r3, [r0, #0]
   d8056:	689b      	ldr	r3, [r3, #8]
   d8058:	4718      	bx	r3

000d805a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d805a:	b530      	push	{r4, r5, lr}
   d805c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d805e:	2300      	movs	r3, #0
   d8060:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8064:	2a01      	cmp	r2, #1
   d8066:	bf98      	it	ls
   d8068:	220a      	movls	r2, #10
   d806a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d806c:	460d      	mov	r5, r1
   d806e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8072:	fb01 5312 	mls	r3, r1, r2, r5
   d8076:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d807a:	2b09      	cmp	r3, #9
   d807c:	bf94      	ite	ls
   d807e:	3330      	addls	r3, #48	; 0x30
   d8080:	3337      	addhi	r3, #55	; 0x37
   d8082:	b2db      	uxtb	r3, r3
  } while(n);
   d8084:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8086:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d808a:	d9ef      	bls.n	d806c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d808c:	4621      	mov	r1, r4
   d808e:	f7ff ffcf 	bl	d8030 <_ZN5Print5writeEPKc>
}
   d8092:	b00b      	add	sp, #44	; 0x2c
   d8094:	bd30      	pop	{r4, r5, pc}

000d8096 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8096:	b510      	push	{r4, lr}
   d8098:	4604      	mov	r4, r0
   d809a:	f7fc f901 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d809e:	4620      	mov	r0, r4
   d80a0:	bd10      	pop	{r4, pc}
	...

000d80a4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d80a4:	4803      	ldr	r0, [pc, #12]	; (d80b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d80a6:	4a04      	ldr	r2, [pc, #16]	; (d80b8 <_GLOBAL__sub_I_RGB+0x14>)
   d80a8:	4904      	ldr	r1, [pc, #16]	; (d80bc <_GLOBAL__sub_I_RGB+0x18>)
   d80aa:	2300      	movs	r3, #0
   d80ac:	6083      	str	r3, [r0, #8]
   d80ae:	f000 bd43 	b.w	d8b38 <__aeabi_atexit>
   d80b2:	bf00      	nop
   d80b4:	2003e620 	.word	0x2003e620
   d80b8:	2003dac8 	.word	0x2003dac8
   d80bc:	000d8097 	.word	0x000d8097

000d80c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d80c0:	b510      	push	{r4, lr}
   d80c2:	4604      	mov	r4, r0
   d80c4:	4608      	mov	r0, r1
{
    _spi = spi;
   d80c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d80c8:	f7ff f82a 	bl	d7120 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d80cc:	2300      	movs	r3, #0
   d80ce:	6063      	str	r3, [r4, #4]
}
   d80d0:	4620      	mov	r0, r4
   d80d2:	bd10      	pop	{r4, pc}

000d80d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d80d4:	b510      	push	{r4, lr}
   d80d6:	4604      	mov	r4, r0
{
	free(buffer);
   d80d8:	6800      	ldr	r0, [r0, #0]
   d80da:	f7ff f9df 	bl	d749c <free>
}
   d80de:	4620      	mov	r0, r4
   d80e0:	bd10      	pop	{r4, pc}

000d80e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d80e2:	b510      	push	{r4, lr}
   d80e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d80e6:	6800      	ldr	r0, [r0, #0]
   d80e8:	b108      	cbz	r0, d80ee <_ZN6String10invalidateEv+0xc>
   d80ea:	f7ff f9d7 	bl	d749c <free>
	buffer = NULL;
   d80ee:	2300      	movs	r3, #0
	capacity = len = 0;
   d80f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d80f4:	6023      	str	r3, [r4, #0]
}
   d80f6:	bd10      	pop	{r4, pc}

000d80f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d80f8:	b538      	push	{r3, r4, r5, lr}
   d80fa:	4604      	mov	r4, r0
   d80fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d80fe:	6800      	ldr	r0, [r0, #0]
   d8100:	3101      	adds	r1, #1
   d8102:	f7ff f9d3 	bl	d74ac <realloc>
	if (newbuffer) {
   d8106:	b110      	cbz	r0, d810e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8108:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d810c:	2001      	movs	r0, #1
	}
	return 0;
}
   d810e:	bd38      	pop	{r3, r4, r5, pc}

000d8110 <_ZN6String7reserveEj>:
{
   d8110:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8112:	6803      	ldr	r3, [r0, #0]
{
   d8114:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8116:	b123      	cbz	r3, d8122 <_ZN6String7reserveEj+0x12>
   d8118:	6843      	ldr	r3, [r0, #4]
   d811a:	428b      	cmp	r3, r1
   d811c:	d301      	bcc.n	d8122 <_ZN6String7reserveEj+0x12>
   d811e:	2001      	movs	r0, #1
}
   d8120:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8122:	4620      	mov	r0, r4
   d8124:	f7ff ffe8 	bl	d80f8 <_ZN6String12changeBufferEj>
   d8128:	2800      	cmp	r0, #0
   d812a:	d0f9      	beq.n	d8120 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d812c:	68a3      	ldr	r3, [r4, #8]
   d812e:	2b00      	cmp	r3, #0
   d8130:	d1f5      	bne.n	d811e <_ZN6String7reserveEj+0xe>
   d8132:	6822      	ldr	r2, [r4, #0]
   d8134:	7013      	strb	r3, [r2, #0]
   d8136:	e7f2      	b.n	d811e <_ZN6String7reserveEj+0xe>

000d8138 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d813a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d813c:	4611      	mov	r1, r2
   d813e:	9201      	str	r2, [sp, #4]
{
   d8140:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8142:	f7ff ffe5 	bl	d8110 <_ZN6String7reserveEj>
   d8146:	9a01      	ldr	r2, [sp, #4]
   d8148:	b928      	cbnz	r0, d8156 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d814a:	4620      	mov	r0, r4
   d814c:	f7ff ffc9 	bl	d80e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8150:	4620      	mov	r0, r4
   d8152:	b003      	add	sp, #12
   d8154:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8156:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8158:	4629      	mov	r1, r5
   d815a:	6820      	ldr	r0, [r4, #0]
   d815c:	f001 fb66 	bl	d982c <memcpy>
	buffer[len] = 0;
   d8160:	6822      	ldr	r2, [r4, #0]
   d8162:	68a3      	ldr	r3, [r4, #8]
   d8164:	2100      	movs	r1, #0
   d8166:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8168:	e7f2      	b.n	d8150 <_ZN6String4copyEPKcj+0x18>

000d816a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d816a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d816c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d816e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8172:	4604      	mov	r4, r0
	len = 0;
   d8174:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8176:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8178:	b141      	cbz	r1, d818c <_ZN6StringC1EPKc+0x22>
   d817a:	4608      	mov	r0, r1
   d817c:	9101      	str	r1, [sp, #4]
   d817e:	f001 fbd8 	bl	d9932 <strlen>
   d8182:	9901      	ldr	r1, [sp, #4]
   d8184:	4602      	mov	r2, r0
   d8186:	4620      	mov	r0, r4
   d8188:	f7ff ffd6 	bl	d8138 <_ZN6String4copyEPKcj>
}
   d818c:	4620      	mov	r0, r4
   d818e:	b002      	add	sp, #8
   d8190:	bd10      	pop	{r4, pc}

000d8192 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8192:	4288      	cmp	r0, r1
{
   d8194:	b510      	push	{r4, lr}
   d8196:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8198:	d005      	beq.n	d81a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d819a:	680b      	ldr	r3, [r1, #0]
   d819c:	b12b      	cbz	r3, d81aa <_ZN6StringaSERKS_+0x18>
   d819e:	688a      	ldr	r2, [r1, #8]
   d81a0:	4619      	mov	r1, r3
   d81a2:	f7ff ffc9 	bl	d8138 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d81a6:	4620      	mov	r0, r4
   d81a8:	bd10      	pop	{r4, pc}
	else invalidate();
   d81aa:	f7ff ff9a 	bl	d80e2 <_ZN6String10invalidateEv>
   d81ae:	e7fa      	b.n	d81a6 <_ZN6StringaSERKS_+0x14>

000d81b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d81b0:	b510      	push	{r4, lr}
	buffer = NULL;
   d81b2:	2300      	movs	r3, #0
String::String(const String &value)
   d81b4:	4604      	mov	r4, r0
	capacity = 0;
   d81b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d81ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d81bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d81be:	f7ff ffe8 	bl	d8192 <_ZN6StringaSERKS_>
}
   d81c2:	4620      	mov	r0, r4
   d81c4:	bd10      	pop	{r4, pc}

000d81c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d81c6:	b570      	push	{r4, r5, r6, lr}
   d81c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d81ca:	460e      	mov	r6, r1
   d81cc:	b909      	cbnz	r1, d81d2 <_ZN6String6concatEPKcj+0xc>
   d81ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d81d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d81d2:	b16a      	cbz	r2, d81f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d81d4:	6884      	ldr	r4, [r0, #8]
   d81d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d81d8:	4621      	mov	r1, r4
   d81da:	f7ff ff99 	bl	d8110 <_ZN6String7reserveEj>
   d81de:	2800      	cmp	r0, #0
   d81e0:	d0f5      	beq.n	d81ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d81e2:	6828      	ldr	r0, [r5, #0]
   d81e4:	68ab      	ldr	r3, [r5, #8]
   d81e6:	4631      	mov	r1, r6
   d81e8:	4418      	add	r0, r3
   d81ea:	f001 fb7d 	bl	d98e8 <strcpy>
	len = newlen;
   d81ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d81f0:	2001      	movs	r0, #1
   d81f2:	e7ed      	b.n	d81d0 <_ZN6String6concatEPKcj+0xa>

000d81f4 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d81f4:	b513      	push	{r0, r1, r4, lr}
   d81f6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d81f8:	b929      	cbnz	r1, d8206 <_ZplRK15StringSumHelperPKc+0x12>
   d81fa:	4620      	mov	r0, r4
   d81fc:	f7ff ff71 	bl	d80e2 <_ZN6String10invalidateEv>
	return a;
}
   d8200:	4620      	mov	r0, r4
   d8202:	b002      	add	sp, #8
   d8204:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8206:	4608      	mov	r0, r1
   d8208:	9101      	str	r1, [sp, #4]
   d820a:	f001 fb92 	bl	d9932 <strlen>
   d820e:	9901      	ldr	r1, [sp, #4]
   d8210:	4602      	mov	r2, r0
   d8212:	4620      	mov	r0, r4
   d8214:	f7ff ffd7 	bl	d81c6 <_ZN6String6concatEPKcj>
   d8218:	2800      	cmp	r0, #0
   d821a:	d0ee      	beq.n	d81fa <_ZplRK15StringSumHelperPKc+0x6>
   d821c:	e7f0      	b.n	d8200 <_ZplRK15StringSumHelperPKc+0xc>

000d821e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d821e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8220:	6882      	ldr	r2, [r0, #8]
   d8222:	b93a      	cbnz	r2, d8234 <_ZNK6String6equalsEPKc+0x16>
   d8224:	b121      	cbz	r1, d8230 <_ZNK6String6equalsEPKc+0x12>
   d8226:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d8228:	fab0 f080 	clz	r0, r0
   d822c:	0940      	lsrs	r0, r0, #5
   d822e:	e000      	b.n	d8232 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8230:	2001      	movs	r0, #1
}
   d8232:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8234:	6800      	ldr	r0, [r0, #0]
   d8236:	b909      	cbnz	r1, d823c <_ZNK6String6equalsEPKc+0x1e>
   d8238:	7800      	ldrb	r0, [r0, #0]
   d823a:	e7f5      	b.n	d8228 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d823c:	f001 fb4a 	bl	d98d4 <strcmp>
   d8240:	e7f2      	b.n	d8228 <_ZNK6String6equalsEPKc+0xa>
	...

000d8244 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d8244:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d8246:	6800      	ldr	r0, [r0, #0]
   d8248:	b140      	cbz	r0, d825c <_ZNK6String7toFloatEv+0x18>
   d824a:	f001 fac7 	bl	d97dc <atof>
   d824e:	ec51 0b10 	vmov	r0, r1, d0
   d8252:	f001 fa2f 	bl	d96b4 <__aeabi_d2f>
   d8256:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d825a:	bd08      	pop	{r3, pc}
	return 0;
   d825c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8264 <_ZNK6String7toFloatEv+0x20>
   d8260:	e7fb      	b.n	d825a <_ZNK6String7toFloatEv+0x16>
   d8262:	bf00      	nop
   d8264:	00000000 	.word	0x00000000

000d8268 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d8268:	b507      	push	{r0, r1, r2, lr}
   d826a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d826c:	2100      	movs	r1, #0
{
   d826e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d8270:	9100      	str	r1, [sp, #0]
   d8272:	2001      	movs	r0, #1
   d8274:	218c      	movs	r1, #140	; 0x8c
   d8276:	f7ff f837 	bl	d72e8 <system_reset>
}
   d827a:	b003      	add	sp, #12
   d827c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8280 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d8280:	4601      	mov	r1, r0
    reset(0, flags);
   d8282:	2000      	movs	r0, #0
   d8284:	f7ff bff0 	b.w	d8268 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d8288 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d8288:	2000      	movs	r0, #0
   d828a:	f7ff bff9 	b.w	d8280 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d8290 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8290:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8292:	4b09      	ldr	r3, [pc, #36]	; (d82b8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8294:	4c09      	ldr	r4, [pc, #36]	; (d82bc <_GLOBAL__sub_I_System+0x2c>)
   d8296:	2202      	movs	r2, #2
   d8298:	2000      	movs	r0, #0
   d829a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d829c:	4b08      	ldr	r3, [pc, #32]	; (d82c0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d829e:	6020      	str	r0, [r4, #0]
   d82a0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d82a2:	71a0      	strb	r0, [r4, #6]
   d82a4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d82a6:	f7fe ffd3 	bl	d7250 <set_system_mode>
SystemClass System;
   d82aa:	4620      	mov	r0, r4
   d82ac:	4a05      	ldr	r2, [pc, #20]	; (d82c4 <_GLOBAL__sub_I_System+0x34>)
   d82ae:	4906      	ldr	r1, [pc, #24]	; (d82c8 <_GLOBAL__sub_I_System+0x38>)
   d82b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d82b4:	f000 bc40 	b.w	d8b38 <__aeabi_atexit>
   d82b8:	2003e63c 	.word	0x2003e63c
   d82bc:	2003e630 	.word	0x2003e630
   d82c0:	ffff0000 	.word	0xffff0000
   d82c4:	2003dac8 	.word	0x2003dac8
   d82c8:	000d4237 	.word	0x000d4237

000d82cc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d82cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d82d0:	4a15      	ldr	r2, [pc, #84]	; (d8328 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d82d2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8334 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d82d6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d82da:	18c0      	adds	r0, r0, r3
   d82dc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d82e0:	4a12      	ldr	r2, [pc, #72]	; (d832c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d82e2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d82e6:	18c6      	adds	r6, r0, r3
   d82e8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d82ec:	e9d8 2300 	ldrd	r2, r3, [r8]
   d82f0:	42bb      	cmp	r3, r7
   d82f2:	bf08      	it	eq
   d82f4:	42b2      	cmpeq	r2, r6
{
   d82f6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d82f8:	d013      	beq.n	d8322 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d82fa:	a903      	add	r1, sp, #12
   d82fc:	4668      	mov	r0, sp
   d82fe:	e9cd 6700 	strd	r6, r7, [sp]
   d8302:	f7ff f913 	bl	d752c <localtime_r>
	calendar_time.tm_year += 1900;
   d8306:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8308:	4d09      	ldr	r5, [pc, #36]	; (d8330 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d830a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d830e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8310:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d831a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d831e:	6823      	ldr	r3, [r4, #0]
   d8320:	602b      	str	r3, [r5, #0]
    }
}
   d8322:	b00c      	add	sp, #48	; 0x30
   d8324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8328:	2003e678 	.word	0x2003e678
   d832c:	2003e670 	.word	0x2003e670
   d8330:	2003e648 	.word	0x2003e648
   d8334:	2003e680 	.word	0x2003e680

000d8338 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8338:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d833a:	2000      	movs	r0, #0
   d833c:	f7ff f826 	bl	d738c <spark_sync_time_pending>
   d8340:	b128      	cbz	r0, d834e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8342:	f7fe fffb 	bl	d733c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8346:	f080 0001 	eor.w	r0, r0, #1
   d834a:	b2c0      	uxtb	r0, r0
    }
   d834c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d834e:	2001      	movs	r0, #1
   d8350:	e7fc      	b.n	d834c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8352 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8352:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8354:	4602      	mov	r2, r0
   d8356:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8358:	4668      	mov	r0, sp
    struct timeval tv = {
   d835a:	2100      	movs	r1, #0
    };
   d835c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8360:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8364:	f7fe fe1c 	bl	d6fa0 <hal_rtc_set_time>
   d8368:	4602      	mov	r2, r0
   d836a:	b910      	cbnz	r0, d8372 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d836c:	4601      	mov	r1, r0
   d836e:	f7fe ff9f 	bl	d72b0 <system_notify_time_changed>
    }
}
   d8372:	b005      	add	sp, #20
   d8374:	f85d fb04 	ldr.w	pc, [sp], #4

000d8378 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8378:	b530      	push	{r4, r5, lr}
   d837a:	4604      	mov	r4, r0
    t += time_zone_cache;
   d837c:	4818      	ldr	r0, [pc, #96]	; (d83e0 <_ZN9TimeClass7timeStrEx+0x68>)
   d837e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8382:	1852      	adds	r2, r2, r1
   d8384:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d8388:	4816      	ldr	r0, [pc, #88]	; (d83e4 <_ZN9TimeClass7timeStrEx+0x6c>)
   d838a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d838e:	1852      	adds	r2, r2, r1
{
   d8390:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8392:	eb40 0303 	adc.w	r3, r0, r3
   d8396:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d839a:	2224      	movs	r2, #36	; 0x24
   d839c:	eb0d 0002 	add.w	r0, sp, r2
   d83a0:	2100      	movs	r1, #0
   d83a2:	f001 fa6b 	bl	d987c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d83a6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d83a8:	a909      	add	r1, sp, #36	; 0x24
   d83aa:	4668      	mov	r0, sp
   d83ac:	f7ff f8be 	bl	d752c <localtime_r>
    char ascstr[26] = {};
   d83b0:	2216      	movs	r2, #22
   d83b2:	4629      	mov	r1, r5
   d83b4:	a803      	add	r0, sp, #12
   d83b6:	9502      	str	r5, [sp, #8]
   d83b8:	f001 fa60 	bl	d987c <memset>
    asctime_r(&calendar_time, ascstr);
   d83bc:	a902      	add	r1, sp, #8
   d83be:	a809      	add	r0, sp, #36	; 0x24
   d83c0:	f001 f9e6 	bl	d9790 <asctime_r>
    int len = strlen(ascstr);
   d83c4:	a802      	add	r0, sp, #8
   d83c6:	f001 fab4 	bl	d9932 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d83ca:	ab12      	add	r3, sp, #72	; 0x48
   d83cc:	4418      	add	r0, r3
    return String(ascstr);
   d83ce:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d83d0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d83d4:	4620      	mov	r0, r4
   d83d6:	f7ff fec8 	bl	d816a <_ZN6StringC1EPKc>
}
   d83da:	4620      	mov	r0, r4
   d83dc:	b013      	add	sp, #76	; 0x4c
   d83de:	bd30      	pop	{r4, r5, pc}
   d83e0:	2003e678 	.word	0x2003e678
   d83e4:	2003e670 	.word	0x2003e670

000d83e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d83e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83ec:	b0a5      	sub	sp, #148	; 0x94
   d83ee:	4607      	mov	r7, r0
   d83f0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d83f2:	a814      	add	r0, sp, #80	; 0x50
{
   d83f4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d83f6:	223f      	movs	r2, #63	; 0x3f
{
   d83f8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d83fa:	f001 fab4 	bl	d9966 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d83fe:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8400:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8402:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8406:	f001 fa94 	bl	d9932 <strlen>
   d840a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d840c:	bb5d      	cbnz	r5, d8466 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d840e:	492a      	ldr	r1, [pc, #168]	; (d84b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8410:	a803      	add	r0, sp, #12
   d8412:	f001 fa69 	bl	d98e8 <strcpy>
   d8416:	ae14      	add	r6, sp, #80	; 0x50
{
   d8418:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d841a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d841e:	45ab      	cmp	fp, r5
   d8420:	d936      	bls.n	d8490 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8422:	46b1      	mov	r9, r6
   d8424:	f105 0a01 	add.w	sl, r5, #1
   d8428:	f819 3b01 	ldrb.w	r3, [r9], #1
   d842c:	2b25      	cmp	r3, #37	; 0x25
   d842e:	d117      	bne.n	d8460 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8430:	7873      	ldrb	r3, [r6, #1]
   d8432:	2b7a      	cmp	r3, #122	; 0x7a
   d8434:	d114      	bne.n	d8460 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d8436:	a803      	add	r0, sp, #12
   d8438:	f001 fa7b 	bl	d9932 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d843c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d843e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8440:	1828      	adds	r0, r5, r0
   d8442:	4418      	add	r0, r3
   d8444:	ebab 0205 	sub.w	r2, fp, r5
   d8448:	1cb1      	adds	r1, r6, #2
   d844a:	f001 f9ef 	bl	d982c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d844e:	4622      	mov	r2, r4
   d8450:	a903      	add	r1, sp, #12
   d8452:	4630      	mov	r0, r6
   d8454:	f001 f9ea 	bl	d982c <memcpy>
            len = strlen(format_str);
   d8458:	a814      	add	r0, sp, #80	; 0x50
   d845a:	f001 fa6a 	bl	d9932 <strlen>
   d845e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8460:	464e      	mov	r6, r9
   d8462:	4655      	mov	r5, sl
   d8464:	e7d9      	b.n	d841a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8466:	213c      	movs	r1, #60	; 0x3c
   d8468:	fb95 f3f1 	sdiv	r3, r5, r1
   d846c:	2b00      	cmp	r3, #0
   d846e:	bfb8      	it	lt
   d8470:	425b      	neglt	r3, r3
   d8472:	fbb3 f2f1 	udiv	r2, r3, r1
   d8476:	fb01 3312 	mls	r3, r1, r2, r3
   d847a:	9300      	str	r3, [sp, #0]
   d847c:	4a0f      	ldr	r2, [pc, #60]	; (d84bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d847e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8482:	2110      	movs	r1, #16
   d8484:	a803      	add	r0, sp, #12
   d8486:	fb95 f3f3 	sdiv	r3, r5, r3
   d848a:	f7ff f81f 	bl	d74cc <snprintf>
   d848e:	e7c2      	b.n	d8416 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d8490:	2100      	movs	r1, #0
   d8492:	222e      	movs	r2, #46	; 0x2e
   d8494:	a808      	add	r0, sp, #32
   d8496:	9107      	str	r1, [sp, #28]
   d8498:	f001 f9f0 	bl	d987c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d849c:	4643      	mov	r3, r8
   d849e:	aa14      	add	r2, sp, #80	; 0x50
   d84a0:	2132      	movs	r1, #50	; 0x32
   d84a2:	a807      	add	r0, sp, #28
   d84a4:	f7ff f83a 	bl	d751c <strftime>
    return String(buf);
   d84a8:	a907      	add	r1, sp, #28
   d84aa:	4638      	mov	r0, r7
   d84ac:	f7ff fe5d 	bl	d816a <_ZN6StringC1EPKc>
}
   d84b0:	4638      	mov	r0, r7
   d84b2:	b025      	add	sp, #148	; 0x94
   d84b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84b8:	000dc36c 	.word	0x000dc36c
   d84bc:	000dc36e 	.word	0x000dc36e

000d84c0 <_ZN9TimeClass6formatExPKc>:
{
   d84c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d84c2:	b08d      	sub	sp, #52	; 0x34
   d84c4:	e9cd 2300 	strd	r2, r3, [sp]
   d84c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d84ca:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d84cc:	b915      	cbnz	r5, d84d4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d84ce:	4b19      	ldr	r3, [pc, #100]	; (d8534 <_ZN9TimeClass6formatExPKc+0x74>)
   d84d0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d84d2:	b12d      	cbz	r5, d84e0 <_ZN9TimeClass6formatExPKc+0x20>
   d84d4:	4b18      	ldr	r3, [pc, #96]	; (d8538 <_ZN9TimeClass6formatExPKc+0x78>)
   d84d6:	4628      	mov	r0, r5
   d84d8:	6819      	ldr	r1, [r3, #0]
   d84da:	f001 f9fb 	bl	d98d4 <strcmp>
   d84de:	b938      	cbnz	r0, d84f0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d84e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d84e4:	4620      	mov	r0, r4
   d84e6:	f7ff ff47 	bl	d8378 <_ZN9TimeClass7timeStrEx>
}
   d84ea:	4620      	mov	r0, r4
   d84ec:	b00d      	add	sp, #52	; 0x34
   d84ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d84f0:	4e12      	ldr	r6, [pc, #72]	; (d853c <_ZN9TimeClass6formatExPKc+0x7c>)
   d84f2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d84f4:	4f12      	ldr	r7, [pc, #72]	; (d8540 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d84f6:	e9d6 3200 	ldrd	r3, r2, [r6]
   d84fa:	185b      	adds	r3, r3, r1
   d84fc:	9901      	ldr	r1, [sp, #4]
   d84fe:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8502:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8506:	181b      	adds	r3, r3, r0
   d8508:	eb41 0202 	adc.w	r2, r1, r2
   d850c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d8510:	2100      	movs	r1, #0
   d8512:	2224      	movs	r2, #36	; 0x24
   d8514:	a803      	add	r0, sp, #12
   d8516:	f001 f9b1 	bl	d987c <memset>
    localtime_r(&t, &calendar_time);
   d851a:	a903      	add	r1, sp, #12
   d851c:	4668      	mov	r0, sp
   d851e:	f7ff f805 	bl	d752c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8522:	6832      	ldr	r2, [r6, #0]
   d8524:	683b      	ldr	r3, [r7, #0]
   d8526:	a903      	add	r1, sp, #12
   d8528:	4413      	add	r3, r2
   d852a:	4620      	mov	r0, r4
   d852c:	462a      	mov	r2, r5
   d852e:	f7ff ff5b 	bl	d83e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8532:	e7da      	b.n	d84ea <_ZN9TimeClass6formatExPKc+0x2a>
   d8534:	2003e644 	.word	0x2003e644
   d8538:	2003d8e8 	.word	0x2003d8e8
   d853c:	2003e678 	.word	0x2003e678
   d8540:	2003e670 	.word	0x2003e670

000d8544 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8544:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8546:	2000      	movs	r0, #0
   d8548:	f7fe fd12 	bl	d6f70 <hal_rtc_time_is_valid>
    if (rtcstate)
   d854c:	4604      	mov	r4, r0
   d854e:	b9a0      	cbnz	r0, d857a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8550:	f7fe fe76 	bl	d7240 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8554:	2801      	cmp	r0, #1
   d8556:	d110      	bne.n	d857a <_ZN9TimeClass7isValidEv+0x36>
   d8558:	4620      	mov	r0, r4
   d855a:	f7fe fea1 	bl	d72a0 <system_thread_get_state>
   d855e:	b960      	cbnz	r0, d857a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8560:	f7ff feea 	bl	d8338 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8564:	b910      	cbnz	r0, d856c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8566:	f7fe fed9 	bl	d731c <spark_process>
        while (_while() && !_condition()) {
   d856a:	e7f9      	b.n	d8560 <_ZN9TimeClass7isValidEv+0x1c>
   d856c:	f7ff fee4 	bl	d8338 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8574:	2000      	movs	r0, #0
   d8576:	f7fe bcfb 	b.w	d6f70 <hal_rtc_time_is_valid>
}
   d857a:	4620      	mov	r0, r4
   d857c:	bd10      	pop	{r4, pc}

000d857e <_ZN9TimeClass3nowEv>:
{
   d857e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8580:	f7ff ffe0 	bl	d8544 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8584:	2210      	movs	r2, #16
   d8586:	2100      	movs	r1, #0
   d8588:	4668      	mov	r0, sp
   d858a:	f001 f977 	bl	d987c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d858e:	2100      	movs	r1, #0
   d8590:	4668      	mov	r0, sp
   d8592:	f7fe fcfd 	bl	d6f90 <hal_rtc_get_time>
}
   d8596:	9800      	ldr	r0, [sp, #0]
   d8598:	b005      	add	sp, #20
   d859a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85a0 <_ZN9TimeClass4hourEv>:
{
   d85a0:	b508      	push	{r3, lr}
	return hour(now());
   d85a2:	f7ff ffec 	bl	d857e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d85a6:	17c1      	asrs	r1, r0, #31
   d85a8:	f7ff fe90 	bl	d82cc <_ZL22Refresh_UnixTime_Cachex>
}
   d85ac:	4b01      	ldr	r3, [pc, #4]	; (d85b4 <_ZN9TimeClass4hourEv+0x14>)
   d85ae:	6898      	ldr	r0, [r3, #8]
   d85b0:	bd08      	pop	{r3, pc}
   d85b2:	bf00      	nop
   d85b4:	2003e648 	.word	0x2003e648

000d85b8 <_ZN9TimeClass4yearEv>:
{
   d85b8:	b508      	push	{r3, lr}
	return year(now());
   d85ba:	f7ff ffe0 	bl	d857e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d85be:	17c1      	asrs	r1, r0, #31
   d85c0:	f7ff fe84 	bl	d82cc <_ZL22Refresh_UnixTime_Cachex>
}
   d85c4:	4b01      	ldr	r3, [pc, #4]	; (d85cc <_ZN9TimeClass4yearEv+0x14>)
   d85c6:	6958      	ldr	r0, [r3, #20]
   d85c8:	bd08      	pop	{r3, pc}
   d85ca:	bf00      	nop
   d85cc:	2003e648 	.word	0x2003e648

000d85d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d85d0:	4b02      	ldr	r3, [pc, #8]	; (d85dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d85d2:	681a      	ldr	r2, [r3, #0]
   d85d4:	4b02      	ldr	r3, [pc, #8]	; (d85e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d85d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d85d8:	4770      	bx	lr
   d85da:	bf00      	nop
   d85dc:	2003d8e8 	.word	0x2003d8e8
   d85e0:	2003e644 	.word	0x2003e644

000d85e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d85e4:	4770      	bx	lr

000d85e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d85e6:	7441      	strb	r1, [r0, #17]
}
   d85e8:	4770      	bx	lr

000d85ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d85ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d85ec:	7c00      	ldrb	r0, [r0, #16]
   d85ee:	f7fe fddf 	bl	d71b0 <hal_usart_available_data_for_write>
}
   d85f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d85f6:	bd08      	pop	{r3, pc}

000d85f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d85f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d85fa:	7c00      	ldrb	r0, [r0, #16]
   d85fc:	f7fe fdb0 	bl	d7160 <hal_usart_available>
}
   d8600:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8604:	bd08      	pop	{r3, pc}

000d8606 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8606:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8608:	7c00      	ldrb	r0, [r0, #16]
   d860a:	f7fe fdb9 	bl	d7180 <hal_usart_peek>
}
   d860e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8612:	bd08      	pop	{r3, pc}

000d8614 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8614:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8616:	7c00      	ldrb	r0, [r0, #16]
   d8618:	f7fe fdaa 	bl	d7170 <hal_usart_read>
}
   d861c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8620:	bd08      	pop	{r3, pc}

000d8622 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8622:	7c00      	ldrb	r0, [r0, #16]
   d8624:	f7fe bdb4 	b.w	d7190 <hal_usart_flush>

000d8628 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d862a:	7c45      	ldrb	r5, [r0, #17]
{
   d862c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d862e:	b12d      	cbz	r5, d863c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8630:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8632:	b003      	add	sp, #12
   d8634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8638:	f7fe bd8a 	b.w	d7150 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d863c:	7c00      	ldrb	r0, [r0, #16]
   d863e:	9101      	str	r1, [sp, #4]
   d8640:	f7fe fdb6 	bl	d71b0 <hal_usart_available_data_for_write>
   d8644:	2800      	cmp	r0, #0
   d8646:	9901      	ldr	r1, [sp, #4]
   d8648:	dcf2      	bgt.n	d8630 <_ZN11USARTSerial5writeEh+0x8>
}
   d864a:	4628      	mov	r0, r5
   d864c:	b003      	add	sp, #12
   d864e:	bd30      	pop	{r4, r5, pc}

000d8650 <_ZN11USARTSerialD0Ev>:
   d8650:	b510      	push	{r4, lr}
   d8652:	2114      	movs	r1, #20
   d8654:	4604      	mov	r4, r0
   d8656:	f000 fa74 	bl	d8b42 <_ZdlPvj>
   d865a:	4620      	mov	r0, r4
   d865c:	bd10      	pop	{r4, pc}
	...

000d8660 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8660:	b510      	push	{r4, lr}
   d8662:	f04f 0c00 	mov.w	ip, #0
   d8666:	4604      	mov	r4, r0
   d8668:	4608      	mov	r0, r1
   d866a:	4611      	mov	r1, r2
   d866c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8670:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8674:	4a04      	ldr	r2, [pc, #16]	; (d8688 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8676:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8678:	2201      	movs	r2, #1
  _serial = serial;
   d867a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d867c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d867e:	461a      	mov	r2, r3
   d8680:	f7fe fd5e 	bl	d7140 <hal_usart_init>
}
   d8684:	4620      	mov	r0, r4
   d8686:	bd10      	pop	{r4, pc}
   d8688:	000dc3a0 	.word	0x000dc3a0

000d868c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d868c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d868e:	4c0e      	ldr	r4, [pc, #56]	; (d86c8 <_Z22__fetch_global_Serial1v+0x3c>)
   d8690:	7821      	ldrb	r1, [r4, #0]
   d8692:	f3bf 8f5b 	dmb	ish
   d8696:	f011 0101 	ands.w	r1, r1, #1
   d869a:	d112      	bne.n	d86c2 <_Z22__fetch_global_Serial1v+0x36>
   d869c:	4620      	mov	r0, r4
   d869e:	9101      	str	r1, [sp, #4]
   d86a0:	f7fb fd0a 	bl	d40b8 <__cxa_guard_acquire>
   d86a4:	9901      	ldr	r1, [sp, #4]
   d86a6:	b160      	cbz	r0, d86c2 <_Z22__fetch_global_Serial1v+0x36>
   d86a8:	4a08      	ldr	r2, [pc, #32]	; (d86cc <_Z22__fetch_global_Serial1v+0x40>)
   d86aa:	4b09      	ldr	r3, [pc, #36]	; (d86d0 <_Z22__fetch_global_Serial1v+0x44>)
   d86ac:	4809      	ldr	r0, [pc, #36]	; (d86d4 <_Z22__fetch_global_Serial1v+0x48>)
   d86ae:	f7ff ffd7 	bl	d8660 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d86b2:	4620      	mov	r0, r4
   d86b4:	f7fb fd05 	bl	d40c2 <__cxa_guard_release>
   d86b8:	4a07      	ldr	r2, [pc, #28]	; (d86d8 <_Z22__fetch_global_Serial1v+0x4c>)
   d86ba:	4908      	ldr	r1, [pc, #32]	; (d86dc <_Z22__fetch_global_Serial1v+0x50>)
   d86bc:	4805      	ldr	r0, [pc, #20]	; (d86d4 <_Z22__fetch_global_Serial1v+0x48>)
   d86be:	f000 fa3b 	bl	d8b38 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d86c2:	4804      	ldr	r0, [pc, #16]	; (d86d4 <_Z22__fetch_global_Serial1v+0x48>)
   d86c4:	b002      	add	sp, #8
   d86c6:	bd10      	pop	{r4, pc}
   d86c8:	2003e688 	.word	0x2003e688
   d86cc:	2003e68c 	.word	0x2003e68c
   d86d0:	2003e710 	.word	0x2003e710
   d86d4:	2003e794 	.word	0x2003e794
   d86d8:	2003dac8 	.word	0x2003dac8
   d86dc:	000d85e5 	.word	0x000d85e5

000d86e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d86e0:	7441      	strb	r1, [r0, #17]
}
   d86e2:	4770      	bx	lr

000d86e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d86e4:	4770      	bx	lr

000d86e6 <_ZN9USBSerial4readEv>:
{
   d86e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d86e8:	2100      	movs	r1, #0
   d86ea:	7c00      	ldrb	r0, [r0, #16]
   d86ec:	f7fe fd80 	bl	d71f0 <HAL_USB_USART_Receive_Data>
}
   d86f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d86f4:	bd08      	pop	{r3, pc}

000d86f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d86f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d86f8:	2101      	movs	r1, #1
   d86fa:	7c00      	ldrb	r0, [r0, #16]
   d86fc:	f7fe fd78 	bl	d71f0 <HAL_USB_USART_Receive_Data>
}
   d8700:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8704:	bd08      	pop	{r3, pc}

000d8706 <_ZN9USBSerial17availableForWriteEv>:
{
   d8706:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8708:	7c00      	ldrb	r0, [r0, #16]
   d870a:	f7fe fd69 	bl	d71e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d870e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8712:	bd08      	pop	{r3, pc}

000d8714 <_ZN9USBSerial9availableEv>:
{
   d8714:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8716:	7c00      	ldrb	r0, [r0, #16]
   d8718:	f7fe fd5a 	bl	d71d0 <HAL_USB_USART_Available_Data>
}
   d871c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8720:	bd08      	pop	{r3, pc}

000d8722 <_ZN9USBSerial5writeEh>:
{
   d8722:	b513      	push	{r0, r1, r4, lr}
   d8724:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8726:	7c00      	ldrb	r0, [r0, #16]
{
   d8728:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d872a:	f7fe fd59 	bl	d71e0 <HAL_USB_USART_Available_Data_For_Write>
   d872e:	2800      	cmp	r0, #0
   d8730:	9901      	ldr	r1, [sp, #4]
   d8732:	dc01      	bgt.n	d8738 <_ZN9USBSerial5writeEh+0x16>
   d8734:	7c60      	ldrb	r0, [r4, #17]
   d8736:	b120      	cbz	r0, d8742 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8738:	7c20      	ldrb	r0, [r4, #16]
   d873a:	f7fe fd61 	bl	d7200 <HAL_USB_USART_Send_Data>
   d873e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8742:	b002      	add	sp, #8
   d8744:	bd10      	pop	{r4, pc}

000d8746 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8746:	7c00      	ldrb	r0, [r0, #16]
   d8748:	f7fe bd62 	b.w	d7210 <HAL_USB_USART_Flush_Data>

000d874c <_ZN9USBSerialD0Ev>:
   d874c:	b510      	push	{r4, lr}
   d874e:	2114      	movs	r1, #20
   d8750:	4604      	mov	r4, r0
   d8752:	f000 f9f6 	bl	d8b42 <_ZdlPvj>
   d8756:	4620      	mov	r0, r4
   d8758:	bd10      	pop	{r4, pc}
	...

000d875c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d875c:	b510      	push	{r4, lr}
   d875e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8762:	4604      	mov	r4, r0
   d8764:	4608      	mov	r0, r1
   d8766:	2100      	movs	r1, #0
   d8768:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d876c:	4b04      	ldr	r3, [pc, #16]	; (d8780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d876e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8770:	2301      	movs	r3, #1
  _serial = serial;
   d8772:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8774:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8776:	4611      	mov	r1, r2
   d8778:	f7fe fd22 	bl	d71c0 <HAL_USB_USART_Init>
}
   d877c:	4620      	mov	r0, r4
   d877e:	bd10      	pop	{r4, pc}
   d8780:	000dc3d0 	.word	0x000dc3d0

000d8784 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8784:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8786:	2214      	movs	r2, #20
{
   d8788:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d878a:	2100      	movs	r1, #0
   d878c:	f001 f876 	bl	d987c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8790:	4620      	mov	r0, r4
   d8792:	bd10      	pop	{r4, pc}

000d8794 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8794:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8796:	4c10      	ldr	r4, [pc, #64]	; (d87d8 <_Z16_fetch_usbserialv+0x44>)
{
   d8798:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d879a:	a803      	add	r0, sp, #12
   d879c:	f7ff fff2 	bl	d8784 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87a0:	7821      	ldrb	r1, [r4, #0]
   d87a2:	f3bf 8f5b 	dmb	ish
   d87a6:	f011 0101 	ands.w	r1, r1, #1
   d87aa:	d111      	bne.n	d87d0 <_Z16_fetch_usbserialv+0x3c>
   d87ac:	4620      	mov	r0, r4
   d87ae:	9101      	str	r1, [sp, #4]
   d87b0:	f7fb fc82 	bl	d40b8 <__cxa_guard_acquire>
   d87b4:	9901      	ldr	r1, [sp, #4]
   d87b6:	b158      	cbz	r0, d87d0 <_Z16_fetch_usbserialv+0x3c>
   d87b8:	aa03      	add	r2, sp, #12
   d87ba:	4808      	ldr	r0, [pc, #32]	; (d87dc <_Z16_fetch_usbserialv+0x48>)
   d87bc:	f7ff ffce 	bl	d875c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d87c0:	4620      	mov	r0, r4
   d87c2:	f7fb fc7e 	bl	d40c2 <__cxa_guard_release>
   d87c6:	4a06      	ldr	r2, [pc, #24]	; (d87e0 <_Z16_fetch_usbserialv+0x4c>)
   d87c8:	4906      	ldr	r1, [pc, #24]	; (d87e4 <_Z16_fetch_usbserialv+0x50>)
   d87ca:	4804      	ldr	r0, [pc, #16]	; (d87dc <_Z16_fetch_usbserialv+0x48>)
   d87cc:	f000 f9b4 	bl	d8b38 <__aeabi_atexit>
	return _usbserial;
}
   d87d0:	4802      	ldr	r0, [pc, #8]	; (d87dc <_Z16_fetch_usbserialv+0x48>)
   d87d2:	b008      	add	sp, #32
   d87d4:	bd10      	pop	{r4, pc}
   d87d6:	bf00      	nop
   d87d8:	2003e7a8 	.word	0x2003e7a8
   d87dc:	2003e7ac 	.word	0x2003e7ac
   d87e0:	2003dac8 	.word	0x2003dac8
   d87e4:	000d86e5 	.word	0x000d86e5

000d87e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d87e8:	2200      	movs	r2, #0
   d87ea:	6840      	ldr	r0, [r0, #4]
   d87ec:	4611      	mov	r1, r2
   d87ee:	f7fe be05 	b.w	d73fc <network_ready>

000d87f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d87f2:	2200      	movs	r2, #0
   d87f4:	6840      	ldr	r0, [r0, #4]
   d87f6:	4611      	mov	r1, r2
   d87f8:	f7fe be20 	b.w	d743c <network_listening>

000d87fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d87fc:	2200      	movs	r2, #0
   d87fe:	6840      	ldr	r0, [r0, #4]
   d8800:	4611      	mov	r1, r2
   d8802:	f7fe be2b 	b.w	d745c <network_get_listen_timeout>

000d8806 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8806:	6840      	ldr	r0, [r0, #4]
   d8808:	2200      	movs	r2, #0
   d880a:	f7fe be1f 	b.w	d744c <network_set_listen_timeout>

000d880e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d880e:	6840      	ldr	r0, [r0, #4]
   d8810:	2200      	movs	r2, #0
   d8812:	f081 0101 	eor.w	r1, r1, #1
   d8816:	f7fe be09 	b.w	d742c <network_listen>

000d881a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d881a:	2300      	movs	r3, #0
   d881c:	6840      	ldr	r0, [r0, #4]
   d881e:	461a      	mov	r2, r3
   d8820:	4619      	mov	r1, r3
   d8822:	f7fe bdfb 	b.w	d741c <network_off>

000d8826 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8826:	2300      	movs	r3, #0
   d8828:	6840      	ldr	r0, [r0, #4]
   d882a:	461a      	mov	r2, r3
   d882c:	4619      	mov	r1, r3
   d882e:	f7fe bded 	b.w	d740c <network_on>

000d8832 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8832:	2200      	movs	r2, #0
   d8834:	6840      	ldr	r0, [r0, #4]
   d8836:	4611      	mov	r1, r2
   d8838:	f7fe bdd0 	b.w	d73dc <network_connecting>

000d883c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d883c:	6840      	ldr	r0, [r0, #4]
   d883e:	2200      	movs	r2, #0
   d8840:	2102      	movs	r1, #2
   d8842:	f7fe bdd3 	b.w	d73ec <network_disconnect>

000d8846 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8846:	2300      	movs	r3, #0
   d8848:	6840      	ldr	r0, [r0, #4]
   d884a:	461a      	mov	r2, r3
   d884c:	f7fe bdbe 	b.w	d73cc <network_connect>

000d8850 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8850:	4b02      	ldr	r3, [pc, #8]	; (d885c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8852:	2204      	movs	r2, #4
   d8854:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8856:	4a02      	ldr	r2, [pc, #8]	; (d8860 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8858:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d885a:	4770      	bx	lr
   d885c:	2003e7c0 	.word	0x2003e7c0
   d8860:	000dc400 	.word	0x000dc400

000d8864 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8864:	4b01      	ldr	r3, [pc, #4]	; (d886c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8866:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8868:	4770      	bx	lr
   d886a:	bf00      	nop
   d886c:	2003d8f0 	.word	0x2003d8f0

000d8870 <serialEventRun>:
{
   d8870:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8872:	4b0b      	ldr	r3, [pc, #44]	; (d88a0 <serialEventRun+0x30>)
   d8874:	b143      	cbz	r3, d8888 <serialEventRun+0x18>
   d8876:	f7ff ff8d 	bl	d8794 <_Z16_fetch_usbserialv>
   d887a:	6803      	ldr	r3, [r0, #0]
   d887c:	691b      	ldr	r3, [r3, #16]
   d887e:	4798      	blx	r3
   d8880:	2800      	cmp	r0, #0
   d8882:	dd01      	ble.n	d8888 <serialEventRun+0x18>
        serialEvent();
   d8884:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8888:	4b06      	ldr	r3, [pc, #24]	; (d88a4 <serialEventRun+0x34>)
   d888a:	b143      	cbz	r3, d889e <serialEventRun+0x2e>
   d888c:	f7ff fefe 	bl	d868c <_Z22__fetch_global_Serial1v>
   d8890:	6803      	ldr	r3, [r0, #0]
   d8892:	691b      	ldr	r3, [r3, #16]
   d8894:	4798      	blx	r3
   d8896:	2800      	cmp	r0, #0
   d8898:	dd01      	ble.n	d889e <serialEventRun+0x2e>
        serialEvent1();
   d889a:	f3af 8000 	nop.w
}
   d889e:	bd08      	pop	{r3, pc}
	...

000d88a8 <_post_loop>:
{
   d88a8:	b508      	push	{r3, lr}
	serialEventRun();
   d88aa:	f7ff ffe1 	bl	d8870 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d88ae:	f7fe fb57 	bl	d6f60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d88b2:	4b01      	ldr	r3, [pc, #4]	; (d88b8 <_post_loop+0x10>)
   d88b4:	6018      	str	r0, [r3, #0]
}
   d88b6:	bd08      	pop	{r3, pc}
   d88b8:	2003e7dc 	.word	0x2003e7dc

000d88bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d88bc:	4802      	ldr	r0, [pc, #8]	; (d88c8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d88be:	4a03      	ldr	r2, [pc, #12]	; (d88cc <_Z33system_initialize_user_backup_ramv+0x10>)
   d88c0:	4903      	ldr	r1, [pc, #12]	; (d88d0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d88c2:	1a12      	subs	r2, r2, r0
   d88c4:	f000 bfb2 	b.w	d982c <memcpy>
   d88c8:	2003f400 	.word	0x2003f400
   d88cc:	2003fc04 	.word	0x2003fc04
   d88d0:	000dc740 	.word	0x000dc740

000d88d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d88d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d88d6:	2300      	movs	r3, #0
   d88d8:	9300      	str	r3, [sp, #0]
   d88da:	461a      	mov	r2, r3
   d88dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d88e0:	f7fe fcf8 	bl	d72d4 <system_ctrl_set_result>
}
   d88e4:	b003      	add	sp, #12
   d88e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d88ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d88ee:	8843      	ldrh	r3, [r0, #2]
   d88f0:	2b0a      	cmp	r3, #10
   d88f2:	d008      	beq.n	d8906 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d88f4:	2b50      	cmp	r3, #80	; 0x50
   d88f6:	d10b      	bne.n	d8910 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d88f8:	4b09      	ldr	r3, [pc, #36]	; (d8920 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d88fa:	681b      	ldr	r3, [r3, #0]
   d88fc:	b14b      	cbz	r3, d8912 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d88fe:	b003      	add	sp, #12
   d8900:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8904:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8906:	f7ff ffe5 	bl	d88d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d890a:	b003      	add	sp, #12
   d890c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8910:	2300      	movs	r3, #0
   d8912:	9300      	str	r3, [sp, #0]
   d8914:	461a      	mov	r2, r3
   d8916:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d891a:	f7fe fcdb 	bl	d72d4 <system_ctrl_set_result>
}
   d891e:	e7f4      	b.n	d890a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8920:	2003e7cc 	.word	0x2003e7cc

000d8924 <module_user_init_hook>:
{
   d8924:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8926:	4c12      	ldr	r4, [pc, #72]	; (d8970 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8928:	4812      	ldr	r0, [pc, #72]	; (d8974 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d892a:	4d13      	ldr	r5, [pc, #76]	; (d8978 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d892c:	2100      	movs	r1, #0
   d892e:	f7fe fded 	bl	d750c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8932:	6823      	ldr	r3, [r4, #0]
   d8934:	42ab      	cmp	r3, r5
   d8936:	4b11      	ldr	r3, [pc, #68]	; (d897c <module_user_init_hook+0x58>)
   d8938:	bf0c      	ite	eq
   d893a:	2201      	moveq	r2, #1
   d893c:	2200      	movne	r2, #0
   d893e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8940:	d002      	beq.n	d8948 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8942:	f7ff ffbb 	bl	d88bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8946:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8948:	f7fe faf2 	bl	d6f30 <HAL_RNG_GetRandomNumber>
   d894c:	4604      	mov	r4, r0
    srand(seed);
   d894e:	f000 ff9d 	bl	d988c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8952:	4b0b      	ldr	r3, [pc, #44]	; (d8980 <module_user_init_hook+0x5c>)
   d8954:	b113      	cbz	r3, d895c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d8956:	4620      	mov	r0, r4
   d8958:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d895c:	2100      	movs	r1, #0
   d895e:	4808      	ldr	r0, [pc, #32]	; (d8980 <module_user_init_hook+0x5c>)
   d8960:	f7fe fd2c 	bl	d73bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8968:	4806      	ldr	r0, [pc, #24]	; (d8984 <module_user_init_hook+0x60>)
   d896a:	2100      	movs	r1, #0
   d896c:	f7fe bca8 	b.w	d72c0 <system_ctrl_set_app_request_handler>
   d8970:	2003fc00 	.word	0x2003fc00
   d8974:	000d8865 	.word	0x000d8865
   d8978:	9a271c1e 	.word	0x9a271c1e
   d897c:	2003e7c8 	.word	0x2003e7c8
   d8980:	00000000 	.word	0x00000000
   d8984:	000d88ed 	.word	0x000d88ed

000d8988 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8988:	b508      	push	{r3, lr}
   d898a:	4b02      	ldr	r3, [pc, #8]	; (d8994 <spark_protocol_instance+0xc>)
   d898c:	681b      	ldr	r3, [r3, #0]
   d898e:	681b      	ldr	r3, [r3, #0]
   d8990:	9301      	str	r3, [sp, #4]
   d8992:	bd08      	pop	{r3, pc}
   d8994:	0003025c 	.word	0x0003025c

000d8998 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8998:	b508      	push	{r3, lr}
   d899a:	4b02      	ldr	r3, [pc, #8]	; (d89a4 <spark_protocol_set_product_id+0xc>)
   d899c:	681b      	ldr	r3, [r3, #0]
   d899e:	685b      	ldr	r3, [r3, #4]
   d89a0:	9301      	str	r3, [sp, #4]
   d89a2:	bd08      	pop	{r3, pc}
   d89a4:	0003025c 	.word	0x0003025c

000d89a8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d89a8:	b508      	push	{r3, lr}
   d89aa:	4b02      	ldr	r3, [pc, #8]	; (d89b4 <spark_protocol_set_product_firmware_version+0xc>)
   d89ac:	681b      	ldr	r3, [r3, #0]
   d89ae:	689b      	ldr	r3, [r3, #8]
   d89b0:	9301      	str	r3, [sp, #4]
   d89b2:	bd08      	pop	{r3, pc}
   d89b4:	0003025c 	.word	0x0003025c

000d89b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d89b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d89ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d89bc:	d902      	bls.n	d89c4 <pinAvailable+0xc>
    return false;
   d89be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d89c0:	b002      	add	sp, #8
   d89c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d89c4:	f1a0 030b 	sub.w	r3, r0, #11
   d89c8:	2b02      	cmp	r3, #2
   d89ca:	d81a      	bhi.n	d8a02 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d89cc:	4c17      	ldr	r4, [pc, #92]	; (d8a2c <pinAvailable+0x74>)
   d89ce:	7821      	ldrb	r1, [r4, #0]
   d89d0:	f3bf 8f5b 	dmb	ish
   d89d4:	f011 0101 	ands.w	r1, r1, #1
   d89d8:	d10b      	bne.n	d89f2 <pinAvailable+0x3a>
   d89da:	4620      	mov	r0, r4
   d89dc:	9101      	str	r1, [sp, #4]
   d89de:	f7fb fb6b 	bl	d40b8 <__cxa_guard_acquire>
   d89e2:	9901      	ldr	r1, [sp, #4]
   d89e4:	b128      	cbz	r0, d89f2 <pinAvailable+0x3a>
   d89e6:	4812      	ldr	r0, [pc, #72]	; (d8a30 <pinAvailable+0x78>)
   d89e8:	f7ff fb6a 	bl	d80c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d89ec:	4620      	mov	r0, r4
   d89ee:	f7fb fb68 	bl	d40c2 <__cxa_guard_release>
   d89f2:	4b0f      	ldr	r3, [pc, #60]	; (d8a30 <pinAvailable+0x78>)
   d89f4:	7818      	ldrb	r0, [r3, #0]
   d89f6:	f7fe fb9b 	bl	d7130 <hal_spi_is_enabled>
   d89fa:	2800      	cmp	r0, #0
   d89fc:	d1df      	bne.n	d89be <pinAvailable+0x6>
  return true; // 'pin' is available
   d89fe:	2001      	movs	r0, #1
   d8a00:	e7de      	b.n	d89c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8a02:	2801      	cmp	r0, #1
   d8a04:	d809      	bhi.n	d8a1a <pinAvailable+0x62>
   d8a06:	f000 f86f 	bl	d8ae8 <_Z19__fetch_global_Wirev>
   d8a0a:	2100      	movs	r1, #0
   d8a0c:	7c00      	ldrb	r0, [r0, #16]
   d8a0e:	f7fe fb47 	bl	d70a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8a12:	f080 0001 	eor.w	r0, r0, #1
   d8a16:	b2c0      	uxtb	r0, r0
   d8a18:	e7d2      	b.n	d89c0 <pinAvailable+0x8>
   d8a1a:	3809      	subs	r0, #9
   d8a1c:	2801      	cmp	r0, #1
   d8a1e:	d8ee      	bhi.n	d89fe <pinAvailable+0x46>
   d8a20:	f7ff fe34 	bl	d868c <_Z22__fetch_global_Serial1v>
   d8a24:	7c00      	ldrb	r0, [r0, #16]
   d8a26:	f7fe fbbb 	bl	d71a0 <hal_usart_is_enabled>
   d8a2a:	e7f2      	b.n	d8a12 <pinAvailable+0x5a>
   d8a2c:	2003e7d0 	.word	0x2003e7d0
   d8a30:	2003e7d4 	.word	0x2003e7d4

000d8a34 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8a34:	2823      	cmp	r0, #35	; 0x23
{
   d8a36:	b538      	push	{r3, r4, r5, lr}
   d8a38:	4604      	mov	r4, r0
   d8a3a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8a3c:	d80a      	bhi.n	d8a54 <pinMode+0x20>
   d8a3e:	29ff      	cmp	r1, #255	; 0xff
   d8a40:	d008      	beq.n	d8a54 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8a42:	f7ff ffb9 	bl	d89b8 <pinAvailable>
   d8a46:	b128      	cbz	r0, d8a54 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8a48:	4629      	mov	r1, r5
   d8a4a:	4620      	mov	r0, r4
}
   d8a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8a50:	f7fe bab6 	b.w	d6fc0 <HAL_Pin_Mode>
}
   d8a54:	bd38      	pop	{r3, r4, r5, pc}

000d8a56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8a56:	b538      	push	{r3, r4, r5, lr}
   d8a58:	4604      	mov	r4, r0
   d8a5a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8a5c:	f7fe fab8 	bl	d6fd0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8a60:	28ff      	cmp	r0, #255	; 0xff
   d8a62:	d010      	beq.n	d8a86 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8a64:	2806      	cmp	r0, #6
   d8a66:	d804      	bhi.n	d8a72 <digitalWrite+0x1c>
   d8a68:	234d      	movs	r3, #77	; 0x4d
   d8a6a:	fa23 f000 	lsr.w	r0, r3, r0
   d8a6e:	07c3      	lsls	r3, r0, #31
   d8a70:	d409      	bmi.n	d8a86 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8a72:	4620      	mov	r0, r4
   d8a74:	f7ff ffa0 	bl	d89b8 <pinAvailable>
   d8a78:	b128      	cbz	r0, d8a86 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8a7a:	4629      	mov	r1, r5
   d8a7c:	4620      	mov	r0, r4
}
   d8a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8a82:	f7fe baad 	b.w	d6fe0 <HAL_GPIO_Write>
}
   d8a86:	bd38      	pop	{r3, r4, r5, pc}

000d8a88 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8a88:	280d      	cmp	r0, #13
{
   d8a8a:	b510      	push	{r4, lr}
   d8a8c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8a8e:	bf9c      	itt	ls
   d8a90:	340e      	addls	r4, #14
   d8a92:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8a94:	4620      	mov	r0, r4
   d8a96:	f7ff ff8f 	bl	d89b8 <pinAvailable>
   d8a9a:	b150      	cbz	r0, d8ab2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8a9c:	2103      	movs	r1, #3
   d8a9e:	4620      	mov	r0, r4
   d8aa0:	f7fe fa86 	bl	d6fb0 <HAL_Validate_Pin_Function>
   d8aa4:	2803      	cmp	r0, #3
   d8aa6:	d104      	bne.n	d8ab2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8aa8:	4620      	mov	r0, r4
}
   d8aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8aae:	f7fe baaf 	b.w	d7010 <hal_adc_read>
}
   d8ab2:	2000      	movs	r0, #0
   d8ab4:	bd10      	pop	{r4, pc}
	...

000d8ab8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8ab8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8aba:	2300      	movs	r3, #0
   d8abc:	2520      	movs	r5, #32
   d8abe:	8043      	strh	r3, [r0, #2]
   d8ac0:	2314      	movs	r3, #20
{
   d8ac2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8ac4:	8003      	strh	r3, [r0, #0]
   d8ac6:	6085      	str	r5, [r0, #8]
   d8ac8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8aca:	4906      	ldr	r1, [pc, #24]	; (d8ae4 <_Z17acquireWireBufferv+0x2c>)
   d8acc:	4628      	mov	r0, r5
   d8ace:	f000 f83c 	bl	d8b4a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8ad2:	4904      	ldr	r1, [pc, #16]	; (d8ae4 <_Z17acquireWireBufferv+0x2c>)
	};
   d8ad4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8ad6:	4628      	mov	r0, r5
   d8ad8:	f000 f837 	bl	d8b4a <_ZnajRKSt9nothrow_t>
	};
   d8adc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8ade:	4620      	mov	r0, r4
   d8ae0:	bd38      	pop	{r3, r4, r5, pc}
   d8ae2:	bf00      	nop
   d8ae4:	000dc434 	.word	0x000dc434

000d8ae8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8ae8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8aea:	4d0f      	ldr	r5, [pc, #60]	; (d8b28 <_Z19__fetch_global_Wirev+0x40>)
   d8aec:	7829      	ldrb	r1, [r5, #0]
   d8aee:	f3bf 8f5b 	dmb	ish
   d8af2:	f011 0401 	ands.w	r4, r1, #1
{
   d8af6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8af8:	d113      	bne.n	d8b22 <_Z19__fetch_global_Wirev+0x3a>
   d8afa:	4628      	mov	r0, r5
   d8afc:	f7fb fadc 	bl	d40b8 <__cxa_guard_acquire>
   d8b00:	b178      	cbz	r0, d8b22 <_Z19__fetch_global_Wirev+0x3a>
   d8b02:	a801      	add	r0, sp, #4
   d8b04:	f7ff ffd8 	bl	d8ab8 <_Z17acquireWireBufferv>
   d8b08:	aa01      	add	r2, sp, #4
   d8b0a:	4621      	mov	r1, r4
   d8b0c:	4807      	ldr	r0, [pc, #28]	; (d8b2c <_Z19__fetch_global_Wirev+0x44>)
   d8b0e:	f7ff f8bb 	bl	d7c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8b12:	4628      	mov	r0, r5
   d8b14:	f7fb fad5 	bl	d40c2 <__cxa_guard_release>
   d8b18:	4a05      	ldr	r2, [pc, #20]	; (d8b30 <_Z19__fetch_global_Wirev+0x48>)
   d8b1a:	4906      	ldr	r1, [pc, #24]	; (d8b34 <_Z19__fetch_global_Wirev+0x4c>)
   d8b1c:	4803      	ldr	r0, [pc, #12]	; (d8b2c <_Z19__fetch_global_Wirev+0x44>)
   d8b1e:	f000 f80b 	bl	d8b38 <__aeabi_atexit>
	return wire;
}
   d8b22:	4802      	ldr	r0, [pc, #8]	; (d8b2c <_Z19__fetch_global_Wirev+0x44>)
   d8b24:	b007      	add	sp, #28
   d8b26:	bd30      	pop	{r4, r5, pc}
   d8b28:	2003e7e0 	.word	0x2003e7e0
   d8b2c:	2003e7e4 	.word	0x2003e7e4
   d8b30:	2003dac8 	.word	0x2003dac8
   d8b34:	000d7c31 	.word	0x000d7c31

000d8b38 <__aeabi_atexit>:
   d8b38:	460b      	mov	r3, r1
   d8b3a:	4601      	mov	r1, r0
   d8b3c:	4618      	mov	r0, r3
   d8b3e:	f000 be55 	b.w	d97ec <__cxa_atexit>

000d8b42 <_ZdlPvj>:
   d8b42:	f7fb baac 	b.w	d409e <_ZdlPv>

000d8b46 <_ZnwjRKSt9nothrow_t>:
   d8b46:	f7fb baa6 	b.w	d4096 <_Znwj>

000d8b4a <_ZnajRKSt9nothrow_t>:
   d8b4a:	f7fb baa6 	b.w	d409a <_Znaj>

000d8b4e <_ZSt25__throw_bad_function_callv>:
   d8b4e:	b508      	push	{r3, lr}
   d8b50:	f7fe fcc4 	bl	d74dc <abort>

000d8b54 <sqrt>:
   d8b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b58:	ed2d 8b02 	vpush	{d8}
   d8b5c:	b08b      	sub	sp, #44	; 0x2c
   d8b5e:	ec55 4b10 	vmov	r4, r5, d0
   d8b62:	f000 f855 	bl	d8c10 <__ieee754_sqrt>
   d8b66:	4b28      	ldr	r3, [pc, #160]	; (d8c08 <sqrt+0xb4>)
   d8b68:	eeb0 8a40 	vmov.f32	s16, s0
   d8b6c:	eef0 8a60 	vmov.f32	s17, s1
   d8b70:	f993 7000 	ldrsb.w	r7, [r3]
   d8b74:	1c7b      	adds	r3, r7, #1
   d8b76:	d012      	beq.n	d8b9e <sqrt+0x4a>
   d8b78:	4622      	mov	r2, r4
   d8b7a:	462b      	mov	r3, r5
   d8b7c:	4620      	mov	r0, r4
   d8b7e:	4629      	mov	r1, r5
   d8b80:	f000 fd62 	bl	d9648 <__aeabi_dcmpun>
   d8b84:	4606      	mov	r6, r0
   d8b86:	b950      	cbnz	r0, d8b9e <sqrt+0x4a>
   d8b88:	f04f 0800 	mov.w	r8, #0
   d8b8c:	f04f 0900 	mov.w	r9, #0
   d8b90:	4620      	mov	r0, r4
   d8b92:	4629      	mov	r1, r5
   d8b94:	4642      	mov	r2, r8
   d8b96:	464b      	mov	r3, r9
   d8b98:	f000 fd2e 	bl	d95f8 <__aeabi_dcmplt>
   d8b9c:	b940      	cbnz	r0, d8bb0 <sqrt+0x5c>
   d8b9e:	eeb0 0a48 	vmov.f32	s0, s16
   d8ba2:	eef0 0a68 	vmov.f32	s1, s17
   d8ba6:	b00b      	add	sp, #44	; 0x2c
   d8ba8:	ecbd 8b02 	vpop	{d8}
   d8bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8bb0:	4b16      	ldr	r3, [pc, #88]	; (d8c0c <sqrt+0xb8>)
   d8bb2:	9608      	str	r6, [sp, #32]
   d8bb4:	2201      	movs	r2, #1
   d8bb6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8bba:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8bbe:	9200      	str	r2, [sp, #0]
   d8bc0:	9301      	str	r3, [sp, #4]
   d8bc2:	b197      	cbz	r7, d8bea <sqrt+0x96>
   d8bc4:	4642      	mov	r2, r8
   d8bc6:	464b      	mov	r3, r9
   d8bc8:	4640      	mov	r0, r8
   d8bca:	4649      	mov	r1, r9
   d8bcc:	f000 fbcc 	bl	d9368 <__aeabi_ddiv>
   d8bd0:	2f02      	cmp	r7, #2
   d8bd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8bd6:	d10a      	bne.n	d8bee <sqrt+0x9a>
   d8bd8:	f7fe fc90 	bl	d74fc <__errno>
   d8bdc:	2321      	movs	r3, #33	; 0x21
   d8bde:	6003      	str	r3, [r0, #0]
   d8be0:	9b08      	ldr	r3, [sp, #32]
   d8be2:	b963      	cbnz	r3, d8bfe <sqrt+0xaa>
   d8be4:	ed9d 8b06 	vldr	d8, [sp, #24]
   d8be8:	e7d9      	b.n	d8b9e <sqrt+0x4a>
   d8bea:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8bee:	4668      	mov	r0, sp
   d8bf0:	f000 f8d2 	bl	d8d98 <matherr>
   d8bf4:	2800      	cmp	r0, #0
   d8bf6:	d0ef      	beq.n	d8bd8 <sqrt+0x84>
   d8bf8:	9b08      	ldr	r3, [sp, #32]
   d8bfa:	2b00      	cmp	r3, #0
   d8bfc:	d0f2      	beq.n	d8be4 <sqrt+0x90>
   d8bfe:	f7fe fc7d 	bl	d74fc <__errno>
   d8c02:	9b08      	ldr	r3, [sp, #32]
   d8c04:	6003      	str	r3, [r0, #0]
   d8c06:	e7ed      	b.n	d8be4 <sqrt+0x90>
   d8c08:	2003d8ec 	.word	0x2003d8ec
   d8c0c:	000dc438 	.word	0x000dc438

000d8c10 <__ieee754_sqrt>:
   d8c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c14:	4a5f      	ldr	r2, [pc, #380]	; (d8d94 <__ieee754_sqrt+0x184>)
   d8c16:	ec57 6b10 	vmov	r6, r7, d0
   d8c1a:	43ba      	bics	r2, r7
   d8c1c:	f000 8098 	beq.w	d8d50 <__ieee754_sqrt+0x140>
   d8c20:	2f00      	cmp	r7, #0
   d8c22:	ee10 4a10 	vmov	r4, s0
   d8c26:	463b      	mov	r3, r7
   d8c28:	dd4e      	ble.n	d8cc8 <__ieee754_sqrt+0xb8>
   d8c2a:	1539      	asrs	r1, r7, #20
   d8c2c:	d05b      	beq.n	d8ce6 <__ieee754_sqrt+0xd6>
   d8c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8c32:	07ca      	lsls	r2, r1, #31
   d8c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c38:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8c3c:	d403      	bmi.n	d8c46 <__ieee754_sqrt+0x36>
   d8c3e:	005b      	lsls	r3, r3, #1
   d8c40:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c44:	0064      	lsls	r4, r4, #1
   d8c46:	0fe2      	lsrs	r2, r4, #31
   d8c48:	f04f 0c00 	mov.w	ip, #0
   d8c4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8c50:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8c54:	0064      	lsls	r4, r4, #1
   d8c56:	4666      	mov	r6, ip
   d8c58:	2516      	movs	r5, #22
   d8c5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8c5e:	18b1      	adds	r1, r6, r2
   d8c60:	4299      	cmp	r1, r3
   d8c62:	dc02      	bgt.n	d8c6a <__ieee754_sqrt+0x5a>
   d8c64:	1a5b      	subs	r3, r3, r1
   d8c66:	188e      	adds	r6, r1, r2
   d8c68:	4494      	add	ip, r2
   d8c6a:	005b      	lsls	r3, r3, #1
   d8c6c:	3d01      	subs	r5, #1
   d8c6e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c72:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c76:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c7a:	d1f0      	bne.n	d8c5e <__ieee754_sqrt+0x4e>
   d8c7c:	462f      	mov	r7, r5
   d8c7e:	2020      	movs	r0, #32
   d8c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8c84:	e009      	b.n	d8c9a <__ieee754_sqrt+0x8a>
   d8c86:	d03e      	beq.n	d8d06 <__ieee754_sqrt+0xf6>
   d8c88:	0fe1      	lsrs	r1, r4, #31
   d8c8a:	3801      	subs	r0, #1
   d8c8c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8c94:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c98:	d03e      	beq.n	d8d18 <__ieee754_sqrt+0x108>
   d8c9a:	42b3      	cmp	r3, r6
   d8c9c:	eb02 0105 	add.w	r1, r2, r5
   d8ca0:	ddf1      	ble.n	d8c86 <__ieee754_sqrt+0x76>
   d8ca2:	2900      	cmp	r1, #0
   d8ca4:	eb01 0502 	add.w	r5, r1, r2
   d8ca8:	db09      	blt.n	d8cbe <__ieee754_sqrt+0xae>
   d8caa:	46b0      	mov	r8, r6
   d8cac:	1b9b      	subs	r3, r3, r6
   d8cae:	42a1      	cmp	r1, r4
   d8cb0:	bf88      	it	hi
   d8cb2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8cb6:	1a64      	subs	r4, r4, r1
   d8cb8:	4417      	add	r7, r2
   d8cba:	4646      	mov	r6, r8
   d8cbc:	e7e4      	b.n	d8c88 <__ieee754_sqrt+0x78>
   d8cbe:	2d00      	cmp	r5, #0
   d8cc0:	dbf3      	blt.n	d8caa <__ieee754_sqrt+0x9a>
   d8cc2:	f106 0801 	add.w	r8, r6, #1
   d8cc6:	e7f1      	b.n	d8cac <__ieee754_sqrt+0x9c>
   d8cc8:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8ccc:	4332      	orrs	r2, r6
   d8cce:	d036      	beq.n	d8d3e <__ieee754_sqrt+0x12e>
   d8cd0:	2f00      	cmp	r7, #0
   d8cd2:	d14d      	bne.n	d8d70 <__ieee754_sqrt+0x160>
   d8cd4:	4639      	mov	r1, r7
   d8cd6:	0ae2      	lsrs	r2, r4, #11
   d8cd8:	3915      	subs	r1, #21
   d8cda:	0564      	lsls	r4, r4, #21
   d8cdc:	4613      	mov	r3, r2
   d8cde:	2a00      	cmp	r2, #0
   d8ce0:	d0f9      	beq.n	d8cd6 <__ieee754_sqrt+0xc6>
   d8ce2:	02d7      	lsls	r7, r2, #11
   d8ce4:	d451      	bmi.n	d8d8a <__ieee754_sqrt+0x17a>
   d8ce6:	2000      	movs	r0, #0
   d8ce8:	005b      	lsls	r3, r3, #1
   d8cea:	02de      	lsls	r6, r3, #11
   d8cec:	4605      	mov	r5, r0
   d8cee:	f100 0001 	add.w	r0, r0, #1
   d8cf2:	d5f9      	bpl.n	d8ce8 <__ieee754_sqrt+0xd8>
   d8cf4:	461a      	mov	r2, r3
   d8cf6:	4623      	mov	r3, r4
   d8cf8:	4084      	lsls	r4, r0
   d8cfa:	f1c0 0020 	rsb	r0, r0, #32
   d8cfe:	40c3      	lsrs	r3, r0
   d8d00:	4313      	orrs	r3, r2
   d8d02:	1b49      	subs	r1, r1, r5
   d8d04:	e793      	b.n	d8c2e <__ieee754_sqrt+0x1e>
   d8d06:	42a1      	cmp	r1, r4
   d8d08:	d8be      	bhi.n	d8c88 <__ieee754_sqrt+0x78>
   d8d0a:	2900      	cmp	r1, #0
   d8d0c:	eb01 0502 	add.w	r5, r1, r2
   d8d10:	dbd5      	blt.n	d8cbe <__ieee754_sqrt+0xae>
   d8d12:	4698      	mov	r8, r3
   d8d14:	2300      	movs	r3, #0
   d8d16:	e7ce      	b.n	d8cb6 <__ieee754_sqrt+0xa6>
   d8d18:	4323      	orrs	r3, r4
   d8d1a:	d112      	bne.n	d8d42 <__ieee754_sqrt+0x132>
   d8d1c:	0878      	lsrs	r0, r7, #1
   d8d1e:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8d22:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8d26:	f01c 0f01 	tst.w	ip, #1
   d8d2a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8d2e:	bf18      	it	ne
   d8d30:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8d34:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8d38:	4602      	mov	r2, r0
   d8d3a:	ec43 2b10 	vmov	d0, r2, r3
   d8d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d42:	1c7b      	adds	r3, r7, #1
   d8d44:	bf16      	itet	ne
   d8d46:	1c78      	addne	r0, r7, #1
   d8d48:	f10c 0c01 	addeq.w	ip, ip, #1
   d8d4c:	0840      	lsrne	r0, r0, #1
   d8d4e:	e7e6      	b.n	d8d1e <__ieee754_sqrt+0x10e>
   d8d50:	ee10 2a10 	vmov	r2, s0
   d8d54:	ee10 0a10 	vmov	r0, s0
   d8d58:	463b      	mov	r3, r7
   d8d5a:	4639      	mov	r1, r7
   d8d5c:	f000 f9da 	bl	d9114 <__aeabi_dmul>
   d8d60:	4632      	mov	r2, r6
   d8d62:	463b      	mov	r3, r7
   d8d64:	f000 f820 	bl	d8da8 <__adddf3>
   d8d68:	ec41 0b10 	vmov	d0, r0, r1
   d8d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d70:	ee10 2a10 	vmov	r2, s0
   d8d74:	4630      	mov	r0, r6
   d8d76:	4639      	mov	r1, r7
   d8d78:	f000 f814 	bl	d8da4 <__aeabi_dsub>
   d8d7c:	4602      	mov	r2, r0
   d8d7e:	460b      	mov	r3, r1
   d8d80:	f000 faf2 	bl	d9368 <__aeabi_ddiv>
   d8d84:	ec41 0b10 	vmov	d0, r0, r1
   d8d88:	e7d9      	b.n	d8d3e <__ieee754_sqrt+0x12e>
   d8d8a:	4623      	mov	r3, r4
   d8d8c:	2020      	movs	r0, #32
   d8d8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8d92:	e7b4      	b.n	d8cfe <__ieee754_sqrt+0xee>
   d8d94:	7ff00000 	.word	0x7ff00000

000d8d98 <matherr>:
   d8d98:	2000      	movs	r0, #0
   d8d9a:	4770      	bx	lr

000d8d9c <__aeabi_drsub>:
   d8d9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8da0:	e002      	b.n	d8da8 <__adddf3>
   d8da2:	bf00      	nop

000d8da4 <__aeabi_dsub>:
   d8da4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8da8 <__adddf3>:
   d8da8:	b530      	push	{r4, r5, lr}
   d8daa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8dae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8db2:	ea94 0f05 	teq	r4, r5
   d8db6:	bf08      	it	eq
   d8db8:	ea90 0f02 	teqeq	r0, r2
   d8dbc:	bf1f      	itttt	ne
   d8dbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8dc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8dc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8dca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8dce:	f000 80e2 	beq.w	d8f96 <__adddf3+0x1ee>
   d8dd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8dd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8dda:	bfb8      	it	lt
   d8ddc:	426d      	neglt	r5, r5
   d8dde:	dd0c      	ble.n	d8dfa <__adddf3+0x52>
   d8de0:	442c      	add	r4, r5
   d8de2:	ea80 0202 	eor.w	r2, r0, r2
   d8de6:	ea81 0303 	eor.w	r3, r1, r3
   d8dea:	ea82 0000 	eor.w	r0, r2, r0
   d8dee:	ea83 0101 	eor.w	r1, r3, r1
   d8df2:	ea80 0202 	eor.w	r2, r0, r2
   d8df6:	ea81 0303 	eor.w	r3, r1, r3
   d8dfa:	2d36      	cmp	r5, #54	; 0x36
   d8dfc:	bf88      	it	hi
   d8dfe:	bd30      	pophi	{r4, r5, pc}
   d8e00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8e0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8e10:	d002      	beq.n	d8e18 <__adddf3+0x70>
   d8e12:	4240      	negs	r0, r0
   d8e14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8e24:	d002      	beq.n	d8e2c <__adddf3+0x84>
   d8e26:	4252      	negs	r2, r2
   d8e28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8e2c:	ea94 0f05 	teq	r4, r5
   d8e30:	f000 80a7 	beq.w	d8f82 <__adddf3+0x1da>
   d8e34:	f1a4 0401 	sub.w	r4, r4, #1
   d8e38:	f1d5 0e20 	rsbs	lr, r5, #32
   d8e3c:	db0d      	blt.n	d8e5a <__adddf3+0xb2>
   d8e3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8e42:	fa22 f205 	lsr.w	r2, r2, r5
   d8e46:	1880      	adds	r0, r0, r2
   d8e48:	f141 0100 	adc.w	r1, r1, #0
   d8e4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8e50:	1880      	adds	r0, r0, r2
   d8e52:	fa43 f305 	asr.w	r3, r3, r5
   d8e56:	4159      	adcs	r1, r3
   d8e58:	e00e      	b.n	d8e78 <__adddf3+0xd0>
   d8e5a:	f1a5 0520 	sub.w	r5, r5, #32
   d8e5e:	f10e 0e20 	add.w	lr, lr, #32
   d8e62:	2a01      	cmp	r2, #1
   d8e64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8e68:	bf28      	it	cs
   d8e6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8e6e:	fa43 f305 	asr.w	r3, r3, r5
   d8e72:	18c0      	adds	r0, r0, r3
   d8e74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e7c:	d507      	bpl.n	d8e8e <__adddf3+0xe6>
   d8e7e:	f04f 0e00 	mov.w	lr, #0
   d8e82:	f1dc 0c00 	rsbs	ip, ip, #0
   d8e86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8e8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d8e8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8e92:	d31b      	bcc.n	d8ecc <__adddf3+0x124>
   d8e94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8e98:	d30c      	bcc.n	d8eb4 <__adddf3+0x10c>
   d8e9a:	0849      	lsrs	r1, r1, #1
   d8e9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8ea0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8ea4:	f104 0401 	add.w	r4, r4, #1
   d8ea8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8eac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8eb0:	f080 809a 	bcs.w	d8fe8 <__adddf3+0x240>
   d8eb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8eb8:	bf08      	it	eq
   d8eba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8ebe:	f150 0000 	adcs.w	r0, r0, #0
   d8ec2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ec6:	ea41 0105 	orr.w	r1, r1, r5
   d8eca:	bd30      	pop	{r4, r5, pc}
   d8ecc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8ed0:	4140      	adcs	r0, r0
   d8ed2:	eb41 0101 	adc.w	r1, r1, r1
   d8ed6:	3c01      	subs	r4, #1
   d8ed8:	bf28      	it	cs
   d8eda:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8ede:	d2e9      	bcs.n	d8eb4 <__adddf3+0x10c>
   d8ee0:	f091 0f00 	teq	r1, #0
   d8ee4:	bf04      	itt	eq
   d8ee6:	4601      	moveq	r1, r0
   d8ee8:	2000      	moveq	r0, #0
   d8eea:	fab1 f381 	clz	r3, r1
   d8eee:	bf08      	it	eq
   d8ef0:	3320      	addeq	r3, #32
   d8ef2:	f1a3 030b 	sub.w	r3, r3, #11
   d8ef6:	f1b3 0220 	subs.w	r2, r3, #32
   d8efa:	da0c      	bge.n	d8f16 <__adddf3+0x16e>
   d8efc:	320c      	adds	r2, #12
   d8efe:	dd08      	ble.n	d8f12 <__adddf3+0x16a>
   d8f00:	f102 0c14 	add.w	ip, r2, #20
   d8f04:	f1c2 020c 	rsb	r2, r2, #12
   d8f08:	fa01 f00c 	lsl.w	r0, r1, ip
   d8f0c:	fa21 f102 	lsr.w	r1, r1, r2
   d8f10:	e00c      	b.n	d8f2c <__adddf3+0x184>
   d8f12:	f102 0214 	add.w	r2, r2, #20
   d8f16:	bfd8      	it	le
   d8f18:	f1c2 0c20 	rsble	ip, r2, #32
   d8f1c:	fa01 f102 	lsl.w	r1, r1, r2
   d8f20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8f24:	bfdc      	itt	le
   d8f26:	ea41 010c 	orrle.w	r1, r1, ip
   d8f2a:	4090      	lslle	r0, r2
   d8f2c:	1ae4      	subs	r4, r4, r3
   d8f2e:	bfa2      	ittt	ge
   d8f30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8f34:	4329      	orrge	r1, r5
   d8f36:	bd30      	popge	{r4, r5, pc}
   d8f38:	ea6f 0404 	mvn.w	r4, r4
   d8f3c:	3c1f      	subs	r4, #31
   d8f3e:	da1c      	bge.n	d8f7a <__adddf3+0x1d2>
   d8f40:	340c      	adds	r4, #12
   d8f42:	dc0e      	bgt.n	d8f62 <__adddf3+0x1ba>
   d8f44:	f104 0414 	add.w	r4, r4, #20
   d8f48:	f1c4 0220 	rsb	r2, r4, #32
   d8f4c:	fa20 f004 	lsr.w	r0, r0, r4
   d8f50:	fa01 f302 	lsl.w	r3, r1, r2
   d8f54:	ea40 0003 	orr.w	r0, r0, r3
   d8f58:	fa21 f304 	lsr.w	r3, r1, r4
   d8f5c:	ea45 0103 	orr.w	r1, r5, r3
   d8f60:	bd30      	pop	{r4, r5, pc}
   d8f62:	f1c4 040c 	rsb	r4, r4, #12
   d8f66:	f1c4 0220 	rsb	r2, r4, #32
   d8f6a:	fa20 f002 	lsr.w	r0, r0, r2
   d8f6e:	fa01 f304 	lsl.w	r3, r1, r4
   d8f72:	ea40 0003 	orr.w	r0, r0, r3
   d8f76:	4629      	mov	r1, r5
   d8f78:	bd30      	pop	{r4, r5, pc}
   d8f7a:	fa21 f004 	lsr.w	r0, r1, r4
   d8f7e:	4629      	mov	r1, r5
   d8f80:	bd30      	pop	{r4, r5, pc}
   d8f82:	f094 0f00 	teq	r4, #0
   d8f86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8f8a:	bf06      	itte	eq
   d8f8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8f90:	3401      	addeq	r4, #1
   d8f92:	3d01      	subne	r5, #1
   d8f94:	e74e      	b.n	d8e34 <__adddf3+0x8c>
   d8f96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8f9a:	bf18      	it	ne
   d8f9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8fa0:	d029      	beq.n	d8ff6 <__adddf3+0x24e>
   d8fa2:	ea94 0f05 	teq	r4, r5
   d8fa6:	bf08      	it	eq
   d8fa8:	ea90 0f02 	teqeq	r0, r2
   d8fac:	d005      	beq.n	d8fba <__adddf3+0x212>
   d8fae:	ea54 0c00 	orrs.w	ip, r4, r0
   d8fb2:	bf04      	itt	eq
   d8fb4:	4619      	moveq	r1, r3
   d8fb6:	4610      	moveq	r0, r2
   d8fb8:	bd30      	pop	{r4, r5, pc}
   d8fba:	ea91 0f03 	teq	r1, r3
   d8fbe:	bf1e      	ittt	ne
   d8fc0:	2100      	movne	r1, #0
   d8fc2:	2000      	movne	r0, #0
   d8fc4:	bd30      	popne	{r4, r5, pc}
   d8fc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8fca:	d105      	bne.n	d8fd8 <__adddf3+0x230>
   d8fcc:	0040      	lsls	r0, r0, #1
   d8fce:	4149      	adcs	r1, r1
   d8fd0:	bf28      	it	cs
   d8fd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8fd6:	bd30      	pop	{r4, r5, pc}
   d8fd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8fdc:	bf3c      	itt	cc
   d8fde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8fe2:	bd30      	popcc	{r4, r5, pc}
   d8fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8fe8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ff0:	f04f 0000 	mov.w	r0, #0
   d8ff4:	bd30      	pop	{r4, r5, pc}
   d8ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ffa:	bf1a      	itte	ne
   d8ffc:	4619      	movne	r1, r3
   d8ffe:	4610      	movne	r0, r2
   d9000:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9004:	bf1c      	itt	ne
   d9006:	460b      	movne	r3, r1
   d9008:	4602      	movne	r2, r0
   d900a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d900e:	bf06      	itte	eq
   d9010:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9014:	ea91 0f03 	teqeq	r1, r3
   d9018:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d901c:	bd30      	pop	{r4, r5, pc}
   d901e:	bf00      	nop

000d9020 <__aeabi_ui2d>:
   d9020:	f090 0f00 	teq	r0, #0
   d9024:	bf04      	itt	eq
   d9026:	2100      	moveq	r1, #0
   d9028:	4770      	bxeq	lr
   d902a:	b530      	push	{r4, r5, lr}
   d902c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9030:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9034:	f04f 0500 	mov.w	r5, #0
   d9038:	f04f 0100 	mov.w	r1, #0
   d903c:	e750      	b.n	d8ee0 <__adddf3+0x138>
   d903e:	bf00      	nop

000d9040 <__aeabi_i2d>:
   d9040:	f090 0f00 	teq	r0, #0
   d9044:	bf04      	itt	eq
   d9046:	2100      	moveq	r1, #0
   d9048:	4770      	bxeq	lr
   d904a:	b530      	push	{r4, r5, lr}
   d904c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9050:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9054:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9058:	bf48      	it	mi
   d905a:	4240      	negmi	r0, r0
   d905c:	f04f 0100 	mov.w	r1, #0
   d9060:	e73e      	b.n	d8ee0 <__adddf3+0x138>
   d9062:	bf00      	nop

000d9064 <__aeabi_f2d>:
   d9064:	0042      	lsls	r2, r0, #1
   d9066:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d906a:	ea4f 0131 	mov.w	r1, r1, rrx
   d906e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9072:	bf1f      	itttt	ne
   d9074:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d907c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9080:	4770      	bxne	lr
   d9082:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9086:	bf08      	it	eq
   d9088:	4770      	bxeq	lr
   d908a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d908e:	bf04      	itt	eq
   d9090:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9094:	4770      	bxeq	lr
   d9096:	b530      	push	{r4, r5, lr}
   d9098:	f44f 7460 	mov.w	r4, #896	; 0x380
   d909c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d90a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d90a4:	e71c      	b.n	d8ee0 <__adddf3+0x138>
   d90a6:	bf00      	nop

000d90a8 <__aeabi_ul2d>:
   d90a8:	ea50 0201 	orrs.w	r2, r0, r1
   d90ac:	bf08      	it	eq
   d90ae:	4770      	bxeq	lr
   d90b0:	b530      	push	{r4, r5, lr}
   d90b2:	f04f 0500 	mov.w	r5, #0
   d90b6:	e00a      	b.n	d90ce <__aeabi_l2d+0x16>

000d90b8 <__aeabi_l2d>:
   d90b8:	ea50 0201 	orrs.w	r2, r0, r1
   d90bc:	bf08      	it	eq
   d90be:	4770      	bxeq	lr
   d90c0:	b530      	push	{r4, r5, lr}
   d90c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d90c6:	d502      	bpl.n	d90ce <__aeabi_l2d+0x16>
   d90c8:	4240      	negs	r0, r0
   d90ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d90d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d90d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d90da:	f43f aed8 	beq.w	d8e8e <__adddf3+0xe6>
   d90de:	f04f 0203 	mov.w	r2, #3
   d90e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d90e6:	bf18      	it	ne
   d90e8:	3203      	addne	r2, #3
   d90ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d90ee:	bf18      	it	ne
   d90f0:	3203      	addne	r2, #3
   d90f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d90f6:	f1c2 0320 	rsb	r3, r2, #32
   d90fa:	fa00 fc03 	lsl.w	ip, r0, r3
   d90fe:	fa20 f002 	lsr.w	r0, r0, r2
   d9102:	fa01 fe03 	lsl.w	lr, r1, r3
   d9106:	ea40 000e 	orr.w	r0, r0, lr
   d910a:	fa21 f102 	lsr.w	r1, r1, r2
   d910e:	4414      	add	r4, r2
   d9110:	e6bd      	b.n	d8e8e <__adddf3+0xe6>
   d9112:	bf00      	nop

000d9114 <__aeabi_dmul>:
   d9114:	b570      	push	{r4, r5, r6, lr}
   d9116:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d911a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d911e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9122:	bf1d      	ittte	ne
   d9124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9128:	ea94 0f0c 	teqne	r4, ip
   d912c:	ea95 0f0c 	teqne	r5, ip
   d9130:	f000 f8de 	bleq	d92f0 <__aeabi_dmul+0x1dc>
   d9134:	442c      	add	r4, r5
   d9136:	ea81 0603 	eor.w	r6, r1, r3
   d913a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d913e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9142:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9146:	bf18      	it	ne
   d9148:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d914c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9154:	d038      	beq.n	d91c8 <__aeabi_dmul+0xb4>
   d9156:	fba0 ce02 	umull	ip, lr, r0, r2
   d915a:	f04f 0500 	mov.w	r5, #0
   d915e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9162:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9166:	fbe0 e503 	umlal	lr, r5, r0, r3
   d916a:	f04f 0600 	mov.w	r6, #0
   d916e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9172:	f09c 0f00 	teq	ip, #0
   d9176:	bf18      	it	ne
   d9178:	f04e 0e01 	orrne.w	lr, lr, #1
   d917c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9180:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9184:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9188:	d204      	bcs.n	d9194 <__aeabi_dmul+0x80>
   d918a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d918e:	416d      	adcs	r5, r5
   d9190:	eb46 0606 	adc.w	r6, r6, r6
   d9194:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9198:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d919c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d91a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d91a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d91a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d91ac:	bf88      	it	hi
   d91ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d91b2:	d81e      	bhi.n	d91f2 <__aeabi_dmul+0xde>
   d91b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d91b8:	bf08      	it	eq
   d91ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d91be:	f150 0000 	adcs.w	r0, r0, #0
   d91c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d91c6:	bd70      	pop	{r4, r5, r6, pc}
   d91c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d91cc:	ea46 0101 	orr.w	r1, r6, r1
   d91d0:	ea40 0002 	orr.w	r0, r0, r2
   d91d4:	ea81 0103 	eor.w	r1, r1, r3
   d91d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d91dc:	bfc2      	ittt	gt
   d91de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d91e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d91e6:	bd70      	popgt	{r4, r5, r6, pc}
   d91e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d91ec:	f04f 0e00 	mov.w	lr, #0
   d91f0:	3c01      	subs	r4, #1
   d91f2:	f300 80ab 	bgt.w	d934c <__aeabi_dmul+0x238>
   d91f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d91fa:	bfde      	ittt	le
   d91fc:	2000      	movle	r0, #0
   d91fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9202:	bd70      	pople	{r4, r5, r6, pc}
   d9204:	f1c4 0400 	rsb	r4, r4, #0
   d9208:	3c20      	subs	r4, #32
   d920a:	da35      	bge.n	d9278 <__aeabi_dmul+0x164>
   d920c:	340c      	adds	r4, #12
   d920e:	dc1b      	bgt.n	d9248 <__aeabi_dmul+0x134>
   d9210:	f104 0414 	add.w	r4, r4, #20
   d9214:	f1c4 0520 	rsb	r5, r4, #32
   d9218:	fa00 f305 	lsl.w	r3, r0, r5
   d921c:	fa20 f004 	lsr.w	r0, r0, r4
   d9220:	fa01 f205 	lsl.w	r2, r1, r5
   d9224:	ea40 0002 	orr.w	r0, r0, r2
   d9228:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d922c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9230:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9234:	fa21 f604 	lsr.w	r6, r1, r4
   d9238:	eb42 0106 	adc.w	r1, r2, r6
   d923c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9240:	bf08      	it	eq
   d9242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9246:	bd70      	pop	{r4, r5, r6, pc}
   d9248:	f1c4 040c 	rsb	r4, r4, #12
   d924c:	f1c4 0520 	rsb	r5, r4, #32
   d9250:	fa00 f304 	lsl.w	r3, r0, r4
   d9254:	fa20 f005 	lsr.w	r0, r0, r5
   d9258:	fa01 f204 	lsl.w	r2, r1, r4
   d925c:	ea40 0002 	orr.w	r0, r0, r2
   d9260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9264:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9268:	f141 0100 	adc.w	r1, r1, #0
   d926c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9270:	bf08      	it	eq
   d9272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9276:	bd70      	pop	{r4, r5, r6, pc}
   d9278:	f1c4 0520 	rsb	r5, r4, #32
   d927c:	fa00 f205 	lsl.w	r2, r0, r5
   d9280:	ea4e 0e02 	orr.w	lr, lr, r2
   d9284:	fa20 f304 	lsr.w	r3, r0, r4
   d9288:	fa01 f205 	lsl.w	r2, r1, r5
   d928c:	ea43 0302 	orr.w	r3, r3, r2
   d9290:	fa21 f004 	lsr.w	r0, r1, r4
   d9294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9298:	fa21 f204 	lsr.w	r2, r1, r4
   d929c:	ea20 0002 	bic.w	r0, r0, r2
   d92a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d92a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d92a8:	bf08      	it	eq
   d92aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d92ae:	bd70      	pop	{r4, r5, r6, pc}
   d92b0:	f094 0f00 	teq	r4, #0
   d92b4:	d10f      	bne.n	d92d6 <__aeabi_dmul+0x1c2>
   d92b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d92ba:	0040      	lsls	r0, r0, #1
   d92bc:	eb41 0101 	adc.w	r1, r1, r1
   d92c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92c4:	bf08      	it	eq
   d92c6:	3c01      	subeq	r4, #1
   d92c8:	d0f7      	beq.n	d92ba <__aeabi_dmul+0x1a6>
   d92ca:	ea41 0106 	orr.w	r1, r1, r6
   d92ce:	f095 0f00 	teq	r5, #0
   d92d2:	bf18      	it	ne
   d92d4:	4770      	bxne	lr
   d92d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d92da:	0052      	lsls	r2, r2, #1
   d92dc:	eb43 0303 	adc.w	r3, r3, r3
   d92e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d92e4:	bf08      	it	eq
   d92e6:	3d01      	subeq	r5, #1
   d92e8:	d0f7      	beq.n	d92da <__aeabi_dmul+0x1c6>
   d92ea:	ea43 0306 	orr.w	r3, r3, r6
   d92ee:	4770      	bx	lr
   d92f0:	ea94 0f0c 	teq	r4, ip
   d92f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d92f8:	bf18      	it	ne
   d92fa:	ea95 0f0c 	teqne	r5, ip
   d92fe:	d00c      	beq.n	d931a <__aeabi_dmul+0x206>
   d9300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9304:	bf18      	it	ne
   d9306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d930a:	d1d1      	bne.n	d92b0 <__aeabi_dmul+0x19c>
   d930c:	ea81 0103 	eor.w	r1, r1, r3
   d9310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9314:	f04f 0000 	mov.w	r0, #0
   d9318:	bd70      	pop	{r4, r5, r6, pc}
   d931a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d931e:	bf06      	itte	eq
   d9320:	4610      	moveq	r0, r2
   d9322:	4619      	moveq	r1, r3
   d9324:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9328:	d019      	beq.n	d935e <__aeabi_dmul+0x24a>
   d932a:	ea94 0f0c 	teq	r4, ip
   d932e:	d102      	bne.n	d9336 <__aeabi_dmul+0x222>
   d9330:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9334:	d113      	bne.n	d935e <__aeabi_dmul+0x24a>
   d9336:	ea95 0f0c 	teq	r5, ip
   d933a:	d105      	bne.n	d9348 <__aeabi_dmul+0x234>
   d933c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9340:	bf1c      	itt	ne
   d9342:	4610      	movne	r0, r2
   d9344:	4619      	movne	r1, r3
   d9346:	d10a      	bne.n	d935e <__aeabi_dmul+0x24a>
   d9348:	ea81 0103 	eor.w	r1, r1, r3
   d934c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9350:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9354:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9358:	f04f 0000 	mov.w	r0, #0
   d935c:	bd70      	pop	{r4, r5, r6, pc}
   d935e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9362:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9366:	bd70      	pop	{r4, r5, r6, pc}

000d9368 <__aeabi_ddiv>:
   d9368:	b570      	push	{r4, r5, r6, lr}
   d936a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d936e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9376:	bf1d      	ittte	ne
   d9378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d937c:	ea94 0f0c 	teqne	r4, ip
   d9380:	ea95 0f0c 	teqne	r5, ip
   d9384:	f000 f8a7 	bleq	d94d6 <__aeabi_ddiv+0x16e>
   d9388:	eba4 0405 	sub.w	r4, r4, r5
   d938c:	ea81 0e03 	eor.w	lr, r1, r3
   d9390:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9394:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9398:	f000 8088 	beq.w	d94ac <__aeabi_ddiv+0x144>
   d939c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d93a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d93a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d93a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d93ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d93b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d93b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d93b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d93bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d93c0:	429d      	cmp	r5, r3
   d93c2:	bf08      	it	eq
   d93c4:	4296      	cmpeq	r6, r2
   d93c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d93ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d93ce:	d202      	bcs.n	d93d6 <__aeabi_ddiv+0x6e>
   d93d0:	085b      	lsrs	r3, r3, #1
   d93d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d93d6:	1ab6      	subs	r6, r6, r2
   d93d8:	eb65 0503 	sbc.w	r5, r5, r3
   d93dc:	085b      	lsrs	r3, r3, #1
   d93de:	ea4f 0232 	mov.w	r2, r2, rrx
   d93e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d93e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d93ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d93ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93f2:	bf22      	ittt	cs
   d93f4:	1ab6      	subcs	r6, r6, r2
   d93f6:	4675      	movcs	r5, lr
   d93f8:	ea40 000c 	orrcs.w	r0, r0, ip
   d93fc:	085b      	lsrs	r3, r3, #1
   d93fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9402:	ebb6 0e02 	subs.w	lr, r6, r2
   d9406:	eb75 0e03 	sbcs.w	lr, r5, r3
   d940a:	bf22      	ittt	cs
   d940c:	1ab6      	subcs	r6, r6, r2
   d940e:	4675      	movcs	r5, lr
   d9410:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9414:	085b      	lsrs	r3, r3, #1
   d9416:	ea4f 0232 	mov.w	r2, r2, rrx
   d941a:	ebb6 0e02 	subs.w	lr, r6, r2
   d941e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9422:	bf22      	ittt	cs
   d9424:	1ab6      	subcs	r6, r6, r2
   d9426:	4675      	movcs	r5, lr
   d9428:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d942c:	085b      	lsrs	r3, r3, #1
   d942e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9432:	ebb6 0e02 	subs.w	lr, r6, r2
   d9436:	eb75 0e03 	sbcs.w	lr, r5, r3
   d943a:	bf22      	ittt	cs
   d943c:	1ab6      	subcs	r6, r6, r2
   d943e:	4675      	movcs	r5, lr
   d9440:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9444:	ea55 0e06 	orrs.w	lr, r5, r6
   d9448:	d018      	beq.n	d947c <__aeabi_ddiv+0x114>
   d944a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d944e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9452:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9456:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d945a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d945e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9462:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9466:	d1c0      	bne.n	d93ea <__aeabi_ddiv+0x82>
   d9468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d946c:	d10b      	bne.n	d9486 <__aeabi_ddiv+0x11e>
   d946e:	ea41 0100 	orr.w	r1, r1, r0
   d9472:	f04f 0000 	mov.w	r0, #0
   d9476:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d947a:	e7b6      	b.n	d93ea <__aeabi_ddiv+0x82>
   d947c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9480:	bf04      	itt	eq
   d9482:	4301      	orreq	r1, r0
   d9484:	2000      	moveq	r0, #0
   d9486:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d948a:	bf88      	it	hi
   d948c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9490:	f63f aeaf 	bhi.w	d91f2 <__aeabi_dmul+0xde>
   d9494:	ebb5 0c03 	subs.w	ip, r5, r3
   d9498:	bf04      	itt	eq
   d949a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d949e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d94a2:	f150 0000 	adcs.w	r0, r0, #0
   d94a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d94aa:	bd70      	pop	{r4, r5, r6, pc}
   d94ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d94b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d94b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d94b8:	bfc2      	ittt	gt
   d94ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d94be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d94c2:	bd70      	popgt	{r4, r5, r6, pc}
   d94c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d94c8:	f04f 0e00 	mov.w	lr, #0
   d94cc:	3c01      	subs	r4, #1
   d94ce:	e690      	b.n	d91f2 <__aeabi_dmul+0xde>
   d94d0:	ea45 0e06 	orr.w	lr, r5, r6
   d94d4:	e68d      	b.n	d91f2 <__aeabi_dmul+0xde>
   d94d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d94da:	ea94 0f0c 	teq	r4, ip
   d94de:	bf08      	it	eq
   d94e0:	ea95 0f0c 	teqeq	r5, ip
   d94e4:	f43f af3b 	beq.w	d935e <__aeabi_dmul+0x24a>
   d94e8:	ea94 0f0c 	teq	r4, ip
   d94ec:	d10a      	bne.n	d9504 <__aeabi_ddiv+0x19c>
   d94ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d94f2:	f47f af34 	bne.w	d935e <__aeabi_dmul+0x24a>
   d94f6:	ea95 0f0c 	teq	r5, ip
   d94fa:	f47f af25 	bne.w	d9348 <__aeabi_dmul+0x234>
   d94fe:	4610      	mov	r0, r2
   d9500:	4619      	mov	r1, r3
   d9502:	e72c      	b.n	d935e <__aeabi_dmul+0x24a>
   d9504:	ea95 0f0c 	teq	r5, ip
   d9508:	d106      	bne.n	d9518 <__aeabi_ddiv+0x1b0>
   d950a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d950e:	f43f aefd 	beq.w	d930c <__aeabi_dmul+0x1f8>
   d9512:	4610      	mov	r0, r2
   d9514:	4619      	mov	r1, r3
   d9516:	e722      	b.n	d935e <__aeabi_dmul+0x24a>
   d9518:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d951c:	bf18      	it	ne
   d951e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9522:	f47f aec5 	bne.w	d92b0 <__aeabi_dmul+0x19c>
   d9526:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d952a:	f47f af0d 	bne.w	d9348 <__aeabi_dmul+0x234>
   d952e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9532:	f47f aeeb 	bne.w	d930c <__aeabi_dmul+0x1f8>
   d9536:	e712      	b.n	d935e <__aeabi_dmul+0x24a>

000d9538 <__gedf2>:
   d9538:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d953c:	e006      	b.n	d954c <__cmpdf2+0x4>
   d953e:	bf00      	nop

000d9540 <__ledf2>:
   d9540:	f04f 0c01 	mov.w	ip, #1
   d9544:	e002      	b.n	d954c <__cmpdf2+0x4>
   d9546:	bf00      	nop

000d9548 <__cmpdf2>:
   d9548:	f04f 0c01 	mov.w	ip, #1
   d954c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d955c:	bf18      	it	ne
   d955e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9562:	d01b      	beq.n	d959c <__cmpdf2+0x54>
   d9564:	b001      	add	sp, #4
   d9566:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d956a:	bf0c      	ite	eq
   d956c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9570:	ea91 0f03 	teqne	r1, r3
   d9574:	bf02      	ittt	eq
   d9576:	ea90 0f02 	teqeq	r0, r2
   d957a:	2000      	moveq	r0, #0
   d957c:	4770      	bxeq	lr
   d957e:	f110 0f00 	cmn.w	r0, #0
   d9582:	ea91 0f03 	teq	r1, r3
   d9586:	bf58      	it	pl
   d9588:	4299      	cmppl	r1, r3
   d958a:	bf08      	it	eq
   d958c:	4290      	cmpeq	r0, r2
   d958e:	bf2c      	ite	cs
   d9590:	17d8      	asrcs	r0, r3, #31
   d9592:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9596:	f040 0001 	orr.w	r0, r0, #1
   d959a:	4770      	bx	lr
   d959c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d95a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d95a4:	d102      	bne.n	d95ac <__cmpdf2+0x64>
   d95a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d95aa:	d107      	bne.n	d95bc <__cmpdf2+0x74>
   d95ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d95b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d95b4:	d1d6      	bne.n	d9564 <__cmpdf2+0x1c>
   d95b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d95ba:	d0d3      	beq.n	d9564 <__cmpdf2+0x1c>
   d95bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d95c0:	4770      	bx	lr
   d95c2:	bf00      	nop

000d95c4 <__aeabi_cdrcmple>:
   d95c4:	4684      	mov	ip, r0
   d95c6:	4610      	mov	r0, r2
   d95c8:	4662      	mov	r2, ip
   d95ca:	468c      	mov	ip, r1
   d95cc:	4619      	mov	r1, r3
   d95ce:	4663      	mov	r3, ip
   d95d0:	e000      	b.n	d95d4 <__aeabi_cdcmpeq>
   d95d2:	bf00      	nop

000d95d4 <__aeabi_cdcmpeq>:
   d95d4:	b501      	push	{r0, lr}
   d95d6:	f7ff ffb7 	bl	d9548 <__cmpdf2>
   d95da:	2800      	cmp	r0, #0
   d95dc:	bf48      	it	mi
   d95de:	f110 0f00 	cmnmi.w	r0, #0
   d95e2:	bd01      	pop	{r0, pc}

000d95e4 <__aeabi_dcmpeq>:
   d95e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95e8:	f7ff fff4 	bl	d95d4 <__aeabi_cdcmpeq>
   d95ec:	bf0c      	ite	eq
   d95ee:	2001      	moveq	r0, #1
   d95f0:	2000      	movne	r0, #0
   d95f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d95f6:	bf00      	nop

000d95f8 <__aeabi_dcmplt>:
   d95f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95fc:	f7ff ffea 	bl	d95d4 <__aeabi_cdcmpeq>
   d9600:	bf34      	ite	cc
   d9602:	2001      	movcc	r0, #1
   d9604:	2000      	movcs	r0, #0
   d9606:	f85d fb08 	ldr.w	pc, [sp], #8
   d960a:	bf00      	nop

000d960c <__aeabi_dcmple>:
   d960c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9610:	f7ff ffe0 	bl	d95d4 <__aeabi_cdcmpeq>
   d9614:	bf94      	ite	ls
   d9616:	2001      	movls	r0, #1
   d9618:	2000      	movhi	r0, #0
   d961a:	f85d fb08 	ldr.w	pc, [sp], #8
   d961e:	bf00      	nop

000d9620 <__aeabi_dcmpge>:
   d9620:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9624:	f7ff ffce 	bl	d95c4 <__aeabi_cdrcmple>
   d9628:	bf94      	ite	ls
   d962a:	2001      	movls	r0, #1
   d962c:	2000      	movhi	r0, #0
   d962e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9632:	bf00      	nop

000d9634 <__aeabi_dcmpgt>:
   d9634:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9638:	f7ff ffc4 	bl	d95c4 <__aeabi_cdrcmple>
   d963c:	bf34      	ite	cc
   d963e:	2001      	movcc	r0, #1
   d9640:	2000      	movcs	r0, #0
   d9642:	f85d fb08 	ldr.w	pc, [sp], #8
   d9646:	bf00      	nop

000d9648 <__aeabi_dcmpun>:
   d9648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d964c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9650:	d102      	bne.n	d9658 <__aeabi_dcmpun+0x10>
   d9652:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9656:	d10a      	bne.n	d966e <__aeabi_dcmpun+0x26>
   d9658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d965c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9660:	d102      	bne.n	d9668 <__aeabi_dcmpun+0x20>
   d9662:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9666:	d102      	bne.n	d966e <__aeabi_dcmpun+0x26>
   d9668:	f04f 0000 	mov.w	r0, #0
   d966c:	4770      	bx	lr
   d966e:	f04f 0001 	mov.w	r0, #1
   d9672:	4770      	bx	lr

000d9674 <__aeabi_d2uiz>:
   d9674:	004a      	lsls	r2, r1, #1
   d9676:	d211      	bcs.n	d969c <__aeabi_d2uiz+0x28>
   d9678:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d967c:	d211      	bcs.n	d96a2 <__aeabi_d2uiz+0x2e>
   d967e:	d50d      	bpl.n	d969c <__aeabi_d2uiz+0x28>
   d9680:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9684:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9688:	d40e      	bmi.n	d96a8 <__aeabi_d2uiz+0x34>
   d968a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d968e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9692:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9696:	fa23 f002 	lsr.w	r0, r3, r2
   d969a:	4770      	bx	lr
   d969c:	f04f 0000 	mov.w	r0, #0
   d96a0:	4770      	bx	lr
   d96a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d96a6:	d102      	bne.n	d96ae <__aeabi_d2uiz+0x3a>
   d96a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d96ac:	4770      	bx	lr
   d96ae:	f04f 0000 	mov.w	r0, #0
   d96b2:	4770      	bx	lr

000d96b4 <__aeabi_d2f>:
   d96b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d96b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d96bc:	bf24      	itt	cs
   d96be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d96c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d96c6:	d90d      	bls.n	d96e4 <__aeabi_d2f+0x30>
   d96c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d96cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d96d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d96d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d96d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d96dc:	bf08      	it	eq
   d96de:	f020 0001 	biceq.w	r0, r0, #1
   d96e2:	4770      	bx	lr
   d96e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d96e8:	d121      	bne.n	d972e <__aeabi_d2f+0x7a>
   d96ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d96ee:	bfbc      	itt	lt
   d96f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d96f4:	4770      	bxlt	lr
   d96f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d96fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d96fe:	f1c2 0218 	rsb	r2, r2, #24
   d9702:	f1c2 0c20 	rsb	ip, r2, #32
   d9706:	fa10 f30c 	lsls.w	r3, r0, ip
   d970a:	fa20 f002 	lsr.w	r0, r0, r2
   d970e:	bf18      	it	ne
   d9710:	f040 0001 	orrne.w	r0, r0, #1
   d9714:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9718:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d971c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9720:	ea40 000c 	orr.w	r0, r0, ip
   d9724:	fa23 f302 	lsr.w	r3, r3, r2
   d9728:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d972c:	e7cc      	b.n	d96c8 <__aeabi_d2f+0x14>
   d972e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9732:	d107      	bne.n	d9744 <__aeabi_d2f+0x90>
   d9734:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9738:	bf1e      	ittt	ne
   d973a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d973e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9742:	4770      	bxne	lr
   d9744:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9748:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d974c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9750:	4770      	bx	lr
   d9752:	bf00      	nop

000d9754 <__aeabi_d2ulz>:
   d9754:	b5d0      	push	{r4, r6, r7, lr}
   d9756:	4b0c      	ldr	r3, [pc, #48]	; (d9788 <__aeabi_d2ulz+0x34>)
   d9758:	2200      	movs	r2, #0
   d975a:	4606      	mov	r6, r0
   d975c:	460f      	mov	r7, r1
   d975e:	f7ff fcd9 	bl	d9114 <__aeabi_dmul>
   d9762:	f7ff ff87 	bl	d9674 <__aeabi_d2uiz>
   d9766:	4604      	mov	r4, r0
   d9768:	f7ff fc5a 	bl	d9020 <__aeabi_ui2d>
   d976c:	4b07      	ldr	r3, [pc, #28]	; (d978c <__aeabi_d2ulz+0x38>)
   d976e:	2200      	movs	r2, #0
   d9770:	f7ff fcd0 	bl	d9114 <__aeabi_dmul>
   d9774:	4602      	mov	r2, r0
   d9776:	460b      	mov	r3, r1
   d9778:	4630      	mov	r0, r6
   d977a:	4639      	mov	r1, r7
   d977c:	f7ff fb12 	bl	d8da4 <__aeabi_dsub>
   d9780:	f7ff ff78 	bl	d9674 <__aeabi_d2uiz>
   d9784:	4621      	mov	r1, r4
   d9786:	bdd0      	pop	{r4, r6, r7, pc}
   d9788:	3df00000 	.word	0x3df00000
   d978c:	41f00000 	.word	0x41f00000

000d9790 <asctime_r>:
   d9790:	b510      	push	{r4, lr}
   d9792:	460c      	mov	r4, r1
   d9794:	6941      	ldr	r1, [r0, #20]
   d9796:	6903      	ldr	r3, [r0, #16]
   d9798:	6982      	ldr	r2, [r0, #24]
   d979a:	b086      	sub	sp, #24
   d979c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d97a0:	9104      	str	r1, [sp, #16]
   d97a2:	6801      	ldr	r1, [r0, #0]
   d97a4:	9103      	str	r1, [sp, #12]
   d97a6:	6841      	ldr	r1, [r0, #4]
   d97a8:	9102      	str	r1, [sp, #8]
   d97aa:	6881      	ldr	r1, [r0, #8]
   d97ac:	9101      	str	r1, [sp, #4]
   d97ae:	68c1      	ldr	r1, [r0, #12]
   d97b0:	9100      	str	r1, [sp, #0]
   d97b2:	4907      	ldr	r1, [pc, #28]	; (d97d0 <asctime_r+0x40>)
   d97b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d97b8:	440b      	add	r3, r1
   d97ba:	4906      	ldr	r1, [pc, #24]	; (d97d4 <asctime_r+0x44>)
   d97bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d97c0:	440a      	add	r2, r1
   d97c2:	4620      	mov	r0, r4
   d97c4:	4904      	ldr	r1, [pc, #16]	; (d97d8 <asctime_r+0x48>)
   d97c6:	f7fd fe79 	bl	d74bc <siprintf>
   d97ca:	4620      	mov	r0, r4
   d97cc:	b006      	add	sp, #24
   d97ce:	bd10      	pop	{r4, pc}
   d97d0:	000dc472 	.word	0x000dc472
   d97d4:	000dc45d 	.word	0x000dc45d
   d97d8:	000dc43d 	.word	0x000dc43d

000d97dc <atof>:
   d97dc:	2100      	movs	r1, #0
   d97de:	f000 befd 	b.w	da5dc <strtod>

000d97e2 <atoi>:
   d97e2:	220a      	movs	r2, #10
   d97e4:	2100      	movs	r1, #0
   d97e6:	f000 bf7f 	b.w	da6e8 <strtol>
	...

000d97ec <__cxa_atexit>:
   d97ec:	b510      	push	{r4, lr}
   d97ee:	4c05      	ldr	r4, [pc, #20]	; (d9804 <__cxa_atexit+0x18>)
   d97f0:	4613      	mov	r3, r2
   d97f2:	b12c      	cbz	r4, d9800 <__cxa_atexit+0x14>
   d97f4:	460a      	mov	r2, r1
   d97f6:	4601      	mov	r1, r0
   d97f8:	2002      	movs	r0, #2
   d97fa:	f3af 8000 	nop.w
   d97fe:	bd10      	pop	{r4, pc}
   d9800:	4620      	mov	r0, r4
   d9802:	e7fc      	b.n	d97fe <__cxa_atexit+0x12>
   d9804:	00000000 	.word	0x00000000

000d9808 <gmtime>:
   d9808:	b538      	push	{r3, r4, r5, lr}
   d980a:	4b07      	ldr	r3, [pc, #28]	; (d9828 <gmtime+0x20>)
   d980c:	681d      	ldr	r5, [r3, #0]
   d980e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d9810:	4604      	mov	r4, r0
   d9812:	b91b      	cbnz	r3, d981c <gmtime+0x14>
   d9814:	2024      	movs	r0, #36	; 0x24
   d9816:	f7fd fe39 	bl	d748c <malloc>
   d981a:	63e8      	str	r0, [r5, #60]	; 0x3c
   d981c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d981e:	4620      	mov	r0, r4
   d9820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9824:	f7fd be8a 	b.w	d753c <gmtime_r>
   d9828:	2003d8f0 	.word	0x2003d8f0

000d982c <memcpy>:
   d982c:	440a      	add	r2, r1
   d982e:	4291      	cmp	r1, r2
   d9830:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9834:	d100      	bne.n	d9838 <memcpy+0xc>
   d9836:	4770      	bx	lr
   d9838:	b510      	push	{r4, lr}
   d983a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d983e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9842:	4291      	cmp	r1, r2
   d9844:	d1f9      	bne.n	d983a <memcpy+0xe>
   d9846:	bd10      	pop	{r4, pc}

000d9848 <memmove>:
   d9848:	4288      	cmp	r0, r1
   d984a:	b510      	push	{r4, lr}
   d984c:	eb01 0402 	add.w	r4, r1, r2
   d9850:	d902      	bls.n	d9858 <memmove+0x10>
   d9852:	4284      	cmp	r4, r0
   d9854:	4623      	mov	r3, r4
   d9856:	d807      	bhi.n	d9868 <memmove+0x20>
   d9858:	1e43      	subs	r3, r0, #1
   d985a:	42a1      	cmp	r1, r4
   d985c:	d008      	beq.n	d9870 <memmove+0x28>
   d985e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9862:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9866:	e7f8      	b.n	d985a <memmove+0x12>
   d9868:	4402      	add	r2, r0
   d986a:	4601      	mov	r1, r0
   d986c:	428a      	cmp	r2, r1
   d986e:	d100      	bne.n	d9872 <memmove+0x2a>
   d9870:	bd10      	pop	{r4, pc}
   d9872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9876:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d987a:	e7f7      	b.n	d986c <memmove+0x24>

000d987c <memset>:
   d987c:	4402      	add	r2, r0
   d987e:	4603      	mov	r3, r0
   d9880:	4293      	cmp	r3, r2
   d9882:	d100      	bne.n	d9886 <memset+0xa>
   d9884:	4770      	bx	lr
   d9886:	f803 1b01 	strb.w	r1, [r3], #1
   d988a:	e7f9      	b.n	d9880 <memset+0x4>

000d988c <srand>:
   d988c:	b538      	push	{r3, r4, r5, lr}
   d988e:	4b0d      	ldr	r3, [pc, #52]	; (d98c4 <srand+0x38>)
   d9890:	681d      	ldr	r5, [r3, #0]
   d9892:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9894:	4604      	mov	r4, r0
   d9896:	b97b      	cbnz	r3, d98b8 <srand+0x2c>
   d9898:	2018      	movs	r0, #24
   d989a:	f7fd fdf7 	bl	d748c <malloc>
   d989e:	4a0a      	ldr	r2, [pc, #40]	; (d98c8 <srand+0x3c>)
   d98a0:	4b0a      	ldr	r3, [pc, #40]	; (d98cc <srand+0x40>)
   d98a2:	63a8      	str	r0, [r5, #56]	; 0x38
   d98a4:	e9c0 2300 	strd	r2, r3, [r0]
   d98a8:	4b09      	ldr	r3, [pc, #36]	; (d98d0 <srand+0x44>)
   d98aa:	6083      	str	r3, [r0, #8]
   d98ac:	230b      	movs	r3, #11
   d98ae:	8183      	strh	r3, [r0, #12]
   d98b0:	2201      	movs	r2, #1
   d98b2:	2300      	movs	r3, #0
   d98b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d98b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d98ba:	2200      	movs	r2, #0
   d98bc:	611c      	str	r4, [r3, #16]
   d98be:	615a      	str	r2, [r3, #20]
   d98c0:	bd38      	pop	{r3, r4, r5, pc}
   d98c2:	bf00      	nop
   d98c4:	2003d8f0 	.word	0x2003d8f0
   d98c8:	abcd330e 	.word	0xabcd330e
   d98cc:	e66d1234 	.word	0xe66d1234
   d98d0:	0005deec 	.word	0x0005deec

000d98d4 <strcmp>:
   d98d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d98d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d98dc:	2a01      	cmp	r2, #1
   d98de:	bf28      	it	cs
   d98e0:	429a      	cmpcs	r2, r3
   d98e2:	d0f7      	beq.n	d98d4 <strcmp>
   d98e4:	1ad0      	subs	r0, r2, r3
   d98e6:	4770      	bx	lr

000d98e8 <strcpy>:
   d98e8:	4603      	mov	r3, r0
   d98ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   d98ee:	f803 2b01 	strb.w	r2, [r3], #1
   d98f2:	2a00      	cmp	r2, #0
   d98f4:	d1f9      	bne.n	d98ea <strcpy+0x2>
   d98f6:	4770      	bx	lr

000d98f8 <strdup>:
   d98f8:	4b02      	ldr	r3, [pc, #8]	; (d9904 <strdup+0xc>)
   d98fa:	4601      	mov	r1, r0
   d98fc:	6818      	ldr	r0, [r3, #0]
   d98fe:	f000 b803 	b.w	d9908 <_strdup_r>
   d9902:	bf00      	nop
   d9904:	2003d8f0 	.word	0x2003d8f0

000d9908 <_strdup_r>:
   d9908:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d990a:	4604      	mov	r4, r0
   d990c:	4608      	mov	r0, r1
   d990e:	460d      	mov	r5, r1
   d9910:	f000 f80f 	bl	d9932 <strlen>
   d9914:	1c42      	adds	r2, r0, #1
   d9916:	4611      	mov	r1, r2
   d9918:	4620      	mov	r0, r4
   d991a:	9201      	str	r2, [sp, #4]
   d991c:	f7fd fde6 	bl	d74ec <_malloc_r>
   d9920:	4604      	mov	r4, r0
   d9922:	b118      	cbz	r0, d992c <_strdup_r+0x24>
   d9924:	9a01      	ldr	r2, [sp, #4]
   d9926:	4629      	mov	r1, r5
   d9928:	f7ff ff80 	bl	d982c <memcpy>
   d992c:	4620      	mov	r0, r4
   d992e:	b003      	add	sp, #12
   d9930:	bd30      	pop	{r4, r5, pc}

000d9932 <strlen>:
   d9932:	4603      	mov	r3, r0
   d9934:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9938:	2a00      	cmp	r2, #0
   d993a:	d1fb      	bne.n	d9934 <strlen+0x2>
   d993c:	1a18      	subs	r0, r3, r0
   d993e:	3801      	subs	r0, #1
   d9940:	4770      	bx	lr

000d9942 <strncmp>:
   d9942:	b510      	push	{r4, lr}
   d9944:	b16a      	cbz	r2, d9962 <strncmp+0x20>
   d9946:	3901      	subs	r1, #1
   d9948:	1884      	adds	r4, r0, r2
   d994a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d994e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d9952:	4293      	cmp	r3, r2
   d9954:	d103      	bne.n	d995e <strncmp+0x1c>
   d9956:	42a0      	cmp	r0, r4
   d9958:	d001      	beq.n	d995e <strncmp+0x1c>
   d995a:	2b00      	cmp	r3, #0
   d995c:	d1f5      	bne.n	d994a <strncmp+0x8>
   d995e:	1a98      	subs	r0, r3, r2
   d9960:	bd10      	pop	{r4, pc}
   d9962:	4610      	mov	r0, r2
   d9964:	e7fc      	b.n	d9960 <strncmp+0x1e>

000d9966 <strncpy>:
   d9966:	b510      	push	{r4, lr}
   d9968:	3901      	subs	r1, #1
   d996a:	4603      	mov	r3, r0
   d996c:	b132      	cbz	r2, d997c <strncpy+0x16>
   d996e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9972:	f803 4b01 	strb.w	r4, [r3], #1
   d9976:	3a01      	subs	r2, #1
   d9978:	2c00      	cmp	r4, #0
   d997a:	d1f7      	bne.n	d996c <strncpy+0x6>
   d997c:	441a      	add	r2, r3
   d997e:	2100      	movs	r1, #0
   d9980:	4293      	cmp	r3, r2
   d9982:	d100      	bne.n	d9986 <strncpy+0x20>
   d9984:	bd10      	pop	{r4, pc}
   d9986:	f803 1b01 	strb.w	r1, [r3], #1
   d998a:	e7f9      	b.n	d9980 <strncpy+0x1a>

000d998c <sulp>:
   d998c:	b570      	push	{r4, r5, r6, lr}
   d998e:	4604      	mov	r4, r0
   d9990:	460d      	mov	r5, r1
   d9992:	ec45 4b10 	vmov	d0, r4, r5
   d9996:	4616      	mov	r6, r2
   d9998:	f001 fd1c 	bl	db3d4 <__ulp>
   d999c:	ec51 0b10 	vmov	r0, r1, d0
   d99a0:	b17e      	cbz	r6, d99c2 <sulp+0x36>
   d99a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d99a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d99aa:	2b00      	cmp	r3, #0
   d99ac:	dd09      	ble.n	d99c2 <sulp+0x36>
   d99ae:	051b      	lsls	r3, r3, #20
   d99b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d99b4:	2400      	movs	r4, #0
   d99b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d99ba:	4622      	mov	r2, r4
   d99bc:	462b      	mov	r3, r5
   d99be:	f7ff fba9 	bl	d9114 <__aeabi_dmul>
   d99c2:	bd70      	pop	{r4, r5, r6, pc}
   d99c4:	0000      	movs	r0, r0
	...

000d99c8 <_strtod_l>:
   d99c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99cc:	b0a3      	sub	sp, #140	; 0x8c
   d99ce:	461f      	mov	r7, r3
   d99d0:	2300      	movs	r3, #0
   d99d2:	931e      	str	r3, [sp, #120]	; 0x78
   d99d4:	4ba4      	ldr	r3, [pc, #656]	; (d9c68 <_strtod_l+0x2a0>)
   d99d6:	9219      	str	r2, [sp, #100]	; 0x64
   d99d8:	681b      	ldr	r3, [r3, #0]
   d99da:	9307      	str	r3, [sp, #28]
   d99dc:	4604      	mov	r4, r0
   d99de:	4618      	mov	r0, r3
   d99e0:	4688      	mov	r8, r1
   d99e2:	f7ff ffa6 	bl	d9932 <strlen>
   d99e6:	f04f 0a00 	mov.w	sl, #0
   d99ea:	4605      	mov	r5, r0
   d99ec:	f04f 0b00 	mov.w	fp, #0
   d99f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d99f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99f6:	781a      	ldrb	r2, [r3, #0]
   d99f8:	2a2b      	cmp	r2, #43	; 0x2b
   d99fa:	d04c      	beq.n	d9a96 <_strtod_l+0xce>
   d99fc:	d839      	bhi.n	d9a72 <_strtod_l+0xaa>
   d99fe:	2a0d      	cmp	r2, #13
   d9a00:	d832      	bhi.n	d9a68 <_strtod_l+0xa0>
   d9a02:	2a08      	cmp	r2, #8
   d9a04:	d832      	bhi.n	d9a6c <_strtod_l+0xa4>
   d9a06:	2a00      	cmp	r2, #0
   d9a08:	d03c      	beq.n	d9a84 <_strtod_l+0xbc>
   d9a0a:	2300      	movs	r3, #0
   d9a0c:	930e      	str	r3, [sp, #56]	; 0x38
   d9a0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9a10:	7833      	ldrb	r3, [r6, #0]
   d9a12:	2b30      	cmp	r3, #48	; 0x30
   d9a14:	f040 80b4 	bne.w	d9b80 <_strtod_l+0x1b8>
   d9a18:	7873      	ldrb	r3, [r6, #1]
   d9a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9a1e:	2b58      	cmp	r3, #88	; 0x58
   d9a20:	d16c      	bne.n	d9afc <_strtod_l+0x134>
   d9a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9a24:	9301      	str	r3, [sp, #4]
   d9a26:	ab1e      	add	r3, sp, #120	; 0x78
   d9a28:	9702      	str	r7, [sp, #8]
   d9a2a:	9300      	str	r3, [sp, #0]
   d9a2c:	4a8f      	ldr	r2, [pc, #572]	; (d9c6c <_strtod_l+0x2a4>)
   d9a2e:	ab1f      	add	r3, sp, #124	; 0x7c
   d9a30:	a91d      	add	r1, sp, #116	; 0x74
   d9a32:	4620      	mov	r0, r4
   d9a34:	f000 feca 	bl	da7cc <__gethex>
   d9a38:	f010 0707 	ands.w	r7, r0, #7
   d9a3c:	4605      	mov	r5, r0
   d9a3e:	d005      	beq.n	d9a4c <_strtod_l+0x84>
   d9a40:	2f06      	cmp	r7, #6
   d9a42:	d12a      	bne.n	d9a9a <_strtod_l+0xd2>
   d9a44:	3601      	adds	r6, #1
   d9a46:	2300      	movs	r3, #0
   d9a48:	961d      	str	r6, [sp, #116]	; 0x74
   d9a4a:	930e      	str	r3, [sp, #56]	; 0x38
   d9a4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9a4e:	2b00      	cmp	r3, #0
   d9a50:	f040 8596 	bne.w	da580 <_strtod_l+0xbb8>
   d9a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9a56:	b1db      	cbz	r3, d9a90 <_strtod_l+0xc8>
   d9a58:	4652      	mov	r2, sl
   d9a5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9a5e:	ec43 2b10 	vmov	d0, r2, r3
   d9a62:	b023      	add	sp, #140	; 0x8c
   d9a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a68:	2a20      	cmp	r2, #32
   d9a6a:	d1ce      	bne.n	d9a0a <_strtod_l+0x42>
   d9a6c:	3301      	adds	r3, #1
   d9a6e:	931d      	str	r3, [sp, #116]	; 0x74
   d9a70:	e7c0      	b.n	d99f4 <_strtod_l+0x2c>
   d9a72:	2a2d      	cmp	r2, #45	; 0x2d
   d9a74:	d1c9      	bne.n	d9a0a <_strtod_l+0x42>
   d9a76:	2201      	movs	r2, #1
   d9a78:	920e      	str	r2, [sp, #56]	; 0x38
   d9a7a:	1c5a      	adds	r2, r3, #1
   d9a7c:	921d      	str	r2, [sp, #116]	; 0x74
   d9a7e:	785b      	ldrb	r3, [r3, #1]
   d9a80:	2b00      	cmp	r3, #0
   d9a82:	d1c4      	bne.n	d9a0e <_strtod_l+0x46>
   d9a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9a86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9a8a:	2b00      	cmp	r3, #0
   d9a8c:	f040 8576 	bne.w	da57c <_strtod_l+0xbb4>
   d9a90:	4652      	mov	r2, sl
   d9a92:	465b      	mov	r3, fp
   d9a94:	e7e3      	b.n	d9a5e <_strtod_l+0x96>
   d9a96:	2200      	movs	r2, #0
   d9a98:	e7ee      	b.n	d9a78 <_strtod_l+0xb0>
   d9a9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9a9c:	b13a      	cbz	r2, d9aae <_strtod_l+0xe6>
   d9a9e:	2135      	movs	r1, #53	; 0x35
   d9aa0:	a820      	add	r0, sp, #128	; 0x80
   d9aa2:	f001 fd96 	bl	db5d2 <__copybits>
   d9aa6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9aa8:	4620      	mov	r0, r4
   d9aaa:	f001 f9cb 	bl	dae44 <_Bfree>
   d9aae:	3f01      	subs	r7, #1
   d9ab0:	2f05      	cmp	r7, #5
   d9ab2:	d807      	bhi.n	d9ac4 <_strtod_l+0xfc>
   d9ab4:	e8df f007 	tbb	[pc, r7]
   d9ab8:	1d180b0e 	.word	0x1d180b0e
   d9abc:	030e      	.short	0x030e
   d9abe:	f04f 0b00 	mov.w	fp, #0
   d9ac2:	46da      	mov	sl, fp
   d9ac4:	0728      	lsls	r0, r5, #28
   d9ac6:	d5c1      	bpl.n	d9a4c <_strtod_l+0x84>
   d9ac8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9acc:	e7be      	b.n	d9a4c <_strtod_l+0x84>
   d9ace:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9ad2:	e7f7      	b.n	d9ac4 <_strtod_l+0xfc>
   d9ad4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9ad8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9ade:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9ae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9ae6:	e7ed      	b.n	d9ac4 <_strtod_l+0xfc>
   d9ae8:	f8df b184 	ldr.w	fp, [pc, #388]	; d9c70 <_strtod_l+0x2a8>
   d9aec:	f04f 0a00 	mov.w	sl, #0
   d9af0:	e7e8      	b.n	d9ac4 <_strtod_l+0xfc>
   d9af2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9af6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9afa:	e7e3      	b.n	d9ac4 <_strtod_l+0xfc>
   d9afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9afe:	1c5a      	adds	r2, r3, #1
   d9b00:	921d      	str	r2, [sp, #116]	; 0x74
   d9b02:	785b      	ldrb	r3, [r3, #1]
   d9b04:	2b30      	cmp	r3, #48	; 0x30
   d9b06:	d0f9      	beq.n	d9afc <_strtod_l+0x134>
   d9b08:	2b00      	cmp	r3, #0
   d9b0a:	d09f      	beq.n	d9a4c <_strtod_l+0x84>
   d9b0c:	2301      	movs	r3, #1
   d9b0e:	f04f 0900 	mov.w	r9, #0
   d9b12:	9304      	str	r3, [sp, #16]
   d9b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9b16:	930a      	str	r3, [sp, #40]	; 0x28
   d9b18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d9b1c:	464f      	mov	r7, r9
   d9b1e:	220a      	movs	r2, #10
   d9b20:	981d      	ldr	r0, [sp, #116]	; 0x74
   d9b22:	7806      	ldrb	r6, [r0, #0]
   d9b24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9b28:	b2d9      	uxtb	r1, r3
   d9b2a:	2909      	cmp	r1, #9
   d9b2c:	d92a      	bls.n	d9b84 <_strtod_l+0x1bc>
   d9b2e:	9907      	ldr	r1, [sp, #28]
   d9b30:	462a      	mov	r2, r5
   d9b32:	f7ff ff06 	bl	d9942 <strncmp>
   d9b36:	b398      	cbz	r0, d9ba0 <_strtod_l+0x1d8>
   d9b38:	2000      	movs	r0, #0
   d9b3a:	4633      	mov	r3, r6
   d9b3c:	463d      	mov	r5, r7
   d9b3e:	9007      	str	r0, [sp, #28]
   d9b40:	4602      	mov	r2, r0
   d9b42:	2b65      	cmp	r3, #101	; 0x65
   d9b44:	d001      	beq.n	d9b4a <_strtod_l+0x182>
   d9b46:	2b45      	cmp	r3, #69	; 0x45
   d9b48:	d118      	bne.n	d9b7c <_strtod_l+0x1b4>
   d9b4a:	b91d      	cbnz	r5, d9b54 <_strtod_l+0x18c>
   d9b4c:	9b04      	ldr	r3, [sp, #16]
   d9b4e:	4303      	orrs	r3, r0
   d9b50:	d098      	beq.n	d9a84 <_strtod_l+0xbc>
   d9b52:	2500      	movs	r5, #0
   d9b54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d9b58:	f108 0301 	add.w	r3, r8, #1
   d9b5c:	931d      	str	r3, [sp, #116]	; 0x74
   d9b5e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d9b62:	2b2b      	cmp	r3, #43	; 0x2b
   d9b64:	d075      	beq.n	d9c52 <_strtod_l+0x28a>
   d9b66:	2b2d      	cmp	r3, #45	; 0x2d
   d9b68:	d07b      	beq.n	d9c62 <_strtod_l+0x29a>
   d9b6a:	f04f 0c00 	mov.w	ip, #0
   d9b6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9b72:	2909      	cmp	r1, #9
   d9b74:	f240 8082 	bls.w	d9c7c <_strtod_l+0x2b4>
   d9b78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9b7c:	2600      	movs	r6, #0
   d9b7e:	e09d      	b.n	d9cbc <_strtod_l+0x2f4>
   d9b80:	2300      	movs	r3, #0
   d9b82:	e7c4      	b.n	d9b0e <_strtod_l+0x146>
   d9b84:	2f08      	cmp	r7, #8
   d9b86:	bfd8      	it	le
   d9b88:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9b8a:	f100 0001 	add.w	r0, r0, #1
   d9b8e:	bfda      	itte	le
   d9b90:	fb02 3301 	mlale	r3, r2, r1, r3
   d9b94:	9309      	strle	r3, [sp, #36]	; 0x24
   d9b96:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9b9a:	3701      	adds	r7, #1
   d9b9c:	901d      	str	r0, [sp, #116]	; 0x74
   d9b9e:	e7bf      	b.n	d9b20 <_strtod_l+0x158>
   d9ba0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ba2:	195a      	adds	r2, r3, r5
   d9ba4:	921d      	str	r2, [sp, #116]	; 0x74
   d9ba6:	5d5b      	ldrb	r3, [r3, r5]
   d9ba8:	2f00      	cmp	r7, #0
   d9baa:	d037      	beq.n	d9c1c <_strtod_l+0x254>
   d9bac:	9007      	str	r0, [sp, #28]
   d9bae:	463d      	mov	r5, r7
   d9bb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9bb4:	2a09      	cmp	r2, #9
   d9bb6:	d912      	bls.n	d9bde <_strtod_l+0x216>
   d9bb8:	2201      	movs	r2, #1
   d9bba:	e7c2      	b.n	d9b42 <_strtod_l+0x17a>
   d9bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9bbe:	1c5a      	adds	r2, r3, #1
   d9bc0:	921d      	str	r2, [sp, #116]	; 0x74
   d9bc2:	785b      	ldrb	r3, [r3, #1]
   d9bc4:	3001      	adds	r0, #1
   d9bc6:	2b30      	cmp	r3, #48	; 0x30
   d9bc8:	d0f8      	beq.n	d9bbc <_strtod_l+0x1f4>
   d9bca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9bce:	2a08      	cmp	r2, #8
   d9bd0:	f200 84db 	bhi.w	da58a <_strtod_l+0xbc2>
   d9bd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9bd6:	9007      	str	r0, [sp, #28]
   d9bd8:	2000      	movs	r0, #0
   d9bda:	920a      	str	r2, [sp, #40]	; 0x28
   d9bdc:	4605      	mov	r5, r0
   d9bde:	3b30      	subs	r3, #48	; 0x30
   d9be0:	f100 0201 	add.w	r2, r0, #1
   d9be4:	d014      	beq.n	d9c10 <_strtod_l+0x248>
   d9be6:	9907      	ldr	r1, [sp, #28]
   d9be8:	4411      	add	r1, r2
   d9bea:	9107      	str	r1, [sp, #28]
   d9bec:	462a      	mov	r2, r5
   d9bee:	eb00 0e05 	add.w	lr, r0, r5
   d9bf2:	210a      	movs	r1, #10
   d9bf4:	4572      	cmp	r2, lr
   d9bf6:	d113      	bne.n	d9c20 <_strtod_l+0x258>
   d9bf8:	182a      	adds	r2, r5, r0
   d9bfa:	2a08      	cmp	r2, #8
   d9bfc:	f105 0501 	add.w	r5, r5, #1
   d9c00:	4405      	add	r5, r0
   d9c02:	dc1c      	bgt.n	d9c3e <_strtod_l+0x276>
   d9c04:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9c06:	220a      	movs	r2, #10
   d9c08:	fb02 3301 	mla	r3, r2, r1, r3
   d9c0c:	9309      	str	r3, [sp, #36]	; 0x24
   d9c0e:	2200      	movs	r2, #0
   d9c10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c12:	1c59      	adds	r1, r3, #1
   d9c14:	911d      	str	r1, [sp, #116]	; 0x74
   d9c16:	785b      	ldrb	r3, [r3, #1]
   d9c18:	4610      	mov	r0, r2
   d9c1a:	e7c9      	b.n	d9bb0 <_strtod_l+0x1e8>
   d9c1c:	4638      	mov	r0, r7
   d9c1e:	e7d2      	b.n	d9bc6 <_strtod_l+0x1fe>
   d9c20:	2a08      	cmp	r2, #8
   d9c22:	dc04      	bgt.n	d9c2e <_strtod_l+0x266>
   d9c24:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9c26:	434e      	muls	r6, r1
   d9c28:	9609      	str	r6, [sp, #36]	; 0x24
   d9c2a:	3201      	adds	r2, #1
   d9c2c:	e7e2      	b.n	d9bf4 <_strtod_l+0x22c>
   d9c2e:	f102 0c01 	add.w	ip, r2, #1
   d9c32:	f1bc 0f10 	cmp.w	ip, #16
   d9c36:	bfd8      	it	le
   d9c38:	fb01 f909 	mulle.w	r9, r1, r9
   d9c3c:	e7f5      	b.n	d9c2a <_strtod_l+0x262>
   d9c3e:	2d10      	cmp	r5, #16
   d9c40:	bfdc      	itt	le
   d9c42:	220a      	movle	r2, #10
   d9c44:	fb02 3909 	mlale	r9, r2, r9, r3
   d9c48:	e7e1      	b.n	d9c0e <_strtod_l+0x246>
   d9c4a:	2300      	movs	r3, #0
   d9c4c:	9307      	str	r3, [sp, #28]
   d9c4e:	2201      	movs	r2, #1
   d9c50:	e77c      	b.n	d9b4c <_strtod_l+0x184>
   d9c52:	f04f 0c00 	mov.w	ip, #0
   d9c56:	f108 0302 	add.w	r3, r8, #2
   d9c5a:	931d      	str	r3, [sp, #116]	; 0x74
   d9c5c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9c60:	e785      	b.n	d9b6e <_strtod_l+0x1a6>
   d9c62:	f04f 0c01 	mov.w	ip, #1
   d9c66:	e7f6      	b.n	d9c56 <_strtod_l+0x28e>
   d9c68:	000dc5fc 	.word	0x000dc5fc
   d9c6c:	000dc4a4 	.word	0x000dc4a4
   d9c70:	7ff00000 	.word	0x7ff00000
   d9c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c76:	1c59      	adds	r1, r3, #1
   d9c78:	911d      	str	r1, [sp, #116]	; 0x74
   d9c7a:	785b      	ldrb	r3, [r3, #1]
   d9c7c:	2b30      	cmp	r3, #48	; 0x30
   d9c7e:	d0f9      	beq.n	d9c74 <_strtod_l+0x2ac>
   d9c80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9c84:	2908      	cmp	r1, #8
   d9c86:	f63f af79 	bhi.w	d9b7c <_strtod_l+0x1b4>
   d9c8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9c8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c90:	9308      	str	r3, [sp, #32]
   d9c92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c94:	1c59      	adds	r1, r3, #1
   d9c96:	911d      	str	r1, [sp, #116]	; 0x74
   d9c98:	785b      	ldrb	r3, [r3, #1]
   d9c9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9c9e:	2e09      	cmp	r6, #9
   d9ca0:	d937      	bls.n	d9d12 <_strtod_l+0x34a>
   d9ca2:	9e08      	ldr	r6, [sp, #32]
   d9ca4:	1b89      	subs	r1, r1, r6
   d9ca6:	2908      	cmp	r1, #8
   d9ca8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9cac:	dc02      	bgt.n	d9cb4 <_strtod_l+0x2ec>
   d9cae:	4576      	cmp	r6, lr
   d9cb0:	bfa8      	it	ge
   d9cb2:	4676      	movge	r6, lr
   d9cb4:	f1bc 0f00 	cmp.w	ip, #0
   d9cb8:	d000      	beq.n	d9cbc <_strtod_l+0x2f4>
   d9cba:	4276      	negs	r6, r6
   d9cbc:	2d00      	cmp	r5, #0
   d9cbe:	d14f      	bne.n	d9d60 <_strtod_l+0x398>
   d9cc0:	9904      	ldr	r1, [sp, #16]
   d9cc2:	4301      	orrs	r1, r0
   d9cc4:	f47f aec2 	bne.w	d9a4c <_strtod_l+0x84>
   d9cc8:	2a00      	cmp	r2, #0
   d9cca:	f47f aedb 	bne.w	d9a84 <_strtod_l+0xbc>
   d9cce:	2b69      	cmp	r3, #105	; 0x69
   d9cd0:	d027      	beq.n	d9d22 <_strtod_l+0x35a>
   d9cd2:	dc24      	bgt.n	d9d1e <_strtod_l+0x356>
   d9cd4:	2b49      	cmp	r3, #73	; 0x49
   d9cd6:	d024      	beq.n	d9d22 <_strtod_l+0x35a>
   d9cd8:	2b4e      	cmp	r3, #78	; 0x4e
   d9cda:	f47f aed3 	bne.w	d9a84 <_strtod_l+0xbc>
   d9cde:	499e      	ldr	r1, [pc, #632]	; (d9f58 <_strtod_l+0x590>)
   d9ce0:	a81d      	add	r0, sp, #116	; 0x74
   d9ce2:	f000 ffb9 	bl	dac58 <__match>
   d9ce6:	2800      	cmp	r0, #0
   d9ce8:	f43f aecc 	beq.w	d9a84 <_strtod_l+0xbc>
   d9cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9cee:	781b      	ldrb	r3, [r3, #0]
   d9cf0:	2b28      	cmp	r3, #40	; 0x28
   d9cf2:	d12d      	bne.n	d9d50 <_strtod_l+0x388>
   d9cf4:	4999      	ldr	r1, [pc, #612]	; (d9f5c <_strtod_l+0x594>)
   d9cf6:	aa20      	add	r2, sp, #128	; 0x80
   d9cf8:	a81d      	add	r0, sp, #116	; 0x74
   d9cfa:	f000 ffc1 	bl	dac80 <__hexnan>
   d9cfe:	2805      	cmp	r0, #5
   d9d00:	d126      	bne.n	d9d50 <_strtod_l+0x388>
   d9d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9d04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9d08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9d0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9d10:	e69c      	b.n	d9a4c <_strtod_l+0x84>
   d9d12:	210a      	movs	r1, #10
   d9d14:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9d18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9d1c:	e7b9      	b.n	d9c92 <_strtod_l+0x2ca>
   d9d1e:	2b6e      	cmp	r3, #110	; 0x6e
   d9d20:	e7db      	b.n	d9cda <_strtod_l+0x312>
   d9d22:	498f      	ldr	r1, [pc, #572]	; (d9f60 <_strtod_l+0x598>)
   d9d24:	a81d      	add	r0, sp, #116	; 0x74
   d9d26:	f000 ff97 	bl	dac58 <__match>
   d9d2a:	2800      	cmp	r0, #0
   d9d2c:	f43f aeaa 	beq.w	d9a84 <_strtod_l+0xbc>
   d9d30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9d32:	498c      	ldr	r1, [pc, #560]	; (d9f64 <_strtod_l+0x59c>)
   d9d34:	3b01      	subs	r3, #1
   d9d36:	a81d      	add	r0, sp, #116	; 0x74
   d9d38:	931d      	str	r3, [sp, #116]	; 0x74
   d9d3a:	f000 ff8d 	bl	dac58 <__match>
   d9d3e:	b910      	cbnz	r0, d9d46 <_strtod_l+0x37e>
   d9d40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9d42:	3301      	adds	r3, #1
   d9d44:	931d      	str	r3, [sp, #116]	; 0x74
   d9d46:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9f74 <_strtod_l+0x5ac>
   d9d4a:	f04f 0a00 	mov.w	sl, #0
   d9d4e:	e67d      	b.n	d9a4c <_strtod_l+0x84>
   d9d50:	4885      	ldr	r0, [pc, #532]	; (d9f68 <_strtod_l+0x5a0>)
   d9d52:	f001 fc91 	bl	db678 <nan>
   d9d56:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9d5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9d5e:	e675      	b.n	d9a4c <_strtod_l+0x84>
   d9d60:	9b07      	ldr	r3, [sp, #28]
   d9d62:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9d64:	1af3      	subs	r3, r6, r3
   d9d66:	2f00      	cmp	r7, #0
   d9d68:	bf08      	it	eq
   d9d6a:	462f      	moveq	r7, r5
   d9d6c:	2d10      	cmp	r5, #16
   d9d6e:	9308      	str	r3, [sp, #32]
   d9d70:	46a8      	mov	r8, r5
   d9d72:	bfa8      	it	ge
   d9d74:	f04f 0810 	movge.w	r8, #16
   d9d78:	f7ff f952 	bl	d9020 <__aeabi_ui2d>
   d9d7c:	2d09      	cmp	r5, #9
   d9d7e:	4682      	mov	sl, r0
   d9d80:	468b      	mov	fp, r1
   d9d82:	dd13      	ble.n	d9dac <_strtod_l+0x3e4>
   d9d84:	4b79      	ldr	r3, [pc, #484]	; (d9f6c <_strtod_l+0x5a4>)
   d9d86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9d8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9d8e:	f7ff f9c1 	bl	d9114 <__aeabi_dmul>
   d9d92:	4682      	mov	sl, r0
   d9d94:	4648      	mov	r0, r9
   d9d96:	468b      	mov	fp, r1
   d9d98:	f7ff f942 	bl	d9020 <__aeabi_ui2d>
   d9d9c:	4602      	mov	r2, r0
   d9d9e:	460b      	mov	r3, r1
   d9da0:	4650      	mov	r0, sl
   d9da2:	4659      	mov	r1, fp
   d9da4:	f7ff f800 	bl	d8da8 <__adddf3>
   d9da8:	4682      	mov	sl, r0
   d9daa:	468b      	mov	fp, r1
   d9dac:	2d0f      	cmp	r5, #15
   d9dae:	dc38      	bgt.n	d9e22 <_strtod_l+0x45a>
   d9db0:	9b08      	ldr	r3, [sp, #32]
   d9db2:	2b00      	cmp	r3, #0
   d9db4:	f43f ae4a 	beq.w	d9a4c <_strtod_l+0x84>
   d9db8:	dd24      	ble.n	d9e04 <_strtod_l+0x43c>
   d9dba:	2b16      	cmp	r3, #22
   d9dbc:	dc0b      	bgt.n	d9dd6 <_strtod_l+0x40e>
   d9dbe:	4d6b      	ldr	r5, [pc, #428]	; (d9f6c <_strtod_l+0x5a4>)
   d9dc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9dc4:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9dc8:	4652      	mov	r2, sl
   d9dca:	465b      	mov	r3, fp
   d9dcc:	f7ff f9a2 	bl	d9114 <__aeabi_dmul>
   d9dd0:	4682      	mov	sl, r0
   d9dd2:	468b      	mov	fp, r1
   d9dd4:	e63a      	b.n	d9a4c <_strtod_l+0x84>
   d9dd6:	9a08      	ldr	r2, [sp, #32]
   d9dd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9ddc:	4293      	cmp	r3, r2
   d9dde:	db20      	blt.n	d9e22 <_strtod_l+0x45a>
   d9de0:	4c62      	ldr	r4, [pc, #392]	; (d9f6c <_strtod_l+0x5a4>)
   d9de2:	f1c5 050f 	rsb	r5, r5, #15
   d9de6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9dea:	4652      	mov	r2, sl
   d9dec:	465b      	mov	r3, fp
   d9dee:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9df2:	f7ff f98f 	bl	d9114 <__aeabi_dmul>
   d9df6:	9b08      	ldr	r3, [sp, #32]
   d9df8:	1b5d      	subs	r5, r3, r5
   d9dfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9dfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9e02:	e7e3      	b.n	d9dcc <_strtod_l+0x404>
   d9e04:	9b08      	ldr	r3, [sp, #32]
   d9e06:	3316      	adds	r3, #22
   d9e08:	db0b      	blt.n	d9e22 <_strtod_l+0x45a>
   d9e0a:	9b07      	ldr	r3, [sp, #28]
   d9e0c:	4a57      	ldr	r2, [pc, #348]	; (d9f6c <_strtod_l+0x5a4>)
   d9e0e:	1b9e      	subs	r6, r3, r6
   d9e10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9e14:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9e18:	4650      	mov	r0, sl
   d9e1a:	4659      	mov	r1, fp
   d9e1c:	f7ff faa4 	bl	d9368 <__aeabi_ddiv>
   d9e20:	e7d6      	b.n	d9dd0 <_strtod_l+0x408>
   d9e22:	9b08      	ldr	r3, [sp, #32]
   d9e24:	eba5 0808 	sub.w	r8, r5, r8
   d9e28:	4498      	add	r8, r3
   d9e2a:	f1b8 0f00 	cmp.w	r8, #0
   d9e2e:	dd71      	ble.n	d9f14 <_strtod_l+0x54c>
   d9e30:	f018 030f 	ands.w	r3, r8, #15
   d9e34:	d00a      	beq.n	d9e4c <_strtod_l+0x484>
   d9e36:	494d      	ldr	r1, [pc, #308]	; (d9f6c <_strtod_l+0x5a4>)
   d9e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9e3c:	4652      	mov	r2, sl
   d9e3e:	465b      	mov	r3, fp
   d9e40:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9e44:	f7ff f966 	bl	d9114 <__aeabi_dmul>
   d9e48:	4682      	mov	sl, r0
   d9e4a:	468b      	mov	fp, r1
   d9e4c:	f038 080f 	bics.w	r8, r8, #15
   d9e50:	d04d      	beq.n	d9eee <_strtod_l+0x526>
   d9e52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9e56:	dd22      	ble.n	d9e9e <_strtod_l+0x4d6>
   d9e58:	2500      	movs	r5, #0
   d9e5a:	462e      	mov	r6, r5
   d9e5c:	9509      	str	r5, [sp, #36]	; 0x24
   d9e5e:	9507      	str	r5, [sp, #28]
   d9e60:	2322      	movs	r3, #34	; 0x22
   d9e62:	f8df b110 	ldr.w	fp, [pc, #272]	; d9f74 <_strtod_l+0x5ac>
   d9e66:	6023      	str	r3, [r4, #0]
   d9e68:	f04f 0a00 	mov.w	sl, #0
   d9e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9e6e:	2b00      	cmp	r3, #0
   d9e70:	f43f adec 	beq.w	d9a4c <_strtod_l+0x84>
   d9e74:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9e76:	4620      	mov	r0, r4
   d9e78:	f000 ffe4 	bl	dae44 <_Bfree>
   d9e7c:	9907      	ldr	r1, [sp, #28]
   d9e7e:	4620      	mov	r0, r4
   d9e80:	f000 ffe0 	bl	dae44 <_Bfree>
   d9e84:	4631      	mov	r1, r6
   d9e86:	4620      	mov	r0, r4
   d9e88:	f000 ffdc 	bl	dae44 <_Bfree>
   d9e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9e8e:	4620      	mov	r0, r4
   d9e90:	f000 ffd8 	bl	dae44 <_Bfree>
   d9e94:	4629      	mov	r1, r5
   d9e96:	4620      	mov	r0, r4
   d9e98:	f000 ffd4 	bl	dae44 <_Bfree>
   d9e9c:	e5d6      	b.n	d9a4c <_strtod_l+0x84>
   d9e9e:	2300      	movs	r3, #0
   d9ea0:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9ea4:	4650      	mov	r0, sl
   d9ea6:	4659      	mov	r1, fp
   d9ea8:	4699      	mov	r9, r3
   d9eaa:	f1b8 0f01 	cmp.w	r8, #1
   d9eae:	dc21      	bgt.n	d9ef4 <_strtod_l+0x52c>
   d9eb0:	b10b      	cbz	r3, d9eb6 <_strtod_l+0x4ee>
   d9eb2:	4682      	mov	sl, r0
   d9eb4:	468b      	mov	fp, r1
   d9eb6:	4b2e      	ldr	r3, [pc, #184]	; (d9f70 <_strtod_l+0x5a8>)
   d9eb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9ebc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9ec0:	4652      	mov	r2, sl
   d9ec2:	465b      	mov	r3, fp
   d9ec4:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9ec8:	f7ff f924 	bl	d9114 <__aeabi_dmul>
   d9ecc:	4b29      	ldr	r3, [pc, #164]	; (d9f74 <_strtod_l+0x5ac>)
   d9ece:	460a      	mov	r2, r1
   d9ed0:	400b      	ands	r3, r1
   d9ed2:	4929      	ldr	r1, [pc, #164]	; (d9f78 <_strtod_l+0x5b0>)
   d9ed4:	428b      	cmp	r3, r1
   d9ed6:	4682      	mov	sl, r0
   d9ed8:	d8be      	bhi.n	d9e58 <_strtod_l+0x490>
   d9eda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9ede:	428b      	cmp	r3, r1
   d9ee0:	bf86      	itte	hi
   d9ee2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9f7c <_strtod_l+0x5b4>
   d9ee6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9eea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9eee:	2300      	movs	r3, #0
   d9ef0:	9304      	str	r3, [sp, #16]
   d9ef2:	e081      	b.n	d9ff8 <_strtod_l+0x630>
   d9ef4:	f018 0f01 	tst.w	r8, #1
   d9ef8:	d007      	beq.n	d9f0a <_strtod_l+0x542>
   d9efa:	4b1d      	ldr	r3, [pc, #116]	; (d9f70 <_strtod_l+0x5a8>)
   d9efc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9f00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f04:	f7ff f906 	bl	d9114 <__aeabi_dmul>
   d9f08:	2301      	movs	r3, #1
   d9f0a:	f109 0901 	add.w	r9, r9, #1
   d9f0e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9f12:	e7ca      	b.n	d9eaa <_strtod_l+0x4e2>
   d9f14:	d0eb      	beq.n	d9eee <_strtod_l+0x526>
   d9f16:	f1c8 0800 	rsb	r8, r8, #0
   d9f1a:	f018 020f 	ands.w	r2, r8, #15
   d9f1e:	d00a      	beq.n	d9f36 <_strtod_l+0x56e>
   d9f20:	4b12      	ldr	r3, [pc, #72]	; (d9f6c <_strtod_l+0x5a4>)
   d9f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9f26:	4650      	mov	r0, sl
   d9f28:	4659      	mov	r1, fp
   d9f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f2e:	f7ff fa1b 	bl	d9368 <__aeabi_ddiv>
   d9f32:	4682      	mov	sl, r0
   d9f34:	468b      	mov	fp, r1
   d9f36:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9f3a:	d0d8      	beq.n	d9eee <_strtod_l+0x526>
   d9f3c:	f1b8 0f1f 	cmp.w	r8, #31
   d9f40:	dd1e      	ble.n	d9f80 <_strtod_l+0x5b8>
   d9f42:	2500      	movs	r5, #0
   d9f44:	462e      	mov	r6, r5
   d9f46:	9509      	str	r5, [sp, #36]	; 0x24
   d9f48:	9507      	str	r5, [sp, #28]
   d9f4a:	2322      	movs	r3, #34	; 0x22
   d9f4c:	f04f 0a00 	mov.w	sl, #0
   d9f50:	f04f 0b00 	mov.w	fp, #0
   d9f54:	6023      	str	r3, [r4, #0]
   d9f56:	e789      	b.n	d9e6c <_strtod_l+0x4a4>
   d9f58:	000dc49f 	.word	0x000dc49f
   d9f5c:	000dc4b8 	.word	0x000dc4b8
   d9f60:	000dc496 	.word	0x000dc496
   d9f64:	000dc499 	.word	0x000dc499
   d9f68:	000dc45c 	.word	0x000dc45c
   d9f6c:	000dc638 	.word	0x000dc638
   d9f70:	000dc610 	.word	0x000dc610
   d9f74:	7ff00000 	.word	0x7ff00000
   d9f78:	7ca00000 	.word	0x7ca00000
   d9f7c:	7fefffff 	.word	0x7fefffff
   d9f80:	f018 0310 	ands.w	r3, r8, #16
   d9f84:	bf18      	it	ne
   d9f86:	236a      	movne	r3, #106	; 0x6a
   d9f88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; da340 <_strtod_l+0x978>
   d9f8c:	9304      	str	r3, [sp, #16]
   d9f8e:	4650      	mov	r0, sl
   d9f90:	4659      	mov	r1, fp
   d9f92:	2300      	movs	r3, #0
   d9f94:	f018 0f01 	tst.w	r8, #1
   d9f98:	d004      	beq.n	d9fa4 <_strtod_l+0x5dc>
   d9f9a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9f9e:	f7ff f8b9 	bl	d9114 <__aeabi_dmul>
   d9fa2:	2301      	movs	r3, #1
   d9fa4:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9fa8:	f109 0908 	add.w	r9, r9, #8
   d9fac:	d1f2      	bne.n	d9f94 <_strtod_l+0x5cc>
   d9fae:	b10b      	cbz	r3, d9fb4 <_strtod_l+0x5ec>
   d9fb0:	4682      	mov	sl, r0
   d9fb2:	468b      	mov	fp, r1
   d9fb4:	9b04      	ldr	r3, [sp, #16]
   d9fb6:	b1bb      	cbz	r3, d9fe8 <_strtod_l+0x620>
   d9fb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9fbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9fc0:	2b00      	cmp	r3, #0
   d9fc2:	4659      	mov	r1, fp
   d9fc4:	dd10      	ble.n	d9fe8 <_strtod_l+0x620>
   d9fc6:	2b1f      	cmp	r3, #31
   d9fc8:	f340 8128 	ble.w	da21c <_strtod_l+0x854>
   d9fcc:	2b34      	cmp	r3, #52	; 0x34
   d9fce:	bfde      	ittt	le
   d9fd0:	3b20      	suble	r3, #32
   d9fd2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9fd6:	fa02 f303 	lslle.w	r3, r2, r3
   d9fda:	f04f 0a00 	mov.w	sl, #0
   d9fde:	bfcc      	ite	gt
   d9fe0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9fe4:	ea03 0b01 	andle.w	fp, r3, r1
   d9fe8:	2200      	movs	r2, #0
   d9fea:	2300      	movs	r3, #0
   d9fec:	4650      	mov	r0, sl
   d9fee:	4659      	mov	r1, fp
   d9ff0:	f7ff faf8 	bl	d95e4 <__aeabi_dcmpeq>
   d9ff4:	2800      	cmp	r0, #0
   d9ff6:	d1a4      	bne.n	d9f42 <_strtod_l+0x57a>
   d9ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9ffa:	9300      	str	r3, [sp, #0]
   d9ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9ffe:	462b      	mov	r3, r5
   da000:	463a      	mov	r2, r7
   da002:	4620      	mov	r0, r4
   da004:	f000 ff73 	bl	daeee <__s2b>
   da008:	9009      	str	r0, [sp, #36]	; 0x24
   da00a:	2800      	cmp	r0, #0
   da00c:	f43f af24 	beq.w	d9e58 <_strtod_l+0x490>
   da010:	9b07      	ldr	r3, [sp, #28]
   da012:	1b9e      	subs	r6, r3, r6
   da014:	9b08      	ldr	r3, [sp, #32]
   da016:	2b00      	cmp	r3, #0
   da018:	bfb4      	ite	lt
   da01a:	4633      	movlt	r3, r6
   da01c:	2300      	movge	r3, #0
   da01e:	9310      	str	r3, [sp, #64]	; 0x40
   da020:	9b08      	ldr	r3, [sp, #32]
   da022:	2500      	movs	r5, #0
   da024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   da028:	9318      	str	r3, [sp, #96]	; 0x60
   da02a:	462e      	mov	r6, r5
   da02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da02e:	4620      	mov	r0, r4
   da030:	6859      	ldr	r1, [r3, #4]
   da032:	f000 fed3 	bl	daddc <_Balloc>
   da036:	9007      	str	r0, [sp, #28]
   da038:	2800      	cmp	r0, #0
   da03a:	f43f af11 	beq.w	d9e60 <_strtod_l+0x498>
   da03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da040:	691a      	ldr	r2, [r3, #16]
   da042:	3202      	adds	r2, #2
   da044:	f103 010c 	add.w	r1, r3, #12
   da048:	0092      	lsls	r2, r2, #2
   da04a:	300c      	adds	r0, #12
   da04c:	f7ff fbee 	bl	d982c <memcpy>
   da050:	ec4b ab10 	vmov	d0, sl, fp
   da054:	aa20      	add	r2, sp, #128	; 0x80
   da056:	a91f      	add	r1, sp, #124	; 0x7c
   da058:	4620      	mov	r0, r4
   da05a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   da05e:	f001 fa35 	bl	db4cc <__d2b>
   da062:	901e      	str	r0, [sp, #120]	; 0x78
   da064:	2800      	cmp	r0, #0
   da066:	f43f aefb 	beq.w	d9e60 <_strtod_l+0x498>
   da06a:	2101      	movs	r1, #1
   da06c:	4620      	mov	r0, r4
   da06e:	f000 ffcc 	bl	db00a <__i2b>
   da072:	4606      	mov	r6, r0
   da074:	2800      	cmp	r0, #0
   da076:	f43f aef3 	beq.w	d9e60 <_strtod_l+0x498>
   da07a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   da07c:	9904      	ldr	r1, [sp, #16]
   da07e:	2b00      	cmp	r3, #0
   da080:	bfab      	itete	ge
   da082:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   da084:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   da086:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   da088:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   da08c:	bfac      	ite	ge
   da08e:	eb03 0902 	addge.w	r9, r3, r2
   da092:	1ad7      	sublt	r7, r2, r3
   da094:	9a20      	ldr	r2, [sp, #128]	; 0x80
   da096:	eba3 0801 	sub.w	r8, r3, r1
   da09a:	4490      	add	r8, r2
   da09c:	4ba3      	ldr	r3, [pc, #652]	; (da32c <_strtod_l+0x964>)
   da09e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da0a2:	4598      	cmp	r8, r3
   da0a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   da0a8:	f280 80cc 	bge.w	da244 <_strtod_l+0x87c>
   da0ac:	eba3 0308 	sub.w	r3, r3, r8
   da0b0:	2b1f      	cmp	r3, #31
   da0b2:	eba2 0203 	sub.w	r2, r2, r3
   da0b6:	f04f 0101 	mov.w	r1, #1
   da0ba:	f300 80b6 	bgt.w	da22a <_strtod_l+0x862>
   da0be:	fa01 f303 	lsl.w	r3, r1, r3
   da0c2:	9311      	str	r3, [sp, #68]	; 0x44
   da0c4:	2300      	movs	r3, #0
   da0c6:	930c      	str	r3, [sp, #48]	; 0x30
   da0c8:	eb09 0802 	add.w	r8, r9, r2
   da0cc:	9b04      	ldr	r3, [sp, #16]
   da0ce:	45c1      	cmp	r9, r8
   da0d0:	4417      	add	r7, r2
   da0d2:	441f      	add	r7, r3
   da0d4:	464b      	mov	r3, r9
   da0d6:	bfa8      	it	ge
   da0d8:	4643      	movge	r3, r8
   da0da:	42bb      	cmp	r3, r7
   da0dc:	bfa8      	it	ge
   da0de:	463b      	movge	r3, r7
   da0e0:	2b00      	cmp	r3, #0
   da0e2:	bfc2      	ittt	gt
   da0e4:	eba8 0803 	subgt.w	r8, r8, r3
   da0e8:	1aff      	subgt	r7, r7, r3
   da0ea:	eba9 0903 	subgt.w	r9, r9, r3
   da0ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da0f0:	2b00      	cmp	r3, #0
   da0f2:	dd17      	ble.n	da124 <_strtod_l+0x75c>
   da0f4:	4631      	mov	r1, r6
   da0f6:	461a      	mov	r2, r3
   da0f8:	4620      	mov	r0, r4
   da0fa:	f001 f82b 	bl	db154 <__pow5mult>
   da0fe:	4606      	mov	r6, r0
   da100:	2800      	cmp	r0, #0
   da102:	f43f aead 	beq.w	d9e60 <_strtod_l+0x498>
   da106:	4601      	mov	r1, r0
   da108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   da10a:	4620      	mov	r0, r4
   da10c:	f000 ff86 	bl	db01c <__multiply>
   da110:	900f      	str	r0, [sp, #60]	; 0x3c
   da112:	2800      	cmp	r0, #0
   da114:	f43f aea4 	beq.w	d9e60 <_strtod_l+0x498>
   da118:	991e      	ldr	r1, [sp, #120]	; 0x78
   da11a:	4620      	mov	r0, r4
   da11c:	f000 fe92 	bl	dae44 <_Bfree>
   da120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da122:	931e      	str	r3, [sp, #120]	; 0x78
   da124:	f1b8 0f00 	cmp.w	r8, #0
   da128:	f300 8091 	bgt.w	da24e <_strtod_l+0x886>
   da12c:	9b08      	ldr	r3, [sp, #32]
   da12e:	2b00      	cmp	r3, #0
   da130:	dd08      	ble.n	da144 <_strtod_l+0x77c>
   da132:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da134:	9907      	ldr	r1, [sp, #28]
   da136:	4620      	mov	r0, r4
   da138:	f001 f80c 	bl	db154 <__pow5mult>
   da13c:	9007      	str	r0, [sp, #28]
   da13e:	2800      	cmp	r0, #0
   da140:	f43f ae8e 	beq.w	d9e60 <_strtod_l+0x498>
   da144:	2f00      	cmp	r7, #0
   da146:	dd08      	ble.n	da15a <_strtod_l+0x792>
   da148:	9907      	ldr	r1, [sp, #28]
   da14a:	463a      	mov	r2, r7
   da14c:	4620      	mov	r0, r4
   da14e:	f001 f84f 	bl	db1f0 <__lshift>
   da152:	9007      	str	r0, [sp, #28]
   da154:	2800      	cmp	r0, #0
   da156:	f43f ae83 	beq.w	d9e60 <_strtod_l+0x498>
   da15a:	f1b9 0f00 	cmp.w	r9, #0
   da15e:	dd08      	ble.n	da172 <_strtod_l+0x7aa>
   da160:	4631      	mov	r1, r6
   da162:	464a      	mov	r2, r9
   da164:	4620      	mov	r0, r4
   da166:	f001 f843 	bl	db1f0 <__lshift>
   da16a:	4606      	mov	r6, r0
   da16c:	2800      	cmp	r0, #0
   da16e:	f43f ae77 	beq.w	d9e60 <_strtod_l+0x498>
   da172:	9a07      	ldr	r2, [sp, #28]
   da174:	991e      	ldr	r1, [sp, #120]	; 0x78
   da176:	4620      	mov	r0, r4
   da178:	f001 f8b5 	bl	db2e6 <__mdiff>
   da17c:	4605      	mov	r5, r0
   da17e:	2800      	cmp	r0, #0
   da180:	f43f ae6e 	beq.w	d9e60 <_strtod_l+0x498>
   da184:	68c3      	ldr	r3, [r0, #12]
   da186:	930f      	str	r3, [sp, #60]	; 0x3c
   da188:	2300      	movs	r3, #0
   da18a:	60c3      	str	r3, [r0, #12]
   da18c:	4631      	mov	r1, r6
   da18e:	f001 f88e 	bl	db2ae <__mcmp>
   da192:	2800      	cmp	r0, #0
   da194:	da65      	bge.n	da262 <_strtod_l+0x89a>
   da196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da198:	ea53 030a 	orrs.w	r3, r3, sl
   da19c:	f040 8087 	bne.w	da2ae <_strtod_l+0x8e6>
   da1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da1a4:	2b00      	cmp	r3, #0
   da1a6:	f040 8082 	bne.w	da2ae <_strtod_l+0x8e6>
   da1aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da1ae:	0d1b      	lsrs	r3, r3, #20
   da1b0:	051b      	lsls	r3, r3, #20
   da1b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da1b6:	d97a      	bls.n	da2ae <_strtod_l+0x8e6>
   da1b8:	696b      	ldr	r3, [r5, #20]
   da1ba:	b913      	cbnz	r3, da1c2 <_strtod_l+0x7fa>
   da1bc:	692b      	ldr	r3, [r5, #16]
   da1be:	2b01      	cmp	r3, #1
   da1c0:	dd75      	ble.n	da2ae <_strtod_l+0x8e6>
   da1c2:	4629      	mov	r1, r5
   da1c4:	2201      	movs	r2, #1
   da1c6:	4620      	mov	r0, r4
   da1c8:	f001 f812 	bl	db1f0 <__lshift>
   da1cc:	4631      	mov	r1, r6
   da1ce:	4605      	mov	r5, r0
   da1d0:	f001 f86d 	bl	db2ae <__mcmp>
   da1d4:	2800      	cmp	r0, #0
   da1d6:	dd6a      	ble.n	da2ae <_strtod_l+0x8e6>
   da1d8:	9904      	ldr	r1, [sp, #16]
   da1da:	4a55      	ldr	r2, [pc, #340]	; (da330 <_strtod_l+0x968>)
   da1dc:	465b      	mov	r3, fp
   da1de:	2900      	cmp	r1, #0
   da1e0:	f000 8085 	beq.w	da2ee <_strtod_l+0x926>
   da1e4:	ea02 010b 	and.w	r1, r2, fp
   da1e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   da1ec:	dc7f      	bgt.n	da2ee <_strtod_l+0x926>
   da1ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   da1f2:	f77f aeaa 	ble.w	d9f4a <_strtod_l+0x582>
   da1f6:	4a4f      	ldr	r2, [pc, #316]	; (da334 <_strtod_l+0x96c>)
   da1f8:	2300      	movs	r3, #0
   da1fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   da1fe:	4650      	mov	r0, sl
   da200:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   da204:	4659      	mov	r1, fp
   da206:	f7fe ff85 	bl	d9114 <__aeabi_dmul>
   da20a:	460b      	mov	r3, r1
   da20c:	4303      	orrs	r3, r0
   da20e:	bf08      	it	eq
   da210:	2322      	moveq	r3, #34	; 0x22
   da212:	4682      	mov	sl, r0
   da214:	468b      	mov	fp, r1
   da216:	bf08      	it	eq
   da218:	6023      	streq	r3, [r4, #0]
   da21a:	e62b      	b.n	d9e74 <_strtod_l+0x4ac>
   da21c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da220:	fa02 f303 	lsl.w	r3, r2, r3
   da224:	ea03 0a0a 	and.w	sl, r3, sl
   da228:	e6de      	b.n	d9fe8 <_strtod_l+0x620>
   da22a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   da22e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   da232:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   da236:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   da23a:	fa01 f308 	lsl.w	r3, r1, r8
   da23e:	930c      	str	r3, [sp, #48]	; 0x30
   da240:	9111      	str	r1, [sp, #68]	; 0x44
   da242:	e741      	b.n	da0c8 <_strtod_l+0x700>
   da244:	2300      	movs	r3, #0
   da246:	930c      	str	r3, [sp, #48]	; 0x30
   da248:	2301      	movs	r3, #1
   da24a:	9311      	str	r3, [sp, #68]	; 0x44
   da24c:	e73c      	b.n	da0c8 <_strtod_l+0x700>
   da24e:	991e      	ldr	r1, [sp, #120]	; 0x78
   da250:	4642      	mov	r2, r8
   da252:	4620      	mov	r0, r4
   da254:	f000 ffcc 	bl	db1f0 <__lshift>
   da258:	901e      	str	r0, [sp, #120]	; 0x78
   da25a:	2800      	cmp	r0, #0
   da25c:	f47f af66 	bne.w	da12c <_strtod_l+0x764>
   da260:	e5fe      	b.n	d9e60 <_strtod_l+0x498>
   da262:	465f      	mov	r7, fp
   da264:	d16e      	bne.n	da344 <_strtod_l+0x97c>
   da266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da268:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da26c:	b342      	cbz	r2, da2c0 <_strtod_l+0x8f8>
   da26e:	4a32      	ldr	r2, [pc, #200]	; (da338 <_strtod_l+0x970>)
   da270:	4293      	cmp	r3, r2
   da272:	d128      	bne.n	da2c6 <_strtod_l+0x8fe>
   da274:	9b04      	ldr	r3, [sp, #16]
   da276:	4650      	mov	r0, sl
   da278:	b1eb      	cbz	r3, da2b6 <_strtod_l+0x8ee>
   da27a:	4a2d      	ldr	r2, [pc, #180]	; (da330 <_strtod_l+0x968>)
   da27c:	403a      	ands	r2, r7
   da27e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   da282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   da286:	d819      	bhi.n	da2bc <_strtod_l+0x8f4>
   da288:	0d12      	lsrs	r2, r2, #20
   da28a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   da28e:	fa01 f303 	lsl.w	r3, r1, r3
   da292:	4298      	cmp	r0, r3
   da294:	d117      	bne.n	da2c6 <_strtod_l+0x8fe>
   da296:	4b29      	ldr	r3, [pc, #164]	; (da33c <_strtod_l+0x974>)
   da298:	429f      	cmp	r7, r3
   da29a:	d102      	bne.n	da2a2 <_strtod_l+0x8da>
   da29c:	3001      	adds	r0, #1
   da29e:	f43f addf 	beq.w	d9e60 <_strtod_l+0x498>
   da2a2:	4b23      	ldr	r3, [pc, #140]	; (da330 <_strtod_l+0x968>)
   da2a4:	403b      	ands	r3, r7
   da2a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da2aa:	f04f 0a00 	mov.w	sl, #0
   da2ae:	9b04      	ldr	r3, [sp, #16]
   da2b0:	2b00      	cmp	r3, #0
   da2b2:	d1a0      	bne.n	da1f6 <_strtod_l+0x82e>
   da2b4:	e5de      	b.n	d9e74 <_strtod_l+0x4ac>
   da2b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da2ba:	e7ea      	b.n	da292 <_strtod_l+0x8ca>
   da2bc:	460b      	mov	r3, r1
   da2be:	e7e8      	b.n	da292 <_strtod_l+0x8ca>
   da2c0:	ea53 030a 	orrs.w	r3, r3, sl
   da2c4:	d088      	beq.n	da1d8 <_strtod_l+0x810>
   da2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da2c8:	b1db      	cbz	r3, da302 <_strtod_l+0x93a>
   da2ca:	423b      	tst	r3, r7
   da2cc:	d0ef      	beq.n	da2ae <_strtod_l+0x8e6>
   da2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da2d0:	9a04      	ldr	r2, [sp, #16]
   da2d2:	4650      	mov	r0, sl
   da2d4:	4659      	mov	r1, fp
   da2d6:	b1c3      	cbz	r3, da30a <_strtod_l+0x942>
   da2d8:	f7ff fb58 	bl	d998c <sulp>
   da2dc:	4602      	mov	r2, r0
   da2de:	460b      	mov	r3, r1
   da2e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da2e4:	f7fe fd60 	bl	d8da8 <__adddf3>
   da2e8:	4682      	mov	sl, r0
   da2ea:	468b      	mov	fp, r1
   da2ec:	e7df      	b.n	da2ae <_strtod_l+0x8e6>
   da2ee:	4013      	ands	r3, r2
   da2f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da2f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da2f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da2fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da300:	e7d5      	b.n	da2ae <_strtod_l+0x8e6>
   da302:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da304:	ea13 0f0a 	tst.w	r3, sl
   da308:	e7e0      	b.n	da2cc <_strtod_l+0x904>
   da30a:	f7ff fb3f 	bl	d998c <sulp>
   da30e:	4602      	mov	r2, r0
   da310:	460b      	mov	r3, r1
   da312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da316:	f7fe fd45 	bl	d8da4 <__aeabi_dsub>
   da31a:	2200      	movs	r2, #0
   da31c:	2300      	movs	r3, #0
   da31e:	4682      	mov	sl, r0
   da320:	468b      	mov	fp, r1
   da322:	f7ff f95f 	bl	d95e4 <__aeabi_dcmpeq>
   da326:	2800      	cmp	r0, #0
   da328:	d0c1      	beq.n	da2ae <_strtod_l+0x8e6>
   da32a:	e60e      	b.n	d9f4a <_strtod_l+0x582>
   da32c:	fffffc02 	.word	0xfffffc02
   da330:	7ff00000 	.word	0x7ff00000
   da334:	39500000 	.word	0x39500000
   da338:	000fffff 	.word	0x000fffff
   da33c:	7fefffff 	.word	0x7fefffff
   da340:	000dc4d0 	.word	0x000dc4d0
   da344:	4631      	mov	r1, r6
   da346:	4628      	mov	r0, r5
   da348:	f001 f910 	bl	db56c <__ratio>
   da34c:	ec59 8b10 	vmov	r8, r9, d0
   da350:	ee10 0a10 	vmov	r0, s0
   da354:	2200      	movs	r2, #0
   da356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da35a:	4649      	mov	r1, r9
   da35c:	f7ff f956 	bl	d960c <__aeabi_dcmple>
   da360:	2800      	cmp	r0, #0
   da362:	d07c      	beq.n	da45e <_strtod_l+0xa96>
   da364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da366:	2b00      	cmp	r3, #0
   da368:	d04c      	beq.n	da404 <_strtod_l+0xa3c>
   da36a:	4b95      	ldr	r3, [pc, #596]	; (da5c0 <_strtod_l+0xbf8>)
   da36c:	2200      	movs	r2, #0
   da36e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da372:	f8df 924c 	ldr.w	r9, [pc, #588]	; da5c0 <_strtod_l+0xbf8>
   da376:	f04f 0800 	mov.w	r8, #0
   da37a:	4b92      	ldr	r3, [pc, #584]	; (da5c4 <_strtod_l+0xbfc>)
   da37c:	403b      	ands	r3, r7
   da37e:	9311      	str	r3, [sp, #68]	; 0x44
   da380:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da382:	4b91      	ldr	r3, [pc, #580]	; (da5c8 <_strtod_l+0xc00>)
   da384:	429a      	cmp	r2, r3
   da386:	f040 80b2 	bne.w	da4ee <_strtod_l+0xb26>
   da38a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da392:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   da396:	ec4b ab10 	vmov	d0, sl, fp
   da39a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   da39e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da3a2:	f001 f817 	bl	db3d4 <__ulp>
   da3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da3aa:	ec53 2b10 	vmov	r2, r3, d0
   da3ae:	f7fe feb1 	bl	d9114 <__aeabi_dmul>
   da3b2:	4652      	mov	r2, sl
   da3b4:	465b      	mov	r3, fp
   da3b6:	f7fe fcf7 	bl	d8da8 <__adddf3>
   da3ba:	460b      	mov	r3, r1
   da3bc:	4981      	ldr	r1, [pc, #516]	; (da5c4 <_strtod_l+0xbfc>)
   da3be:	4a83      	ldr	r2, [pc, #524]	; (da5cc <_strtod_l+0xc04>)
   da3c0:	4019      	ands	r1, r3
   da3c2:	4291      	cmp	r1, r2
   da3c4:	4682      	mov	sl, r0
   da3c6:	d95e      	bls.n	da486 <_strtod_l+0xabe>
   da3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da3ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   da3ce:	4293      	cmp	r3, r2
   da3d0:	d103      	bne.n	da3da <_strtod_l+0xa12>
   da3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da3d4:	3301      	adds	r3, #1
   da3d6:	f43f ad43 	beq.w	d9e60 <_strtod_l+0x498>
   da3da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da5d8 <_strtod_l+0xc10>
   da3de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da3e2:	991e      	ldr	r1, [sp, #120]	; 0x78
   da3e4:	4620      	mov	r0, r4
   da3e6:	f000 fd2d 	bl	dae44 <_Bfree>
   da3ea:	9907      	ldr	r1, [sp, #28]
   da3ec:	4620      	mov	r0, r4
   da3ee:	f000 fd29 	bl	dae44 <_Bfree>
   da3f2:	4631      	mov	r1, r6
   da3f4:	4620      	mov	r0, r4
   da3f6:	f000 fd25 	bl	dae44 <_Bfree>
   da3fa:	4629      	mov	r1, r5
   da3fc:	4620      	mov	r0, r4
   da3fe:	f000 fd21 	bl	dae44 <_Bfree>
   da402:	e613      	b.n	da02c <_strtod_l+0x664>
   da404:	f1ba 0f00 	cmp.w	sl, #0
   da408:	d11b      	bne.n	da442 <_strtod_l+0xa7a>
   da40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da40e:	b9f3      	cbnz	r3, da44e <_strtod_l+0xa86>
   da410:	4b6b      	ldr	r3, [pc, #428]	; (da5c0 <_strtod_l+0xbf8>)
   da412:	2200      	movs	r2, #0
   da414:	4640      	mov	r0, r8
   da416:	4649      	mov	r1, r9
   da418:	f7ff f8ee 	bl	d95f8 <__aeabi_dcmplt>
   da41c:	b9d0      	cbnz	r0, da454 <_strtod_l+0xa8c>
   da41e:	4640      	mov	r0, r8
   da420:	4649      	mov	r1, r9
   da422:	4b6b      	ldr	r3, [pc, #428]	; (da5d0 <_strtod_l+0xc08>)
   da424:	2200      	movs	r2, #0
   da426:	f7fe fe75 	bl	d9114 <__aeabi_dmul>
   da42a:	4680      	mov	r8, r0
   da42c:	4689      	mov	r9, r1
   da42e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da432:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da436:	931b      	str	r3, [sp, #108]	; 0x6c
   da438:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da43c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da440:	e79b      	b.n	da37a <_strtod_l+0x9b2>
   da442:	f1ba 0f01 	cmp.w	sl, #1
   da446:	d102      	bne.n	da44e <_strtod_l+0xa86>
   da448:	2f00      	cmp	r7, #0
   da44a:	f43f ad7e 	beq.w	d9f4a <_strtod_l+0x582>
   da44e:	4b61      	ldr	r3, [pc, #388]	; (da5d4 <_strtod_l+0xc0c>)
   da450:	2200      	movs	r2, #0
   da452:	e78c      	b.n	da36e <_strtod_l+0x9a6>
   da454:	f8df 9178 	ldr.w	r9, [pc, #376]	; da5d0 <_strtod_l+0xc08>
   da458:	f04f 0800 	mov.w	r8, #0
   da45c:	e7e7      	b.n	da42e <_strtod_l+0xa66>
   da45e:	4b5c      	ldr	r3, [pc, #368]	; (da5d0 <_strtod_l+0xc08>)
   da460:	4640      	mov	r0, r8
   da462:	4649      	mov	r1, r9
   da464:	2200      	movs	r2, #0
   da466:	f7fe fe55 	bl	d9114 <__aeabi_dmul>
   da46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da46c:	4680      	mov	r8, r0
   da46e:	4689      	mov	r9, r1
   da470:	b933      	cbnz	r3, da480 <_strtod_l+0xab8>
   da472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da476:	9012      	str	r0, [sp, #72]	; 0x48
   da478:	9313      	str	r3, [sp, #76]	; 0x4c
   da47a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da47e:	e7dd      	b.n	da43c <_strtod_l+0xa74>
   da480:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da484:	e7f9      	b.n	da47a <_strtod_l+0xab2>
   da486:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da48a:	9b04      	ldr	r3, [sp, #16]
   da48c:	2b00      	cmp	r3, #0
   da48e:	d1a8      	bne.n	da3e2 <_strtod_l+0xa1a>
   da490:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da494:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da496:	0d1b      	lsrs	r3, r3, #20
   da498:	051b      	lsls	r3, r3, #20
   da49a:	429a      	cmp	r2, r3
   da49c:	d1a1      	bne.n	da3e2 <_strtod_l+0xa1a>
   da49e:	4640      	mov	r0, r8
   da4a0:	4649      	mov	r1, r9
   da4a2:	f001 f8ff 	bl	db6a4 <__aeabi_d2lz>
   da4a6:	f7fe fe07 	bl	d90b8 <__aeabi_l2d>
   da4aa:	4602      	mov	r2, r0
   da4ac:	460b      	mov	r3, r1
   da4ae:	4640      	mov	r0, r8
   da4b0:	4649      	mov	r1, r9
   da4b2:	f7fe fc77 	bl	d8da4 <__aeabi_dsub>
   da4b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da4b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da4bc:	ea43 030a 	orr.w	r3, r3, sl
   da4c0:	4313      	orrs	r3, r2
   da4c2:	4680      	mov	r8, r0
   da4c4:	4689      	mov	r9, r1
   da4c6:	d053      	beq.n	da570 <_strtod_l+0xba8>
   da4c8:	a335      	add	r3, pc, #212	; (adr r3, da5a0 <_strtod_l+0xbd8>)
   da4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4ce:	f7ff f893 	bl	d95f8 <__aeabi_dcmplt>
   da4d2:	2800      	cmp	r0, #0
   da4d4:	f47f acce 	bne.w	d9e74 <_strtod_l+0x4ac>
   da4d8:	a333      	add	r3, pc, #204	; (adr r3, da5a8 <_strtod_l+0xbe0>)
   da4da:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4de:	4640      	mov	r0, r8
   da4e0:	4649      	mov	r1, r9
   da4e2:	f7ff f8a7 	bl	d9634 <__aeabi_dcmpgt>
   da4e6:	2800      	cmp	r0, #0
   da4e8:	f43f af7b 	beq.w	da3e2 <_strtod_l+0xa1a>
   da4ec:	e4c2      	b.n	d9e74 <_strtod_l+0x4ac>
   da4ee:	9b04      	ldr	r3, [sp, #16]
   da4f0:	b333      	cbz	r3, da540 <_strtod_l+0xb78>
   da4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da4f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da4f8:	d822      	bhi.n	da540 <_strtod_l+0xb78>
   da4fa:	a32d      	add	r3, pc, #180	; (adr r3, da5b0 <_strtod_l+0xbe8>)
   da4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   da500:	4640      	mov	r0, r8
   da502:	4649      	mov	r1, r9
   da504:	f7ff f882 	bl	d960c <__aeabi_dcmple>
   da508:	b1a0      	cbz	r0, da534 <_strtod_l+0xb6c>
   da50a:	4649      	mov	r1, r9
   da50c:	4640      	mov	r0, r8
   da50e:	f7ff f8b1 	bl	d9674 <__aeabi_d2uiz>
   da512:	2801      	cmp	r0, #1
   da514:	bf38      	it	cc
   da516:	2001      	movcc	r0, #1
   da518:	f7fe fd82 	bl	d9020 <__aeabi_ui2d>
   da51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da51e:	4680      	mov	r8, r0
   da520:	4689      	mov	r9, r1
   da522:	bb13      	cbnz	r3, da56a <_strtod_l+0xba2>
   da524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da528:	9014      	str	r0, [sp, #80]	; 0x50
   da52a:	9315      	str	r3, [sp, #84]	; 0x54
   da52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da530:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da536:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da53c:	1a9b      	subs	r3, r3, r2
   da53e:	930d      	str	r3, [sp, #52]	; 0x34
   da540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da544:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da54c:	f000 ff42 	bl	db3d4 <__ulp>
   da550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da554:	ec53 2b10 	vmov	r2, r3, d0
   da558:	f7fe fddc 	bl	d9114 <__aeabi_dmul>
   da55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da560:	f7fe fc22 	bl	d8da8 <__adddf3>
   da564:	4682      	mov	sl, r0
   da566:	468b      	mov	fp, r1
   da568:	e78f      	b.n	da48a <_strtod_l+0xac2>
   da56a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da56e:	e7dd      	b.n	da52c <_strtod_l+0xb64>
   da570:	a311      	add	r3, pc, #68	; (adr r3, da5b8 <_strtod_l+0xbf0>)
   da572:	e9d3 2300 	ldrd	r2, r3, [r3]
   da576:	f7ff f83f 	bl	d95f8 <__aeabi_dcmplt>
   da57a:	e7b4      	b.n	da4e6 <_strtod_l+0xb1e>
   da57c:	2300      	movs	r3, #0
   da57e:	930e      	str	r3, [sp, #56]	; 0x38
   da580:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da582:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da584:	6013      	str	r3, [r2, #0]
   da586:	f7ff ba65 	b.w	d9a54 <_strtod_l+0x8c>
   da58a:	2b65      	cmp	r3, #101	; 0x65
   da58c:	f43f ab5d 	beq.w	d9c4a <_strtod_l+0x282>
   da590:	2b45      	cmp	r3, #69	; 0x45
   da592:	f43f ab5a 	beq.w	d9c4a <_strtod_l+0x282>
   da596:	2201      	movs	r2, #1
   da598:	f7ff bb92 	b.w	d9cc0 <_strtod_l+0x2f8>
   da59c:	f3af 8000 	nop.w
   da5a0:	94a03595 	.word	0x94a03595
   da5a4:	3fdfffff 	.word	0x3fdfffff
   da5a8:	35afe535 	.word	0x35afe535
   da5ac:	3fe00000 	.word	0x3fe00000
   da5b0:	ffc00000 	.word	0xffc00000
   da5b4:	41dfffff 	.word	0x41dfffff
   da5b8:	94a03595 	.word	0x94a03595
   da5bc:	3fcfffff 	.word	0x3fcfffff
   da5c0:	3ff00000 	.word	0x3ff00000
   da5c4:	7ff00000 	.word	0x7ff00000
   da5c8:	7fe00000 	.word	0x7fe00000
   da5cc:	7c9fffff 	.word	0x7c9fffff
   da5d0:	3fe00000 	.word	0x3fe00000
   da5d4:	bff00000 	.word	0xbff00000
   da5d8:	7fefffff 	.word	0x7fefffff

000da5dc <strtod>:
   da5dc:	460a      	mov	r2, r1
   da5de:	4601      	mov	r1, r0
   da5e0:	4802      	ldr	r0, [pc, #8]	; (da5ec <strtod+0x10>)
   da5e2:	4b03      	ldr	r3, [pc, #12]	; (da5f0 <strtod+0x14>)
   da5e4:	6800      	ldr	r0, [r0, #0]
   da5e6:	f7ff b9ef 	b.w	d99c8 <_strtod_l>
   da5ea:	bf00      	nop
   da5ec:	2003d8f0 	.word	0x2003d8f0
   da5f0:	2003d958 	.word	0x2003d958

000da5f4 <_strtol_l.isra.0>:
   da5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da5f8:	4e3a      	ldr	r6, [pc, #232]	; (da6e4 <_strtol_l.isra.0+0xf0>)
   da5fa:	4686      	mov	lr, r0
   da5fc:	468c      	mov	ip, r1
   da5fe:	4660      	mov	r0, ip
   da600:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da604:	5da5      	ldrb	r5, [r4, r6]
   da606:	f015 0508 	ands.w	r5, r5, #8
   da60a:	d1f8      	bne.n	da5fe <_strtol_l.isra.0+0xa>
   da60c:	2c2d      	cmp	r4, #45	; 0x2d
   da60e:	d133      	bne.n	da678 <_strtol_l.isra.0+0x84>
   da610:	f89c 4000 	ldrb.w	r4, [ip]
   da614:	f04f 0801 	mov.w	r8, #1
   da618:	f100 0c02 	add.w	ip, r0, #2
   da61c:	2b00      	cmp	r3, #0
   da61e:	d05c      	beq.n	da6da <_strtol_l.isra.0+0xe6>
   da620:	2b10      	cmp	r3, #16
   da622:	d10c      	bne.n	da63e <_strtol_l.isra.0+0x4a>
   da624:	2c30      	cmp	r4, #48	; 0x30
   da626:	d10a      	bne.n	da63e <_strtol_l.isra.0+0x4a>
   da628:	f89c 0000 	ldrb.w	r0, [ip]
   da62c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da630:	2858      	cmp	r0, #88	; 0x58
   da632:	d14d      	bne.n	da6d0 <_strtol_l.isra.0+0xdc>
   da634:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da638:	2310      	movs	r3, #16
   da63a:	f10c 0c02 	add.w	ip, ip, #2
   da63e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da642:	3f01      	subs	r7, #1
   da644:	2600      	movs	r6, #0
   da646:	fbb7 f9f3 	udiv	r9, r7, r3
   da64a:	4630      	mov	r0, r6
   da64c:	fb03 7a19 	mls	sl, r3, r9, r7
   da650:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da654:	2d09      	cmp	r5, #9
   da656:	d818      	bhi.n	da68a <_strtol_l.isra.0+0x96>
   da658:	462c      	mov	r4, r5
   da65a:	42a3      	cmp	r3, r4
   da65c:	dd24      	ble.n	da6a8 <_strtol_l.isra.0+0xb4>
   da65e:	1c75      	adds	r5, r6, #1
   da660:	d007      	beq.n	da672 <_strtol_l.isra.0+0x7e>
   da662:	4581      	cmp	r9, r0
   da664:	d31d      	bcc.n	da6a2 <_strtol_l.isra.0+0xae>
   da666:	d101      	bne.n	da66c <_strtol_l.isra.0+0x78>
   da668:	45a2      	cmp	sl, r4
   da66a:	db1a      	blt.n	da6a2 <_strtol_l.isra.0+0xae>
   da66c:	fb00 4003 	mla	r0, r0, r3, r4
   da670:	2601      	movs	r6, #1
   da672:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da676:	e7eb      	b.n	da650 <_strtol_l.isra.0+0x5c>
   da678:	2c2b      	cmp	r4, #43	; 0x2b
   da67a:	bf08      	it	eq
   da67c:	f89c 4000 	ldrbeq.w	r4, [ip]
   da680:	46a8      	mov	r8, r5
   da682:	bf08      	it	eq
   da684:	f100 0c02 	addeq.w	ip, r0, #2
   da688:	e7c8      	b.n	da61c <_strtol_l.isra.0+0x28>
   da68a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da68e:	2d19      	cmp	r5, #25
   da690:	d801      	bhi.n	da696 <_strtol_l.isra.0+0xa2>
   da692:	3c37      	subs	r4, #55	; 0x37
   da694:	e7e1      	b.n	da65a <_strtol_l.isra.0+0x66>
   da696:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da69a:	2d19      	cmp	r5, #25
   da69c:	d804      	bhi.n	da6a8 <_strtol_l.isra.0+0xb4>
   da69e:	3c57      	subs	r4, #87	; 0x57
   da6a0:	e7db      	b.n	da65a <_strtol_l.isra.0+0x66>
   da6a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da6a6:	e7e4      	b.n	da672 <_strtol_l.isra.0+0x7e>
   da6a8:	1c73      	adds	r3, r6, #1
   da6aa:	d106      	bne.n	da6ba <_strtol_l.isra.0+0xc6>
   da6ac:	2322      	movs	r3, #34	; 0x22
   da6ae:	f8ce 3000 	str.w	r3, [lr]
   da6b2:	4638      	mov	r0, r7
   da6b4:	b942      	cbnz	r2, da6c8 <_strtol_l.isra.0+0xd4>
   da6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6ba:	f1b8 0f00 	cmp.w	r8, #0
   da6be:	d000      	beq.n	da6c2 <_strtol_l.isra.0+0xce>
   da6c0:	4240      	negs	r0, r0
   da6c2:	2a00      	cmp	r2, #0
   da6c4:	d0f7      	beq.n	da6b6 <_strtol_l.isra.0+0xc2>
   da6c6:	b10e      	cbz	r6, da6cc <_strtol_l.isra.0+0xd8>
   da6c8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da6cc:	6011      	str	r1, [r2, #0]
   da6ce:	e7f2      	b.n	da6b6 <_strtol_l.isra.0+0xc2>
   da6d0:	2430      	movs	r4, #48	; 0x30
   da6d2:	2b00      	cmp	r3, #0
   da6d4:	d1b3      	bne.n	da63e <_strtol_l.isra.0+0x4a>
   da6d6:	2308      	movs	r3, #8
   da6d8:	e7b1      	b.n	da63e <_strtol_l.isra.0+0x4a>
   da6da:	2c30      	cmp	r4, #48	; 0x30
   da6dc:	d0a4      	beq.n	da628 <_strtol_l.isra.0+0x34>
   da6de:	230a      	movs	r3, #10
   da6e0:	e7ad      	b.n	da63e <_strtol_l.isra.0+0x4a>
   da6e2:	bf00      	nop
   da6e4:	000dc4f9 	.word	0x000dc4f9

000da6e8 <strtol>:
   da6e8:	4613      	mov	r3, r2
   da6ea:	460a      	mov	r2, r1
   da6ec:	4601      	mov	r1, r0
   da6ee:	4802      	ldr	r0, [pc, #8]	; (da6f8 <strtol+0x10>)
   da6f0:	6800      	ldr	r0, [r0, #0]
   da6f2:	f7ff bf7f 	b.w	da5f4 <_strtol_l.isra.0>
   da6f6:	bf00      	nop
   da6f8:	2003d8f0 	.word	0x2003d8f0

000da6fc <rshift>:
   da6fc:	6903      	ldr	r3, [r0, #16]
   da6fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da702:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da706:	ea4f 1261 	mov.w	r2, r1, asr #5
   da70a:	f100 0414 	add.w	r4, r0, #20
   da70e:	dd45      	ble.n	da79c <rshift+0xa0>
   da710:	f011 011f 	ands.w	r1, r1, #31
   da714:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da718:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da71c:	d10c      	bne.n	da738 <rshift+0x3c>
   da71e:	f100 0710 	add.w	r7, r0, #16
   da722:	4629      	mov	r1, r5
   da724:	42b1      	cmp	r1, r6
   da726:	d334      	bcc.n	da792 <rshift+0x96>
   da728:	1a9b      	subs	r3, r3, r2
   da72a:	009b      	lsls	r3, r3, #2
   da72c:	1eea      	subs	r2, r5, #3
   da72e:	4296      	cmp	r6, r2
   da730:	bf38      	it	cc
   da732:	2300      	movcc	r3, #0
   da734:	4423      	add	r3, r4
   da736:	e015      	b.n	da764 <rshift+0x68>
   da738:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da73c:	f1c1 0820 	rsb	r8, r1, #32
   da740:	40cf      	lsrs	r7, r1
   da742:	f105 0e04 	add.w	lr, r5, #4
   da746:	46a1      	mov	r9, r4
   da748:	4576      	cmp	r6, lr
   da74a:	46f4      	mov	ip, lr
   da74c:	d815      	bhi.n	da77a <rshift+0x7e>
   da74e:	1a9b      	subs	r3, r3, r2
   da750:	009a      	lsls	r2, r3, #2
   da752:	3a04      	subs	r2, #4
   da754:	3501      	adds	r5, #1
   da756:	42ae      	cmp	r6, r5
   da758:	bf38      	it	cc
   da75a:	2200      	movcc	r2, #0
   da75c:	18a3      	adds	r3, r4, r2
   da75e:	50a7      	str	r7, [r4, r2]
   da760:	b107      	cbz	r7, da764 <rshift+0x68>
   da762:	3304      	adds	r3, #4
   da764:	1b1a      	subs	r2, r3, r4
   da766:	42a3      	cmp	r3, r4
   da768:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da76c:	bf08      	it	eq
   da76e:	2300      	moveq	r3, #0
   da770:	6102      	str	r2, [r0, #16]
   da772:	bf08      	it	eq
   da774:	6143      	streq	r3, [r0, #20]
   da776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da77a:	f8dc c000 	ldr.w	ip, [ip]
   da77e:	fa0c fc08 	lsl.w	ip, ip, r8
   da782:	ea4c 0707 	orr.w	r7, ip, r7
   da786:	f849 7b04 	str.w	r7, [r9], #4
   da78a:	f85e 7b04 	ldr.w	r7, [lr], #4
   da78e:	40cf      	lsrs	r7, r1
   da790:	e7da      	b.n	da748 <rshift+0x4c>
   da792:	f851 cb04 	ldr.w	ip, [r1], #4
   da796:	f847 cf04 	str.w	ip, [r7, #4]!
   da79a:	e7c3      	b.n	da724 <rshift+0x28>
   da79c:	4623      	mov	r3, r4
   da79e:	e7e1      	b.n	da764 <rshift+0x68>

000da7a0 <__hexdig_fun>:
   da7a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da7a4:	2b09      	cmp	r3, #9
   da7a6:	d802      	bhi.n	da7ae <__hexdig_fun+0xe>
   da7a8:	3820      	subs	r0, #32
   da7aa:	b2c0      	uxtb	r0, r0
   da7ac:	4770      	bx	lr
   da7ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da7b2:	2b05      	cmp	r3, #5
   da7b4:	d801      	bhi.n	da7ba <__hexdig_fun+0x1a>
   da7b6:	3847      	subs	r0, #71	; 0x47
   da7b8:	e7f7      	b.n	da7aa <__hexdig_fun+0xa>
   da7ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da7be:	2b05      	cmp	r3, #5
   da7c0:	d801      	bhi.n	da7c6 <__hexdig_fun+0x26>
   da7c2:	3827      	subs	r0, #39	; 0x27
   da7c4:	e7f1      	b.n	da7aa <__hexdig_fun+0xa>
   da7c6:	2000      	movs	r0, #0
   da7c8:	4770      	bx	lr
	...

000da7cc <__gethex>:
   da7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7d0:	ed2d 8b02 	vpush	{d8}
   da7d4:	b089      	sub	sp, #36	; 0x24
   da7d6:	ee08 0a10 	vmov	s16, r0
   da7da:	9304      	str	r3, [sp, #16]
   da7dc:	4bbc      	ldr	r3, [pc, #752]	; (daad0 <__gethex+0x304>)
   da7de:	681b      	ldr	r3, [r3, #0]
   da7e0:	9301      	str	r3, [sp, #4]
   da7e2:	4618      	mov	r0, r3
   da7e4:	468b      	mov	fp, r1
   da7e6:	4690      	mov	r8, r2
   da7e8:	f7ff f8a3 	bl	d9932 <strlen>
   da7ec:	9b01      	ldr	r3, [sp, #4]
   da7ee:	f8db 2000 	ldr.w	r2, [fp]
   da7f2:	4403      	add	r3, r0
   da7f4:	4682      	mov	sl, r0
   da7f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da7fa:	9305      	str	r3, [sp, #20]
   da7fc:	1c93      	adds	r3, r2, #2
   da7fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da802:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da806:	32fe      	adds	r2, #254	; 0xfe
   da808:	18d1      	adds	r1, r2, r3
   da80a:	461f      	mov	r7, r3
   da80c:	f813 0b01 	ldrb.w	r0, [r3], #1
   da810:	9100      	str	r1, [sp, #0]
   da812:	2830      	cmp	r0, #48	; 0x30
   da814:	d0f8      	beq.n	da808 <__gethex+0x3c>
   da816:	f7ff ffc3 	bl	da7a0 <__hexdig_fun>
   da81a:	4604      	mov	r4, r0
   da81c:	2800      	cmp	r0, #0
   da81e:	d13a      	bne.n	da896 <__gethex+0xca>
   da820:	9901      	ldr	r1, [sp, #4]
   da822:	4652      	mov	r2, sl
   da824:	4638      	mov	r0, r7
   da826:	f7ff f88c 	bl	d9942 <strncmp>
   da82a:	4605      	mov	r5, r0
   da82c:	2800      	cmp	r0, #0
   da82e:	d168      	bne.n	da902 <__gethex+0x136>
   da830:	f817 000a 	ldrb.w	r0, [r7, sl]
   da834:	eb07 060a 	add.w	r6, r7, sl
   da838:	f7ff ffb2 	bl	da7a0 <__hexdig_fun>
   da83c:	2800      	cmp	r0, #0
   da83e:	d062      	beq.n	da906 <__gethex+0x13a>
   da840:	4633      	mov	r3, r6
   da842:	7818      	ldrb	r0, [r3, #0]
   da844:	2830      	cmp	r0, #48	; 0x30
   da846:	461f      	mov	r7, r3
   da848:	f103 0301 	add.w	r3, r3, #1
   da84c:	d0f9      	beq.n	da842 <__gethex+0x76>
   da84e:	f7ff ffa7 	bl	da7a0 <__hexdig_fun>
   da852:	2301      	movs	r3, #1
   da854:	fab0 f480 	clz	r4, r0
   da858:	0964      	lsrs	r4, r4, #5
   da85a:	4635      	mov	r5, r6
   da85c:	9300      	str	r3, [sp, #0]
   da85e:	463a      	mov	r2, r7
   da860:	4616      	mov	r6, r2
   da862:	3201      	adds	r2, #1
   da864:	7830      	ldrb	r0, [r6, #0]
   da866:	f7ff ff9b 	bl	da7a0 <__hexdig_fun>
   da86a:	2800      	cmp	r0, #0
   da86c:	d1f8      	bne.n	da860 <__gethex+0x94>
   da86e:	9901      	ldr	r1, [sp, #4]
   da870:	4652      	mov	r2, sl
   da872:	4630      	mov	r0, r6
   da874:	f7ff f865 	bl	d9942 <strncmp>
   da878:	b980      	cbnz	r0, da89c <__gethex+0xd0>
   da87a:	b94d      	cbnz	r5, da890 <__gethex+0xc4>
   da87c:	eb06 050a 	add.w	r5, r6, sl
   da880:	462a      	mov	r2, r5
   da882:	4616      	mov	r6, r2
   da884:	3201      	adds	r2, #1
   da886:	7830      	ldrb	r0, [r6, #0]
   da888:	f7ff ff8a 	bl	da7a0 <__hexdig_fun>
   da88c:	2800      	cmp	r0, #0
   da88e:	d1f8      	bne.n	da882 <__gethex+0xb6>
   da890:	1bad      	subs	r5, r5, r6
   da892:	00ad      	lsls	r5, r5, #2
   da894:	e004      	b.n	da8a0 <__gethex+0xd4>
   da896:	2400      	movs	r4, #0
   da898:	4625      	mov	r5, r4
   da89a:	e7e0      	b.n	da85e <__gethex+0x92>
   da89c:	2d00      	cmp	r5, #0
   da89e:	d1f7      	bne.n	da890 <__gethex+0xc4>
   da8a0:	7833      	ldrb	r3, [r6, #0]
   da8a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da8a6:	2b50      	cmp	r3, #80	; 0x50
   da8a8:	d13b      	bne.n	da922 <__gethex+0x156>
   da8aa:	7873      	ldrb	r3, [r6, #1]
   da8ac:	2b2b      	cmp	r3, #43	; 0x2b
   da8ae:	d02c      	beq.n	da90a <__gethex+0x13e>
   da8b0:	2b2d      	cmp	r3, #45	; 0x2d
   da8b2:	d02e      	beq.n	da912 <__gethex+0x146>
   da8b4:	1c71      	adds	r1, r6, #1
   da8b6:	f04f 0900 	mov.w	r9, #0
   da8ba:	7808      	ldrb	r0, [r1, #0]
   da8bc:	f7ff ff70 	bl	da7a0 <__hexdig_fun>
   da8c0:	1e43      	subs	r3, r0, #1
   da8c2:	b2db      	uxtb	r3, r3
   da8c4:	2b18      	cmp	r3, #24
   da8c6:	d82c      	bhi.n	da922 <__gethex+0x156>
   da8c8:	f1a0 0210 	sub.w	r2, r0, #16
   da8cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da8d0:	f7ff ff66 	bl	da7a0 <__hexdig_fun>
   da8d4:	1e43      	subs	r3, r0, #1
   da8d6:	b2db      	uxtb	r3, r3
   da8d8:	2b18      	cmp	r3, #24
   da8da:	d91d      	bls.n	da918 <__gethex+0x14c>
   da8dc:	f1b9 0f00 	cmp.w	r9, #0
   da8e0:	d000      	beq.n	da8e4 <__gethex+0x118>
   da8e2:	4252      	negs	r2, r2
   da8e4:	4415      	add	r5, r2
   da8e6:	f8cb 1000 	str.w	r1, [fp]
   da8ea:	b1e4      	cbz	r4, da926 <__gethex+0x15a>
   da8ec:	9b00      	ldr	r3, [sp, #0]
   da8ee:	2b00      	cmp	r3, #0
   da8f0:	bf14      	ite	ne
   da8f2:	2700      	movne	r7, #0
   da8f4:	2706      	moveq	r7, #6
   da8f6:	4638      	mov	r0, r7
   da8f8:	b009      	add	sp, #36	; 0x24
   da8fa:	ecbd 8b02 	vpop	{d8}
   da8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da902:	463e      	mov	r6, r7
   da904:	4625      	mov	r5, r4
   da906:	2401      	movs	r4, #1
   da908:	e7ca      	b.n	da8a0 <__gethex+0xd4>
   da90a:	f04f 0900 	mov.w	r9, #0
   da90e:	1cb1      	adds	r1, r6, #2
   da910:	e7d3      	b.n	da8ba <__gethex+0xee>
   da912:	f04f 0901 	mov.w	r9, #1
   da916:	e7fa      	b.n	da90e <__gethex+0x142>
   da918:	230a      	movs	r3, #10
   da91a:	fb03 0202 	mla	r2, r3, r2, r0
   da91e:	3a10      	subs	r2, #16
   da920:	e7d4      	b.n	da8cc <__gethex+0x100>
   da922:	4631      	mov	r1, r6
   da924:	e7df      	b.n	da8e6 <__gethex+0x11a>
   da926:	1bf3      	subs	r3, r6, r7
   da928:	3b01      	subs	r3, #1
   da92a:	4621      	mov	r1, r4
   da92c:	2b07      	cmp	r3, #7
   da92e:	dc52      	bgt.n	da9d6 <__gethex+0x20a>
   da930:	ee18 0a10 	vmov	r0, s16
   da934:	f000 fa52 	bl	daddc <_Balloc>
   da938:	f04f 0b00 	mov.w	fp, #0
   da93c:	f100 0914 	add.w	r9, r0, #20
   da940:	f1ca 0301 	rsb	r3, sl, #1
   da944:	4604      	mov	r4, r0
   da946:	f8cd 9008 	str.w	r9, [sp, #8]
   da94a:	f8cd b000 	str.w	fp, [sp]
   da94e:	9306      	str	r3, [sp, #24]
   da950:	42b7      	cmp	r7, r6
   da952:	d343      	bcc.n	da9dc <__gethex+0x210>
   da954:	9802      	ldr	r0, [sp, #8]
   da956:	9b00      	ldr	r3, [sp, #0]
   da958:	f840 3b04 	str.w	r3, [r0], #4
   da95c:	eba0 0009 	sub.w	r0, r0, r9
   da960:	1080      	asrs	r0, r0, #2
   da962:	0146      	lsls	r6, r0, #5
   da964:	6120      	str	r0, [r4, #16]
   da966:	4618      	mov	r0, r3
   da968:	f000 faff 	bl	daf6a <__hi0bits>
   da96c:	1a30      	subs	r0, r6, r0
   da96e:	f8d8 6000 	ldr.w	r6, [r8]
   da972:	42b0      	cmp	r0, r6
   da974:	dd66      	ble.n	daa44 <__gethex+0x278>
   da976:	1b87      	subs	r7, r0, r6
   da978:	4639      	mov	r1, r7
   da97a:	4620      	mov	r0, r4
   da97c:	f000 fe4c 	bl	db618 <__any_on>
   da980:	4682      	mov	sl, r0
   da982:	b1a8      	cbz	r0, da9b0 <__gethex+0x1e4>
   da984:	1e7b      	subs	r3, r7, #1
   da986:	1159      	asrs	r1, r3, #5
   da988:	f003 021f 	and.w	r2, r3, #31
   da98c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da990:	f04f 0a01 	mov.w	sl, #1
   da994:	fa0a f202 	lsl.w	r2, sl, r2
   da998:	420a      	tst	r2, r1
   da99a:	d009      	beq.n	da9b0 <__gethex+0x1e4>
   da99c:	4553      	cmp	r3, sl
   da99e:	dd05      	ble.n	da9ac <__gethex+0x1e0>
   da9a0:	1eb9      	subs	r1, r7, #2
   da9a2:	4620      	mov	r0, r4
   da9a4:	f000 fe38 	bl	db618 <__any_on>
   da9a8:	2800      	cmp	r0, #0
   da9aa:	d148      	bne.n	daa3e <__gethex+0x272>
   da9ac:	f04f 0a02 	mov.w	sl, #2
   da9b0:	4639      	mov	r1, r7
   da9b2:	4620      	mov	r0, r4
   da9b4:	f7ff fea2 	bl	da6fc <rshift>
   da9b8:	443d      	add	r5, r7
   da9ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da9be:	42ab      	cmp	r3, r5
   da9c0:	da4f      	bge.n	daa62 <__gethex+0x296>
   da9c2:	ee18 0a10 	vmov	r0, s16
   da9c6:	4621      	mov	r1, r4
   da9c8:	f000 fa3c 	bl	dae44 <_Bfree>
   da9cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da9ce:	2300      	movs	r3, #0
   da9d0:	6013      	str	r3, [r2, #0]
   da9d2:	27a3      	movs	r7, #163	; 0xa3
   da9d4:	e78f      	b.n	da8f6 <__gethex+0x12a>
   da9d6:	3101      	adds	r1, #1
   da9d8:	105b      	asrs	r3, r3, #1
   da9da:	e7a7      	b.n	da92c <__gethex+0x160>
   da9dc:	1e73      	subs	r3, r6, #1
   da9de:	9a05      	ldr	r2, [sp, #20]
   da9e0:	9303      	str	r3, [sp, #12]
   da9e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da9e6:	4293      	cmp	r3, r2
   da9e8:	d019      	beq.n	daa1e <__gethex+0x252>
   da9ea:	f1bb 0f20 	cmp.w	fp, #32
   da9ee:	d107      	bne.n	daa00 <__gethex+0x234>
   da9f0:	9b02      	ldr	r3, [sp, #8]
   da9f2:	9a00      	ldr	r2, [sp, #0]
   da9f4:	f843 2b04 	str.w	r2, [r3], #4
   da9f8:	9302      	str	r3, [sp, #8]
   da9fa:	2300      	movs	r3, #0
   da9fc:	9300      	str	r3, [sp, #0]
   da9fe:	469b      	mov	fp, r3
   daa00:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   daa04:	f7ff fecc 	bl	da7a0 <__hexdig_fun>
   daa08:	9b00      	ldr	r3, [sp, #0]
   daa0a:	f000 000f 	and.w	r0, r0, #15
   daa0e:	fa00 f00b 	lsl.w	r0, r0, fp
   daa12:	4303      	orrs	r3, r0
   daa14:	9300      	str	r3, [sp, #0]
   daa16:	f10b 0b04 	add.w	fp, fp, #4
   daa1a:	9b03      	ldr	r3, [sp, #12]
   daa1c:	e00d      	b.n	daa3a <__gethex+0x26e>
   daa1e:	9b03      	ldr	r3, [sp, #12]
   daa20:	9a06      	ldr	r2, [sp, #24]
   daa22:	4413      	add	r3, r2
   daa24:	42bb      	cmp	r3, r7
   daa26:	d3e0      	bcc.n	da9ea <__gethex+0x21e>
   daa28:	4618      	mov	r0, r3
   daa2a:	9901      	ldr	r1, [sp, #4]
   daa2c:	9307      	str	r3, [sp, #28]
   daa2e:	4652      	mov	r2, sl
   daa30:	f7fe ff87 	bl	d9942 <strncmp>
   daa34:	9b07      	ldr	r3, [sp, #28]
   daa36:	2800      	cmp	r0, #0
   daa38:	d1d7      	bne.n	da9ea <__gethex+0x21e>
   daa3a:	461e      	mov	r6, r3
   daa3c:	e788      	b.n	da950 <__gethex+0x184>
   daa3e:	f04f 0a03 	mov.w	sl, #3
   daa42:	e7b5      	b.n	da9b0 <__gethex+0x1e4>
   daa44:	da0a      	bge.n	daa5c <__gethex+0x290>
   daa46:	1a37      	subs	r7, r6, r0
   daa48:	4621      	mov	r1, r4
   daa4a:	ee18 0a10 	vmov	r0, s16
   daa4e:	463a      	mov	r2, r7
   daa50:	f000 fbce 	bl	db1f0 <__lshift>
   daa54:	1bed      	subs	r5, r5, r7
   daa56:	4604      	mov	r4, r0
   daa58:	f100 0914 	add.w	r9, r0, #20
   daa5c:	f04f 0a00 	mov.w	sl, #0
   daa60:	e7ab      	b.n	da9ba <__gethex+0x1ee>
   daa62:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daa66:	42a8      	cmp	r0, r5
   daa68:	dd6d      	ble.n	dab46 <__gethex+0x37a>
   daa6a:	1b45      	subs	r5, r0, r5
   daa6c:	42ae      	cmp	r6, r5
   daa6e:	dc31      	bgt.n	daad4 <__gethex+0x308>
   daa70:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daa74:	2b02      	cmp	r3, #2
   daa76:	d023      	beq.n	daac0 <__gethex+0x2f4>
   daa78:	2b03      	cmp	r3, #3
   daa7a:	d025      	beq.n	daac8 <__gethex+0x2fc>
   daa7c:	2b01      	cmp	r3, #1
   daa7e:	d115      	bne.n	daaac <__gethex+0x2e0>
   daa80:	42ae      	cmp	r6, r5
   daa82:	d113      	bne.n	daaac <__gethex+0x2e0>
   daa84:	2e01      	cmp	r6, #1
   daa86:	d10b      	bne.n	daaa0 <__gethex+0x2d4>
   daa88:	9a04      	ldr	r2, [sp, #16]
   daa8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daa8e:	6013      	str	r3, [r2, #0]
   daa90:	2301      	movs	r3, #1
   daa92:	6123      	str	r3, [r4, #16]
   daa94:	f8c9 3000 	str.w	r3, [r9]
   daa98:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daa9a:	2762      	movs	r7, #98	; 0x62
   daa9c:	601c      	str	r4, [r3, #0]
   daa9e:	e72a      	b.n	da8f6 <__gethex+0x12a>
   daaa0:	1e71      	subs	r1, r6, #1
   daaa2:	4620      	mov	r0, r4
   daaa4:	f000 fdb8 	bl	db618 <__any_on>
   daaa8:	2800      	cmp	r0, #0
   daaaa:	d1ed      	bne.n	daa88 <__gethex+0x2bc>
   daaac:	ee18 0a10 	vmov	r0, s16
   daab0:	4621      	mov	r1, r4
   daab2:	f000 f9c7 	bl	dae44 <_Bfree>
   daab6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daab8:	2300      	movs	r3, #0
   daaba:	6013      	str	r3, [r2, #0]
   daabc:	2750      	movs	r7, #80	; 0x50
   daabe:	e71a      	b.n	da8f6 <__gethex+0x12a>
   daac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daac2:	2b00      	cmp	r3, #0
   daac4:	d1f2      	bne.n	daaac <__gethex+0x2e0>
   daac6:	e7df      	b.n	daa88 <__gethex+0x2bc>
   daac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daaca:	2b00      	cmp	r3, #0
   daacc:	d1dc      	bne.n	daa88 <__gethex+0x2bc>
   daace:	e7ed      	b.n	daaac <__gethex+0x2e0>
   daad0:	000dc5fc 	.word	0x000dc5fc
   daad4:	1e6f      	subs	r7, r5, #1
   daad6:	f1ba 0f00 	cmp.w	sl, #0
   daada:	d131      	bne.n	dab40 <__gethex+0x374>
   daadc:	b127      	cbz	r7, daae8 <__gethex+0x31c>
   daade:	4639      	mov	r1, r7
   daae0:	4620      	mov	r0, r4
   daae2:	f000 fd99 	bl	db618 <__any_on>
   daae6:	4682      	mov	sl, r0
   daae8:	117b      	asrs	r3, r7, #5
   daaea:	2101      	movs	r1, #1
   daaec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   daaf0:	f007 071f 	and.w	r7, r7, #31
   daaf4:	fa01 f707 	lsl.w	r7, r1, r7
   daaf8:	421f      	tst	r7, r3
   daafa:	4629      	mov	r1, r5
   daafc:	4620      	mov	r0, r4
   daafe:	bf18      	it	ne
   dab00:	f04a 0a02 	orrne.w	sl, sl, #2
   dab04:	1b76      	subs	r6, r6, r5
   dab06:	f7ff fdf9 	bl	da6fc <rshift>
   dab0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dab0e:	2702      	movs	r7, #2
   dab10:	f1ba 0f00 	cmp.w	sl, #0
   dab14:	d048      	beq.n	daba8 <__gethex+0x3dc>
   dab16:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dab1a:	2b02      	cmp	r3, #2
   dab1c:	d015      	beq.n	dab4a <__gethex+0x37e>
   dab1e:	2b03      	cmp	r3, #3
   dab20:	d017      	beq.n	dab52 <__gethex+0x386>
   dab22:	2b01      	cmp	r3, #1
   dab24:	d109      	bne.n	dab3a <__gethex+0x36e>
   dab26:	f01a 0f02 	tst.w	sl, #2
   dab2a:	d006      	beq.n	dab3a <__gethex+0x36e>
   dab2c:	f8d9 0000 	ldr.w	r0, [r9]
   dab30:	ea4a 0a00 	orr.w	sl, sl, r0
   dab34:	f01a 0f01 	tst.w	sl, #1
   dab38:	d10e      	bne.n	dab58 <__gethex+0x38c>
   dab3a:	f047 0710 	orr.w	r7, r7, #16
   dab3e:	e033      	b.n	daba8 <__gethex+0x3dc>
   dab40:	f04f 0a01 	mov.w	sl, #1
   dab44:	e7d0      	b.n	daae8 <__gethex+0x31c>
   dab46:	2701      	movs	r7, #1
   dab48:	e7e2      	b.n	dab10 <__gethex+0x344>
   dab4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab4c:	f1c3 0301 	rsb	r3, r3, #1
   dab50:	9315      	str	r3, [sp, #84]	; 0x54
   dab52:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab54:	2b00      	cmp	r3, #0
   dab56:	d0f0      	beq.n	dab3a <__gethex+0x36e>
   dab58:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dab5c:	f104 0314 	add.w	r3, r4, #20
   dab60:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dab64:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dab68:	f04f 0c00 	mov.w	ip, #0
   dab6c:	4618      	mov	r0, r3
   dab6e:	f853 2b04 	ldr.w	r2, [r3], #4
   dab72:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dab76:	d01c      	beq.n	dabb2 <__gethex+0x3e6>
   dab78:	3201      	adds	r2, #1
   dab7a:	6002      	str	r2, [r0, #0]
   dab7c:	2f02      	cmp	r7, #2
   dab7e:	f104 0314 	add.w	r3, r4, #20
   dab82:	d13a      	bne.n	dabfa <__gethex+0x42e>
   dab84:	f8d8 2000 	ldr.w	r2, [r8]
   dab88:	3a01      	subs	r2, #1
   dab8a:	42b2      	cmp	r2, r6
   dab8c:	d10a      	bne.n	daba4 <__gethex+0x3d8>
   dab8e:	1171      	asrs	r1, r6, #5
   dab90:	2201      	movs	r2, #1
   dab92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dab96:	f006 061f 	and.w	r6, r6, #31
   dab9a:	fa02 f606 	lsl.w	r6, r2, r6
   dab9e:	421e      	tst	r6, r3
   daba0:	bf18      	it	ne
   daba2:	4617      	movne	r7, r2
   daba4:	f047 0720 	orr.w	r7, r7, #32
   daba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dabaa:	601c      	str	r4, [r3, #0]
   dabac:	9b04      	ldr	r3, [sp, #16]
   dabae:	601d      	str	r5, [r3, #0]
   dabb0:	e6a1      	b.n	da8f6 <__gethex+0x12a>
   dabb2:	4299      	cmp	r1, r3
   dabb4:	f843 cc04 	str.w	ip, [r3, #-4]
   dabb8:	d8d8      	bhi.n	dab6c <__gethex+0x3a0>
   dabba:	68a3      	ldr	r3, [r4, #8]
   dabbc:	4599      	cmp	r9, r3
   dabbe:	db14      	blt.n	dabea <__gethex+0x41e>
   dabc0:	6861      	ldr	r1, [r4, #4]
   dabc2:	ee18 0a10 	vmov	r0, s16
   dabc6:	3101      	adds	r1, #1
   dabc8:	f000 f908 	bl	daddc <_Balloc>
   dabcc:	6922      	ldr	r2, [r4, #16]
   dabce:	3202      	adds	r2, #2
   dabd0:	f104 010c 	add.w	r1, r4, #12
   dabd4:	4682      	mov	sl, r0
   dabd6:	0092      	lsls	r2, r2, #2
   dabd8:	300c      	adds	r0, #12
   dabda:	f7fe fe27 	bl	d982c <memcpy>
   dabde:	4621      	mov	r1, r4
   dabe0:	ee18 0a10 	vmov	r0, s16
   dabe4:	f000 f92e 	bl	dae44 <_Bfree>
   dabe8:	4654      	mov	r4, sl
   dabea:	6923      	ldr	r3, [r4, #16]
   dabec:	1c5a      	adds	r2, r3, #1
   dabee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dabf2:	6122      	str	r2, [r4, #16]
   dabf4:	2201      	movs	r2, #1
   dabf6:	615a      	str	r2, [r3, #20]
   dabf8:	e7c0      	b.n	dab7c <__gethex+0x3b0>
   dabfa:	6922      	ldr	r2, [r4, #16]
   dabfc:	454a      	cmp	r2, r9
   dabfe:	dd0b      	ble.n	dac18 <__gethex+0x44c>
   dac00:	2101      	movs	r1, #1
   dac02:	4620      	mov	r0, r4
   dac04:	f7ff fd7a 	bl	da6fc <rshift>
   dac08:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dac0c:	3501      	adds	r5, #1
   dac0e:	42ab      	cmp	r3, r5
   dac10:	f6ff aed7 	blt.w	da9c2 <__gethex+0x1f6>
   dac14:	2701      	movs	r7, #1
   dac16:	e7c5      	b.n	daba4 <__gethex+0x3d8>
   dac18:	f016 061f 	ands.w	r6, r6, #31
   dac1c:	d0fa      	beq.n	dac14 <__gethex+0x448>
   dac1e:	449b      	add	fp, r3
   dac20:	f1c6 0620 	rsb	r6, r6, #32
   dac24:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dac28:	f000 f99f 	bl	daf6a <__hi0bits>
   dac2c:	42b0      	cmp	r0, r6
   dac2e:	dbe7      	blt.n	dac00 <__gethex+0x434>
   dac30:	e7f0      	b.n	dac14 <__gethex+0x448>
   dac32:	bf00      	nop

000dac34 <L_shift>:
   dac34:	f1c2 0208 	rsb	r2, r2, #8
   dac38:	0092      	lsls	r2, r2, #2
   dac3a:	b570      	push	{r4, r5, r6, lr}
   dac3c:	f1c2 0620 	rsb	r6, r2, #32
   dac40:	6843      	ldr	r3, [r0, #4]
   dac42:	6804      	ldr	r4, [r0, #0]
   dac44:	fa03 f506 	lsl.w	r5, r3, r6
   dac48:	432c      	orrs	r4, r5
   dac4a:	40d3      	lsrs	r3, r2
   dac4c:	6004      	str	r4, [r0, #0]
   dac4e:	f840 3f04 	str.w	r3, [r0, #4]!
   dac52:	4288      	cmp	r0, r1
   dac54:	d3f4      	bcc.n	dac40 <L_shift+0xc>
   dac56:	bd70      	pop	{r4, r5, r6, pc}

000dac58 <__match>:
   dac58:	b530      	push	{r4, r5, lr}
   dac5a:	6803      	ldr	r3, [r0, #0]
   dac5c:	3301      	adds	r3, #1
   dac5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dac62:	b914      	cbnz	r4, dac6a <__match+0x12>
   dac64:	6003      	str	r3, [r0, #0]
   dac66:	2001      	movs	r0, #1
   dac68:	bd30      	pop	{r4, r5, pc}
   dac6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dac72:	2d19      	cmp	r5, #25
   dac74:	bf98      	it	ls
   dac76:	3220      	addls	r2, #32
   dac78:	42a2      	cmp	r2, r4
   dac7a:	d0f0      	beq.n	dac5e <__match+0x6>
   dac7c:	2000      	movs	r0, #0
   dac7e:	e7f3      	b.n	dac68 <__match+0x10>

000dac80 <__hexnan>:
   dac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac84:	680b      	ldr	r3, [r1, #0]
   dac86:	6801      	ldr	r1, [r0, #0]
   dac88:	115e      	asrs	r6, r3, #5
   dac8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dac8e:	f013 031f 	ands.w	r3, r3, #31
   dac92:	b087      	sub	sp, #28
   dac94:	bf18      	it	ne
   dac96:	3604      	addne	r6, #4
   dac98:	2500      	movs	r5, #0
   dac9a:	1f37      	subs	r7, r6, #4
   dac9c:	4682      	mov	sl, r0
   dac9e:	4690      	mov	r8, r2
   daca0:	9301      	str	r3, [sp, #4]
   daca2:	f846 5c04 	str.w	r5, [r6, #-4]
   daca6:	46b9      	mov	r9, r7
   daca8:	463c      	mov	r4, r7
   dacaa:	9502      	str	r5, [sp, #8]
   dacac:	46ab      	mov	fp, r5
   dacae:	784a      	ldrb	r2, [r1, #1]
   dacb0:	1c4b      	adds	r3, r1, #1
   dacb2:	9303      	str	r3, [sp, #12]
   dacb4:	b342      	cbz	r2, dad08 <__hexnan+0x88>
   dacb6:	4610      	mov	r0, r2
   dacb8:	9105      	str	r1, [sp, #20]
   dacba:	9204      	str	r2, [sp, #16]
   dacbc:	f7ff fd70 	bl	da7a0 <__hexdig_fun>
   dacc0:	2800      	cmp	r0, #0
   dacc2:	d14f      	bne.n	dad64 <__hexnan+0xe4>
   dacc4:	9a04      	ldr	r2, [sp, #16]
   dacc6:	9905      	ldr	r1, [sp, #20]
   dacc8:	2a20      	cmp	r2, #32
   dacca:	d818      	bhi.n	dacfe <__hexnan+0x7e>
   daccc:	9b02      	ldr	r3, [sp, #8]
   dacce:	459b      	cmp	fp, r3
   dacd0:	dd13      	ble.n	dacfa <__hexnan+0x7a>
   dacd2:	454c      	cmp	r4, r9
   dacd4:	d206      	bcs.n	dace4 <__hexnan+0x64>
   dacd6:	2d07      	cmp	r5, #7
   dacd8:	dc04      	bgt.n	dace4 <__hexnan+0x64>
   dacda:	462a      	mov	r2, r5
   dacdc:	4649      	mov	r1, r9
   dacde:	4620      	mov	r0, r4
   dace0:	f7ff ffa8 	bl	dac34 <L_shift>
   dace4:	4544      	cmp	r4, r8
   dace6:	d950      	bls.n	dad8a <__hexnan+0x10a>
   dace8:	2300      	movs	r3, #0
   dacea:	f1a4 0904 	sub.w	r9, r4, #4
   dacee:	f844 3c04 	str.w	r3, [r4, #-4]
   dacf2:	f8cd b008 	str.w	fp, [sp, #8]
   dacf6:	464c      	mov	r4, r9
   dacf8:	461d      	mov	r5, r3
   dacfa:	9903      	ldr	r1, [sp, #12]
   dacfc:	e7d7      	b.n	dacae <__hexnan+0x2e>
   dacfe:	2a29      	cmp	r2, #41	; 0x29
   dad00:	d156      	bne.n	dadb0 <__hexnan+0x130>
   dad02:	3102      	adds	r1, #2
   dad04:	f8ca 1000 	str.w	r1, [sl]
   dad08:	f1bb 0f00 	cmp.w	fp, #0
   dad0c:	d050      	beq.n	dadb0 <__hexnan+0x130>
   dad0e:	454c      	cmp	r4, r9
   dad10:	d206      	bcs.n	dad20 <__hexnan+0xa0>
   dad12:	2d07      	cmp	r5, #7
   dad14:	dc04      	bgt.n	dad20 <__hexnan+0xa0>
   dad16:	462a      	mov	r2, r5
   dad18:	4649      	mov	r1, r9
   dad1a:	4620      	mov	r0, r4
   dad1c:	f7ff ff8a 	bl	dac34 <L_shift>
   dad20:	4544      	cmp	r4, r8
   dad22:	d934      	bls.n	dad8e <__hexnan+0x10e>
   dad24:	f1a8 0204 	sub.w	r2, r8, #4
   dad28:	4623      	mov	r3, r4
   dad2a:	f853 1b04 	ldr.w	r1, [r3], #4
   dad2e:	f842 1f04 	str.w	r1, [r2, #4]!
   dad32:	429f      	cmp	r7, r3
   dad34:	d2f9      	bcs.n	dad2a <__hexnan+0xaa>
   dad36:	1b3b      	subs	r3, r7, r4
   dad38:	f023 0303 	bic.w	r3, r3, #3
   dad3c:	3304      	adds	r3, #4
   dad3e:	3401      	adds	r4, #1
   dad40:	3e03      	subs	r6, #3
   dad42:	42b4      	cmp	r4, r6
   dad44:	bf88      	it	hi
   dad46:	2304      	movhi	r3, #4
   dad48:	4443      	add	r3, r8
   dad4a:	2200      	movs	r2, #0
   dad4c:	f843 2b04 	str.w	r2, [r3], #4
   dad50:	429f      	cmp	r7, r3
   dad52:	d2fb      	bcs.n	dad4c <__hexnan+0xcc>
   dad54:	683b      	ldr	r3, [r7, #0]
   dad56:	b91b      	cbnz	r3, dad60 <__hexnan+0xe0>
   dad58:	4547      	cmp	r7, r8
   dad5a:	d127      	bne.n	dadac <__hexnan+0x12c>
   dad5c:	2301      	movs	r3, #1
   dad5e:	603b      	str	r3, [r7, #0]
   dad60:	2005      	movs	r0, #5
   dad62:	e026      	b.n	dadb2 <__hexnan+0x132>
   dad64:	3501      	adds	r5, #1
   dad66:	2d08      	cmp	r5, #8
   dad68:	f10b 0b01 	add.w	fp, fp, #1
   dad6c:	dd06      	ble.n	dad7c <__hexnan+0xfc>
   dad6e:	4544      	cmp	r4, r8
   dad70:	d9c3      	bls.n	dacfa <__hexnan+0x7a>
   dad72:	2300      	movs	r3, #0
   dad74:	f844 3c04 	str.w	r3, [r4, #-4]
   dad78:	2501      	movs	r5, #1
   dad7a:	3c04      	subs	r4, #4
   dad7c:	6822      	ldr	r2, [r4, #0]
   dad7e:	f000 000f 	and.w	r0, r0, #15
   dad82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dad86:	6022      	str	r2, [r4, #0]
   dad88:	e7b7      	b.n	dacfa <__hexnan+0x7a>
   dad8a:	2508      	movs	r5, #8
   dad8c:	e7b5      	b.n	dacfa <__hexnan+0x7a>
   dad8e:	9b01      	ldr	r3, [sp, #4]
   dad90:	2b00      	cmp	r3, #0
   dad92:	d0df      	beq.n	dad54 <__hexnan+0xd4>
   dad94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dad98:	f1c3 0320 	rsb	r3, r3, #32
   dad9c:	fa22 f303 	lsr.w	r3, r2, r3
   dada0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dada4:	401a      	ands	r2, r3
   dada6:	f846 2c04 	str.w	r2, [r6, #-4]
   dadaa:	e7d3      	b.n	dad54 <__hexnan+0xd4>
   dadac:	3f04      	subs	r7, #4
   dadae:	e7d1      	b.n	dad54 <__hexnan+0xd4>
   dadb0:	2004      	movs	r0, #4
   dadb2:	b007      	add	sp, #28
   dadb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dadb8 <__ascii_mbtowc>:
   dadb8:	b082      	sub	sp, #8
   dadba:	b901      	cbnz	r1, dadbe <__ascii_mbtowc+0x6>
   dadbc:	a901      	add	r1, sp, #4
   dadbe:	b142      	cbz	r2, dadd2 <__ascii_mbtowc+0x1a>
   dadc0:	b14b      	cbz	r3, dadd6 <__ascii_mbtowc+0x1e>
   dadc2:	7813      	ldrb	r3, [r2, #0]
   dadc4:	600b      	str	r3, [r1, #0]
   dadc6:	7812      	ldrb	r2, [r2, #0]
   dadc8:	1e10      	subs	r0, r2, #0
   dadca:	bf18      	it	ne
   dadcc:	2001      	movne	r0, #1
   dadce:	b002      	add	sp, #8
   dadd0:	4770      	bx	lr
   dadd2:	4610      	mov	r0, r2
   dadd4:	e7fb      	b.n	dadce <__ascii_mbtowc+0x16>
   dadd6:	f06f 0001 	mvn.w	r0, #1
   dadda:	e7f8      	b.n	dadce <__ascii_mbtowc+0x16>

000daddc <_Balloc>:
   daddc:	b570      	push	{r4, r5, r6, lr}
   dadde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dade0:	4604      	mov	r4, r0
   dade2:	460d      	mov	r5, r1
   dade4:	b93e      	cbnz	r6, dadf6 <_Balloc+0x1a>
   dade6:	2010      	movs	r0, #16
   dade8:	f7fc fb50 	bl	d748c <malloc>
   dadec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dadf0:	6260      	str	r0, [r4, #36]	; 0x24
   dadf2:	6006      	str	r6, [r0, #0]
   dadf4:	60c6      	str	r6, [r0, #12]
   dadf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dadf8:	68f3      	ldr	r3, [r6, #12]
   dadfa:	b183      	cbz	r3, dae1e <_Balloc+0x42>
   dadfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dadfe:	68db      	ldr	r3, [r3, #12]
   dae00:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dae04:	b9b8      	cbnz	r0, dae36 <_Balloc+0x5a>
   dae06:	2101      	movs	r1, #1
   dae08:	fa01 f605 	lsl.w	r6, r1, r5
   dae0c:	1d72      	adds	r2, r6, #5
   dae0e:	0092      	lsls	r2, r2, #2
   dae10:	4620      	mov	r0, r4
   dae12:	f000 fc22 	bl	db65a <_calloc_r>
   dae16:	b160      	cbz	r0, dae32 <_Balloc+0x56>
   dae18:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dae1c:	e00e      	b.n	dae3c <_Balloc+0x60>
   dae1e:	2221      	movs	r2, #33	; 0x21
   dae20:	2104      	movs	r1, #4
   dae22:	4620      	mov	r0, r4
   dae24:	f000 fc19 	bl	db65a <_calloc_r>
   dae28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dae2a:	60f0      	str	r0, [r6, #12]
   dae2c:	68db      	ldr	r3, [r3, #12]
   dae2e:	2b00      	cmp	r3, #0
   dae30:	d1e4      	bne.n	dadfc <_Balloc+0x20>
   dae32:	2000      	movs	r0, #0
   dae34:	bd70      	pop	{r4, r5, r6, pc}
   dae36:	6802      	ldr	r2, [r0, #0]
   dae38:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dae3c:	2300      	movs	r3, #0
   dae3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dae42:	e7f7      	b.n	dae34 <_Balloc+0x58>

000dae44 <_Bfree>:
   dae44:	b570      	push	{r4, r5, r6, lr}
   dae46:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dae48:	4605      	mov	r5, r0
   dae4a:	460c      	mov	r4, r1
   dae4c:	b93e      	cbnz	r6, dae5e <_Bfree+0x1a>
   dae4e:	2010      	movs	r0, #16
   dae50:	f7fc fb1c 	bl	d748c <malloc>
   dae54:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dae58:	6268      	str	r0, [r5, #36]	; 0x24
   dae5a:	6006      	str	r6, [r0, #0]
   dae5c:	60c6      	str	r6, [r0, #12]
   dae5e:	b13c      	cbz	r4, dae70 <_Bfree+0x2c>
   dae60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dae62:	6862      	ldr	r2, [r4, #4]
   dae64:	68db      	ldr	r3, [r3, #12]
   dae66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dae6a:	6021      	str	r1, [r4, #0]
   dae6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dae70:	bd70      	pop	{r4, r5, r6, pc}

000dae72 <__multadd>:
   dae72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dae76:	690e      	ldr	r6, [r1, #16]
   dae78:	4607      	mov	r7, r0
   dae7a:	4698      	mov	r8, r3
   dae7c:	460c      	mov	r4, r1
   dae7e:	f101 0014 	add.w	r0, r1, #20
   dae82:	2300      	movs	r3, #0
   dae84:	6805      	ldr	r5, [r0, #0]
   dae86:	b2a9      	uxth	r1, r5
   dae88:	fb02 8101 	mla	r1, r2, r1, r8
   dae8c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dae90:	0c2d      	lsrs	r5, r5, #16
   dae92:	fb02 c505 	mla	r5, r2, r5, ip
   dae96:	b289      	uxth	r1, r1
   dae98:	3301      	adds	r3, #1
   dae9a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dae9e:	429e      	cmp	r6, r3
   daea0:	f840 1b04 	str.w	r1, [r0], #4
   daea4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   daea8:	dcec      	bgt.n	dae84 <__multadd+0x12>
   daeaa:	f1b8 0f00 	cmp.w	r8, #0
   daeae:	d01b      	beq.n	daee8 <__multadd+0x76>
   daeb0:	68a3      	ldr	r3, [r4, #8]
   daeb2:	42b3      	cmp	r3, r6
   daeb4:	dc12      	bgt.n	daedc <__multadd+0x6a>
   daeb6:	6861      	ldr	r1, [r4, #4]
   daeb8:	4638      	mov	r0, r7
   daeba:	3101      	adds	r1, #1
   daebc:	f7ff ff8e 	bl	daddc <_Balloc>
   daec0:	6922      	ldr	r2, [r4, #16]
   daec2:	3202      	adds	r2, #2
   daec4:	f104 010c 	add.w	r1, r4, #12
   daec8:	4605      	mov	r5, r0
   daeca:	0092      	lsls	r2, r2, #2
   daecc:	300c      	adds	r0, #12
   daece:	f7fe fcad 	bl	d982c <memcpy>
   daed2:	4621      	mov	r1, r4
   daed4:	4638      	mov	r0, r7
   daed6:	f7ff ffb5 	bl	dae44 <_Bfree>
   daeda:	462c      	mov	r4, r5
   daedc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   daee0:	3601      	adds	r6, #1
   daee2:	f8c3 8014 	str.w	r8, [r3, #20]
   daee6:	6126      	str	r6, [r4, #16]
   daee8:	4620      	mov	r0, r4
   daeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daeee <__s2b>:
   daeee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daef2:	460c      	mov	r4, r1
   daef4:	4615      	mov	r5, r2
   daef6:	461f      	mov	r7, r3
   daef8:	2209      	movs	r2, #9
   daefa:	3308      	adds	r3, #8
   daefc:	4606      	mov	r6, r0
   daefe:	fb93 f3f2 	sdiv	r3, r3, r2
   daf02:	2100      	movs	r1, #0
   daf04:	2201      	movs	r2, #1
   daf06:	429a      	cmp	r2, r3
   daf08:	db20      	blt.n	daf4c <__s2b+0x5e>
   daf0a:	4630      	mov	r0, r6
   daf0c:	f7ff ff66 	bl	daddc <_Balloc>
   daf10:	9b08      	ldr	r3, [sp, #32]
   daf12:	6143      	str	r3, [r0, #20]
   daf14:	2d09      	cmp	r5, #9
   daf16:	f04f 0301 	mov.w	r3, #1
   daf1a:	6103      	str	r3, [r0, #16]
   daf1c:	dd19      	ble.n	daf52 <__s2b+0x64>
   daf1e:	f104 0909 	add.w	r9, r4, #9
   daf22:	46c8      	mov	r8, r9
   daf24:	442c      	add	r4, r5
   daf26:	f818 3b01 	ldrb.w	r3, [r8], #1
   daf2a:	4601      	mov	r1, r0
   daf2c:	3b30      	subs	r3, #48	; 0x30
   daf2e:	220a      	movs	r2, #10
   daf30:	4630      	mov	r0, r6
   daf32:	f7ff ff9e 	bl	dae72 <__multadd>
   daf36:	45a0      	cmp	r8, r4
   daf38:	d1f5      	bne.n	daf26 <__s2b+0x38>
   daf3a:	f1a5 0408 	sub.w	r4, r5, #8
   daf3e:	444c      	add	r4, r9
   daf40:	1b2d      	subs	r5, r5, r4
   daf42:	1963      	adds	r3, r4, r5
   daf44:	42bb      	cmp	r3, r7
   daf46:	db07      	blt.n	daf58 <__s2b+0x6a>
   daf48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daf4c:	0052      	lsls	r2, r2, #1
   daf4e:	3101      	adds	r1, #1
   daf50:	e7d9      	b.n	daf06 <__s2b+0x18>
   daf52:	340a      	adds	r4, #10
   daf54:	2509      	movs	r5, #9
   daf56:	e7f3      	b.n	daf40 <__s2b+0x52>
   daf58:	f814 3b01 	ldrb.w	r3, [r4], #1
   daf5c:	4601      	mov	r1, r0
   daf5e:	3b30      	subs	r3, #48	; 0x30
   daf60:	220a      	movs	r2, #10
   daf62:	4630      	mov	r0, r6
   daf64:	f7ff ff85 	bl	dae72 <__multadd>
   daf68:	e7eb      	b.n	daf42 <__s2b+0x54>

000daf6a <__hi0bits>:
   daf6a:	0c03      	lsrs	r3, r0, #16
   daf6c:	041b      	lsls	r3, r3, #16
   daf6e:	b9d3      	cbnz	r3, dafa6 <__hi0bits+0x3c>
   daf70:	0400      	lsls	r0, r0, #16
   daf72:	2310      	movs	r3, #16
   daf74:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   daf78:	bf04      	itt	eq
   daf7a:	0200      	lsleq	r0, r0, #8
   daf7c:	3308      	addeq	r3, #8
   daf7e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   daf82:	bf04      	itt	eq
   daf84:	0100      	lsleq	r0, r0, #4
   daf86:	3304      	addeq	r3, #4
   daf88:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   daf8c:	bf04      	itt	eq
   daf8e:	0080      	lsleq	r0, r0, #2
   daf90:	3302      	addeq	r3, #2
   daf92:	2800      	cmp	r0, #0
   daf94:	db05      	blt.n	dafa2 <__hi0bits+0x38>
   daf96:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   daf9a:	f103 0301 	add.w	r3, r3, #1
   daf9e:	bf08      	it	eq
   dafa0:	2320      	moveq	r3, #32
   dafa2:	4618      	mov	r0, r3
   dafa4:	4770      	bx	lr
   dafa6:	2300      	movs	r3, #0
   dafa8:	e7e4      	b.n	daf74 <__hi0bits+0xa>

000dafaa <__lo0bits>:
   dafaa:	6803      	ldr	r3, [r0, #0]
   dafac:	f013 0207 	ands.w	r2, r3, #7
   dafb0:	4601      	mov	r1, r0
   dafb2:	d00b      	beq.n	dafcc <__lo0bits+0x22>
   dafb4:	07da      	lsls	r2, r3, #31
   dafb6:	d424      	bmi.n	db002 <__lo0bits+0x58>
   dafb8:	0798      	lsls	r0, r3, #30
   dafba:	bf49      	itett	mi
   dafbc:	085b      	lsrmi	r3, r3, #1
   dafbe:	089b      	lsrpl	r3, r3, #2
   dafc0:	2001      	movmi	r0, #1
   dafc2:	600b      	strmi	r3, [r1, #0]
   dafc4:	bf5c      	itt	pl
   dafc6:	600b      	strpl	r3, [r1, #0]
   dafc8:	2002      	movpl	r0, #2
   dafca:	4770      	bx	lr
   dafcc:	b298      	uxth	r0, r3
   dafce:	b9b0      	cbnz	r0, daffe <__lo0bits+0x54>
   dafd0:	0c1b      	lsrs	r3, r3, #16
   dafd2:	2010      	movs	r0, #16
   dafd4:	f013 0fff 	tst.w	r3, #255	; 0xff
   dafd8:	bf04      	itt	eq
   dafda:	0a1b      	lsreq	r3, r3, #8
   dafdc:	3008      	addeq	r0, #8
   dafde:	071a      	lsls	r2, r3, #28
   dafe0:	bf04      	itt	eq
   dafe2:	091b      	lsreq	r3, r3, #4
   dafe4:	3004      	addeq	r0, #4
   dafe6:	079a      	lsls	r2, r3, #30
   dafe8:	bf04      	itt	eq
   dafea:	089b      	lsreq	r3, r3, #2
   dafec:	3002      	addeq	r0, #2
   dafee:	07da      	lsls	r2, r3, #31
   daff0:	d403      	bmi.n	daffa <__lo0bits+0x50>
   daff2:	085b      	lsrs	r3, r3, #1
   daff4:	f100 0001 	add.w	r0, r0, #1
   daff8:	d005      	beq.n	db006 <__lo0bits+0x5c>
   daffa:	600b      	str	r3, [r1, #0]
   daffc:	4770      	bx	lr
   daffe:	4610      	mov	r0, r2
   db000:	e7e8      	b.n	dafd4 <__lo0bits+0x2a>
   db002:	2000      	movs	r0, #0
   db004:	4770      	bx	lr
   db006:	2020      	movs	r0, #32
   db008:	4770      	bx	lr

000db00a <__i2b>:
   db00a:	b510      	push	{r4, lr}
   db00c:	460c      	mov	r4, r1
   db00e:	2101      	movs	r1, #1
   db010:	f7ff fee4 	bl	daddc <_Balloc>
   db014:	2201      	movs	r2, #1
   db016:	6144      	str	r4, [r0, #20]
   db018:	6102      	str	r2, [r0, #16]
   db01a:	bd10      	pop	{r4, pc}

000db01c <__multiply>:
   db01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db020:	4615      	mov	r5, r2
   db022:	690a      	ldr	r2, [r1, #16]
   db024:	692b      	ldr	r3, [r5, #16]
   db026:	429a      	cmp	r2, r3
   db028:	bfb8      	it	lt
   db02a:	460b      	movlt	r3, r1
   db02c:	460c      	mov	r4, r1
   db02e:	bfbc      	itt	lt
   db030:	462c      	movlt	r4, r5
   db032:	461d      	movlt	r5, r3
   db034:	6927      	ldr	r7, [r4, #16]
   db036:	f8d5 9010 	ldr.w	r9, [r5, #16]
   db03a:	68a3      	ldr	r3, [r4, #8]
   db03c:	6861      	ldr	r1, [r4, #4]
   db03e:	eb07 0609 	add.w	r6, r7, r9
   db042:	42b3      	cmp	r3, r6
   db044:	bfb8      	it	lt
   db046:	3101      	addlt	r1, #1
   db048:	b085      	sub	sp, #20
   db04a:	f7ff fec7 	bl	daddc <_Balloc>
   db04e:	f100 0114 	add.w	r1, r0, #20
   db052:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   db056:	460b      	mov	r3, r1
   db058:	2200      	movs	r2, #0
   db05a:	4543      	cmp	r3, r8
   db05c:	d31d      	bcc.n	db09a <__multiply+0x7e>
   db05e:	f104 0314 	add.w	r3, r4, #20
   db062:	f105 0214 	add.w	r2, r5, #20
   db066:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   db06a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db06e:	9302      	str	r3, [sp, #8]
   db070:	1b3b      	subs	r3, r7, r4
   db072:	3b15      	subs	r3, #21
   db074:	f023 0303 	bic.w	r3, r3, #3
   db078:	3304      	adds	r3, #4
   db07a:	f104 0515 	add.w	r5, r4, #21
   db07e:	42af      	cmp	r7, r5
   db080:	bf38      	it	cc
   db082:	2304      	movcc	r3, #4
   db084:	9301      	str	r3, [sp, #4]
   db086:	9b02      	ldr	r3, [sp, #8]
   db088:	9203      	str	r2, [sp, #12]
   db08a:	4293      	cmp	r3, r2
   db08c:	d808      	bhi.n	db0a0 <__multiply+0x84>
   db08e:	2e00      	cmp	r6, #0
   db090:	dc5a      	bgt.n	db148 <__multiply+0x12c>
   db092:	6106      	str	r6, [r0, #16]
   db094:	b005      	add	sp, #20
   db096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db09a:	f843 2b04 	str.w	r2, [r3], #4
   db09e:	e7dc      	b.n	db05a <__multiply+0x3e>
   db0a0:	f8b2 a000 	ldrh.w	sl, [r2]
   db0a4:	f1ba 0f00 	cmp.w	sl, #0
   db0a8:	d024      	beq.n	db0f4 <__multiply+0xd8>
   db0aa:	f104 0e14 	add.w	lr, r4, #20
   db0ae:	4689      	mov	r9, r1
   db0b0:	f04f 0c00 	mov.w	ip, #0
   db0b4:	f85e 5b04 	ldr.w	r5, [lr], #4
   db0b8:	f8d9 b000 	ldr.w	fp, [r9]
   db0bc:	b2ab      	uxth	r3, r5
   db0be:	fa1f fb8b 	uxth.w	fp, fp
   db0c2:	fb0a b303 	mla	r3, sl, r3, fp
   db0c6:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   db0ca:	f8d9 5000 	ldr.w	r5, [r9]
   db0ce:	4463      	add	r3, ip
   db0d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db0d4:	fb0a c50b 	mla	r5, sl, fp, ip
   db0d8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   db0dc:	b29b      	uxth	r3, r3
   db0de:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   db0e2:	4577      	cmp	r7, lr
   db0e4:	f849 3b04 	str.w	r3, [r9], #4
   db0e8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db0ec:	d8e2      	bhi.n	db0b4 <__multiply+0x98>
   db0ee:	9b01      	ldr	r3, [sp, #4]
   db0f0:	f841 c003 	str.w	ip, [r1, r3]
   db0f4:	9b03      	ldr	r3, [sp, #12]
   db0f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   db0fa:	3204      	adds	r2, #4
   db0fc:	f1b9 0f00 	cmp.w	r9, #0
   db100:	d020      	beq.n	db144 <__multiply+0x128>
   db102:	680b      	ldr	r3, [r1, #0]
   db104:	f104 0c14 	add.w	ip, r4, #20
   db108:	468e      	mov	lr, r1
   db10a:	f04f 0a00 	mov.w	sl, #0
   db10e:	f8bc 5000 	ldrh.w	r5, [ip]
   db112:	f8be b002 	ldrh.w	fp, [lr, #2]
   db116:	fb09 b505 	mla	r5, r9, r5, fp
   db11a:	44aa      	add	sl, r5
   db11c:	b29b      	uxth	r3, r3
   db11e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   db122:	f84e 3b04 	str.w	r3, [lr], #4
   db126:	f85c 3b04 	ldr.w	r3, [ip], #4
   db12a:	f8be 5000 	ldrh.w	r5, [lr]
   db12e:	0c1b      	lsrs	r3, r3, #16
   db130:	fb09 5303 	mla	r3, r9, r3, r5
   db134:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   db138:	4567      	cmp	r7, ip
   db13a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   db13e:	d8e6      	bhi.n	db10e <__multiply+0xf2>
   db140:	9d01      	ldr	r5, [sp, #4]
   db142:	514b      	str	r3, [r1, r5]
   db144:	3104      	adds	r1, #4
   db146:	e79e      	b.n	db086 <__multiply+0x6a>
   db148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   db14c:	2b00      	cmp	r3, #0
   db14e:	d1a0      	bne.n	db092 <__multiply+0x76>
   db150:	3e01      	subs	r6, #1
   db152:	e79c      	b.n	db08e <__multiply+0x72>

000db154 <__pow5mult>:
   db154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db158:	4615      	mov	r5, r2
   db15a:	f012 0203 	ands.w	r2, r2, #3
   db15e:	4606      	mov	r6, r0
   db160:	460f      	mov	r7, r1
   db162:	d007      	beq.n	db174 <__pow5mult+0x20>
   db164:	4c21      	ldr	r4, [pc, #132]	; (db1ec <__pow5mult+0x98>)
   db166:	3a01      	subs	r2, #1
   db168:	2300      	movs	r3, #0
   db16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db16e:	f7ff fe80 	bl	dae72 <__multadd>
   db172:	4607      	mov	r7, r0
   db174:	10ad      	asrs	r5, r5, #2
   db176:	d035      	beq.n	db1e4 <__pow5mult+0x90>
   db178:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db17a:	b93c      	cbnz	r4, db18c <__pow5mult+0x38>
   db17c:	2010      	movs	r0, #16
   db17e:	f7fc f985 	bl	d748c <malloc>
   db182:	e9c0 4401 	strd	r4, r4, [r0, #4]
   db186:	6270      	str	r0, [r6, #36]	; 0x24
   db188:	6004      	str	r4, [r0, #0]
   db18a:	60c4      	str	r4, [r0, #12]
   db18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db190:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db194:	b94c      	cbnz	r4, db1aa <__pow5mult+0x56>
   db196:	f240 2171 	movw	r1, #625	; 0x271
   db19a:	4630      	mov	r0, r6
   db19c:	f7ff ff35 	bl	db00a <__i2b>
   db1a0:	2300      	movs	r3, #0
   db1a2:	f8c8 0008 	str.w	r0, [r8, #8]
   db1a6:	4604      	mov	r4, r0
   db1a8:	6003      	str	r3, [r0, #0]
   db1aa:	f04f 0900 	mov.w	r9, #0
   db1ae:	07eb      	lsls	r3, r5, #31
   db1b0:	d50a      	bpl.n	db1c8 <__pow5mult+0x74>
   db1b2:	4639      	mov	r1, r7
   db1b4:	4622      	mov	r2, r4
   db1b6:	4630      	mov	r0, r6
   db1b8:	f7ff ff30 	bl	db01c <__multiply>
   db1bc:	4639      	mov	r1, r7
   db1be:	4680      	mov	r8, r0
   db1c0:	4630      	mov	r0, r6
   db1c2:	f7ff fe3f 	bl	dae44 <_Bfree>
   db1c6:	4647      	mov	r7, r8
   db1c8:	106d      	asrs	r5, r5, #1
   db1ca:	d00b      	beq.n	db1e4 <__pow5mult+0x90>
   db1cc:	6820      	ldr	r0, [r4, #0]
   db1ce:	b938      	cbnz	r0, db1e0 <__pow5mult+0x8c>
   db1d0:	4622      	mov	r2, r4
   db1d2:	4621      	mov	r1, r4
   db1d4:	4630      	mov	r0, r6
   db1d6:	f7ff ff21 	bl	db01c <__multiply>
   db1da:	6020      	str	r0, [r4, #0]
   db1dc:	f8c0 9000 	str.w	r9, [r0]
   db1e0:	4604      	mov	r4, r0
   db1e2:	e7e4      	b.n	db1ae <__pow5mult+0x5a>
   db1e4:	4638      	mov	r0, r7
   db1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db1ea:	bf00      	nop
   db1ec:	000dc700 	.word	0x000dc700

000db1f0 <__lshift>:
   db1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db1f4:	460c      	mov	r4, r1
   db1f6:	6849      	ldr	r1, [r1, #4]
   db1f8:	6923      	ldr	r3, [r4, #16]
   db1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
   db1fe:	68a3      	ldr	r3, [r4, #8]
   db200:	4607      	mov	r7, r0
   db202:	4691      	mov	r9, r2
   db204:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db208:	f108 0601 	add.w	r6, r8, #1
   db20c:	42b3      	cmp	r3, r6
   db20e:	db3f      	blt.n	db290 <__lshift+0xa0>
   db210:	4638      	mov	r0, r7
   db212:	f7ff fde3 	bl	daddc <_Balloc>
   db216:	2300      	movs	r3, #0
   db218:	4605      	mov	r5, r0
   db21a:	f100 0114 	add.w	r1, r0, #20
   db21e:	f100 0210 	add.w	r2, r0, #16
   db222:	4618      	mov	r0, r3
   db224:	4553      	cmp	r3, sl
   db226:	db36      	blt.n	db296 <__lshift+0xa6>
   db228:	6920      	ldr	r0, [r4, #16]
   db22a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   db22e:	f104 0314 	add.w	r3, r4, #20
   db232:	f019 091f 	ands.w	r9, r9, #31
   db236:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   db23a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   db23e:	d02e      	beq.n	db29e <__lshift+0xae>
   db240:	f1c9 0e20 	rsb	lr, r9, #32
   db244:	468a      	mov	sl, r1
   db246:	2200      	movs	r2, #0
   db248:	6818      	ldr	r0, [r3, #0]
   db24a:	fa00 f009 	lsl.w	r0, r0, r9
   db24e:	4302      	orrs	r2, r0
   db250:	f84a 2b04 	str.w	r2, [sl], #4
   db254:	f853 2b04 	ldr.w	r2, [r3], #4
   db258:	459c      	cmp	ip, r3
   db25a:	fa22 f20e 	lsr.w	r2, r2, lr
   db25e:	d8f3      	bhi.n	db248 <__lshift+0x58>
   db260:	ebac 0304 	sub.w	r3, ip, r4
   db264:	3b15      	subs	r3, #21
   db266:	f023 0303 	bic.w	r3, r3, #3
   db26a:	3304      	adds	r3, #4
   db26c:	f104 0015 	add.w	r0, r4, #21
   db270:	4560      	cmp	r0, ip
   db272:	bf88      	it	hi
   db274:	2304      	movhi	r3, #4
   db276:	50ca      	str	r2, [r1, r3]
   db278:	b10a      	cbz	r2, db27e <__lshift+0x8e>
   db27a:	f108 0602 	add.w	r6, r8, #2
   db27e:	3e01      	subs	r6, #1
   db280:	4638      	mov	r0, r7
   db282:	612e      	str	r6, [r5, #16]
   db284:	4621      	mov	r1, r4
   db286:	f7ff fddd 	bl	dae44 <_Bfree>
   db28a:	4628      	mov	r0, r5
   db28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db290:	3101      	adds	r1, #1
   db292:	005b      	lsls	r3, r3, #1
   db294:	e7ba      	b.n	db20c <__lshift+0x1c>
   db296:	f842 0f04 	str.w	r0, [r2, #4]!
   db29a:	3301      	adds	r3, #1
   db29c:	e7c2      	b.n	db224 <__lshift+0x34>
   db29e:	3904      	subs	r1, #4
   db2a0:	f853 2b04 	ldr.w	r2, [r3], #4
   db2a4:	f841 2f04 	str.w	r2, [r1, #4]!
   db2a8:	459c      	cmp	ip, r3
   db2aa:	d8f9      	bhi.n	db2a0 <__lshift+0xb0>
   db2ac:	e7e7      	b.n	db27e <__lshift+0x8e>

000db2ae <__mcmp>:
   db2ae:	b530      	push	{r4, r5, lr}
   db2b0:	6902      	ldr	r2, [r0, #16]
   db2b2:	690c      	ldr	r4, [r1, #16]
   db2b4:	1b12      	subs	r2, r2, r4
   db2b6:	d10e      	bne.n	db2d6 <__mcmp+0x28>
   db2b8:	f100 0314 	add.w	r3, r0, #20
   db2bc:	3114      	adds	r1, #20
   db2be:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   db2c2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   db2c6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   db2ca:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   db2ce:	42a5      	cmp	r5, r4
   db2d0:	d003      	beq.n	db2da <__mcmp+0x2c>
   db2d2:	d305      	bcc.n	db2e0 <__mcmp+0x32>
   db2d4:	2201      	movs	r2, #1
   db2d6:	4610      	mov	r0, r2
   db2d8:	bd30      	pop	{r4, r5, pc}
   db2da:	4283      	cmp	r3, r0
   db2dc:	d3f3      	bcc.n	db2c6 <__mcmp+0x18>
   db2de:	e7fa      	b.n	db2d6 <__mcmp+0x28>
   db2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db2e4:	e7f7      	b.n	db2d6 <__mcmp+0x28>

000db2e6 <__mdiff>:
   db2e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db2ea:	460c      	mov	r4, r1
   db2ec:	4606      	mov	r6, r0
   db2ee:	4611      	mov	r1, r2
   db2f0:	4620      	mov	r0, r4
   db2f2:	4617      	mov	r7, r2
   db2f4:	f7ff ffdb 	bl	db2ae <__mcmp>
   db2f8:	1e05      	subs	r5, r0, #0
   db2fa:	d108      	bne.n	db30e <__mdiff+0x28>
   db2fc:	4629      	mov	r1, r5
   db2fe:	4630      	mov	r0, r6
   db300:	f7ff fd6c 	bl	daddc <_Balloc>
   db304:	2301      	movs	r3, #1
   db306:	e9c0 3504 	strd	r3, r5, [r0, #16]
   db30a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db30e:	bfa4      	itt	ge
   db310:	463b      	movge	r3, r7
   db312:	4627      	movge	r7, r4
   db314:	4630      	mov	r0, r6
   db316:	6879      	ldr	r1, [r7, #4]
   db318:	bfa6      	itte	ge
   db31a:	461c      	movge	r4, r3
   db31c:	2500      	movge	r5, #0
   db31e:	2501      	movlt	r5, #1
   db320:	f7ff fd5c 	bl	daddc <_Balloc>
   db324:	693e      	ldr	r6, [r7, #16]
   db326:	60c5      	str	r5, [r0, #12]
   db328:	6925      	ldr	r5, [r4, #16]
   db32a:	f107 0114 	add.w	r1, r7, #20
   db32e:	f104 0914 	add.w	r9, r4, #20
   db332:	f100 0e14 	add.w	lr, r0, #20
   db336:	f107 0210 	add.w	r2, r7, #16
   db33a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   db33e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   db342:	46f2      	mov	sl, lr
   db344:	2700      	movs	r7, #0
   db346:	f859 3b04 	ldr.w	r3, [r9], #4
   db34a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   db34e:	fa1f f883 	uxth.w	r8, r3
   db352:	fa17 f78b 	uxtah	r7, r7, fp
   db356:	0c1b      	lsrs	r3, r3, #16
   db358:	eba7 0808 	sub.w	r8, r7, r8
   db35c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   db360:	eb03 4328 	add.w	r3, r3, r8, asr #16
   db364:	fa1f f888 	uxth.w	r8, r8
   db368:	141f      	asrs	r7, r3, #16
   db36a:	454d      	cmp	r5, r9
   db36c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   db370:	f84a 3b04 	str.w	r3, [sl], #4
   db374:	d8e7      	bhi.n	db346 <__mdiff+0x60>
   db376:	1b2b      	subs	r3, r5, r4
   db378:	3b15      	subs	r3, #21
   db37a:	f023 0303 	bic.w	r3, r3, #3
   db37e:	3304      	adds	r3, #4
   db380:	3415      	adds	r4, #21
   db382:	42a5      	cmp	r5, r4
   db384:	bf38      	it	cc
   db386:	2304      	movcc	r3, #4
   db388:	4419      	add	r1, r3
   db38a:	4473      	add	r3, lr
   db38c:	469e      	mov	lr, r3
   db38e:	460d      	mov	r5, r1
   db390:	4565      	cmp	r5, ip
   db392:	d30e      	bcc.n	db3b2 <__mdiff+0xcc>
   db394:	f10c 0203 	add.w	r2, ip, #3
   db398:	1a52      	subs	r2, r2, r1
   db39a:	f022 0203 	bic.w	r2, r2, #3
   db39e:	3903      	subs	r1, #3
   db3a0:	458c      	cmp	ip, r1
   db3a2:	bf38      	it	cc
   db3a4:	2200      	movcc	r2, #0
   db3a6:	441a      	add	r2, r3
   db3a8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db3ac:	b17b      	cbz	r3, db3ce <__mdiff+0xe8>
   db3ae:	6106      	str	r6, [r0, #16]
   db3b0:	e7ab      	b.n	db30a <__mdiff+0x24>
   db3b2:	f855 8b04 	ldr.w	r8, [r5], #4
   db3b6:	fa17 f488 	uxtah	r4, r7, r8
   db3ba:	1422      	asrs	r2, r4, #16
   db3bc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db3c0:	b2a4      	uxth	r4, r4
   db3c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db3c6:	f84e 4b04 	str.w	r4, [lr], #4
   db3ca:	1417      	asrs	r7, r2, #16
   db3cc:	e7e0      	b.n	db390 <__mdiff+0xaa>
   db3ce:	3e01      	subs	r6, #1
   db3d0:	e7ea      	b.n	db3a8 <__mdiff+0xc2>
	...

000db3d4 <__ulp>:
   db3d4:	b082      	sub	sp, #8
   db3d6:	ed8d 0b00 	vstr	d0, [sp]
   db3da:	9b01      	ldr	r3, [sp, #4]
   db3dc:	4912      	ldr	r1, [pc, #72]	; (db428 <__ulp+0x54>)
   db3de:	4019      	ands	r1, r3
   db3e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db3e4:	2900      	cmp	r1, #0
   db3e6:	dd05      	ble.n	db3f4 <__ulp+0x20>
   db3e8:	2200      	movs	r2, #0
   db3ea:	460b      	mov	r3, r1
   db3ec:	ec43 2b10 	vmov	d0, r2, r3
   db3f0:	b002      	add	sp, #8
   db3f2:	4770      	bx	lr
   db3f4:	4249      	negs	r1, r1
   db3f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db3fa:	ea4f 5021 	mov.w	r0, r1, asr #20
   db3fe:	f04f 0200 	mov.w	r2, #0
   db402:	f04f 0300 	mov.w	r3, #0
   db406:	da04      	bge.n	db412 <__ulp+0x3e>
   db408:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db40c:	fa41 f300 	asr.w	r3, r1, r0
   db410:	e7ec      	b.n	db3ec <__ulp+0x18>
   db412:	f1a0 0114 	sub.w	r1, r0, #20
   db416:	291e      	cmp	r1, #30
   db418:	bfda      	itte	le
   db41a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db41e:	fa20 f101 	lsrle.w	r1, r0, r1
   db422:	2101      	movgt	r1, #1
   db424:	460a      	mov	r2, r1
   db426:	e7e1      	b.n	db3ec <__ulp+0x18>
   db428:	7ff00000 	.word	0x7ff00000

000db42c <__b2d>:
   db42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db42e:	6905      	ldr	r5, [r0, #16]
   db430:	f100 0714 	add.w	r7, r0, #20
   db434:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db438:	1f2e      	subs	r6, r5, #4
   db43a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db43e:	4620      	mov	r0, r4
   db440:	f7ff fd93 	bl	daf6a <__hi0bits>
   db444:	f1c0 0320 	rsb	r3, r0, #32
   db448:	280a      	cmp	r0, #10
   db44a:	f8df c07c 	ldr.w	ip, [pc, #124]	; db4c8 <__b2d+0x9c>
   db44e:	600b      	str	r3, [r1, #0]
   db450:	dc14      	bgt.n	db47c <__b2d+0x50>
   db452:	f1c0 0e0b 	rsb	lr, r0, #11
   db456:	fa24 f10e 	lsr.w	r1, r4, lr
   db45a:	42b7      	cmp	r7, r6
   db45c:	ea41 030c 	orr.w	r3, r1, ip
   db460:	bf34      	ite	cc
   db462:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db466:	2100      	movcs	r1, #0
   db468:	3015      	adds	r0, #21
   db46a:	fa04 f000 	lsl.w	r0, r4, r0
   db46e:	fa21 f10e 	lsr.w	r1, r1, lr
   db472:	ea40 0201 	orr.w	r2, r0, r1
   db476:	ec43 2b10 	vmov	d0, r2, r3
   db47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db47c:	42b7      	cmp	r7, r6
   db47e:	bf3a      	itte	cc
   db480:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db484:	f1a5 0608 	subcc.w	r6, r5, #8
   db488:	2100      	movcs	r1, #0
   db48a:	380b      	subs	r0, #11
   db48c:	d017      	beq.n	db4be <__b2d+0x92>
   db48e:	f1c0 0c20 	rsb	ip, r0, #32
   db492:	fa04 f500 	lsl.w	r5, r4, r0
   db496:	42be      	cmp	r6, r7
   db498:	fa21 f40c 	lsr.w	r4, r1, ip
   db49c:	ea45 0504 	orr.w	r5, r5, r4
   db4a0:	bf8c      	ite	hi
   db4a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db4a6:	2400      	movls	r4, #0
   db4a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db4ac:	fa01 f000 	lsl.w	r0, r1, r0
   db4b0:	fa24 f40c 	lsr.w	r4, r4, ip
   db4b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db4b8:	ea40 0204 	orr.w	r2, r0, r4
   db4bc:	e7db      	b.n	db476 <__b2d+0x4a>
   db4be:	ea44 030c 	orr.w	r3, r4, ip
   db4c2:	460a      	mov	r2, r1
   db4c4:	e7d7      	b.n	db476 <__b2d+0x4a>
   db4c6:	bf00      	nop
   db4c8:	3ff00000 	.word	0x3ff00000

000db4cc <__d2b>:
   db4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db4d0:	4689      	mov	r9, r1
   db4d2:	2101      	movs	r1, #1
   db4d4:	ec57 6b10 	vmov	r6, r7, d0
   db4d8:	4690      	mov	r8, r2
   db4da:	f7ff fc7f 	bl	daddc <_Balloc>
   db4de:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db4e2:	4604      	mov	r4, r0
   db4e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db4e8:	bb35      	cbnz	r5, db538 <__d2b+0x6c>
   db4ea:	2e00      	cmp	r6, #0
   db4ec:	9301      	str	r3, [sp, #4]
   db4ee:	d028      	beq.n	db542 <__d2b+0x76>
   db4f0:	4668      	mov	r0, sp
   db4f2:	9600      	str	r6, [sp, #0]
   db4f4:	f7ff fd59 	bl	dafaa <__lo0bits>
   db4f8:	9900      	ldr	r1, [sp, #0]
   db4fa:	b300      	cbz	r0, db53e <__d2b+0x72>
   db4fc:	9a01      	ldr	r2, [sp, #4]
   db4fe:	f1c0 0320 	rsb	r3, r0, #32
   db502:	fa02 f303 	lsl.w	r3, r2, r3
   db506:	430b      	orrs	r3, r1
   db508:	40c2      	lsrs	r2, r0
   db50a:	6163      	str	r3, [r4, #20]
   db50c:	9201      	str	r2, [sp, #4]
   db50e:	9b01      	ldr	r3, [sp, #4]
   db510:	61a3      	str	r3, [r4, #24]
   db512:	2b00      	cmp	r3, #0
   db514:	bf14      	ite	ne
   db516:	2202      	movne	r2, #2
   db518:	2201      	moveq	r2, #1
   db51a:	6122      	str	r2, [r4, #16]
   db51c:	b1d5      	cbz	r5, db554 <__d2b+0x88>
   db51e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db522:	4405      	add	r5, r0
   db524:	f8c9 5000 	str.w	r5, [r9]
   db528:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db52c:	f8c8 0000 	str.w	r0, [r8]
   db530:	4620      	mov	r0, r4
   db532:	b003      	add	sp, #12
   db534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db53c:	e7d5      	b.n	db4ea <__d2b+0x1e>
   db53e:	6161      	str	r1, [r4, #20]
   db540:	e7e5      	b.n	db50e <__d2b+0x42>
   db542:	a801      	add	r0, sp, #4
   db544:	f7ff fd31 	bl	dafaa <__lo0bits>
   db548:	9b01      	ldr	r3, [sp, #4]
   db54a:	6163      	str	r3, [r4, #20]
   db54c:	2201      	movs	r2, #1
   db54e:	6122      	str	r2, [r4, #16]
   db550:	3020      	adds	r0, #32
   db552:	e7e3      	b.n	db51c <__d2b+0x50>
   db554:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db55c:	f8c9 0000 	str.w	r0, [r9]
   db560:	6918      	ldr	r0, [r3, #16]
   db562:	f7ff fd02 	bl	daf6a <__hi0bits>
   db566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db56a:	e7df      	b.n	db52c <__d2b+0x60>

000db56c <__ratio>:
   db56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db570:	4688      	mov	r8, r1
   db572:	4669      	mov	r1, sp
   db574:	4681      	mov	r9, r0
   db576:	f7ff ff59 	bl	db42c <__b2d>
   db57a:	a901      	add	r1, sp, #4
   db57c:	4640      	mov	r0, r8
   db57e:	ec55 4b10 	vmov	r4, r5, d0
   db582:	f7ff ff53 	bl	db42c <__b2d>
   db586:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db58a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db58e:	eba3 0c02 	sub.w	ip, r3, r2
   db592:	e9dd 3200 	ldrd	r3, r2, [sp]
   db596:	1a9b      	subs	r3, r3, r2
   db598:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db59c:	ec51 0b10 	vmov	r0, r1, d0
   db5a0:	2b00      	cmp	r3, #0
   db5a2:	bfd6      	itet	le
   db5a4:	460a      	movle	r2, r1
   db5a6:	462a      	movgt	r2, r5
   db5a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db5ac:	468b      	mov	fp, r1
   db5ae:	462f      	mov	r7, r5
   db5b0:	bfd4      	ite	le
   db5b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db5b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db5ba:	4620      	mov	r0, r4
   db5bc:	ee10 2a10 	vmov	r2, s0
   db5c0:	465b      	mov	r3, fp
   db5c2:	4639      	mov	r1, r7
   db5c4:	f7fd fed0 	bl	d9368 <__aeabi_ddiv>
   db5c8:	ec41 0b10 	vmov	d0, r0, r1
   db5cc:	b003      	add	sp, #12
   db5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db5d2 <__copybits>:
   db5d2:	3901      	subs	r1, #1
   db5d4:	b570      	push	{r4, r5, r6, lr}
   db5d6:	1149      	asrs	r1, r1, #5
   db5d8:	6914      	ldr	r4, [r2, #16]
   db5da:	3101      	adds	r1, #1
   db5dc:	f102 0314 	add.w	r3, r2, #20
   db5e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db5e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db5e8:	1f05      	subs	r5, r0, #4
   db5ea:	42a3      	cmp	r3, r4
   db5ec:	d30c      	bcc.n	db608 <__copybits+0x36>
   db5ee:	1aa3      	subs	r3, r4, r2
   db5f0:	3b11      	subs	r3, #17
   db5f2:	f023 0303 	bic.w	r3, r3, #3
   db5f6:	3211      	adds	r2, #17
   db5f8:	42a2      	cmp	r2, r4
   db5fa:	bf88      	it	hi
   db5fc:	2300      	movhi	r3, #0
   db5fe:	4418      	add	r0, r3
   db600:	2300      	movs	r3, #0
   db602:	4288      	cmp	r0, r1
   db604:	d305      	bcc.n	db612 <__copybits+0x40>
   db606:	bd70      	pop	{r4, r5, r6, pc}
   db608:	f853 6b04 	ldr.w	r6, [r3], #4
   db60c:	f845 6f04 	str.w	r6, [r5, #4]!
   db610:	e7eb      	b.n	db5ea <__copybits+0x18>
   db612:	f840 3b04 	str.w	r3, [r0], #4
   db616:	e7f4      	b.n	db602 <__copybits+0x30>

000db618 <__any_on>:
   db618:	f100 0214 	add.w	r2, r0, #20
   db61c:	6900      	ldr	r0, [r0, #16]
   db61e:	114b      	asrs	r3, r1, #5
   db620:	4298      	cmp	r0, r3
   db622:	b510      	push	{r4, lr}
   db624:	db11      	blt.n	db64a <__any_on+0x32>
   db626:	dd0a      	ble.n	db63e <__any_on+0x26>
   db628:	f011 011f 	ands.w	r1, r1, #31
   db62c:	d007      	beq.n	db63e <__any_on+0x26>
   db62e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db632:	fa24 f001 	lsr.w	r0, r4, r1
   db636:	fa00 f101 	lsl.w	r1, r0, r1
   db63a:	428c      	cmp	r4, r1
   db63c:	d10b      	bne.n	db656 <__any_on+0x3e>
   db63e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db642:	4293      	cmp	r3, r2
   db644:	d803      	bhi.n	db64e <__any_on+0x36>
   db646:	2000      	movs	r0, #0
   db648:	bd10      	pop	{r4, pc}
   db64a:	4603      	mov	r3, r0
   db64c:	e7f7      	b.n	db63e <__any_on+0x26>
   db64e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db652:	2900      	cmp	r1, #0
   db654:	d0f5      	beq.n	db642 <__any_on+0x2a>
   db656:	2001      	movs	r0, #1
   db658:	e7f6      	b.n	db648 <__any_on+0x30>

000db65a <_calloc_r>:
   db65a:	b513      	push	{r0, r1, r4, lr}
   db65c:	434a      	muls	r2, r1
   db65e:	4611      	mov	r1, r2
   db660:	9201      	str	r2, [sp, #4]
   db662:	f7fb ff43 	bl	d74ec <_malloc_r>
   db666:	4604      	mov	r4, r0
   db668:	b118      	cbz	r0, db672 <_calloc_r+0x18>
   db66a:	9a01      	ldr	r2, [sp, #4]
   db66c:	2100      	movs	r1, #0
   db66e:	f7fe f905 	bl	d987c <memset>
   db672:	4620      	mov	r0, r4
   db674:	b002      	add	sp, #8
   db676:	bd10      	pop	{r4, pc}

000db678 <nan>:
   db678:	ed9f 0b01 	vldr	d0, [pc, #4]	; db680 <nan+0x8>
   db67c:	4770      	bx	lr
   db67e:	bf00      	nop
   db680:	00000000 	.word	0x00000000
   db684:	7ff80000 	.word	0x7ff80000

000db688 <__ascii_wctomb>:
   db688:	b149      	cbz	r1, db69e <__ascii_wctomb+0x16>
   db68a:	2aff      	cmp	r2, #255	; 0xff
   db68c:	bf85      	ittet	hi
   db68e:	238a      	movhi	r3, #138	; 0x8a
   db690:	6003      	strhi	r3, [r0, #0]
   db692:	700a      	strbls	r2, [r1, #0]
   db694:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db698:	bf98      	it	ls
   db69a:	2001      	movls	r0, #1
   db69c:	4770      	bx	lr
   db69e:	4608      	mov	r0, r1
   db6a0:	4770      	bx	lr
	...

000db6a4 <__aeabi_d2lz>:
   db6a4:	b538      	push	{r3, r4, r5, lr}
   db6a6:	2200      	movs	r2, #0
   db6a8:	2300      	movs	r3, #0
   db6aa:	4604      	mov	r4, r0
   db6ac:	460d      	mov	r5, r1
   db6ae:	f7fd ffa3 	bl	d95f8 <__aeabi_dcmplt>
   db6b2:	b928      	cbnz	r0, db6c0 <__aeabi_d2lz+0x1c>
   db6b4:	4620      	mov	r0, r4
   db6b6:	4629      	mov	r1, r5
   db6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db6bc:	f7fe b84a 	b.w	d9754 <__aeabi_d2ulz>
   db6c0:	4620      	mov	r0, r4
   db6c2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db6c6:	f7fe f845 	bl	d9754 <__aeabi_d2ulz>
   db6ca:	4240      	negs	r0, r0
   db6cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db6d0:	bd38      	pop	{r3, r4, r5, pc}
   db6d2:	bf00      	nop

000db6d4 <dynalib_user>:
   db6d4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db6e4:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   db6f4:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   db704:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   db714:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   db724:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   db734:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   db744:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   db754:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   db764:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   db774:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   db784:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   db794:	726f 5320 7869 2a00 4e00 206f 6144 6174     or Six.*.No Data
   db7a4:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   db7b4:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   db7c4:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   db7d4:	6255 6469 746f 2073 6f48 6b6f 5300 7465     Ubidots Hook.Set
   db7e4:	7420 206f 7233 2064 6150 7472 2079 6953      to 3rd Party Si
   db7f4:	006d 0030 6553 2074 6f74 5020 7261 6974     m.0.Set to Parti
   db804:	6c63 2065 6953 006d 654b 7065 4120 696c     cle Sim.Keep Ali
   db814:	6576 7320 7465 7420 206f 6925 7320 6365     ve set to %i sec
   db824:	4b00 6565 2070 6c41 7669 0065 6552 6f70     .Keep Alive.Repo
   db834:	7472 6e69 2067 6954 656d 5320 7465 7420     rting Time Set t
   db844:	206f 7325 4d20 6e69 7475 7365 002e 6553     o %s Minutes..Se
   db854:	2074 6556 6272 736f 2065 6f4d 6564 4300     t Verbose Mode.C
   db864:	656c 7261 6465 5620 7265 6f62 6573 4d20     leared Verbose M
   db874:	646f 0065 6944 6173 6c62 6465 5320 6e65     ode.Disabled Sen
   db884:	6f73 2072 6e4f 0065 6553 736e 726f 5320     sor One.Sensor S
   db894:	6174 7574 0073 6944 6173 6c62 6465 5320     tatus.Disabled S
   db8a4:	6e65 6f73 2072 7754 006f 6944 6173 6c62     ensor Two.Disabl
   db8b4:	6465 5320 6e65 6f73 2072 6854 6572 0065     ed Sensor Three.
   db8c4:	6944 6173 6c62 6465 5320 6e65 6f73 2072     Disabled Sensor 
   db8d4:	6f46 7275 4400 7369 6261 656c 2064 6553     Four.Disabled Se
   db8e4:	736e 726f 4620 7669 0065 6944 6173 6c62     nsor Five.Disabl
   db8f4:	6465 5320 6e65 6f73 2072 6953 0078 704f     ed Sensor Six.Op
   db904:	7265 7461 6f69 206e 6f4d 6564 2520 0069     eration Mode %i.
   db914:	6544 6976 6563 5220 7365 7465 5320 6375     Device Reset Suc
   db924:	6563 7373 4c00 616f 6964 676e 5320 7379     cess.Loading Sys
   db934:	6574 206d 6544 6166 6c75 7374 4c00 616f     tem Defaults.Loa
   db944:	6964 676e 4320 6e6f 7473 6e61 2074 6544     ding Constant De
   db954:	6166 6c75 7374 3920 2e30 0039 6550 7474     faults 90.9.Pett
   db964:	6465 5700 7461 6863 6f64 0067 207b 7422     ed.Watchdog.{ "t
   db974:	6761 2273 3a20 7b20 6c22 636f 7461 6f69     ags" : {"locatio
   db984:	226e 203a 4822 6e61 616e 2d6e 6f48 656d     n": "Hannan-Home
   db994:	2c22 4422 7665 6369 2d65 614e 656d 3a22     ","Device-Name":
   db9a4:	2220 554b 564d 3041 3131 2c22 6422 7665      "KUMVA011","dev
   db9b4:	6369 5f65 6469 3a22 2220 7325 7d22 222c     ice_id": "%s"},"
   db9c4:	6176 756c 7365 3a22 7b20 7322 6e65 6f73     values": {"senso
   db9d4:	4f72 656e 3a22 3425 312e 2c66 2220 6573     rOne":%4.1f, "se
   db9e4:	736e 726f 7754 226f 253a 2e34 6631 202c     nsorTwo":%4.1f, 
   db9f4:	2220 6573 736e 726f 6854 6572 2265 253a      "sensorThree":%
   dba04:	2e34 6631 202c 2220 6573 736e 726f 6f46     4.1f,  "sensorFo
   dba14:	7275 3a22 3425 312e 2c66 2020 7322 6e65     ur":%4.1f,  "sen
   dba24:	6f73 4672 7669 2265 253a 2e34 6631 222c     sorFive":%4.1f,"
   dba34:	6573 736e 726f 6953 2278 253a 2e34 6631     sensorSix":%4.1f
   dba44:	222c 6f4d 6564 3a22 7d31 007d 227b 6573     ,"Mode":1}}.{"se
   dba54:	736e 726f 6e4f 2265 253a 2e34 6631 202c     nsorOne":%4.1f, 
   dba64:	7322 6e65 6f73 5472 6f77 3a22 3425 312e     "sensorTwo":%4.1
   dba74:	2c66 2020 7322 6e65 6f73 5472 7268 6565     f,  "sensorThree
   dba84:	3a22 3425 312e 2c66 2020 7322 6e65 6f73     ":%4.1f,  "senso
   dba94:	4672 756f 2272 253a 2e34 6631 202c 2220     rFour":%4.1f,  "
   dbaa4:	6573 736e 726f 6946 6576 3a22 3425 312e     sensorFive":%4.1
   dbab4:	2c66 7322 6e65 6f73 5372 7869 3a22 3425     f,"sensorSix":%4
   dbac4:	312e 2c66 4d22 646f 2265 313a 7d2c 7b00     .1f,"Mode":1,}.{
   dbad4:	5322 6e65 6f73 4f72 656e 2252 253a 2e34     "SensorOneR":%4.
   dbae4:	6631 202c 5322 6e65 6f73 4f72 656e 2253     1f, "SensorOneS"
   dbaf4:	253a 2e34 6631 202c 2220 6553 736e 726f     :%4.1f,  "Sensor
   dbb04:	6e4f 5465 3a22 3425 312e 2c66 2020 7322     OneT":%4.1f,  "s
   dbb14:	6e65 6f73 5472 6f77 2252 253a 2e34 6631     ensorTwoR":%4.1f
   dbb24:	202c 2220 6573 736e 726f 7754 536f 3a22     ,  "sensorTwoS":
   dbb34:	3425 312e 2c66 7322 6e65 6f73 5472 6f77     %4.1f,"sensorTwo
   dbb44:	2254 253a 2e34 6631 222c 6f4d 6564 3a22     T":%4.1f,"Mode":
   dbb54:	7d32 7b00 5322 6e65 6f73 4f72 656e 2252     2}.{"SensorOneR"
   dbb64:	253a 2e34 6631 202c 5322 6e65 6f73 4f72     :%4.1f, "SensorO
   dbb74:	656e 2253 253a 2e34 6631 202c 2220 6553     neS":%4.1f,  "Se
   dbb84:	736e 726f 6e4f 5465 3a22 3425 312e 2c66     nsorOneT":%4.1f,
   dbb94:	2020 7322 6e65 6f73 4672 756f 2272 253a       "sensorFour":%
   dbba4:	2e34 6631 202c 2220 6573 736e 726f 6946     4.1f,  "sensorFi
   dbbb4:	6576 3a22 3425 312e 2c66 7322 6e65 6f73     ve":%4.1f,"senso
   dbbc4:	5372 7869 3a22 3425 312e 2c66 4d22 646f     rSix":%4.1f,"Mod
   dbbd4:	2265 333a 007d 227b 6553 736e 726f 6e4f     e":3}.{"SensorOn
   dbbe4:	5265 3a22 3425 312e 2c66 2220 6553 736e     eR":%4.1f, "Sens
   dbbf4:	726f 6e4f 5365 3a22 3425 312e 2c66 2020     orOneS":%4.1f,  
   dbc04:	5322 6e65 6f73 4f72 656e 2254 253a 2e34     "SensorOneT":%4.
   dbc14:	6631 202c 2220 6553 736e 726f 6e4f 4e65     1f,  "SensorOneN
   dbc24:	3a22 3425 312e 2c66 2020 7322 6e65 6f73     ":%4.1f,  "senso
   dbc34:	4672 7669 2265 253a 2e34 6631 222c 6573     rFive":%4.1f,"se
   dbc44:	736e 726f 6953 2278 253a 2e34 6631 222c     nsorSix":%4.1f,"
   dbc54:	6f4d 6564 3a22 7d34 7000 776f 7265 6f6d     Mode":4}.powermo
   dbc64:	696e 6f74 6972 676e 685f 6f6f 006b 6e69     nitoring_hook.in
   dbc74:	6c66 7875 685f 6f6f 006b 7246 6d6f 2520     flux_hook.From %
   dbc84:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   dbc94:	6e61 6973 6974 6e6f 7300 6170 6b72 642f     ansition.spark/d
   dbca4:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   dbcb4:	0064 7245 6f72 2072 7453 7461 2065 202d     d.Error State - 
   dbcc4:	6552 6573 0074 7453 7461 0065 5443 4f20     Reset.State.CT O
   dbcd4:	656e 203a 3325 312e 0066 5443 5420 6f77     ne: %3.1f.CT Two
   dbce4:	2520 2e33 6631 4300 2054 6854 6572 3a65      %3.1f.CT Three:
   dbcf4:	2520 2e33 6631 5300 6e65 6f73 2072 6f46      %3.1f.Sensor Fo
   dbd04:	7275 4320 6e6f 7473 6e61 2074 203a 3325     ur Constant : %3
   dbd14:	312e 0066 6553 736e 726f 4620 7669 2065     .1f.Sensor Five 
   dbd24:	6f43 736e 6174 746e 3a20 2520 2e33 6631     Constant : %3.1f
   dbd34:	5300 6e65 6f73 2072 6953 2078 6f43 736e     .Sensor Six Cons
   dbd44:	6174 746e 3a20 2520 2e33 6631 4300 6e6f     tant : %3.1f.Con
   dbd54:	7473 6e61 2074 6e4f 2065 6156 756c 2065     stant One Value 
   dbd64:	6573 2074 6f74 0020 6f43 736e 6174 746e     set to .Constant
   dbd74:	5420 6f77 5620 6c61 6575 7320 7465 7420      Two Value set t
   dbd84:	206f 4300 6e6f 7473 6e61 2074 6854 6572     o .Constant Thre
   dbd94:	2065 6156 756c 2065 6573 2074 6f74 0020     e Value set to .
   dbda4:	6f43 736e 6174 746e 4620 756f 2072 6156     Constant Four Va
   dbdb4:	756c 2065 6573 2074 6f74 0020 6f43 736e     lue set to .Cons
   dbdc4:	6174 746e 4620 7669 2065 6156 756c 2065     tant Five Value 
   dbdd4:	6573 2074 6f74 0020 6f43 736e 6174 746e     set to .Constant
   dbde4:	5320 7869 5620 6c61 6575 7320 7465 7420      Six Value set t
   dbdf4:	206f 2f00 6f68 6b6f 722d 7365 6f70 736e     o ./hook-respons
   dbe04:	2f65 6f70 6577 6d72 6e6f 7469 726f 6e69     e/powermonitorin
   dbe14:	5f67 6f68 6b6f 002f 6552 656c 7361 0065     g_hook/.Release.
   dbe24:	6142 7474 7265 0079 6142 7474 7265 4379     Battery.BatteryC
   dbe34:	6e6f 6574 7478 4b00 6565 2070 6c41 7669     ontext.Keep Aliv
   dbe44:	2065 6553 0063 6552 6f70 7472 6e69 2067     e Sec.Reporting 
   dbe54:	7544 6172 6974 6e6f 4f00 6570 6172 6974     Duration.Operati
   dbe64:	6e6f 4d20 646f 0065 654d 7361 7275 2d65     on Mode.Measure-
   dbe74:	6f4e 0077 6556 6272 736f 2d65 6f4d 6564     Now.Verbose-Mode
   dbe84:	5300 7465 4320 6e6f 7473 6e61 2074 6e4f     .Set Constant On
   dbe94:	0065 6553 2074 6f43 736e 6174 746e 5420     e.Set Constant T
   dbea4:	6f77 5300 7465 4320 6e6f 7473 6e61 2074     wo.Set Constant 
   dbeb4:	6854 6572 0065 6553 2074 6f43 736e 6174     Three.Set Consta
   dbec4:	746e 4620 756f 0072 6553 2074 6f43 736e     nt Four.Set Cons
   dbed4:	6174 746e 4620 7669 0065 6553 2074 6f43     tant Five.Set Co
   dbee4:	736e 6174 746e 5320 7869 4500 616e 6c62     nstant Six.Enabl
   dbef4:	2065 6553 736e 726f 4400 7369 6261 656c     e Sensor.Disable
   dbf04:	5320 6e65 6f73 0072 704f 7265 7461 6e69      Sensor.Operatin
   dbf14:	2067 6f4d 6564 5200 7065 726f 6974 676e     g Mode.Reporting
   dbf24:	4420 7275 7461 6f69 286e 494d 554e 4554      Duration(MINUTE
   dbf34:	2953 5200 6265 6f6f 2074 6544 6976 6563     S).Reboot Device
   dbf44:	5300 7465 7075 4c20 6f6f 0070 6f4c 6461     .Setup Loop.Load
   dbf54:	6e69 2067 6544 6166 6c75 7374 4c00 616f     ing Defaults.Loa
   dbf64:	6964 676e 4620 6f72 206d 5246 4d41 5300     ding From FRAM.S
   dbf74:	6174 7472 7075 0000                         tartup..

000dbf7c <_ZTV5Timer>:
	...
   dbf84:	42b5 000d 4309 000d 41a1 000d               .B...C...A..

000dbf90 <_ZTV17PublishQueueAsync>:
	...
   dbf98:	41ad 000d 41c1 000d 68cd 000d 6a59 000d     .A...A...h..Yj..
   dbfa8:	6a19 000d 69f7 000d 6b9f 000d 6a3f 000d     .j...i...k..?j..

000dbfb8 <_ZTV8MB85RC64>:
	...
   dbfc0:	41d5 000d 41e9 000d 5ec5 000d 5f5b 000d     .A...A...^..[_..
   dbfd0:	5fdd 000d b6e8 000d b6f0 000d b6f4 000d     ._..............
   dbfe0:	b6fd 000d b705 000d b711 000d b717 000d     ................
   dbff0:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dc000:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dc030 <_ZL13releaseNumber>:
   dc030:	3131 302e 0030 0000                         11.00...

000dc038 <_ZL17FRAMversionNumber>:
   dc038:	0016 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dc048:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dc058:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dc068 <_ZTV6MB85RC>:
	...
   dc070:	5de5 000d 5de7 000d 5ec5 000d 5f5b 000d     .]...]...^..[_..
   dc080:	5fdd 000d 6564 6976 6563 6552 6461 6620     ._..deviceRead f
   dc090:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dc0a0:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dc0b0:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dc0c0:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dc0d0:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dc0e0:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dc0f0:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dc100:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dc110:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dc120:	0063 0000                                   c...

000dc124 <_ZTV12MCP79410SRAM>:
	...
   dc12c:	609d 000d 60b3 000d 608d 000d 6091 000d     .`...`...`...`..
   dc13c:	60dd 000d 63c5 000d 65e5 000d               .`...c...e..

000dc148 <_ZTV12MCP79410Time>:
	...
   dc150:	60a1 000d 60a5 000d                         .`...`..

000dc158 <_ZTV14MCP79410EEPROM>:
	...
   dc160:	609f 000d 60c1 000d 6095 000d 6099 000d     .`...`...`...`..
   dc170:	60dd 000d 63ff 000d 6825 000d               .`...c..%h..

000dc17c <_ZTV8MCP79410>:
	...
   dc184:	60a3 000d 60cf 000d 7550 6c62 7369 5168     .`...`..PublishQ
   dc194:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dc1a4:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dc1b4:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dc1c4:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dc1d4:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dc1e4:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dc1f4:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dc204:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dc214:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dc224:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dc234:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dc244:	7162 0000                                   bq..

000dc248 <_ZTV21PublishQueueAsyncBase>:
	...
   dc258:	68cd 000d 40a5 000d 40a5 000d 40a5 000d     .h...@...@...@..
   dc268:	40a5 000d 40a5 000d                         .@...@..

000dc270 <_ZTV25PublishQueueAsyncRetained>:
	...
   dc278:	69b5 000d 69c9 000d 68cd 000d 6a59 000d     .i...i...h..Yj..
   dc288:	6a19 000d 69f7 000d 6b9f 000d 6a3f 000d     .j...i...k..?j..

000dc298 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc2a0:	762d 000d 7633 000d 7671 000d 7641 000d     -v..3v..qv..Av..
   dc2b0:	762f 000d                                   /v..

000dc2b4 <_ZTVN5spark13EthernetClassE>:
	...
   dc2bc:	7c13 000d 7c09 000d 7bff 000d 7bf5 000d     .|...|...{...{..
   dc2cc:	7be9 000d 7bdd 000d 7ed9 000d 7ee1 000d     .{...{...~...~..
   dc2dc:	7bd1 000d 7bc9 000d 7bbf 000d 7bb5 000d     .{...{...{...{..
   dc2ec:	7f11 000d                                   ....

000dc2f0 <_ZTV7TwoWire>:
	...
   dc2f8:	7c31 000d 7c7b 000d 7c53 000d 7c33 000d     1|..{|..S|..3|..
   dc308:	7c5b 000d 7c63 000d 7c6b 000d 7c73 000d     [|..c|..k|..s|..

000dc318 <_ZTV9IPAddress>:
	...
   dc320:	7dad 000d 7d9d 000d 7d9f 000d 7061 0070     .}...}...}..app.

000dc330 <_ZTVN5spark12NetworkClassE>:
	...
   dc338:	7e99 000d 7ea3 000d 7ead 000d 7eb7 000d     .~...~...~...~..
   dc348:	7ec1 000d 7ecd 000d 7ed9 000d 7ee1 000d     .~...~...~...~..
   dc358:	7ee9 000d 7ef5 000d 7efd 000d 7f07 000d     .~...~...~......
   dc368:	7f11 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   dc378:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   dc388:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000dc398 <_ZTV11USARTSerial>:
	...
   dc3a0:	85e5 000d 8651 000d 8629 000d 8005 000d     ....Q...).......
   dc3b0:	85f9 000d 8615 000d 8607 000d 8623 000d     ............#...
   dc3c0:	85e7 000d 85eb 000d                         ........

000dc3c8 <_ZTV9USBSerial>:
	...
   dc3d0:	86e5 000d 874d 000d 8723 000d 8005 000d     ....M...#.......
   dc3e0:	8715 000d 86e7 000d 86f7 000d 8747 000d     ............G...
   dc3f0:	8707 000d 86e1 000d                         ........

000dc3f8 <_ZTVN5spark9WiFiClassE>:
	...
   dc400:	8847 000d 883d 000d 8833 000d 87e9 000d     G...=...3.......
   dc410:	8827 000d 881b 000d 7ed9 000d 7ee1 000d     '........~...~..
   dc420:	880f 000d 8807 000d 87fd 000d 87f3 000d     ................
   dc430:	7f11 000d                                   ....

000dc434 <_ZSt7nothrow>:
   dc434:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   dc444:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   dc454:	2e25 6432 2520 0a64                          %.2d %d..

000dc45d <day_name.6145>:
   dc45d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc46d:	6972 6153                                    riSat

000dc472 <mon_name.6146>:
   dc472:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc482:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc492:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dc4a4 <fpi.7566>:
   dc4a4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc4b4:	0000 0000                                   ....

000dc4b8 <fpinan.7602>:
   dc4b8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dc4d0 <tinytens>:
   dc4d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc4e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc4f0:	6f43 64ac 0628 1168                         Co.d(.h.

000dc4f8 <_ctype_>:
   dc4f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc508:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc518:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc528:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc538:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc548:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc558:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc568:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc578:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc5fc <_C_numeric_locale>:
   dc5fc:	b850 000d c45c 000d d954 2003 0043 4f50     P...\...T.. C.PO
   dc60c:	4953 0058                                   SIX.

000dc610 <__mprec_bigtens>:
   dc610:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc620:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc630:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc638 <__mprec_tens>:
   dc638:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc648:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc658:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc668:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc678:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc688:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc698:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc6a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc6b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc6c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc6d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc6e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc6f8:	9db4 79d9 7843 44ea                         ...yCx.D

000dc700 <p05.7490>:
   dc700:	0005 0000 0019 0000 007d 0000               ........}...

000dc70c <link_const_variable_data_end>:
   dc70c:	000d5a59 	.word	0x000d5a59
   dc710:	000d6855 	.word	0x000d6855
   dc714:	000d6e31 	.word	0x000d6e31
   dc718:	000d7605 	.word	0x000d7605
   dc71c:	000d7c1d 	.word	0x000d7c1d
   dc720:	000d7e89 	.word	0x000d7e89
   dc724:	000d7ff1 	.word	0x000d7ff1
   dc728:	000d80a5 	.word	0x000d80a5
   dc72c:	000d8291 	.word	0x000d8291
   dc730:	000d85d1 	.word	0x000d85d1
   dc734:	000d8851 	.word	0x000d8851

000dc738 <link_constructors_end>:
	...
