
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a8c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000944  2003f400  000de8e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003dc30  000df224  0001dc30  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000908  2003def0  2003def0  0002def0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000df4e0  000df4e0  0001f4e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000df50c  000df50c  0001f50c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002386f4  00000000  00000000  0001f510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002020a  00000000  00000000  00257c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00047b1e  00000000  00000000  00277e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003950  00000000  00000000  002bf92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bfc0  00000000  00000000  002c327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043424  00000000  00000000  002cf23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00056e80  00000000  00000000  00312660  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001480f9  00000000  00000000  003694e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ab78  00000000  00000000  004b15dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fc11 	bl	db858 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fc33 	bl	db8a8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc30 	.word	0x2003dc30
   d404c:	000df224 	.word	0x000df224
   d4050:	2003deec 	.word	0x2003deec
   d4054:	2003def0 	.word	0x2003def0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fc75 	bl	da950 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de8a4 	.word	0x000de8a4
   d4080:	000de8d8 	.word	0x000de8d8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f002 b89e 	b.w	d61c4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 ff19 	bl	d5ec0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bc1f 	b.w	da8d4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 be45 	b.w	d8d24 <malloc>

000d409a <_Znaj>:
   d409a:	f004 be43 	b.w	d8d24 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 be49 	b.w	d8d34 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f004 be47 	b.w	d8d34 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 fcf2 	bl	d8a98 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d87c9 	.word	0x000d87c9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN18CloudConfigStorage13getDataHeaderEv>:
     * 
     * This is only available in classes derived from CloudConfigStorageData, which is all
     * of them except CloudConfigDataStatic, which is not updateable and therefore does not
     * need the structure.
     */
    virtual CloudConfigDataHeader *getDataHeader() { return 0; };
   d40cc:	2000      	movs	r0, #0
   d40ce:	4770      	bx	lr

000d40d0 <_ZN18CloudConfigStorage4loopEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };

    /**
     * @brief Called from loop(). Optional. Only needed if the storage method wants loop processing time.
     */
    virtual void loop() {};
   d40d0:	4770      	bx	lr

000d40d2 <_ZN18CloudConfigStorage10updateDataEPKc>:
     * 
     * @param json The new JSON data to save
     * 
     * This is subclassed in CloudConfigStorageData.
     */
    virtual bool updateData(const char *json) { return false; };
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr

000d40d6 <_ZN22CloudConfigStorageData13getDataHeaderEv>:
    CloudConfigStorageData &withData(CloudConfigDataHeader *header, size_t dataSize);

    /**
     * @brief Gets a pointer to the CloudConfigDataHeader structure
     */
    virtual CloudConfigDataHeader *getDataHeader() { return header; };
   d40d6:	6900      	ldr	r0, [r0, #16]
   d40d8:	4770      	bx	lr

000d40da <_ZN26CloudConfigStorageRetained4saveEv>:
    virtual void setup() { validate(); };

    /**
     * @brief Retained data doesn't require an explict save
     */
    virtual bool save() { return true; };
   d40da:	2001      	movs	r0, #1
   d40dc:	4770      	bx	lr
	...

000d40e0 <_Z11watchdogISRv>:
  fram.put(FRAM::sensorConstantsAddr,sensorConstants);
}

void watchdogISR()
{
  watchdogFlag = true;
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z11watchdogISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e5e9 	.word	0x2003e5e9

000d40ec <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ec:	6803      	ldr	r3, [r0, #0]
   d40ee:	4718      	bx	r3

000d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f0:	2a01      	cmp	r2, #1
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f4:	2a02      	cmp	r2, #2
   d40f6:	d003      	beq.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f8:	2000      	movs	r0, #0
   d40fa:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40fc:	6001      	str	r1, [r0, #0]
	      break;
   d40fe:	e7fb      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4100:	680b      	ldr	r3, [r1, #0]
   d4102:	6003      	str	r3, [r0, #0]
	}
   d4104:	e7f8      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  switch (__op)
   d4106:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4108:	bf08      	it	eq
   d410a:	6001      	streq	r1, [r0, #0]
	}
   d410c:	2000      	movs	r0, #0
   d410e:	4770      	bx	lr

000d4110 <_ZNSt17_Function_handlerIFvPKcEZ5setupEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
	    std::forward<_ArgTypes>(__args)...);
      }
   d4110:	4770      	bx	lr

000d4112 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlPKcE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d4112:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4114:	bf08      	it	eq
   d4116:	6001      	streq	r1, [r0, #0]
	}
   d4118:	2000      	movs	r0, #0
   d411a:	4770      	bx	lr

000d411c <_ZN26CloudConfigStorageRetained5setupEv>:
    virtual void setup() { validate(); };
   d411c:	f002 bcc0 	b.w	d6aa0 <_ZN22CloudConfigStorageData8validateEv>

000d4120 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z10measureNow6String+0x14>)
   d4124:	f006 f818 	bl	da158 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4128:	b118      	cbz	r0, d4132 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d412a:	4b03      	ldr	r3, [pc, #12]	; (d4138 <_Z10measureNow6String+0x18>)
   d412c:	2203      	movs	r2, #3
   d412e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dd74b 	.word	0x000dd74b
   d4138:	2003e5b5 	.word	0x2003e5b5

000d413c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d413c:	b510      	push	{r4, lr}
   d413e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	220a      	movs	r2, #10
   d4144:	a901      	add	r1, sp, #4
   d4146:	f008 fae3 	bl	dc710 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d414a:	1e43      	subs	r3, r0, #1
   d414c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d414e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4150:	d831      	bhi.n	d41b6 <_Z12enableSensor6String+0x7a>
 
  if (tempSensor == 1){
   d4152:	2801      	cmp	r0, #1
   d4154:	d10a      	bne.n	d416c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d4156:	4b19      	ldr	r3, [pc, #100]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d4158:	4919      	ldr	r1, [pc, #100]	; (d41c0 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorOneConnected = true;
   d415a:	7718      	strb	r0, [r3, #28]
    sysStatusWriteNeeded = true;    
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d415c:	a802      	add	r0, sp, #8
   d415e:	f007 fbd9 	bl	db914 <strcpy>
    sysStatusWriteNeeded = true; 
   d4162:	4b18      	ldr	r3, [pc, #96]	; (d41c4 <_Z12enableSensor6String+0x88>)
   d4164:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d4166:	4620      	mov	r0, r4
   d4168:	b042      	add	sp, #264	; 0x108
   d416a:	bd10      	pop	{r4, pc}
  } else if (tempSensor == 2){
   d416c:	2802      	cmp	r0, #2
   d416e:	d104      	bne.n	d417a <_Z12enableSensor6String+0x3e>
    sysStatus.sensorTwoConnected = true;
   d4170:	4b12      	ldr	r3, [pc, #72]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4172:	4915      	ldr	r1, [pc, #84]	; (d41c8 <_Z12enableSensor6String+0x8c>)
    sysStatus.sensorTwoConnected = true;
   d4174:	2401      	movs	r4, #1
   d4176:	775c      	strb	r4, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4178:	e7f0      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 3){
   d417a:	2803      	cmp	r0, #3
   d417c:	d104      	bne.n	d4188 <_Z12enableSensor6String+0x4c>
    sysStatus.sensorThreeConnected = true;
   d417e:	4b0f      	ldr	r3, [pc, #60]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4180:	4912      	ldr	r1, [pc, #72]	; (d41cc <_Z12enableSensor6String+0x90>)
    sysStatus.sensorThreeConnected = true;
   d4182:	2401      	movs	r4, #1
   d4184:	779c      	strb	r4, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4186:	e7e9      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 4){
   d4188:	2804      	cmp	r0, #4
   d418a:	d104      	bne.n	d4196 <_Z12enableSensor6String+0x5a>
    sysStatus.sensorFourConnected = true;
   d418c:	4b0b      	ldr	r3, [pc, #44]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d418e:	4910      	ldr	r1, [pc, #64]	; (d41d0 <_Z12enableSensor6String+0x94>)
    sysStatus.sensorFourConnected = true;
   d4190:	2401      	movs	r4, #1
   d4192:	77dc      	strb	r4, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4194:	e7e2      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 5){
   d4196:	2805      	cmp	r0, #5
   d4198:	d105      	bne.n	d41a6 <_Z12enableSensor6String+0x6a>
    sysStatus.sensorFiveConnected = true;
   d419a:	4b08      	ldr	r3, [pc, #32]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d419c:	490d      	ldr	r1, [pc, #52]	; (d41d4 <_Z12enableSensor6String+0x98>)
    sysStatus.sensorFiveConnected = true;
   d419e:	2401      	movs	r4, #1
   d41a0:	f883 4020 	strb.w	r4, [r3, #32]
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d41a4:	e7da      	b.n	d415c <_Z12enableSensor6String+0x20>
  else if (tempSensor == 6){
   d41a6:	2806      	cmp	r0, #6
   d41a8:	d105      	bne.n	d41b6 <_Z12enableSensor6String+0x7a>
    sysStatus.sensorSixConnected = true;
   d41aa:	4b04      	ldr	r3, [pc, #16]	; (d41bc <_Z12enableSensor6String+0x80>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41ac:	490a      	ldr	r1, [pc, #40]	; (d41d8 <_Z12enableSensor6String+0x9c>)
    sysStatus.sensorSixConnected = true;
   d41ae:	2401      	movs	r4, #1
   d41b0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d41b4:	e7d2      	b.n	d415c <_Z12enableSensor6String+0x20>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41b6:	2400      	movs	r4, #0
   d41b8:	e7d5      	b.n	d4166 <_Z12enableSensor6String+0x2a>
   d41ba:	bf00      	nop
   d41bc:	2003e5b8 	.word	0x2003e5b8
   d41c0:	000dd74d 	.word	0x000dd74d
   d41c4:	2003e5e8 	.word	0x2003e5e8
   d41c8:	000dd760 	.word	0x000dd760
   d41cc:	000dd773 	.word	0x000dd773
   d41d0:	000dd788 	.word	0x000dd788
   d41d4:	000dd79c 	.word	0x000dd79c
   d41d8:	000dd7b0 	.word	0x000dd7b0

000d41dc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41dc:	6943      	ldr	r3, [r0, #20]
   d41de:	b113      	cbz	r3, d41e6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41e0:	6983      	ldr	r3, [r0, #24]
   d41e2:	300c      	adds	r0, #12
   d41e4:	4718      	bx	r3
            callback();
        }
    }
   d41e6:	4770      	bx	lr

000d41e8 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4b03      	ldr	r3, [pc, #12]	; (d41f8 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41ec:	6003      	str	r3, [r0, #0]
   d41ee:	4604      	mov	r4, r0
   d41f0:	f004 f81c 	bl	d822c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	000ddedc 	.word	0x000ddedc

000d41fc <_ZN17PublishQueueAsyncD0Ev>:
   d41fc:	b510      	push	{r4, lr}
   d41fe:	4604      	mov	r4, r0
   d4200:	f7ff fff2 	bl	d41e8 <_ZN17PublishQueueAsyncD1Ev>
   d4204:	4620      	mov	r0, r4
   d4206:	2138      	movs	r1, #56	; 0x38
   d4208:	f006 fcb1 	bl	dab6e <_ZdlPvj>
   d420c:	4620      	mov	r0, r4
   d420e:	bd10      	pop	{r4, pc}

000d4210 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4210:	b510      	push	{r4, lr}
   d4212:	4b03      	ldr	r3, [pc, #12]	; (d4220 <_ZN8MB85RC64D1Ev+0x10>)
   d4214:	6003      	str	r3, [r0, #0]
   d4216:	4604      	mov	r4, r0
   d4218:	f003 fa38 	bl	d768c <_ZN6MB85RCD1Ev>
   d421c:	4620      	mov	r0, r4
   d421e:	bd10      	pop	{r4, pc}
   d4220:	000ddf04 	.word	0x000ddf04

000d4224 <_ZN8MB85RC64D0Ev>:
   d4224:	b510      	push	{r4, lr}
   d4226:	4604      	mov	r4, r0
   d4228:	f7ff fff2 	bl	d4210 <_ZN8MB85RC64D1Ev>
   d422c:	4620      	mov	r0, r4
   d422e:	2110      	movs	r1, #16
   d4230:	f006 fc9d 	bl	dab6e <_ZdlPvj>
   d4234:	4620      	mov	r0, r4
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4238:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d423a:	2100      	movs	r1, #0
   d423c:	4604      	mov	r4, r0
   d423e:	4608      	mov	r0, r1
   d4240:	f004 fa4a 	bl	d86d8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4244:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4246:	4620      	mov	r0, r4
   d4248:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d424a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d424c:	f004 fa5c 	bl	d8708 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4250:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4252:	b10c      	cbz	r4, d4258 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4254:	2301      	movs	r3, #1
   d4256:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4258:	2100      	movs	r1, #0
   d425a:	2001      	movs	r0, #1
   d425c:	f004 fa3c 	bl	d86d8 <os_thread_scheduling>
            }
        }
        if (t) {
   d4260:	b12c      	cbz	r4, d426e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4262:	6823      	ldr	r3, [r4, #0]
   d4264:	4620      	mov	r0, r4
   d4266:	689b      	ldr	r3, [r3, #8]
   d4268:	4798      	blx	r3
            t->running = false;
   d426a:	2300      	movs	r3, #0
   d426c:	7123      	strb	r3, [r4, #4]
        }
    }
   d426e:	b002      	add	sp, #8
   d4270:	bd10      	pop	{r4, pc}
	...

000d4274 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4274:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4276:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4278:	b090      	sub	sp, #64	; 0x40
   d427a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d427c:	b92b      	cbnz	r3, d428a <_Z14UbidotsHandlerPKcS0_+0x16>
    snprintf(responseString, sizeof(responseString),"No Data");
   d427e:	4918      	ldr	r1, [pc, #96]	; (d42e0 <_Z14UbidotsHandlerPKcS0_+0x6c>)
   d4280:	4668      	mov	r0, sp
   d4282:	f007 fb47 	bl	db914 <strcpy>
}
   d4286:	b010      	add	sp, #64	; 0x40
   d4288:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d428a:	4608      	mov	r0, r1
   d428c:	f007 fabf 	bl	db80e <atoi>
   d4290:	28c8      	cmp	r0, #200	; 0xc8
   d4292:	d10e      	bne.n	d42b2 <_Z14UbidotsHandlerPKcS0_+0x3e>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4294:	4913      	ldr	r1, [pc, #76]	; (d42e4 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4296:	4668      	mov	r0, sp
   d4298:	f007 fb3c 	bl	db914 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d429c:	f006 f933 	bl	da506 <_ZN9TimeClass3nowEv>
   d42a0:	4b11      	ldr	r3, [pc, #68]	; (d42e8 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d42a2:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d42a4:	4b11      	ldr	r3, [pc, #68]	; (d42ec <_Z14UbidotsHandlerPKcS0_+0x78>)
   d42a6:	2201      	movs	r2, #1
   d42a8:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d42aa:	4b11      	ldr	r3, [pc, #68]	; (d42f0 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d42ac:	2200      	movs	r2, #0
   d42ae:	701a      	strb	r2, [r3, #0]
   d42b0:	e7e9      	b.n	d4286 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d42b2:	4620      	mov	r0, r4
   d42b4:	f007 faab 	bl	db80e <atoi>
   d42b8:	28c9      	cmp	r0, #201	; 0xc9
   d42ba:	d0eb      	beq.n	d4294 <_Z14UbidotsHandlerPKcS0_+0x20>
  else if((atoi(data)) < 10000){
   d42bc:	4620      	mov	r0, r4
   d42be:	f007 faa6 	bl	db80e <atoi>
   d42c2:	f242 730f 	movw	r3, #9999	; 0x270f
   d42c6:	4298      	cmp	r0, r3
   d42c8:	dcdd      	bgt.n	d4286 <_Z14UbidotsHandlerPKcS0_+0x12>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d42ca:	4620      	mov	r0, r4
   d42cc:	f007 fa9f 	bl	db80e <atoi>
   d42d0:	4a08      	ldr	r2, [pc, #32]	; (d42f4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d42d2:	4603      	mov	r3, r0
   d42d4:	2140      	movs	r1, #64	; 0x40
   d42d6:	4668      	mov	r0, sp
   d42d8:	f004 fd44 	bl	d8d64 <snprintf>
}
   d42dc:	e7d3      	b.n	d4286 <_Z14UbidotsHandlerPKcS0_+0x12>
   d42de:	bf00      	nop
   d42e0:	000dd7c3 	.word	0x000dd7c3
   d42e4:	000dd7cb 	.word	0x000dd7cb
   d42e8:	2003e5b8 	.word	0x2003e5b8
   d42ec:	2003e5e8 	.word	0x2003e5e8
   d42f0:	2003df5f 	.word	0x2003df5f
   d42f4:	000dd7dd 	.word	0x000dd7dd

000d42f8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42f8:	b510      	push	{r4, lr}
   d42fa:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42fc:	6800      	ldr	r0, [r0, #0]
   d42fe:	b108      	cbz	r0, d4304 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4300:	f004 fd18 	bl	d8d34 <free>
class SystemClass {
   d4304:	4620      	mov	r0, r4
   d4306:	bd10      	pop	{r4, pc}

000d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4308:	2300      	movs	r3, #0
   d430a:	2204      	movs	r2, #4
   d430c:	f004 bc42 	b.w	d8b94 <spark_variable>

000d4310 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4310:	b510      	push	{r4, lr}
      if (_M_manager)
   d4312:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4314:	4604      	mov	r4, r0
      if (_M_manager)
   d4316:	b113      	cbz	r3, d431e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4318:	2203      	movs	r2, #3
   d431a:	4601      	mov	r1, r0
   d431c:	4798      	blx	r3
    }
   d431e:	4620      	mov	r0, r4
   d4320:	bd10      	pop	{r4, pc}
	...

000d4324 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4324:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4326:	4b13      	ldr	r3, [pc, #76]	; (d4374 <_ZN5TimerD1Ev+0x50>)
   d4328:	6003      	str	r3, [r0, #0]
   d432a:	4604      	mov	r4, r0
        if (handle) {
   d432c:	6880      	ldr	r0, [r0, #8]
   d432e:	b1c8      	cbz	r0, d4364 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4330:	2500      	movs	r5, #0
   d4332:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4336:	e9cd 3500 	strd	r3, r5, [sp]
   d433a:	2102      	movs	r1, #2
   d433c:	462b      	mov	r3, r5
   d433e:	462a      	mov	r2, r5
   d4340:	f004 f9ea 	bl	d8718 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4344:	68a0      	ldr	r0, [r4, #8]
   d4346:	4629      	mov	r1, r5
   d4348:	f004 fa1e 	bl	d8788 <os_timer_set_id>
            while (running) {
   d434c:	7923      	ldrb	r3, [r4, #4]
   d434e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4352:	b113      	cbz	r3, d435a <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4354:	f004 f9b8 	bl	d86c8 <os_thread_yield>
            while (running) {
   d4358:	e7f8      	b.n	d434c <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d435a:	68a0      	ldr	r0, [r4, #8]
   d435c:	4629      	mov	r1, r5
   d435e:	f004 f9cb 	bl	d86f8 <os_timer_destroy>
            handle = nullptr;
   d4362:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4364:	f104 000c 	add.w	r0, r4, #12
   d4368:	f7ff ffd2 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
    }
   d436c:	4620      	mov	r0, r4
   d436e:	b003      	add	sp, #12
   d4370:	bd30      	pop	{r4, r5, pc}
   d4372:	bf00      	nop
   d4374:	000ddec8 	.word	0x000ddec8

000d4378 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4378:	b510      	push	{r4, lr}
   d437a:	4604      	mov	r4, r0
    }
   d437c:	f7ff ffd2 	bl	d4324 <_ZN5TimerD1Ev>
   d4380:	4620      	mov	r0, r4
   d4382:	211c      	movs	r1, #28
   d4384:	f006 fbf3 	bl	dab6e <_ZdlPvj>
   d4388:	4620      	mov	r0, r4
   d438a:	bd10      	pop	{r4, pc}

000d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d438c:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d438e:	4801      	ldr	r0, [pc, #4]	; (d4394 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4390:	f004 bdd5 	b.w	d8f3e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4394:	000d8ef7 	.word	0x000d8ef7

000d4398 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4398:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d439a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d439c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d439e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d43a6:	2201      	movs	r2, #1
   d43a8:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43aa:	4341      	muls	r1, r0
   d43ac:	466a      	mov	r2, sp
   d43ae:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d43b0:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43b4:	f004 fc46 	bl	d8c44 <spark_set_connection_property>
    }
   d43b8:	b003      	add	sp, #12
   d43ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d43be <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43be:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43c0:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43c2:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43c4:	2100      	movs	r1, #0
   d43c6:	b140      	cbz	r0, d43da <_ZN5Timer12changePeriodEjj+0x1c>
   d43c8:	e9cd 2100 	strd	r2, r1, [sp]
   d43cc:	460a      	mov	r2, r1
   d43ce:	2103      	movs	r1, #3
   d43d0:	f004 f9a2 	bl	d8718 <os_timer_change>
   d43d4:	fab0 f080 	clz	r0, r0
   d43d8:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43da:	b003      	add	sp, #12
   d43dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d43e0 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d43e0:	b513      	push	{r0, r1, r4, lr}
   d43e2:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d43e4:	4608      	mov	r0, r1
   d43e6:	9101      	str	r1, [sp, #4]
   d43e8:	f007 fab9 	bl	db95e <strlen>
   d43ec:	9901      	ldr	r1, [sp, #4]
   d43ee:	4602      	mov	r2, r0
   d43f0:	4620      	mov	r0, r4
}
   d43f2:	b002      	add	sp, #8
   d43f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d43f8:	f005 bc34 	b.w	d9c64 <_ZN5spark10JSONWriter4nameEPKcj>

000d43fc <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d43fc:	b513      	push	{r0, r1, r4, lr}
   d43fe:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4400:	4608      	mov	r0, r1
   d4402:	9101      	str	r1, [sp, #4]
   d4404:	f007 faab 	bl	db95e <strlen>
   d4408:	9901      	ldr	r1, [sp, #4]
   d440a:	4602      	mov	r2, r0
   d440c:	4620      	mov	r0, r4
}
   d440e:	b002      	add	sp, #8
   d4410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4414:	f005 bc36 	b.w	d9c84 <_ZN5spark10JSONWriter5valueEPKcj>

000d4418 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4418:	b40e      	push	{r1, r2, r3}
   d441a:	b510      	push	{r4, lr}
   d441c:	b08d      	sub	sp, #52	; 0x34
   d441e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4420:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4422:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4426:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4428:	2300      	movs	r3, #0
   d442a:	2020      	movs	r0, #32
   d442c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4430:	e9cd 4200 	strd	r4, r2, [sp]
   d4434:	201e      	movs	r0, #30
   d4436:	aa04      	add	r2, sp, #16
   d4438:	f004 fb46 	bl	d8ac8 <log_message_v>
}
   d443c:	b00d      	add	sp, #52	; 0x34
   d443e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4442:	b003      	add	sp, #12
   d4444:	4770      	bx	lr

000d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4446:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4448:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d444a:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d444e:	f88d 3000 	strb.w	r3, [sp]
   d4452:	f88d 5004 	strb.w	r5, [sp, #4]
   d4456:	68e4      	ldr	r4, [r4, #12]
   d4458:	233c      	movs	r3, #60	; 0x3c
   d445a:	47a0      	blx	r4
	}
   d445c:	b003      	add	sp, #12
   d445e:	bd30      	pop	{r4, r5, pc}

000d4460 <_Z16setThirdPartySim6String>:
{
   d4460:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4462:	491c      	ldr	r1, [pc, #112]	; (d44d4 <_Z16setThirdPartySim6String+0x74>)
   d4464:	4605      	mov	r5, r0
   d4466:	f005 fe77 	bl	da158 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d446a:	4604      	mov	r4, r0
   d446c:	b300      	cbz	r0, d44b0 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d446e:	4c1a      	ldr	r4, [pc, #104]	; (d44d8 <_Z16setThirdPartySim6String+0x78>)
   d4470:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4472:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4474:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4476:	f7ff ff8f 	bl	d4398 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d447a:	6863      	ldr	r3, [r4, #4]
   d447c:	4817      	ldr	r0, [pc, #92]	; (d44dc <_Z16setThirdPartySim6String+0x7c>)
   d447e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4482:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4486:	4359      	muls	r1, r3
   d4488:	f7ff ff99 	bl	d43be <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d448c:	f004 fba2 	bl	d8bd4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4490:	b148      	cbz	r0, d44a6 <_Z16setThirdPartySim6String+0x46>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4492:	2300      	movs	r3, #0
   d4494:	f88d 3000 	strb.w	r3, [sp]
   d4498:	4b11      	ldr	r3, [pc, #68]	; (d44e0 <_Z16setThirdPartySim6String+0x80>)
   d449a:	4a12      	ldr	r2, [pc, #72]	; (d44e4 <_Z16setThirdPartySim6String+0x84>)
   d449c:	781b      	ldrb	r3, [r3, #0]
   d449e:	4912      	ldr	r1, [pc, #72]	; (d44e8 <_Z16setThirdPartySim6String+0x88>)
   d44a0:	4812      	ldr	r0, [pc, #72]	; (d44ec <_Z16setThirdPartySim6String+0x8c>)
   d44a2:	f7ff ffd0 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d44a6:	4b12      	ldr	r3, [pc, #72]	; (d44f0 <_Z16setThirdPartySim6String+0x90>)
   d44a8:	2001      	movs	r0, #1
   d44aa:	7018      	strb	r0, [r3, #0]
}
   d44ac:	b003      	add	sp, #12
   d44ae:	bd30      	pop	{r4, r5, pc}
   d44b0:	4910      	ldr	r1, [pc, #64]	; (d44f4 <_Z16setThirdPartySim6String+0x94>)
   d44b2:	4628      	mov	r0, r5
   d44b4:	f005 fe50 	bl	da158 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d44b8:	2800      	cmp	r0, #0
   d44ba:	d0f7      	beq.n	d44ac <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d44bc:	4b06      	ldr	r3, [pc, #24]	; (d44d8 <_Z16setThirdPartySim6String+0x78>)
   d44be:	705c      	strb	r4, [r3, #1]
   d44c0:	f004 fb88 	bl	d8bd4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d44c4:	2800      	cmp	r0, #0
   d44c6:	d0ee      	beq.n	d44a6 <_Z16setThirdPartySim6String+0x46>
   d44c8:	4b05      	ldr	r3, [pc, #20]	; (d44e0 <_Z16setThirdPartySim6String+0x80>)
   d44ca:	f88d 4000 	strb.w	r4, [sp]
   d44ce:	781b      	ldrb	r3, [r3, #0]
   d44d0:	4a09      	ldr	r2, [pc, #36]	; (d44f8 <_Z16setThirdPartySim6String+0x98>)
   d44d2:	e7e4      	b.n	d449e <_Z16setThirdPartySim6String+0x3e>
   d44d4:	000dd74b 	.word	0x000dd74b
   d44d8:	2003e5b8 	.word	0x2003e5b8
   d44dc:	2003e3c0 	.word	0x2003e3c0
   d44e0:	2003df3d 	.word	0x2003df3d
   d44e4:	000dd7fa 	.word	0x000dd7fa
   d44e8:	000dd88a 	.word	0x000dd88a
   d44ec:	2003e3e0 	.word	0x2003e3e0
   d44f0:	2003e5e8 	.word	0x2003e5e8
   d44f4:	000de47a 	.word	0x000de47a
   d44f8:	000dd80f 	.word	0x000dd80f

000d44fc <_Z12setKeepAlive6String>:
{
   d44fc:	b510      	push	{r4, lr}
   d44fe:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4500:	6800      	ldr	r0, [r0, #0]
   d4502:	220a      	movs	r2, #10
   d4504:	a903      	add	r1, sp, #12
   d4506:	f008 f903 	bl	dc710 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d450a:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d450e:	d822      	bhi.n	d4556 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d4510:	4c12      	ldr	r4, [pc, #72]	; (d455c <_Z12setKeepAlive6String+0x60>)
   d4512:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4514:	f7ff ff40 	bl	d4398 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4518:	6863      	ldr	r3, [r4, #4]
   d451a:	4811      	ldr	r0, [pc, #68]	; (d4560 <_Z12setKeepAlive6String+0x64>)
   d451c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4520:	4359      	muls	r1, r3
   d4522:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4526:	f7ff ff4a 	bl	d43be <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d452a:	6863      	ldr	r3, [r4, #4]
   d452c:	4a0d      	ldr	r2, [pc, #52]	; (d4564 <_Z12setKeepAlive6String+0x68>)
   d452e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4532:	a804      	add	r0, sp, #16
   d4534:	f004 fc16 	bl	d8d64 <snprintf>
   d4538:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d453a:	f88d 3000 	strb.w	r3, [sp]
   d453e:	4b0a      	ldr	r3, [pc, #40]	; (d4568 <_Z12setKeepAlive6String+0x6c>)
   d4540:	490a      	ldr	r1, [pc, #40]	; (d456c <_Z12setKeepAlive6String+0x70>)
   d4542:	781b      	ldrb	r3, [r3, #0]
   d4544:	480a      	ldr	r0, [pc, #40]	; (d4570 <_Z12setKeepAlive6String+0x74>)
   d4546:	aa04      	add	r2, sp, #16
   d4548:	f7ff ff7d 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d454c:	4b09      	ldr	r3, [pc, #36]	; (d4574 <_Z12setKeepAlive6String+0x78>)
   d454e:	2001      	movs	r0, #1
   d4550:	7018      	strb	r0, [r3, #0]
}
   d4552:	b044      	add	sp, #272	; 0x110
   d4554:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4556:	2000      	movs	r0, #0
   d4558:	e7fb      	b.n	d4552 <_Z12setKeepAlive6String+0x56>
   d455a:	bf00      	nop
   d455c:	2003e5b8 	.word	0x2003e5b8
   d4560:	2003e3c0 	.word	0x2003e3c0
   d4564:	000dd823 	.word	0x000dd823
   d4568:	2003df3d 	.word	0x2003df3d
   d456c:	000dd83c 	.word	0x000dd83c
   d4570:	2003e3e0 	.word	0x2003e3e0
   d4574:	2003e5e8 	.word	0x2003e5e8

000d4578 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d4578:	b500      	push	{lr}
   d457a:	b089      	sub	sp, #36	; 0x24
   d457c:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d457e:	f005 fdfd 	bl	da17c <_ZNK6String7toFloatEv>
   d4582:	4b0e      	ldr	r3, [pc, #56]	; (d45bc <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4584:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d4586:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d458a:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d458c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4590:	f005 fd86 	bl	da0a0 <_ZN6StringC1ERKS_>
   d4594:	2300      	movs	r3, #0
   d4596:	f88d 3000 	strb.w	r3, [sp]
   d459a:	4b09      	ldr	r3, [pc, #36]	; (d45c0 <_Z20setReportingDuration6String+0x48>)
   d459c:	9a04      	ldr	r2, [sp, #16]
   d459e:	781b      	ldrb	r3, [r3, #0]
   d45a0:	4908      	ldr	r1, [pc, #32]	; (d45c4 <_Z20setReportingDuration6String+0x4c>)
   d45a2:	4809      	ldr	r0, [pc, #36]	; (d45c8 <_Z20setReportingDuration6String+0x50>)
   d45a4:	f7ff ff4f 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45a8:	a804      	add	r0, sp, #16
   d45aa:	f005 fd0b 	bl	d9fc4 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d45ae:	4b07      	ldr	r3, [pc, #28]	; (d45cc <_Z20setReportingDuration6String+0x54>)
   d45b0:	2001      	movs	r0, #1
   d45b2:	7018      	strb	r0, [r3, #0]
}
   d45b4:	b009      	add	sp, #36	; 0x24
   d45b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ba:	bf00      	nop
   d45bc:	2003e5b8 	.word	0x2003e5b8
   d45c0:	2003df3d 	.word	0x2003df3d
   d45c4:	000dd847 	.word	0x000dd847
   d45c8:	2003e3e0 	.word	0x2003e3e0
   d45cc:	2003e5e8 	.word	0x2003e5e8

000d45d0 <_Z14setVerboseMode6String>:
{
   d45d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45d2:	4916      	ldr	r1, [pc, #88]	; (d462c <_Z14setVerboseMode6String+0x5c>)
   d45d4:	4605      	mov	r5, r0
   d45d6:	f005 fdbf 	bl	da158 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45da:	4604      	mov	r4, r0
   d45dc:	b188      	cbz	r0, d4602 <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d45de:	4b14      	ldr	r3, [pc, #80]	; (d4630 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45e0:	4a14      	ldr	r2, [pc, #80]	; (d4634 <_Z14setVerboseMode6String+0x64>)
   d45e2:	4915      	ldr	r1, [pc, #84]	; (d4638 <_Z14setVerboseMode6String+0x68>)
   d45e4:	4815      	ldr	r0, [pc, #84]	; (d463c <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d45e6:	2401      	movs	r4, #1
   d45e8:	725c      	strb	r4, [r3, #9]
   d45ea:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45ec:	f88d 3000 	strb.w	r3, [sp]
   d45f0:	4b13      	ldr	r3, [pc, #76]	; (d4640 <_Z14setVerboseMode6String+0x70>)
   d45f2:	781b      	ldrb	r3, [r3, #0]
   d45f4:	f7ff ff27 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45f8:	4b12      	ldr	r3, [pc, #72]	; (d4644 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d45fa:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d45fc:	701c      	strb	r4, [r3, #0]
}
   d45fe:	b003      	add	sp, #12
   d4600:	bd30      	pop	{r4, r5, pc}
   d4602:	4911      	ldr	r1, [pc, #68]	; (d4648 <_Z14setVerboseMode6String+0x78>)
   d4604:	4628      	mov	r0, r5
   d4606:	f005 fda7 	bl	da158 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d460a:	2800      	cmp	r0, #0
   d460c:	d0f7      	beq.n	d45fe <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d460e:	4b08      	ldr	r3, [pc, #32]	; (d4630 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4610:	4a0e      	ldr	r2, [pc, #56]	; (d464c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d4612:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4614:	4b0a      	ldr	r3, [pc, #40]	; (d4640 <_Z14setVerboseMode6String+0x70>)
   d4616:	f88d 4000 	strb.w	r4, [sp]
   d461a:	781b      	ldrb	r3, [r3, #0]
   d461c:	4906      	ldr	r1, [pc, #24]	; (d4638 <_Z14setVerboseMode6String+0x68>)
   d461e:	4807      	ldr	r0, [pc, #28]	; (d463c <_Z14setVerboseMode6String+0x6c>)
   d4620:	f7ff ff11 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4624:	4b07      	ldr	r3, [pc, #28]	; (d4644 <_Z14setVerboseMode6String+0x74>)
   d4626:	2001      	movs	r0, #1
   d4628:	7018      	strb	r0, [r3, #0]
    return 1;
   d462a:	e7e8      	b.n	d45fe <_Z14setVerboseMode6String+0x2e>
   d462c:	000dd74b 	.word	0x000dd74b
   d4630:	2003e5b8 	.word	0x2003e5b8
   d4634:	000dd869 	.word	0x000dd869
   d4638:	000dd88a 	.word	0x000dd88a
   d463c:	2003e3e0 	.word	0x2003e3e0
   d4640:	2003df3d 	.word	0x2003df3d
   d4644:	2003e5e8 	.word	0x2003e5e8
   d4648:	000de47a 	.word	0x000de47a
   d464c:	000dd87a 	.word	0x000dd87a

000d4650 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d4650:	b530      	push	{r4, r5, lr}
   d4652:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4654:	6800      	ldr	r0, [r0, #0]
   d4656:	220a      	movs	r2, #10
   d4658:	a903      	add	r1, sp, #12
   d465a:	f008 f859 	bl	dc710 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d465e:	1e43      	subs	r3, r0, #1
   d4660:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4662:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4664:	f04f 0500 	mov.w	r5, #0
   d4668:	d842      	bhi.n	d46f0 <_Z13disableSensor6String+0xa0>
 
  if (tempSensor == 1){
   d466a:	2801      	cmp	r0, #1
   d466c:	d113      	bne.n	d4696 <_Z13disableSensor6String+0x46>
    sysStatus.sensorOneConnected = false;
   d466e:	4b21      	ldr	r3, [pc, #132]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4670:	4921      	ldr	r1, [pc, #132]	; (d46f8 <_Z13disableSensor6String+0xa8>)
    sysStatus.sensorOneConnected = false;
   d4672:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4674:	a804      	add	r0, sp, #16
   d4676:	f007 f94d 	bl	db914 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d467a:	4b20      	ldr	r3, [pc, #128]	; (d46fc <_Z13disableSensor6String+0xac>)
   d467c:	f88d 5000 	strb.w	r5, [sp]
   d4680:	781b      	ldrb	r3, [r3, #0]
   d4682:	491f      	ldr	r1, [pc, #124]	; (d4700 <_Z13disableSensor6String+0xb0>)
   d4684:	481f      	ldr	r0, [pc, #124]	; (d4704 <_Z13disableSensor6String+0xb4>)
   d4686:	aa04      	add	r2, sp, #16
   d4688:	f7ff fedd 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
   d468c:	4b1e      	ldr	r3, [pc, #120]	; (d4708 <_Z13disableSensor6String+0xb8>)
   d468e:	701c      	strb	r4, [r3, #0]
    return 1;      
  }
  return 0;
}
   d4690:	4620      	mov	r0, r4
   d4692:	b045      	add	sp, #276	; 0x114
   d4694:	bd30      	pop	{r4, r5, pc}
  } else if (tempSensor == 2){
   d4696:	2802      	cmp	r0, #2
   d4698:	d110      	bne.n	d46bc <_Z13disableSensor6String+0x6c>
    sysStatus.sensorTwoConnected = false;
   d469a:	4b16      	ldr	r3, [pc, #88]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d469c:	491b      	ldr	r1, [pc, #108]	; (d470c <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorTwoConnected = false;
   d469e:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46a0:	a804      	add	r0, sp, #16
   d46a2:	f007 f937 	bl	db914 <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d46a6:	4b15      	ldr	r3, [pc, #84]	; (d46fc <_Z13disableSensor6String+0xac>)
   d46a8:	f88d 5000 	strb.w	r5, [sp]
   d46ac:	781b      	ldrb	r3, [r3, #0]
   d46ae:	4914      	ldr	r1, [pc, #80]	; (d4700 <_Z13disableSensor6String+0xb0>)
   d46b0:	4814      	ldr	r0, [pc, #80]	; (d4704 <_Z13disableSensor6String+0xb4>)
   d46b2:	aa04      	add	r2, sp, #16
   d46b4:	f7ff fec7 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d46b8:	2401      	movs	r4, #1
   d46ba:	e7e7      	b.n	d468c <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 3){
   d46bc:	2803      	cmp	r0, #3
   d46be:	d103      	bne.n	d46c8 <_Z13disableSensor6String+0x78>
    sysStatus.sensorThreeConnected = false;
   d46c0:	4b0c      	ldr	r3, [pc, #48]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d46c2:	4913      	ldr	r1, [pc, #76]	; (d4710 <_Z13disableSensor6String+0xc0>)
    sysStatus.sensorThreeConnected = false;
   d46c4:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d46c6:	e7eb      	b.n	d46a0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 4){
   d46c8:	2804      	cmp	r0, #4
   d46ca:	d103      	bne.n	d46d4 <_Z13disableSensor6String+0x84>
    sysStatus.sensorFourConnected = false;
   d46cc:	4b09      	ldr	r3, [pc, #36]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d46ce:	4911      	ldr	r1, [pc, #68]	; (d4714 <_Z13disableSensor6String+0xc4>)
    sysStatus.sensorFourConnected = false;
   d46d0:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d46d2:	e7e5      	b.n	d46a0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 5){
   d46d4:	2805      	cmp	r0, #5
   d46d6:	d104      	bne.n	d46e2 <_Z13disableSensor6String+0x92>
    sysStatus.sensorFiveConnected = false;
   d46d8:	4b06      	ldr	r3, [pc, #24]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d46da:	490f      	ldr	r1, [pc, #60]	; (d4718 <_Z13disableSensor6String+0xc8>)
    sysStatus.sensorFiveConnected = false;
   d46dc:	f883 5020 	strb.w	r5, [r3, #32]
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d46e0:	e7de      	b.n	d46a0 <_Z13disableSensor6String+0x50>
  else if (tempSensor == 6){
   d46e2:	2806      	cmp	r0, #6
   d46e4:	d104      	bne.n	d46f0 <_Z13disableSensor6String+0xa0>
    sysStatus.sensorSixConnected = false;
   d46e6:	4b03      	ldr	r3, [pc, #12]	; (d46f4 <_Z13disableSensor6String+0xa4>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46e8:	490c      	ldr	r1, [pc, #48]	; (d471c <_Z13disableSensor6String+0xcc>)
    sysStatus.sensorSixConnected = false;
   d46ea:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46ee:	e7d7      	b.n	d46a0 <_Z13disableSensor6String+0x50>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d46f0:	462c      	mov	r4, r5
   d46f2:	e7cd      	b.n	d4690 <_Z13disableSensor6String+0x40>
   d46f4:	2003e5b8 	.word	0x2003e5b8
   d46f8:	000dd88f 	.word	0x000dd88f
   d46fc:	2003df3d 	.word	0x2003df3d
   d4700:	000dd8a3 	.word	0x000dd8a3
   d4704:	2003e3e0 	.word	0x2003e3e0
   d4708:	2003e5e8 	.word	0x2003e5e8
   d470c:	000dd8b1 	.word	0x000dd8b1
   d4710:	000dd8c5 	.word	0x000dd8c5
   d4714:	000dd8db 	.word	0x000dd8db
   d4718:	000dd8f0 	.word	0x000dd8f0
   d471c:	000dd905 	.word	0x000dd905

000d4720 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d4720:	b500      	push	{lr}
   d4722:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4724:	6800      	ldr	r0, [r0, #0]
   d4726:	220a      	movs	r2, #10
   d4728:	a903      	add	r1, sp, #12
   d472a:	f007 fff1 	bl	dc710 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d472e:	2804      	cmp	r0, #4
   d4730:	d818      	bhi.n	d4764 <_Z16setOperatingMode6String+0x44>
  else{
    sysStatus.operatingMode = tempSensor;
   d4732:	4b0d      	ldr	r3, [pc, #52]	; (d4768 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4734:	4a0d      	ldr	r2, [pc, #52]	; (d476c <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d4736:	6298      	str	r0, [r3, #40]	; 0x28
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4738:	f44f 7180 	mov.w	r1, #256	; 0x100
   d473c:	4603      	mov	r3, r0
   d473e:	a804      	add	r0, sp, #16
   d4740:	f004 fb10 	bl	d8d64 <snprintf>
   d4744:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d4746:	f88d 3000 	strb.w	r3, [sp]
   d474a:	4b09      	ldr	r3, [pc, #36]	; (d4770 <_Z16setOperatingMode6String+0x50>)
   d474c:	4909      	ldr	r1, [pc, #36]	; (d4774 <_Z16setOperatingMode6String+0x54>)
   d474e:	781b      	ldrb	r3, [r3, #0]
   d4750:	4809      	ldr	r0, [pc, #36]	; (d4778 <_Z16setOperatingMode6String+0x58>)
   d4752:	aa04      	add	r2, sp, #16
   d4754:	f7ff fe77 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4758:	4b08      	ldr	r3, [pc, #32]	; (d477c <_Z16setOperatingMode6String+0x5c>)
   d475a:	2001      	movs	r0, #1
   d475c:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d475e:	b045      	add	sp, #276	; 0x114
   d4760:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4764:	2000      	movs	r0, #0
   d4766:	e7fa      	b.n	d475e <_Z16setOperatingMode6String+0x3e>
   d4768:	2003e5b8 	.word	0x2003e5b8
   d476c:	000dd919 	.word	0x000dd919
   d4770:	2003df3d 	.word	0x2003df3d
   d4774:	000dd88a 	.word	0x000dd88a
   d4778:	2003e3e0 	.word	0x2003e3e0
   d477c:	2003e5e8 	.word	0x2003e5e8

000d4780 <_Z11resetSystem6String>:

}

int resetSystem(String Command)

{
   d4780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4782:	220a      	movs	r2, #10
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	a903      	add	r1, sp, #12
   d4788:	f007 ffc2 	bl	dc710 <strtol>
    if (command == 1) {
   d478c:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d478e:	4604      	mov	r4, r0
    if (command == 1) {
   d4790:	f04f 0300 	mov.w	r3, #0
   d4794:	d111      	bne.n	d47ba <_Z11resetSystem6String+0x3a>
      publishQueue.publish("Reset","Device Reset Success",PRIVATE);
   d4796:	f88d 3000 	strb.w	r3, [sp]
   d479a:	4b09      	ldr	r3, [pc, #36]	; (d47c0 <_Z11resetSystem6String+0x40>)
   d479c:	4a09      	ldr	r2, [pc, #36]	; (d47c4 <_Z11resetSystem6String+0x44>)
   d479e:	781b      	ldrb	r3, [r3, #0]
   d47a0:	4909      	ldr	r1, [pc, #36]	; (d47c8 <_Z11resetSystem6String+0x48>)
   d47a2:	480a      	ldr	r0, [pc, #40]	; (d47cc <_Z11resetSystem6String+0x4c>)
   d47a4:	f7ff fe4f 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(5000);
   d47a8:	f241 3088 	movw	r0, #5000	; 0x1388
   d47ac:	f004 fb2a 	bl	d8e04 <delay>
      System.reset();
   d47b0:	f005 fd2e 	bl	da210 <_ZN11SystemClass5resetEv>
      return 1;
      }
    else return 0;  
  }
   d47b4:	4620      	mov	r0, r4
   d47b6:	b004      	add	sp, #16
   d47b8:	bd10      	pop	{r4, pc}
    else return 0;  
   d47ba:	461c      	mov	r4, r3
   d47bc:	e7fa      	b.n	d47b4 <_Z11resetSystem6String+0x34>
   d47be:	bf00      	nop
   d47c0:	2003df3d 	.word	0x2003df3d
   d47c4:	000dd92b 	.word	0x000dd92b
   d47c8:	000ddd3c 	.word	0x000ddd3c
   d47cc:	2003e3e0 	.word	0x2003e3e0

000d47d0 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d47d0:	b507      	push	{r0, r1, r2, lr}
   d47d2:	f004 f9ff 	bl	d8bd4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d47d6:	b148      	cbz	r0, d47ec <_Z18loadSystemDefaultsv+0x1c>
   d47d8:	2300      	movs	r3, #0
   d47da:	f88d 3000 	strb.w	r3, [sp]
   d47de:	4b0e      	ldr	r3, [pc, #56]	; (d4818 <_Z18loadSystemDefaultsv+0x48>)
   d47e0:	4a0e      	ldr	r2, [pc, #56]	; (d481c <_Z18loadSystemDefaultsv+0x4c>)
   d47e2:	781b      	ldrb	r3, [r3, #0]
   d47e4:	490e      	ldr	r1, [pc, #56]	; (d4820 <_Z18loadSystemDefaultsv+0x50>)
   d47e6:	480f      	ldr	r0, [pc, #60]	; (d4824 <_Z18loadSystemDefaultsv+0x54>)
   d47e8:	f7ff fe2d 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d47ec:	4a0e      	ldr	r2, [pc, #56]	; (d4828 <_Z18loadSystemDefaultsv+0x58>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d47ee:	480f      	ldr	r0, [pc, #60]	; (d482c <_Z18loadSystemDefaultsv+0x5c>)
   d47f0:	2378      	movs	r3, #120	; 0x78
   d47f2:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d47f4:	f240 1301 	movw	r3, #257	; 0x101
   d47f8:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d47fa:	2300      	movs	r3, #0
   d47fc:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d47fe:	7293      	strb	r3, [r2, #10]
  sysStatus.operatingMode = 1;
   d4800:	2101      	movs	r1, #1
   d4802:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4806:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   d480a:	2330      	movs	r3, #48	; 0x30
}
   d480c:	b003      	add	sp, #12
   d480e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4812:	f002 bfde 	b.w	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
   d4816:	bf00      	nop
   d4818:	2003df3d 	.word	0x2003df3d
   d481c:	000dd940 	.word	0x000dd940
   d4820:	000dd88a 	.word	0x000dd88a
   d4824:	2003e3e0 	.word	0x2003e3e0
   d4828:	2003e5b8 	.word	0x2003e5b8
   d482c:	2003e3b0 	.word	0x2003e3b0

000d4830 <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d4830:	b507      	push	{r0, r1, r2, lr}
   d4832:	f004 f9cf 	bl	d8bd4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d4836:	b148      	cbz	r0, d484c <_Z20loadConstantDefaultsv+0x1c>
   d4838:	2300      	movs	r3, #0
   d483a:	f88d 3000 	strb.w	r3, [sp]
   d483e:	4b0b      	ldr	r3, [pc, #44]	; (d486c <_Z20loadConstantDefaultsv+0x3c>)
   d4840:	4a0b      	ldr	r2, [pc, #44]	; (d4870 <_Z20loadConstantDefaultsv+0x40>)
   d4842:	781b      	ldrb	r3, [r3, #0]
   d4844:	490b      	ldr	r1, [pc, #44]	; (d4874 <_Z20loadConstantDefaultsv+0x44>)
   d4846:	480c      	ldr	r0, [pc, #48]	; (d4878 <_Z20loadConstantDefaultsv+0x48>)
   d4848:	f7ff fdfd 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d484c:	4a0b      	ldr	r2, [pc, #44]	; (d487c <_Z20loadConstantDefaultsv+0x4c>)
   d484e:	4b0c      	ldr	r3, [pc, #48]	; (d4880 <_Z20loadConstantDefaultsv+0x50>)
   d4850:	480c      	ldr	r0, [pc, #48]	; (d4884 <_Z20loadConstantDefaultsv+0x54>)
   d4852:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d4854:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d4856:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d4858:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 90.9;
   d485a:	6113      	str	r3, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d485c:	6153      	str	r3, [r2, #20]
   d485e:	21a0      	movs	r1, #160	; 0xa0
   d4860:	2318      	movs	r3, #24
}
   d4862:	b003      	add	sp, #12
   d4864:	f85d eb04 	ldr.w	lr, [sp], #4
   d4868:	f002 bfb3 	b.w	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
   d486c:	2003df3d 	.word	0x2003df3d
   d4870:	000dd958 	.word	0x000dd958
   d4874:	000dd88a 	.word	0x000dd88a
   d4878:	2003e3e0 	.word	0x2003e3e0
   d487c:	2003e438 	.word	0x2003e438
   d4880:	42b5cccd 	.word	0x42b5cccd
   d4884:	2003e3b0 	.word	0x2003e3b0

000d4888 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4888:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d488a:	4c15      	ldr	r4, [pc, #84]	; (d48e0 <_Z17checkSystemValuesv+0x58>)
   d488c:	7a23      	ldrb	r3, [r4, #8]
   d488e:	2b01      	cmp	r3, #1
   d4890:	d904      	bls.n	d489c <_Z17checkSystemValuesv+0x14>
   d4892:	f004 f99f 	bl	d8bd4 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4896:	b300      	cbz	r0, d48da <_Z17checkSystemValuesv+0x52>
   d4898:	2301      	movs	r3, #1
   d489a:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d489c:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d489e:	4a11      	ldr	r2, [pc, #68]	; (d48e4 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d48a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d48a4:	bf84      	itt	hi
   d48a6:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d48aa:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d48ac:	7a63      	ldrb	r3, [r4, #9]
   d48ae:	2b01      	cmp	r3, #1
   d48b0:	bf84      	itt	hi
   d48b2:	2301      	movhi	r3, #1
   d48b4:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d48b6:	7aa3      	ldrb	r3, [r4, #10]
   d48b8:	2b01      	cmp	r3, #1
   d48ba:	bf84      	itt	hi
   d48bc:	2300      	movhi	r3, #0
   d48be:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d48c0:	6963      	ldr	r3, [r4, #20]
   d48c2:	2bff      	cmp	r3, #255	; 0xff
   d48c4:	bf84      	itt	hi
   d48c6:	2300      	movhi	r3, #0
   d48c8:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d48ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d48cc:	2b05      	cmp	r3, #5
   d48ce:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d48d2:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d48d4:	bf88      	it	hi
   d48d6:	62a3      	strhi	r3, [r4, #40]	; 0x28
}
   d48d8:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d48da:	7220      	strb	r0, [r4, #8]
   d48dc:	e7de      	b.n	d489c <_Z17checkSystemValuesv+0x14>
   d48de:	bf00      	nop
   d48e0:	2003e5b8 	.word	0x2003e5b8
   d48e4:	2003e5e8 	.word	0x2003e5e8

000d48e8 <_Z19checkConstantValuesv>:
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d48e8:	4b33      	ldr	r3, [pc, #204]	; (d49b8 <_Z19checkConstantValuesv+0xd0>)
   d48ea:	edd3 7a00 	vldr	s15, [r3]
   d48ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48f6:	d406      	bmi.n	d4906 <_Z19checkConstantValuesv+0x1e>
   d48f8:	ed9f 7a30 	vldr	s14, [pc, #192]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d48fc:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4904:	dd01      	ble.n	d490a <_Z19checkConstantValuesv+0x22>
   d4906:	4a2e      	ldr	r2, [pc, #184]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d4908:	601a      	str	r2, [r3, #0]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d490a:	edd3 7a01 	vldr	s15, [r3, #4]
   d490e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4916:	d406      	bmi.n	d4926 <_Z19checkConstantValuesv+0x3e>
   d4918:	ed9f 7a28 	vldr	s14, [pc, #160]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d491c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4924:	dd01      	ble.n	d492a <_Z19checkConstantValuesv+0x42>
   d4926:	4a26      	ldr	r2, [pc, #152]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d4928:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d492a:	edd3 7a02 	vldr	s15, [r3, #8]
   d492e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4936:	d406      	bmi.n	d4946 <_Z19checkConstantValuesv+0x5e>
   d4938:	ed9f 7a20 	vldr	s14, [pc, #128]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d493c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4944:	dd01      	ble.n	d494a <_Z19checkConstantValuesv+0x62>
   d4946:	4a1e      	ldr	r2, [pc, #120]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d4948:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d494a:	edd3 7a03 	vldr	s15, [r3, #12]
   d494e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4956:	d406      	bmi.n	d4966 <_Z19checkConstantValuesv+0x7e>
   d4958:	ed9f 7a18 	vldr	s14, [pc, #96]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d495c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4964:	dd01      	ble.n	d496a <_Z19checkConstantValuesv+0x82>
   d4966:	4a16      	ldr	r2, [pc, #88]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d4968:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorFiveConstant < 0.0  || sensorConstants.sensorFiveConstant > 3000.0) sensorConstants.sensorFiveConstant = 90.91;
   d496a:	edd3 7a04 	vldr	s15, [r3, #16]
   d496e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4976:	d406      	bmi.n	d4986 <_Z19checkConstantValuesv+0x9e>
   d4978:	ed9f 7a10 	vldr	s14, [pc, #64]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d497c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4984:	dd01      	ble.n	d498a <_Z19checkConstantValuesv+0xa2>
   d4986:	4a0e      	ldr	r2, [pc, #56]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d4988:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
   d498a:	edd3 7a05 	vldr	s15, [r3, #20]
   d498e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4996:	d406      	bmi.n	d49a6 <_Z19checkConstantValuesv+0xbe>
   d4998:	ed9f 7a08 	vldr	s14, [pc, #32]	; d49bc <_Z19checkConstantValuesv+0xd4>
   d499c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d49a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49a4:	dd01      	ble.n	d49aa <_Z19checkConstantValuesv+0xc2>
   d49a6:	4a06      	ldr	r2, [pc, #24]	; (d49c0 <_Z19checkConstantValuesv+0xd8>)
   d49a8:	615a      	str	r2, [r3, #20]
   d49aa:	4a03      	ldr	r2, [pc, #12]	; (d49b8 <_Z19checkConstantValuesv+0xd0>)
   d49ac:	4805      	ldr	r0, [pc, #20]	; (d49c4 <_Z19checkConstantValuesv+0xdc>)
   d49ae:	2318      	movs	r3, #24
   d49b0:	21a0      	movs	r1, #160	; 0xa0
   d49b2:	f002 bf0e 	b.w	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
   d49b6:	bf00      	nop
   d49b8:	2003e438 	.word	0x2003e438
   d49bc:	453b8000 	.word	0x453b8000
   d49c0:	42b5d1ec 	.word	0x42b5d1ec
   d49c4:	2003e3b0 	.word	0x2003e3b0

000d49c8 <_Z11petWatchdogv>:
{
   d49c8:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d49ca:	2101      	movs	r1, #1
   d49cc:	2005      	movs	r0, #5
   d49ce:	f006 f858 	bl	daa82 <digitalWrite>
  digitalWrite(donePin, LOW);
   d49d2:	2100      	movs	r1, #0
   d49d4:	2005      	movs	r0, #5
   d49d6:	f006 f854 	bl	daa82 <digitalWrite>
  watchdogFlag = false;
   d49da:	4a09      	ldr	r2, [pc, #36]	; (d4a00 <_Z11petWatchdogv+0x38>)
   d49dc:	2300      	movs	r3, #0
   d49de:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d49e0:	4a08      	ldr	r2, [pc, #32]	; (d4a04 <_Z11petWatchdogv+0x3c>)
   d49e2:	7a52      	ldrb	r2, [r2, #9]
   d49e4:	b142      	cbz	r2, d49f8 <_Z11petWatchdogv+0x30>
   d49e6:	f88d 3000 	strb.w	r3, [sp]
   d49ea:	4b07      	ldr	r3, [pc, #28]	; (d4a08 <_Z11petWatchdogv+0x40>)
   d49ec:	4a07      	ldr	r2, [pc, #28]	; (d4a0c <_Z11petWatchdogv+0x44>)
   d49ee:	781b      	ldrb	r3, [r3, #0]
   d49f0:	4907      	ldr	r1, [pc, #28]	; (d4a10 <_Z11petWatchdogv+0x48>)
   d49f2:	4808      	ldr	r0, [pc, #32]	; (d4a14 <_Z11petWatchdogv+0x4c>)
   d49f4:	f7ff fd27 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d49f8:	b003      	add	sp, #12
   d49fa:	f85d fb04 	ldr.w	pc, [sp], #4
   d49fe:	bf00      	nop
   d4a00:	2003e5e9 	.word	0x2003e5e9
   d4a04:	2003e5b8 	.word	0x2003e5b8
   d4a08:	2003df3d 	.word	0x2003df3d
   d4a0c:	000dd977 	.word	0x000dd977
   d4a10:	000dd97e 	.word	0x000dd97e
   d4a14:	2003e3e0 	.word	0x2003e3e0

000d4a18 <_Z22publishStateTransitionv>:
{
   d4a18:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4a1a:	4d11      	ldr	r5, [pc, #68]	; (d4a60 <_Z22publishStateTransitionv+0x48>)
   d4a1c:	4c11      	ldr	r4, [pc, #68]	; (d4a64 <_Z22publishStateTransitionv+0x4c>)
   d4a1e:	4912      	ldr	r1, [pc, #72]	; (d4a68 <_Z22publishStateTransitionv+0x50>)
   d4a20:	782a      	ldrb	r2, [r5, #0]
   d4a22:	7820      	ldrb	r0, [r4, #0]
{
   d4a24:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4a26:	231a      	movs	r3, #26
   d4a28:	fb03 1202 	mla	r2, r3, r2, r1
   d4a2c:	9200      	str	r2, [sp, #0]
   d4a2e:	fb03 1300 	mla	r3, r3, r0, r1
   d4a32:	4a0e      	ldr	r2, [pc, #56]	; (d4a6c <_Z22publishStateTransitionv+0x54>)
   d4a34:	2128      	movs	r1, #40	; 0x28
   d4a36:	a802      	add	r0, sp, #8
   d4a38:	f004 f994 	bl	d8d64 <snprintf>
  oldState = state;
   d4a3c:	782b      	ldrb	r3, [r5, #0]
   d4a3e:	7023      	strb	r3, [r4, #0]
   d4a40:	f004 f8c8 	bl	d8bd4 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4a44:	b148      	cbz	r0, d4a5a <_Z22publishStateTransitionv+0x42>
   d4a46:	2300      	movs	r3, #0
   d4a48:	f88d 3000 	strb.w	r3, [sp]
   d4a4c:	4b08      	ldr	r3, [pc, #32]	; (d4a70 <_Z22publishStateTransitionv+0x58>)
   d4a4e:	4909      	ldr	r1, [pc, #36]	; (d4a74 <_Z22publishStateTransitionv+0x5c>)
   d4a50:	781b      	ldrb	r3, [r3, #0]
   d4a52:	4809      	ldr	r0, [pc, #36]	; (d4a78 <_Z22publishStateTransitionv+0x60>)
   d4a54:	aa02      	add	r2, sp, #8
   d4a56:	f7ff fcf6 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4a5a:	b00d      	add	sp, #52	; 0x34
   d4a5c:	bd30      	pop	{r4, r5, pc}
   d4a5e:	bf00      	nop
   d4a60:	2003e5b5 	.word	0x2003e5b5
   d4a64:	2003e3dc 	.word	0x2003e3dc
   d4a68:	2003dc40 	.word	0x2003dc40
   d4a6c:	000dd987 	.word	0x000dd987
   d4a70:	2003df3d 	.word	0x2003df3d
   d4a74:	000dd995 	.word	0x000dd995
   d4a78:	2003e3e0 	.word	0x2003e3e0

000d4a7c <_Z17getBatteryContextv>:
{
   d4a7c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a7e:	4d0d      	ldr	r5, [pc, #52]	; (d4ab4 <_Z17getBatteryContextv+0x38>)
   d4a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4a82:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a84:	ac01      	add	r4, sp, #4
   d4a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a8c:	4b0a      	ldr	r3, [pc, #40]	; (d4ab8 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a92:	7c1b      	ldrb	r3, [r3, #16]
   d4a94:	4809      	ldr	r0, [pc, #36]	; (d4abc <_Z17getBatteryContextv+0x40>)
   d4a96:	aa08      	add	r2, sp, #32
   d4a98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4a9c:	2110      	movs	r1, #16
   d4a9e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4aa2:	4a07      	ldr	r2, [pc, #28]	; (d4ac0 <_Z17getBatteryContextv+0x44>)
   d4aa4:	f004 f95e 	bl	d8d64 <snprintf>
  sysStatusWriteNeeded = true;
   d4aa8:	4b06      	ldr	r3, [pc, #24]	; (d4ac4 <_Z17getBatteryContextv+0x48>)
   d4aaa:	2201      	movs	r2, #1
   d4aac:	701a      	strb	r2, [r3, #0]
}
   d4aae:	b009      	add	sp, #36	; 0x24
   d4ab0:	bd30      	pop	{r4, r5, pc}
   d4ab2:	bf00      	nop
   d4ab4:	000ddf6c 	.word	0x000ddf6c
   d4ab8:	2003e5b8 	.word	0x2003e5b8
   d4abc:	2003df3e 	.word	0x2003df3e
   d4ac0:	000de1fc 	.word	0x000de1fc
   d4ac4:	2003e5e8 	.word	0x2003e5e8

000d4ac8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d4acc:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4ad0:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4ad4:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d4ad6:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4ada:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d4adc:	ebad 0d04 	sub.w	sp, sp, r4
   d4ae0:	ad02      	add	r5, sp, #8
   d4ae2:	46ac      	mov	ip, r5
   d4ae4:	f04f 0e00 	mov.w	lr, #0
   d4ae8:	f84c eb04 	str.w	lr, [ip], #4
   d4aec:	3802      	subs	r0, #2
   d4aee:	2800      	cmp	r0, #0
   d4af0:	da2a      	bge.n	d4b48 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4af2:	f8df b068 	ldr.w	fp, [pc, #104]	; d4b5c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4af6:	f8df a068 	ldr.w	sl, [pc, #104]	; d4b60 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4afa:	460c      	mov	r4, r1
   d4afc:	4690      	mov	r8, r2
   d4afe:	461e      	mov	r6, r3
   d4b00:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4b02:	454d      	cmp	r5, r9
   d4b04:	d024      	beq.n	d4b50 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4b06:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4b0a:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4b0e:	4658      	mov	r0, fp
   d4b10:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4b14:	f001 fe84 	bl	d6820 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4b18:	ec51 0b10 	vmov	r0, r1, d0
   d4b1c:	f006 fde0 	bl	db6e0 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4b20:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4b24:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4b28:	f006 fab2 	bl	db090 <__aeabi_f2d>
   d4b2c:	e9da 2300 	ldrd	r2, r3, [sl]
   d4b30:	f006 fb06 	bl	db140 <__aeabi_dmul>
   d4b34:	4b08      	ldr	r3, [pc, #32]	; (d4b58 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d4b36:	2200      	movs	r2, #0
   d4b38:	f006 fc2c 	bl	db394 <__aeabi_ddiv>
   d4b3c:	f006 fdd0 	bl	db6e0 <__aeabi_d2f>
   d4b40:	3410      	adds	r4, #16
   d4b42:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d4b46:	e7dc      	b.n	d4b02 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d4b48:	f84c eb04 	str.w	lr, [ip], #4
   d4b4c:	3801      	subs	r0, #1
   d4b4e:	e7ce      	b.n	d4aee <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d4b50:	3704      	adds	r7, #4
   d4b52:	46bd      	mov	sp, r7
   d4b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b58:	408f4000 	.word	0x408f4000
   d4b5c:	2003def8 	.word	0x2003def8
   d4b60:	2003dc38 	.word	0x2003dc38

000d4b64 <_Z16takeMeasurementsv>:
{   
   d4b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b68:	ed2d 8b06 	vpush	{d8-d10}
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b6c:	4c8c      	ldr	r4, [pc, #560]	; (d4da0 <_Z16takeMeasurementsv+0x23c>)
   d4b6e:	4b8d      	ldr	r3, [pc, #564]	; (d4da4 <_Z16takeMeasurementsv+0x240>)
   d4b70:	6820      	ldr	r0, [r4, #0]
   d4b72:	f893 a000 	ldrb.w	sl, [r3]
{   
   d4b76:	b0a8      	sub	sp, #160	; 0xa0
  };
   d4b78:	f8cd a000 	str.w	sl, [sp]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b7c:	f006 fa88 	bl	db090 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b80:	4b89      	ldr	r3, [pc, #548]	; (d4da8 <_Z16takeMeasurementsv+0x244>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4b82:	ec41 0b1a 	vmov	d10, r0, r1
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b86:	f893 9000 	ldrb.w	r9, [r3]
  };
   d4b8a:	f8cd 9010 	str.w	r9, [sp, #16]
   d4b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b92:	6860      	ldr	r0, [r4, #4]
   d4b94:	f006 fa7c 	bl	db090 <__aeabi_f2d>
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b98:	4b84      	ldr	r3, [pc, #528]	; (d4dac <_Z16takeMeasurementsv+0x248>)
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4b9a:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4b9e:	f893 8000 	ldrb.w	r8, [r3]
  };
   d4ba2:	f8cd 8020 	str.w	r8, [sp, #32]
   d4ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4baa:	68a0      	ldr	r0, [r4, #8]
   d4bac:	f006 fa70 	bl	db090 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4bb0:	4b7f      	ldr	r3, [pc, #508]	; (d4db0 <_Z16takeMeasurementsv+0x24c>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4bb2:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4bb6:	781d      	ldrb	r5, [r3, #0]
  };
   d4bb8:	950c      	str	r5, [sp, #48]	; 0x30
  };
   d4bba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4bbe:	68e0      	ldr	r0, [r4, #12]
   d4bc0:	f006 fa66 	bl	db090 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4bc4:	4b7b      	ldr	r3, [pc, #492]	; (d4db4 <_Z16takeMeasurementsv+0x250>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4bc6:	4606      	mov	r6, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4bc8:	781b      	ldrb	r3, [r3, #0]
   d4bca:	6920      	ldr	r0, [r4, #16]
   d4bcc:	9310      	str	r3, [sp, #64]	; 0x40
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d4bce:	460f      	mov	r7, r1
  };
   d4bd0:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4bd4:	f006 fa5c 	bl	db090 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4bd8:	4b77      	ldr	r3, [pc, #476]	; (d4db8 <_Z16takeMeasurementsv+0x254>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4bda:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4bde:	781b      	ldrb	r3, [r3, #0]
   d4be0:	6960      	ldr	r0, [r4, #20]
   d4be2:	9314      	str	r3, [sp, #80]	; 0x50
   d4be4:	f006 fa54 	bl	db090 <__aeabi_f2d>
    sensorData.validData = false;
   d4be8:	4c74      	ldr	r4, [pc, #464]	; (d4dbc <_Z16takeMeasurementsv+0x258>)
   };
   d4bea:	9524      	str	r5, [sp, #144]	; 0x90
    if ((sysStatus.operatingMode) == 1){
   d4bec:	4d74      	ldr	r5, [pc, #464]	; (d4dc0 <_Z16takeMeasurementsv+0x25c>)
   };
   d4bee:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    sensorData.validData = false;
   d4bf2:	2300      	movs	r3, #0
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d4bf4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   };
   d4bf8:	ed8d ab1a 	vstr	d10, [sp, #104]	; 0x68
   d4bfc:	ed8d 9b1e 	vstr	d9, [sp, #120]	; 0x78
   d4c00:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
   d4c04:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
   d4c08:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   d4c0c:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    sensorData.validData = false;
   d4c10:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    getBatteryContext();     
   d4c14:	f7ff ff32 	bl	d4a7c <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4c18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d4c1a:	2801      	cmp	r0, #1
   d4c1c:	d14a      	bne.n	d4cb4 <_Z16takeMeasurementsv+0x150>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4c1e:	7f2b      	ldrb	r3, [r5, #28]
   d4c20:	b14b      	cbz	r3, d4c36 <_Z16takeMeasurementsv+0xd2>
   d4c22:	4868      	ldr	r0, [pc, #416]	; (d4dc4 <_Z16takeMeasurementsv+0x260>)
   d4c24:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c28:	f002 fcc6 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c2c:	ec51 0b10 	vmov	r0, r1, d0
   d4c30:	f006 fd56 	bl	db6e0 <__aeabi_d2f>
   d4c34:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4c36:	7f6b      	ldrb	r3, [r5, #29]
   d4c38:	b14b      	cbz	r3, d4c4e <_Z16takeMeasurementsv+0xea>
   d4c3a:	4863      	ldr	r0, [pc, #396]	; (d4dc8 <_Z16takeMeasurementsv+0x264>)
   d4c3c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c40:	f002 fcba 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c44:	ec51 0b10 	vmov	r0, r1, d0
   d4c48:	f006 fd4a 	bl	db6e0 <__aeabi_d2f>
   d4c4c:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4c4e:	7fab      	ldrb	r3, [r5, #30]
   d4c50:	b14b      	cbz	r3, d4c66 <_Z16takeMeasurementsv+0x102>
   d4c52:	485e      	ldr	r0, [pc, #376]	; (d4dcc <_Z16takeMeasurementsv+0x268>)
   d4c54:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c58:	f002 fcae 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c5c:	ec51 0b10 	vmov	r0, r1, d0
   d4c60:	f006 fd3e 	bl	db6e0 <__aeabi_d2f>
   d4c64:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4c66:	7feb      	ldrb	r3, [r5, #31]
   d4c68:	b14b      	cbz	r3, d4c7e <_Z16takeMeasurementsv+0x11a>
   d4c6a:	4859      	ldr	r0, [pc, #356]	; (d4dd0 <_Z16takeMeasurementsv+0x26c>)
   d4c6c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c70:	f002 fca2 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c74:	ec51 0b10 	vmov	r0, r1, d0
   d4c78:	f006 fd32 	bl	db6e0 <__aeabi_d2f>
   d4c7c:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4c7e:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4c82:	b14b      	cbz	r3, d4c98 <_Z16takeMeasurementsv+0x134>
   d4c84:	4853      	ldr	r0, [pc, #332]	; (d4dd4 <_Z16takeMeasurementsv+0x270>)
   d4c86:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4c8a:	f002 fc95 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4c8e:	ec51 0b10 	vmov	r0, r1, d0
   d4c92:	f006 fd25 	bl	db6e0 <__aeabi_d2f>
   d4c96:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d4c98:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4c9c:	b1e3      	cbz	r3, d4cd8 <_Z16takeMeasurementsv+0x174>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4c9e:	484e      	ldr	r0, [pc, #312]	; (d4dd8 <_Z16takeMeasurementsv+0x274>)
   d4ca0:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4ca4:	f002 fc88 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4ca8:	ec51 0b10 	vmov	r0, r1, d0
   d4cac:	f006 fd18 	bl	db6e0 <__aeabi_d2f>
   d4cb0:	6160      	str	r0, [r4, #20]
   d4cb2:	e011      	b.n	d4cd8 <_Z16takeMeasurementsv+0x174>
    else if ((sysStatus.operatingMode) == 2){
   d4cb4:	2802      	cmp	r0, #2
   d4cb6:	d13a      	bne.n	d4d2e <_Z16takeMeasurementsv+0x1ca>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4cb8:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4cbc:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4cc0:	4669      	mov	r1, sp
   d4cc2:	2003      	movs	r0, #3
   d4cc4:	f7ff ff00 	bl	d4ac8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4cc8:	f104 036c 	add.w	r3, r4, #108	; 0x6c
   d4ccc:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4cd0:	a90c      	add	r1, sp, #48	; 0x30
   d4cd2:	2003      	movs	r0, #3
   d4cd4:	f7ff fef8 	bl	d4ac8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    sensorDataWriteNeeded = true;
   d4cd8:	4e40      	ldr	r6, [pc, #256]	; (d4ddc <_Z16takeMeasurementsv+0x278>)
   d4cda:	2201      	movs	r2, #1
   d4cdc:	7032      	strb	r2, [r6, #0]
    if ( ((sysStatus.sensorTwoConnected && sensorData.sensorTwoCurrent> 1) && ((sensorData.sensorTwoCurrent < sensorData.sensorTwoPreviousLow) || (sensorData.sensorTwoCurrent > sensorData.sensorTwoPreviousHigh))))  {
   d4cde:	7f6a      	ldrb	r2, [r5, #29]
   d4ce0:	2a00      	cmp	r2, #0
   d4ce2:	d07d      	beq.n	d4de0 <_Z16takeMeasurementsv+0x27c>
   d4ce4:	edd4 7a01 	vldr	s15, [r4, #4]
   d4ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4cec:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cf4:	dd74      	ble.n	d4de0 <_Z16takeMeasurementsv+0x27c>
   d4cf6:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   d4cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d02:	d406      	bmi.n	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4d04:	ed94 7a07 	vldr	s14, [r4, #28]
   d4d08:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d10:	dd66      	ble.n	d4de0 <_Z16takeMeasurementsv+0x27c>
    sensorData.validData = true;
   d4d12:	2501      	movs	r5, #1
   d4d14:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
    sensorData.timeStamp = Time.now();
   d4d18:	f005 fbf5 	bl	da506 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d4d1c:	7035      	strb	r5, [r6, #0]
    sensorData.timeStamp = Time.now();
   d4d1e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    return 1;
   d4d22:	4628      	mov	r0, r5
  }
   d4d24:	b028      	add	sp, #160	; 0xa0
   d4d26:	ecbd 8b06 	vpop	{d8-d10}
   d4d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (sysStatus.operatingMode == 3){
   d4d2e:	2803      	cmp	r0, #3
   d4d30:	d129      	bne.n	d4d86 <_Z16takeMeasurementsv+0x222>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4d32:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4d36:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4d3a:	4669      	mov	r1, sp
   d4d3c:	f7ff fec4 	bl	d4ac8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d4d40:	7feb      	ldrb	r3, [r5, #31]
   d4d42:	b1eb      	cbz	r3, d4d80 <_Z16takeMeasurementsv+0x21c>
   d4d44:	4822      	ldr	r0, [pc, #136]	; (d4dd0 <_Z16takeMeasurementsv+0x26c>)
   d4d46:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d4a:	f002 fc35 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d4e:	ec51 0b10 	vmov	r0, r1, d0
   d4d52:	f006 fcc5 	bl	db6e0 <__aeabi_d2f>
   d4d56:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);       
   d4d58:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4d5c:	b1eb      	cbz	r3, d4d9a <_Z16takeMeasurementsv+0x236>
   d4d5e:	481d      	ldr	r0, [pc, #116]	; (d4dd4 <_Z16takeMeasurementsv+0x270>)
   d4d60:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d64:	f002 fc28 	bl	d75b8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d68:	ec51 0b10 	vmov	r0, r1, d0
   d4d6c:	f006 fcb8 	bl	db6e0 <__aeabi_d2f>
   d4d70:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4d72:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4d76:	2b00      	cmp	r3, #0
   d4d78:	d191      	bne.n	d4c9e <_Z16takeMeasurementsv+0x13a>
      else sensorData.sensorSixCurrent=0;
   d4d7a:	2300      	movs	r3, #0
   d4d7c:	6163      	str	r3, [r4, #20]
   d4d7e:	e7ab      	b.n	d4cd8 <_Z16takeMeasurementsv+0x174>
      else sensorData.sensorFourCurrent=0;
   d4d80:	2300      	movs	r3, #0
   d4d82:	60e3      	str	r3, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d4d84:	e7e8      	b.n	d4d58 <_Z16takeMeasurementsv+0x1f4>
    else if (sysStatus.operatingMode == 4){
   d4d86:	2804      	cmp	r0, #4
   d4d88:	d1a6      	bne.n	d4cd8 <_Z16takeMeasurementsv+0x174>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4d8a:	f104 0388 	add.w	r3, r4, #136	; 0x88
   d4d8e:	f104 0278 	add.w	r2, r4, #120	; 0x78
   d4d92:	a918      	add	r1, sp, #96	; 0x60
   d4d94:	f7ff fe98 	bl	d4ac8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d4d98:	e7de      	b.n	d4d58 <_Z16takeMeasurementsv+0x1f4>
      else sensorData.sensorFiveCurrent=0;                  
   d4d9a:	2300      	movs	r3, #0
   d4d9c:	6123      	str	r3, [r4, #16]
   d4d9e:	e7e8      	b.n	d4d72 <_Z16takeMeasurementsv+0x20e>
   d4da0:	2003e438 	.word	0x2003e438
   d4da4:	2003dc30 	.word	0x2003dc30
   d4da8:	2003dc31 	.word	0x2003dc31
   d4dac:	2003dc32 	.word	0x2003dc32
   d4db0:	2003dc33 	.word	0x2003dc33
   d4db4:	2003dc34 	.word	0x2003dc34
   d4db8:	2003dc35 	.word	0x2003dc35
   d4dbc:	2003e450 	.word	0x2003e450
   d4dc0:	2003e5b8 	.word	0x2003e5b8
   d4dc4:	2003df60 	.word	0x2003df60
   d4dc8:	2003e018 	.word	0x2003e018
   d4dcc:	2003e0d0 	.word	0x2003e0d0
   d4dd0:	2003e188 	.word	0x2003e188
   d4dd4:	2003e240 	.word	0x2003e240
   d4dd8:	2003e2f8 	.word	0x2003e2f8
   d4ddc:	2003e4f4 	.word	0x2003e4f4
    } else if ( ((sysStatus.sensorOneConnected && sensorData.sensorOneCurrent> 1) && ((sensorData.sensorOneCurrent < sensorData.sensorOnePreviousLow) || (sensorData.sensorOneCurrent > sensorData.sensorOnePreviousHigh))) ){
   d4de0:	7f2b      	ldrb	r3, [r5, #28]
   d4de2:	b1bb      	cbz	r3, d4e14 <_Z16takeMeasurementsv+0x2b0>
   d4de4:	edd4 7a00 	vldr	s15, [r4]
   d4de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4dec:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4df4:	dd0e      	ble.n	d4e14 <_Z16takeMeasurementsv+0x2b0>
   d4df6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
   d4dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e02:	d486      	bmi.n	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4e04:	ed94 7a06 	vldr	s14, [r4, #24]
   d4e08:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e10:	f73f af7f 	bgt.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorThreeConnected && sensorData.sensorThreeCurrent >1) && ((sensorData.sensorThreeCurrent < sensorData.sensorThreePreviousLow) || (sensorData.sensorThreeCurrent > sensorData.sensorThreePreviousHigh))) ){
   d4e14:	7fab      	ldrb	r3, [r5, #30]
   d4e16:	b1c3      	cbz	r3, d4e4a <_Z16takeMeasurementsv+0x2e6>
   d4e18:	edd4 7a02 	vldr	s15, [r4, #8]
   d4e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4e20:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e28:	dd0f      	ble.n	d4e4a <_Z16takeMeasurementsv+0x2e6>
   d4e2a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d4e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e36:	f53f af6c 	bmi.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4e3a:	ed94 7a08 	vldr	s14, [r4, #32]
   d4e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e46:	f73f af64 	bgt.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFourConnected && sensorData.sensorFourCurrent> 1) && ((sensorData.sensorFourCurrent < sensorData.sensorFourPreviousLow) || (sensorData.sensorFourCurrent > sensorData.sensorFourPreviousHigh))) ){
   d4e4a:	7feb      	ldrb	r3, [r5, #31]
   d4e4c:	b1c3      	cbz	r3, d4e80 <_Z16takeMeasurementsv+0x31c>
   d4e4e:	edd4 7a03 	vldr	s15, [r4, #12]
   d4e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4e56:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e5e:	dd0f      	ble.n	d4e80 <_Z16takeMeasurementsv+0x31c>
   d4e60:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
   d4e64:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e6c:	f53f af51 	bmi.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4e70:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
   d4e74:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e7c:	f73f af49 	bgt.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorFiveConnected && sensorData.sensorFiveCurrent> 1) && ((sensorData.sensorFiveCurrent < sensorData.sensorFivePreviousLow) || (sensorData.sensorFiveCurrent > sensorData.sensorFivePreviousHigh))) ){
   d4e80:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4e84:	b1c3      	cbz	r3, d4eb8 <_Z16takeMeasurementsv+0x354>
   d4e86:	edd4 7a04 	vldr	s15, [r4, #16]
   d4e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e96:	dd0f      	ble.n	d4eb8 <_Z16takeMeasurementsv+0x354>
   d4e98:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   d4e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea4:	f53f af35 	bmi.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4ea8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   d4eac:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb4:	f73f af2d 	bgt.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
    else if ( ((sysStatus.sensorSixConnected && sensorData.sensorSixCurrent> 1) && ((sensorData.sensorSixCurrent < sensorData.sensorSixPreviousLow) || (sensorData.sensorSixCurrent > sensorData.sensorSixPreviousHigh))) ){
   d4eb8:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
   d4ebc:	2800      	cmp	r0, #0
   d4ebe:	f43f af31 	beq.w	d4d24 <_Z16takeMeasurementsv+0x1c0>
   d4ec2:	edd4 7a05 	vldr	s15, [r4, #20]
   d4ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4eca:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ed2:	dd0f      	ble.n	d4ef4 <_Z16takeMeasurementsv+0x390>
   d4ed4:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
   d4ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ee0:	f53f af17 	bmi.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
   d4ee4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
   d4ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ef0:	f73f af0f 	bgt.w	d4d12 <_Z16takeMeasurementsv+0x1ae>
    else return 0;
   d4ef4:	2000      	movs	r0, #0
   d4ef6:	e715      	b.n	d4d24 <_Z16takeMeasurementsv+0x1c0>

000d4ef8 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d4ef8:	b510      	push	{r4, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4efa:	4c20      	ldr	r4, [pc, #128]	; (d4f7c <_Z11loadEmonlibv+0x84>)
   d4efc:	6820      	ldr	r0, [r4, #0]
   d4efe:	f006 f8c7 	bl	db090 <__aeabi_f2d>
   d4f02:	4b1f      	ldr	r3, [pc, #124]	; (d4f80 <_Z11loadEmonlibv+0x88>)
   d4f04:	ec41 0b10 	vmov	d0, r0, r1
   d4f08:	7819      	ldrb	r1, [r3, #0]
   d4f0a:	481e      	ldr	r0, [pc, #120]	; (d4f84 <_Z11loadEmonlibv+0x8c>)
   d4f0c:	f002 fb4a 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4f10:	6860      	ldr	r0, [r4, #4]
   d4f12:	f006 f8bd 	bl	db090 <__aeabi_f2d>
   d4f16:	4b1c      	ldr	r3, [pc, #112]	; (d4f88 <_Z11loadEmonlibv+0x90>)
   d4f18:	ec41 0b10 	vmov	d0, r0, r1
   d4f1c:	7819      	ldrb	r1, [r3, #0]
   d4f1e:	481b      	ldr	r0, [pc, #108]	; (d4f8c <_Z11loadEmonlibv+0x94>)
   d4f20:	f002 fb40 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4f24:	68a0      	ldr	r0, [r4, #8]
   d4f26:	f006 f8b3 	bl	db090 <__aeabi_f2d>
   d4f2a:	4b19      	ldr	r3, [pc, #100]	; (d4f90 <_Z11loadEmonlibv+0x98>)
   d4f2c:	ec41 0b10 	vmov	d0, r0, r1
   d4f30:	7819      	ldrb	r1, [r3, #0]
   d4f32:	4818      	ldr	r0, [pc, #96]	; (d4f94 <_Z11loadEmonlibv+0x9c>)
   d4f34:	f002 fb36 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4f38:	68e0      	ldr	r0, [r4, #12]
   d4f3a:	f006 f8a9 	bl	db090 <__aeabi_f2d>
   d4f3e:	4b16      	ldr	r3, [pc, #88]	; (d4f98 <_Z11loadEmonlibv+0xa0>)
   d4f40:	ec41 0b10 	vmov	d0, r0, r1
   d4f44:	7819      	ldrb	r1, [r3, #0]
   d4f46:	4815      	ldr	r0, [pc, #84]	; (d4f9c <_Z11loadEmonlibv+0xa4>)
   d4f48:	f002 fb2c 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4f4c:	6920      	ldr	r0, [r4, #16]
   d4f4e:	f006 f89f 	bl	db090 <__aeabi_f2d>
   d4f52:	4b13      	ldr	r3, [pc, #76]	; (d4fa0 <_Z11loadEmonlibv+0xa8>)
   d4f54:	ec41 0b10 	vmov	d0, r0, r1
   d4f58:	7819      	ldrb	r1, [r3, #0]
   d4f5a:	4812      	ldr	r0, [pc, #72]	; (d4fa4 <_Z11loadEmonlibv+0xac>)
   d4f5c:	f002 fb22 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4f60:	6960      	ldr	r0, [r4, #20]
   d4f62:	f006 f895 	bl	db090 <__aeabi_f2d>
   d4f66:	4b10      	ldr	r3, [pc, #64]	; (d4fa8 <_Z11loadEmonlibv+0xb0>)
   d4f68:	ec41 0b10 	vmov	d0, r0, r1
   d4f6c:	7819      	ldrb	r1, [r3, #0]
   d4f6e:	480f      	ldr	r0, [pc, #60]	; (d4fac <_Z11loadEmonlibv+0xb4>)
   d4f70:	f002 fb18 	bl	d75a4 <_ZN13EnergyMonitor7currentEjd>
  constantsStatusWriteNeeded = true;
   d4f74:	4b0e      	ldr	r3, [pc, #56]	; (d4fb0 <_Z11loadEmonlibv+0xb8>)
   d4f76:	2201      	movs	r2, #1
   d4f78:	701a      	strb	r2, [r3, #0]
}
   d4f7a:	bd10      	pop	{r4, pc}
   d4f7c:	2003e438 	.word	0x2003e438
   d4f80:	2003dc30 	.word	0x2003dc30
   d4f84:	2003df60 	.word	0x2003df60
   d4f88:	2003dc31 	.word	0x2003dc31
   d4f8c:	2003e018 	.word	0x2003e018
   d4f90:	2003dc32 	.word	0x2003dc32
   d4f94:	2003e0d0 	.word	0x2003e0d0
   d4f98:	2003dc33 	.word	0x2003dc33
   d4f9c:	2003e188 	.word	0x2003e188
   d4fa0:	2003dc34 	.word	0x2003dc34
   d4fa4:	2003e240 	.word	0x2003e240
   d4fa8:	2003dc35 	.word	0x2003dc35
   d4fac:	2003e2f8 	.word	0x2003e2f8
   d4fb0:	2003df5e 	.word	0x2003df5e

000d4fb4 <_Z20updateConstantValuesv>:
{   
   d4fb4:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d4fb6:	4c22      	ldr	r4, [pc, #136]	; (d5040 <_Z20updateConstantValuesv+0x8c>)
   d4fb8:	6820      	ldr	r0, [r4, #0]
   d4fba:	f006 f869 	bl	db090 <__aeabi_f2d>
   d4fbe:	4a21      	ldr	r2, [pc, #132]	; (d5044 <_Z20updateConstantValuesv+0x90>)
   d4fc0:	e9cd 0100 	strd	r0, r1, [sp]
   d4fc4:	2120      	movs	r1, #32
   d4fc6:	4820      	ldr	r0, [pc, #128]	; (d5048 <_Z20updateConstantValuesv+0x94>)
   d4fc8:	f003 fecc 	bl	d8d64 <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d4fcc:	6860      	ldr	r0, [r4, #4]
   d4fce:	f006 f85f 	bl	db090 <__aeabi_f2d>
   d4fd2:	4a1e      	ldr	r2, [pc, #120]	; (d504c <_Z20updateConstantValuesv+0x98>)
   d4fd4:	e9cd 0100 	strd	r0, r1, [sp]
   d4fd8:	2120      	movs	r1, #32
   d4fda:	481d      	ldr	r0, [pc, #116]	; (d5050 <_Z20updateConstantValuesv+0x9c>)
   d4fdc:	f003 fec2 	bl	d8d64 <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d4fe0:	68a0      	ldr	r0, [r4, #8]
   d4fe2:	f006 f855 	bl	db090 <__aeabi_f2d>
   d4fe6:	4a1b      	ldr	r2, [pc, #108]	; (d5054 <_Z20updateConstantValuesv+0xa0>)
   d4fe8:	e9cd 0100 	strd	r0, r1, [sp]
   d4fec:	2120      	movs	r1, #32
   d4fee:	481a      	ldr	r0, [pc, #104]	; (d5058 <_Z20updateConstantValuesv+0xa4>)
   d4ff0:	f003 feb8 	bl	d8d64 <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d4ff4:	68e0      	ldr	r0, [r4, #12]
   d4ff6:	f006 f84b 	bl	db090 <__aeabi_f2d>
   d4ffa:	4a18      	ldr	r2, [pc, #96]	; (d505c <_Z20updateConstantValuesv+0xa8>)
   d4ffc:	e9cd 0100 	strd	r0, r1, [sp]
   d5000:	2120      	movs	r1, #32
   d5002:	4817      	ldr	r0, [pc, #92]	; (d5060 <_Z20updateConstantValuesv+0xac>)
   d5004:	f003 feae 	bl	d8d64 <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d5008:	6920      	ldr	r0, [r4, #16]
   d500a:	f006 f841 	bl	db090 <__aeabi_f2d>
   d500e:	4a15      	ldr	r2, [pc, #84]	; (d5064 <_Z20updateConstantValuesv+0xb0>)
   d5010:	e9cd 0100 	strd	r0, r1, [sp]
   d5014:	2120      	movs	r1, #32
   d5016:	4814      	ldr	r0, [pc, #80]	; (d5068 <_Z20updateConstantValuesv+0xb4>)
   d5018:	f003 fea4 	bl	d8d64 <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d501c:	6960      	ldr	r0, [r4, #20]
   d501e:	f006 f837 	bl	db090 <__aeabi_f2d>
   d5022:	4a12      	ldr	r2, [pc, #72]	; (d506c <_Z20updateConstantValuesv+0xb8>)
   d5024:	e9cd 0100 	strd	r0, r1, [sp]
   d5028:	2120      	movs	r1, #32
   d502a:	4811      	ldr	r0, [pc, #68]	; (d5070 <_Z20updateConstantValuesv+0xbc>)
   d502c:	f003 fe9a 	bl	d8d64 <snprintf>
    loadEmonlib();
   d5030:	f7ff ff62 	bl	d4ef8 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d5034:	4b0f      	ldr	r3, [pc, #60]	; (d5074 <_Z20updateConstantValuesv+0xc0>)
   d5036:	2201      	movs	r2, #1
   d5038:	701a      	strb	r2, [r3, #0]
} 
   d503a:	b002      	add	sp, #8
   d503c:	bd10      	pop	{r4, pc}
   d503e:	bf00      	nop
   d5040:	2003e438 	.word	0x2003e438
   d5044:	000dd9a6 	.word	0x000dd9a6
   d5048:	2003e535 	.word	0x2003e535
   d504c:	000dd9b4 	.word	0x000dd9b4
   d5050:	2003e595 	.word	0x2003e595
   d5054:	000dd9c1 	.word	0x000dd9c1
   d5058:	2003e575 	.word	0x2003e575
   d505c:	000dd9d1 	.word	0x000dd9d1
   d5060:	2003e515 	.word	0x2003e515
   d5064:	000dd9ee 	.word	0x000dd9ee
   d5068:	2003e4f5 	.word	0x2003e4f5
   d506c:	000dda0b 	.word	0x000dda0b
   d5070:	2003e555 	.word	0x2003e555
   d5074:	2003df5e 	.word	0x2003df5e

000d5078 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d5078:	b500      	push	{lr}
   d507a:	b089      	sub	sp, #36	; 0x24
   d507c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d507e:	f005 f87d 	bl	da17c <_ZNK6String7toFloatEv>
   d5082:	4b0d      	ldr	r3, [pc, #52]	; (d50b8 <_Z14setConstantOne6String+0x40>)
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d5084:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d5086:	ed83 0a00 	vstr	s0, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d508a:	a804      	add	r0, sp, #16
   d508c:	f005 f808 	bl	da0a0 <_ZN6StringC1ERKS_>
   d5090:	2300      	movs	r3, #0
   d5092:	f88d 3000 	strb.w	r3, [sp]
   d5096:	4b09      	ldr	r3, [pc, #36]	; (d50bc <_Z14setConstantOne6String+0x44>)
   d5098:	9a04      	ldr	r2, [sp, #16]
   d509a:	781b      	ldrb	r3, [r3, #0]
   d509c:	4908      	ldr	r1, [pc, #32]	; (d50c0 <_Z14setConstantOne6String+0x48>)
   d509e:	4809      	ldr	r0, [pc, #36]	; (d50c4 <_Z14setConstantOne6String+0x4c>)
   d50a0:	f7ff f9d1 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d50a4:	a804      	add	r0, sp, #16
   d50a6:	f004 ff8d 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d50aa:	f7ff ff83 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d50ae:	2001      	movs	r0, #1
   d50b0:	b009      	add	sp, #36	; 0x24
   d50b2:	f85d fb04 	ldr.w	pc, [sp], #4
   d50b6:	bf00      	nop
   d50b8:	2003e438 	.word	0x2003e438
   d50bc:	2003df3d 	.word	0x2003df3d
   d50c0:	000dda27 	.word	0x000dda27
   d50c4:	2003e3e0 	.word	0x2003e3e0

000d50c8 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d50c8:	b500      	push	{lr}
   d50ca:	b089      	sub	sp, #36	; 0x24
   d50cc:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d50ce:	f005 f855 	bl	da17c <_ZNK6String7toFloatEv>
   d50d2:	4b0d      	ldr	r3, [pc, #52]	; (d5108 <_Z14setConstantTwo6String+0x40>)
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d50d4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d50d6:	ed83 0a01 	vstr	s0, [r3, #4]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d50da:	a804      	add	r0, sp, #16
   d50dc:	f004 ffe0 	bl	da0a0 <_ZN6StringC1ERKS_>
   d50e0:	2300      	movs	r3, #0
   d50e2:	f88d 3000 	strb.w	r3, [sp]
   d50e6:	4b09      	ldr	r3, [pc, #36]	; (d510c <_Z14setConstantTwo6String+0x44>)
   d50e8:	9a04      	ldr	r2, [sp, #16]
   d50ea:	781b      	ldrb	r3, [r3, #0]
   d50ec:	4908      	ldr	r1, [pc, #32]	; (d5110 <_Z14setConstantTwo6String+0x48>)
   d50ee:	4809      	ldr	r0, [pc, #36]	; (d5114 <_Z14setConstantTwo6String+0x4c>)
   d50f0:	f7ff f9a9 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d50f4:	a804      	add	r0, sp, #16
   d50f6:	f004 ff65 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d50fa:	f7ff ff5b 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d50fe:	2001      	movs	r0, #1
   d5100:	b009      	add	sp, #36	; 0x24
   d5102:	f85d fb04 	ldr.w	pc, [sp], #4
   d5106:	bf00      	nop
   d5108:	2003e438 	.word	0x2003e438
   d510c:	2003df3d 	.word	0x2003df3d
   d5110:	000dda42 	.word	0x000dda42
   d5114:	2003e3e0 	.word	0x2003e3e0

000d5118 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5118:	b500      	push	{lr}
   d511a:	b089      	sub	sp, #36	; 0x24
   d511c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d511e:	f005 f82d 	bl	da17c <_ZNK6String7toFloatEv>
   d5122:	4b0d      	ldr	r3, [pc, #52]	; (d5158 <_Z16setConstantThree6String+0x40>)
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5124:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5126:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d512a:	a804      	add	r0, sp, #16
   d512c:	f004 ffb8 	bl	da0a0 <_ZN6StringC1ERKS_>
   d5130:	2300      	movs	r3, #0
   d5132:	f88d 3000 	strb.w	r3, [sp]
   d5136:	4b09      	ldr	r3, [pc, #36]	; (d515c <_Z16setConstantThree6String+0x44>)
   d5138:	9a04      	ldr	r2, [sp, #16]
   d513a:	781b      	ldrb	r3, [r3, #0]
   d513c:	4908      	ldr	r1, [pc, #32]	; (d5160 <_Z16setConstantThree6String+0x48>)
   d513e:	4809      	ldr	r0, [pc, #36]	; (d5164 <_Z16setConstantThree6String+0x4c>)
   d5140:	f7ff f981 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5144:	a804      	add	r0, sp, #16
   d5146:	f004 ff3d 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d514a:	f7ff ff33 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d514e:	2001      	movs	r0, #1
   d5150:	b009      	add	sp, #36	; 0x24
   d5152:	f85d fb04 	ldr.w	pc, [sp], #4
   d5156:	bf00      	nop
   d5158:	2003e438 	.word	0x2003e438
   d515c:	2003df3d 	.word	0x2003df3d
   d5160:	000dda5d 	.word	0x000dda5d
   d5164:	2003e3e0 	.word	0x2003e3e0

000d5168 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d5168:	b500      	push	{lr}
   d516a:	b089      	sub	sp, #36	; 0x24
   d516c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d516e:	f005 f805 	bl	da17c <_ZNK6String7toFloatEv>
   d5172:	4b0d      	ldr	r3, [pc, #52]	; (d51a8 <_Z15setConstantFour6String+0x40>)
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d5174:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d5176:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d517a:	a804      	add	r0, sp, #16
   d517c:	f004 ff90 	bl	da0a0 <_ZN6StringC1ERKS_>
   d5180:	2300      	movs	r3, #0
   d5182:	f88d 3000 	strb.w	r3, [sp]
   d5186:	4b09      	ldr	r3, [pc, #36]	; (d51ac <_Z15setConstantFour6String+0x44>)
   d5188:	9a04      	ldr	r2, [sp, #16]
   d518a:	781b      	ldrb	r3, [r3, #0]
   d518c:	4908      	ldr	r1, [pc, #32]	; (d51b0 <_Z15setConstantFour6String+0x48>)
   d518e:	4809      	ldr	r0, [pc, #36]	; (d51b4 <_Z15setConstantFour6String+0x4c>)
   d5190:	f7ff f959 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5194:	a804      	add	r0, sp, #16
   d5196:	f004 ff15 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d519a:	f7ff ff0b 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d519e:	2001      	movs	r0, #1
   d51a0:	b009      	add	sp, #36	; 0x24
   d51a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d51a6:	bf00      	nop
   d51a8:	2003e438 	.word	0x2003e438
   d51ac:	2003df3d 	.word	0x2003df3d
   d51b0:	000dda7a 	.word	0x000dda7a
   d51b4:	2003e3e0 	.word	0x2003e3e0

000d51b8 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d51b8:	b500      	push	{lr}
   d51ba:	b089      	sub	sp, #36	; 0x24
   d51bc:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d51be:	f004 ffdd 	bl	da17c <_ZNK6String7toFloatEv>
   d51c2:	4b0d      	ldr	r3, [pc, #52]	; (d51f8 <_Z15setConstantFive6String+0x40>)
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d51c4:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d51c6:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d51ca:	a804      	add	r0, sp, #16
   d51cc:	f004 ff68 	bl	da0a0 <_ZN6StringC1ERKS_>
   d51d0:	2300      	movs	r3, #0
   d51d2:	f88d 3000 	strb.w	r3, [sp]
   d51d6:	4b09      	ldr	r3, [pc, #36]	; (d51fc <_Z15setConstantFive6String+0x44>)
   d51d8:	9a04      	ldr	r2, [sp, #16]
   d51da:	781b      	ldrb	r3, [r3, #0]
   d51dc:	4908      	ldr	r1, [pc, #32]	; (d5200 <_Z15setConstantFive6String+0x48>)
   d51de:	4809      	ldr	r0, [pc, #36]	; (d5204 <_Z15setConstantFive6String+0x4c>)
   d51e0:	f7ff f931 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d51e4:	a804      	add	r0, sp, #16
   d51e6:	f004 feed 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d51ea:	f7ff fee3 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d51ee:	2001      	movs	r0, #1
   d51f0:	b009      	add	sp, #36	; 0x24
   d51f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d51f6:	bf00      	nop
   d51f8:	2003e438 	.word	0x2003e438
   d51fc:	2003df3d 	.word	0x2003df3d
   d5200:	000dda96 	.word	0x000dda96
   d5204:	2003e3e0 	.word	0x2003e3e0

000d5208 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5208:	b500      	push	{lr}
   d520a:	b089      	sub	sp, #36	; 0x24
   d520c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d520e:	f004 ffb5 	bl	da17c <_ZNK6String7toFloatEv>
   d5212:	4b0d      	ldr	r3, [pc, #52]	; (d5248 <_Z14setConstantSix6String+0x40>)
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5214:	9903      	ldr	r1, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5216:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d521a:	a804      	add	r0, sp, #16
   d521c:	f004 ff40 	bl	da0a0 <_ZN6StringC1ERKS_>
   d5220:	2300      	movs	r3, #0
   d5222:	f88d 3000 	strb.w	r3, [sp]
   d5226:	4b09      	ldr	r3, [pc, #36]	; (d524c <_Z14setConstantSix6String+0x44>)
   d5228:	9a04      	ldr	r2, [sp, #16]
   d522a:	781b      	ldrb	r3, [r3, #0]
   d522c:	4908      	ldr	r1, [pc, #32]	; (d5250 <_Z14setConstantSix6String+0x48>)
   d522e:	4809      	ldr	r0, [pc, #36]	; (d5254 <_Z14setConstantSix6String+0x4c>)
   d5230:	f7ff f909 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5234:	a804      	add	r0, sp, #16
   d5236:	f004 fec5 	bl	d9fc4 <_ZN6StringD1Ev>
  updateConstantValues();
   d523a:	f7ff febb 	bl	d4fb4 <_Z20updateConstantValuesv>
}
   d523e:	2001      	movs	r0, #1
   d5240:	b009      	add	sp, #36	; 0x24
   d5242:	f85d fb04 	ldr.w	pc, [sp], #4
   d5246:	bf00      	nop
   d5248:	2003e438 	.word	0x2003e438
   d524c:	2003df3d 	.word	0x2003df3d
   d5250:	000ddab2 	.word	0x000ddab2
   d5254:	2003e3e0 	.word	0x2003e3e0

000d5258 <_Z17sendConfigurationv>:
  }
  else return 0;
}

// This function is used for onsite checking and debugging. It sends device configuration as json data. 
void sendConfiguration(){
   d5258:	b5f0      	push	{r4, r5, r6, r7, lr}
   d525a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  char data[512];
  memset(data, 0, sizeof(data));
   d525e:	f44f 7400 	mov.w	r4, #512	; 0x200
   d5262:	ae0c      	add	r6, sp, #48	; 0x30
   d5264:	4622      	mov	r2, r4
   d5266:	2100      	movs	r1, #0
   d5268:	4630      	mov	r0, r6
   d526a:	f006 fb1d 	bl	db8a8 <memset>
        state_(BEGIN) {
   d526e:	2300      	movs	r3, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d5270:	4aa8      	ldr	r2, [pc, #672]	; (d5514 <_Z17sendConfigurationv+0x2bc>)
        state_(BEGIN) {
   d5272:	f88d 3020 	strb.w	r3, [sp, #32]
  JSONBufferWriter writer(data, sizeof(data));
  writer.beginObject();
   d5276:	a807      	add	r0, sp, #28
        n_(0) {
   d5278:	9207      	str	r2, [sp, #28]
   d527a:	930b      	str	r3, [sp, #44]	; 0x2c
   d527c:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
   d5280:	f004 fc4d 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("Name").value(DeviceNameHelperRetained::instance().getName());
   d5284:	49a4      	ldr	r1, [pc, #656]	; (d5518 <_Z17sendConfigurationv+0x2c0>)
   d5286:	a807      	add	r0, sp, #28
   d5288:	f7ff f8aa 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d528c:	4604      	mov	r4, r0
   d528e:	f001 ff9b 	bl	d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>
   d5292:	6841      	ldr	r1, [r0, #4]
    /**
     * @brief Returns the device name as a c-string
     * 
     * May return an empty string if the name has not been retrieved yet
     */
    const char *getName() const { return data ? data->name : ""; };
   d5294:	2900      	cmp	r1, #0
   d5296:	f000 8097 	beq.w	d53c8 <_Z17sendConfigurationv+0x170>
   d529a:	310c      	adds	r1, #12
   d529c:	4620      	mov	r0, r4
   d529e:	f7ff f8ad 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Release").value(releaseNumber);
   d52a2:	499e      	ldr	r1, [pc, #632]	; (d551c <_Z17sendConfigurationv+0x2c4>)
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d52a4:	4c9e      	ldr	r4, [pc, #632]	; (d5520 <_Z17sendConfigurationv+0x2c8>)
    writer.name("Release").value(releaseNumber);
   d52a6:	a807      	add	r0, sp, #28
   d52a8:	f7ff f89a 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d52ac:	499d      	ldr	r1, [pc, #628]	; (d5524 <_Z17sendConfigurationv+0x2cc>)
   d52ae:	f7ff f8a5 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
    writer.name("Operating Mode").value(String(sysStatus.operatingMode));
   d52b2:	499d      	ldr	r1, [pc, #628]	; (d5528 <_Z17sendConfigurationv+0x2d0>)
   d52b4:	a807      	add	r0, sp, #28
   d52b6:	f7ff f893 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d52ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   d52bc:	4605      	mov	r5, r0
   d52be:	220a      	movs	r2, #10
   d52c0:	a803      	add	r0, sp, #12
   d52c2:	f004 ff0a 	bl	da0da <_ZN6StringC1Eih>
    return value(val.c_str(), val.length());
   d52c6:	9a05      	ldr	r2, [sp, #20]
   d52c8:	9903      	ldr	r1, [sp, #12]
   d52ca:	4628      	mov	r0, r5
   d52cc:	f004 fcda 	bl	d9c84 <_ZN5spark10JSONWriter5valueEPKcj>
   d52d0:	a803      	add	r0, sp, #12
   d52d2:	f004 fe77 	bl	d9fc4 <_ZN6StringD1Ev>
    writer.name("Sensors");
   d52d6:	4995      	ldr	r1, [pc, #596]	; (d552c <_Z17sendConfigurationv+0x2d4>)
   d52d8:	a807      	add	r0, sp, #28
   d52da:	f7ff f881 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
    writer.beginObject();
   d52de:	a807      	add	r0, sp, #28
   d52e0:	f004 fc1d 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
      if ((sysStatus.operatingMode) == 1){
   d52e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d52e6:	2b01      	cmp	r3, #1
   d52e8:	d170      	bne.n	d53cc <_Z17sendConfigurationv+0x174>
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d52ea:	4991      	ldr	r1, [pc, #580]	; (d5530 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d52ec:	4d91      	ldr	r5, [pc, #580]	; (d5534 <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(sysStatus.sensorOneConnected);
   d52ee:	a807      	add	r0, sp, #28
   d52f0:	f7ff f876 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d52f4:	7f21      	ldrb	r1, [r4, #28]
   d52f6:	f004 fc1f 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d52fa:	498f      	ldr	r1, [pc, #572]	; (d5538 <_Z17sendConfigurationv+0x2e0>)
   d52fc:	a807      	add	r0, sp, #28
   d52fe:	f7ff f86f 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5302:	4607      	mov	r7, r0
   d5304:	6828      	ldr	r0, [r5, #0]
   d5306:	f005 fec3 	bl	db090 <__aeabi_f2d>
   d530a:	ec41 0b10 	vmov	d0, r0, r1
   d530e:	4638      	mov	r0, r7
   d5310:	f004 fc3c 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(sysStatus.sensorTwoConnected);
   d5314:	4989      	ldr	r1, [pc, #548]	; (d553c <_Z17sendConfigurationv+0x2e4>)
   d5316:	a807      	add	r0, sp, #28
   d5318:	f7ff f862 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d531c:	7f61      	ldrb	r1, [r4, #29]
   d531e:	f004 fc0b 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d5322:	4987      	ldr	r1, [pc, #540]	; (d5540 <_Z17sendConfigurationv+0x2e8>)
   d5324:	a807      	add	r0, sp, #28
   d5326:	f7ff f85b 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d532a:	4607      	mov	r7, r0
   d532c:	6868      	ldr	r0, [r5, #4]
   d532e:	f005 feaf 	bl	db090 <__aeabi_f2d>
   d5332:	ec41 0b10 	vmov	d0, r0, r1
   d5336:	4638      	mov	r0, r7
   d5338:	f004 fc28 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(sysStatus.sensorThreeConnected);
   d533c:	4981      	ldr	r1, [pc, #516]	; (d5544 <_Z17sendConfigurationv+0x2ec>)
   d533e:	a807      	add	r0, sp, #28
   d5340:	f7ff f84e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5344:	7fa1      	ldrb	r1, [r4, #30]
   d5346:	f004 fbf7 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorOneConnected").value(true);
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
        writer.name("SensorTwoConnected").value(true);
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
        writer.name("SensorThreeConnected").value(true);
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d534a:	497f      	ldr	r1, [pc, #508]	; (d5548 <_Z17sendConfigurationv+0x2f0>)
   d534c:	a807      	add	r0, sp, #28
   d534e:	f7ff f847 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5352:	4607      	mov	r7, r0
   d5354:	68a8      	ldr	r0, [r5, #8]
   d5356:	f005 fe9b 	bl	db090 <__aeabi_f2d>
   d535a:	ec41 0b10 	vmov	d0, r0, r1
   d535e:	4638      	mov	r0, r7
   d5360:	f004 fc14 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(sysStatus.sensorFourConnected);
   d5364:	4979      	ldr	r1, [pc, #484]	; (d554c <_Z17sendConfigurationv+0x2f4>)
   d5366:	a807      	add	r0, sp, #28
   d5368:	f7ff f83a 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d536c:	7fe1      	ldrb	r1, [r4, #31]
   d536e:	f004 fbe3 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d5372:	4977      	ldr	r1, [pc, #476]	; (d5550 <_Z17sendConfigurationv+0x2f8>)
   d5374:	a807      	add	r0, sp, #28
   d5376:	f7ff f833 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d537a:	4607      	mov	r7, r0
   d537c:	68e8      	ldr	r0, [r5, #12]
   d537e:	f005 fe87 	bl	db090 <__aeabi_f2d>
   d5382:	ec41 0b10 	vmov	d0, r0, r1
   d5386:	4638      	mov	r0, r7
   d5388:	f004 fc00 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(sysStatus.sensorFiveConnected);
   d538c:	4971      	ldr	r1, [pc, #452]	; (d5554 <_Z17sendConfigurationv+0x2fc>)
   d538e:	a807      	add	r0, sp, #28
   d5390:	f7ff f826 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5394:	f894 1020 	ldrb.w	r1, [r4, #32]
   d5398:	f004 fbce 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d539c:	496e      	ldr	r1, [pc, #440]	; (d5558 <_Z17sendConfigurationv+0x300>)
   d539e:	a807      	add	r0, sp, #28
   d53a0:	f7ff f81e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d53a4:	4607      	mov	r7, r0
   d53a6:	6928      	ldr	r0, [r5, #16]
   d53a8:	f005 fe72 	bl	db090 <__aeabi_f2d>
   d53ac:	ec41 0b10 	vmov	d0, r0, r1
   d53b0:	4638      	mov	r0, r7
   d53b2:	f004 fbeb 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(sysStatus.sensorSixConnected);
   d53b6:	4969      	ldr	r1, [pc, #420]	; (d555c <_Z17sendConfigurationv+0x304>)
   d53b8:	a807      	add	r0, sp, #28
   d53ba:	f7ff f811 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d53be:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d53c2:	f004 fbb9 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
   d53c6:	e070      	b.n	d54aa <_Z17sendConfigurationv+0x252>
   d53c8:	4965      	ldr	r1, [pc, #404]	; (d5560 <_Z17sendConfigurationv+0x308>)
   d53ca:	e767      	b.n	d529c <_Z17sendConfigurationv+0x44>
      else if ((sysStatus.operatingMode) == 2){
   d53cc:	2b02      	cmp	r3, #2
   d53ce:	f040 80d7 	bne.w	d5580 <_Z17sendConfigurationv+0x328>
        writer.name("SensorOneConnected").value(true);
   d53d2:	4957      	ldr	r1, [pc, #348]	; (d5530 <_Z17sendConfigurationv+0x2d8>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d53d4:	4d57      	ldr	r5, [pc, #348]	; (d5534 <_Z17sendConfigurationv+0x2dc>)
        writer.name("SensorOneConnected").value(true);
   d53d6:	a807      	add	r0, sp, #28
   d53d8:	f7ff f802 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d53dc:	2101      	movs	r1, #1
   d53de:	f004 fbc3 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d53e2:	4955      	ldr	r1, [pc, #340]	; (d5538 <_Z17sendConfigurationv+0x2e0>)
   d53e4:	a807      	add	r0, sp, #28
   d53e6:	f7fe fffb 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d53ea:	4607      	mov	r7, r0
   d53ec:	6828      	ldr	r0, [r5, #0]
   d53ee:	f005 fe4f 	bl	db090 <__aeabi_f2d>
   d53f2:	ec41 0b10 	vmov	d0, r0, r1
   d53f6:	4638      	mov	r0, r7
   d53f8:	f004 fbc8 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d53fc:	494f      	ldr	r1, [pc, #316]	; (d553c <_Z17sendConfigurationv+0x2e4>)
   d53fe:	a807      	add	r0, sp, #28
   d5400:	f7fe ffee 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5404:	2101      	movs	r1, #1
   d5406:	f004 fbaf 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d540a:	494d      	ldr	r1, [pc, #308]	; (d5540 <_Z17sendConfigurationv+0x2e8>)
   d540c:	a807      	add	r0, sp, #28
   d540e:	f7fe ffe7 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5412:	4607      	mov	r7, r0
   d5414:	6868      	ldr	r0, [r5, #4]
   d5416:	f005 fe3b 	bl	db090 <__aeabi_f2d>
   d541a:	ec41 0b10 	vmov	d0, r0, r1
   d541e:	4638      	mov	r0, r7
   d5420:	f004 fbb4 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d5424:	4947      	ldr	r1, [pc, #284]	; (d5544 <_Z17sendConfigurationv+0x2ec>)
   d5426:	a807      	add	r0, sp, #28
   d5428:	f7fe ffda 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d542c:	2101      	movs	r1, #1
   d542e:	f004 fb9b 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorThreeConstant").value(sensorConstants.sensorThreeConstant);
   d5432:	4945      	ldr	r1, [pc, #276]	; (d5548 <_Z17sendConfigurationv+0x2f0>)
   d5434:	a807      	add	r0, sp, #28
   d5436:	f7fe ffd3 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d543a:	4607      	mov	r7, r0
   d543c:	68a8      	ldr	r0, [r5, #8]
   d543e:	f005 fe27 	bl	db090 <__aeabi_f2d>
   d5442:	ec41 0b10 	vmov	d0, r0, r1
   d5446:	4638      	mov	r0, r7
   d5448:	f004 fba0 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFourConnected").value(true);
   d544c:	493f      	ldr	r1, [pc, #252]	; (d554c <_Z17sendConfigurationv+0x2f4>)
   d544e:	a807      	add	r0, sp, #28
   d5450:	f7fe ffc6 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5454:	2101      	movs	r1, #1
   d5456:	f004 fb87 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFourConstant").value(sensorConstants.sensorFourConstant);
   d545a:	493d      	ldr	r1, [pc, #244]	; (d5550 <_Z17sendConfigurationv+0x2f8>)
   d545c:	a807      	add	r0, sp, #28
   d545e:	f7fe ffbf 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5462:	4607      	mov	r7, r0
   d5464:	68e8      	ldr	r0, [r5, #12]
   d5466:	f005 fe13 	bl	db090 <__aeabi_f2d>
   d546a:	ec41 0b10 	vmov	d0, r0, r1
   d546e:	4638      	mov	r0, r7
   d5470:	f004 fb8c 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorFiveConnected").value(true);
   d5474:	4937      	ldr	r1, [pc, #220]	; (d5554 <_Z17sendConfigurationv+0x2fc>)
   d5476:	a807      	add	r0, sp, #28
   d5478:	f7fe ffb2 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d547c:	2101      	movs	r1, #1
   d547e:	f004 fb73 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorFiveConstant").value(sensorConstants.sensorFiveConstant);
   d5482:	4935      	ldr	r1, [pc, #212]	; (d5558 <_Z17sendConfigurationv+0x300>)
   d5484:	a807      	add	r0, sp, #28
   d5486:	f7fe ffab 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d548a:	4607      	mov	r7, r0
   d548c:	6928      	ldr	r0, [r5, #16]
   d548e:	f005 fdff 	bl	db090 <__aeabi_f2d>
   d5492:	ec41 0b10 	vmov	d0, r0, r1
   d5496:	4638      	mov	r0, r7
   d5498:	f004 fb78 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorSixConnected").value(true);
   d549c:	492f      	ldr	r1, [pc, #188]	; (d555c <_Z17sendConfigurationv+0x304>)
   d549e:	a807      	add	r0, sp, #28
   d54a0:	f7fe ff9e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d54a4:	2101      	movs	r1, #1
   d54a6:	f004 fb5f 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorSixConstant").value(sensorConstants.sensorSixConstant);
   d54aa:	492e      	ldr	r1, [pc, #184]	; (d5564 <_Z17sendConfigurationv+0x30c>)
   d54ac:	a807      	add	r0, sp, #28
   d54ae:	f7fe ff97 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d54b2:	4607      	mov	r7, r0
   d54b4:	6968      	ldr	r0, [r5, #20]
   d54b6:	f005 fdeb 	bl	db090 <__aeabi_f2d>
   d54ba:	ec41 0b10 	vmov	d0, r0, r1
   d54be:	4638      	mov	r0, r7
   d54c0:	f004 fb64 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
      }
    writer.endObject();
   d54c4:	a807      	add	r0, sp, #28
   d54c6:	f004 fb14 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("Third Party Sim").value(sysStatus.thirdPartySim);
   d54ca:	4927      	ldr	r1, [pc, #156]	; (d5568 <_Z17sendConfigurationv+0x310>)
   d54cc:	a807      	add	r0, sp, #28
   d54ce:	f7fe ff87 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d54d2:	7861      	ldrb	r1, [r4, #1]
   d54d4:	f004 fb30 	bl	d9b38 <_ZN5spark10JSONWriter5valueEb>
    writer.name("KeepAlive").value(sysStatus.keepAlive);
   d54d8:	4924      	ldr	r1, [pc, #144]	; (d556c <_Z17sendConfigurationv+0x314>)
   d54da:	a807      	add	r0, sp, #28
   d54dc:	f7fe ff80 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d54e0:	6861      	ldr	r1, [r4, #4]
   d54e2:	f004 fb41 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
    writer.name("Reporting Duration").value(sysStatus.reportingBoundary);
   d54e6:	4922      	ldr	r1, [pc, #136]	; (d5570 <_Z17sendConfigurationv+0x318>)
   d54e8:	a807      	add	r0, sp, #28
   d54ea:	f7fe ff79 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d54ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d54f0:	f004 fb3a 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
  writer.endObject();
   d54f4:	a807      	add	r0, sp, #28
   d54f6:	f004 fafc 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
   d54fa:	2300      	movs	r3, #0

  publishQueue.publish("System Configuration",data,PRIVATE);
   d54fc:	f88d 3000 	strb.w	r3, [sp]
   d5500:	4b1c      	ldr	r3, [pc, #112]	; (d5574 <_Z17sendConfigurationv+0x31c>)
   d5502:	491d      	ldr	r1, [pc, #116]	; (d5578 <_Z17sendConfigurationv+0x320>)
   d5504:	781b      	ldrb	r3, [r3, #0]
   d5506:	481d      	ldr	r0, [pc, #116]	; (d557c <_Z17sendConfigurationv+0x324>)
   d5508:	4632      	mov	r2, r6
   d550a:	f7fe ff9c 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 
   d550e:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   d5512:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5514:	000de4b4 	.word	0x000de4b4
   d5518:	000ddc51 	.word	0x000ddc51
   d551c:	000ddacd 	.word	0x000ddacd
   d5520:	2003e5b8 	.word	0x2003e5b8
   d5524:	000ddfc8 	.word	0x000ddfc8
   d5528:	000ddad5 	.word	0x000ddad5
   d552c:	000ddae4 	.word	0x000ddae4
   d5530:	000ddaec 	.word	0x000ddaec
   d5534:	2003e438 	.word	0x2003e438
   d5538:	000ddaff 	.word	0x000ddaff
   d553c:	000ddb11 	.word	0x000ddb11
   d5540:	000ddb24 	.word	0x000ddb24
   d5544:	000ddb36 	.word	0x000ddb36
   d5548:	000ddb4b 	.word	0x000ddb4b
   d554c:	000ddb5f 	.word	0x000ddb5f
   d5550:	000ddb73 	.word	0x000ddb73
   d5554:	000ddb86 	.word	0x000ddb86
   d5558:	000ddb9a 	.word	0x000ddb9a
   d555c:	000ddbad 	.word	0x000ddbad
   d5560:	000de5f4 	.word	0x000de5f4
   d5564:	000ddbc0 	.word	0x000ddbc0
   d5568:	000ddbd2 	.word	0x000ddbd2
   d556c:	000ddbe2 	.word	0x000ddbe2
   d5570:	000ddbec 	.word	0x000ddbec
   d5574:	2003df3d 	.word	0x2003df3d
   d5578:	000ddbff 	.word	0x000ddbff
   d557c:	2003e3e0 	.word	0x2003e3e0
      else if ((sysStatus.operatingMode) == 3){
   d5580:	2b03      	cmp	r3, #3
   d5582:	d19f      	bne.n	d54c4 <_Z17sendConfigurationv+0x26c>
        writer.name("SensorOneConnected").value(true);
   d5584:	4918      	ldr	r1, [pc, #96]	; (d55e8 <_Z17sendConfigurationv+0x390>)
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5586:	4d19      	ldr	r5, [pc, #100]	; (d55ec <_Z17sendConfigurationv+0x394>)
        writer.name("SensorOneConnected").value(true);
   d5588:	a807      	add	r0, sp, #28
   d558a:	f7fe ff29 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d558e:	2101      	movs	r1, #1
   d5590:	f004 faea 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorOneConstant").value(sensorConstants.sensorOneConstant);
   d5594:	4916      	ldr	r1, [pc, #88]	; (d55f0 <_Z17sendConfigurationv+0x398>)
   d5596:	a807      	add	r0, sp, #28
   d5598:	f7fe ff22 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d559c:	4607      	mov	r7, r0
   d559e:	6828      	ldr	r0, [r5, #0]
   d55a0:	f005 fd76 	bl	db090 <__aeabi_f2d>
   d55a4:	ec41 0b10 	vmov	d0, r0, r1
   d55a8:	4638      	mov	r0, r7
   d55aa:	f004 faef 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorTwoConnected").value(true);
   d55ae:	4911      	ldr	r1, [pc, #68]	; (d55f4 <_Z17sendConfigurationv+0x39c>)
   d55b0:	a807      	add	r0, sp, #28
   d55b2:	f7fe ff15 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d55b6:	2101      	movs	r1, #1
   d55b8:	f004 fad6 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        writer.name("SensorTwoConstant").value(sensorConstants.sensorTwoConstant);
   d55bc:	490e      	ldr	r1, [pc, #56]	; (d55f8 <_Z17sendConfigurationv+0x3a0>)
   d55be:	a807      	add	r0, sp, #28
   d55c0:	f7fe ff0e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d55c4:	4607      	mov	r7, r0
   d55c6:	6868      	ldr	r0, [r5, #4]
   d55c8:	f005 fd62 	bl	db090 <__aeabi_f2d>
   d55cc:	ec41 0b10 	vmov	d0, r0, r1
   d55d0:	4638      	mov	r0, r7
   d55d2:	f004 fadb 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        writer.name("SensorThreeConnected").value(true);
   d55d6:	4909      	ldr	r1, [pc, #36]	; (d55fc <_Z17sendConfigurationv+0x3a4>)
   d55d8:	a807      	add	r0, sp, #28
   d55da:	f7fe ff01 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d55de:	2101      	movs	r1, #1
   d55e0:	f004 fac2 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
   d55e4:	e6b1      	b.n	d534a <_Z17sendConfigurationv+0xf2>
   d55e6:	bf00      	nop
   d55e8:	000ddaec 	.word	0x000ddaec
   d55ec:	2003e438 	.word	0x2003e438
   d55f0:	000ddaff 	.word	0x000ddaff
   d55f4:	000ddb11 	.word	0x000ddb11
   d55f8:	000ddb24 	.word	0x000ddb24
   d55fc:	000ddb36 	.word	0x000ddb36

000d5600 <_Z25sendConfigurationFunction6String>:
{
   d5600:	b508      	push	{r3, lr}
   d5602:	4904      	ldr	r1, [pc, #16]	; (d5614 <_Z25sendConfigurationFunction6String+0x14>)
   d5604:	f004 fda8 	bl	da158 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d5608:	b110      	cbz	r0, d5610 <_Z25sendConfigurationFunction6String+0x10>
    sendConfiguration();
   d560a:	f7ff fe25 	bl	d5258 <_Z17sendConfigurationv>
    return 1;
   d560e:	2001      	movs	r0, #1
}
   d5610:	bd08      	pop	{r3, pc}
   d5612:	bf00      	nop
   d5614:	000dd74b 	.word	0x000dd74b

000d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5618:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d561a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d561c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d561e:	b17c      	cbz	r4, d5640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5620:	6863      	ldr	r3, [r4, #4]
   d5622:	3b01      	subs	r3, #1
   d5624:	6063      	str	r3, [r4, #4]
   d5626:	b95b      	cbnz	r3, d5640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5628:	6823      	ldr	r3, [r4, #0]
   d562a:	4620      	mov	r0, r4
   d562c:	689b      	ldr	r3, [r3, #8]
   d562e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5630:	68a3      	ldr	r3, [r4, #8]
   d5632:	3b01      	subs	r3, #1
   d5634:	60a3      	str	r3, [r4, #8]
   d5636:	b91b      	cbnz	r3, d5640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5638:	6823      	ldr	r3, [r4, #0]
   d563a:	4620      	mov	r0, r4
   d563c:	68db      	ldr	r3, [r3, #12]
   d563e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5640:	4628      	mov	r0, r5
   d5642:	bd38      	pop	{r3, r4, r5, pc}

000d5644 <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>:
    JSONValue getJSONValueForKey(const char *key) { return getJSONValueForKey(jsonObj, key); }; 
   d5644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5646:	684b      	ldr	r3, [r1, #4]
   d5648:	9301      	str	r3, [sp, #4]
      : _M_pi(__r._M_pi)
   d564a:	688b      	ldr	r3, [r1, #8]
   d564c:	9302      	str	r3, [sp, #8]
   d564e:	4604      	mov	r4, r0
	if (_M_pi != 0)
   d5650:	b113      	cbz	r3, d5658 <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc+0x14>
    { ++_M_use_count; }
   d5652:	6858      	ldr	r0, [r3, #4]
   d5654:	3001      	adds	r0, #1
   d5656:	6058      	str	r0, [r3, #4]
class JSONValue {
   d5658:	68cb      	ldr	r3, [r1, #12]
   d565a:	9303      	str	r3, [sp, #12]
   d565c:	a901      	add	r1, sp, #4
   d565e:	4620      	mov	r0, r4
   d5660:	f001 fb73 	bl	d6d4a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5664:	a802      	add	r0, sp, #8
   d5666:	f7ff ffd7 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d566a:	4620      	mov	r0, r4
   d566c:	b004      	add	sp, #16
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_Z7logJsonv>:
void logJson() {
   d5670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (CloudConfig::instance().getJSONValueForKey("alias").isValid()) {}
   d5672:	f001 fa4b 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
    JSONValue getJSONValueForKey(const char *key) { return storageMethod->getJSONValueForKey(key); };
   d5676:	4a09      	ldr	r2, [pc, #36]	; (d569c <_Z7logJsonv+0x2c>)
   d5678:	6841      	ldr	r1, [r0, #4]
   d567a:	a801      	add	r0, sp, #4
   d567c:	f7ff ffe2 	bl	d5644 <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>
    return type() != JSON_TYPE_INVALID;
   d5680:	a801      	add	r0, sp, #4
   d5682:	f004 f8df 	bl	d9844 <_ZNK5spark9JSONValue4typeEv>
   d5686:	4604      	mov	r4, r0
   d5688:	a802      	add	r0, sp, #8
   d568a:	f7ff ffc5 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d568e:	b91c      	cbnz	r4, d5698 <_Z7logJsonv+0x28>
        Log.info("no config set");
   d5690:	4903      	ldr	r1, [pc, #12]	; (d56a0 <_Z7logJsonv+0x30>)
   d5692:	4804      	ldr	r0, [pc, #16]	; (d56a4 <_Z7logJsonv+0x34>)
   d5694:	f7fe fec0 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
}
   d5698:	b004      	add	sp, #16
   d569a:	bd10      	pop	{r4, pc}
   d569c:	000ddc14 	.word	0x000ddc14
   d56a0:	000ddc1a 	.word	0x000ddc1a
   d56a4:	2003e614 	.word	0x2003e614

000d56a8 <_ZNSt17_Function_handlerIFvvEZ5setupEUlvE_E9_M_invokeERKSt9_Any_data>:
            logJson();
   d56a8:	f7ff bfe2 	b.w	d5670 <_Z7logJsonv>

000d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>:
    const char *getString(const char *key) { return storageMethod->getJSONValueForKey(key).toString().data(); };
   d56ac:	b510      	push	{r4, lr}
   d56ae:	b08a      	sub	sp, #40	; 0x28
   d56b0:	460a      	mov	r2, r1
   d56b2:	4601      	mov	r1, r0
   d56b4:	a803      	add	r0, sp, #12
   d56b6:	f7ff ffc5 	bl	d5644 <_ZN18CloudConfigStorage18getJSONValueForKeyEPKc>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56ba:	9b03      	ldr	r3, [sp, #12]
   d56bc:	9301      	str	r3, [sp, #4]
      : _M_pi(__r._M_pi)
   d56be:	9b04      	ldr	r3, [sp, #16]
    return JSONString(t_, d_);
   d56c0:	9905      	ldr	r1, [sp, #20]
   d56c2:	9302      	str	r3, [sp, #8]
	if (_M_pi != 0)
   d56c4:	b113      	cbz	r3, d56cc <_ZN11CloudConfig9getStringEPKc.isra.0+0x20>
    { ++_M_use_count; }
   d56c6:	685a      	ldr	r2, [r3, #4]
   d56c8:	3201      	adds	r2, #1
   d56ca:	605a      	str	r2, [r3, #4]
   d56cc:	aa01      	add	r2, sp, #4
   d56ce:	a806      	add	r0, sp, #24
   d56d0:	f004 f9c0 	bl	d9a54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d56d4:	a802      	add	r0, sp, #8
   d56d6:	f7ff ff9f 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56da:	a807      	add	r0, sp, #28
   d56dc:	9c08      	ldr	r4, [sp, #32]
   d56de:	f7ff ff9b 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e2:	a804      	add	r0, sp, #16
   d56e4:	f7ff ff98 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e8:	4620      	mov	r0, r4
   d56ea:	b00a      	add	sp, #40	; 0x28
   d56ec:	bd10      	pop	{r4, pc}
	...

000d56f0 <_Z9sendEventv>:
{
   d56f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d56f4:	ed2d 8b06 	vpush	{d8-d10}
   d56f8:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d56fc:	a802      	add	r0, sp, #8
   d56fe:	f003 fa71 	bl	d8be4 <spark_deviceID>
  memset(influx_hook, 0, sizeof(influx_hook));
   d5702:	f44f 7500 	mov.w	r5, #512	; 0x200
   d5706:	ab50      	add	r3, sp, #320	; 0x140
   d5708:	462a      	mov	r2, r5
   d570a:	2100      	movs	r1, #0
   d570c:	4618      	mov	r0, r3
   d570e:	f006 f8cb 	bl	db8a8 <memset>
        state_(BEGIN) {
   d5712:	2400      	movs	r4, #0
  memset(ubidots_hook, 0, sizeof(ubidots_hook));
   d5714:	ab10      	add	r3, sp, #64	; 0x40
        n_(0) {
   d5716:	e9cd 0508 	strd	r0, r5, [sp, #32]
   d571a:	f44f 7580 	mov.w	r5, #256	; 0x100
   d571e:	462a      	mov	r2, r5
   d5720:	4618      	mov	r0, r3
   d5722:	4621      	mov	r1, r4
   d5724:	4ea2      	ldr	r6, [pc, #648]	; (d59b0 <_Z9sendEventv+0x2c0>)
        state_(BEGIN) {
   d5726:	f88d 401c 	strb.w	r4, [sp, #28]
        n_(0) {
   d572a:	940a      	str	r4, [sp, #40]	; 0x28
   d572c:	9606      	str	r6, [sp, #24]
   d572e:	f006 f8bb 	bl	db8a8 <memset>
   d5732:	e9cd 050d 	strd	r0, r5, [sp, #52]	; 0x34
  influxPayload.beginObject();
   d5736:	a806      	add	r0, sp, #24
        state_(BEGIN) {
   d5738:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
        n_(0) {
   d573c:	940f      	str	r4, [sp, #60]	; 0x3c
   d573e:	960b      	str	r6, [sp, #44]	; 0x2c
   d5740:	f004 f9ed 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
  ubidotsPayLoad.beginObject();
   d5744:	a80b      	add	r0, sp, #44	; 0x2c
   d5746:	f004 f9ea 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
    influxPayload.name("tags");
   d574a:	499a      	ldr	r1, [pc, #616]	; (d59b4 <_Z9sendEventv+0x2c4>)
   d574c:	a806      	add	r0, sp, #24
   d574e:	f7fe fe47 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
    influxPayload.beginObject();
   d5752:	a806      	add	r0, sp, #24
   d5754:	f004 f9e3 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
      influxPayload.name("alias").value(CloudConfig::instance().getString("alias"));
   d5758:	4997      	ldr	r1, [pc, #604]	; (d59b8 <_Z9sendEventv+0x2c8>)
   d575a:	a806      	add	r0, sp, #24
   d575c:	f7fe fe40 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5760:	4604      	mov	r4, r0
   d5762:	f001 f9d3 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d5766:	4994      	ldr	r1, [pc, #592]	; (d59b8 <_Z9sendEventv+0x2c8>)
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	f7ff ff9f 	bl	d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>
   d576e:	4601      	mov	r1, r0
   d5770:	4620      	mov	r0, r4
   d5772:	f7fe fe43 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("lat").value(CloudConfig::instance().getString("lat"));
   d5776:	4991      	ldr	r1, [pc, #580]	; (d59bc <_Z9sendEventv+0x2cc>)
   d5778:	a806      	add	r0, sp, #24
   d577a:	f7fe fe31 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d577e:	4604      	mov	r4, r0
   d5780:	f001 f9c4 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d5784:	498d      	ldr	r1, [pc, #564]	; (d59bc <_Z9sendEventv+0x2cc>)
   d5786:	6840      	ldr	r0, [r0, #4]
   d5788:	f7ff ff90 	bl	d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>
   d578c:	4601      	mov	r1, r0
   d578e:	4620      	mov	r0, r4
   d5790:	f7fe fe34 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("longitude").value(CloudConfig::instance().getString("longitude"));
   d5794:	498a      	ldr	r1, [pc, #552]	; (d59c0 <_Z9sendEventv+0x2d0>)
   d5796:	a806      	add	r0, sp, #24
   d5798:	f7fe fe22 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d579c:	4604      	mov	r4, r0
   d579e:	f001 f9b5 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d57a2:	4987      	ldr	r1, [pc, #540]	; (d59c0 <_Z9sendEventv+0x2d0>)
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	f7ff ff81 	bl	d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>
   d57aa:	4601      	mov	r1, r0
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7fe fe25 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("product").value(CloudConfig::instance().getString("product"));
   d57b2:	4984      	ldr	r1, [pc, #528]	; (d59c4 <_Z9sendEventv+0x2d4>)
   d57b4:	a806      	add	r0, sp, #24
   d57b6:	f7fe fe13 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d57ba:	4604      	mov	r4, r0
   d57bc:	f001 f9a6 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d57c0:	4980      	ldr	r1, [pc, #512]	; (d59c4 <_Z9sendEventv+0x2d4>)
   d57c2:	6840      	ldr	r0, [r0, #4]
   d57c4:	f7ff ff72 	bl	d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>
   d57c8:	4601      	mov	r1, r0
   d57ca:	4620      	mov	r0, r4
   d57cc:	f7fe fe16 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("client").value(CloudConfig::instance().getString("client"));
   d57d0:	497d      	ldr	r1, [pc, #500]	; (d59c8 <_Z9sendEventv+0x2d8>)
   d57d2:	a806      	add	r0, sp, #24
   d57d4:	f7fe fe04 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d57d8:	4604      	mov	r4, r0
   d57da:	f001 f997 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d57de:	497a      	ldr	r1, [pc, #488]	; (d59c8 <_Z9sendEventv+0x2d8>)
   d57e0:	6840      	ldr	r0, [r0, #4]
   d57e2:	f7ff ff63 	bl	d56ac <_ZN11CloudConfig9getStringEPKc.isra.0>
   d57e6:	4601      	mov	r1, r0
   d57e8:	4620      	mov	r0, r4
   d57ea:	f7fe fe07 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("Device-Name").value(DeviceNameHelperRetained::instance().getName());
   d57ee:	4977      	ldr	r1, [pc, #476]	; (d59cc <_Z9sendEventv+0x2dc>)
   d57f0:	a806      	add	r0, sp, #24
   d57f2:	f7fe fdf5 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d57f6:	4604      	mov	r4, r0
   d57f8:	f001 fce6 	bl	d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>
   d57fc:	6841      	ldr	r1, [r0, #4]
   d57fe:	2900      	cmp	r1, #0
   d5800:	f000 80d3 	beq.w	d59aa <_Z9sendEventv+0x2ba>
   d5804:	310c      	adds	r1, #12
   d5806:	4620      	mov	r0, r4
   d5808:	f7fe fdf8 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
      influxPayload.name("device_id").value(myDeviceID.c_str());
   d580c:	4970      	ldr	r1, [pc, #448]	; (d59d0 <_Z9sendEventv+0x2e0>)
      if (sysStatus.operatingMode == 1){
   d580e:	4e71      	ldr	r6, [pc, #452]	; (d59d4 <_Z9sendEventv+0x2e4>)
   d5810:	4c71      	ldr	r4, [pc, #452]	; (d59d8 <_Z9sendEventv+0x2e8>)
      influxPayload.name("device_id").value(myDeviceID.c_str());
   d5812:	a806      	add	r0, sp, #24
   d5814:	f7fe fde4 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5818:	9902      	ldr	r1, [sp, #8]
   d581a:	f7fe fdef 	bl	d43fc <_ZN5spark10JSONWriter5valueEPKc>
    influxPayload.endObject();
   d581e:	a806      	add	r0, sp, #24
   d5820:	f004 f967 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
    influxPayload.name("values");
   d5824:	496d      	ldr	r1, [pc, #436]	; (d59dc <_Z9sendEventv+0x2ec>)
   d5826:	a806      	add	r0, sp, #24
   d5828:	f7fe fdda 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
    influxPayload.beginObject();
   d582c:	a806      	add	r0, sp, #24
   d582e:	f004 f976 	bl	d9b1e <_ZN5spark10JSONWriter11beginObjectEv>
      if (sysStatus.operatingMode == 1){
   d5832:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   d5834:	2b01      	cmp	r3, #1
   d5836:	4635      	mov	r5, r6
   d5838:	f040 80e2 	bne.w	d5a00 <_Z9sendEventv+0x310>
        if (sysStatus.sensorOneConnected) {
   d583c:	7f33      	ldrb	r3, [r6, #28]
   d583e:	b1cb      	cbz	r3, d5874 <_Z9sendEventv+0x184>
          influxPayload.name("sensorOne").value(sensorData.sensorOneCurrent);
   d5840:	4967      	ldr	r1, [pc, #412]	; (d59e0 <_Z9sendEventv+0x2f0>)
   d5842:	a806      	add	r0, sp, #24
   d5844:	f7fe fdcc 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5848:	4606      	mov	r6, r0
   d584a:	6820      	ldr	r0, [r4, #0]
   d584c:	f005 fc20 	bl	db090 <__aeabi_f2d>
   d5850:	ec41 0b10 	vmov	d0, r0, r1
   d5854:	4630      	mov	r0, r6
   d5856:	f004 f999 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorOne").value(sensorData.sensorOneCurrent);
   d585a:	4961      	ldr	r1, [pc, #388]	; (d59e0 <_Z9sendEventv+0x2f0>)
   d585c:	a80b      	add	r0, sp, #44	; 0x2c
   d585e:	f7fe fdbf 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5862:	4606      	mov	r6, r0
   d5864:	6820      	ldr	r0, [r4, #0]
   d5866:	f005 fc13 	bl	db090 <__aeabi_f2d>
   d586a:	ec41 0b10 	vmov	d0, r0, r1
   d586e:	4630      	mov	r0, r6
   d5870:	f004 f98c 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorTwoConnected) {
   d5874:	7f6b      	ldrb	r3, [r5, #29]
   d5876:	b1cb      	cbz	r3, d58ac <_Z9sendEventv+0x1bc>
          influxPayload.name("sensorTwo").value(sensorData.sensorTwoCurrent);
   d5878:	495a      	ldr	r1, [pc, #360]	; (d59e4 <_Z9sendEventv+0x2f4>)
   d587a:	a806      	add	r0, sp, #24
   d587c:	f7fe fdb0 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5880:	4606      	mov	r6, r0
   d5882:	6860      	ldr	r0, [r4, #4]
   d5884:	f005 fc04 	bl	db090 <__aeabi_f2d>
   d5888:	ec41 0b10 	vmov	d0, r0, r1
   d588c:	4630      	mov	r0, r6
   d588e:	f004 f97d 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorTwo").value(sensorData.sensorTwoCurrent);
   d5892:	4954      	ldr	r1, [pc, #336]	; (d59e4 <_Z9sendEventv+0x2f4>)
   d5894:	a80b      	add	r0, sp, #44	; 0x2c
   d5896:	f7fe fda3 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d589a:	4606      	mov	r6, r0
   d589c:	6860      	ldr	r0, [r4, #4]
   d589e:	f005 fbf7 	bl	db090 <__aeabi_f2d>
   d58a2:	ec41 0b10 	vmov	d0, r0, r1
   d58a6:	4630      	mov	r0, r6
   d58a8:	f004 f970 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorThreeConnected) {
   d58ac:	7fab      	ldrb	r3, [r5, #30]
   d58ae:	b1cb      	cbz	r3, d58e4 <_Z9sendEventv+0x1f4>
          influxPayload.name("sensorThree").value(sensorData.sensorThreeCurrent);
   d58b0:	494d      	ldr	r1, [pc, #308]	; (d59e8 <_Z9sendEventv+0x2f8>)
   d58b2:	a806      	add	r0, sp, #24
   d58b4:	f7fe fd94 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d58b8:	4606      	mov	r6, r0
   d58ba:	68a0      	ldr	r0, [r4, #8]
   d58bc:	f005 fbe8 	bl	db090 <__aeabi_f2d>
   d58c0:	ec41 0b10 	vmov	d0, r0, r1
   d58c4:	4630      	mov	r0, r6
   d58c6:	f004 f961 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorThree").value(sensorData.sensorThreeCurrent);
   d58ca:	4947      	ldr	r1, [pc, #284]	; (d59e8 <_Z9sendEventv+0x2f8>)
   d58cc:	a80b      	add	r0, sp, #44	; 0x2c
   d58ce:	f7fe fd87 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d58d2:	4606      	mov	r6, r0
   d58d4:	68a0      	ldr	r0, [r4, #8]
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d58d6:	f005 fbdb 	bl	db090 <__aeabi_f2d>
   d58da:	ec41 0b10 	vmov	d0, r0, r1
   d58de:	4630      	mov	r0, r6
   d58e0:	f004 f954 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFourConnected) {
   d58e4:	7feb      	ldrb	r3, [r5, #31]
   d58e6:	b1cb      	cbz	r3, d591c <_Z9sendEventv+0x22c>
          influxPayload.name("sensorFour").value(sensorData.sensorFourCurrent);
   d58e8:	4940      	ldr	r1, [pc, #256]	; (d59ec <_Z9sendEventv+0x2fc>)
   d58ea:	a806      	add	r0, sp, #24
   d58ec:	f7fe fd78 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d58f0:	4606      	mov	r6, r0
   d58f2:	68e0      	ldr	r0, [r4, #12]
   d58f4:	f005 fbcc 	bl	db090 <__aeabi_f2d>
   d58f8:	ec41 0b10 	vmov	d0, r0, r1
   d58fc:	4630      	mov	r0, r6
   d58fe:	f004 f945 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorFour").value(sensorData.sensorFourCurrent);
   d5902:	493a      	ldr	r1, [pc, #232]	; (d59ec <_Z9sendEventv+0x2fc>)
   d5904:	a80b      	add	r0, sp, #44	; 0x2c
   d5906:	f7fe fd6b 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d590a:	4606      	mov	r6, r0
   d590c:	68e0      	ldr	r0, [r4, #12]
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d590e:	f005 fbbf 	bl	db090 <__aeabi_f2d>
   d5912:	ec41 0b10 	vmov	d0, r0, r1
   d5916:	4630      	mov	r0, r6
   d5918:	f004 f938 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorFiveConnected) {
   d591c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d5920:	b1cb      	cbz	r3, d5956 <_Z9sendEventv+0x266>
          influxPayload.name("sensorFive").value(sensorData.sensorFiveCurrent);
   d5922:	4933      	ldr	r1, [pc, #204]	; (d59f0 <_Z9sendEventv+0x300>)
   d5924:	a806      	add	r0, sp, #24
   d5926:	f7fe fd5b 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d592a:	4606      	mov	r6, r0
   d592c:	6920      	ldr	r0, [r4, #16]
   d592e:	f005 fbaf 	bl	db090 <__aeabi_f2d>
   d5932:	ec41 0b10 	vmov	d0, r0, r1
   d5936:	4630      	mov	r0, r6
   d5938:	f004 f928 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorFive").value(sensorData.sensorFiveCurrent);
   d593c:	492c      	ldr	r1, [pc, #176]	; (d59f0 <_Z9sendEventv+0x300>)
   d593e:	a80b      	add	r0, sp, #44	; 0x2c
   d5940:	f7fe fd4e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5944:	4606      	mov	r6, r0
   d5946:	6920      	ldr	r0, [r4, #16]
   d5948:	f005 fba2 	bl	db090 <__aeabi_f2d>
   d594c:	ec41 0b10 	vmov	d0, r0, r1
   d5950:	4630      	mov	r0, r6
   d5952:	f004 f91b 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        if (sysStatus.sensorSixConnected) {
   d5956:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d595a:	b1cb      	cbz	r3, d5990 <_Z9sendEventv+0x2a0>
          influxPayload.name("sensorSix").value(sensorData.sensorSixCurrent);
   d595c:	4925      	ldr	r1, [pc, #148]	; (d59f4 <_Z9sendEventv+0x304>)
   d595e:	a806      	add	r0, sp, #24
   d5960:	f7fe fd3e 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5964:	4606      	mov	r6, r0
   d5966:	6960      	ldr	r0, [r4, #20]
   d5968:	f005 fb92 	bl	db090 <__aeabi_f2d>
   d596c:	ec41 0b10 	vmov	d0, r0, r1
   d5970:	4630      	mov	r0, r6
   d5972:	f004 f90b 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
          ubidotsPayLoad.name("sensorSix").value(sensorData.sensorSixCurrent);
   d5976:	491f      	ldr	r1, [pc, #124]	; (d59f4 <_Z9sendEventv+0x304>)
   d5978:	a80b      	add	r0, sp, #44	; 0x2c
   d597a:	f7fe fd31 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d597e:	4606      	mov	r6, r0
   d5980:	6960      	ldr	r0, [r4, #20]
   d5982:	f005 fb85 	bl	db090 <__aeabi_f2d>
   d5986:	ec41 0b10 	vmov	d0, r0, r1
   d598a:	4630      	mov	r0, r6
   d598c:	f004 f8fe 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("Mode").value(sysStatus.operatingMode);
   d5990:	4919      	ldr	r1, [pc, #100]	; (d59f8 <_Z9sendEventv+0x308>)
   d5992:	a806      	add	r0, sp, #24
   d5994:	f7fe fd24 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5998:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d599a:	f004 f8e5 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d599e:	4916      	ldr	r1, [pc, #88]	; (d59f8 <_Z9sendEventv+0x308>)
   d59a0:	a80b      	add	r0, sp, #44	; 0x2c
   d59a2:	f7fe fd1d 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d59a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d59a8:	e0d5      	b.n	d5b56 <_Z9sendEventv+0x466>
   d59aa:	4914      	ldr	r1, [pc, #80]	; (d59fc <_Z9sendEventv+0x30c>)
   d59ac:	e72b      	b.n	d5806 <_Z9sendEventv+0x116>
   d59ae:	bf00      	nop
   d59b0:	000de4b4 	.word	0x000de4b4
   d59b4:	000ddc28 	.word	0x000ddc28
   d59b8:	000ddc14 	.word	0x000ddc14
   d59bc:	000ddc2d 	.word	0x000ddc2d
   d59c0:	000ddc31 	.word	0x000ddc31
   d59c4:	000ddc3b 	.word	0x000ddc3b
   d59c8:	000ddc43 	.word	0x000ddc43
   d59cc:	000ddc4a 	.word	0x000ddc4a
   d59d0:	000ddc56 	.word	0x000ddc56
   d59d4:	2003e5b8 	.word	0x2003e5b8
   d59d8:	2003e450 	.word	0x2003e450
   d59dc:	000ddc60 	.word	0x000ddc60
   d59e0:	000ddc67 	.word	0x000ddc67
   d59e4:	000ddc71 	.word	0x000ddc71
   d59e8:	000ddc7b 	.word	0x000ddc7b
   d59ec:	000ddc87 	.word	0x000ddc87
   d59f0:	000ddc92 	.word	0x000ddc92
   d59f4:	000ddc9d 	.word	0x000ddc9d
   d59f8:	000dd88a 	.word	0x000dd88a
   d59fc:	000de5f4 	.word	0x000de5f4
      else if (sysStatus.operatingMode == 2){
   d5a00:	2b02      	cmp	r3, #2
   d5a02:	f040 81a1 	bne.w	d5d48 <_Z9sendEventv+0x658>
        influxPayload.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d5a06:	49c0      	ldr	r1, [pc, #768]	; (d5d08 <_Z9sendEventv+0x618>)
   d5a08:	a806      	add	r0, sp, #24
   d5a0a:	f7fe fce9 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a0e:	4605      	mov	r5, r0
   d5a10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5a12:	f005 fb3d 	bl	db090 <__aeabi_f2d>
   d5a16:	ec41 0b10 	vmov	d0, r0, r1
   d5a1a:	4628      	mov	r0, r5
   d5a1c:	f004 f8b6 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d5a20:	49ba      	ldr	r1, [pc, #744]	; (d5d0c <_Z9sendEventv+0x61c>)
   d5a22:	a806      	add	r0, sp, #24
   d5a24:	f7fe fcdc 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a28:	4605      	mov	r5, r0
   d5a2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5a2c:	f005 fb30 	bl	db090 <__aeabi_f2d>
   d5a30:	ec41 0b10 	vmov	d0, r0, r1
   d5a34:	4628      	mov	r0, r5
   d5a36:	f004 f8a9 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d5a3a:	49b5      	ldr	r1, [pc, #724]	; (d5d10 <_Z9sendEventv+0x620>)
   d5a3c:	a806      	add	r0, sp, #24
   d5a3e:	f7fe fccf 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a42:	4605      	mov	r5, r0
   d5a44:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5a46:	f005 fb23 	bl	db090 <__aeabi_f2d>
   d5a4a:	ec41 0b10 	vmov	d0, r0, r1
   d5a4e:	4628      	mov	r0, r5
   d5a50:	f004 f89c 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorTwoR").value(sensorData.I_ThreePhaseLoad_Two[0]);
   d5a54:	49af      	ldr	r1, [pc, #700]	; (d5d14 <_Z9sendEventv+0x624>)
   d5a56:	a806      	add	r0, sp, #24
   d5a58:	f7fe fcc2 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a5c:	4605      	mov	r5, r0
   d5a5e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5a60:	f005 fb16 	bl	db090 <__aeabi_f2d>
   d5a64:	ec41 0b10 	vmov	d0, r0, r1
   d5a68:	4628      	mov	r0, r5
   d5a6a:	f004 f88f 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorTwoS").value(sensorData.I_ThreePhaseLoad_Two[1]);
   d5a6e:	49aa      	ldr	r1, [pc, #680]	; (d5d18 <_Z9sendEventv+0x628>)
   d5a70:	a806      	add	r0, sp, #24
   d5a72:	f7fe fcb5 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a76:	4605      	mov	r5, r0
   d5a78:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d5a7a:	f005 fb09 	bl	db090 <__aeabi_f2d>
   d5a7e:	ec41 0b10 	vmov	d0, r0, r1
   d5a82:	4628      	mov	r0, r5
   d5a84:	f004 f882 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorTwoT").value(sensorData.I_ThreePhaseLoad_Two[2]);
   d5a88:	49a4      	ldr	r1, [pc, #656]	; (d5d1c <_Z9sendEventv+0x62c>)
   d5a8a:	a806      	add	r0, sp, #24
   d5a8c:	f7fe fca8 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5a90:	4605      	mov	r5, r0
   d5a92:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d5a94:	f005 fafc 	bl	db090 <__aeabi_f2d>
   d5a98:	ec41 0b10 	vmov	d0, r0, r1
   d5a9c:	4628      	mov	r0, r5
   d5a9e:	f004 f875 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("Mode").value(sysStatus.operatingMode);
   d5aa2:	499f      	ldr	r1, [pc, #636]	; (d5d20 <_Z9sendEventv+0x630>)
   d5aa4:	a806      	add	r0, sp, #24
   d5aa6:	f7fe fc9b 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5aaa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5aac:	f004 f85c 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d5ab0:	4995      	ldr	r1, [pc, #596]	; (d5d08 <_Z9sendEventv+0x618>)
   d5ab2:	a80b      	add	r0, sp, #44	; 0x2c
   d5ab4:	f7fe fc94 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5ab8:	4605      	mov	r5, r0
   d5aba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5abc:	f005 fae8 	bl	db090 <__aeabi_f2d>
   d5ac0:	ec41 0b10 	vmov	d0, r0, r1
   d5ac4:	4628      	mov	r0, r5
   d5ac6:	f004 f861 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d5aca:	4990      	ldr	r1, [pc, #576]	; (d5d0c <_Z9sendEventv+0x61c>)
   d5acc:	a80b      	add	r0, sp, #44	; 0x2c
   d5ace:	f7fe fc87 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5ad2:	4605      	mov	r5, r0
   d5ad4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5ad6:	f005 fadb 	bl	db090 <__aeabi_f2d>
   d5ada:	ec41 0b10 	vmov	d0, r0, r1
   d5ade:	4628      	mov	r0, r5
   d5ae0:	f004 f854 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d5ae4:	498a      	ldr	r1, [pc, #552]	; (d5d10 <_Z9sendEventv+0x620>)
   d5ae6:	a80b      	add	r0, sp, #44	; 0x2c
   d5ae8:	f7fe fc7a 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5aec:	4605      	mov	r5, r0
   d5aee:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5af0:	f005 face 	bl	db090 <__aeabi_f2d>
   d5af4:	ec41 0b10 	vmov	d0, r0, r1
   d5af8:	4628      	mov	r0, r5
   d5afa:	f004 f847 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoR").value(sensorData.I_ThreePhaseLoad_Two[0]);
   d5afe:	4985      	ldr	r1, [pc, #532]	; (d5d14 <_Z9sendEventv+0x624>)
   d5b00:	a80b      	add	r0, sp, #44	; 0x2c
   d5b02:	f7fe fc6d 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5b06:	4605      	mov	r5, r0
   d5b08:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5b0a:	f005 fac1 	bl	db090 <__aeabi_f2d>
   d5b0e:	ec41 0b10 	vmov	d0, r0, r1
   d5b12:	4628      	mov	r0, r5
   d5b14:	f004 f83a 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoS").value(sensorData.I_ThreePhaseLoad_Two[1]);
   d5b18:	497f      	ldr	r1, [pc, #508]	; (d5d18 <_Z9sendEventv+0x628>)
   d5b1a:	a80b      	add	r0, sp, #44	; 0x2c
   d5b1c:	f7fe fc60 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5b20:	4605      	mov	r5, r0
   d5b22:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d5b24:	f005 fab4 	bl	db090 <__aeabi_f2d>
   d5b28:	ec41 0b10 	vmov	d0, r0, r1
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	f004 f82d 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorTwoT").value(sensorData.I_ThreePhaseLoad_Two[2]);
   d5b32:	497a      	ldr	r1, [pc, #488]	; (d5d1c <_Z9sendEventv+0x62c>)
   d5b34:	a80b      	add	r0, sp, #44	; 0x2c
   d5b36:	f7fe fc53 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5b3a:	4605      	mov	r5, r0
   d5b3c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d5b3e:	f005 faa7 	bl	db090 <__aeabi_f2d>
   d5b42:	ec41 0b10 	vmov	d0, r0, r1
   d5b46:	4628      	mov	r0, r5
   d5b48:	f004 f820 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d5b4c:	4974      	ldr	r1, [pc, #464]	; (d5d20 <_Z9sendEventv+0x630>)
   d5b4e:	a80b      	add	r0, sp, #44	; 0x2c
   d5b50:	f7fe fc46 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5b54:	6ab1      	ldr	r1, [r6, #40]	; 0x28
        ubidotsPayLoad.name("Mode").value(sysStatus.operatingMode);
   d5b56:	f004 f807 	bl	d9b68 <_ZN5spark10JSONWriter5valueEi>
    influxPayload.endObject();
   d5b5a:	a806      	add	r0, sp, #24
   d5b5c:	f003 ffc9 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
  ubidotsPayLoad.endObject();
   d5b60:	a80b      	add	r0, sp, #44	; 0x2c
   d5b62:	f003 ffc6 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
  influxPayload.endObject();
   d5b66:	4c6f      	ldr	r4, [pc, #444]	; (d5d24 <_Z9sendEventv+0x634>)
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.8;
   d5b68:	f8df a1d8 	ldr.w	sl, [pc, #472]	; d5d44 <_Z9sendEventv+0x654>
   d5b6c:	2500      	movs	r5, #0
  influxPayload.endObject();
   d5b6e:	a806      	add	r0, sp, #24
   d5b70:	f003 ffbf 	bl	d9af2 <_ZN5spark10JSONWriter9endObjectEv>
  publishQueue.publish("powermonitoring_hook", ubidots_hook, PRIVATE);
   d5b74:	f88d 5000 	strb.w	r5, [sp]
   d5b78:	7823      	ldrb	r3, [r4, #0]
   d5b7a:	496b      	ldr	r1, [pc, #428]	; (d5d28 <_Z9sendEventv+0x638>)
   d5b7c:	486b      	ldr	r0, [pc, #428]	; (d5d2c <_Z9sendEventv+0x63c>)
   d5b7e:	aa10      	add	r2, sp, #64	; 0x40
   d5b80:	f7fe fc61 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  publishQueue.publish("influx_hook", influx_hook, PRIVATE);
   d5b84:	f88d 5000 	strb.w	r5, [sp]
   d5b88:	7823      	ldrb	r3, [r4, #0]
   d5b8a:	4969      	ldr	r1, [pc, #420]	; (d5d30 <_Z9sendEventv+0x640>)
   d5b8c:	4867      	ldr	r0, [pc, #412]	; (d5d2c <_Z9sendEventv+0x63c>)
   d5b8e:	aa50      	add	r2, sp, #320	; 0x140
   d5b90:	f7fe fc59 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePreviousLow = (sensorData.sensorOneCurrent)*0.8;
   d5b94:	f8da 0000 	ldr.w	r0, [sl]
   d5b98:	f005 fa7a 	bl	db090 <__aeabi_f2d>
   d5b9c:	a358      	add	r3, pc, #352	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ba2:	4680      	mov	r8, r0
   d5ba4:	4689      	mov	r9, r1
   d5ba6:	f005 facb 	bl	db140 <__aeabi_dmul>
   d5baa:	f005 fd99 	bl	db6e0 <__aeabi_d2f>
   d5bae:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  sensorData.sensorTwoPreviousLow = (sensorData.sensorTwoCurrent)*0.8;
   d5bb2:	f8da 0004 	ldr.w	r0, [sl, #4]
   d5bb6:	f005 fa6b 	bl	db090 <__aeabi_f2d>
   d5bba:	a351      	add	r3, pc, #324	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bc0:	4606      	mov	r6, r0
   d5bc2:	460f      	mov	r7, r1
   d5bc4:	f005 fabc 	bl	db140 <__aeabi_dmul>
   d5bc8:	f005 fd8a 	bl	db6e0 <__aeabi_d2f>
   d5bcc:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
  sensorData.sensorThreePreviousLow = (sensorData.sensorThreeCurrent)*0.8;
   d5bd0:	f8da 0008 	ldr.w	r0, [sl, #8]
   d5bd4:	f005 fa5c 	bl	db090 <__aeabi_f2d>
   d5bd8:	4602      	mov	r2, r0
   d5bda:	460b      	mov	r3, r1
   d5bdc:	ec43 2b18 	vmov	d8, r2, r3
   d5be0:	a347      	add	r3, pc, #284	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5be6:	f005 faab 	bl	db140 <__aeabi_dmul>
   d5bea:	f005 fd79 	bl	db6e0 <__aeabi_d2f>
   d5bee:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  sensorData.sensorFourPreviousLow = (sensorData.sensorFourCurrent)*0.8;
   d5bf2:	f8da 000c 	ldr.w	r0, [sl, #12]
   d5bf6:	f005 fa4b 	bl	db090 <__aeabi_f2d>
   d5bfa:	4602      	mov	r2, r0
   d5bfc:	460b      	mov	r3, r1
   d5bfe:	ec43 2b19 	vmov	d9, r2, r3
   d5c02:	a33f      	add	r3, pc, #252	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c08:	f005 fa9a 	bl	db140 <__aeabi_dmul>
   d5c0c:	f005 fd68 	bl	db6e0 <__aeabi_d2f>
   d5c10:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  sensorData.sensorFivePreviousLow = (sensorData.sensorFiveCurrent)*0.8;
   d5c14:	f8da 0010 	ldr.w	r0, [sl, #16]
   d5c18:	f005 fa3a 	bl	db090 <__aeabi_f2d>
   d5c1c:	4602      	mov	r2, r0
   d5c1e:	460b      	mov	r3, r1
   d5c20:	ec43 2b1a 	vmov	d10, r2, r3
   d5c24:	a336      	add	r3, pc, #216	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5c26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c2a:	f005 fa89 	bl	db140 <__aeabi_dmul>
   d5c2e:	f005 fd57 	bl	db6e0 <__aeabi_d2f>
   d5c32:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  sensorData.sensorSixPreviousLow = (sensorData.sensorSixCurrent)*0.8;
   d5c36:	f8da 0014 	ldr.w	r0, [sl, #20]
   d5c3a:	f005 fa29 	bl	db090 <__aeabi_f2d>
   d5c3e:	a330      	add	r3, pc, #192	; (adr r3, d5d00 <_Z9sendEventv+0x610>)
   d5c40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c44:	4604      	mov	r4, r0
   d5c46:	460d      	mov	r5, r1
   d5c48:	f005 fa7a 	bl	db140 <__aeabi_dmul>
   d5c4c:	f005 fd48 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.2;
   d5c50:	4b38      	ldr	r3, [pc, #224]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorSixPreviousLow = (sensorData.sensorSixCurrent)*0.8;
   d5c52:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.2;
   d5c56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5c5a:	4640      	mov	r0, r8
   d5c5c:	4649      	mov	r1, r9
   d5c5e:	f005 fa6f 	bl	db140 <__aeabi_dmul>
   d5c62:	f005 fd3d 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.2;
   d5c66:	4b33      	ldr	r3, [pc, #204]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorOnePreviousHigh = (sensorData.sensorOneCurrent)*1.2;
   d5c68:	f8ca 0018 	str.w	r0, [sl, #24]
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.2;
   d5c6c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5c70:	4630      	mov	r0, r6
   d5c72:	4639      	mov	r1, r7
   d5c74:	f005 fa64 	bl	db140 <__aeabi_dmul>
   d5c78:	f005 fd32 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.2;
   d5c7c:	4b2d      	ldr	r3, [pc, #180]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorTwoPreviousHigh = (sensorData.sensorTwoCurrent)*1.2;
   d5c7e:	f8ca 001c 	str.w	r0, [sl, #28]
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.2;
   d5c82:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5c86:	ec51 0b18 	vmov	r0, r1, d8
   d5c8a:	f005 fa59 	bl	db140 <__aeabi_dmul>
   d5c8e:	f005 fd27 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.2;
   d5c92:	4b28      	ldr	r3, [pc, #160]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorThreePreviousHigh= (sensorData.sensorThreeCurrent)*1.2;
   d5c94:	f8ca 0020 	str.w	r0, [sl, #32]
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.2;
   d5c98:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5c9c:	ec51 0b19 	vmov	r0, r1, d9
   d5ca0:	f005 fa4e 	bl	db140 <__aeabi_dmul>
   d5ca4:	f005 fd1c 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.2;
   d5ca8:	4b22      	ldr	r3, [pc, #136]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorFourPreviousHigh = (sensorData.sensorFourCurrent)*1.2;
   d5caa:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.2;
   d5cae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5cb2:	ec51 0b1a 	vmov	r0, r1, d10
   d5cb6:	f005 fa43 	bl	db140 <__aeabi_dmul>
   d5cba:	f005 fd11 	bl	db6e0 <__aeabi_d2f>
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.2;
   d5cbe:	4b1d      	ldr	r3, [pc, #116]	; (d5d34 <_Z9sendEventv+0x644>)
  sensorData.sensorFivePreviousHigh = (sensorData.sensorFiveCurrent)*1.2;
   d5cc0:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.2;
   d5cc4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5cc8:	4620      	mov	r0, r4
   d5cca:	4629      	mov	r1, r5
   d5ccc:	f005 fa38 	bl	db140 <__aeabi_dmul>
   d5cd0:	f005 fd06 	bl	db6e0 <__aeabi_d2f>
  sensorDataWriteNeeded = true;
   d5cd4:	4a18      	ldr	r2, [pc, #96]	; (d5d38 <_Z9sendEventv+0x648>)
  sensorData.sensorSixPreviousHigh = (sensorData.sensorSixCurrent)*1.2;
   d5cd6:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  sensorDataWriteNeeded = true;
   d5cda:	2301      	movs	r3, #1
   d5cdc:	7013      	strb	r3, [r2, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d5cde:	4a17      	ldr	r2, [pc, #92]	; (d5d3c <_Z9sendEventv+0x64c>)
   d5ce0:	7013      	strb	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5ce2:	f002 fd79 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d5ce6:	4b16      	ldr	r3, [pc, #88]	; (d5d40 <_Z9sendEventv+0x650>)
   d5ce8:	6018      	str	r0, [r3, #0]
  String myDeviceID = System.deviceID();                                                        // Device ID
   d5cea:	a802      	add	r0, sp, #8
   d5cec:	f004 f96a 	bl	d9fc4 <_ZN6StringD1Ev>
}
   d5cf0:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
   d5cf4:	ecbd 8b06 	vpop	{d8-d10}
   d5cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5cfc:	f3af 8000 	nop.w
   d5d00:	9999999a 	.word	0x9999999a
   d5d04:	3fe99999 	.word	0x3fe99999
   d5d08:	000ddca7 	.word	0x000ddca7
   d5d0c:	000ddcb2 	.word	0x000ddcb2
   d5d10:	000ddcbd 	.word	0x000ddcbd
   d5d14:	000ddcc8 	.word	0x000ddcc8
   d5d18:	000ddcd3 	.word	0x000ddcd3
   d5d1c:	000ddcde 	.word	0x000ddcde
   d5d20:	000dd88a 	.word	0x000dd88a
   d5d24:	2003df3d 	.word	0x2003df3d
   d5d28:	000ddcf4 	.word	0x000ddcf4
   d5d2c:	2003e3e0 	.word	0x2003e3e0
   d5d30:	000ddd09 	.word	0x000ddd09
   d5d34:	3ff33333 	.word	0x3ff33333
   d5d38:	2003e4f4 	.word	0x2003e4f4
   d5d3c:	2003df5f 	.word	0x2003df5f
   d5d40:	2003e5ec 	.word	0x2003e5ec
   d5d44:	2003e450 	.word	0x2003e450
      else if (sysStatus.operatingMode == 3){
   d5d48:	2b03      	cmp	r3, #3
   d5d4a:	d147      	bne.n	d5ddc <_Z9sendEventv+0x6ec>
        influxPayload.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d5d4c:	4958      	ldr	r1, [pc, #352]	; (d5eb0 <_Z9sendEventv+0x7c0>)
   d5d4e:	a806      	add	r0, sp, #24
   d5d50:	f7fe fb46 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5d54:	4606      	mov	r6, r0
   d5d56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5d58:	f005 f99a 	bl	db090 <__aeabi_f2d>
   d5d5c:	ec41 0b10 	vmov	d0, r0, r1
   d5d60:	4630      	mov	r0, r6
   d5d62:	f003 ff13 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d5d66:	4953      	ldr	r1, [pc, #332]	; (d5eb4 <_Z9sendEventv+0x7c4>)
   d5d68:	a806      	add	r0, sp, #24
   d5d6a:	f7fe fb39 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5d6e:	4606      	mov	r6, r0
   d5d70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5d72:	f005 f98d 	bl	db090 <__aeabi_f2d>
   d5d76:	ec41 0b10 	vmov	d0, r0, r1
   d5d7a:	4630      	mov	r0, r6
   d5d7c:	f003 ff06 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d5d80:	494d      	ldr	r1, [pc, #308]	; (d5eb8 <_Z9sendEventv+0x7c8>)
   d5d82:	a806      	add	r0, sp, #24
   d5d84:	f7fe fb2c 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5d88:	4606      	mov	r6, r0
   d5d8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5d8c:	f005 f980 	bl	db090 <__aeabi_f2d>
   d5d90:	ec41 0b10 	vmov	d0, r0, r1
   d5d94:	4630      	mov	r0, r6
   d5d96:	f003 fef9 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.I_ThreePhaseLoad_One[0]);
   d5d9a:	4945      	ldr	r1, [pc, #276]	; (d5eb0 <_Z9sendEventv+0x7c0>)
   d5d9c:	a80b      	add	r0, sp, #44	; 0x2c
   d5d9e:	f7fe fb1f 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5da2:	4606      	mov	r6, r0
   d5da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5da6:	f005 f973 	bl	db090 <__aeabi_f2d>
   d5daa:	ec41 0b10 	vmov	d0, r0, r1
   d5dae:	4630      	mov	r0, r6
   d5db0:	f003 feec 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.I_ThreePhaseLoad_One[1]);
   d5db4:	493f      	ldr	r1, [pc, #252]	; (d5eb4 <_Z9sendEventv+0x7c4>)
   d5db6:	a80b      	add	r0, sp, #44	; 0x2c
   d5db8:	f7fe fb12 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5dbc:	4606      	mov	r6, r0
   d5dbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5dc0:	f005 f966 	bl	db090 <__aeabi_f2d>
   d5dc4:	ec41 0b10 	vmov	d0, r0, r1
   d5dc8:	4630      	mov	r0, r6
   d5dca:	f003 fedf 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.I_ThreePhaseLoad_One[2]);
   d5dce:	493a      	ldr	r1, [pc, #232]	; (d5eb8 <_Z9sendEventv+0x7c8>)
   d5dd0:	a80b      	add	r0, sp, #44	; 0x2c
   d5dd2:	f7fe fb05 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5dd6:	4606      	mov	r6, r0
   d5dd8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5dda:	e57c      	b.n	d58d6 <_Z9sendEventv+0x1e6>
      else if (sysStatus.operatingMode == 4){
   d5ddc:	2b04      	cmp	r3, #4
   d5dde:	f47f aebc 	bne.w	d5b5a <_Z9sendEventv+0x46a>
        influxPayload.name("SensorOneR").value(sensorData.Four_ThreePhaseLoad_I[0]);
   d5de2:	4933      	ldr	r1, [pc, #204]	; (d5eb0 <_Z9sendEventv+0x7c0>)
   d5de4:	a806      	add	r0, sp, #24
   d5de6:	f7fe fafb 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5dea:	4606      	mov	r6, r0
   d5dec:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   d5dee:	f005 f94f 	bl	db090 <__aeabi_f2d>
   d5df2:	ec41 0b10 	vmov	d0, r0, r1
   d5df6:	4630      	mov	r0, r6
   d5df8:	f003 fec8 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneS").value(sensorData.Four_ThreePhaseLoad_I[1]);
   d5dfc:	492d      	ldr	r1, [pc, #180]	; (d5eb4 <_Z9sendEventv+0x7c4>)
   d5dfe:	a806      	add	r0, sp, #24
   d5e00:	f7fe faee 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e04:	4606      	mov	r6, r0
   d5e06:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   d5e08:	f005 f942 	bl	db090 <__aeabi_f2d>
   d5e0c:	ec41 0b10 	vmov	d0, r0, r1
   d5e10:	4630      	mov	r0, r6
   d5e12:	f003 febb 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneT").value(sensorData.Four_ThreePhaseLoad_I[2]);
   d5e16:	4928      	ldr	r1, [pc, #160]	; (d5eb8 <_Z9sendEventv+0x7c8>)
   d5e18:	a806      	add	r0, sp, #24
   d5e1a:	f7fe fae1 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e1e:	4606      	mov	r6, r0
   d5e20:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d5e24:	f005 f934 	bl	db090 <__aeabi_f2d>
   d5e28:	ec41 0b10 	vmov	d0, r0, r1
   d5e2c:	4630      	mov	r0, r6
   d5e2e:	f003 fead 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        influxPayload.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d5e32:	4922      	ldr	r1, [pc, #136]	; (d5ebc <_Z9sendEventv+0x7cc>)
   d5e34:	a806      	add	r0, sp, #24
   d5e36:	f7fe fad3 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e3a:	4606      	mov	r6, r0
   d5e3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   d5e40:	f005 f926 	bl	db090 <__aeabi_f2d>
   d5e44:	ec41 0b10 	vmov	d0, r0, r1
   d5e48:	4630      	mov	r0, r6
   d5e4a:	f003 fe9f 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneR").value(sensorData.Four_ThreePhaseLoad_I[0]);
   d5e4e:	4918      	ldr	r1, [pc, #96]	; (d5eb0 <_Z9sendEventv+0x7c0>)
   d5e50:	a80b      	add	r0, sp, #44	; 0x2c
   d5e52:	f7fe fac5 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e56:	4606      	mov	r6, r0
   d5e58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   d5e5a:	f005 f919 	bl	db090 <__aeabi_f2d>
   d5e5e:	ec41 0b10 	vmov	d0, r0, r1
   d5e62:	4630      	mov	r0, r6
   d5e64:	f003 fe92 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneS").value(sensorData.Four_ThreePhaseLoad_I[1]);
   d5e68:	4912      	ldr	r1, [pc, #72]	; (d5eb4 <_Z9sendEventv+0x7c4>)
   d5e6a:	a80b      	add	r0, sp, #44	; 0x2c
   d5e6c:	f7fe fab8 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e70:	4606      	mov	r6, r0
   d5e72:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   d5e74:	f005 f90c 	bl	db090 <__aeabi_f2d>
   d5e78:	ec41 0b10 	vmov	d0, r0, r1
   d5e7c:	4630      	mov	r0, r6
   d5e7e:	f003 fe85 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneT").value(sensorData.Four_ThreePhaseLoad_I[2]);
   d5e82:	490d      	ldr	r1, [pc, #52]	; (d5eb8 <_Z9sendEventv+0x7c8>)
   d5e84:	a80b      	add	r0, sp, #44	; 0x2c
   d5e86:	f7fe faab 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5e8a:	4606      	mov	r6, r0
   d5e8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d5e90:	f005 f8fe 	bl	db090 <__aeabi_f2d>
   d5e94:	ec41 0b10 	vmov	d0, r0, r1
   d5e98:	4630      	mov	r0, r6
   d5e9a:	f003 fe77 	bl	d9b8c <_ZN5spark10JSONWriter5valueEd>
        ubidotsPayLoad.name("SensorOneN").value(sensorData.Four_ThreePhaseLoad_I[3]);
   d5e9e:	4907      	ldr	r1, [pc, #28]	; (d5ebc <_Z9sendEventv+0x7cc>)
   d5ea0:	a80b      	add	r0, sp, #44	; 0x2c
   d5ea2:	f7fe fa9d 	bl	d43e0 <_ZN5spark10JSONWriter4nameEPKc>
   d5ea6:	4606      	mov	r6, r0
   d5ea8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   d5eac:	e52f      	b.n	d590e <_Z9sendEventv+0x21e>
   d5eae:	bf00      	nop
   d5eb0:	000ddca7 	.word	0x000ddca7
   d5eb4:	000ddcb2 	.word	0x000ddcb2
   d5eb8:	000ddcbd 	.word	0x000ddcbd
   d5ebc:	000ddce9 	.word	0x000ddce9

000d5ec0 <loop>:
void loop() {
   d5ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d5ec2:	4c79      	ldr	r4, [pc, #484]	; (d60a8 <loop+0x1e8>)
   d5ec4:	7823      	ldrb	r3, [r4, #0]
   d5ec6:	3b01      	subs	r3, #1
   d5ec8:	2b05      	cmp	r3, #5
   d5eca:	d817      	bhi.n	d5efc <loop+0x3c>
   d5ecc:	e8df f003 	tbb	[pc, r3]
   d5ed0:	716503c7 	.word	0x716503c7
   d5ed4:	944a      	.short	0x944a
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5ed6:	4b75      	ldr	r3, [pc, #468]	; (d60ac <loop+0x1ec>)
   d5ed8:	7a5b      	ldrb	r3, [r3, #9]
   d5eda:	b12b      	cbz	r3, d5ee8 <loop+0x28>
   d5edc:	4b74      	ldr	r3, [pc, #464]	; (d60b0 <loop+0x1f0>)
   d5ede:	781b      	ldrb	r3, [r3, #0]
   d5ee0:	2b02      	cmp	r3, #2
   d5ee2:	d001      	beq.n	d5ee8 <loop+0x28>
   d5ee4:	f7fe fd98 	bl	d4a18 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d5ee8:	f004 fb0d 	bl	da506 <_ZN9TimeClass3nowEv>
   d5eec:	2205      	movs	r2, #5
   d5eee:	fb90 f3f2 	sdiv	r3, r0, r2
   d5ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ef6:	4298      	cmp	r0, r3
   d5ef8:	d100      	bne.n	d5efc <loop+0x3c>
   d5efa:	7022      	strb	r2, [r4, #0]
  DeviceNameHelperRetained::instance().loop();
   d5efc:	f001 f964 	bl	d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>
   d5f00:	f001 f93e 	bl	d7180 <_ZN16DeviceNameHelper4loopEv>
  CloudConfig::instance().loop();
   d5f04:	f000 fe02 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d5f08:	f000 fe1b 	bl	d6b42 <_ZN11CloudConfig4loopEv>
  rtc.loop();                                                                               // keeps the clock up to date
   d5f0c:	4869      	ldr	r0, [pc, #420]	; (d60b4 <loop+0x1f4>)
   d5f0e:	f002 f83d 	bl	d7f8c <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d5f12:	4b69      	ldr	r3, [pc, #420]	; (d60b8 <loop+0x1f8>)
   d5f14:	781b      	ldrb	r3, [r3, #0]
   d5f16:	b10b      	cbz	r3, d5f1c <loop+0x5c>
   d5f18:	f7fe fd56 	bl	d49c8 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d5f1c:	4c67      	ldr	r4, [pc, #412]	; (d60bc <loop+0x1fc>)
   d5f1e:	7823      	ldrb	r3, [r4, #0]
   d5f20:	b13b      	cbz	r3, d5f32 <loop+0x72>
   d5f22:	2330      	movs	r3, #48	; 0x30
   d5f24:	4a61      	ldr	r2, [pc, #388]	; (d60ac <loop+0x1ec>)
   d5f26:	4866      	ldr	r0, [pc, #408]	; (d60c0 <loop+0x200>)
   d5f28:	2101      	movs	r1, #1
   d5f2a:	f001 fc52 	bl	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d5f2e:	2300      	movs	r3, #0
   d5f30:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d5f32:	4c64      	ldr	r4, [pc, #400]	; (d60c4 <loop+0x204>)
   d5f34:	7823      	ldrb	r3, [r4, #0]
   d5f36:	b143      	cbz	r3, d5f4a <loop+0x8a>
   d5f38:	23a4      	movs	r3, #164	; 0xa4
   d5f3a:	4a63      	ldr	r2, [pc, #396]	; (d60c8 <loop+0x208>)
   d5f3c:	4860      	ldr	r0, [pc, #384]	; (d60c0 <loop+0x200>)
   d5f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
   d5f42:	f001 fc46 	bl	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d5f46:	2300      	movs	r3, #0
   d5f48:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d5f4a:	4c60      	ldr	r4, [pc, #384]	; (d60cc <loop+0x20c>)
   d5f4c:	7823      	ldrb	r3, [r4, #0]
   d5f4e:	b13b      	cbz	r3, d5f60 <loop+0xa0>
   d5f50:	2318      	movs	r3, #24
   d5f52:	4a5f      	ldr	r2, [pc, #380]	; (d60d0 <loop+0x210>)
   d5f54:	485a      	ldr	r0, [pc, #360]	; (d60c0 <loop+0x200>)
   d5f56:	21a0      	movs	r1, #160	; 0xa0
   d5f58:	f001 fc3b 	bl	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d5f5c:	2300      	movs	r3, #0
   d5f5e:	7023      	strb	r3, [r4, #0]
}
   d5f60:	b003      	add	sp, #12
   d5f62:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5f64:	4d51      	ldr	r5, [pc, #324]	; (d60ac <loop+0x1ec>)
   d5f66:	7a6a      	ldrb	r2, [r5, #9]
   d5f68:	b12a      	cbz	r2, d5f76 <loop+0xb6>
   d5f6a:	4b51      	ldr	r3, [pc, #324]	; (d60b0 <loop+0x1f0>)
   d5f6c:	781b      	ldrb	r3, [r3, #0]
   d5f6e:	2b05      	cmp	r3, #5
   d5f70:	d001      	beq.n	d5f76 <loop+0xb6>
   d5f72:	f7fe fd51 	bl	d4a18 <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d5f76:	f7fe fdf5 	bl	d4b64 <_Z16takeMeasurementsv>
   d5f7a:	b108      	cbz	r0, d5f80 <loop+0xc0>
    state = REPORTING_STATE;
   d5f7c:	2304      	movs	r3, #4
   d5f7e:	e008      	b.n	d5f92 <loop+0xd2>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d5f80:	f004 fac1 	bl	da506 <_ZN9TimeClass3nowEv>
   d5f84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5f86:	fb90 f2f3 	sdiv	r2, r0, r3
   d5f8a:	fb02 0313 	mls	r3, r2, r3, r0
   d5f8e:	b913      	cbnz	r3, d5f96 <loop+0xd6>
   d5f90:	2303      	movs	r3, #3
    else state = IDLE_STATE;
   d5f92:	7023      	strb	r3, [r4, #0]
   d5f94:	e7b2      	b.n	d5efc <loop+0x3c>
   d5f96:	2302      	movs	r3, #2
   d5f98:	e7fb      	b.n	d5f92 <loop+0xd2>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5f9a:	4b44      	ldr	r3, [pc, #272]	; (d60ac <loop+0x1ec>)
   d5f9c:	7a5b      	ldrb	r3, [r3, #9]
   d5f9e:	b12b      	cbz	r3, d5fac <loop+0xec>
   d5fa0:	4b43      	ldr	r3, [pc, #268]	; (d60b0 <loop+0x1f0>)
   d5fa2:	781b      	ldrb	r3, [r3, #0]
   d5fa4:	2b03      	cmp	r3, #3
   d5fa6:	d001      	beq.n	d5fac <loop+0xec>
   d5fa8:	f7fe fd36 	bl	d4a18 <_Z22publishStateTransitionv>
    takeMeasurements();
   d5fac:	f7fe fdda 	bl	d4b64 <_Z16takeMeasurementsv>
   d5fb0:	e7e4      	b.n	d5f7c <loop+0xbc>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d5fb2:	4b3e      	ldr	r3, [pc, #248]	; (d60ac <loop+0x1ec>)
   d5fb4:	7a5b      	ldrb	r3, [r3, #9]
   d5fb6:	b12b      	cbz	r3, d5fc4 <loop+0x104>
   d5fb8:	4b3d      	ldr	r3, [pc, #244]	; (d60b0 <loop+0x1f0>)
   d5fba:	781b      	ldrb	r3, [r3, #0]
   d5fbc:	2b04      	cmp	r3, #4
   d5fbe:	d001      	beq.n	d5fc4 <loop+0x104>
   d5fc0:	f7fe fd2a 	bl	d4a18 <_Z22publishStateTransitionv>
   d5fc4:	f002 fe06 	bl	d8bd4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5fc8:	b168      	cbz	r0, d5fe6 <loop+0x126>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5fca:	f004 faad 	bl	da528 <_ZN9TimeClass4hourEv>
   d5fce:	280c      	cmp	r0, #12
   d5fd0:	d105      	bne.n	d5fde <loop+0x11e>
   d5fd2:	f002 fdff 	bl	d8bd4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5fd6:	b110      	cbz	r0, d5fde <loop+0x11e>
        return spark_sync_time(NULL);
   d5fd8:	2000      	movs	r0, #0
   d5fda:	f002 fe1b 	bl	d8c14 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d5fde:	f7ff fb87 	bl	d56f0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5fe2:	2306      	movs	r3, #6
   d5fe4:	e7d5      	b.n	d5f92 <loop+0xd2>
        spark_cloud_flag_connect();
   d5fe6:	f002 fded 	bl	d8bc4 <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d5fea:	2302      	movs	r3, #2
   d5fec:	7023      	strb	r3, [r4, #0]
   d5fee:	f002 fbf3 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5ff2:	4b38      	ldr	r3, [pc, #224]	; (d60d4 <loop+0x214>)
   d5ff4:	6018      	str	r0, [r3, #0]
   d5ff6:	e781      	b.n	d5efc <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5ff8:	4b2c      	ldr	r3, [pc, #176]	; (d60ac <loop+0x1ec>)
   d5ffa:	7a5b      	ldrb	r3, [r3, #9]
   d5ffc:	b12b      	cbz	r3, d600a <loop+0x14a>
   d5ffe:	4b2c      	ldr	r3, [pc, #176]	; (d60b0 <loop+0x1f0>)
   d6000:	781b      	ldrb	r3, [r3, #0]
   d6002:	2b06      	cmp	r3, #6
   d6004:	d001      	beq.n	d600a <loop+0x14a>
   d6006:	f7fe fd07 	bl	d4a18 <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d600a:	4b33      	ldr	r3, [pc, #204]	; (d60d8 <loop+0x218>)
   d600c:	781b      	ldrb	r3, [r3, #0]
   d600e:	b943      	cbnz	r3, d6022 <loop+0x162>
   d6010:	f004 fa79 	bl	da506 <_ZN9TimeClass3nowEv>
   d6014:	2305      	movs	r3, #5
   d6016:	fb90 f3f3 	sdiv	r3, r0, r3
   d601a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d601e:	4298      	cmp	r0, r3
   d6020:	d0b9      	beq.n	d5f96 <loop+0xd6>
   d6022:	f002 fbd9 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d6026:	4b2d      	ldr	r3, [pc, #180]	; (d60dc <loop+0x21c>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	1ac0      	subs	r0, r0, r3
   d602c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d6030:	4298      	cmp	r0, r3
   d6032:	f67f af63 	bls.w	d5efc <loop+0x3c>
   d6036:	f002 fbcf 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d603a:	4d26      	ldr	r5, [pc, #152]	; (d60d4 <loop+0x214>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d603c:	4a28      	ldr	r2, [pc, #160]	; (d60e0 <loop+0x220>)
      resetTimeStamp = millis();
   d603e:	6028      	str	r0, [r5, #0]
   d6040:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d6042:	f88d 3000 	strb.w	r3, [sp]
   d6046:	4b27      	ldr	r3, [pc, #156]	; (d60e4 <loop+0x224>)
   d6048:	4927      	ldr	r1, [pc, #156]	; (d60e8 <loop+0x228>)
   d604a:	781b      	ldrb	r3, [r3, #0]
   d604c:	4827      	ldr	r0, [pc, #156]	; (d60ec <loop+0x22c>)
   d604e:	f7fe f9fa 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d6052:	2301      	movs	r3, #1
   d6054:	7023      	strb	r3, [r4, #0]
   d6056:	f002 fbbf 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d605a:	6028      	str	r0, [r5, #0]
   d605c:	e74e      	b.n	d5efc <loop+0x3c>
    if (state != oldState) publishStateTransition();
   d605e:	4b14      	ldr	r3, [pc, #80]	; (d60b0 <loop+0x1f0>)
   d6060:	781b      	ldrb	r3, [r3, #0]
   d6062:	2b01      	cmp	r3, #1
   d6064:	d001      	beq.n	d606a <loop+0x1aa>
   d6066:	f7fe fcd7 	bl	d4a18 <_Z22publishStateTransitionv>
   d606a:	f002 fbb5 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d606e:	4b19      	ldr	r3, [pc, #100]	; (d60d4 <loop+0x214>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d6076:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d607a:	4283      	cmp	r3, r0
   d607c:	f4bf af3e 	bcs.w	d5efc <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6080:	f002 fda8 	bl	d8bd4 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d6084:	b148      	cbz	r0, d609a <loop+0x1da>
   d6086:	2300      	movs	r3, #0
   d6088:	f88d 3000 	strb.w	r3, [sp]
   d608c:	4b15      	ldr	r3, [pc, #84]	; (d60e4 <loop+0x224>)
   d608e:	4a18      	ldr	r2, [pc, #96]	; (d60f0 <loop+0x230>)
   d6090:	781b      	ldrb	r3, [r3, #0]
   d6092:	4918      	ldr	r1, [pc, #96]	; (d60f4 <loop+0x234>)
   d6094:	4815      	ldr	r0, [pc, #84]	; (d60ec <loop+0x22c>)
   d6096:	f7fe f9d6 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d609a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d609e:	f002 feb1 	bl	d8e04 <delay>
      System.reset();
   d60a2:	f004 f8b5 	bl	da210 <_ZN11SystemClass5resetEv>
   d60a6:	e729      	b.n	d5efc <loop+0x3c>
   d60a8:	2003e5b5 	.word	0x2003e5b5
   d60ac:	2003e5b8 	.word	0x2003e5b8
   d60b0:	2003e3dc 	.word	0x2003e3dc
   d60b4:	2003e41c 	.word	0x2003e41c
   d60b8:	2003e5e9 	.word	0x2003e5e9
   d60bc:	2003e5e8 	.word	0x2003e5e8
   d60c0:	2003e3b0 	.word	0x2003e3b0
   d60c4:	2003e4f4 	.word	0x2003e4f4
   d60c8:	2003e450 	.word	0x2003e450
   d60cc:	2003df5e 	.word	0x2003df5e
   d60d0:	2003e438 	.word	0x2003e438
   d60d4:	2003e418 	.word	0x2003e418
   d60d8:	2003df5f 	.word	0x2003df5f
   d60dc:	2003e5ec 	.word	0x2003e5ec
   d60e0:	000de5f4 	.word	0x000de5f4
   d60e4:	2003df3d 	.word	0x2003df3d
   d60e8:	000ddd15 	.word	0x000ddd15
   d60ec:	2003e3e0 	.word	0x2003e3e0
   d60f0:	000ddd2e 	.word	0x000ddd2e
   d60f4:	000ddd42 	.word	0x000ddd42

000d60f8 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d60f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d60fa:	4b09      	ldr	r3, [pc, #36]	; (d6120 <_Z16keepAliveMessagev+0x28>)
   d60fc:	4a09      	ldr	r2, [pc, #36]	; (d6124 <_Z16keepAliveMessagev+0x2c>)
   d60fe:	781b      	ldrb	r3, [r3, #0]
   d6100:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6102:	4909      	ldr	r1, [pc, #36]	; (d6128 <_Z16keepAliveMessagev+0x30>)
   d6104:	4313      	orrs	r3, r2
   d6106:	f88d 3000 	strb.w	r3, [sp]
   d610a:	2200      	movs	r2, #0
   d610c:	233c      	movs	r3, #60	; 0x3c
   d610e:	a802      	add	r0, sp, #8
   d6110:	f003 f808 	bl	d9124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d6114:	a803      	add	r0, sp, #12
   d6116:	f7ff fa7f 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d611a:	b005      	add	sp, #20
   d611c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6120:	2003df3c 	.word	0x2003df3c
   d6124:	2003df3d 	.word	0x2003df3d
   d6128:	000ddd48 	.word	0x000ddd48

000d612c <_ZN18CloudConfigStorage5parseEv>:
    virtual void parse() { jsonObj = JSONValue::parseCopy(getJsonData()); };
   d612c:	b510      	push	{r4, lr}
   d612e:	6803      	ldr	r3, [r0, #0]
   d6130:	b088      	sub	sp, #32
   d6132:	685b      	ldr	r3, [r3, #4]
   d6134:	4604      	mov	r4, r0
   d6136:	4798      	blx	r3
   d6138:	9001      	str	r0, [sp, #4]
    return parseCopy(json, strlen(json));
   d613a:	f005 fc10 	bl	db95e <strlen>
   d613e:	9901      	ldr	r1, [sp, #4]
   d6140:	4602      	mov	r2, r0
   d6142:	a805      	add	r0, sp, #20
   d6144:	f003 fdc2 	bl	d9ccc <_ZN5spark9JSONValue9parseCopyEPKcj>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6148:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	__r._M_pi = _M_pi;
   d614c:	2300      	movs	r3, #0

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d614e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6152:	6863      	ldr	r3, [r4, #4]
   d6154:	9303      	str	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6156:	6061      	str	r1, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6158:	68a3      	ldr	r3, [r4, #8]
	__r._M_pi = _M_pi;
   d615a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d615c:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
   d615e:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
   d6160:	f7ff fa5a 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class JSONValue {
   d6164:	9b07      	ldr	r3, [sp, #28]
   d6166:	60e3      	str	r3, [r4, #12]
   d6168:	a806      	add	r0, sp, #24
   d616a:	f7ff fa55 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d616e:	b008      	add	sp, #32
   d6170:	bd10      	pop	{r4, pc}
	...

000d6174 <_ZN26CloudConfigStorageRetainedD1Ev>:
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d6174:	b510      	push	{r4, lr}
    virtual ~CloudConfigStorage() {};
   d6176:	4b04      	ldr	r3, [pc, #16]	; (d6188 <_ZN26CloudConfigStorageRetainedD1Ev+0x14>)
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d6178:	4604      	mov	r4, r0
    virtual ~CloudConfigStorage() {};
   d617a:	f840 3b04 	str.w	r3, [r0], #4
   d617e:	3004      	adds	r0, #4
   d6180:	f7ff fa4a 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class CloudConfigStorageRetained : public CloudConfigStorageData {
   d6184:	4620      	mov	r0, r4
   d6186:	bd10      	pop	{r4, pc}
   d6188:	000ddf20 	.word	0x000ddf20

000d618c <_ZN26CloudConfigStorageRetainedD0Ev>:
   d618c:	b510      	push	{r4, lr}
   d618e:	4604      	mov	r4, r0
   d6190:	f7ff fff0 	bl	d6174 <_ZN26CloudConfigStorageRetainedD1Ev>
   d6194:	4620      	mov	r0, r4
   d6196:	2118      	movs	r1, #24
   d6198:	f004 fce9 	bl	dab6e <_ZdlPvj>
   d619c:	4620      	mov	r0, r4
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d61a0:	b513      	push	{r0, r1, r4, lr}
   d61a2:	460b      	mov	r3, r1
   d61a4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61a6:	e9d0 0100 	ldrd	r0, r1, [r0]
   d61aa:	466c      	mov	r4, sp
   d61ac:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61b0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61b4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61b8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d61bc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61c0:	b002      	add	sp, #8
   d61c2:	bd10      	pop	{r4, pc}

000d61c4 <setup>:
void setup() {
   d61c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d61c8:	2100      	movs	r1, #0
void setup() {
   d61ca:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d61cc:	2008      	movs	r0, #8
   d61ce:	f004 fc47 	bl	daa60 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d61d2:	2101      	movs	r1, #1
   d61d4:	2005      	movs	r0, #5
   d61d6:	f004 fc43 	bl	daa60 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d61da:	f7fe fbf5 	bl	d49c8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d61de:	2300      	movs	r3, #0
   d61e0:	9300      	str	r3, [sp, #0]
   d61e2:	2201      	movs	r2, #1
   d61e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d61e8:	49b1      	ldr	r1, [pc, #708]	; (d64b0 <setup+0x2ec>)
   d61ea:	2008      	movs	r0, #8
   d61ec:	f003 f9da 	bl	d95a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d61f0:	4bb0      	ldr	r3, [pc, #704]	; (d64b4 <setup+0x2f0>)
   d61f2:	aa0a      	add	r2, sp, #40	; 0x28
   d61f4:	f103 0510 	add.w	r5, r3, #16
   d61f8:	4617      	mov	r7, r2
   d61fa:	6818      	ldr	r0, [r3, #0]
   d61fc:	6859      	ldr	r1, [r3, #4]
   d61fe:	4614      	mov	r4, r2
   d6200:	c403      	stmia	r4!, {r0, r1}
   d6202:	3308      	adds	r3, #8
   d6204:	42ab      	cmp	r3, r5
   d6206:	4622      	mov	r2, r4
   d6208:	d1f7      	bne.n	d61fa <setup+0x36>
   d620a:	8819      	ldrh	r1, [r3, #0]
   d620c:	789b      	ldrb	r3, [r3, #2]
   d620e:	70a3      	strb	r3, [r4, #2]
   d6210:	222d      	movs	r2, #45	; 0x2d
   d6212:	8021      	strh	r1, [r4, #0]
   d6214:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d6218:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d621a:	4ca7      	ldr	r4, [pc, #668]	; (d64b8 <setup+0x2f4>)
   d621c:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d621e:	f005 fb43 	bl	db8a8 <memset>
   d6222:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d6224:	7026      	strb	r6, [r4, #0]
   d6226:	f002 fcdd 	bl	d8be4 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d622a:	a902      	add	r1, sp, #8
   d622c:	a806      	add	r0, sp, #24
   d622e:	f003 ff37 	bl	da0a0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d6232:	49a2      	ldr	r1, [pc, #648]	; (d64bc <setup+0x2f8>)
   d6234:	a806      	add	r0, sp, #24
   d6236:	f003 ff7a 	bl	da12e <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d623a:	e9cd 6600 	strd	r6, r6, [sp]
   d623e:	4633      	mov	r3, r6
   d6240:	4632      	mov	r2, r6
   d6242:	499f      	ldr	r1, [pc, #636]	; (d64c0 <setup+0x2fc>)
   d6244:	6800      	ldr	r0, [r0, #0]
   d6246:	f002 fcdd 	bl	d8c04 <spark_subscribe>
class StringSumHelper : public String
   d624a:	a806      	add	r0, sp, #24
   d624c:	f003 feba 	bl	d9fc4 <_ZN6StringD1Ev>
   d6250:	a802      	add	r0, sp, #8
   d6252:	f003 feb7 	bl	d9fc4 <_ZN6StringD1Ev>
        return _variable(varKey, var, STRING);
   d6256:	499b      	ldr	r1, [pc, #620]	; (d64c4 <setup+0x300>)
   d6258:	489b      	ldr	r0, [pc, #620]	; (d64c8 <setup+0x304>)
   d625a:	f7fe f855 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d625e:	499b      	ldr	r1, [pc, #620]	; (d64cc <setup+0x308>)
   d6260:	489b      	ldr	r0, [pc, #620]	; (d64d0 <setup+0x30c>)
   d6262:	f7fe f851 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6266:	499b      	ldr	r1, [pc, #620]	; (d64d4 <setup+0x310>)
   d6268:	489b      	ldr	r0, [pc, #620]	; (d64d8 <setup+0x314>)
   d626a:	f7fe f84d 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d626e:	4633      	mov	r3, r6
   d6270:	499a      	ldr	r1, [pc, #616]	; (d64dc <setup+0x318>)
   d6272:	489b      	ldr	r0, [pc, #620]	; (d64e0 <setup+0x31c>)
   d6274:	2202      	movs	r2, #2
   d6276:	f002 fc8d 	bl	d8b94 <spark_variable>
   d627a:	4633      	mov	r3, r6
   d627c:	2201      	movs	r2, #1
   d627e:	4999      	ldr	r1, [pc, #612]	; (d64e4 <setup+0x320>)
   d6280:	4899      	ldr	r0, [pc, #612]	; (d64e8 <setup+0x324>)
   d6282:	f002 fc87 	bl	d8b94 <spark_variable>
        return _variable(varKey, var, STRING);
   d6286:	4999      	ldr	r1, [pc, #612]	; (d64ec <setup+0x328>)
   d6288:	4899      	ldr	r0, [pc, #612]	; (d64f0 <setup+0x32c>)
   d628a:	f7fe f83d 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d628e:	4999      	ldr	r1, [pc, #612]	; (d64f4 <setup+0x330>)
   d6290:	4899      	ldr	r0, [pc, #612]	; (d64f8 <setup+0x334>)
   d6292:	f7fe f839 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6296:	4999      	ldr	r1, [pc, #612]	; (d64fc <setup+0x338>)
   d6298:	4899      	ldr	r0, [pc, #612]	; (d6500 <setup+0x33c>)
   d629a:	f7fe f835 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d629e:	4999      	ldr	r1, [pc, #612]	; (d6504 <setup+0x340>)
   d62a0:	4899      	ldr	r0, [pc, #612]	; (d6508 <setup+0x344>)
   d62a2:	f7fe f831 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d62a6:	4999      	ldr	r1, [pc, #612]	; (d650c <setup+0x348>)
   d62a8:	4899      	ldr	r0, [pc, #612]	; (d6510 <setup+0x34c>)
   d62aa:	f7fe f82d 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d62ae:	4999      	ldr	r1, [pc, #612]	; (d6514 <setup+0x350>)
   d62b0:	4899      	ldr	r0, [pc, #612]	; (d6518 <setup+0x354>)
   d62b2:	f7fe f829 	bl	d4308 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d62b6:	4633      	mov	r3, r6
   d62b8:	4998      	ldr	r1, [pc, #608]	; (d651c <setup+0x358>)
   d62ba:	4899      	ldr	r0, [pc, #612]	; (d6520 <setup+0x35c>)
   d62bc:	2202      	movs	r2, #2
   d62be:	f002 fc69 	bl	d8b94 <spark_variable>
   d62c2:	4633      	mov	r3, r6
   d62c4:	2202      	movs	r2, #2
   d62c6:	4997      	ldr	r1, [pc, #604]	; (d6524 <setup+0x360>)
   d62c8:	4897      	ldr	r0, [pc, #604]	; (d6528 <setup+0x364>)
   d62ca:	f002 fc63 	bl	d8b94 <spark_variable>
        return _function(name, args...);
   d62ce:	4997      	ldr	r1, [pc, #604]	; (d652c <setup+0x368>)
   d62d0:	4897      	ldr	r0, [pc, #604]	; (d6530 <setup+0x36c>)
   d62d2:	f7fe f85b 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62d6:	4997      	ldr	r1, [pc, #604]	; (d6534 <setup+0x370>)
   d62d8:	4897      	ldr	r0, [pc, #604]	; (d6538 <setup+0x374>)
   d62da:	f7fe f857 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62de:	4997      	ldr	r1, [pc, #604]	; (d653c <setup+0x378>)
   d62e0:	4897      	ldr	r0, [pc, #604]	; (d6540 <setup+0x37c>)
   d62e2:	f7fe f853 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62e6:	4997      	ldr	r1, [pc, #604]	; (d6544 <setup+0x380>)
   d62e8:	4897      	ldr	r0, [pc, #604]	; (d6548 <setup+0x384>)
   d62ea:	f7fe f84f 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62ee:	4997      	ldr	r1, [pc, #604]	; (d654c <setup+0x388>)
   d62f0:	487d      	ldr	r0, [pc, #500]	; (d64e8 <setup+0x324>)
   d62f2:	f7fe f84b 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62f6:	4996      	ldr	r1, [pc, #600]	; (d6550 <setup+0x38c>)
   d62f8:	4896      	ldr	r0, [pc, #600]	; (d6554 <setup+0x390>)
   d62fa:	f7fe f847 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d62fe:	4996      	ldr	r1, [pc, #600]	; (d6558 <setup+0x394>)
   d6300:	4896      	ldr	r0, [pc, #600]	; (d655c <setup+0x398>)
   d6302:	f7fe f843 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6306:	4996      	ldr	r1, [pc, #600]	; (d6560 <setup+0x39c>)
   d6308:	4896      	ldr	r0, [pc, #600]	; (d6564 <setup+0x3a0>)
   d630a:	f7fe f83f 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d630e:	4996      	ldr	r1, [pc, #600]	; (d6568 <setup+0x3a4>)
   d6310:	4896      	ldr	r0, [pc, #600]	; (d656c <setup+0x3a8>)
   d6312:	f7fe f83b 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6316:	4996      	ldr	r1, [pc, #600]	; (d6570 <setup+0x3ac>)
   d6318:	4896      	ldr	r0, [pc, #600]	; (d6574 <setup+0x3b0>)
   d631a:	f7fe f837 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d631e:	4996      	ldr	r1, [pc, #600]	; (d6578 <setup+0x3b4>)
   d6320:	4896      	ldr	r0, [pc, #600]	; (d657c <setup+0x3b8>)
   d6322:	f7fe f833 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6326:	4996      	ldr	r1, [pc, #600]	; (d6580 <setup+0x3bc>)
   d6328:	4896      	ldr	r0, [pc, #600]	; (d6584 <setup+0x3c0>)
   d632a:	f7fe f82f 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d632e:	4996      	ldr	r1, [pc, #600]	; (d6588 <setup+0x3c4>)
   d6330:	4896      	ldr	r0, [pc, #600]	; (d658c <setup+0x3c8>)
   d6332:	f7fe f82b 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6336:	4996      	ldr	r1, [pc, #600]	; (d6590 <setup+0x3cc>)
   d6338:	4896      	ldr	r0, [pc, #600]	; (d6594 <setup+0x3d0>)
   d633a:	f7fe f827 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d633e:	4996      	ldr	r1, [pc, #600]	; (d6598 <setup+0x3d4>)
   d6340:	4896      	ldr	r0, [pc, #600]	; (d659c <setup+0x3d8>)
   d6342:	f7fe f823 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d6346:	4996      	ldr	r1, [pc, #600]	; (d65a0 <setup+0x3dc>)
   d6348:	4896      	ldr	r0, [pc, #600]	; (d65a4 <setup+0x3e0>)
   d634a:	f7fe f81f 	bl	d438c <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d634e:	4896      	ldr	r0, [pc, #600]	; (d65a8 <setup+0x3e4>)
   d6350:	f001 fd16 	bl	d7d80 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d6354:	4631      	mov	r1, r6
   d6356:	4894      	ldr	r0, [pc, #592]	; (d65a8 <setup+0x3e4>)
   d6358:	f001 fe4f 	bl	d7ffa <_ZN8MCP7941010clearAlarmEi>
    CloudConfig::instance()
   d635c:	f000 fbd6 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d6360:	4b92      	ldr	r3, [pc, #584]	; (d65ac <setup+0x3e8>)
   d6362:	9305      	str	r3, [sp, #20]
   d6364:	4605      	mov	r5, r0
	    _M_manager = &_My_handler::_M_manager;
   d6366:	4b92      	ldr	r3, [pc, #584]	; (d65b0 <setup+0x3ec>)
   d6368:	9304      	str	r3, [sp, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d636a:	2202      	movs	r2, #2
   d636c:	a902      	add	r1, sp, #8
   d636e:	a806      	add	r0, sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6370:	9608      	str	r6, [sp, #32]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6372:	f7fd fec8 	bl	d4106 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d6376:	9b05      	ldr	r3, [sp, #20]
   d6378:	9309      	str	r3, [sp, #36]	; 0x24
	std::swap(_M_functor, __x._M_functor);
   d637a:	f105 010c 	add.w	r1, r5, #12
	  _M_manager = __x._M_manager;
   d637e:	9b04      	ldr	r3, [sp, #16]
   d6380:	9308      	str	r3, [sp, #32]
	std::swap(_M_functor, __x._M_functor);
   d6382:	a806      	add	r0, sp, #24
   d6384:	f7ff ff0c 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6388:	9b08      	ldr	r3, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   d638a:	696a      	ldr	r2, [r5, #20]
   d638c:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   d638e:	616b      	str	r3, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6390:	9b09      	ldr	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   d6392:	69aa      	ldr	r2, [r5, #24]
   d6394:	9209      	str	r2, [sp, #36]	; 0x24
    class function<_Res(_ArgTypes...)>
   d6396:	a806      	add	r0, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
   d6398:	61ab      	str	r3, [r5, #24]
   d639a:	f7fd ffb9 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
    CloudConfig &withUpdateFrequency(std::chrono::seconds chronoLiteral) { this->updateFrequency = chronoLiteral.count(); return *this; };
   d639e:	4b85      	ldr	r3, [pc, #532]	; (d65b4 <setup+0x3f0>)
   d63a0:	61eb      	str	r3, [r5, #28]
        .withUpdateMethod(new CloudConfigUpdateWebhook("CloudConfigDeviceNotes"))
   d63a2:	202c      	movs	r0, #44	; 0x2c
   d63a4:	f7fd fe77 	bl	d4096 <_Znwj>
   d63a8:	4606      	mov	r6, r0
   d63aa:	b110      	cbz	r0, d63b2 <setup+0x1ee>
   d63ac:	4982      	ldr	r1, [pc, #520]	; (d65b8 <setup+0x3f4>)
   d63ae:	f000 fbfb 	bl	d6ba8 <_ZN24CloudConfigUpdateWebhookC1EPKc>
    CloudConfig &withUpdateMethod(CloudConfigUpdate *updateMethod) { this->updateMethod = updateMethod; return *this; };
   d63b2:	60ae      	str	r6, [r5, #8]
        .withStorageMethod(new CloudConfigStorageRetained(&retainedConfig, sizeof(retainedConfig)))
   d63b4:	2018      	movs	r0, #24
   d63b6:	f7fd fe6e 	bl	d4096 <_Znwj>
   d63ba:	4606      	mov	r6, r0
   d63bc:	b130      	cbz	r0, d63cc <setup+0x208>
    CloudConfigStorageRetained(void *retainedData, size_t totalSize) : CloudConfigStorageData((CloudConfigDataHeader *)retainedData, totalSize - sizeof(CloudConfigDataHeader)) {};
   d63be:	497f      	ldr	r1, [pc, #508]	; (d65bc <setup+0x3f8>)
   d63c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   d63c4:	f000 fb60 	bl	d6a88 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>
   d63c8:	4b7d      	ldr	r3, [pc, #500]	; (d65c0 <setup+0x3fc>)
   d63ca:	6033      	str	r3, [r6, #0]
        .setup();
   d63cc:	4628      	mov	r0, r5
    CloudConfig &withStorageMethod(CloudConfigStorage *storageMethod) { this->storageMethod = storageMethod; return *this; };
   d63ce:	606e      	str	r6, [r5, #4]
   d63d0:	f000 fd2a 	bl	d6e28 <_ZN11CloudConfig5setupEv>
   d63d4:	a802      	add	r0, sp, #8
   d63d6:	f7fd ff9b 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().withNameCallback([](const char *name) {});
   d63da:	f000 fef5 	bl	d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d63de:	4b79      	ldr	r3, [pc, #484]	; (d65c4 <setup+0x400>)
   d63e0:	9309      	str	r3, [sp, #36]	; 0x24
   d63e2:	a906      	add	r1, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   d63e4:	4b78      	ldr	r3, [pc, #480]	; (d65c8 <setup+0x404>)
   d63e6:	9308      	str	r3, [sp, #32]
   d63e8:	f000 ff0a 	bl	d7200 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>
    class function<_Res(_ArgTypes...)>
   d63ec:	a806      	add	r0, sp, #24
   d63ee:	f7fd ff8f 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
  DeviceNameHelperRetained::instance().setup(&deviceNameHelperRetained);
   d63f2:	f000 fee9 	bl	d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>
   d63f6:	4975      	ldr	r1, [pc, #468]	; (d65cc <setup+0x408>)
   d63f8:	f000 ff6c 	bl	d72d4 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>
  fram.begin();                                                                             // Initialize the FRAM module
   d63fc:	4874      	ldr	r0, [pc, #464]	; (d65d0 <setup+0x40c>)
   d63fe:	f001 f95b 	bl	d76b8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d6402:	2301      	movs	r3, #1
   d6404:	4872      	ldr	r0, [pc, #456]	; (d65d0 <setup+0x40c>)
   d6406:	aa06      	add	r2, sp, #24
   d6408:	2100      	movs	r1, #0
   d640a:	f001 f997 	bl	d773c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d640e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6412:	2b16      	cmp	r3, #22
   d6414:	f000 80ea 	beq.w	d65ec <setup+0x428>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d6418:	486d      	ldr	r0, [pc, #436]	; (d65d0 <setup+0x40c>)
   d641a:	f001 f957 	bl	d76cc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d641e:	4a6d      	ldr	r2, [pc, #436]	; (d65d4 <setup+0x410>)
   d6420:	486b      	ldr	r0, [pc, #428]	; (d65d0 <setup+0x40c>)
   d6422:	2304      	movs	r3, #4
   d6424:	2100      	movs	r1, #0
   d6426:	f001 f9d4 	bl	d77d2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d642a:	2301      	movs	r3, #1
   d642c:	4868      	ldr	r0, [pc, #416]	; (d65d0 <setup+0x40c>)
   d642e:	aa06      	add	r2, sp, #24
   d6430:	2100      	movs	r1, #0
   d6432:	f001 f983 	bl	d773c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d6436:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d643a:	2b16      	cmp	r3, #22
   d643c:	d029      	beq.n	d6492 <setup+0x2ce>
   d643e:	2301      	movs	r3, #1
   d6440:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d6442:	4d65      	ldr	r5, [pc, #404]	; (d65d8 <setup+0x414>)
  checkConstantValues();
   d6444:	f7fe fa50 	bl	d48e8 <_Z19checkConstantValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d6448:	f7fe fa1e 	bl	d4888 <_Z17checkSystemValuesv>
  loadEmonlib();                                                                            // Initialize the emon library modules.
   d644c:	f7fe fd54 	bl	d4ef8 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d6450:	786b      	ldrb	r3, [r5, #1]
   d6452:	2b00      	cmp	r3, #0
   d6454:	f000 80e5 	beq.w	d6622 <setup+0x45e>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d6458:	2000      	movs	r0, #0
   d645a:	f002 f9cd 	bl	d87f8 <hal_timer_millis>
   d645e:	f04f 0a00 	mov.w	sl, #0
   d6462:	4606      	mov	r6, r0
   d6464:	2000      	movs	r0, #0
   d6466:	f002 f9c7 	bl	d87f8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d646a:	ebb0 0806 	subs.w	r8, r0, r6
   d646e:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d6472:	2300      	movs	r3, #0
   d6474:	f247 522f 	movw	r2, #29999	; 0x752f
   d6478:	454b      	cmp	r3, r9
   d647a:	bf08      	it	eq
   d647c:	4542      	cmpeq	r2, r8
   d647e:	f0c0 80c2 	bcc.w	d6606 <setup+0x442>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6482:	f002 fba7 	bl	d8bd4 <spark_cloud_flag_connected>
   d6486:	2800      	cmp	r0, #0
   d6488:	f040 80bd 	bne.w	d6606 <setup+0x442>
            spark_process();
   d648c:	f002 fb92 	bl	d8bb4 <spark_process>
        while (_while() && !_condition()) {
   d6490:	e7e8      	b.n	d6464 <setup+0x2a0>
        val_(0) {
   d6492:	2300      	movs	r3, #0
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d6494:	f88d 3000 	strb.w	r3, [sp]
   d6498:	4b50      	ldr	r3, [pc, #320]	; (d65dc <setup+0x418>)
   d649a:	4a51      	ldr	r2, [pc, #324]	; (d65e0 <setup+0x41c>)
   d649c:	781b      	ldrb	r3, [r3, #0]
   d649e:	4951      	ldr	r1, [pc, #324]	; (d65e4 <setup+0x420>)
   d64a0:	4851      	ldr	r0, [pc, #324]	; (d65e8 <setup+0x424>)
   d64a2:	f7fd ffd0 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d64a6:	f7fe f993 	bl	d47d0 <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d64aa:	f7fe f9c1 	bl	d4830 <_Z20loadConstantDefaultsv>
   d64ae:	e7c8      	b.n	d6442 <setup+0x27e>
   d64b0:	000d40e1 	.word	0x000d40e1
   d64b4:	000ddf88 	.word	0x000ddf88
   d64b8:	2003e5b5 	.word	0x2003e5b5
   d64bc:	000ddd4a 	.word	0x000ddd4a
   d64c0:	000d4275 	.word	0x000d4275
   d64c4:	000ddfc8 	.word	0x000ddfc8
   d64c8:	000ddacd 	.word	0x000ddacd
   d64cc:	2003df4e 	.word	0x2003df4e
   d64d0:	000ddd6f 	.word	0x000ddd6f
   d64d4:	2003df3e 	.word	0x2003df3e
   d64d8:	000ddd77 	.word	0x000ddd77
   d64dc:	2003e5bc 	.word	0x2003e5bc
   d64e0:	000ddd86 	.word	0x000ddd86
   d64e4:	2003e5b9 	.word	0x2003e5b9
   d64e8:	000dd801 	.word	0x000dd801
   d64ec:	2003e535 	.word	0x2003e535
   d64f0:	000dddd5 	.word	0x000dddd5
   d64f4:	2003e595 	.word	0x2003e595
   d64f8:	000ddde6 	.word	0x000ddde6
   d64fc:	2003e575 	.word	0x2003e575
   d6500:	000dddf7 	.word	0x000dddf7
   d6504:	2003e515 	.word	0x2003e515
   d6508:	000dde0a 	.word	0x000dde0a
   d650c:	2003e4f5 	.word	0x2003e4f5
   d6510:	000dde1c 	.word	0x000dde1c
   d6514:	2003e555 	.word	0x2003e555
   d6518:	000dde2e 	.word	0x000dde2e
   d651c:	2003e5dc 	.word	0x2003e5dc
   d6520:	000ddbec 	.word	0x000ddbec
   d6524:	2003e5e0 	.word	0x2003e5e0
   d6528:	000ddd95 	.word	0x000ddd95
   d652c:	000d4121 	.word	0x000d4121
   d6530:	000ddda4 	.word	0x000ddda4
   d6534:	000d5601 	.word	0x000d5601
   d6538:	000dddb0 	.word	0x000dddb0
   d653c:	000d45d1 	.word	0x000d45d1
   d6540:	000dddc4 	.word	0x000dddc4
   d6544:	000d44fd 	.word	0x000d44fd
   d6548:	000dd83c 	.word	0x000dd83c
   d654c:	000d4461 	.word	0x000d4461
   d6550:	000d5079 	.word	0x000d5079
   d6554:	000dddd1 	.word	0x000dddd1
   d6558:	000d50c9 	.word	0x000d50c9
   d655c:	000ddde2 	.word	0x000ddde2
   d6560:	000d5119 	.word	0x000d5119
   d6564:	000dddf3 	.word	0x000dddf3
   d6568:	000d5169 	.word	0x000d5169
   d656c:	000dde06 	.word	0x000dde06
   d6570:	000d51b9 	.word	0x000d51b9
   d6574:	000dde18 	.word	0x000dde18
   d6578:	000d5209 	.word	0x000d5209
   d657c:	000dde2a 	.word	0x000dde2a
   d6580:	000d413d 	.word	0x000d413d
   d6584:	000dde3b 	.word	0x000dde3b
   d6588:	000d4651 	.word	0x000d4651
   d658c:	000dde49 	.word	0x000dde49
   d6590:	000d4721 	.word	0x000d4721
   d6594:	000ddad5 	.word	0x000ddad5
   d6598:	000d4579 	.word	0x000d4579
   d659c:	000dde58 	.word	0x000dde58
   d65a0:	000d4781 	.word	0x000d4781
   d65a4:	000dde74 	.word	0x000dde74
   d65a8:	2003e41c 	.word	0x2003e41c
   d65ac:	000d56a9 	.word	0x000d56a9
   d65b0:	000d4107 	.word	0x000d4107
   d65b4:	00015180 	.word	0x00015180
   d65b8:	000dde82 	.word	0x000dde82
   d65bc:	2003f400 	.word	0x2003f400
   d65c0:	000ddf48 	.word	0x000ddf48
   d65c4:	000d4111 	.word	0x000d4111
   d65c8:	000d4113 	.word	0x000d4113
   d65cc:	2003f514 	.word	0x2003f514
   d65d0:	2003e3b0 	.word	0x2003e3b0
   d65d4:	000ddfd0 	.word	0x000ddfd0
   d65d8:	2003e5b8 	.word	0x2003e5b8
   d65dc:	2003df3d 	.word	0x2003df3d
   d65e0:	000dde99 	.word	0x000dde99
   d65e4:	000ddea4 	.word	0x000ddea4
   d65e8:	2003e3e0 	.word	0x2003e3e0
   d65ec:	4a1d      	ldr	r2, [pc, #116]	; (d6664 <setup+0x4a0>)
   d65ee:	481e      	ldr	r0, [pc, #120]	; (d6668 <setup+0x4a4>)
   d65f0:	2318      	movs	r3, #24
   d65f2:	21a0      	movs	r1, #160	; 0xa0
   d65f4:	f001 f8a2 	bl	d773c <_ZN6MB85RC8readDataEjPhj>
   d65f8:	4a1c      	ldr	r2, [pc, #112]	; (d666c <setup+0x4a8>)
   d65fa:	481b      	ldr	r0, [pc, #108]	; (d6668 <setup+0x4a4>)
   d65fc:	2330      	movs	r3, #48	; 0x30
   d65fe:	2101      	movs	r1, #1
   d6600:	f001 f89c 	bl	d773c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d6604:	e71d      	b.n	d6442 <setup+0x27e>
   d6606:	f002 fae5 	bl	d8bd4 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d660a:	6868      	ldr	r0, [r5, #4]
   d660c:	f7fd fec4 	bl	d4398 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d6610:	686b      	ldr	r3, [r5, #4]
   d6612:	4817      	ldr	r0, [pc, #92]	; (d6670 <setup+0x4ac>)
   d6614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6618:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d661c:	4359      	muls	r1, r3
   d661e:	f7fd fece 	bl	d43be <_ZN5Timer12changePeriodEjj>
  updateConstantValues();
   d6622:	f7fe fcc7 	bl	d4fb4 <_Z20updateConstantValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d6626:	f7fe fa9d 	bl	d4b64 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d662a:	7a6b      	ldrb	r3, [r5, #9]
   d662c:	b14b      	cbz	r3, d6642 <setup+0x47e>
   d662e:	2300      	movs	r3, #0
   d6630:	f88d 3000 	strb.w	r3, [sp]
   d6634:	4b0f      	ldr	r3, [pc, #60]	; (d6674 <setup+0x4b0>)
   d6636:	4910      	ldr	r1, [pc, #64]	; (d6678 <setup+0x4b4>)
   d6638:	781b      	ldrb	r3, [r3, #0]
   d663a:	4810      	ldr	r0, [pc, #64]	; (d667c <setup+0x4b8>)
   d663c:	463a      	mov	r2, r7
   d663e:	f7fd ff02 	bl	d4446 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6642:	f002 fac7 	bl	d8bd4 <spark_cloud_flag_connected>
   d6646:	b910      	cbnz	r0, d664e <setup+0x48a>
            spark_process();
   d6648:	f002 fab4 	bl	d8bb4 <spark_process>
        while (_while() && !_condition()) {
   d664c:	e7f9      	b.n	d6642 <setup+0x47e>
   d664e:	f002 fac1 	bl	d8bd4 <spark_cloud_flag_connected>
  sendConfiguration();
   d6652:	f7fe fe01 	bl	d5258 <_Z17sendConfigurationv>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d6656:	7823      	ldrb	r3, [r4, #0]
   d6658:	b90b      	cbnz	r3, d665e <setup+0x49a>
   d665a:	2302      	movs	r3, #2
   d665c:	7023      	strb	r3, [r4, #0]
}
   d665e:	b01a      	add	sp, #104	; 0x68
   d6660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6664:	2003e438 	.word	0x2003e438
   d6668:	2003e3b0 	.word	0x2003e3b0
   d666c:	2003e5b8 	.word	0x2003e5b8
   d6670:	2003e3c0 	.word	0x2003e3c0
   d6674:	2003df3d 	.word	0x2003df3d
   d6678:	000ddeb5 	.word	0x000ddeb5
   d667c:	2003e3e0 	.word	0x2003e3e0

000d6680 <_GLOBAL__sub_I___appProductID>:
   d6680:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d6682:	4b4f      	ldr	r3, [pc, #316]	; (d67c0 <_GLOBAL__sub_I___appProductID+0x140>)
              error_(SYSTEM_ERROR_NONE) {
   d6684:	4d4f      	ldr	r5, [pc, #316]	; (d67c4 <_GLOBAL__sub_I___appProductID+0x144>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d6686:	4e50      	ldr	r6, [pc, #320]	; (d67c8 <_GLOBAL__sub_I___appProductID+0x148>)
   d6688:	2701      	movs	r7, #1
   d668a:	701f      	strb	r7, [r3, #0]
   d668c:	4b4f      	ldr	r3, [pc, #316]	; (d67cc <_GLOBAL__sub_I___appProductID+0x14c>)
   d668e:	2202      	movs	r2, #2
   d6690:	b087      	sub	sp, #28
   d6692:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d6694:	f004 f98e 	bl	da9b4 <spark_protocol_instance>
   d6698:	2300      	movs	r3, #0
   d669a:	461a      	mov	r2, r3
   d669c:	f642 51d6 	movw	r1, #11734	; 0x2dd6
   d66a0:	f004 f990 	bl	da9c4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d66a4:	f004 f986 	bl	da9b4 <spark_protocol_instance>
   d66a8:	2300      	movs	r3, #0
   d66aa:	461a      	mov	r2, r3
   d66ac:	210d      	movs	r1, #13
   d66ae:	2400      	movs	r4, #0
   d66b0:	f004 f990 	bl	da9d4 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d66b4:	4b46      	ldr	r3, [pc, #280]	; (d67d0 <_GLOBAL__sub_I___appProductID+0x150>)
   d66b6:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d66b8:	602c      	str	r4, [r5, #0]
   d66ba:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d66bc:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d66be:	4638      	mov	r0, r7
   d66c0:	f002 fa12 	bl	d8ae8 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d66c4:	4632      	mov	r2, r6
   d66c6:	4943      	ldr	r1, [pc, #268]	; (d67d4 <_GLOBAL__sub_I___appProductID+0x154>)
   d66c8:	4628      	mov	r0, r5
   d66ca:	f004 fa4b 	bl	dab64 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d66ce:	4621      	mov	r1, r4
   d66d0:	4638      	mov	r0, r7
   d66d2:	f002 fa19 	bl	d8b08 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d66d6:	4639      	mov	r1, r7
   d66d8:	2004      	movs	r0, #4
   d66da:	f002 f85d 	bl	d8798 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d66de:	f004 fa19 	bl	dab14 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d66e2:	4d3d      	ldr	r5, [pc, #244]	; (d67d8 <_GLOBAL__sub_I___appProductID+0x158>)
   d66e4:	4601      	mov	r1, r0
   d66e6:	4623      	mov	r3, r4
   d66e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d66ec:	4628      	mov	r0, r5
   d66ee:	f000 ffd9 	bl	d76a4 <_ZN6MB85RCC1ER7TwoWireji>
   d66f2:	4b3a      	ldr	r3, [pc, #232]	; (d67dc <_GLOBAL__sub_I___appProductID+0x15c>)
   d66f4:	602b      	str	r3, [r5, #0]
   d66f6:	4632      	mov	r2, r6
   d66f8:	4939      	ldr	r1, [pc, #228]	; (d67e0 <_GLOBAL__sub_I___appProductID+0x160>)
   d66fa:	4628      	mov	r0, r5
   d66fc:	f004 fa32 	bl	dab64 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d6700:	f004 fa08 	bl	dab14 <_Z19__fetch_global_Wirev>
   d6704:	4d37      	ldr	r5, [pc, #220]	; (d67e4 <_GLOBAL__sub_I___appProductID+0x164>)
   d6706:	4601      	mov	r1, r0
   d6708:	4628      	mov	r0, r5
   d670a:	f001 fa41 	bl	d7b90 <_ZN8MCP79410C1ER7TwoWire>
   d670e:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d6710:	4d35      	ldr	r5, [pc, #212]	; (d67e8 <_GLOBAL__sub_I___appProductID+0x168>)
   d6712:	4936      	ldr	r1, [pc, #216]	; (d67ec <_GLOBAL__sub_I___appProductID+0x16c>)
   d6714:	4632      	mov	r2, r6
   d6716:	f004 fa25 	bl	dab64 <__aeabi_atexit>
   d671a:	4935      	ldr	r1, [pc, #212]	; (d67f0 <_GLOBAL__sub_I___appProductID+0x170>)
   d671c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d6720:	4628      	mov	r0, r5
   d6722:	f001 feab 	bl	d847c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d6726:	4b33      	ldr	r3, [pc, #204]	; (d67f4 <_GLOBAL__sub_I___appProductID+0x174>)
   d6728:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d672a:	4632      	mov	r2, r6
   d672c:	4932      	ldr	r1, [pc, #200]	; (d67f8 <_GLOBAL__sub_I___appProductID+0x178>)
   d672e:	4628      	mov	r0, r5
   d6730:	f004 fa18 	bl	dab64 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6734:	4b31      	ldr	r3, [pc, #196]	; (d67fc <_GLOBAL__sub_I___appProductID+0x17c>)
   d6736:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6738:	4b31      	ldr	r3, [pc, #196]	; (d6800 <_GLOBAL__sub_I___appProductID+0x180>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d673a:	4d32      	ldr	r5, [pc, #200]	; (d6804 <_GLOBAL__sub_I___appProductID+0x184>)
   d673c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d673e:	4b32      	ldr	r3, [pc, #200]	; (d6808 <_GLOBAL__sub_I___appProductID+0x188>)
   d6740:	9304      	str	r3, [sp, #16]
   d6742:	4b32      	ldr	r3, [pc, #200]	; (d680c <_GLOBAL__sub_I___appProductID+0x18c>)
   d6744:	602b      	str	r3, [r5, #0]
   d6746:	712c      	strb	r4, [r5, #4]
   d6748:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
   d674a:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
   d674c:	f105 010c 	add.w	r1, r5, #12
   d6750:	a802      	add	r0, sp, #8
   d6752:	f7ff fd25 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      __a = _GLIBCXX_MOVE(__b);
   d6756:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6758:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d675a:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d675c:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d675e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6760:	69aa      	ldr	r2, [r5, #24]
   d6762:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6764:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d6766:	4a2a      	ldr	r2, [pc, #168]	; (d6810 <_GLOBAL__sub_I___appProductID+0x190>)
   d6768:	462b      	mov	r3, r5
   d676a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d676e:	e9cd 4400 	strd	r4, r4, [sp]
   d6772:	f105 0008 	add.w	r0, r5, #8
   d6776:	f001 ffb7 	bl	d86e8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d677a:	a802      	add	r0, sp, #8
   d677c:	f7fd fdc8 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d6780:	4628      	mov	r0, r5
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d6782:	4d24      	ldr	r5, [pc, #144]	; (d6814 <_GLOBAL__sub_I___appProductID+0x194>)
Timer keepAliveTimer(1000, keepAliveMessage);
   d6784:	4924      	ldr	r1, [pc, #144]	; (d6818 <_GLOBAL__sub_I___appProductID+0x198>)
   d6786:	4632      	mov	r2, r6
   d6788:	f004 f9ec 	bl	dab64 <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d678c:	4621      	mov	r1, r4
   d678e:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d6792:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d6796:	e9c5 4418 	strd	r4, r4, [r5, #96]	; 0x60
   d679a:	e9c5 441b 	strd	r4, r4, [r5, #108]	; 0x6c
   d679e:	652c      	str	r4, [r5, #80]	; 0x50
   d67a0:	65ec      	str	r4, [r5, #92]	; 0x5c
   d67a2:	66ac      	str	r4, [r5, #104]	; 0x68
   d67a4:	676c      	str	r4, [r5, #116]	; 0x74
   d67a6:	2210      	movs	r2, #16
   d67a8:	f105 0078 	add.w	r0, r5, #120	; 0x78
   d67ac:	f005 f87c 	bl	db8a8 <memset>
   d67b0:	2210      	movs	r2, #16
   d67b2:	4621      	mov	r1, r4
   d67b4:	f105 0088 	add.w	r0, r5, #136	; 0x88
   d67b8:	f005 f876 	bl	db8a8 <memset>
   d67bc:	b007      	add	sp, #28
   d67be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d67c0:	2003df3d 	.word	0x2003df3d
   d67c4:	2003df30 	.word	0x2003df30
   d67c8:	2003def0 	.word	0x2003def0
   d67cc:	2003df3c 	.word	0x2003df3c
   d67d0:	ffff0000 	.word	0xffff0000
   d67d4:	000d42f9 	.word	0x000d42f9
   d67d8:	2003e3b0 	.word	0x2003e3b0
   d67dc:	000ddf04 	.word	0x000ddf04
   d67e0:	000d4211 	.word	0x000d4211
   d67e4:	2003e41c 	.word	0x2003e41c
   d67e8:	2003e3e0 	.word	0x2003e3e0
   d67ec:	000d791b 	.word	0x000d791b
   d67f0:	2003f540 	.word	0x2003f540
   d67f4:	000ddedc 	.word	0x000ddedc
   d67f8:	000d41e9 	.word	0x000d41e9
   d67fc:	000d60f9 	.word	0x000d60f9
   d6800:	000d40ed 	.word	0x000d40ed
   d6804:	2003e3c0 	.word	0x2003e3c0
   d6808:	000d40f1 	.word	0x000d40f1
   d680c:	000ddec8 	.word	0x000ddec8
   d6810:	000d4239 	.word	0x000d4239
   d6814:	2003e450 	.word	0x2003e450
   d6818:	000d4325 	.word	0x000d4325
   d681c:	00000000 	.word	0x00000000

000d6820 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d6820:	b082      	sub	sp, #8
   d6822:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6826:	a90a      	add	r1, sp, #40	; 0x28
   d6828:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d682c:	4b34      	ldr	r3, [pc, #208]	; (d6900 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d682e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d6904 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d6832:	2200      	movs	r2, #0
   d6834:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d6838:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d683a:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d683e:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d6842:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d6846:	f004 f935 	bl	daab4 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d684a:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d684e:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d6850:	f004 fc0c 	bl	db06c <__aeabi_i2d>
   d6854:	4642      	mov	r2, r8
   d6856:	464b      	mov	r3, r9
   d6858:	4606      	mov	r6, r0
   d685a:	460f      	mov	r7, r1
   d685c:	f004 fab8 	bl	dadd0 <__aeabi_dsub>
   d6860:	4652      	mov	r2, sl
   d6862:	465b      	mov	r3, fp
   d6864:	f004 fc6c 	bl	db140 <__aeabi_dmul>
   d6868:	4642      	mov	r2, r8
   d686a:	464b      	mov	r3, r9
   d686c:	f004 fab2 	bl	dadd4 <__adddf3>
   d6870:	4602      	mov	r2, r0
   d6872:	460b      	mov	r3, r1
   d6874:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d6878:	4630      	mov	r0, r6
   d687a:	4639      	mov	r1, r7
   d687c:	f004 faa8 	bl	dadd0 <__aeabi_dsub>
   d6880:	4602      	mov	r2, r0
   d6882:	460b      	mov	r3, r1
   d6884:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d6888:	f004 fc5a 	bl	db140 <__aeabi_dmul>
   d688c:	4602      	mov	r2, r0
   d688e:	460b      	mov	r3, r1
   d6890:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d6894:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d6898:	f004 fa9c 	bl	dadd4 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d689c:	3d01      	subs	r5, #1
    sumI += sqI;
   d689e:	4606      	mov	r6, r0
   d68a0:	460f      	mov	r7, r1
   d68a2:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d68a6:	d1cc      	bne.n	d6842 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d68a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d68ac:	a310      	add	r3, pc, #64	; (adr r3, d68f0 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d68ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d68b2:	f004 fc45 	bl	db140 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d68b6:	a310      	add	r3, pc, #64	; (adr r3, d68f8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d68b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d68bc:	4680      	mov	r8, r0
   d68be:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d68c0:	4630      	mov	r0, r6
   d68c2:	4639      	mov	r1, r7
   d68c4:	f004 fd66 	bl	db394 <__aeabi_ddiv>
   d68c8:	ec41 0b10 	vmov	d0, r0, r1
   d68cc:	f004 f958 	bl	dab80 <sqrt>

  //Reset accumulators
  sumI = 0;
   d68d0:	2200      	movs	r2, #0
   d68d2:	2300      	movs	r3, #0
   d68d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d68d8:	ec51 0b10 	vmov	r0, r1, d0
   d68dc:	4642      	mov	r2, r8
   d68de:	464b      	mov	r3, r9
   d68e0:	f004 fc2e 	bl	db140 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d68e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68e8:	ec41 0b10 	vmov	d0, r0, r1
   d68ec:	b002      	add	sp, #8
   d68ee:	4770      	bx	lr
   d68f0:	66666666 	.word	0x66666666
   d68f4:	3f4a6666 	.word	0x3f4a6666
   d68f8:	00000000 	.word	0x00000000
   d68fc:	4099f800 	.word	0x4099f800
   d6900:	40a00000 	.word	0x40a00000
   d6904:	3f300000 	.word	0x3f300000

000d6908 <_ZN17CloudConfigUpdate4loopEv>:
    virtual void loop() {};
   d6908:	4770      	bx	lr

000d690a <_ZN17CloudConfigUpdate11startUpdateEv>:
    virtual void startUpdate() {};
   d690a:	4770      	bx	lr

000d690c <_ZN22CloudConfigStorageData11getJsonDataEv>:

    parse();
}

const char * const CloudConfigStorageData::getJsonData() const {
    return &((const char * const)header)[sizeof(CloudConfigDataHeader)];
   d690c:	6900      	ldr	r0, [r0, #16]
}
   d690e:	3014      	adds	r0, #20
   d6910:	4770      	bx	lr

000d6912 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6912:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6914:	4603      	mov	r3, r0
	switch (__op)
   d6916:	d102      	bne.n	d691e <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6918:	6001      	str	r1, [r0, #0]
      }
   d691a:	2000      	movs	r0, #0
   d691c:	4770      	bx	lr
	  switch (__op)
   d691e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6920:	bf04      	itt	eq
   d6922:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6926:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d692a:	e7f6      	b.n	d691a <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d692c <_ZN29CloudConfigUpdateSubscriptionD1Ev>:
 * 
 * You will probably want to subclass this if you want to be able to have the device request an update
 * since there is no way for this class to know how to request it. See CloudConfigUpdateWebhook for
 * and example of using startUpdate() to make a request.
 */
class CloudConfigUpdateSubscription : public CloudConfigUpdate {
   d692c:	b510      	push	{r4, lr}
   d692e:	4b04      	ldr	r3, [pc, #16]	; (d6940 <_ZN29CloudConfigUpdateSubscriptionD1Ev+0x14>)
   d6930:	4604      	mov	r4, r0
   d6932:	f840 3b0c 	str.w	r3, [r0], #12
   d6936:	f003 fb45 	bl	d9fc4 <_ZN6StringD1Ev>
   d693a:	4620      	mov	r0, r4
   d693c:	bd10      	pop	{r4, pc}
   d693e:	bf00      	nop
   d6940:	000de134 	.word	0x000de134

000d6944 <_ZN29CloudConfigUpdateSubscriptionD0Ev>:
   d6944:	b510      	push	{r4, lr}
   d6946:	4604      	mov	r4, r0
   d6948:	f7ff fff0 	bl	d692c <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d694c:	4620      	mov	r0, r4
   d694e:	211c      	movs	r1, #28
   d6950:	f004 f90d 	bl	dab6e <_ZdlPvj>
   d6954:	4620      	mov	r0, r4
   d6956:	bd10      	pop	{r4, pc}

000d6958 <_ZN24CloudConfigUpdateWebhookD1Ev>:
 * Two examples that use this are the Devices Notes example and Google Sheets example.
 * 
 * This is derived from CloudConfigUpdateSubscription but is different because it subscribes
 * to a webhook response event, not eventName.
 */
class CloudConfigUpdateWebhook : public CloudConfigUpdateSubscription {
   d6958:	b510      	push	{r4, lr}
   d695a:	4b05      	ldr	r3, [pc, #20]	; (d6970 <_ZN24CloudConfigUpdateWebhookD1Ev+0x18>)
   d695c:	4604      	mov	r4, r0
   d695e:	f840 3b1c 	str.w	r3, [r0], #28
   d6962:	f003 fb2f 	bl	d9fc4 <_ZN6StringD1Ev>
   d6966:	4620      	mov	r0, r4
   d6968:	f7ff ffe0 	bl	d692c <_ZN29CloudConfigUpdateSubscriptionD1Ev>
   d696c:	4620      	mov	r0, r4
   d696e:	bd10      	pop	{r4, pc}
   d6970:	000de118 	.word	0x000de118

000d6974 <_ZN24CloudConfigUpdateWebhookD0Ev>:
   d6974:	b510      	push	{r4, lr}
   d6976:	4604      	mov	r4, r0
   d6978:	f7ff ffee 	bl	d6958 <_ZN24CloudConfigUpdateWebhookD1Ev>
   d697c:	4620      	mov	r0, r4
   d697e:	212c      	movs	r1, #44	; 0x2c
   d6980:	f004 f8f5 	bl	dab6e <_ZdlPvj>
   d6984:	4620      	mov	r0, r4
   d6986:	bd10      	pop	{r4, pc}

000d6988 <_ZN22CloudConfigStorageData10updateDataEPKc>:

char *CloudConfigStorageData::getJsonData() {
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
}

bool CloudConfigStorageData::updateData(const char *json) {
   d6988:	b513      	push	{r0, r1, r4, lr}
   d698a:	4604      	mov	r4, r0
    size_t jsonLen = strlen(json);
   d698c:	4608      	mov	r0, r1
   d698e:	9101      	str	r1, [sp, #4]
   d6990:	f004 ffe5 	bl	db95e <strlen>
    if (jsonLen < (dataSize - 1)) {
   d6994:	6963      	ldr	r3, [r4, #20]
   d6996:	3b01      	subs	r3, #1
   d6998:	4283      	cmp	r3, r0
   d699a:	d90f      	bls.n	d69bc <_ZN22CloudConfigStorageData10updateDataEPKc+0x34>
    return &((char *)header)[sizeof(CloudConfigDataHeader)];
   d699c:	6920      	ldr	r0, [r4, #16]
        strcpy(getJsonData(), json);
   d699e:	9901      	ldr	r1, [sp, #4]
   d69a0:	3014      	adds	r0, #20
   d69a2:	f004 ffb7 	bl	db914 <strcpy>
        parse();
   d69a6:	6823      	ldr	r3, [r4, #0]
   d69a8:	4620      	mov	r0, r4
   d69aa:	68db      	ldr	r3, [r3, #12]
   d69ac:	4798      	blx	r3
        return save();
   d69ae:	6823      	ldr	r3, [r4, #0]
   d69b0:	6a1b      	ldr	r3, [r3, #32]
   d69b2:	4620      	mov	r0, r4
    }
    else {
        // Too long, reject
        return false;
    }
}
   d69b4:	b002      	add	sp, #8
   d69b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return save();
   d69ba:	4718      	bx	r3
}
   d69bc:	2000      	movs	r0, #0
   d69be:	b002      	add	sp, #8
   d69c0:	bd10      	pop	{r4, pc}

000d69c2 <_ZNSt17_Function_handlerIFvR11CloudConfigEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69c2:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d69c4:	6842      	ldr	r2, [r0, #4]
   d69c6:	4603      	mov	r3, r0
   d69c8:	1054      	asrs	r4, r2, #1
   d69ca:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d69ce:	07d2      	lsls	r2, r2, #31
   d69d0:	bf48      	it	mi
   d69d2:	590a      	ldrmi	r2, [r1, r4]
   d69d4:	681b      	ldr	r3, [r3, #0]
      }
   d69d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   d69da:	bf48      	it	mi
   d69dc:	58d3      	ldrmi	r3, [r2, r3]
   d69de:	4718      	bx	r3

000d69e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d69e0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d69e2:	b538      	push	{r3, r4, r5, lr}
   d69e4:	4604      	mov	r4, r0
	  switch (__op)
   d69e6:	d007      	beq.n	d69f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d69e8:	2a03      	cmp	r2, #3
   d69ea:	d011      	beq.n	d6a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d69ec:	2a01      	cmp	r2, #1
   d69ee:	d101      	bne.n	d69f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d69f0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d69f2:	6023      	str	r3, [r4, #0]
	}
   d69f4:	2000      	movs	r0, #0
   d69f6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d69f8:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d69fa:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d69fc:	f7fd fb4b 	bl	d4096 <_Znwj>
   d6a00:	4603      	mov	r3, r0
   d6a02:	2800      	cmp	r0, #0
   d6a04:	d0f5      	beq.n	d69f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6a06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d6a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d6a0e:	e7f0      	b.n	d69f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6a10:	6800      	ldr	r0, [r0, #0]
   d6a12:	2800      	cmp	r0, #0
   d6a14:	d0ee      	beq.n	d69f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6a16:	210c      	movs	r1, #12
   d6a18:	f004 f8a9 	bl	dab6e <_ZdlPvj>
   d6a1c:	e7ea      	b.n	d69f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM29CloudConfigUpdateSubscriptionFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6a1e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM29CloudConfigUpdateSubscriptionFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a1e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d6a20:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d6a22:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d6a24:	685c      	ldr	r4, [r3, #4]
   d6a26:	689d      	ldr	r5, [r3, #8]
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	6812      	ldr	r2, [r2, #0]
   d6a2c:	1066      	asrs	r6, r4, #1
   d6a2e:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d6a32:	07e4      	lsls	r4, r4, #31
   d6a34:	bf44      	itt	mi
   d6a36:	59ac      	ldrmi	r4, [r5, r6]
   d6a38:	58e3      	ldrmi	r3, [r4, r3]
      }
   d6a3a:	bc70      	pop	{r4, r5, r6}
   d6a3c:	4718      	bx	r3
	...

000d6a40 <_ZN11CloudConfigD1Ev>:

CloudConfig::CloudConfig() {

}

CloudConfig::~CloudConfig() {
   d6a40:	b510      	push	{r4, lr}
   d6a42:	4b06      	ldr	r3, [pc, #24]	; (d6a5c <_ZN11CloudConfigD1Ev+0x1c>)
   d6a44:	4604      	mov	r4, r0
   d6a46:	f840 3b24 	str.w	r3, [r0], #36
    class function<_Res(_ArgTypes...)>
   d6a4a:	f7fd fc61 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d6a4e:	f104 000c 	add.w	r0, r4, #12
   d6a52:	f7fd fc5d 	bl	d4310 <_ZNSt14_Function_baseD1Ev>

}
   d6a56:	4620      	mov	r0, r4
   d6a58:	bd10      	pop	{r4, pc}
   d6a5a:	bf00      	nop
   d6a5c:	000de0d8 	.word	0x000de0d8

000d6a60 <_ZN11CloudConfigD0Ev>:
CloudConfig::~CloudConfig() {
   d6a60:	b510      	push	{r4, lr}
   d6a62:	4604      	mov	r4, r0
}
   d6a64:	f7ff ffec 	bl	d6a40 <_ZN11CloudConfigD1Ev>
   d6a68:	4620      	mov	r0, r4
   d6a6a:	2138      	movs	r1, #56	; 0x38
   d6a6c:	f004 f87f 	bl	dab6e <_ZdlPvj>
   d6a70:	4620      	mov	r0, r4
   d6a72:	bd10      	pop	{r4, pc}

000d6a74 <_ZNK18CloudConfigStorage11hasJsonDataEv>:
    bool hasJsonData() const { return getJsonData()[0] != 0; };
   d6a74:	b508      	push	{r3, lr}
   d6a76:	6803      	ldr	r3, [r0, #0]
   d6a78:	685b      	ldr	r3, [r3, #4]
   d6a7a:	4798      	blx	r3
   d6a7c:	7800      	ldrb	r0, [r0, #0]
   d6a7e:	3800      	subs	r0, #0
   d6a80:	bf18      	it	ne
   d6a82:	2001      	movne	r0, #1
   d6a84:	bd08      	pop	{r3, pc}
	...

000d6a88 <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj>:
CloudConfigStorageData::CloudConfigStorageData(CloudConfigDataHeader *header, size_t dataSize) : header(header), dataSize(dataSize) {
   d6a88:	b510      	push	{r4, lr}
      : _M_ptr(0), _M_refcount()
   d6a8a:	2400      	movs	r4, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
        t_(nullptr) {
   d6a90:	60c4      	str	r4, [r0, #12]
   d6a92:	4c02      	ldr	r4, [pc, #8]	; (d6a9c <_ZN22CloudConfigStorageDataC1EP21CloudConfigDataHeaderj+0x14>)
   d6a94:	6004      	str	r4, [r0, #0]
   d6a96:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   d6a9a:	bd10      	pop	{r4, pc}
   d6a9c:	000de0ec 	.word	0x000de0ec

000d6aa0 <_ZN22CloudConfigStorageData8validateEv>:
void CloudConfigStorageData::validate() {
   d6aa0:	b570      	push	{r4, r5, r6, lr}
   d6aa2:	4604      	mov	r4, r0
    if (header->magic == CloudConfig::DATA_MAGIC &&
   d6aa4:	6900      	ldr	r0, [r0, #16]
   d6aa6:	4d11      	ldr	r5, [pc, #68]	; (d6aec <_ZN22CloudConfigStorageData8validateEv+0x4c>)
   d6aa8:	6802      	ldr	r2, [r0, #0]
   d6aaa:	42aa      	cmp	r2, r5
   d6aac:	d106      	bne.n	d6abc <_ZN22CloudConfigStorageData8validateEv+0x1c>
   d6aae:	7903      	ldrb	r3, [r0, #4]
   d6ab0:	2b14      	cmp	r3, #20
   d6ab2:	d103      	bne.n	d6abc <_ZN22CloudConfigStorageData8validateEv+0x1c>
        header->headerSize == (uint8_t)sizeof(CloudConfigDataHeader) &&
   d6ab4:	88c2      	ldrh	r2, [r0, #6]
   d6ab6:	8aa3      	ldrh	r3, [r4, #20]
   d6ab8:	429a      	cmp	r2, r3
   d6aba:	d011      	beq.n	d6ae0 <_ZN22CloudConfigStorageData8validateEv+0x40>
        memset(header, 0, sizeof(CloudConfigDataHeader));
   d6abc:	2614      	movs	r6, #20
   d6abe:	4632      	mov	r2, r6
   d6ac0:	2100      	movs	r1, #0
   d6ac2:	f004 fef1 	bl	db8a8 <memset>
        header->magic = CloudConfig::DATA_MAGIC;
   d6ac6:	6923      	ldr	r3, [r4, #16]
   d6ac8:	601d      	str	r5, [r3, #0]
        header->headerSize = (uint8_t)sizeof(CloudConfigDataHeader);
   d6aca:	6923      	ldr	r3, [r4, #16]
   d6acc:	711e      	strb	r6, [r3, #4]
        header->dataSize = (uint16_t)dataSize;
   d6ace:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d6ad2:	80da      	strh	r2, [r3, #6]
        memset(getJsonData(), 0, dataSize);
   d6ad4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   d6ad8:	2100      	movs	r1, #0
   d6ada:	4430      	add	r0, r6
   d6adc:	f004 fee4 	bl	db8a8 <memset>
    parse();
   d6ae0:	6823      	ldr	r3, [r4, #0]
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	68db      	ldr	r3, [r3, #12]
}
   d6ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    parse();
   d6aea:	4718      	bx	r3
   d6aec:	7251dd53 	.word	0x7251dd53

000d6af0 <_ZN11CloudConfigC1Ev>:
CloudConfig::CloudConfig() {
   d6af0:	4a05      	ldr	r2, [pc, #20]	; (d6b08 <_ZN11CloudConfigC1Ev+0x18>)
   d6af2:	6002      	str	r2, [r0, #0]
   d6af4:	2200      	movs	r2, #0
   d6af6:	e9c0 2201 	strd	r2, r2, [r0, #4]
   d6afa:	e9c0 2207 	strd	r2, r2, [r0, #28]
    _Function_base() : _M_manager(nullptr) { }
   d6afe:	6142      	str	r2, [r0, #20]
   d6b00:	62c2      	str	r2, [r0, #44]	; 0x2c
   d6b02:	6342      	str	r2, [r0, #52]	; 0x34
}
   d6b04:	4770      	bx	lr
   d6b06:	bf00      	nop
   d6b08:	000de0d8 	.word	0x000de0d8

000d6b0c <_ZN11CloudConfig8instanceEv>:
CloudConfig &CloudConfig::instance() {
   d6b0c:	b510      	push	{r4, lr}
    if (!_instance) {
   d6b0e:	4c06      	ldr	r4, [pc, #24]	; (d6b28 <_ZN11CloudConfig8instanceEv+0x1c>)
   d6b10:	6823      	ldr	r3, [r4, #0]
   d6b12:	b93b      	cbnz	r3, d6b24 <_ZN11CloudConfig8instanceEv+0x18>
        _instance = new CloudConfig();
   d6b14:	2038      	movs	r0, #56	; 0x38
   d6b16:	f7fd fabe 	bl	d4096 <_Znwj>
   d6b1a:	4603      	mov	r3, r0
   d6b1c:	b108      	cbz	r0, d6b22 <_ZN11CloudConfig8instanceEv+0x16>
   d6b1e:	f7ff ffe7 	bl	d6af0 <_ZN11CloudConfigC1Ev>
   d6b22:	6023      	str	r3, [r4, #0]
}
   d6b24:	6820      	ldr	r0, [r4, #0]
   d6b26:	bd10      	pop	{r4, pc}
   d6b28:	2003e5f4 	.word	0x2003e5f4

000d6b2c <_ZN29CloudConfigUpdateSubscription19subscriptionHandlerEPKcS1_>:

void CloudConfigUpdateSubscription::setup() {
    Particle.subscribe(eventName, &CloudConfigUpdateSubscription::subscriptionHandler, this);
}

void CloudConfigUpdateSubscription::subscriptionHandler(const char *eventName, const char *eventData) {
   d6b2c:	b507      	push	{r0, r1, r2, lr}
   d6b2e:	9201      	str	r2, [sp, #4]
    CloudConfig::instance().updateData(eventData);
   d6b30:	f7ff ffec 	bl	d6b0c <_ZN11CloudConfig8instanceEv>
   d6b34:	6803      	ldr	r3, [r0, #0]
   d6b36:	9901      	ldr	r1, [sp, #4]
   d6b38:	681b      	ldr	r3, [r3, #0]
}
   d6b3a:	b003      	add	sp, #12
   d6b3c:	f85d eb04 	ldr.w	lr, [sp], #4
    CloudConfig::instance().updateData(eventData);
   d6b40:	4718      	bx	r3

000d6b42 <_ZN11CloudConfig4loopEv>:
void CloudConfig::loop() {
   d6b42:	b510      	push	{r4, lr}
   d6b44:	4604      	mov	r4, r0
    storageMethod->loop();
   d6b46:	6840      	ldr	r0, [r0, #4]
   d6b48:	6803      	ldr	r3, [r0, #0]
   d6b4a:	691b      	ldr	r3, [r3, #16]
   d6b4c:	4798      	blx	r3
    if (updateMethod) {
   d6b4e:	68a0      	ldr	r0, [r4, #8]
   d6b50:	b110      	cbz	r0, d6b58 <_ZN11CloudConfig4loopEv+0x16>
        updateMethod->loop();
   d6b52:	6803      	ldr	r3, [r0, #0]
   d6b54:	685b      	ldr	r3, [r3, #4]
   d6b56:	4798      	blx	r3
    if (stateHandler) {
   d6b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6b5a:	b133      	cbz	r3, d6b6a <_ZN11CloudConfig4loopEv+0x28>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d6b5e:	4621      	mov	r1, r4
   d6b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   d6b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6b68:	4718      	bx	r3
   d6b6a:	bd10      	pop	{r4, pc}

000d6b6c <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>:

    // This is the subscription event name (hook-response)
    withEventName(eventName);
}

CloudConfigUpdateWebhook &CloudConfigUpdateWebhook::withEventName(const char *eventName) {
   d6b6c:	b510      	push	{r4, lr}
   d6b6e:	b08a      	sub	sp, #40	; 0x28
   d6b70:	4604      	mov	r4, r0
        return spark_deviceID();
   d6b72:	a806      	add	r0, sp, #24
   d6b74:	9101      	str	r1, [sp, #4]
   d6b76:	f002 f835 	bl	d8be4 <spark_deviceID>
    // Response Template:
    // {{PARTICLE_DEVICE_ID}}/hook-response/{{PARTICLE_EVENT_NAME}}
    String s = String::format("%s/hook-response/%s/", System.deviceID().c_str(), eventName);
   d6b7a:	9b01      	ldr	r3, [sp, #4]
   d6b7c:	9a06      	ldr	r2, [sp, #24]
   d6b7e:	4909      	ldr	r1, [pc, #36]	; (d6ba4 <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc+0x38>)
   d6b80:	a802      	add	r0, sp, #8
   d6b82:	f003 fb0d 	bl	da1a0 <_ZN6String6formatEPKcz>
   d6b86:	a806      	add	r0, sp, #24
   d6b88:	f003 fa1c 	bl	d9fc4 <_ZN6StringD1Ev>
    CloudConfigUpdateSubscription &withEventName(const char *eventName) { this->eventName = eventName; return *this; };
   d6b8c:	9902      	ldr	r1, [sp, #8]
   d6b8e:	f104 000c 	add.w	r0, r4, #12
   d6b92:	f003 fa90 	bl	da0b6 <_ZN6StringaSEPKc>
   d6b96:	a802      	add	r0, sp, #8
   d6b98:	f003 fa14 	bl	d9fc4 <_ZN6StringD1Ev>

    CloudConfigUpdateSubscription::withEventName(s);
    return *this;
}
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	b00a      	add	sp, #40	; 0x28
   d6ba0:	bd10      	pop	{r4, pc}
   d6ba2:	bf00      	nop
   d6ba4:	000ddfd4 	.word	0x000ddfd4

000d6ba8 <_ZN24CloudConfigUpdateWebhookC1EPKc>:
    CloudConfigUpdate() {};
   d6ba8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6bac:	f64e 2360 	movw	r3, #60000	; 0xea60
CloudConfigUpdateWebhook::CloudConfigUpdateWebhook(const char *eventName) {
   d6bb0:	b570      	push	{r4, r5, r6, lr}
   d6bb2:	e9c0 2301 	strd	r2, r3, [r0, #4]
   d6bb6:	4604      	mov	r4, r0
    CloudConfigUpdateSubscription() {};
   d6bb8:	4b0c      	ldr	r3, [pc, #48]	; (d6bec <_ZN24CloudConfigUpdateWebhookC1EPKc+0x44>)
   d6bba:	f840 3b0c 	str.w	r3, [r0], #12
   d6bbe:	460d      	mov	r5, r1
   d6bc0:	4626      	mov	r6, r4
   d6bc2:	490b      	ldr	r1, [pc, #44]	; (d6bf0 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d6bc4:	f003 fa49 	bl	da05a <_ZN6StringC1EPKc>
   d6bc8:	4b0a      	ldr	r3, [pc, #40]	; (d6bf4 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x4c>)
   d6bca:	f846 3b1c 	str.w	r3, [r6], #28
   d6bce:	4908      	ldr	r1, [pc, #32]	; (d6bf0 <_ZN24CloudConfigUpdateWebhookC1EPKc+0x48>)
   d6bd0:	4630      	mov	r0, r6
   d6bd2:	f003 fa42 	bl	da05a <_ZN6StringC1EPKc>
    requestEventName = eventName;
   d6bd6:	4629      	mov	r1, r5
   d6bd8:	4630      	mov	r0, r6
   d6bda:	f003 fa6c 	bl	da0b6 <_ZN6StringaSEPKc>
    withEventName(eventName);
   d6bde:	4629      	mov	r1, r5
   d6be0:	4620      	mov	r0, r4
   d6be2:	f7ff ffc3 	bl	d6b6c <_ZN24CloudConfigUpdateWebhook13withEventNameEPKc>
}
   d6be6:	4620      	mov	r0, r4
   d6be8:	bd70      	pop	{r4, r5, r6, pc}
   d6bea:	bf00      	nop
   d6bec:	000de134 	.word	0x000de134
   d6bf0:	000de5f4 	.word	0x000de5f4
   d6bf4:	000de118 	.word	0x000de118

000d6bf8 <_ZNKSt8functionIFvvEEclEv>:
      if (_M_empty())
   d6bf8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6bfa:	b510      	push	{r4, lr}
      if (_M_empty())
   d6bfc:	b90a      	cbnz	r2, d6c02 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d6bfe:	f003 ffbc 	bl	dab7a <_ZSt25__throw_bad_function_callv>
    }
   d6c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c06:	68c3      	ldr	r3, [r0, #12]
   d6c08:	4718      	bx	r3
	...

000d6c0c <_ZN11CloudConfig10updateDataEPKc>:
bool CloudConfig::updateData(const char *json) {
   d6c0c:	b538      	push	{r3, r4, r5, lr}
   d6c0e:	4604      	mov	r4, r0
    Log.info("updateData called %s", json);
   d6c10:	460a      	mov	r2, r1
   d6c12:	480a      	ldr	r0, [pc, #40]	; (d6c3c <_ZN11CloudConfig10updateDataEPKc+0x30>)
bool CloudConfig::updateData(const char *json) {
   d6c14:	460d      	mov	r5, r1
    Log.info("updateData called %s", json);
   d6c16:	490a      	ldr	r1, [pc, #40]	; (d6c40 <_ZN11CloudConfig10updateDataEPKc+0x34>)
   d6c18:	f7fd fbfe 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
    if (storageMethod) {
   d6c1c:	6860      	ldr	r0, [r4, #4]
    updateDataStatus = UpdateDataStatus::SUCCESS;
   d6c1e:	2302      	movs	r3, #2
   d6c20:	6223      	str	r3, [r4, #32]
    if (storageMethod) {
   d6c22:	b148      	cbz	r0, d6c38 <_ZN11CloudConfig10updateDataEPKc+0x2c>
        storageMethod->updateData(json);
   d6c24:	6803      	ldr	r3, [r0, #0]
   d6c26:	4629      	mov	r1, r5
   d6c28:	695b      	ldr	r3, [r3, #20]
   d6c2a:	4798      	blx	r3
        if (dataCallback) {
   d6c2c:	6963      	ldr	r3, [r4, #20]
   d6c2e:	b11b      	cbz	r3, d6c38 <_ZN11CloudConfig10updateDataEPKc+0x2c>
            dataCallback();
   d6c30:	f104 000c 	add.w	r0, r4, #12
   d6c34:	f7ff ffe0 	bl	d6bf8 <_ZNKSt8functionIFvvEEclEv>
}
   d6c38:	2001      	movs	r0, #1
   d6c3a:	bd38      	pop	{r3, r4, r5, pc}
   d6c3c:	2003e614 	.word	0x2003e614
   d6c40:	000ddfe9 	.word	0x000ddfe9

000d6c44 <_ZN24CloudConfigUpdateWebhook11startUpdateEv>:

void CloudConfigUpdateWebhook::startUpdate() {
   d6c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6c46:	4604      	mov	r4, r0
    Log.info("CloudConfigUpdateWebhook::startUpdate %s", requestEventName.c_str());
   d6c48:	69c2      	ldr	r2, [r0, #28]
   d6c4a:	4909      	ldr	r1, [pc, #36]	; (d6c70 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x2c>)
   d6c4c:	4809      	ldr	r0, [pc, #36]	; (d6c74 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x30>)
   d6c4e:	f7fd fbe3 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6c52:	4b09      	ldr	r3, [pc, #36]	; (d6c78 <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x34>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6c54:	4a09      	ldr	r2, [pc, #36]	; (d6c7c <_ZN24CloudConfigUpdateWebhook11startUpdateEv+0x38>)
   d6c56:	781b      	ldrb	r3, [r3, #0]
   d6c58:	69e1      	ldr	r1, [r4, #28]
   d6c5a:	f88d 3000 	strb.w	r3, [sp]
   d6c5e:	a802      	add	r0, sp, #8
   d6c60:	233c      	movs	r3, #60	; 0x3c
   d6c62:	f002 fa5f 	bl	d9124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   d6c66:	a803      	add	r0, sp, #12
   d6c68:	f7fe fcd6 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    Particle.publish(requestEventName, "");
}
   d6c6c:	b004      	add	sp, #16
   d6c6e:	bd10      	pop	{r4, pc}
   d6c70:	000ddffe 	.word	0x000ddffe
   d6c74:	2003e614 	.word	0x2003e614
   d6c78:	2003e5f0 	.word	0x2003e5f0
   d6c7c:	000de5f4 	.word	0x000de5f4

000d6c80 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6c80:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6c82:	2300      	movs	r3, #0
   d6c84:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6c86:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6c88:	4604      	mov	r4, r0
   d6c8a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6c8c:	b12b      	cbz	r3, d6c9a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6c8e:	2202      	movs	r2, #2
   d6c90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6c92:	68eb      	ldr	r3, [r5, #12]
   d6c94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6c96:	68ab      	ldr	r3, [r5, #8]
   d6c98:	60a3      	str	r3, [r4, #8]
    }
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ca0 <_ZN29CloudConfigUpdateSubscription5setupEv>:
void CloudConfigUpdateSubscription::setup() {
   d6ca0:	b570      	push	{r4, r5, r6, lr}
   d6ca2:	b08a      	sub	sp, #40	; 0x28
        operator const char*() const { return c_str(); }
   d6ca4:	68c6      	ldr	r6, [r0, #12]
   d6ca6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6ca8:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6caa:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d6cac:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cae:	f7fd f9f2 	bl	d4096 <_Znwj>
   d6cb2:	b118      	cbz	r0, d6cbc <_ZN29CloudConfigUpdateSubscription5setupEv+0x1c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6cb4:	4b13      	ldr	r3, [pc, #76]	; (d6d04 <_ZN29CloudConfigUpdateSubscription5setupEv+0x64>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6cb6:	6084      	str	r4, [r0, #8]
   d6cb8:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d6cbc:	4b12      	ldr	r3, [pc, #72]	; (d6d08 <_ZN29CloudConfigUpdateSubscription5setupEv+0x68>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cbe:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6cc0:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d6cc2:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d6cc4:	4b11      	ldr	r3, [pc, #68]	; (d6d0c <_ZN29CloudConfigUpdateSubscription5setupEv+0x6c>)
   d6cc6:	9304      	str	r3, [sp, #16]
   d6cc8:	a806      	add	r0, sp, #24
   d6cca:	f7ff ffd9 	bl	d6c80 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d6cce:	9b08      	ldr	r3, [sp, #32]
   d6cd0:	b183      	cbz	r3, d6cf4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d6cd2:	2010      	movs	r0, #16
   d6cd4:	f7fd f9df 	bl	d4096 <_Znwj>
   d6cd8:	4604      	mov	r4, r0
   d6cda:	b158      	cbz	r0, d6cf4 <_ZN29CloudConfigUpdateSubscription5setupEv+0x54>
   d6cdc:	a906      	add	r1, sp, #24
   d6cde:	f7ff ffcf 	bl	d6c80 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	e9cd 3300 	strd	r3, r3, [sp]
   d6ce8:	4909      	ldr	r1, [pc, #36]	; (d6d10 <_ZN29CloudConfigUpdateSubscription5setupEv+0x70>)
   d6cea:	2301      	movs	r3, #1
   d6cec:	4622      	mov	r2, r4
   d6cee:	4630      	mov	r0, r6
   d6cf0:	f001 ff88 	bl	d8c04 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d6cf4:	a806      	add	r0, sp, #24
   d6cf6:	f7fd fb0b 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d6cfa:	a802      	add	r0, sp, #8
   d6cfc:	f7fd fb08 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
}
   d6d00:	b00a      	add	sp, #40	; 0x28
   d6d02:	bd70      	pop	{r4, r5, r6, pc}
   d6d04:	000d6b2d 	.word	0x000d6b2d
   d6d08:	000d6a1f 	.word	0x000d6a1f
   d6d0c:	000d69e1 	.word	0x000d69e1
   d6d10:	000d8f23 	.word	0x000d8f23

000d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6d14:	680b      	ldr	r3, [r1, #0]
   d6d16:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6d18:	b113      	cbz	r3, d6d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6d1a:	685a      	ldr	r2, [r3, #4]
   d6d1c:	3201      	adds	r2, #1
   d6d1e:	605a      	str	r2, [r3, #4]
      }
   d6d20:	4770      	bx	lr

000d6d22 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6d22:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6d24:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d26:	f851 3b04 	ldr.w	r3, [r1], #4
   d6d2a:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6d2c:	4604      	mov	r4, r0
   d6d2e:	a801      	add	r0, sp, #4
   d6d30:	f7ff fff0 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6d34:	466a      	mov	r2, sp
   d6d36:	4629      	mov	r1, r5
   d6d38:	4620      	mov	r0, r4
   d6d3a:	f002 feaf 	bl	d9a9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6d3e:	a801      	add	r0, sp, #4
   d6d40:	f7fe fc6a 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d44:	4620      	mov	r0, r4
   d6d46:	b003      	add	sp, #12
   d6d48:	bd30      	pop	{r4, r5, pc}

000d6d4a <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc>:
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6d4a:	b570      	push	{r4, r5, r6, lr}
   d6d4c:	b08c      	sub	sp, #48	; 0x30
   d6d4e:	4604      	mov	r4, r0
    JSONObjectIterator iter(parentObj);
   d6d50:	a806      	add	r0, sp, #24
JSONValue CloudConfigStorage::getJSONValueForKey(JSONValue parentObj, const char *key) {
   d6d52:	4616      	mov	r6, r2
    JSONObjectIterator iter(parentObj);
   d6d54:	f7ff ffe5 	bl	d6d22 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while(iter.next()) {
   d6d58:	a806      	add	r0, sp, #24
   d6d5a:	f002 feb7 	bl	d9acc <_ZN5spark18JSONObjectIterator4nextEv>
   d6d5e:	2800      	cmp	r0, #0
   d6d60:	d02d      	beq.n	d6dbe <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x74>
    return JSONString(k_, d_);
   d6d62:	9d09      	ldr	r5, [sp, #36]	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d64:	9b06      	ldr	r3, [sp, #24]
   d6d66:	9300      	str	r3, [sp, #0]
   d6d68:	a907      	add	r1, sp, #28
   d6d6a:	a801      	add	r0, sp, #4
   d6d6c:	f7ff ffd2 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6d70:	4629      	mov	r1, r5
   d6d72:	466a      	mov	r2, sp
   d6d74:	a802      	add	r0, sp, #8
   d6d76:	f002 fe6d 	bl	d9a54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6d7a:	a801      	add	r0, sp, #4
   d6d7c:	f7fe fc4c 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (strcmp((const char *)iter.name(), key) == 0) {
   d6d80:	9804      	ldr	r0, [sp, #16]
   d6d82:	4631      	mov	r1, r6
   d6d84:	f004 fdbc 	bl	db900 <strcmp>
   d6d88:	4605      	mov	r5, r0
   d6d8a:	a803      	add	r0, sp, #12
   d6d8c:	f7fe fc44 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d90:	2d00      	cmp	r5, #0
   d6d92:	d1e1      	bne.n	d6d58 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0xe>
    return JSONValue(v_, d_);
   d6d94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d96:	9b06      	ldr	r3, [sp, #24]
   d6d98:	9302      	str	r3, [sp, #8]
   d6d9a:	a907      	add	r1, sp, #28
   d6d9c:	a803      	add	r0, sp, #12
   d6d9e:	f7ff ffb9 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6da2:	aa02      	add	r2, sp, #8
   d6da4:	4629      	mov	r1, r5
   d6da6:	4620      	mov	r0, r4
   d6da8:	f002 fd3e 	bl	d9828 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6dac:	a803      	add	r0, sp, #12
   d6dae:	f7fe fc33 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6db2:	a807      	add	r0, sp, #28
   d6db4:	f7fe fc30 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6db8:	4620      	mov	r0, r4
   d6dba:	b00c      	add	sp, #48	; 0x30
   d6dbc:	bd70      	pop	{r4, r5, r6, pc}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6dbe:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
   d6dc2:	60a0      	str	r0, [r4, #8]
}
   d6dc4:	e7f5      	b.n	d6db2 <_ZN18CloudConfigStorage18getJSONValueForKeyEN5spark9JSONValueEPKc+0x68>
	...

000d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6dc8:	b510      	push	{r4, lr}
   d6dca:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6dce:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6dd0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6dd2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6dd4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6dd6:	b90a      	cbnz	r2, d6ddc <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6dd8:	07d9      	lsls	r1, r3, #31
   d6dda:	d505      	bpl.n	d6de8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6de0:	4b0f      	ldr	r3, [pc, #60]	; (d6e20 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6de2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6de4:	4b0f      	ldr	r3, [pc, #60]	; (d6e24 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6de6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6de8:	ab02      	add	r3, sp, #8
   d6dea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6dee:	466a      	mov	r2, sp
   d6df0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6df4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6df8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e00:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e02:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e06:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e08:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e0a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e0c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6e0e:	4618      	mov	r0, r3
   d6e10:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e12:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6e14:	9105      	str	r1, [sp, #20]
   d6e16:	f7fd fa7b 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	}
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	b006      	add	sp, #24
   d6e1e:	bd10      	pop	{r4, pc}
   d6e20:	000d69c3 	.word	0x000d69c3
   d6e24:	000d6913 	.word	0x000d6913

000d6e28 <_ZN11CloudConfig5setupEv>:
void CloudConfig::setup() {
   d6e28:	b513      	push	{r0, r1, r4, lr}
   d6e2a:	4604      	mov	r4, r0
    if (!storageMethod) {
   d6e2c:	6840      	ldr	r0, [r0, #4]
   d6e2e:	b180      	cbz	r0, d6e52 <_ZN11CloudConfig5setupEv+0x2a>
    storageMethod->setup();
   d6e30:	6803      	ldr	r3, [r0, #0]
   d6e32:	689b      	ldr	r3, [r3, #8]
   d6e34:	4798      	blx	r3
    if (updateMethod) {
   d6e36:	68a0      	ldr	r0, [r4, #8]
   d6e38:	b158      	cbz	r0, d6e52 <_ZN11CloudConfig5setupEv+0x2a>
        updateMethod->setup();
   d6e3a:	6803      	ldr	r3, [r0, #0]
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	4798      	blx	r3
        stateHandler = &CloudConfig::stateStart;
   d6e40:	4b05      	ldr	r3, [pc, #20]	; (d6e58 <_ZN11CloudConfig5setupEv+0x30>)
   d6e42:	9300      	str	r3, [sp, #0]
   d6e44:	4669      	mov	r1, sp
   d6e46:	2300      	movs	r3, #0
   d6e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6e4c:	9301      	str	r3, [sp, #4]
   d6e4e:	f7ff ffbb 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6e52:	b002      	add	sp, #8
   d6e54:	bd10      	pop	{r4, pc}
   d6e56:	bf00      	nop
   d6e58:	000d6e5d 	.word	0x000d6e5d

000d6e5c <_ZN11CloudConfig10stateStartEv>:
void CloudConfig::stateStart() {
   d6e5c:	b513      	push	{r0, r1, r4, lr}
   d6e5e:	4604      	mov	r4, r0
    if (storageMethod->hasJsonData() && dataCallback) {
   d6e60:	6840      	ldr	r0, [r0, #4]
   d6e62:	f7ff fe07 	bl	d6a74 <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6e66:	b128      	cbz	r0, d6e74 <_ZN11CloudConfig10stateStartEv+0x18>
   d6e68:	6963      	ldr	r3, [r4, #20]
   d6e6a:	b11b      	cbz	r3, d6e74 <_ZN11CloudConfig10stateStartEv+0x18>
        dataCallback();
   d6e6c:	f104 000c 	add.w	r0, r4, #12
   d6e70:	f7ff fec2 	bl	d6bf8 <_ZNKSt8functionIFvvEEclEv>
    stateHandler = &CloudConfig::stateWaitCloudConnected;
   d6e74:	4b05      	ldr	r3, [pc, #20]	; (d6e8c <_ZN11CloudConfig10stateStartEv+0x30>)
   d6e76:	9300      	str	r3, [sp, #0]
   d6e78:	4669      	mov	r1, sp
   d6e7a:	2300      	movs	r3, #0
   d6e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	f7ff ffa1 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6e86:	b002      	add	sp, #8
   d6e88:	bd10      	pop	{r4, pc}
   d6e8a:	bf00      	nop
   d6e8c:	000d6e91 	.word	0x000d6e91

000d6e90 <_ZN11CloudConfig23stateWaitCloudConnectedEv>:
void CloudConfig::stateWaitCloudConnected() {
   d6e90:	b513      	push	{r0, r1, r4, lr}
   d6e92:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e94:	f001 fe9e 	bl	d8bd4 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d6e98:	b190      	cbz	r0, d6ec0 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
   d6e9a:	f003 fb17 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d6e9e:	b178      	cbz	r0, d6ec0 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x30>
    Log.info("cloud connected");
   d6ea0:	4908      	ldr	r1, [pc, #32]	; (d6ec4 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x34>)
   d6ea2:	4809      	ldr	r0, [pc, #36]	; (d6ec8 <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x38>)
   d6ea4:	f7fd fab8 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &CloudConfig::stateWaitAfterCloudConnected;
   d6ea8:	4b08      	ldr	r3, [pc, #32]	; (d6ecc <_ZN11CloudConfig23stateWaitCloudConnectedEv+0x3c>)
   d6eaa:	9300      	str	r3, [sp, #0]
   d6eac:	4669      	mov	r1, sp
   d6eae:	2300      	movs	r3, #0
   d6eb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	f7ff ff87 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6eba:	f001 fc8d 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d6ebe:	6360      	str	r0, [r4, #52]	; 0x34
}
   d6ec0:	b002      	add	sp, #8
   d6ec2:	bd10      	pop	{r4, pc}
   d6ec4:	000de027 	.word	0x000de027
   d6ec8:	2003e614 	.word	0x2003e614
   d6ecc:	000d6ed1 	.word	0x000d6ed1

000d6ed0 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv>:
void CloudConfig::stateWaitAfterCloudConnected() {
   d6ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6ed2:	4604      	mov	r4, r0
   d6ed4:	f001 fc80 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < updateMethod->waitAfterCloudConnectedMs) {
   d6ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6eda:	1ac0      	subs	r0, r0, r3
   d6edc:	68a3      	ldr	r3, [r4, #8]
   d6ede:	685b      	ldr	r3, [r3, #4]
   d6ee0:	4298      	cmp	r0, r3
   d6ee2:	d317      	bcc.n	d6f14 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x44>
    if (!storageMethod->hasJsonData() || updateFrequency == UPDATE_AT_RESTART) {
   d6ee4:	6860      	ldr	r0, [r4, #4]
   d6ee6:	f7ff fdc5 	bl	d6a74 <_ZNK18CloudConfigStorage11hasJsonDataEv>
   d6eea:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d6eee:	b198      	cbz	r0, d6f18 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
   d6ef0:	69e3      	ldr	r3, [r4, #28]
   d6ef2:	3301      	adds	r3, #1
   d6ef4:	d010      	beq.n	d6f18 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x48>
        Log.info("wait for update");
   d6ef6:	490b      	ldr	r1, [pc, #44]	; (d6f24 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x54>)
   d6ef8:	480b      	ldr	r0, [pc, #44]	; (d6f28 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6efa:	f7fd fa8d 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
   d6efe:	f001 fc6b 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &CloudConfig::stateWaitToUpdate;
   d6f02:	4b0a      	ldr	r3, [pc, #40]	; (d6f2c <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x5c>)
        stateTime = millis();
   d6f04:	6360      	str	r0, [r4, #52]	; 0x34
        stateHandler = &CloudConfig::stateStartUpdate;
   d6f06:	9300      	str	r3, [sp, #0]
   d6f08:	4669      	mov	r1, sp
   d6f0a:	2300      	movs	r3, #0
   d6f0c:	4628      	mov	r0, r5
   d6f0e:	9301      	str	r3, [sp, #4]
   d6f10:	f7ff ff5a 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6f14:	b003      	add	sp, #12
   d6f16:	bd30      	pop	{r4, r5, pc}
        Log.info("no data or update at restart");
   d6f18:	4905      	ldr	r1, [pc, #20]	; (d6f30 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x60>)
   d6f1a:	4803      	ldr	r0, [pc, #12]	; (d6f28 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x58>)
   d6f1c:	f7fd fa7c 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &CloudConfig::stateStartUpdate;
   d6f20:	4b04      	ldr	r3, [pc, #16]	; (d6f34 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x64>)
   d6f22:	e7f0      	b.n	d6f06 <_ZN11CloudConfig28stateWaitAfterCloudConnectedEv+0x36>
   d6f24:	000de037 	.word	0x000de037
   d6f28:	2003e614 	.word	0x2003e614
   d6f2c:	000d6f39 	.word	0x000d6f39
   d6f30:	000de047 	.word	0x000de047
   d6f34:	000d6f9d 	.word	0x000d6f9d

000d6f38 <_ZN11CloudConfig17stateWaitToUpdateEv>:
void CloudConfig::stateWaitToUpdate() {
   d6f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f3a:	4604      	mov	r4, r0
   d6f3c:	f001 fc4c 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d6f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6f42:	1ac0      	subs	r0, r0, r3
   d6f44:	f242 730f 	movw	r3, #9999	; 0x270f
   d6f48:	4298      	cmp	r0, r3
   d6f4a:	d91e      	bls.n	d6f8a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
    if (Time.isValid() && updateFrequency > 0) {
   d6f4c:	f003 fabe 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d6f50:	b1d8      	cbz	r0, d6f8a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
   d6f52:	69e3      	ldr	r3, [r4, #28]
   d6f54:	2b00      	cmp	r3, #0
   d6f56:	dd18      	ble.n	d6f8a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
        if (Time.now() - storageMethod->getDataHeader()->lastCheck > updateFrequency) {
   d6f58:	f003 fad5 	bl	da506 <_ZN9TimeClass3nowEv>
   d6f5c:	4605      	mov	r5, r0
   d6f5e:	6860      	ldr	r0, [r4, #4]
   d6f60:	6803      	ldr	r3, [r0, #0]
   d6f62:	681b      	ldr	r3, [r3, #0]
   d6f64:	4798      	blx	r3
   d6f66:	6880      	ldr	r0, [r0, #8]
   d6f68:	69e3      	ldr	r3, [r4, #28]
   d6f6a:	1a2d      	subs	r5, r5, r0
   d6f6c:	429d      	cmp	r5, r3
   d6f6e:	dd0c      	ble.n	d6f8a <_ZN11CloudConfig17stateWaitToUpdateEv+0x52>
            Log.info("checking for time update");
   d6f70:	4907      	ldr	r1, [pc, #28]	; (d6f90 <_ZN11CloudConfig17stateWaitToUpdateEv+0x58>)
   d6f72:	4808      	ldr	r0, [pc, #32]	; (d6f94 <_ZN11CloudConfig17stateWaitToUpdateEv+0x5c>)
   d6f74:	f7fd fa50 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
            stateHandler = &CloudConfig::stateStartUpdate;
   d6f78:	4b07      	ldr	r3, [pc, #28]	; (d6f98 <_ZN11CloudConfig17stateWaitToUpdateEv+0x60>)
   d6f7a:	9300      	str	r3, [sp, #0]
   d6f7c:	4669      	mov	r1, sp
   d6f7e:	2300      	movs	r3, #0
   d6f80:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	f7ff ff1f 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6f8a:	b003      	add	sp, #12
   d6f8c:	bd30      	pop	{r4, r5, pc}
   d6f8e:	bf00      	nop
   d6f90:	000de064 	.word	0x000de064
   d6f94:	2003e614 	.word	0x2003e614
   d6f98:	000d6f9d 	.word	0x000d6f9d

000d6f9c <_ZN11CloudConfig16stateStartUpdateEv>:
void CloudConfig::stateStartUpdate() {
   d6f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f9e:	4604      	mov	r4, r0
    Log.info("stateStartUpdate");
   d6fa0:	490f      	ldr	r1, [pc, #60]	; (d6fe0 <_ZN11CloudConfig16stateStartUpdateEv+0x44>)
   d6fa2:	4810      	ldr	r0, [pc, #64]	; (d6fe4 <_ZN11CloudConfig16stateStartUpdateEv+0x48>)
   d6fa4:	f7fd fa38 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6fa8:	6860      	ldr	r0, [r4, #4]
   d6faa:	6803      	ldr	r3, [r0, #0]
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	4798      	blx	r3
   d6fb0:	4605      	mov	r5, r0
   d6fb2:	f003 faa8 	bl	da506 <_ZN9TimeClass3nowEv>
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6fb6:	2301      	movs	r3, #1
    storageMethod->getDataHeader()->lastCheck = Time.now();
   d6fb8:	60a8      	str	r0, [r5, #8]
    updateDataStatus = UpdateDataStatus::IN_PROGRESS;
   d6fba:	6223      	str	r3, [r4, #32]
   d6fbc:	f001 fc0c 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6fc0:	4b09      	ldr	r3, [pc, #36]	; (d6fe8 <_ZN11CloudConfig16stateStartUpdateEv+0x4c>)
    stateTime = millis();
   d6fc2:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitUpdateComplete;
   d6fc4:	9300      	str	r3, [sp, #0]
   d6fc6:	4669      	mov	r1, sp
   d6fc8:	2300      	movs	r3, #0
   d6fca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6fce:	9301      	str	r3, [sp, #4]
   d6fd0:	f7ff fefa 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    updateMethod->startUpdate();
   d6fd4:	68a0      	ldr	r0, [r4, #8]
   d6fd6:	6803      	ldr	r3, [r0, #0]
   d6fd8:	689b      	ldr	r3, [r3, #8]
   d6fda:	4798      	blx	r3
}
   d6fdc:	b003      	add	sp, #12
   d6fde:	bd30      	pop	{r4, r5, pc}
   d6fe0:	000de07d 	.word	0x000de07d
   d6fe4:	2003e614 	.word	0x2003e614
   d6fe8:	000d6fed 	.word	0x000d6fed

000d6fec <_ZN11CloudConfig23stateWaitUpdateCompleteEv>:
void CloudConfig::stateWaitUpdateComplete() {
   d6fec:	b513      	push	{r0, r1, r4, lr}
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6fee:	6a03      	ldr	r3, [r0, #32]
   d6ff0:	2b01      	cmp	r3, #1
void CloudConfig::stateWaitUpdateComplete() {
   d6ff2:	4604      	mov	r4, r0
    if (updateDataStatus == UpdateDataStatus::IN_PROGRESS) {
   d6ff4:	d11b      	bne.n	d702e <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x42>
   d6ff6:	f001 fbef 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime > updateMethod->updateTimeoutMs) {
   d6ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6ffc:	1ac0      	subs	r0, r0, r3
   d6ffe:	68a3      	ldr	r3, [r4, #8]
   d7000:	689b      	ldr	r3, [r3, #8]
   d7002:	4298      	cmp	r0, r3
   d7004:	d911      	bls.n	d702a <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x3e>
            Log.info("stateWaitUpdateComplete timeout");
   d7006:	490c      	ldr	r1, [pc, #48]	; (d7038 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x4c>)
   d7008:	480c      	ldr	r0, [pc, #48]	; (d703c <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d700a:	f7fd fa05 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
            updateDataStatus = UpdateDataStatus::TIMEOUT;
   d700e:	2304      	movs	r3, #4
   d7010:	6223      	str	r3, [r4, #32]
   d7012:	f001 fbe1 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d7016:	4b0a      	ldr	r3, [pc, #40]	; (d7040 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x54>)
    stateTime = millis();
   d7018:	6360      	str	r0, [r4, #52]	; 0x34
    stateHandler = &CloudConfig::stateWaitToUpdate;
   d701a:	9300      	str	r3, [sp, #0]
   d701c:	4669      	mov	r1, sp
   d701e:	2300      	movs	r3, #0
   d7020:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	f7ff fecf 	bl	d6dc8 <_ZNSt8functionIFvR11CloudConfigEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d702a:	b002      	add	sp, #8
   d702c:	bd10      	pop	{r4, pc}
    Log.info("stateWaitUpdateComplete complete");
   d702e:	4905      	ldr	r1, [pc, #20]	; (d7044 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x58>)
   d7030:	4802      	ldr	r0, [pc, #8]	; (d703c <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x50>)
   d7032:	f7fd f9f1 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
   d7036:	e7ec      	b.n	d7012 <_ZN11CloudConfig23stateWaitUpdateCompleteEv+0x26>
   d7038:	000de08e 	.word	0x000de08e
   d703c:	2003e614 	.word	0x2003e614
   d7040:	000d6f39 	.word	0x000d6f39
   d7044:	000de0ae 	.word	0x000de0ae

000d7048 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE>:
        val_(val) {
   d7048:	4b01      	ldr	r3, [pc, #4]	; (d7050 <_GLOBAL__sub_I__ZN11CloudConfig9_instanceE+0x8>)
   d704a:	2200      	movs	r2, #0
   d704c:	701a      	strb	r2, [r3, #0]
}
   d704e:	4770      	bx	lr
   d7050:	2003e5f0 	.word	0x2003e5f0

000d7054 <_ZN16DeviceNameHelper4saveEv>:
}


void DeviceNameHelper::save() {
    // Overridden by DeviceNameHelperEEPROM
}
   d7054:	4770      	bx	lr

000d7056 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7056:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7058:	4603      	mov	r3, r0
	switch (__op)
   d705a:	d102      	bne.n	d7062 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d705c:	6001      	str	r1, [r0, #0]
      }
   d705e:	2000      	movs	r0, #0
   d7060:	4770      	bx	lr
	  switch (__op)
   d7062:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7064:	bf04      	itt	eq
   d7066:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d706a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d706e:	e7f6      	b.n	d705e <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7070 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_>:
    }
}



void DeviceNameHelper::subscriptionHandler(const char *eventName, const char *eventData) {
   d7070:	b513      	push	{r0, r1, r4, lr}
   d7072:	4604      	mov	r4, r0

    if (strlen(eventData) < DEVICENAMEHELPER_MAX_NAME_LEN) {
   d7074:	4610      	mov	r0, r2
   d7076:	9201      	str	r2, [sp, #4]
   d7078:	f004 fc71 	bl	db95e <strlen>
   d707c:	6863      	ldr	r3, [r4, #4]
   d707e:	9901      	ldr	r1, [sp, #4]
   d7080:	4602      	mov	r2, r0
   d7082:	2a1e      	cmp	r2, #30
   d7084:	f103 000c 	add.w	r0, r3, #12
   d7088:	d806      	bhi.n	d7098 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x28>
        // Fits
        strcpy(data->name, eventData);
   d708a:	f004 fc43 	bl	db914 <strcpy>
    else {
        // Need to truncate
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
    }
    gotResponse = true;
   d708e:	2301      	movs	r3, #1
   d7090:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   d7094:	b002      	add	sp, #8
   d7096:	bd10      	pop	{r4, pc}
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
   d7098:	221f      	movs	r2, #31
   d709a:	f004 fc7a 	bl	db992 <strncpy>
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
   d709e:	6863      	ldr	r3, [r4, #4]
   d70a0:	2200      	movs	r2, #0
   d70a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   d70a6:	e7f2      	b.n	d708e <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x1e>

000d70a8 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d70a8:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d70aa:	6842      	ldr	r2, [r0, #4]
   d70ac:	4603      	mov	r3, r0
   d70ae:	1054      	asrs	r4, r2, #1
   d70b0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d70b4:	07d2      	lsls	r2, r2, #31
   d70b6:	bf48      	it	mi
   d70b8:	590a      	ldrmi	r2, [r1, r4]
   d70ba:	681b      	ldr	r3, [r3, #0]
      }
   d70bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   d70c0:	bf48      	it	mi
   d70c2:	58d3      	ldrmi	r3, [r2, r3]
   d70c4:	4718      	bx	r3

000d70c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d70c6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d70c8:	b538      	push	{r3, r4, r5, lr}
   d70ca:	4604      	mov	r4, r0
	  switch (__op)
   d70cc:	d007      	beq.n	d70de <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d70ce:	2a03      	cmp	r2, #3
   d70d0:	d011      	beq.n	d70f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d70d2:	2a01      	cmp	r2, #1
   d70d4:	d101      	bne.n	d70da <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d70d6:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d70d8:	6023      	str	r3, [r4, #0]
	}
   d70da:	2000      	movs	r0, #0
   d70dc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d70de:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d70e0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d70e2:	f7fc ffd8 	bl	d4096 <_Znwj>
   d70e6:	4603      	mov	r3, r0
   d70e8:	2800      	cmp	r0, #0
   d70ea:	d0f5      	beq.n	d70d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d70ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d70f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d70f4:	e7f0      	b.n	d70d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d70f6:	6800      	ldr	r0, [r0, #0]
   d70f8:	2800      	cmp	r0, #0
   d70fa:	d0ee      	beq.n	d70da <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d70fc:	210c      	movs	r1, #12
   d70fe:	f003 fd36 	bl	dab6e <_ZdlPvj>
   d7102:	e7ea      	b.n	d70da <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d7104 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM16DeviceNameHelperFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7104:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d7106:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
   d7108:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d710a:	685c      	ldr	r4, [r3, #4]
   d710c:	689d      	ldr	r5, [r3, #8]
   d710e:	681b      	ldr	r3, [r3, #0]
   d7110:	6812      	ldr	r2, [r2, #0]
   d7112:	1066      	asrs	r6, r4, #1
   d7114:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d7118:	07e4      	lsls	r4, r4, #31
   d711a:	bf44      	itt	mi
   d711c:	59ac      	ldrmi	r4, [r5, r6]
   d711e:	58e3      	ldrmi	r3, [r4, r3]
      }
   d7120:	bc70      	pop	{r4, r5, r6}
   d7122:	4718      	bx	r3

000d7124 <_ZN16DeviceNameHelperD1Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d7124:	b510      	push	{r4, lr}
   d7126:	4b06      	ldr	r3, [pc, #24]	; (d7140 <_ZN16DeviceNameHelperD1Ev+0x1c>)
   d7128:	4604      	mov	r4, r0
   d712a:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d712e:	f7fd f8ef 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d7132:	f104 0010 	add.w	r0, r4, #16
   d7136:	f7fd f8eb 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
}
   d713a:	4620      	mov	r0, r4
   d713c:	bd10      	pop	{r4, pc}
   d713e:	bf00      	nop
   d7140:	000de168 	.word	0x000de168

000d7144 <_ZN16DeviceNameHelperD0Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d7144:	b510      	push	{r4, lr}
   d7146:	4604      	mov	r4, r0
}
   d7148:	f7ff ffec 	bl	d7124 <_ZN16DeviceNameHelperD1Ev>
   d714c:	4620      	mov	r0, r4
   d714e:	2138      	movs	r1, #56	; 0x38
   d7150:	f003 fd0d 	bl	dab6e <_ZdlPvj>
   d7154:	4620      	mov	r0, r4
   d7156:	bd10      	pop	{r4, pc}

000d7158 <_ZN24DeviceNameHelperRetainedD1Ev>:

DeviceNameHelperRetained::DeviceNameHelperRetained() {

}

DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d7158:	b510      	push	{r4, lr}
   d715a:	4b03      	ldr	r3, [pc, #12]	; (d7168 <_ZN24DeviceNameHelperRetainedD1Ev+0x10>)
   d715c:	6003      	str	r3, [r0, #0]
   d715e:	4604      	mov	r4, r0
   d7160:	f7ff ffe0 	bl	d7124 <_ZN16DeviceNameHelperD1Ev>

}
   d7164:	4620      	mov	r0, r4
   d7166:	bd10      	pop	{r4, pc}
   d7168:	000de17c 	.word	0x000de17c

000d716c <_ZN24DeviceNameHelperRetainedD0Ev>:
DeviceNameHelperRetained::~DeviceNameHelperRetained() {
   d716c:	b510      	push	{r4, lr}
   d716e:	4604      	mov	r4, r0
}
   d7170:	f7ff fff2 	bl	d7158 <_ZN24DeviceNameHelperRetainedD1Ev>
   d7174:	4620      	mov	r0, r4
   d7176:	2138      	movs	r1, #56	; 0x38
   d7178:	f003 fcf9 	bl	dab6e <_ZdlPvj>
   d717c:	4620      	mov	r0, r4
   d717e:	bd10      	pop	{r4, pc}

000d7180 <_ZN16DeviceNameHelper4loopEv>:
    if (stateHandler) {
   d7180:	6a83      	ldr	r3, [r0, #40]	; 0x28
void DeviceNameHelper::loop() {
   d7182:	4601      	mov	r1, r0
    if (stateHandler) {
   d7184:	b113      	cbz	r3, d718c <_ZN16DeviceNameHelper4loopEv+0xc>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7186:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7188:	3020      	adds	r0, #32
   d718a:	4718      	bx	r3
}
   d718c:	4770      	bx	lr
	...

000d7190 <_ZN16DeviceNameHelperC1Ev>:
DeviceNameHelper::DeviceNameHelper() {
   d7190:	b530      	push	{r4, r5, lr}
   d7192:	4a07      	ldr	r2, [pc, #28]	; (d71b0 <_ZN16DeviceNameHelperC1Ev+0x20>)
   d7194:	6002      	str	r2, [r0, #0]
   d7196:	2400      	movs	r4, #0
   d7198:	2200      	movs	r2, #0
   d719a:	2500      	movs	r5, #0
   d719c:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d71a0:	6042      	str	r2, [r0, #4]
    _Function_base() : _M_manager(nullptr) { }
   d71a2:	6182      	str	r2, [r0, #24]
   d71a4:	6282      	str	r2, [r0, #40]	; 0x28
   d71a6:	6302      	str	r2, [r0, #48]	; 0x30
   d71a8:	8682      	strh	r2, [r0, #52]	; 0x34
   d71aa:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
}
   d71ae:	bd30      	pop	{r4, r5, pc}
   d71b0:	000de168 	.word	0x000de168

000d71b4 <_ZN24DeviceNameHelperRetainedC1Ev>:
DeviceNameHelperRetained::DeviceNameHelperRetained() {
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4603      	mov	r3, r0
   d71b8:	f7ff ffea 	bl	d7190 <_ZN16DeviceNameHelperC1Ev>
   d71bc:	4a01      	ldr	r2, [pc, #4]	; (d71c4 <_ZN24DeviceNameHelperRetainedC1Ev+0x10>)
   d71be:	601a      	str	r2, [r3, #0]
}
   d71c0:	4618      	mov	r0, r3
   d71c2:	bd08      	pop	{r3, pc}
   d71c4:	000de17c 	.word	0x000de17c

000d71c8 <_ZN24DeviceNameHelperRetained8instanceEv>:
DeviceNameHelperRetained &DeviceNameHelperRetained::instance() {
   d71c8:	b510      	push	{r4, lr}
    if (!_instance) {
   d71ca:	4c06      	ldr	r4, [pc, #24]	; (d71e4 <_ZN24DeviceNameHelperRetained8instanceEv+0x1c>)
   d71cc:	6823      	ldr	r3, [r4, #0]
   d71ce:	b93b      	cbnz	r3, d71e0 <_ZN24DeviceNameHelperRetained8instanceEv+0x18>
        _instance = new DeviceNameHelperRetained();
   d71d0:	2038      	movs	r0, #56	; 0x38
   d71d2:	f7fc ff60 	bl	d4096 <_Znwj>
   d71d6:	4601      	mov	r1, r0
   d71d8:	b108      	cbz	r0, d71de <_ZN24DeviceNameHelperRetained8instanceEv+0x16>
   d71da:	f7ff ffeb 	bl	d71b4 <_ZN24DeviceNameHelperRetainedC1Ev>
   d71de:	6021      	str	r1, [r4, #0]
}
   d71e0:	6820      	ldr	r0, [r4, #0]
   d71e2:	bd10      	pop	{r4, pc}
   d71e4:	2003e5fc 	.word	0x2003e5fc

000d71e8 <_ZNKSt8functionIFvPKcEEclES1_>:
    function<_Res(_ArgTypes...)>::
   d71e8:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d71ea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d71ec:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d71ee:	b90a      	cbnz	r2, d71f4 <_ZNKSt8functionIFvPKcEEclES1_+0xc>
	__throw_bad_function_call();
   d71f0:	f003 fcc3 	bl	dab7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71f4:	68c3      	ldr	r3, [r0, #12]
   d71f6:	a901      	add	r1, sp, #4
   d71f8:	4798      	blx	r3
    }
   d71fa:	b003      	add	sp, #12
   d71fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d7200 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE>:
DeviceNameHelper &DeviceNameHelper::withNameCallback(std::function<void(const char *)> nameCallback) {
   d7200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7202:	2300      	movs	r3, #0
   d7204:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d7206:	688b      	ldr	r3, [r1, #8]
   d7208:	4604      	mov	r4, r0
   d720a:	460d      	mov	r5, r1
    this->nameCallback = nameCallback;
   d720c:	f100 0610 	add.w	r6, r0, #16
      if (static_cast<bool>(__x))
   d7210:	b133      	cbz	r3, d7220 <_ZN16DeviceNameHelper16withNameCallbackESt8functionIFvPKcEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7212:	2202      	movs	r2, #2
   d7214:	4668      	mov	r0, sp
   d7216:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7218:	68eb      	ldr	r3, [r5, #12]
   d721a:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d721c:	68ab      	ldr	r3, [r5, #8]
   d721e:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d7220:	4631      	mov	r1, r6
   d7222:	4668      	mov	r0, sp
   d7224:	f7fe ffbc 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7228:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d722a:	69a2      	ldr	r2, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d722c:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d722e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7230:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d7232:	4668      	mov	r0, sp
   d7234:	69e2      	ldr	r2, [r4, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d7236:	61e3      	str	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7238:	9203      	str	r2, [sp, #12]
   d723a:	f7fd f869 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
}
   d723e:	4620      	mov	r0, r4
   d7240:	b004      	add	sp, #16
   d7242:	bd70      	pop	{r4, r5, r6, pc}

000d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7246:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d724a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d724c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d724e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d7250:	b90a      	cbnz	r2, d7256 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d7252:	07d9      	lsls	r1, r3, #31
   d7254:	d505      	bpl.n	d7262 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7256:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d725a:	4b0b      	ldr	r3, [pc, #44]	; (d7288 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d725c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d725e:	4b0b      	ldr	r3, [pc, #44]	; (d728c <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d7260:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d7262:	4621      	mov	r1, r4
   d7264:	4668      	mov	r0, sp
   d7266:	f7fe ff9b 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d726a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d726c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d726e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7270:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7272:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d7274:	4668      	mov	r0, sp
   d7276:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7278:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d727a:	9203      	str	r2, [sp, #12]
   d727c:	f7fd f848 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	}
   d7280:	4620      	mov	r0, r4
   d7282:	b004      	add	sp, #16
   d7284:	bd10      	pop	{r4, pc}
   d7286:	bf00      	nop
   d7288:	000d70a9 	.word	0x000d70a9
   d728c:	000d7057 	.word	0x000d7057

000d7290 <_ZN16DeviceNameHelper11commonSetupEv>:
void DeviceNameHelper::commonSetup() {
   d7290:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7292:	4604      	mov	r4, r0
    if (data->magic != DATA_MAGIC || data->size != sizeof(DeviceNameHelperData)) {
   d7294:	6840      	ldr	r0, [r0, #4]
   d7296:	4d0d      	ldr	r5, [pc, #52]	; (d72cc <_ZN16DeviceNameHelper11commonSetupEv+0x3c>)
   d7298:	6802      	ldr	r2, [r0, #0]
   d729a:	42aa      	cmp	r2, r5
   d729c:	d102      	bne.n	d72a4 <_ZN16DeviceNameHelper11commonSetupEv+0x14>
   d729e:	7903      	ldrb	r3, [r0, #4]
   d72a0:	2b2c      	cmp	r3, #44	; 0x2c
   d72a2:	d008      	beq.n	d72b6 <_ZN16DeviceNameHelper11commonSetupEv+0x26>
        memset(data, 0, sizeof(DeviceNameHelperData));     
   d72a4:	262c      	movs	r6, #44	; 0x2c
   d72a6:	4632      	mov	r2, r6
   d72a8:	2100      	movs	r1, #0
   d72aa:	f004 fafd 	bl	db8a8 <memset>
        data->magic = DATA_MAGIC;
   d72ae:	6863      	ldr	r3, [r4, #4]
   d72b0:	601d      	str	r5, [r3, #0]
        data->size = (uint8_t) sizeof(DeviceNameHelperData);
   d72b2:	6863      	ldr	r3, [r4, #4]
   d72b4:	711e      	strb	r6, [r3, #4]
    stateHandler = &DeviceNameHelper::stateStart;
   d72b6:	4b06      	ldr	r3, [pc, #24]	; (d72d0 <_ZN16DeviceNameHelper11commonSetupEv+0x40>)
   d72b8:	9300      	str	r3, [sp, #0]
   d72ba:	4669      	mov	r1, sp
   d72bc:	2300      	movs	r3, #0
   d72be:	f104 0020 	add.w	r0, r4, #32
   d72c2:	9301      	str	r3, [sp, #4]
   d72c4:	f7ff ffbe 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d72c8:	b002      	add	sp, #8
   d72ca:	bd70      	pop	{r4, r5, r6, pc}
   d72cc:	7787a2f2 	.word	0x7787a2f2
   d72d0:	000d72dd 	.word	0x000d72dd

000d72d4 <_ZN24DeviceNameHelperRetained5setupEP20DeviceNameHelperData>:
    this->data = retainedData;
   d72d4:	6041      	str	r1, [r0, #4]
    commonSetup();
   d72d6:	f7ff bfdb 	b.w	d7290 <_ZN16DeviceNameHelper11commonSetupEv>
	...

000d72dc <_ZN16DeviceNameHelper10stateStartEv>:
void DeviceNameHelper::stateStart() {
   d72dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (data->name[0]) {
   d72de:	6841      	ldr	r1, [r0, #4]
   d72e0:	7b0b      	ldrb	r3, [r1, #12]
void DeviceNameHelper::stateStart() {
   d72e2:	4604      	mov	r4, r0
   d72e4:	f100 0520 	add.w	r5, r0, #32
    if (data->name[0]) {
   d72e8:	b193      	cbz	r3, d7310 <_ZN16DeviceNameHelper10stateStartEv+0x34>
        if (nameCallback) {
   d72ea:	6983      	ldr	r3, [r0, #24]
   d72ec:	b11b      	cbz	r3, d72f6 <_ZN16DeviceNameHelper10stateStartEv+0x1a>
            nameCallback(data->name);
   d72ee:	310c      	adds	r1, #12
   d72f0:	3010      	adds	r0, #16
   d72f2:	f7ff ff79 	bl	d71e8 <_ZNKSt8functionIFvPKcEEclES1_>
        stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d72f6:	4b0a      	ldr	r3, [pc, #40]	; (d7320 <_ZN16DeviceNameHelper10stateStartEv+0x44>)
   d72f8:	9300      	str	r3, [sp, #0]
   d72fa:	4669      	mov	r1, sp
   d72fc:	2300      	movs	r3, #0
   d72fe:	4628      	mov	r0, r5
   d7300:	9301      	str	r3, [sp, #4]
   d7302:	f7ff ff9f 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7306:	f001 fa67 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d730a:	6320      	str	r0, [r4, #48]	; 0x30
}
   d730c:	b003      	add	sp, #12
   d730e:	bd30      	pop	{r4, r5, pc}
    stateHandler = &DeviceNameHelper::stateSubscribe;
   d7310:	4a04      	ldr	r2, [pc, #16]	; (d7324 <_ZN16DeviceNameHelper10stateStartEv+0x48>)
   d7312:	4669      	mov	r1, sp
   d7314:	4628      	mov	r0, r5
   d7316:	e9cd 2300 	strd	r2, r3, [sp]
   d731a:	f7ff ff93 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d731e:	e7f5      	b.n	d730c <_ZN16DeviceNameHelper10stateStartEv+0x30>
   d7320:	000d7479 	.word	0x000d7479
   d7324:	000d7501 	.word	0x000d7501

000d7328 <_ZN16DeviceNameHelper18stateWaitConnectedEv>:
void DeviceNameHelper::stateWaitConnected() {
   d7328:	b513      	push	{r0, r1, r4, lr}
   d732a:	4604      	mov	r4, r0
   d732c:	f001 fc52 	bl	d8bd4 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d7330:	b170      	cbz	r0, d7350 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
   d7332:	f003 f8cb 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d7336:	b158      	cbz	r0, d7350 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
    stateHandler = &DeviceNameHelper::stateWaitRequest;
   d7338:	4b06      	ldr	r3, [pc, #24]	; (d7354 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x2c>)
   d733a:	9300      	str	r3, [sp, #0]
   d733c:	4669      	mov	r1, sp
   d733e:	2300      	movs	r3, #0
   d7340:	f104 0020 	add.w	r0, r4, #32
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	f7ff ff7d 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d734a:	f001 fa45 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d734e:	6320      	str	r0, [r4, #48]	; 0x30
}
   d7350:	b002      	add	sp, #8
   d7352:	bd10      	pop	{r4, pc}
   d7354:	000d7359 	.word	0x000d7359

000d7358 <_ZN16DeviceNameHelper16stateWaitRequestEv>:
void DeviceNameHelper::stateWaitRequest() {
   d7358:	b530      	push	{r4, r5, lr}
   d735a:	4605      	mov	r5, r0
   d735c:	b085      	sub	sp, #20
   d735e:	f001 fa3b 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < POST_CONNECT_WAIT_MS) {
   d7362:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7364:	1ac0      	subs	r0, r0, r3
   d7366:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d736a:	d329      	bcc.n	d73c0 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x68>
    gotResponse = false;
   d736c:	4b15      	ldr	r3, [pc, #84]	; (d73c4 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d736e:	4916      	ldr	r1, [pc, #88]	; (d73c8 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x70>)
   d7370:	781b      	ldrb	r3, [r3, #0]
   d7372:	f88d 3000 	strb.w	r3, [sp]
   d7376:	2200      	movs	r2, #0
   d7378:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
   d737c:	233c      	movs	r3, #60	; 0x3c
   d737e:	a802      	add	r0, sp, #8
   d7380:	f001 fed0 	bl	d9124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d7384:	9c03      	ldr	r4, [sp, #12]
   d7386:	b17c      	cbz	r4, d73a8 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
      if (--_M_use_count == 0)
   d7388:	6863      	ldr	r3, [r4, #4]
   d738a:	3b01      	subs	r3, #1
   d738c:	6063      	str	r3, [r4, #4]
   d738e:	b95b      	cbnz	r3, d73a8 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
          _M_dispose();
   d7390:	6823      	ldr	r3, [r4, #0]
   d7392:	4620      	mov	r0, r4
   d7394:	689b      	ldr	r3, [r3, #8]
   d7396:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7398:	68a3      	ldr	r3, [r4, #8]
   d739a:	3b01      	subs	r3, #1
   d739c:	60a3      	str	r3, [r4, #8]
   d739e:	b91b      	cbnz	r3, d73a8 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
            _M_destroy();
   d73a0:	6823      	ldr	r3, [r4, #0]
   d73a2:	4620      	mov	r0, r4
   d73a4:	68db      	ldr	r3, [r3, #12]
   d73a6:	4798      	blx	r3
    stateHandler = &DeviceNameHelper::stateWaitResponse;
   d73a8:	4b08      	ldr	r3, [pc, #32]	; (d73cc <_ZN16DeviceNameHelper16stateWaitRequestEv+0x74>)
   d73aa:	9302      	str	r3, [sp, #8]
   d73ac:	a902      	add	r1, sp, #8
   d73ae:	2300      	movs	r3, #0
   d73b0:	f105 0020 	add.w	r0, r5, #32
   d73b4:	9303      	str	r3, [sp, #12]
   d73b6:	f7ff ff45 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d73ba:	f001 fa0d 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d73be:	6328      	str	r0, [r5, #48]	; 0x30
}
   d73c0:	b005      	add	sp, #20
   d73c2:	bd30      	pop	{r4, r5, pc}
   d73c4:	2003e5f8 	.word	0x2003e5f8
   d73c8:	000de148 	.word	0x000de148
   d73cc:	000d73d1 	.word	0x000d73d1

000d73d0 <_ZN16DeviceNameHelper17stateWaitResponseEv>:
void DeviceNameHelper::stateWaitResponse() {
   d73d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (gotResponse) {
   d73d2:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
void DeviceNameHelper::stateWaitResponse() {
   d73d6:	4604      	mov	r4, r0
    if (gotResponse) {
   d73d8:	b31d      	cbz	r5, d7422 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x52>
        if (data->name[0]) {
   d73da:	6846      	ldr	r6, [r0, #4]
   d73dc:	7b33      	ldrb	r3, [r6, #12]
   d73de:	f100 0520 	add.w	r5, r0, #32
   d73e2:	b1db      	cbz	r3, d741c <_ZN16DeviceNameHelper17stateWaitResponseEv+0x4c>
            data->lastCheck = Time.now();
   d73e4:	f003 f88f 	bl	da506 <_ZN9TimeClass3nowEv>
   d73e8:	60b0      	str	r0, [r6, #8]
            save();
   d73ea:	6823      	ldr	r3, [r4, #0]
   d73ec:	4620      	mov	r0, r4
   d73ee:	689b      	ldr	r3, [r3, #8]
   d73f0:	4798      	blx	r3
            if (nameCallback) {
   d73f2:	69a3      	ldr	r3, [r4, #24]
   d73f4:	b12b      	cbz	r3, d7402 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x32>
                nameCallback(data->name);
   d73f6:	6861      	ldr	r1, [r4, #4]
   d73f8:	f104 0010 	add.w	r0, r4, #16
   d73fc:	310c      	adds	r1, #12
   d73fe:	f7ff fef3 	bl	d71e8 <_ZNKSt8functionIFvPKcEEclES1_>
            stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d7402:	4b0f      	ldr	r3, [pc, #60]	; (d7440 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x70>)
   d7404:	9300      	str	r3, [sp, #0]
   d7406:	2300      	movs	r3, #0
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	4669      	mov	r1, sp
   d740c:	4628      	mov	r0, r5
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d740e:	f7ff ff19 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7412:	f001 f9e1 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d7416:	6320      	str	r0, [r4, #48]	; 0x30
}
   d7418:	b002      	add	sp, #8
   d741a:	bd70      	pop	{r4, r5, r6, pc}
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d741c:	4a09      	ldr	r2, [pc, #36]	; (d7444 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d741e:	9200      	str	r2, [sp, #0]
   d7420:	e7f2      	b.n	d7408 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x38>
   d7422:	f001 f9d9 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RESPONSE_WAIT_MS) {
   d7426:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7428:	1ac0      	subs	r0, r0, r3
   d742a:	f643 2397 	movw	r3, #14999	; 0x3a97
   d742e:	4298      	cmp	r0, r3
   d7430:	d9f2      	bls.n	d7418 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x48>
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d7432:	4b04      	ldr	r3, [pc, #16]	; (d7444 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d7434:	4669      	mov	r1, sp
   d7436:	e9cd 3500 	strd	r3, r5, [sp]
   d743a:	f104 0020 	add.w	r0, r4, #32
   d743e:	e7e6      	b.n	d740e <_ZN16DeviceNameHelper17stateWaitResponseEv+0x3e>
   d7440:	000d7479 	.word	0x000d7479
   d7444:	000d7449 	.word	0x000d7449

000d7448 <_ZN16DeviceNameHelper14stateWaitRetryEv>:
void DeviceNameHelper::stateWaitRetry() {
   d7448:	b513      	push	{r0, r1, r4, lr}
   d744a:	4604      	mov	r4, r0
   d744c:	f001 f9c4 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RETRY_WAIT_MS) {
   d7450:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7452:	1ac0      	subs	r0, r0, r3
   d7454:	4b06      	ldr	r3, [pc, #24]	; (d7470 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x28>)
   d7456:	4298      	cmp	r0, r3
   d7458:	d908      	bls.n	d746c <_ZN16DeviceNameHelper14stateWaitRetryEv+0x24>
        stateHandler = &DeviceNameHelper::stateWaitConnected;
   d745a:	4b06      	ldr	r3, [pc, #24]	; (d7474 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x2c>)
   d745c:	9300      	str	r3, [sp, #0]
   d745e:	4669      	mov	r1, sp
   d7460:	2300      	movs	r3, #0
   d7462:	f104 0020 	add.w	r0, r4, #32
   d7466:	9301      	str	r3, [sp, #4]
   d7468:	f7ff feec 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d746c:	b002      	add	sp, #8
   d746e:	bd10      	pop	{r4, pc}
   d7470:	000493df 	.word	0x000493df
   d7474:	000d7329 	.word	0x000d7329

000d7478 <_ZN16DeviceNameHelper16stateWaitRecheckEv>:
void DeviceNameHelper::stateWaitRecheck() {
   d7478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d747a:	4604      	mov	r4, r0
   d747c:	f001 f9ac 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d7480:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d7482:	1ac0      	subs	r0, r0, r3
   d7484:	f242 730f 	movw	r3, #9999	; 0x270f
   d7488:	4298      	cmp	r0, r3
   d748a:	d91e      	bls.n	d74ca <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d748c:	f001 f9a4 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
    if (forceCheck) {
   d7490:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
    stateTime = millis();
   d7494:	6320      	str	r0, [r4, #48]	; 0x30
    if (forceCheck) {
   d7496:	b15d      	cbz	r5, d74b0 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x38>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d7498:	4a18      	ldr	r2, [pc, #96]	; (d74fc <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
        forceCheck = false;
   d749a:	2300      	movs	r3, #0
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d749c:	e9cd 2300 	strd	r2, r3, [sp]
        forceCheck = false;
   d74a0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d74a4:	4669      	mov	r1, sp
   d74a6:	f104 0020 	add.w	r0, r4, #32
   d74aa:	f7ff fecb 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d74ae:	e00c      	b.n	d74ca <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
    if (checkPeriod.count() == 0) {
   d74b0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d74b4:	4313      	orrs	r3, r2
   d74b6:	d10a      	bne.n	d74ce <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x56>
	if (_M_manager)
   d74b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d74ba:	b133      	cbz	r3, d74ca <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = 0;
   d74bc:	f104 0120 	add.w	r1, r4, #32
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d74c0:	2203      	movs	r2, #3
   d74c2:	4608      	mov	r0, r1
   d74c4:	4798      	blx	r3
	    _M_invoker = nullptr;
   d74c6:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
}
   d74ca:	b003      	add	sp, #12
   d74cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Time.isValid() && (data->lastCheck + checkPeriod.count()) < Time.now()) {
   d74ce:	f002 fffd 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d74d2:	2800      	cmp	r0, #0
   d74d4:	d0f9      	beq.n	d74ca <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d74d6:	6863      	ldr	r3, [r4, #4]
   d74d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
   d74dc:	689b      	ldr	r3, [r3, #8]
   d74de:	18f6      	adds	r6, r6, r3
   d74e0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   d74e4:	f003 f80f 	bl	da506 <_ZN9TimeClass3nowEv>
   d74e8:	17c1      	asrs	r1, r0, #31
   d74ea:	4286      	cmp	r6, r0
   d74ec:	eb77 0301 	sbcs.w	r3, r7, r1
   d74f0:	daeb      	bge.n	d74ca <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
   d74f4:	e9cd 3500 	strd	r3, r5, [sp]
   d74f8:	e7d4      	b.n	d74a4 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x2c>
   d74fa:	bf00      	nop
   d74fc:	000d7501 	.word	0x000d7501

000d7500 <_ZN16DeviceNameHelper14stateSubscribeEv>:
void DeviceNameHelper::stateSubscribe() {
   d7500:	b530      	push	{r4, r5, lr}
    if (!hasSubscribed) {
   d7502:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
void DeviceNameHelper::stateSubscribe() {
   d7506:	b08b      	sub	sp, #44	; 0x2c
   d7508:	4604      	mov	r4, r0
    if (!hasSubscribed) {
   d750a:	bb6d      	cbnz	r5, d7568 <_ZN16DeviceNameHelper14stateSubscribeEv+0x68>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d750c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d750e:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7510:	f7fc fdc1 	bl	d4096 <_Znwj>
   d7514:	b118      	cbz	r0, d751e <_ZN16DeviceNameHelper14stateSubscribeEv+0x1e>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d7516:	4b1a      	ldr	r3, [pc, #104]	; (d7580 <_ZN16DeviceNameHelper14stateSubscribeEv+0x80>)
   d7518:	6084      	str	r4, [r0, #8]
   d751a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d751e:	4b19      	ldr	r3, [pc, #100]	; (d7584 <_ZN16DeviceNameHelper14stateSubscribeEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7520:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7522:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d7524:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d7526:	4b18      	ldr	r3, [pc, #96]	; (d7588 <_ZN16DeviceNameHelper14stateSubscribeEv+0x88>)
   d7528:	9304      	str	r3, [sp, #16]
   d752a:	a806      	add	r0, sp, #24
   d752c:	f7ff fba8 	bl	d6c80 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d7530:	9b08      	ldr	r3, [sp, #32]
   d7532:	b183      	cbz	r3, d7556 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
            auto wrapper = new wiring_event_handler_t(handler);
   d7534:	2010      	movs	r0, #16
   d7536:	f7fc fdae 	bl	d4096 <_Znwj>
   d753a:	4605      	mov	r5, r0
   d753c:	b158      	cbz	r0, d7556 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
   d753e:	a906      	add	r1, sp, #24
   d7540:	f7ff fb9e 	bl	d6c80 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d7544:	2300      	movs	r3, #0
   d7546:	e9cd 3300 	strd	r3, r3, [sp]
   d754a:	4910      	ldr	r1, [pc, #64]	; (d758c <_ZN16DeviceNameHelper14stateSubscribeEv+0x8c>)
   d754c:	4810      	ldr	r0, [pc, #64]	; (d7590 <_ZN16DeviceNameHelper14stateSubscribeEv+0x90>)
   d754e:	2301      	movs	r3, #1
   d7550:	462a      	mov	r2, r5
   d7552:	f001 fb57 	bl	d8c04 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d7556:	a806      	add	r0, sp, #24
   d7558:	f7fc feda 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d755c:	a802      	add	r0, sp, #8
   d755e:	f7fc fed7 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
        hasSubscribed = true;
   d7562:	2301      	movs	r3, #1
   d7564:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    stateHandler = &DeviceNameHelper::stateWaitConnected;
   d7568:	4b0a      	ldr	r3, [pc, #40]	; (d7594 <_ZN16DeviceNameHelper14stateSubscribeEv+0x94>)
   d756a:	9306      	str	r3, [sp, #24]
   d756c:	a906      	add	r1, sp, #24
   d756e:	2300      	movs	r3, #0
   d7570:	f104 0020 	add.w	r0, r4, #32
   d7574:	9307      	str	r3, [sp, #28]
   d7576:	f7ff fe65 	bl	d7244 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d757a:	b00b      	add	sp, #44	; 0x2c
   d757c:	bd30      	pop	{r4, r5, pc}
   d757e:	bf00      	nop
   d7580:	000d7071 	.word	0x000d7071
   d7584:	000d7105 	.word	0x000d7105
   d7588:	000d70c7 	.word	0x000d70c7
   d758c:	000d8f23 	.word	0x000d8f23
   d7590:	000de148 	.word	0x000de148
   d7594:	000d7329 	.word	0x000d7329

000d7598 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d7598:	4b01      	ldr	r3, [pc, #4]	; (d75a0 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d759a:	2200      	movs	r2, #0
   d759c:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d759e:	4770      	bx	lr
   d75a0:	2003e5f8 	.word	0x2003e5f8

000d75a4 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d75a4:	4b03      	ldr	r3, [pc, #12]	; (d75b4 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d75a6:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d75a8:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d75aa:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d75ae:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d75b2:	4770      	bx	lr
   d75b4:	40a00000 	.word	0x40a00000

000d75b8 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d75b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d75bc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d7688 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d75c0:	9101      	str	r1, [sp, #4]
   d75c2:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d75c4:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d75c6:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d75ca:	9b01      	ldr	r3, [sp, #4]
   d75cc:	429d      	cmp	r5, r3
   d75ce:	d02f      	beq.n	d7630 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d75d0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d75d2:	f003 fa6f 	bl	daab4 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d75d6:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d75da:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d75dc:	f003 fd46 	bl	db06c <__aeabi_i2d>
   d75e0:	4642      	mov	r2, r8
   d75e2:	464b      	mov	r3, r9
   d75e4:	4606      	mov	r6, r0
   d75e6:	460f      	mov	r7, r1
   d75e8:	f003 fbf2 	bl	dadd0 <__aeabi_dsub>
   d75ec:	4652      	mov	r2, sl
   d75ee:	465b      	mov	r3, fp
   d75f0:	f003 fda6 	bl	db140 <__aeabi_dmul>
   d75f4:	4642      	mov	r2, r8
   d75f6:	464b      	mov	r3, r9
   d75f8:	f003 fbec 	bl	dadd4 <__adddf3>
   d75fc:	4602      	mov	r2, r0
   d75fe:	460b      	mov	r3, r1
   d7600:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d7604:	4630      	mov	r0, r6
   d7606:	4639      	mov	r1, r7
   d7608:	f003 fbe2 	bl	dadd0 <__aeabi_dsub>
   d760c:	4602      	mov	r2, r0
   d760e:	460b      	mov	r3, r1
   d7610:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d7614:	f003 fd94 	bl	db140 <__aeabi_dmul>
   d7618:	4602      	mov	r2, r0
   d761a:	460b      	mov	r3, r1
   d761c:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d7620:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d7624:	f003 fbd6 	bl	dadd4 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d7628:	3501      	adds	r5, #1
    sumI += sqI;
   d762a:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d762e:	e7cc      	b.n	d75ca <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d7630:	a313      	add	r3, pc, #76	; (adr r3, d7680 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d7632:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7636:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d763a:	f003 fd81 	bl	db140 <__aeabi_dmul>
   d763e:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7640:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d7642:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7644:	f003 fd02 	bl	db04c <__aeabi_ui2d>
   d7648:	4602      	mov	r2, r0
   d764a:	460b      	mov	r3, r1
   d764c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d7650:	f003 fea0 	bl	db394 <__aeabi_ddiv>
   d7654:	ec41 0b10 	vmov	d0, r0, r1
   d7658:	f003 fa92 	bl	dab80 <sqrt>
   d765c:	4632      	mov	r2, r6
   d765e:	463b      	mov	r3, r7
   d7660:	ec51 0b10 	vmov	r0, r1, d0
   d7664:	f003 fd6c 	bl	db140 <__aeabi_dmul>
   d7668:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d766c:	2200      	movs	r2, #0
   d766e:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d7670:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d7674:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d7678:	b003      	add	sp, #12
   d767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d767e:	bf00      	nop
   d7680:	66666666 	.word	0x66666666
   d7684:	3f4a6666 	.word	0x3f4a6666
   d7688:	3f300000 	.word	0x3f300000

000d768c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d768c:	4770      	bx	lr

000d768e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d768e:	b510      	push	{r4, lr}
}
   d7690:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7692:	4604      	mov	r4, r0
}
   d7694:	f003 fa6b 	bl	dab6e <_ZdlPvj>
   d7698:	4620      	mov	r0, r4
   d769a:	bd10      	pop	{r4, pc}

000d769c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d769c:	6803      	ldr	r3, [r0, #0]
   d769e:	b2c9      	uxtb	r1, r1
   d76a0:	689b      	ldr	r3, [r3, #8]
   d76a2:	4718      	bx	r3

000d76a4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d76a4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d76a6:	4d03      	ldr	r5, [pc, #12]	; (d76b4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d76a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d76ac:	e9c0 5100 	strd	r5, r1, [r0]
}
   d76b0:	bd30      	pop	{r4, r5, pc}
   d76b2:	bf00      	nop
   d76b4:	000de1bc 	.word	0x000de1bc

000d76b8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d76b8:	6840      	ldr	r0, [r0, #4]
   d76ba:	f001 bf25 	b.w	d9508 <_ZN7TwoWire5beginEv>

000d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d76be:	b510      	push	{r4, lr}
   d76c0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d76c2:	6800      	ldr	r0, [r0, #0]
   d76c4:	f001 ff63 	bl	d958e <_ZN7TwoWire6unlockEv>
   d76c8:	4620      	mov	r0, r4
   d76ca:	bd10      	pop	{r4, pc}

000d76cc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d76cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76d0:	b08a      	sub	sp, #40	; 0x28
   d76d2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d76d4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d76d6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d76d8:	f001 ff50 	bl	d957c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d76dc:	221e      	movs	r2, #30
   d76de:	2100      	movs	r1, #0
   d76e0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d76e2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d76e4:	f004 f8e0 	bl	db8a8 <memset>
		size_t framAddr = 0;
   d76e8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d76ea:	b1ef      	cbz	r7, d7728 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d76ec:	6823      	ldr	r3, [r4, #0]
   d76ee:	2f1e      	cmp	r7, #30
   d76f0:	46b8      	mov	r8, r7
   d76f2:	bf28      	it	cs
   d76f4:	f04f 081e 	movcs.w	r8, #30
   d76f8:	68dd      	ldr	r5, [r3, #12]
   d76fa:	aa02      	add	r2, sp, #8
   d76fc:	4643      	mov	r3, r8
   d76fe:	4631      	mov	r1, r6
   d7700:	4620      	mov	r0, r4
   d7702:	47a8      	blx	r5
			if (!result) {
   d7704:	4605      	mov	r5, r0
   d7706:	b958      	cbnz	r0, d7720 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7708:	480a      	ldr	r0, [pc, #40]	; (d7734 <_ZN6MB85RC5eraseEv+0x68>)
   d770a:	490b      	ldr	r1, [pc, #44]	; (d7738 <_ZN6MB85RC5eraseEv+0x6c>)
   d770c:	4632      	mov	r2, r6
   d770e:	f7fc fe83 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7712:	a801      	add	r0, sp, #4
   d7714:	f7ff ffd3 	bl	d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7718:	4628      	mov	r0, r5
   d771a:	b00a      	add	sp, #40	; 0x28
   d771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7720:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7724:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7726:	e7e0      	b.n	d76ea <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7728:	a801      	add	r0, sp, #4
   d772a:	f7ff ffc8 	bl	d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d772e:	2501      	movs	r5, #1
   d7730:	e7f2      	b.n	d7718 <_ZN6MB85RC5eraseEv+0x4c>
   d7732:	bf00      	nop
   d7734:	2003e614 	.word	0x2003e614
   d7738:	000de188 	.word	0x000de188

000d773c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d773c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7740:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7742:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7744:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7746:	460d      	mov	r5, r1
   d7748:	4616      	mov	r6, r2
   d774a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d774c:	f001 ff16 	bl	d957c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7750:	b1a7      	cbz	r7, d777c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7752:	68e1      	ldr	r1, [r4, #12]
   d7754:	6860      	ldr	r0, [r4, #4]
   d7756:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d775a:	f001 ff08 	bl	d956e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d775e:	0a29      	lsrs	r1, r5, #8
   d7760:	6860      	ldr	r0, [r4, #4]
   d7762:	f7ff ff9b 	bl	d769c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7766:	4629      	mov	r1, r5
   d7768:	6860      	ldr	r0, [r4, #4]
   d776a:	f7ff ff97 	bl	d769c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d776e:	6860      	ldr	r0, [r4, #4]
   d7770:	2100      	movs	r1, #0
   d7772:	f001 feff 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7776:	b148      	cbz	r0, d778c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7778:	2400      	movs	r4, #0
   d777a:	e000      	b.n	d777e <_ZN6MB85RC8readDataEjPhj+0x42>
   d777c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d777e:	a801      	add	r0, sp, #4
   d7780:	f7ff ff9d 	bl	d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7784:	4620      	mov	r0, r4
   d7786:	b003      	add	sp, #12
   d7788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d778c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d778e:	7b21      	ldrb	r1, [r4, #12]
   d7790:	6860      	ldr	r0, [r4, #4]
   d7792:	46b8      	mov	r8, r7
   d7794:	bf28      	it	cs
   d7796:	f04f 0820 	movcs.w	r8, #32
   d779a:	2301      	movs	r3, #1
   d779c:	4642      	mov	r2, r8
   d779e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d77a2:	f001 fece 	bl	d9542 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d77a6:	f003 f9b5 	bl	dab14 <_Z19__fetch_global_Wirev>
   d77aa:	6803      	ldr	r3, [r0, #0]
   d77ac:	691b      	ldr	r3, [r3, #16]
   d77ae:	4798      	blx	r3
   d77b0:	4540      	cmp	r0, r8
   d77b2:	dbe1      	blt.n	d7778 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d77b4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d77b8:	f003 f9ac 	bl	dab14 <_Z19__fetch_global_Wirev>
   d77bc:	6803      	ldr	r3, [r0, #0]
   d77be:	695b      	ldr	r3, [r3, #20]
   d77c0:	4798      	blx	r3
   d77c2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d77c6:	454e      	cmp	r6, r9
   d77c8:	d1f6      	bne.n	d77b8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d77ca:	4445      	add	r5, r8
   d77cc:	eba7 0708 	sub.w	r7, r7, r8
   d77d0:	e7be      	b.n	d7750 <_ZN6MB85RC8readDataEjPhj+0x14>

000d77d2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d77d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77d6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d77d8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d77da:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d77dc:	460e      	mov	r6, r1
   d77de:	4690      	mov	r8, r2
   d77e0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d77e2:	f001 fecb 	bl	d957c <_ZN7TwoWire4lockEv>
   d77e6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d77ea:	f1b9 0f00 	cmp.w	r9, #0
   d77ee:	d02a      	beq.n	d7846 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d77f0:	b34d      	cbz	r5, d7846 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d77f2:	68e1      	ldr	r1, [r4, #12]
   d77f4:	6860      	ldr	r0, [r4, #4]
   d77f6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d77fa:	f001 feb8 	bl	d956e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d77fe:	0a31      	lsrs	r1, r6, #8
   d7800:	6860      	ldr	r0, [r4, #4]
   d7802:	f7ff ff4b 	bl	d769c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7806:	6860      	ldr	r0, [r4, #4]
   d7808:	4631      	mov	r1, r6
   d780a:	f7ff ff47 	bl	d769c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d780e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7812:	4647      	mov	r7, r8
   d7814:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7818:	6860      	ldr	r0, [r4, #4]
   d781a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d781e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7820:	3d01      	subs	r5, #1
				wire.write(*data);
   d7822:	689b      	ldr	r3, [r3, #8]
   d7824:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7826:	4555      	cmp	r5, sl
   d7828:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d782c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d782e:	d001      	beq.n	d7834 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7830:	2d00      	cmp	r5, #0
   d7832:	d1f1      	bne.n	d7818 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7834:	6860      	ldr	r0, [r4, #4]
   d7836:	2101      	movs	r1, #1
   d7838:	f001 fe9c 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d783c:	2800      	cmp	r0, #0
   d783e:	d0d7      	beq.n	d77f0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7840:	f04f 0900 	mov.w	r9, #0
   d7844:	e7d1      	b.n	d77ea <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7846:	a801      	add	r0, sp, #4
   d7848:	f7ff ff39 	bl	d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d784c:	4648      	mov	r0, r9
   d784e:	b003      	add	sp, #12
   d7850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7854 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7858:	b08b      	sub	sp, #44	; 0x2c
   d785a:	460e      	mov	r6, r1
   d785c:	4615      	mov	r5, r2
   d785e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7860:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7862:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7864:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7866:	f001 fe89 	bl	d957c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d786a:	42ae      	cmp	r6, r5
   d786c:	d229      	bcs.n	d78c2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d786e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7870:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7872:	b18c      	cbz	r4, d7898 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7874:	2c1e      	cmp	r4, #30
   d7876:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7878:	f8d8 3000 	ldr.w	r3, [r8]
   d787c:	bf28      	it	cs
   d787e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7880:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7882:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7886:	aa02      	add	r2, sp, #8
   d7888:	463b      	mov	r3, r7
   d788a:	4631      	mov	r1, r6
   d788c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d788e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7890:	47c8      	blx	r9
				if (!result) {
   d7892:	b948      	cbnz	r0, d78a8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7894:	2400      	movs	r4, #0
   d7896:	e000      	b.n	d789a <_ZN6MB85RC8moveDataEjjj+0x46>
   d7898:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d789a:	a801      	add	r0, sp, #4
   d789c:	f7ff ff0f 	bl	d76be <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d78a0:	4620      	mov	r0, r4
   d78a2:	b00b      	add	sp, #44	; 0x2c
   d78a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d78a8:	f8d8 3000 	ldr.w	r3, [r8]
   d78ac:	aa02      	add	r2, sp, #8
   d78ae:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d78b2:	4629      	mov	r1, r5
   d78b4:	463b      	mov	r3, r7
   d78b6:	4640      	mov	r0, r8
   d78b8:	47c8      	blx	r9
				if (!result) {
   d78ba:	2800      	cmp	r0, #0
   d78bc:	d0ea      	beq.n	d7894 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d78be:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d78c0:	e7d7      	b.n	d7872 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d78c2:	d9e9      	bls.n	d7898 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d78c4:	2c00      	cmp	r4, #0
   d78c6:	d0e7      	beq.n	d7898 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d78c8:	f8d8 3000 	ldr.w	r3, [r8]
   d78cc:	2c1e      	cmp	r4, #30
   d78ce:	4627      	mov	r7, r4
   d78d0:	bf28      	it	cs
   d78d2:	271e      	movcs	r7, #30
   d78d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d78d8:	aa02      	add	r2, sp, #8
   d78da:	463b      	mov	r3, r7
   d78dc:	4631      	mov	r1, r6
   d78de:	4640      	mov	r0, r8
   d78e0:	47c8      	blx	r9
				if (!result) {
   d78e2:	2800      	cmp	r0, #0
   d78e4:	d0d6      	beq.n	d7894 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d78e6:	f8d8 3000 	ldr.w	r3, [r8]
   d78ea:	aa02      	add	r2, sp, #8
   d78ec:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d78f0:	4629      	mov	r1, r5
   d78f2:	463b      	mov	r3, r7
   d78f4:	4640      	mov	r0, r8
   d78f6:	47c8      	blx	r9
				if (!result) {
   d78f8:	2800      	cmp	r0, #0
   d78fa:	d0cb      	beq.n	d7894 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d78fc:	443e      	add	r6, r7
				framAddrTo += count;
   d78fe:	443d      	add	r5, r7
				numBytes -= count;
   d7900:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7902:	e7df      	b.n	d78c4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7904 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d7904:	2040      	movs	r0, #64	; 0x40
   d7906:	4770      	bx	lr

000d7908 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d7908:	2000      	movs	r0, #0
   d790a:	4770      	bx	lr

000d790c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d790c:	2080      	movs	r0, #128	; 0x80
   d790e:	4770      	bx	lr

000d7910 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d7910:	20ff      	movs	r0, #255	; 0xff
   d7912:	4770      	bx	lr

000d7914 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d7914:	4770      	bx	lr

000d7916 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d7916:	4770      	bx	lr

000d7918 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d7918:	4770      	bx	lr

000d791a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d791a:	4770      	bx	lr

000d791c <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d791c:	b510      	push	{r4, lr}
}
   d791e:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d7920:	4604      	mov	r4, r0
}
   d7922:	f003 f924 	bl	dab6e <_ZdlPvj>
   d7926:	4620      	mov	r0, r4
   d7928:	bd10      	pop	{r4, pc}

000d792a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d792a:	b510      	push	{r4, lr}
}
   d792c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d792e:	4604      	mov	r4, r0
}
   d7930:	f003 f91d 	bl	dab6e <_ZdlPvj>
   d7934:	4620      	mov	r0, r4
   d7936:	bd10      	pop	{r4, pc}

000d7938 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d7938:	b510      	push	{r4, lr}
}
   d793a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d793c:	4604      	mov	r4, r0
}
   d793e:	f003 f916 	bl	dab6e <_ZdlPvj>
   d7942:	4620      	mov	r0, r4
   d7944:	bd10      	pop	{r4, pc}

000d7946 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d7946:	b510      	push	{r4, lr}
}
   d7948:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d794a:	4604      	mov	r4, r0
}
   d794c:	f003 f90f 	bl	dab6e <_ZdlPvj>
   d7950:	4620      	mov	r0, r4
   d7952:	bd10      	pop	{r4, pc}

000d7954 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d7954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d7958:	6803      	ldr	r3, [r0, #0]
   d795a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d795c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d795e:	4798      	blx	r3
   d7960:	2210      	movs	r2, #16
   d7962:	4601      	mov	r1, r0
   d7964:	4668      	mov	r0, sp
   d7966:	f003 ff9f 	bl	db8a8 <memset>
	size_t len = length();
   d796a:	6823      	ldr	r3, [r4, #0]
   d796c:	4620      	mov	r0, r4
   d796e:	689b      	ldr	r3, [r3, #8]
   d7970:	4798      	blx	r3
	size_t offset = 0;
   d7972:	2500      	movs	r5, #0
	size_t len = length();
   d7974:	4607      	mov	r7, r0
	bool bResult = false;
   d7976:	4628      	mov	r0, r5
	while(offset < len) {
   d7978:	42bd      	cmp	r5, r7
   d797a:	d20e      	bcs.n	d799a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d797c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d797e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d7980:	2e10      	cmp	r6, #16
   d7982:	bf28      	it	cs
   d7984:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d7986:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d798a:	466a      	mov	r2, sp
   d798c:	4633      	mov	r3, r6
   d798e:	4629      	mov	r1, r5
   d7990:	4620      	mov	r0, r4
   d7992:	47c0      	blx	r8
		if (!bResult) {
   d7994:	b108      	cbz	r0, d799a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d7996:	4435      	add	r5, r6
	while(offset < len) {
   d7998:	e7ee      	b.n	d7978 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d799a:	b004      	add	sp, #16
   d799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d79a0 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d79a0:	f44f 7380 	mov.w	r3, #256	; 0x100
   d79a4:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d79a6:	f240 1301 	movw	r3, #257	; 0x101
   d79aa:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d79ac:	2300      	movs	r3, #0
   d79ae:	8203      	strh	r3, [r0, #16]
}
   d79b0:	4770      	bx	lr
	...

000d79b4 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b06      	ldr	r3, [pc, #24]	; (d79d0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d79b8:	6003      	str	r3, [r0, #0]
   d79ba:	4b06      	ldr	r3, [pc, #24]	; (d79d4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d79bc:	6043      	str	r3, [r0, #4]
   d79be:	f240 7304 	movw	r3, #1796	; 0x704
   d79c2:	8103      	strh	r3, [r0, #8]
   d79c4:	2300      	movs	r3, #0
   d79c6:	7443      	strb	r3, [r0, #17]
	clear();
   d79c8:	f7ff ffea 	bl	d79a0 <_ZN12MCP79410Time5clearEv>
}
   d79cc:	bd08      	pop	{r3, pc}
   d79ce:	bf00      	nop
   d79d0:	000de29c 	.word	0x000de29c
   d79d4:	03020100 	.word	0x03020100

000d79d8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d79d8:	0903      	lsrs	r3, r0, #4
}
   d79da:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d79dc:	f000 000f 	and.w	r0, r0, #15
}
   d79e0:	fb02 0003 	mla	r0, r2, r3, r0
   d79e4:	4770      	bx	lr

000d79e6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d79e6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d79e8:	7a80      	ldrb	r0, [r0, #10]
   d79ea:	f7ff fff5 	bl	d79d8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d79ee:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d79f2:	bd08      	pop	{r3, pc}

000d79f4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d79f4:	7ac0      	ldrb	r0, [r0, #11]
   d79f6:	f000 001f 	and.w	r0, r0, #31
   d79fa:	f7ff bfed 	b.w	d79d8 <_ZN12MCP79410Time8bcdToIntEh>

000d79fe <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d79fe:	7b00      	ldrb	r0, [r0, #12]
   d7a00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d7a04:	f7ff bfe8 	b.w	d79d8 <_ZN12MCP79410Time8bcdToIntEh>

000d7a08 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d7a08:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d7a0a:	7b81      	ldrb	r1, [r0, #14]
   d7a0c:	064a      	lsls	r2, r1, #25
   d7a0e:	d50d      	bpl.n	d7a2c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d7a10:	f001 001f 	and.w	r0, r1, #31
   d7a14:	f7ff ffe0 	bl	d79d8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d7a18:	068b      	lsls	r3, r1, #26
   d7a1a:	d503      	bpl.n	d7a24 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d7a1c:	280c      	cmp	r0, #12
   d7a1e:	d000      	beq.n	d7a22 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d7a20:	300c      	adds	r0, #12
}
   d7a22:	bd08      	pop	{r3, pc}
				return 0;
   d7a24:	280c      	cmp	r0, #12
   d7a26:	bf08      	it	eq
   d7a28:	2000      	moveq	r0, #0
   d7a2a:	e7fa      	b.n	d7a22 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d7a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d7a30:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d7a34:	f7ff bfd0 	b.w	d79d8 <_ZN12MCP79410Time8bcdToIntEh>

000d7a38 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d7a38:	7bc0      	ldrb	r0, [r0, #15]
   d7a3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d7a3e:	f7ff bfcb 	b.w	d79d8 <_ZN12MCP79410Time8bcdToIntEh>

000d7a42 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d7a42:	7c00      	ldrb	r0, [r0, #16]
   d7a44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d7a48:	f7ff bfc6 	b.w	d79d8 <_ZN12MCP79410Time8bcdToIntEh>

000d7a4c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d7a4c:	b510      	push	{r4, lr}
   d7a4e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d7a50:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d7a52:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d7a54:	2100      	movs	r1, #0
   d7a56:	a801      	add	r0, sp, #4
   d7a58:	f003 ff26 	bl	db8a8 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d7a5c:	4620      	mov	r0, r4
   d7a5e:	f7ff ffc2 	bl	d79e6 <_ZNK12MCP79410Time7getYearEv>
   d7a62:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d7a66:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d7a68:	4620      	mov	r0, r4
   d7a6a:	f7ff ffc3 	bl	d79f4 <_ZNK12MCP79410Time8getMonthEv>
   d7a6e:	3801      	subs	r0, #1
   d7a70:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d7a72:	4620      	mov	r0, r4
   d7a74:	f7ff ffc3 	bl	d79fe <_ZNK12MCP79410Time13getDayOfMonthEv>
   d7a78:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d7a7a:	4620      	mov	r0, r4
   d7a7c:	f7ff ffc4 	bl	d7a08 <_ZNK12MCP79410Time7getHourEv>
   d7a80:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d7a82:	4620      	mov	r0, r4
   d7a84:	f7ff ffd8 	bl	d7a38 <_ZNK12MCP79410Time9getMinuteEv>
   d7a88:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d7a8a:	4620      	mov	r0, r4
   d7a8c:	f7ff ffd9 	bl	d7a42 <_ZNK12MCP79410Time9getSecondEv>
   d7a90:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d7a92:	a801      	add	r0, sp, #4
   d7a94:	f001 f9ae 	bl	d8df4 <mktime>
}
   d7a98:	b00a      	add	sp, #40	; 0x28
   d7a9a:	bd10      	pop	{r4, pc}

000d7a9c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d7a9c:	210a      	movs	r1, #10
   d7a9e:	fb90 f2f1 	sdiv	r2, r0, r1
   d7aa2:	fb92 f3f1 	sdiv	r3, r2, r1
   d7aa6:	fb01 2313 	mls	r3, r1, r3, r2
   d7aaa:	011b      	lsls	r3, r3, #4
   d7aac:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d7aae:	fb01 0012 	mls	r0, r1, r2, r0
   d7ab2:	4318      	orrs	r0, r3
}
   d7ab4:	b2c0      	uxtb	r0, r0
   d7ab6:	4770      	bx	lr

000d7ab8 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d7ab8:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d7aba:	b510      	push	{r4, lr}
   d7abc:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d7abe:	fb91 f0f3 	sdiv	r0, r1, r3
   d7ac2:	fb00 1013 	mls	r0, r0, r3, r1
   d7ac6:	f7ff ffe9 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
   d7aca:	72a0      	strb	r0, [r4, #10]
}
   d7acc:	bd10      	pop	{r4, pc}

000d7ace <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d7ace:	b510      	push	{r4, lr}
   d7ad0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d7ad2:	4608      	mov	r0, r1
   d7ad4:	f7ff ffe2 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
   d7ad8:	72e0      	strb	r0, [r4, #11]
}
   d7ada:	bd10      	pop	{r4, pc}

000d7adc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d7adc:	b510      	push	{r4, lr}
   d7ade:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d7ae0:	4608      	mov	r0, r1
   d7ae2:	f7ff ffdb 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d7ae6:	7b23      	ldrb	r3, [r4, #12]
   d7ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d7aec:	4318      	orrs	r0, r3
   d7aee:	7320      	strb	r0, [r4, #12]
}
   d7af0:	bd10      	pop	{r4, pc}

000d7af2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d7af2:	b510      	push	{r4, lr}
   d7af4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d7af6:	1c48      	adds	r0, r1, #1
   d7af8:	f7ff ffd0 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d7afc:	7b63      	ldrb	r3, [r4, #13]
   d7afe:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d7b02:	4318      	orrs	r0, r3
   d7b04:	7360      	strb	r0, [r4, #13]
}
   d7b06:	bd10      	pop	{r4, pc}

000d7b08 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d7b08:	b510      	push	{r4, lr}
   d7b0a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d7b0c:	4608      	mov	r0, r1
   d7b0e:	f7ff ffc5 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
   d7b12:	73a0      	strb	r0, [r4, #14]
}
   d7b14:	bd10      	pop	{r4, pc}

000d7b16 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d7b16:	b510      	push	{r4, lr}
   d7b18:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d7b1a:	4608      	mov	r0, r1
   d7b1c:	f7ff ffbe 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
   d7b20:	73e0      	strb	r0, [r4, #15]
}
   d7b22:	bd10      	pop	{r4, pc}

000d7b24 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d7b24:	b510      	push	{r4, lr}
   d7b26:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d7b28:	4608      	mov	r0, r1
   d7b2a:	f7ff ffb7 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d7b2e:	7c23      	ldrb	r3, [r4, #16]
   d7b30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d7b34:	4318      	orrs	r0, r3
   d7b36:	7420      	strb	r0, [r4, #16]
}
   d7b38:	bd10      	pop	{r4, pc}

000d7b3a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d7b3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b3c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d7b3e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d7b40:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d7b44:	f003 fe76 	bl	db834 <gmtime>
   d7b48:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d7b4a:	6941      	ldr	r1, [r0, #20]
   d7b4c:	4620      	mov	r0, r4
   d7b4e:	f7ff ffb3 	bl	d7ab8 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d7b52:	6929      	ldr	r1, [r5, #16]
   d7b54:	4620      	mov	r0, r4
   d7b56:	3101      	adds	r1, #1
   d7b58:	f7ff ffb9 	bl	d7ace <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d7b5c:	68e9      	ldr	r1, [r5, #12]
   d7b5e:	4620      	mov	r0, r4
   d7b60:	f7ff ffbc 	bl	d7adc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d7b64:	69a9      	ldr	r1, [r5, #24]
   d7b66:	4620      	mov	r0, r4
   d7b68:	f7ff ffc3 	bl	d7af2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d7b6c:	68a9      	ldr	r1, [r5, #8]
   d7b6e:	4620      	mov	r0, r4
   d7b70:	f7ff ffca 	bl	d7b08 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d7b74:	6869      	ldr	r1, [r5, #4]
   d7b76:	4620      	mov	r0, r4
   d7b78:	f7ff ffcd 	bl	d7b16 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d7b7c:	6829      	ldr	r1, [r5, #0]
   d7b7e:	293b      	cmp	r1, #59	; 0x3b
   d7b80:	bfa8      	it	ge
   d7b82:	213b      	movge	r1, #59	; 0x3b
   d7b84:	4620      	mov	r0, r4
   d7b86:	f7ff ffcd 	bl	d7b24 <_ZN12MCP79410Time9setSecondEi>
}
   d7b8a:	b003      	add	sp, #12
   d7b8c:	bd30      	pop	{r4, r5, pc}
	...

000d7b90 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d7b90:	4a05      	ldr	r2, [pc, #20]	; (d7ba8 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d7b92:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d7b94:	e9c0 2100 	strd	r2, r1, [r0]
   d7b98:	4a04      	ldr	r2, [pc, #16]	; (d7bac <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d7b9a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7b9c:	4a04      	ldr	r2, [pc, #16]	; (d7bb0 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d7b9e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7ba0:	4a04      	ldr	r2, [pc, #16]	; (d7bb4 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d7ba2:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d7ba4:	6142      	str	r2, [r0, #20]
}
   d7ba6:	4770      	bx	lr
   d7ba8:	000de2d0 	.word	0x000de2d0
   d7bac:	03010000 	.word	0x03010000
   d7bb0:	000de278 	.word	0x000de278
   d7bb4:	000de2ac 	.word	0x000de2ac

000d7bb8 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d7bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bbc:	4604      	mov	r4, r0
   d7bbe:	460f      	mov	r7, r1
   d7bc0:	4690      	mov	r8, r2
   d7bc2:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d7bc4:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d7bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7bc8:	429e      	cmp	r6, r3
   d7bca:	d231      	bcs.n	d7c30 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d7bcc:	6860      	ldr	r0, [r4, #4]
   d7bce:	4639      	mov	r1, r7
   d7bd0:	f001 fcc9 	bl	d9566 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7bd4:	eb08 0106 	add.w	r1, r8, r6
   d7bd8:	6860      	ldr	r0, [r4, #4]
   d7bda:	f7ff fd5f 	bl	d769c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d7bde:	6860      	ldr	r0, [r4, #4]
   d7be0:	2100      	movs	r1, #0
   d7be2:	f001 fcc7 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d7be6:	4605      	mov	r5, r0
   d7be8:	b9d0      	cbnz	r0, d7c20 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d7bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d7bec:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d7bee:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d7bf0:	2a20      	cmp	r2, #32
   d7bf2:	f04f 0301 	mov.w	r3, #1
   d7bf6:	bf28      	it	cs
   d7bf8:	2220      	movcs	r2, #32
   d7bfa:	4639      	mov	r1, r7
   d7bfc:	f001 fca1 	bl	d9542 <_ZN7TwoWire11requestFromEhjh>
   d7c00:	eb09 0b06 	add.w	fp, r9, r6
   d7c04:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d7c06:	eb0b 0a00 	add.w	sl, fp, r0
   d7c0a:	45da      	cmp	sl, fp
   d7c0c:	d006      	beq.n	d7c1c <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d7c0e:	6860      	ldr	r0, [r4, #4]
   d7c10:	6803      	ldr	r3, [r0, #0]
   d7c12:	695b      	ldr	r3, [r3, #20]
   d7c14:	4798      	blx	r3
   d7c16:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d7c1a:	e7f6      	b.n	d7c0a <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d7c1c:	442e      	add	r6, r5
	while(offset < bufLen) {
   d7c1e:	e7d2      	b.n	d7bc6 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d7c20:	4602      	mov	r2, r0
   d7c22:	4904      	ldr	r1, [pc, #16]	; (d7c34 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d7c24:	4804      	ldr	r0, [pc, #16]	; (d7c38 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d7c26:	f7fc fbf7 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d7c2a:	4628      	mov	r0, r5
   d7c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c30:	2500      	movs	r5, #0
	return stat;
   d7c32:	e7fa      	b.n	d7c2a <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d7c34:	000de1d0 	.word	0x000de1d0
   d7c38:	2003e600 	.word	0x2003e600

000d7c3c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7c40:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c44:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7c46:	6803      	ldr	r3, [r0, #0]
   d7c48:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c4a:	4605      	mov	r5, r0
   d7c4c:	460c      	mov	r4, r1
   d7c4e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7c50:	4798      	blx	r3
   d7c52:	4580      	cmp	r8, r0
   d7c54:	d80d      	bhi.n	d7c72 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7c56:	3420      	adds	r4, #32
   d7c58:	6868      	ldr	r0, [r5, #4]
   d7c5a:	9600      	str	r6, [sp, #0]
   d7c5c:	463b      	mov	r3, r7
   d7c5e:	b2e2      	uxtb	r2, r4
   d7c60:	216f      	movs	r1, #111	; 0x6f
   d7c62:	f7ff ffa9 	bl	d7bb8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d7c66:	fab0 f080 	clz	r0, r0
   d7c6a:	0940      	lsrs	r0, r0, #5
}
   d7c6c:	b002      	add	sp, #8
   d7c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7c72:	2000      	movs	r0, #0
   d7c74:	e7fa      	b.n	d7c6c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d7c76 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7c7a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c7e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7c80:	6803      	ldr	r3, [r0, #0]
   d7c82:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d7c84:	4604      	mov	r4, r0
   d7c86:	460d      	mov	r5, r1
   d7c88:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7c8a:	4798      	blx	r3
   d7c8c:	4580      	cmp	r8, r0
   d7c8e:	d80c      	bhi.n	d7caa <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d7c90:	6860      	ldr	r0, [r4, #4]
   d7c92:	9600      	str	r6, [sp, #0]
   d7c94:	463b      	mov	r3, r7
   d7c96:	b2ea      	uxtb	r2, r5
   d7c98:	2157      	movs	r1, #87	; 0x57
   d7c9a:	f7ff ff8d 	bl	d7bb8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d7c9e:	fab0 f080 	clz	r0, r0
   d7ca2:	0940      	lsrs	r0, r0, #5
}
   d7ca4:	b002      	add	sp, #8
   d7ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7caa:	2000      	movs	r0, #0
   d7cac:	e7fa      	b.n	d7ca4 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d7cae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d7cae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d7cb0:	1e1e      	subs	r6, r3, #0
   d7cb2:	bf0c      	ite	eq
   d7cb4:	2307      	moveq	r3, #7
   d7cb6:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d7cb8:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d7cba:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d7cbc:	ab02      	add	r3, sp, #8
   d7cbe:	460a      	mov	r2, r1
   d7cc0:	216f      	movs	r1, #111	; 0x6f
   d7cc2:	f7ff ff79 	bl	d7bb8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d7cc6:	4605      	mov	r5, r0
   d7cc8:	b9a8      	cbnz	r0, d7cf6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d7cca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7cce:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d7cd0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d7cd4:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d7cd6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d7cda:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d7cdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7ce0:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d7ce2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d7ce6:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d7ce8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d7cec:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d7cee:	b92e      	cbnz	r6, d7cfc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d7cf0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d7cf4:	72a3      	strb	r3, [r4, #10]
}
   d7cf6:	4628      	mov	r0, r5
   d7cf8:	b004      	add	sp, #16
   d7cfa:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d7cfc:	f002 fc20 	bl	da540 <_ZN9TimeClass4yearEv>
   d7d00:	f7ff fecc 	bl	d7a9c <_ZN12MCP79410Time8intToBcdEi>
   d7d04:	72a0      	strb	r0, [r4, #10]
	return stat;
   d7d06:	e7f6      	b.n	d7cf6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d7d08 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d7d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d7d0a:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d7d0c:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d7d0e:	9300      	str	r3, [sp, #0]
   d7d10:	216f      	movs	r1, #111	; 0x6f
   d7d12:	ab03      	add	r3, sp, #12
   d7d14:	f7ff ff50 	bl	d7bb8 <_ZNK8MCP7941010deviceReadEhhPhj>
   d7d18:	b920      	cbnz	r0, d7d24 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d7d1a:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7d1e:	b005      	add	sp, #20
   d7d20:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d7d24:	2000      	movs	r0, #0
   d7d26:	e7fa      	b.n	d7d1e <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d7d28 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d7d28:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d7d2a:	2103      	movs	r1, #3
   d7d2c:	f7ff ffec 	bl	d7d08 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d7d30:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d7d34:	bd08      	pop	{r3, pc}

000d7d36 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d7d36:	b538      	push	{r3, r4, r5, lr}
   d7d38:	2300      	movs	r3, #0
   d7d3a:	460c      	mov	r4, r1
   d7d3c:	460a      	mov	r2, r1
   d7d3e:	4619      	mov	r1, r3
   d7d40:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d7d42:	f7ff ffb4 	bl	d7cae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d7d46:	b930      	cbnz	r0, d7d56 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7d48:	7aa3      	ldrb	r3, [r4, #10]
   d7d4a:	b123      	cbz	r3, d7d56 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d7d4c:	4628      	mov	r0, r5
}
   d7d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d7d52:	f7ff bfe9 	b.w	d7d28 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d7d56:	2000      	movs	r0, #0
   d7d58:	bd38      	pop	{r3, r4, r5, pc}

000d7d5a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d7d5a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7d5c:	4602      	mov	r2, r0
	MCP79410Time time;
   d7d5e:	a801      	add	r0, sp, #4
   d7d60:	f7ff fe28 	bl	d79b4 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d7d64:	a901      	add	r1, sp, #4
   d7d66:	4610      	mov	r0, r2
   d7d68:	f7ff ffe5 	bl	d7d36 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d7d6c:	b128      	cbz	r0, d7d7a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d7d6e:	a801      	add	r0, sp, #4
   d7d70:	f7ff fe6c 	bl	d7a4c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d7d74:	b007      	add	sp, #28
   d7d76:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d7d7a:	2000      	movs	r0, #0
   d7d7c:	4601      	mov	r1, r0
   d7d7e:	e7f9      	b.n	d7d74 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d7d80 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d7d80:	b5d0      	push	{r4, r6, r7, lr}
   d7d82:	4604      	mov	r4, r0
   d7d84:	b086      	sub	sp, #24
	wire.begin();
   d7d86:	6840      	ldr	r0, [r0, #4]
   d7d88:	f001 fbbe 	bl	d9508 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d7d8c:	f002 fb9e 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d7d90:	b9e8      	cbnz	r0, d7dce <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d7d92:	7ae3      	ldrb	r3, [r4, #11]
   d7d94:	079b      	lsls	r3, r3, #30
   d7d96:	d51a      	bpl.n	d7dce <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d7d98:	4620      	mov	r0, r4
   d7d9a:	f7ff ffde 	bl	d7d5a <_ZNK8MCP7941010getRTCTimeEv>
   d7d9e:	4606      	mov	r6, r0
   d7da0:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d7da2:	ea56 0307 	orrs.w	r3, r6, r7
   d7da6:	d012      	beq.n	d7dce <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d7da8:	f002 fa97 	bl	da2da <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d7dac:	4b0a      	ldr	r3, [pc, #40]	; (d7dd8 <_ZN8MCP794105setupEv+0x58>)
   d7dae:	490b      	ldr	r1, [pc, #44]	; (d7ddc <_ZN8MCP794105setupEv+0x5c>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	9300      	str	r3, [sp, #0]
   d7db4:	4632      	mov	r2, r6
   d7db6:	463b      	mov	r3, r7
   d7db8:	a802      	add	r0, sp, #8
   d7dba:	f002 fb45 	bl	da448 <_ZN9TimeClass6formatExPKc>
   d7dbe:	4808      	ldr	r0, [pc, #32]	; (d7de0 <_ZN8MCP794105setupEv+0x60>)
   d7dc0:	9a02      	ldr	r2, [sp, #8]
   d7dc2:	4908      	ldr	r1, [pc, #32]	; (d7de4 <_ZN8MCP794105setupEv+0x64>)
   d7dc4:	f7fc fb28 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
   d7dc8:	a802      	add	r0, sp, #8
   d7dca:	f002 f8fb 	bl	d9fc4 <_ZN6StringD1Ev>
	setupDone = true;
   d7dce:	2301      	movs	r3, #1
   d7dd0:	7223      	strb	r3, [r4, #8]
}
   d7dd2:	b006      	add	sp, #24
   d7dd4:	bdd0      	pop	{r4, r6, r7, pc}
   d7dd6:	bf00      	nop
   d7dd8:	2003dd10 	.word	0x2003dd10
   d7ddc:	2003e640 	.word	0x2003e640
   d7de0:	2003e600 	.word	0x2003e600
   d7de4:	000de1ea 	.word	0x000de1ea

000d7de8 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dec:	4606      	mov	r6, r0
   d7dee:	4688      	mov	r8, r1
   d7df0:	4691      	mov	r9, r2
   d7df2:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d7df4:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d7df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7df8:	429d      	cmp	r5, r3
   d7dfa:	d229      	bcs.n	d7e50 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d7dfc:	6870      	ldr	r0, [r6, #4]
   d7dfe:	4641      	mov	r1, r8
   d7e00:	f001 fbb1 	bl	d9566 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7e04:	6870      	ldr	r0, [r6, #4]
   d7e06:	eb09 0105 	add.w	r1, r9, r5
   d7e0a:	f7ff fc47 	bl	d769c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d7e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e10:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d7e12:	2f1f      	cmp	r7, #31
   d7e14:	bf28      	it	cs
   d7e16:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d7e18:	eb0a 0405 	add.w	r4, sl, r5
   d7e1c:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d7e20:	6870      	ldr	r0, [r6, #4]
   d7e22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7e26:	6802      	ldr	r2, [r0, #0]
   d7e28:	6892      	ldr	r2, [r2, #8]
   d7e2a:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d7e2c:	45a3      	cmp	fp, r4
   d7e2e:	d1f7      	bne.n	d7e20 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d7e30:	6870      	ldr	r0, [r6, #4]
   d7e32:	2101      	movs	r1, #1
   d7e34:	f001 fb9e 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7e38:	4604      	mov	r4, r0
   d7e3a:	b138      	cbz	r0, d7e4c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d7e3c:	4602      	mov	r2, r0
   d7e3e:	4905      	ldr	r1, [pc, #20]	; (d7e54 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d7e40:	4805      	ldr	r0, [pc, #20]	; (d7e58 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d7e42:	f7fc fae9 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d7e46:	4620      	mov	r0, r4
   d7e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d7e4c:	443d      	add	r5, r7
	while(offset < bufLen) {
   d7e4e:	e7d2      	b.n	d7df6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d7e50:	2400      	movs	r4, #0
	return stat;
   d7e52:	e7f8      	b.n	d7e46 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d7e54:	000de1ff 	.word	0x000de1ff
   d7e58:	2003e600 	.word	0x2003e600

000d7e5c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d7e60:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e64:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7e66:	6803      	ldr	r3, [r0, #0]
   d7e68:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7e6a:	4605      	mov	r5, r0
   d7e6c:	460c      	mov	r4, r1
   d7e6e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d7e70:	4798      	blx	r3
   d7e72:	4580      	cmp	r8, r0
   d7e74:	d80d      	bhi.n	d7e92 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7e76:	3420      	adds	r4, #32
   d7e78:	6868      	ldr	r0, [r5, #4]
   d7e7a:	9600      	str	r6, [sp, #0]
   d7e7c:	463b      	mov	r3, r7
   d7e7e:	b2e2      	uxtb	r2, r4
   d7e80:	216f      	movs	r1, #111	; 0x6f
   d7e82:	f7ff ffb1 	bl	d7de8 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d7e86:	fab0 f080 	clz	r0, r0
   d7e8a:	0940      	lsrs	r0, r0, #5
}
   d7e8c:	b002      	add	sp, #8
   d7e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d7e92:	2000      	movs	r0, #0
   d7e94:	e7fa      	b.n	d7e8c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d7e96 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d7e96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d7e98:	7c13      	ldrb	r3, [r2, #16]
   d7e9a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d7e9e:	7bd3      	ldrb	r3, [r2, #15]
   d7ea0:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d7ea4:	7b93      	ldrb	r3, [r2, #14]
   d7ea6:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d7eaa:	7b53      	ldrb	r3, [r2, #13]
   d7eac:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d7eb0:	7b13      	ldrb	r3, [r2, #12]
   d7eb2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d7eb6:	7ad3      	ldrb	r3, [r2, #11]
   d7eb8:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d7ebc:	7a93      	ldrb	r3, [r2, #10]
   d7ebe:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d7ec2:	2307      	movs	r3, #7
   d7ec4:	9300      	str	r3, [sp, #0]
   d7ec6:	460a      	mov	r2, r1
   d7ec8:	ab02      	add	r3, sp, #8
   d7eca:	216f      	movs	r1, #111	; 0x6f
   d7ecc:	f7ff ff8c 	bl	d7de8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7ed0:	b005      	add	sp, #20
   d7ed2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ed6 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d7ed6:	b510      	push	{r4, lr}
   d7ed8:	b088      	sub	sp, #32
   d7eda:	4604      	mov	r4, r0
	MCP79410Time time;
   d7edc:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d7ede:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d7ee0:	f7ff fd68 	bl	d79b4 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d7ee4:	9b01      	ldr	r3, [sp, #4]
   d7ee6:	a803      	add	r0, sp, #12
   d7ee8:	f7ff fe27 	bl	d7b3a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7eec:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7ef0:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d7ef6:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7efa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d7efe:	b16a      	cbz	r2, d7f1c <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d7f00:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d7f04:	aa03      	add	r2, sp, #12
   d7f06:	2100      	movs	r1, #0
   d7f08:	4620      	mov	r0, r4
   d7f0a:	f88d 3019 	strb.w	r3, [sp, #25]
   d7f0e:	f7ff ffc2 	bl	d7e96 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d7f12:	fab0 f080 	clz	r0, r0
   d7f16:	0940      	lsrs	r0, r0, #5
   d7f18:	b008      	add	sp, #32
   d7f1a:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7f1c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d7f20:	e7f0      	b.n	d7f04 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d7f24 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f26:	b087      	sub	sp, #28
   d7f28:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d7f2a:	f002 facf 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d7f2e:	4604      	mov	r4, r0
   d7f30:	b1e8      	cbz	r0, d7f6e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d7f32:	f002 fae8 	bl	da506 <_ZN9TimeClass3nowEv>
   d7f36:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d7f38:	4602      	mov	r2, r0
		time_t now = Time.now();
   d7f3a:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d7f3c:	463b      	mov	r3, r7
   d7f3e:	4628      	mov	r0, r5
   d7f40:	f7ff ffc9 	bl	d7ed6 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7f44:	4b0c      	ldr	r3, [pc, #48]	; (d7f78 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d7f46:	490d      	ldr	r1, [pc, #52]	; (d7f7c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	9300      	str	r3, [sp, #0]
   d7f4c:	4632      	mov	r2, r6
   d7f4e:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d7f50:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7f52:	a802      	add	r0, sp, #8
   d7f54:	f002 fa78 	bl	da448 <_ZN9TimeClass6formatExPKc>
   d7f58:	4809      	ldr	r0, [pc, #36]	; (d7f80 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7f5a:	9a02      	ldr	r2, [sp, #8]
   d7f5c:	4909      	ldr	r1, [pc, #36]	; (d7f84 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d7f5e:	f7fc fa5b 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
   d7f62:	a802      	add	r0, sp, #8
   d7f64:	f002 f82e 	bl	d9fc4 <_ZN6StringD1Ev>
}
   d7f68:	4620      	mov	r0, r4
   d7f6a:	b007      	add	sp, #28
   d7f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d7f6e:	4906      	ldr	r1, [pc, #24]	; (d7f88 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d7f70:	4803      	ldr	r0, [pc, #12]	; (d7f80 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7f72:	f7fc fa51 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
   d7f76:	e7f7      	b.n	d7f68 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d7f78:	2003dd10 	.word	0x2003dd10
   d7f7c:	2003e640 	.word	0x2003e640
   d7f80:	2003e600 	.word	0x2003e600
   d7f84:	000de21a 	.word	0x000de21a
   d7f88:	000de230 	.word	0x000de230

000d7f8c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d7f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d7f8e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d7f90:	4604      	mov	r4, r0
	if (!timeSet) {
   d7f92:	b99d      	cbnz	r5, d7fbc <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d7f94:	f002 fa9a 	bl	da4cc <_ZN9TimeClass7isValidEv>
   d7f98:	b180      	cbz	r0, d7fbc <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d7f9a:	2200      	movs	r2, #0
   d7f9c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d7f9e:	4669      	mov	r1, sp
   d7fa0:	4628      	mov	r0, r5
        tm = 0;
   d7fa2:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d7fa6:	f000 fe45 	bl	d8c34 <spark_sync_time_last>
			if (lastSync != 0) {
   d7faa:	b138      	cbz	r0, d7fbc <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7fac:	7ae3      	ldrb	r3, [r4, #11]
   d7fae:	07db      	lsls	r3, r3, #31
   d7fb0:	d502      	bpl.n	d7fb8 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d7fb2:	4620      	mov	r0, r4
   d7fb4:	f7ff ffb6 	bl	d7f24 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d7fb8:	2301      	movs	r3, #1
   d7fba:	7263      	strb	r3, [r4, #9]
}
   d7fbc:	b003      	add	sp, #12
   d7fbe:	bd30      	pop	{r4, r5, pc}

000d7fc0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d7fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7fc2:	2301      	movs	r3, #1
	buf[0] = value;
   d7fc4:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7fc8:	9300      	str	r3, [sp, #0]
   d7fca:	460a      	mov	r2, r1
   d7fcc:	ab03      	add	r3, sp, #12
   d7fce:	216f      	movs	r1, #111	; 0x6f
   d7fd0:	f7ff ff0a 	bl	d7de8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7fd4:	b005      	add	sp, #20
   d7fd6:	f85d fb04 	ldr.w	pc, [sp], #4

000d7fda <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d7fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7fdc:	4604      	mov	r4, r0
   d7fde:	460d      	mov	r5, r1
   d7fe0:	4617      	mov	r7, r2
   d7fe2:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d7fe4:	f7ff fe90 	bl	d7d08 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d7fe8:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7fec:	4332      	orrs	r2, r6
   d7fee:	4629      	mov	r1, r5
   d7ff0:	4620      	mov	r0, r4
}
   d7ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d7ff6:	f7ff bfe3 	b.w	d7fc0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d7ffa <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d7ffa:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d7ffc:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7ffe:	d80c      	bhi.n	d801a <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d8000:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d8002:	f04f 0300 	mov.w	r3, #0
   d8006:	bf14      	ite	ne
   d8008:	22df      	movne	r2, #223	; 0xdf
   d800a:	22ef      	moveq	r2, #239	; 0xef
   d800c:	2107      	movs	r1, #7
   d800e:	f7ff ffe4 	bl	d7fda <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d8012:	fab0 f080 	clz	r0, r0
   d8016:	0940      	lsrs	r0, r0, #5
}
   d8018:	bd08      	pop	{r3, pc}
		return false;
   d801a:	2000      	movs	r0, #0
   d801c:	e7fc      	b.n	d8018 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d801e <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d801e:	b538      	push	{r3, r4, r5, lr}
   d8020:	4604      	mov	r4, r0
   d8022:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d8024:	6860      	ldr	r0, [r4, #4]
   d8026:	2157      	movs	r1, #87	; 0x57
   d8028:	f001 fa9d 	bl	d9566 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d802c:	6860      	ldr	r0, [r4, #4]
   d802e:	2101      	movs	r1, #1
   d8030:	f001 faa0 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d8034:	b108      	cbz	r0, d803a <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d8036:	3d01      	subs	r5, #1
   d8038:	d1f4      	bne.n	d8024 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d803a:	bd38      	pop	{r3, r4, r5, pc}

000d803c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8040:	4604      	mov	r4, r0
   d8042:	460f      	mov	r7, r1
   d8044:	4616      	mov	r6, r2
   d8046:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d804a:	45b0      	cmp	r8, r6
   d804c:	d020      	beq.n	d8090 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d804e:	6860      	ldr	r0, [r4, #4]
   d8050:	2157      	movs	r1, #87	; 0x57
   d8052:	f001 fa88 	bl	d9566 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d8056:	4639      	mov	r1, r7
   d8058:	6860      	ldr	r0, [r4, #4]
   d805a:	f7ff fb1f 	bl	d769c <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d805e:	6860      	ldr	r0, [r4, #4]
   d8060:	f816 1b01 	ldrb.w	r1, [r6], #1
   d8064:	6803      	ldr	r3, [r0, #0]
   d8066:	689b      	ldr	r3, [r3, #8]
   d8068:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d806a:	6860      	ldr	r0, [r4, #4]
   d806c:	2101      	movs	r1, #1
   d806e:	f001 fa81 	bl	d9574 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d8072:	3701      	adds	r7, #1
   d8074:	4605      	mov	r5, r0
   d8076:	b138      	cbz	r0, d8088 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d8078:	4602      	mov	r2, r0
   d807a:	4906      	ldr	r1, [pc, #24]	; (d8094 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d807c:	4806      	ldr	r0, [pc, #24]	; (d8098 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d807e:	f7fc f9cb 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
}
   d8082:	4628      	mov	r0, r5
   d8084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d8088:	4620      	mov	r0, r4
   d808a:	f7ff ffc8 	bl	d801e <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d808e:	e7dc      	b.n	d804a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d8090:	2500      	movs	r5, #0
	return stat;
   d8092:	e7f6      	b.n	d8082 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d8094:	000de245 	.word	0x000de245
   d8098:	2003e600 	.word	0x2003e600

000d809c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d809c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d809e:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d80a0:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d80a2:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d80a4:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d80a6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d80a8:	4604      	mov	r4, r0
   d80aa:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d80ac:	4798      	blx	r3
   d80ae:	4287      	cmp	r7, r0
   d80b0:	d80a      	bhi.n	d80c8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d80b2:	9a01      	ldr	r2, [sp, #4]
   d80b4:	6860      	ldr	r0, [r4, #4]
   d80b6:	4633      	mov	r3, r6
   d80b8:	b2e9      	uxtb	r1, r5
   d80ba:	f7ff ffbf 	bl	d803c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d80be:	fab0 f080 	clz	r0, r0
   d80c2:	0940      	lsrs	r0, r0, #5
}
   d80c4:	b003      	add	sp, #12
   d80c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d80c8:	2000      	movs	r0, #0
   d80ca:	e7fb      	b.n	d80c4 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d80cc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d80cc:	4b01      	ldr	r3, [pc, #4]	; (d80d4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d80ce:	4a02      	ldr	r2, [pc, #8]	; (d80d8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d80d0:	601a      	str	r2, [r3, #0]
}
   d80d2:	4770      	bx	lr
   d80d4:	2003e600 	.word	0x2003e600
   d80d8:	000de266 	.word	0x000de266

000d80dc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d80dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d80de:	4603      	mov	r3, r0
	switch (__op)
   d80e0:	d102      	bne.n	d80e8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d80e2:	6001      	str	r1, [r0, #0]
      }
   d80e4:	2000      	movs	r0, #0
   d80e6:	4770      	bx	lr
	  switch (__op)
   d80e8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d80ea:	bf04      	itt	eq
   d80ec:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d80f0:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d80f4:	e7f6      	b.n	d80e4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d80f6 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d80f6:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d80f8:	2301      	movs	r3, #1
   d80fa:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d80fc:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d80fe:	4604      	mov	r4, r0
        if (th->func) {
   d8100:	b143      	cbz	r3, d8114 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d8102:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8104:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d8106:	2301      	movs	r3, #1
   d8108:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d810a:	2000      	movs	r0, #0
    }
   d810c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d8110:	f000 bb32 	b.w	d8778 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d8114:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d8116:	2800      	cmp	r0, #0
   d8118:	d0f5      	beq.n	d8106 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d811a:	6883      	ldr	r3, [r0, #8]
   d811c:	b90b      	cbnz	r3, d8122 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d811e:	f002 fd2c 	bl	dab7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8122:	68c3      	ldr	r3, [r0, #12]
   d8124:	e7ee      	b.n	d8104 <_ZN6Thread3runEPv+0xe>

000d8126 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8126:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d8128:	6842      	ldr	r2, [r0, #4]
   d812a:	4603      	mov	r3, r0
   d812c:	1054      	asrs	r4, r2, #1
   d812e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d8132:	07d2      	lsls	r2, r2, #31
   d8134:	bf48      	it	mi
   d8136:	590a      	ldrmi	r2, [r1, r4]
   d8138:	681b      	ldr	r3, [r3, #0]
      }
   d813a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d813e:	bf48      	it	mi
   d8140:	58d3      	ldrmi	r3, [r2, r3]
   d8142:	4718      	bx	r3

000d8144 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d8144:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d8146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d8148:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d814c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d814e:	3008      	adds	r0, #8
   d8150:	f000 faea 	bl	d8728 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d8154:	2004      	movs	r0, #4
   d8156:	f7fb ff9e 	bl	d4096 <_Znwj>
   d815a:	4605      	mov	r5, r0
   d815c:	b398      	cbz	r0, d81c6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d815e:	491b      	ldr	r1, [pc, #108]	; (d81cc <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d8160:	2014      	movs	r0, #20
   d8162:	f002 fd06 	bl	dab72 <_ZnwjRKSt9nothrow_t>
   d8166:	b130      	cbz	r0, d8176 <_ZN21PublishQueueAsyncBase5setupEv+0x32>
      : _M_head_impl() { }
   d8168:	2300      	movs	r3, #0
            exited(false) {
   d816a:	e9c0 3300 	strd	r3, r3, [r0]
   d816e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d8172:	7403      	strb	r3, [r0, #16]
   d8174:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d8176:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d8178:	b1a0      	cbz	r0, d81a4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d817a:	4b15      	ldr	r3, [pc, #84]	; (d81d0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d817c:	4915      	ldr	r1, [pc, #84]	; (d81d4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d817e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d8182:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d8186:	e9cd 0300 	strd	r0, r3, [sp]
   d818a:	2202      	movs	r2, #2
   d818c:	4b12      	ldr	r3, [pc, #72]	; (d81d8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d818e:	3004      	adds	r0, #4
   d8190:	f000 fa92 	bl	d86b8 <os_thread_create>
   d8194:	b930      	cbnz	r0, d81a4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d8196:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d8198:	7c1b      	ldrb	r3, [r3, #16]
   d819a:	b9a3      	cbnz	r3, d81c6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d819c:	2001      	movs	r0, #1
   d819e:	f000 fb0b 	bl	d87b8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d81a2:	e7f8      	b.n	d8196 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81a4:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d81a6:	2300      	movs	r3, #0
   d81a8:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d81aa:	b164      	cbz	r4, d81c6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d81ac:	6827      	ldr	r7, [r4, #0]
   d81ae:	b137      	cbz	r7, d81be <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d81b0:	4638      	mov	r0, r7
   d81b2:	f7fc f8ad 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d81b6:	2110      	movs	r1, #16
   d81b8:	4638      	mov	r0, r7
   d81ba:	f002 fcd8 	bl	dab6e <_ZdlPvj>
   d81be:	2114      	movs	r1, #20
   d81c0:	4620      	mov	r0, r4
   d81c2:	f002 fcd4 	bl	dab6e <_ZdlPvj>
   d81c6:	6075      	str	r5, [r6, #4]
}
   d81c8:	b003      	add	sp, #12
   d81ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d81cc:	000de5cc 	.word	0x000de5cc
   d81d0:	000d83e3 	.word	0x000d83e3
   d81d4:	000de2d8 	.word	0x000de2d8
   d81d8:	000d80f7 	.word	0x000d80f7

000d81dc <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d81dc:	f247 5130 	movw	r1, #30000	; 0x7530
   d81e0:	4a08      	ldr	r2, [pc, #32]	; (d8204 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d81e2:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d81e4:	4908      	ldr	r1, [pc, #32]	; (d8208 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d81e6:	6002      	str	r2, [r0, #0]
   d81e8:	2200      	movs	r2, #0
   d81ea:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d81ee:	4907      	ldr	r1, [pc, #28]	; (d820c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d81f0:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d81f2:	4907      	ldr	r1, [pc, #28]	; (d8210 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d81f4:	6042      	str	r2, [r0, #4]
   d81f6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d81fa:	6181      	str	r1, [r0, #24]
   d81fc:	8502      	strh	r2, [r0, #40]	; 0x28
   d81fe:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d8202:	4770      	bx	lr
   d8204:	000de39c 	.word	0x000de39c
   d8208:	000d854d 	.word	0x000d854d
   d820c:	000d8127 	.word	0x000d8127
   d8210:	000d80dd 	.word	0x000d80dd

000d8214 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d8214:	b510      	push	{r4, lr}
   d8216:	4b04      	ldr	r3, [pc, #16]	; (d8228 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d8218:	4604      	mov	r4, r0
   d821a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d821e:	f7fc f877 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
}
   d8222:	4620      	mov	r0, r4
   d8224:	bd10      	pop	{r4, pc}
   d8226:	bf00      	nop
   d8228:	000de39c 	.word	0x000de39c

000d822c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d822c:	b510      	push	{r4, lr}
   d822e:	4b03      	ldr	r3, [pc, #12]	; (d823c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d8230:	6003      	str	r3, [r0, #0]
   d8232:	4604      	mov	r4, r0
   d8234:	f7ff ffee 	bl	d8214 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d8238:	4620      	mov	r0, r4
   d823a:	bd10      	pop	{r4, pc}
   d823c:	000de3c4 	.word	0x000de3c4

000d8240 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d8240:	b510      	push	{r4, lr}
   d8242:	4604      	mov	r4, r0
}
   d8244:	f7ff fff2 	bl	d822c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d8248:	4620      	mov	r0, r4
   d824a:	2138      	movs	r1, #56	; 0x38
   d824c:	f002 fc8f 	bl	dab6e <_ZdlPvj>
   d8250:	4620      	mov	r0, r4
   d8252:	bd10      	pop	{r4, pc}

000d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d8254:	6880      	ldr	r0, [r0, #8]
   d8256:	f000 ba6f 	b.w	d8738 <os_mutex_lock>

000d825a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d825a:	6880      	ldr	r0, [r0, #8]
   d825c:	f000 ba74 	b.w	d8748 <os_mutex_unlock>

000d8260 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d8260:	b510      	push	{r4, lr}
   d8262:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d8264:	6800      	ldr	r0, [r0, #0]
   d8266:	f7ff fff8 	bl	d825a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d826a:	4620      	mov	r0, r4
   d826c:	bd10      	pop	{r4, pc}

000d826e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d826e:	b513      	push	{r0, r1, r4, lr}
   d8270:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d8272:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d8274:	f7ff ffee 	bl	d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d8278:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d827a:	88dc      	ldrh	r4, [r3, #6]
   d827c:	b2a4      	uxth	r4, r4
   d827e:	b10c      	cbz	r4, d8284 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d8280:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d8284:	a801      	add	r0, sp, #4
   d8286:	f7ff ffeb 	bl	d8260 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d828a:	4620      	mov	r0, r4
   d828c:	b002      	add	sp, #8
   d828e:	bd10      	pop	{r4, pc}

000d8290 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d8290:	b513      	push	{r0, r1, r4, lr}
   d8292:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d8294:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d8296:	f7ff ffdd 	bl	d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d829a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d829e:	b943      	cbnz	r3, d82b2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d82a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d82a2:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d82a4:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d82a6:	a801      	add	r0, sp, #4
   d82a8:	f7ff ffda 	bl	d8260 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d82ac:	4620      	mov	r0, r4
   d82ae:	b002      	add	sp, #8
   d82b0:	bd10      	pop	{r4, pc}
	bool result = false;
   d82b2:	2400      	movs	r4, #0
   d82b4:	e7f7      	b.n	d82a6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d82b6 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d82b6:	b513      	push	{r0, r1, r4, lr}
   d82b8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d82ba:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d82bc:	f7ff ffca 	bl	d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d82c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d82c2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d82c4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d82c6:	f7ff ffcb 	bl	d8260 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d82ca:	4620      	mov	r0, r4
   d82cc:	b002      	add	sp, #8
   d82ce:	bd10      	pop	{r4, pc}

000d82d0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d82d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d82d4:	4699      	mov	r9, r3
   d82d6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d82d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d82dc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d82e0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d82e4:	4604      	mov	r4, r0
   d82e6:	460f      	mov	r7, r1
   d82e8:	4616      	mov	r6, r2
	if (!haveSetup) {
   d82ea:	b913      	cbnz	r3, d82f2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d82ec:	6803      	ldr	r3, [r0, #0]
   d82ee:	689b      	ldr	r3, [r3, #8]
   d82f0:	4798      	blx	r3
		data = "";
   d82f2:	4b31      	ldr	r3, [pc, #196]	; (d83b8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d82f4:	4638      	mov	r0, r7
		data = "";
   d82f6:	2e00      	cmp	r6, #0
   d82f8:	bf08      	it	eq
   d82fa:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d82fc:	f003 fb2f 	bl	db95e <strlen>
   d8300:	4605      	mov	r5, r0
   d8302:	4630      	mov	r0, r6
   d8304:	f003 fb2b 	bl	db95e <strlen>
   d8308:	4428      	add	r0, r5
   d830a:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d830e:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d8310:	bf1c      	itt	ne
   d8312:	f025 0503 	bicne.w	r5, r5, #3
   d8316:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d8318:	4633      	mov	r3, r6
   d831a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d831e:	e9cd 9a00 	strd	r9, sl, [sp]
   d8322:	4926      	ldr	r1, [pc, #152]	; (d83bc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d8324:	4826      	ldr	r0, [pc, #152]	; (d83c0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d8326:	463a      	mov	r2, r7
   d8328:	f7fc f876 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d832c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d832e:	3b08      	subs	r3, #8
   d8330:	42ab      	cmp	r3, r5
   d8332:	d212      	bcs.n	d835a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d8334:	2400      	movs	r4, #0
}
   d8336:	4620      	mov	r0, r4
   d8338:	b006      	add	sp, #24
   d833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d833e:	88cb      	ldrh	r3, [r1, #6]
   d8340:	2b01      	cmp	r3, #1
   d8342:	d036      	beq.n	d83b2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d8344:	a805      	add	r0, sp, #20
   d8346:	f7ff ff8b 	bl	d8260 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d834a:	6823      	ldr	r3, [r4, #0]
   d834c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d8350:	699b      	ldr	r3, [r3, #24]
   d8352:	4620      	mov	r0, r4
   d8354:	4798      	blx	r3
   d8356:	2800      	cmp	r0, #0
   d8358:	d0ec      	beq.n	d8334 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d835a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d835c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d835e:	f7ff ff79 	bl	d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8362:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d8364:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d8366:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8368:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d836a:	1ad2      	subs	r2, r2, r3
   d836c:	42aa      	cmp	r2, r5
   d836e:	d3e6      	bcc.n	d833e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d8370:	ea48 080a 	orr.w	r8, r8, sl
   d8374:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d8378:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d837c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d837e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d8382:	4639      	mov	r1, r7
   d8384:	4640      	mov	r0, r8
   d8386:	f003 fac5 	bl	db914 <strcpy>
				cp += strlen(cp) + 1;
   d838a:	4640      	mov	r0, r8
   d838c:	f003 fae7 	bl	db95e <strlen>
   d8390:	3001      	adds	r0, #1
				strcpy(cp, data);
   d8392:	4631      	mov	r1, r6
   d8394:	4440      	add	r0, r8
   d8396:	f003 fabd 	bl	db914 <strcpy>
				nextFree += size;
   d839a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d839c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d839e:	441d      	add	r5, r3
   d83a0:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d83a2:	88d3      	ldrh	r3, [r2, #6]
   d83a4:	3301      	adds	r3, #1
   d83a6:	80d3      	strh	r3, [r2, #6]
				return true;
   d83a8:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d83aa:	a805      	add	r0, sp, #20
   d83ac:	f7ff ff58 	bl	d8260 <_ZN11StMutexLockD1Ev>
   d83b0:	e7c1      	b.n	d8336 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d83b2:	2400      	movs	r4, #0
   d83b4:	e7f9      	b.n	d83aa <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d83b6:	bf00      	nop
   d83b8:	000de5f4 	.word	0x000de5f4
   d83bc:	000de2ea 	.word	0x000de2ea
   d83c0:	2003e604 	.word	0x2003e604

000d83c4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83c8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d83cc:	69a3      	ldr	r3, [r4, #24]
   d83ce:	b90b      	cbnz	r3, d83d4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d83d0:	f002 fbd3 	bl	dab7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83d4:	69e3      	ldr	r3, [r4, #28]
   d83d6:	4621      	mov	r1, r4
   d83d8:	4628      	mov	r0, r5
   d83da:	4798      	blx	r3
		os_thread_yield();
   d83dc:	f000 f974 	bl	d86c8 <os_thread_yield>
	while(true) {
   d83e0:	e7f4      	b.n	d83cc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d83e2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d83e2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d83e4:	f7ff ffee 	bl	d83c4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d83e8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d83e8:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d83ea:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d83ee:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d83f0:	4628      	mov	r0, r5
   d83f2:	f003 fab4 	bl	db95e <strlen>
   d83f6:	3001      	adds	r0, #1
   d83f8:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d83fa:	4628      	mov	r0, r5
   d83fc:	f003 faaf 	bl	db95e <strlen>
	size_t offset = start - retainedBuffer;
   d8400:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d8402:	3001      	adds	r0, #1
   d8404:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d8406:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d8408:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d840c:	bf1c      	itt	ne
   d840e:	f1c3 0304 	rsbne	r3, r3, #4
   d8412:	18c0      	addne	r0, r0, r3
}
   d8414:	bd68      	pop	{r3, r5, r6, pc}

000d8416 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d8416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8418:	4604      	mov	r4, r0
   d841a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d841c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d841e:	f7ff ff19 	bl	d8254 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d8422:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d8424:	88fb      	ldrh	r3, [r7, #6]
   d8426:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d842a:	b1e6      	cbz	r6, d8466 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d842c:	2b01      	cmp	r3, #1
   d842e:	d922      	bls.n	d8476 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d8430:	4629      	mov	r1, r5
   d8432:	4620      	mov	r0, r4
   d8434:	f7ff ffd8 	bl	d83e8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d8438:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d843a:	4629      	mov	r1, r5
   d843c:	4620      	mov	r0, r4
   d843e:	f7ff ffd3 	bl	d83e8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d8442:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8444:	443a      	add	r2, r7
	if (after > 0) {
   d8446:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d8448:	4601      	mov	r1, r0
	size_t len = next - start;
   d844a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d844e:	d002      	beq.n	d8456 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d8450:	4628      	mov	r0, r5
   d8452:	f003 fa0f 	bl	db874 <memmove>
	nextFree -= len;
   d8456:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d8458:	1b9b      	subs	r3, r3, r6
   d845a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d845c:	88fb      	ldrh	r3, [r7, #6]
   d845e:	3b01      	subs	r3, #1
   d8460:	80fb      	strh	r3, [r7, #6]
	return true;
   d8462:	2601      	movs	r6, #1
   d8464:	e001      	b.n	d846a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d8466:	2b00      	cmp	r3, #0
   d8468:	d1e7      	bne.n	d843a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d846a:	a801      	add	r0, sp, #4
   d846c:	f7ff fef8 	bl	d8260 <_ZN11StMutexLockD1Ev>
}
   d8470:	4630      	mov	r0, r6
   d8472:	b003      	add	sp, #12
   d8474:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d8476:	2600      	movs	r6, #0
   d8478:	e7f7      	b.n	d846a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d847c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8480:	460d      	mov	r5, r1
   d8482:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8484:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d8486:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8488:	f7ff fea8 	bl	d81dc <_ZN21PublishQueueAsyncBaseC1Ev>
   d848c:	4b15      	ldr	r3, [pc, #84]	; (d84e4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d848e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8492:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8494:	4b14      	ldr	r3, [pc, #80]	; (d84e8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d8496:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d8498:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d849a:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d849c:	4698      	mov	r8, r3
   d849e:	d117      	bne.n	d84d0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d84a0:	88ab      	ldrh	r3, [r5, #4]
   d84a2:	b29b      	uxth	r3, r3
   d84a4:	42b3      	cmp	r3, r6
   d84a6:	d113      	bne.n	d84d0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d84a8:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d84ac:	6367      	str	r7, [r4, #52]	; 0x34
   d84ae:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d84b2:	88eb      	ldrh	r3, [r5, #6]
   d84b4:	fa1f f289 	uxth.w	r2, r9
   d84b8:	b29b      	uxth	r3, r3
   d84ba:	429a      	cmp	r2, r3
   d84bc:	d20e      	bcs.n	d84dc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d84be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d84c0:	4620      	mov	r0, r4
   d84c2:	f7ff ff91 	bl	d83e8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d84c6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d84c8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d84ca:	f109 0901 	add.w	r9, r9, #1
   d84ce:	d9f0      	bls.n	d84b2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d84d0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d84d2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d84d6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d84d8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d84da:	80eb      	strh	r3, [r5, #6]
}
   d84dc:	4620      	mov	r0, r4
   d84de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84e2:	bf00      	nop
   d84e4:	000de3c4 	.word	0x000de3c4
   d84e8:	d19cab61 	.word	0xd19cab61

000d84ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d84ec:	b510      	push	{r4, lr}
   d84ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   d84f2:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d84f4:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d84f6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d84f8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d84fa:	b90a      	cbnz	r2, d8500 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d84fc:	07d9      	lsls	r1, r3, #31
   d84fe:	d505      	bpl.n	d850c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8500:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d8504:	4b0f      	ldr	r3, [pc, #60]	; (d8544 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d8506:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8508:	4b0f      	ldr	r3, [pc, #60]	; (d8548 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d850a:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d850c:	ab02      	add	r3, sp, #8
   d850e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8512:	466a      	mov	r2, sp
   d8514:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8518:	e894 0003 	ldmia.w	r4, {r0, r1}
   d851c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8520:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8524:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d8526:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d852a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d852c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d852e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8530:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d8532:	4618      	mov	r0, r3
   d8534:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8536:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8538:	9105      	str	r1, [sp, #20]
   d853a:	f7fb fee9 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	}
   d853e:	4620      	mov	r0, r4
   d8540:	b006      	add	sp, #24
   d8542:	bd10      	pop	{r4, pc}
   d8544:	000d8127 	.word	0x000d8127
   d8548:	000d80dd 	.word	0x000d80dd

000d854c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d854c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d854e:	4b05      	ldr	r3, [pc, #20]	; (d8564 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d8550:	9300      	str	r3, [sp, #0]
   d8552:	4669      	mov	r1, sp
   d8554:	2300      	movs	r3, #0
   d8556:	3010      	adds	r0, #16
   d8558:	9301      	str	r3, [sp, #4]
   d855a:	f7ff ffc7 	bl	d84ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d855e:	b003      	add	sp, #12
   d8560:	f85d fb04 	ldr.w	pc, [sp], #4
   d8564:	000d8595 	.word	0x000d8595

000d8568 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d8568:	b513      	push	{r0, r1, r4, lr}
   d856a:	4604      	mov	r4, r0
   d856c:	f000 f934 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d8570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8572:	1ac0      	subs	r0, r0, r3
   d8574:	68e3      	ldr	r3, [r4, #12]
   d8576:	4298      	cmp	r0, r3
   d8578:	d308      	bcc.n	d858c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d857a:	4b05      	ldr	r3, [pc, #20]	; (d8590 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d857c:	9300      	str	r3, [sp, #0]
   d857e:	4669      	mov	r1, sp
   d8580:	2300      	movs	r3, #0
   d8582:	f104 0010 	add.w	r0, r4, #16
   d8586:	9301      	str	r3, [sp, #4]
   d8588:	f7ff ffb0 	bl	d84ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d858c:	b002      	add	sp, #8
   d858e:	bd10      	pop	{r4, pc}
   d8590:	000d8595 	.word	0x000d8595

000d8594 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d8594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d8598:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d859c:	b086      	sub	sp, #24
   d859e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d85a0:	2b00      	cmp	r3, #0
   d85a2:	d164      	bne.n	d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d85a4:	f000 fb16 	bl	d8bd4 <spark_cloud_flag_connected>
   d85a8:	2800      	cmp	r0, #0
   d85aa:	d060      	beq.n	d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d85ac:	f000 f914 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
   d85b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d85b2:	1ac0      	subs	r0, r0, r3
   d85b4:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d85b8:	4298      	cmp	r0, r3
   d85ba:	d958      	bls.n	d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d85bc:	6823      	ldr	r3, [r4, #0]
   d85be:	4620      	mov	r0, r4
   d85c0:	695b      	ldr	r3, [r3, #20]
   d85c2:	4798      	blx	r3
		if (data) {
   d85c4:	4605      	mov	r5, r0
   d85c6:	2800      	cmp	r0, #0
   d85c8:	d051      	beq.n	d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d85ca:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d85ce:	2301      	movs	r3, #1
   d85d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d85d4:	4638      	mov	r0, r7
   d85d6:	f003 f9c2 	bl	db95e <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d85da:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d85de:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d85e2:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d85e4:	682b      	ldr	r3, [r5, #0]
   d85e6:	492b      	ldr	r1, [pc, #172]	; (d8694 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d85e8:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d85ea:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d85ec:	4633      	mov	r3, r6
   d85ee:	482a      	ldr	r0, [pc, #168]	; (d8698 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d85f0:	463a      	mov	r2, r7
   d85f2:	f7fb ff11 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d85f6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d85f8:	f88d 8000 	strb.w	r8, [sp]
   d85fc:	4632      	mov	r2, r6
   d85fe:	4639      	mov	r1, r7
   d8600:	a802      	add	r0, sp, #8
   d8602:	f000 fd8f 	bl	d9124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d8606:	9d02      	ldr	r5, [sp, #8]
   d8608:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d860a:	b91b      	cbnz	r3, d8614 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d860c:	2001      	movs	r0, #1
   d860e:	f000 fbf9 	bl	d8e04 <delay>
			while(!request.isDone()) {
   d8612:	e7f8      	b.n	d8606 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8614:	2000      	movs	r0, #0
   d8616:	f000 fa7f 	bl	d8b18 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d861a:	b120      	cbz	r0, d8626 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d861c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d861e:	b913      	cbnz	r3, d8626 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d8620:	f000 fac8 	bl	d8bb4 <spark_process>
    }
   d8624:	e7fa      	b.n	d861c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8626:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d8628:	2b01      	cmp	r3, #1
   d862a:	d123      	bne.n	d8674 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d862c:	491b      	ldr	r1, [pc, #108]	; (d869c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d862e:	481a      	ldr	r0, [pc, #104]	; (d8698 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8630:	f7fb fef2 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d8634:	6823      	ldr	r3, [r4, #0]
   d8636:	2100      	movs	r1, #0
   d8638:	699b      	ldr	r3, [r3, #24]
   d863a:	4620      	mov	r0, r4
   d863c:	4798      	blx	r3
			isSending = false;
   d863e:	2300      	movs	r3, #0
   d8640:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d8644:	f000 f8c8 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d8648:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d864a:	9c03      	ldr	r4, [sp, #12]
   d864c:	b17c      	cbz	r4, d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d864e:	6863      	ldr	r3, [r4, #4]
   d8650:	3b01      	subs	r3, #1
   d8652:	6063      	str	r3, [r4, #4]
   d8654:	b95b      	cbnz	r3, d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d8656:	6823      	ldr	r3, [r4, #0]
   d8658:	4620      	mov	r0, r4
   d865a:	689b      	ldr	r3, [r3, #8]
   d865c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d865e:	68a3      	ldr	r3, [r4, #8]
   d8660:	3b01      	subs	r3, #1
   d8662:	60a3      	str	r3, [r4, #8]
   d8664:	b91b      	cbnz	r3, d866e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d8666:	6823      	ldr	r3, [r4, #0]
   d8668:	4620      	mov	r0, r4
   d866a:	68db      	ldr	r3, [r3, #12]
   d866c:	4798      	blx	r3
}
   d866e:	b006      	add	sp, #24
   d8670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d8674:	68e2      	ldr	r2, [r4, #12]
   d8676:	490a      	ldr	r1, [pc, #40]	; (d86a0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d8678:	4807      	ldr	r0, [pc, #28]	; (d8698 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d867a:	f7fb fecd 	bl	d4418 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d867e:	4b09      	ldr	r3, [pc, #36]	; (d86a4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d8680:	9304      	str	r3, [sp, #16]
   d8682:	a904      	add	r1, sp, #16
   d8684:	2300      	movs	r3, #0
   d8686:	f104 0010 	add.w	r0, r4, #16
   d868a:	9305      	str	r3, [sp, #20]
   d868c:	f7ff ff2e 	bl	d84ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8690:	e7d5      	b.n	d863e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d8692:	bf00      	nop
   d8694:	000de32b 	.word	0x000de32b
   d8698:	2003e604 	.word	0x2003e604
   d869c:	000de34c 	.word	0x000de34c
   d86a0:	000de363 	.word	0x000de363
   d86a4:	000d8569 	.word	0x000d8569

000d86a8 <_GLOBAL__sub_I_pubqLogger>:
   d86a8:	4b01      	ldr	r3, [pc, #4]	; (d86b0 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d86aa:	4a02      	ldr	r2, [pc, #8]	; (d86b4 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d86ac:	601a      	str	r2, [r3, #0]
}
   d86ae:	4770      	bx	lr
   d86b0:	2003e604 	.word	0x2003e604
   d86b4:	000de38a 	.word	0x000de38a

000d86b8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d86b8:	b508      	push	{r3, lr}
   d86ba:	4b02      	ldr	r3, [pc, #8]	; (d86c4 <os_thread_create+0xc>)
   d86bc:	681b      	ldr	r3, [r3, #0]
   d86be:	685b      	ldr	r3, [r3, #4]
   d86c0:	9301      	str	r3, [sp, #4]
   d86c2:	bd08      	pop	{r3, pc}
   d86c4:	00030248 	.word	0x00030248

000d86c8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d86c8:	b508      	push	{r3, lr}
   d86ca:	4b02      	ldr	r3, [pc, #8]	; (d86d4 <os_thread_yield+0xc>)
   d86cc:	681b      	ldr	r3, [r3, #0]
   d86ce:	68db      	ldr	r3, [r3, #12]
   d86d0:	9301      	str	r3, [sp, #4]
   d86d2:	bd08      	pop	{r3, pc}
   d86d4:	00030248 	.word	0x00030248

000d86d8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d86d8:	b508      	push	{r3, lr}
   d86da:	4b02      	ldr	r3, [pc, #8]	; (d86e4 <os_thread_scheduling+0xc>)
   d86dc:	681b      	ldr	r3, [r3, #0]
   d86de:	69db      	ldr	r3, [r3, #28]
   d86e0:	9301      	str	r3, [sp, #4]
   d86e2:	bd08      	pop	{r3, pc}
   d86e4:	00030248 	.word	0x00030248

000d86e8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d86e8:	b508      	push	{r3, lr}
   d86ea:	4b02      	ldr	r3, [pc, #8]	; (d86f4 <os_timer_create+0xc>)
   d86ec:	681b      	ldr	r3, [r3, #0]
   d86ee:	6a1b      	ldr	r3, [r3, #32]
   d86f0:	9301      	str	r3, [sp, #4]
   d86f2:	bd08      	pop	{r3, pc}
   d86f4:	00030248 	.word	0x00030248

000d86f8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d86f8:	b508      	push	{r3, lr}
   d86fa:	4b02      	ldr	r3, [pc, #8]	; (d8704 <os_timer_destroy+0xc>)
   d86fc:	681b      	ldr	r3, [r3, #0]
   d86fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8700:	9301      	str	r3, [sp, #4]
   d8702:	bd08      	pop	{r3, pc}
   d8704:	00030248 	.word	0x00030248

000d8708 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d8708:	b508      	push	{r3, lr}
   d870a:	4b02      	ldr	r3, [pc, #8]	; (d8714 <os_timer_get_id+0xc>)
   d870c:	681b      	ldr	r3, [r3, #0]
   d870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8710:	9301      	str	r3, [sp, #4]
   d8712:	bd08      	pop	{r3, pc}
   d8714:	00030248 	.word	0x00030248

000d8718 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d8718:	b508      	push	{r3, lr}
   d871a:	4b02      	ldr	r3, [pc, #8]	; (d8724 <os_timer_change+0xc>)
   d871c:	681b      	ldr	r3, [r3, #0]
   d871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8720:	9301      	str	r3, [sp, #4]
   d8722:	bd08      	pop	{r3, pc}
   d8724:	00030248 	.word	0x00030248

000d8728 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d8728:	b508      	push	{r3, lr}
   d872a:	4b02      	ldr	r3, [pc, #8]	; (d8734 <os_mutex_create+0xc>)
   d872c:	681b      	ldr	r3, [r3, #0]
   d872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8730:	9301      	str	r3, [sp, #4]
   d8732:	bd08      	pop	{r3, pc}
   d8734:	00030248 	.word	0x00030248

000d8738 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d8738:	b508      	push	{r3, lr}
   d873a:	4b02      	ldr	r3, [pc, #8]	; (d8744 <os_mutex_lock+0xc>)
   d873c:	681b      	ldr	r3, [r3, #0]
   d873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8740:	9301      	str	r3, [sp, #4]
   d8742:	bd08      	pop	{r3, pc}
   d8744:	00030248 	.word	0x00030248

000d8748 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d8748:	b508      	push	{r3, lr}
   d874a:	4b02      	ldr	r3, [pc, #8]	; (d8754 <os_mutex_unlock+0xc>)
   d874c:	681b      	ldr	r3, [r3, #0]
   d874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8750:	9301      	str	r3, [sp, #4]
   d8752:	bd08      	pop	{r3, pc}
   d8754:	00030248 	.word	0x00030248

000d8758 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8758:	b508      	push	{r3, lr}
   d875a:	4b02      	ldr	r3, [pc, #8]	; (d8764 <os_mutex_recursive_create+0xc>)
   d875c:	681b      	ldr	r3, [r3, #0]
   d875e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8760:	9301      	str	r3, [sp, #4]
   d8762:	bd08      	pop	{r3, pc}
   d8764:	00030248 	.word	0x00030248

000d8768 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8768:	b508      	push	{r3, lr}
   d876a:	4b02      	ldr	r3, [pc, #8]	; (d8774 <os_mutex_recursive_destroy+0xc>)
   d876c:	681b      	ldr	r3, [r3, #0]
   d876e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8770:	9301      	str	r3, [sp, #4]
   d8772:	bd08      	pop	{r3, pc}
   d8774:	00030248 	.word	0x00030248

000d8778 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d8778:	b508      	push	{r3, lr}
   d877a:	4b02      	ldr	r3, [pc, #8]	; (d8784 <os_thread_exit+0xc>)
   d877c:	681b      	ldr	r3, [r3, #0]
   d877e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8780:	9301      	str	r3, [sp, #4]
   d8782:	bd08      	pop	{r3, pc}
   d8784:	00030248 	.word	0x00030248

000d8788 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8788:	b508      	push	{r3, lr}
   d878a:	4b02      	ldr	r3, [pc, #8]	; (d8794 <os_timer_set_id+0xc>)
   d878c:	681b      	ldr	r3, [r3, #0]
   d878e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8790:	9301      	str	r3, [sp, #4]
   d8792:	bd08      	pop	{r3, pc}
   d8794:	00030248 	.word	0x00030248

000d8798 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d8798:	b508      	push	{r3, lr}
   d879a:	4b02      	ldr	r3, [pc, #8]	; (d87a4 <HAL_Feature_Set+0xc>)
   d879c:	681b      	ldr	r3, [r3, #0]
   d879e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d87a0:	9301      	str	r3, [sp, #4]
   d87a2:	bd08      	pop	{r3, pc}
   d87a4:	00030234 	.word	0x00030234

000d87a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d87a8:	b508      	push	{r3, lr}
   d87aa:	4b02      	ldr	r3, [pc, #8]	; (d87b4 <HAL_RNG_GetRandomNumber+0xc>)
   d87ac:	681b      	ldr	r3, [r3, #0]
   d87ae:	685b      	ldr	r3, [r3, #4]
   d87b0:	9301      	str	r3, [sp, #4]
   d87b2:	bd08      	pop	{r3, pc}
   d87b4:	00030218 	.word	0x00030218

000d87b8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d87b8:	b508      	push	{r3, lr}
   d87ba:	4b02      	ldr	r3, [pc, #8]	; (d87c4 <HAL_Delay_Milliseconds+0xc>)
   d87bc:	681b      	ldr	r3, [r3, #0]
   d87be:	689b      	ldr	r3, [r3, #8]
   d87c0:	9301      	str	r3, [sp, #4]
   d87c2:	bd08      	pop	{r3, pc}
   d87c4:	00030218 	.word	0x00030218

000d87c8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d87c8:	b508      	push	{r3, lr}
   d87ca:	4b02      	ldr	r3, [pc, #8]	; (d87d4 <HAL_Delay_Microseconds+0xc>)
   d87cc:	681b      	ldr	r3, [r3, #0]
   d87ce:	68db      	ldr	r3, [r3, #12]
   d87d0:	9301      	str	r3, [sp, #4]
   d87d2:	bd08      	pop	{r3, pc}
   d87d4:	00030218 	.word	0x00030218

000d87d8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d87d8:	b508      	push	{r3, lr}
   d87da:	4b02      	ldr	r3, [pc, #8]	; (d87e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d87dc:	681b      	ldr	r3, [r3, #0]
   d87de:	695b      	ldr	r3, [r3, #20]
   d87e0:	9301      	str	r3, [sp, #4]
   d87e2:	bd08      	pop	{r3, pc}
   d87e4:	00030218 	.word	0x00030218

000d87e8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d87e8:	b508      	push	{r3, lr}
   d87ea:	4b02      	ldr	r3, [pc, #8]	; (d87f4 <hal_rtc_time_is_valid+0xc>)
   d87ec:	681b      	ldr	r3, [r3, #0]
   d87ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d87f0:	9301      	str	r3, [sp, #4]
   d87f2:	bd08      	pop	{r3, pc}
   d87f4:	00030218 	.word	0x00030218

000d87f8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d87f8:	b508      	push	{r3, lr}
   d87fa:	4b02      	ldr	r3, [pc, #8]	; (d8804 <hal_timer_millis+0xc>)
   d87fc:	681b      	ldr	r3, [r3, #0]
   d87fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8800:	9301      	str	r3, [sp, #4]
   d8802:	bd08      	pop	{r3, pc}
   d8804:	00030218 	.word	0x00030218

000d8808 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8808:	b508      	push	{r3, lr}
   d880a:	4b02      	ldr	r3, [pc, #8]	; (d8814 <hal_rtc_get_time+0xc>)
   d880c:	681b      	ldr	r3, [r3, #0]
   d880e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8810:	9301      	str	r3, [sp, #4]
   d8812:	bd08      	pop	{r3, pc}
   d8814:	00030218 	.word	0x00030218

000d8818 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d8818:	b508      	push	{r3, lr}
   d881a:	4b02      	ldr	r3, [pc, #8]	; (d8824 <hal_rtc_set_time+0xc>)
   d881c:	681b      	ldr	r3, [r3, #0]
   d881e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d8820:	9301      	str	r3, [sp, #4]
   d8822:	bd08      	pop	{r3, pc}
   d8824:	00030218 	.word	0x00030218

000d8828 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d8828:	b508      	push	{r3, lr}
   d882a:	4b02      	ldr	r3, [pc, #8]	; (d8834 <HAL_Validate_Pin_Function+0xc>)
   d882c:	681b      	ldr	r3, [r3, #0]
   d882e:	685b      	ldr	r3, [r3, #4]
   d8830:	9301      	str	r3, [sp, #4]
   d8832:	bd08      	pop	{r3, pc}
   d8834:	0003022c 	.word	0x0003022c

000d8838 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8838:	b508      	push	{r3, lr}
   d883a:	4b02      	ldr	r3, [pc, #8]	; (d8844 <HAL_Pin_Mode+0xc>)
   d883c:	681b      	ldr	r3, [r3, #0]
   d883e:	689b      	ldr	r3, [r3, #8]
   d8840:	9301      	str	r3, [sp, #4]
   d8842:	bd08      	pop	{r3, pc}
   d8844:	0003022c 	.word	0x0003022c

000d8848 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8848:	b508      	push	{r3, lr}
   d884a:	4b02      	ldr	r3, [pc, #8]	; (d8854 <HAL_Get_Pin_Mode+0xc>)
   d884c:	681b      	ldr	r3, [r3, #0]
   d884e:	68db      	ldr	r3, [r3, #12]
   d8850:	9301      	str	r3, [sp, #4]
   d8852:	bd08      	pop	{r3, pc}
   d8854:	0003022c 	.word	0x0003022c

000d8858 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8858:	b508      	push	{r3, lr}
   d885a:	4b02      	ldr	r3, [pc, #8]	; (d8864 <HAL_GPIO_Write+0xc>)
   d885c:	681b      	ldr	r3, [r3, #0]
   d885e:	691b      	ldr	r3, [r3, #16]
   d8860:	9301      	str	r3, [sp, #4]
   d8862:	bd08      	pop	{r3, pc}
   d8864:	0003022c 	.word	0x0003022c

000d8868 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d8868:	b508      	push	{r3, lr}
   d886a:	4b02      	ldr	r3, [pc, #8]	; (d8874 <HAL_Interrupts_Attach+0xc>)
   d886c:	681b      	ldr	r3, [r3, #0]
   d886e:	699b      	ldr	r3, [r3, #24]
   d8870:	9301      	str	r3, [sp, #4]
   d8872:	bd08      	pop	{r3, pc}
   d8874:	0003022c 	.word	0x0003022c

000d8878 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d8878:	b508      	push	{r3, lr}
   d887a:	4b02      	ldr	r3, [pc, #8]	; (d8884 <HAL_Interrupts_Detach+0xc>)
   d887c:	681b      	ldr	r3, [r3, #0]
   d887e:	69db      	ldr	r3, [r3, #28]
   d8880:	9301      	str	r3, [sp, #4]
   d8882:	bd08      	pop	{r3, pc}
   d8884:	0003022c 	.word	0x0003022c

000d8888 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d8888:	b508      	push	{r3, lr}
   d888a:	4b02      	ldr	r3, [pc, #8]	; (d8894 <hal_adc_read+0xc>)
   d888c:	681b      	ldr	r3, [r3, #0]
   d888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8890:	9301      	str	r3, [sp, #4]
   d8892:	bd08      	pop	{r3, pc}
   d8894:	0003022c 	.word	0x0003022c

000d8898 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8898:	b508      	push	{r3, lr}
   d889a:	4b02      	ldr	r3, [pc, #8]	; (d88a4 <hal_i2c_begin+0xc>)
   d889c:	681b      	ldr	r3, [r3, #0]
   d889e:	68db      	ldr	r3, [r3, #12]
   d88a0:	9301      	str	r3, [sp, #4]
   d88a2:	bd08      	pop	{r3, pc}
   d88a4:	00030228 	.word	0x00030228

000d88a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d88a8:	b508      	push	{r3, lr}
   d88aa:	4b02      	ldr	r3, [pc, #8]	; (d88b4 <hal_i2c_begin_transmission+0xc>)
   d88ac:	681b      	ldr	r3, [r3, #0]
   d88ae:	699b      	ldr	r3, [r3, #24]
   d88b0:	9301      	str	r3, [sp, #4]
   d88b2:	bd08      	pop	{r3, pc}
   d88b4:	00030228 	.word	0x00030228

000d88b8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d88b8:	b508      	push	{r3, lr}
   d88ba:	4b02      	ldr	r3, [pc, #8]	; (d88c4 <hal_i2c_end_transmission+0xc>)
   d88bc:	681b      	ldr	r3, [r3, #0]
   d88be:	69db      	ldr	r3, [r3, #28]
   d88c0:	9301      	str	r3, [sp, #4]
   d88c2:	bd08      	pop	{r3, pc}
   d88c4:	00030228 	.word	0x00030228

000d88c8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d88c8:	b508      	push	{r3, lr}
   d88ca:	4b02      	ldr	r3, [pc, #8]	; (d88d4 <hal_i2c_write+0xc>)
   d88cc:	681b      	ldr	r3, [r3, #0]
   d88ce:	6a1b      	ldr	r3, [r3, #32]
   d88d0:	9301      	str	r3, [sp, #4]
   d88d2:	bd08      	pop	{r3, pc}
   d88d4:	00030228 	.word	0x00030228

000d88d8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d88d8:	b508      	push	{r3, lr}
   d88da:	4b02      	ldr	r3, [pc, #8]	; (d88e4 <hal_i2c_available+0xc>)
   d88dc:	681b      	ldr	r3, [r3, #0]
   d88de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d88e0:	9301      	str	r3, [sp, #4]
   d88e2:	bd08      	pop	{r3, pc}
   d88e4:	00030228 	.word	0x00030228

000d88e8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d88e8:	b508      	push	{r3, lr}
   d88ea:	4b02      	ldr	r3, [pc, #8]	; (d88f4 <hal_i2c_read+0xc>)
   d88ec:	681b      	ldr	r3, [r3, #0]
   d88ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d88f0:	9301      	str	r3, [sp, #4]
   d88f2:	bd08      	pop	{r3, pc}
   d88f4:	00030228 	.word	0x00030228

000d88f8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d88f8:	b508      	push	{r3, lr}
   d88fa:	4b02      	ldr	r3, [pc, #8]	; (d8904 <hal_i2c_peek+0xc>)
   d88fc:	681b      	ldr	r3, [r3, #0]
   d88fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8900:	9301      	str	r3, [sp, #4]
   d8902:	bd08      	pop	{r3, pc}
   d8904:	00030228 	.word	0x00030228

000d8908 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8908:	b508      	push	{r3, lr}
   d890a:	4b02      	ldr	r3, [pc, #8]	; (d8914 <hal_i2c_flush+0xc>)
   d890c:	681b      	ldr	r3, [r3, #0]
   d890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8910:	9301      	str	r3, [sp, #4]
   d8912:	bd08      	pop	{r3, pc}
   d8914:	00030228 	.word	0x00030228

000d8918 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8918:	b508      	push	{r3, lr}
   d891a:	4b02      	ldr	r3, [pc, #8]	; (d8924 <hal_i2c_is_enabled+0xc>)
   d891c:	681b      	ldr	r3, [r3, #0]
   d891e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8920:	9301      	str	r3, [sp, #4]
   d8922:	bd08      	pop	{r3, pc}
   d8924:	00030228 	.word	0x00030228

000d8928 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8928:	b508      	push	{r3, lr}
   d892a:	4b02      	ldr	r3, [pc, #8]	; (d8934 <hal_i2c_init+0xc>)
   d892c:	681b      	ldr	r3, [r3, #0]
   d892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8930:	9301      	str	r3, [sp, #4]
   d8932:	bd08      	pop	{r3, pc}
   d8934:	00030228 	.word	0x00030228

000d8938 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8938:	b508      	push	{r3, lr}
   d893a:	4b02      	ldr	r3, [pc, #8]	; (d8944 <hal_i2c_lock+0xc>)
   d893c:	681b      	ldr	r3, [r3, #0]
   d893e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8940:	9301      	str	r3, [sp, #4]
   d8942:	bd08      	pop	{r3, pc}
   d8944:	00030228 	.word	0x00030228

000d8948 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8948:	b508      	push	{r3, lr}
   d894a:	4b02      	ldr	r3, [pc, #8]	; (d8954 <hal_i2c_unlock+0xc>)
   d894c:	681b      	ldr	r3, [r3, #0]
   d894e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8950:	9301      	str	r3, [sp, #4]
   d8952:	bd08      	pop	{r3, pc}
   d8954:	00030228 	.word	0x00030228

000d8958 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8958:	b508      	push	{r3, lr}
   d895a:	4b02      	ldr	r3, [pc, #8]	; (d8964 <hal_i2c_request_ex+0xc>)
   d895c:	681b      	ldr	r3, [r3, #0]
   d895e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8960:	9301      	str	r3, [sp, #4]
   d8962:	bd08      	pop	{r3, pc}
   d8964:	00030228 	.word	0x00030228

000d8968 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8968:	b508      	push	{r3, lr}
   d896a:	4b02      	ldr	r3, [pc, #8]	; (d8974 <inet_inet_ntop+0xc>)
   d896c:	681b      	ldr	r3, [r3, #0]
   d896e:	695b      	ldr	r3, [r3, #20]
   d8970:	9301      	str	r3, [sp, #4]
   d8972:	bd08      	pop	{r3, pc}
   d8974:	00030264 	.word	0x00030264

000d8978 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8978:	b508      	push	{r3, lr}
   d897a:	4b02      	ldr	r3, [pc, #8]	; (d8984 <netdb_freeaddrinfo+0xc>)
   d897c:	681b      	ldr	r3, [r3, #0]
   d897e:	689b      	ldr	r3, [r3, #8]
   d8980:	9301      	str	r3, [sp, #4]
   d8982:	bd08      	pop	{r3, pc}
   d8984:	00030268 	.word	0x00030268

000d8988 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8988:	b508      	push	{r3, lr}
   d898a:	4b02      	ldr	r3, [pc, #8]	; (d8994 <netdb_getaddrinfo+0xc>)
   d898c:	681b      	ldr	r3, [r3, #0]
   d898e:	68db      	ldr	r3, [r3, #12]
   d8990:	9301      	str	r3, [sp, #4]
   d8992:	bd08      	pop	{r3, pc}
   d8994:	00030268 	.word	0x00030268

000d8998 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8998:	b508      	push	{r3, lr}
   d899a:	4b02      	ldr	r3, [pc, #8]	; (d89a4 <hal_spi_init+0xc>)
   d899c:	681b      	ldr	r3, [r3, #0]
   d899e:	69db      	ldr	r3, [r3, #28]
   d89a0:	9301      	str	r3, [sp, #4]
   d89a2:	bd08      	pop	{r3, pc}
   d89a4:	00030230 	.word	0x00030230

000d89a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d89a8:	b508      	push	{r3, lr}
   d89aa:	4b02      	ldr	r3, [pc, #8]	; (d89b4 <hal_spi_is_enabled+0xc>)
   d89ac:	681b      	ldr	r3, [r3, #0]
   d89ae:	6a1b      	ldr	r3, [r3, #32]
   d89b0:	9301      	str	r3, [sp, #4]
   d89b2:	bd08      	pop	{r3, pc}
   d89b4:	00030230 	.word	0x00030230

000d89b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d89b8:	b508      	push	{r3, lr}
   d89ba:	4b02      	ldr	r3, [pc, #8]	; (d89c4 <hal_usart_init+0xc>)
   d89bc:	681b      	ldr	r3, [r3, #0]
   d89be:	681b      	ldr	r3, [r3, #0]
   d89c0:	9301      	str	r3, [sp, #4]
   d89c2:	bd08      	pop	{r3, pc}
   d89c4:	0003023c 	.word	0x0003023c

000d89c8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d89c8:	b508      	push	{r3, lr}
   d89ca:	4b02      	ldr	r3, [pc, #8]	; (d89d4 <hal_usart_write+0xc>)
   d89cc:	681b      	ldr	r3, [r3, #0]
   d89ce:	68db      	ldr	r3, [r3, #12]
   d89d0:	9301      	str	r3, [sp, #4]
   d89d2:	bd08      	pop	{r3, pc}
   d89d4:	0003023c 	.word	0x0003023c

000d89d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d89d8:	b508      	push	{r3, lr}
   d89da:	4b02      	ldr	r3, [pc, #8]	; (d89e4 <hal_usart_available+0xc>)
   d89dc:	681b      	ldr	r3, [r3, #0]
   d89de:	691b      	ldr	r3, [r3, #16]
   d89e0:	9301      	str	r3, [sp, #4]
   d89e2:	bd08      	pop	{r3, pc}
   d89e4:	0003023c 	.word	0x0003023c

000d89e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d89e8:	b508      	push	{r3, lr}
   d89ea:	4b02      	ldr	r3, [pc, #8]	; (d89f4 <hal_usart_read+0xc>)
   d89ec:	681b      	ldr	r3, [r3, #0]
   d89ee:	695b      	ldr	r3, [r3, #20]
   d89f0:	9301      	str	r3, [sp, #4]
   d89f2:	bd08      	pop	{r3, pc}
   d89f4:	0003023c 	.word	0x0003023c

000d89f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d89f8:	b508      	push	{r3, lr}
   d89fa:	4b02      	ldr	r3, [pc, #8]	; (d8a04 <hal_usart_peek+0xc>)
   d89fc:	681b      	ldr	r3, [r3, #0]
   d89fe:	699b      	ldr	r3, [r3, #24]
   d8a00:	9301      	str	r3, [sp, #4]
   d8a02:	bd08      	pop	{r3, pc}
   d8a04:	0003023c 	.word	0x0003023c

000d8a08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8a08:	b508      	push	{r3, lr}
   d8a0a:	4b02      	ldr	r3, [pc, #8]	; (d8a14 <hal_usart_flush+0xc>)
   d8a0c:	681b      	ldr	r3, [r3, #0]
   d8a0e:	69db      	ldr	r3, [r3, #28]
   d8a10:	9301      	str	r3, [sp, #4]
   d8a12:	bd08      	pop	{r3, pc}
   d8a14:	0003023c 	.word	0x0003023c

000d8a18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8a18:	b508      	push	{r3, lr}
   d8a1a:	4b02      	ldr	r3, [pc, #8]	; (d8a24 <hal_usart_is_enabled+0xc>)
   d8a1c:	681b      	ldr	r3, [r3, #0]
   d8a1e:	6a1b      	ldr	r3, [r3, #32]
   d8a20:	9301      	str	r3, [sp, #4]
   d8a22:	bd08      	pop	{r3, pc}
   d8a24:	0003023c 	.word	0x0003023c

000d8a28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8a28:	b508      	push	{r3, lr}
   d8a2a:	4b02      	ldr	r3, [pc, #8]	; (d8a34 <hal_usart_available_data_for_write+0xc>)
   d8a2c:	681b      	ldr	r3, [r3, #0]
   d8a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a30:	9301      	str	r3, [sp, #4]
   d8a32:	bd08      	pop	{r3, pc}
   d8a34:	0003023c 	.word	0x0003023c

000d8a38 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8a38:	b508      	push	{r3, lr}
   d8a3a:	4b02      	ldr	r3, [pc, #8]	; (d8a44 <HAL_USB_USART_Init+0xc>)
   d8a3c:	681b      	ldr	r3, [r3, #0]
   d8a3e:	681b      	ldr	r3, [r3, #0]
   d8a40:	9301      	str	r3, [sp, #4]
   d8a42:	bd08      	pop	{r3, pc}
   d8a44:	0003024c 	.word	0x0003024c

000d8a48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8a48:	b508      	push	{r3, lr}
   d8a4a:	4b02      	ldr	r3, [pc, #8]	; (d8a54 <HAL_USB_USART_Available_Data+0xc>)
   d8a4c:	681b      	ldr	r3, [r3, #0]
   d8a4e:	691b      	ldr	r3, [r3, #16]
   d8a50:	9301      	str	r3, [sp, #4]
   d8a52:	bd08      	pop	{r3, pc}
   d8a54:	0003024c 	.word	0x0003024c

000d8a58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8a58:	b508      	push	{r3, lr}
   d8a5a:	4b02      	ldr	r3, [pc, #8]	; (d8a64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8a5c:	681b      	ldr	r3, [r3, #0]
   d8a5e:	695b      	ldr	r3, [r3, #20]
   d8a60:	9301      	str	r3, [sp, #4]
   d8a62:	bd08      	pop	{r3, pc}
   d8a64:	0003024c 	.word	0x0003024c

000d8a68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8a68:	b508      	push	{r3, lr}
   d8a6a:	4b02      	ldr	r3, [pc, #8]	; (d8a74 <HAL_USB_USART_Receive_Data+0xc>)
   d8a6c:	681b      	ldr	r3, [r3, #0]
   d8a6e:	699b      	ldr	r3, [r3, #24]
   d8a70:	9301      	str	r3, [sp, #4]
   d8a72:	bd08      	pop	{r3, pc}
   d8a74:	0003024c 	.word	0x0003024c

000d8a78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8a78:	b508      	push	{r3, lr}
   d8a7a:	4b02      	ldr	r3, [pc, #8]	; (d8a84 <HAL_USB_USART_Send_Data+0xc>)
   d8a7c:	681b      	ldr	r3, [r3, #0]
   d8a7e:	69db      	ldr	r3, [r3, #28]
   d8a80:	9301      	str	r3, [sp, #4]
   d8a82:	bd08      	pop	{r3, pc}
   d8a84:	0003024c 	.word	0x0003024c

000d8a88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8a88:	b508      	push	{r3, lr}
   d8a8a:	4b02      	ldr	r3, [pc, #8]	; (d8a94 <HAL_USB_USART_Flush_Data+0xc>)
   d8a8c:	681b      	ldr	r3, [r3, #0]
   d8a8e:	6a1b      	ldr	r3, [r3, #32]
   d8a90:	9301      	str	r3, [sp, #4]
   d8a92:	bd08      	pop	{r3, pc}
   d8a94:	0003024c 	.word	0x0003024c

000d8a98 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8a98:	b508      	push	{r3, lr}
   d8a9a:	4b02      	ldr	r3, [pc, #8]	; (d8aa4 <panic_+0xc>)
   d8a9c:	681b      	ldr	r3, [r3, #0]
   d8a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8aa0:	9301      	str	r3, [sp, #4]
   d8aa2:	bd08      	pop	{r3, pc}
   d8aa4:	00030260 	.word	0x00030260

000d8aa8 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d8aa8:	b508      	push	{r3, lr}
   d8aaa:	4b02      	ldr	r3, [pc, #8]	; (d8ab4 <jsmn_init+0xc>)
   d8aac:	681b      	ldr	r3, [r3, #0]
   d8aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8ab0:	9301      	str	r3, [sp, #4]
   d8ab2:	bd08      	pop	{r3, pc}
   d8ab4:	00030260 	.word	0x00030260

000d8ab8 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d8ab8:	b508      	push	{r3, lr}
   d8aba:	4b02      	ldr	r3, [pc, #8]	; (d8ac4 <jsmn_parse+0xc>)
   d8abc:	681b      	ldr	r3, [r3, #0]
   d8abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8ac0:	9301      	str	r3, [sp, #4]
   d8ac2:	bd08      	pop	{r3, pc}
   d8ac4:	00030260 	.word	0x00030260

000d8ac8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8ac8:	b508      	push	{r3, lr}
   d8aca:	4b02      	ldr	r3, [pc, #8]	; (d8ad4 <log_message_v+0xc>)
   d8acc:	681b      	ldr	r3, [r3, #0]
   d8ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8ad0:	9301      	str	r3, [sp, #4]
   d8ad2:	bd08      	pop	{r3, pc}
   d8ad4:	00030260 	.word	0x00030260

000d8ad8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8ad8:	b508      	push	{r3, lr}
   d8ada:	4b02      	ldr	r3, [pc, #8]	; (d8ae4 <system_mode+0xc>)
   d8adc:	681b      	ldr	r3, [r3, #0]
   d8ade:	681b      	ldr	r3, [r3, #0]
   d8ae0:	9301      	str	r3, [sp, #4]
   d8ae2:	bd08      	pop	{r3, pc}
   d8ae4:	00030220 	.word	0x00030220

000d8ae8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8ae8:	b508      	push	{r3, lr}
   d8aea:	4b02      	ldr	r3, [pc, #8]	; (d8af4 <set_system_mode+0xc>)
   d8aec:	681b      	ldr	r3, [r3, #0]
   d8aee:	685b      	ldr	r3, [r3, #4]
   d8af0:	9301      	str	r3, [sp, #4]
   d8af2:	bd08      	pop	{r3, pc}
   d8af4:	00030220 	.word	0x00030220

000d8af8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8af8:	b508      	push	{r3, lr}
   d8afa:	4b02      	ldr	r3, [pc, #8]	; (d8b04 <system_delay_ms+0xc>)
   d8afc:	681b      	ldr	r3, [r3, #0]
   d8afe:	695b      	ldr	r3, [r3, #20]
   d8b00:	9301      	str	r3, [sp, #4]
   d8b02:	bd08      	pop	{r3, pc}
   d8b04:	00030220 	.word	0x00030220

000d8b08 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8b08:	b508      	push	{r3, lr}
   d8b0a:	4b02      	ldr	r3, [pc, #8]	; (d8b14 <system_thread_set_state+0xc>)
   d8b0c:	681b      	ldr	r3, [r3, #0]
   d8b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8b10:	9301      	str	r3, [sp, #4]
   d8b12:	bd08      	pop	{r3, pc}
   d8b14:	00030220 	.word	0x00030220

000d8b18 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8b18:	b508      	push	{r3, lr}
   d8b1a:	4b02      	ldr	r3, [pc, #8]	; (d8b24 <application_thread_current+0xc>)
   d8b1c:	681b      	ldr	r3, [r3, #0]
   d8b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8b20:	9301      	str	r3, [sp, #4]
   d8b22:	bd08      	pop	{r3, pc}
   d8b24:	00030220 	.word	0x00030220

000d8b28 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8b28:	b508      	push	{r3, lr}
   d8b2a:	4b02      	ldr	r3, [pc, #8]	; (d8b34 <application_thread_invoke+0xc>)
   d8b2c:	681b      	ldr	r3, [r3, #0]
   d8b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8b30:	9301      	str	r3, [sp, #4]
   d8b32:	bd08      	pop	{r3, pc}
   d8b34:	00030220 	.word	0x00030220

000d8b38 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8b38:	b508      	push	{r3, lr}
   d8b3a:	4b02      	ldr	r3, [pc, #8]	; (d8b44 <system_thread_get_state+0xc>)
   d8b3c:	681b      	ldr	r3, [r3, #0]
   d8b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8b40:	9301      	str	r3, [sp, #4]
   d8b42:	bd08      	pop	{r3, pc}
   d8b44:	00030220 	.word	0x00030220

000d8b48 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8b48:	b508      	push	{r3, lr}
   d8b4a:	4b02      	ldr	r3, [pc, #8]	; (d8b54 <system_notify_time_changed+0xc>)
   d8b4c:	681b      	ldr	r3, [r3, #0]
   d8b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8b50:	9301      	str	r3, [sp, #4]
   d8b52:	bd08      	pop	{r3, pc}
   d8b54:	00030220 	.word	0x00030220

000d8b58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8b58:	b508      	push	{r3, lr}
   d8b5a:	4b03      	ldr	r3, [pc, #12]	; (d8b68 <system_ctrl_set_app_request_handler+0x10>)
   d8b5c:	681b      	ldr	r3, [r3, #0]
   d8b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8b62:	9301      	str	r3, [sp, #4]
   d8b64:	bd08      	pop	{r3, pc}
   d8b66:	0000      	.short	0x0000
   d8b68:	00030220 	.word	0x00030220

000d8b6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8b6c:	b508      	push	{r3, lr}
   d8b6e:	4b03      	ldr	r3, [pc, #12]	; (d8b7c <system_ctrl_set_result+0x10>)
   d8b70:	681b      	ldr	r3, [r3, #0]
   d8b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8b76:	9301      	str	r3, [sp, #4]
   d8b78:	bd08      	pop	{r3, pc}
   d8b7a:	0000      	.short	0x0000
   d8b7c:	00030220 	.word	0x00030220

000d8b80 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8b80:	b508      	push	{r3, lr}
   d8b82:	4b03      	ldr	r3, [pc, #12]	; (d8b90 <system_reset+0x10>)
   d8b84:	681b      	ldr	r3, [r3, #0]
   d8b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d8b8a:	9301      	str	r3, [sp, #4]
   d8b8c:	bd08      	pop	{r3, pc}
   d8b8e:	0000      	.short	0x0000
   d8b90:	00030220 	.word	0x00030220

000d8b94 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8b94:	b508      	push	{r3, lr}
   d8b96:	4b02      	ldr	r3, [pc, #8]	; (d8ba0 <spark_variable+0xc>)
   d8b98:	681b      	ldr	r3, [r3, #0]
   d8b9a:	681b      	ldr	r3, [r3, #0]
   d8b9c:	9301      	str	r3, [sp, #4]
   d8b9e:	bd08      	pop	{r3, pc}
   d8ba0:	00030244 	.word	0x00030244

000d8ba4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8ba4:	b508      	push	{r3, lr}
   d8ba6:	4b02      	ldr	r3, [pc, #8]	; (d8bb0 <spark_function+0xc>)
   d8ba8:	681b      	ldr	r3, [r3, #0]
   d8baa:	685b      	ldr	r3, [r3, #4]
   d8bac:	9301      	str	r3, [sp, #4]
   d8bae:	bd08      	pop	{r3, pc}
   d8bb0:	00030244 	.word	0x00030244

000d8bb4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8bb4:	b508      	push	{r3, lr}
   d8bb6:	4b02      	ldr	r3, [pc, #8]	; (d8bc0 <spark_process+0xc>)
   d8bb8:	681b      	ldr	r3, [r3, #0]
   d8bba:	689b      	ldr	r3, [r3, #8]
   d8bbc:	9301      	str	r3, [sp, #4]
   d8bbe:	bd08      	pop	{r3, pc}
   d8bc0:	00030244 	.word	0x00030244

000d8bc4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8bc4:	b508      	push	{r3, lr}
   d8bc6:	4b02      	ldr	r3, [pc, #8]	; (d8bd0 <spark_cloud_flag_connect+0xc>)
   d8bc8:	681b      	ldr	r3, [r3, #0]
   d8bca:	68db      	ldr	r3, [r3, #12]
   d8bcc:	9301      	str	r3, [sp, #4]
   d8bce:	bd08      	pop	{r3, pc}
   d8bd0:	00030244 	.word	0x00030244

000d8bd4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8bd4:	b508      	push	{r3, lr}
   d8bd6:	4b02      	ldr	r3, [pc, #8]	; (d8be0 <spark_cloud_flag_connected+0xc>)
   d8bd8:	681b      	ldr	r3, [r3, #0]
   d8bda:	695b      	ldr	r3, [r3, #20]
   d8bdc:	9301      	str	r3, [sp, #4]
   d8bde:	bd08      	pop	{r3, pc}
   d8be0:	00030244 	.word	0x00030244

000d8be4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8be4:	b508      	push	{r3, lr}
   d8be6:	4b02      	ldr	r3, [pc, #8]	; (d8bf0 <spark_deviceID+0xc>)
   d8be8:	681b      	ldr	r3, [r3, #0]
   d8bea:	69db      	ldr	r3, [r3, #28]
   d8bec:	9301      	str	r3, [sp, #4]
   d8bee:	bd08      	pop	{r3, pc}
   d8bf0:	00030244 	.word	0x00030244

000d8bf4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8bf4:	b508      	push	{r3, lr}
   d8bf6:	4b02      	ldr	r3, [pc, #8]	; (d8c00 <spark_send_event+0xc>)
   d8bf8:	681b      	ldr	r3, [r3, #0]
   d8bfa:	6a1b      	ldr	r3, [r3, #32]
   d8bfc:	9301      	str	r3, [sp, #4]
   d8bfe:	bd08      	pop	{r3, pc}
   d8c00:	00030244 	.word	0x00030244

000d8c04 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8c04:	b508      	push	{r3, lr}
   d8c06:	4b02      	ldr	r3, [pc, #8]	; (d8c10 <spark_subscribe+0xc>)
   d8c08:	681b      	ldr	r3, [r3, #0]
   d8c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8c0c:	9301      	str	r3, [sp, #4]
   d8c0e:	bd08      	pop	{r3, pc}
   d8c10:	00030244 	.word	0x00030244

000d8c14 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8c14:	b508      	push	{r3, lr}
   d8c16:	4b02      	ldr	r3, [pc, #8]	; (d8c20 <spark_sync_time+0xc>)
   d8c18:	681b      	ldr	r3, [r3, #0]
   d8c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8c1c:	9301      	str	r3, [sp, #4]
   d8c1e:	bd08      	pop	{r3, pc}
   d8c20:	00030244 	.word	0x00030244

000d8c24 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8c24:	b508      	push	{r3, lr}
   d8c26:	4b02      	ldr	r3, [pc, #8]	; (d8c30 <spark_sync_time_pending+0xc>)
   d8c28:	681b      	ldr	r3, [r3, #0]
   d8c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8c2c:	9301      	str	r3, [sp, #4]
   d8c2e:	bd08      	pop	{r3, pc}
   d8c30:	00030244 	.word	0x00030244

000d8c34 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8c34:	b508      	push	{r3, lr}
   d8c36:	4b02      	ldr	r3, [pc, #8]	; (d8c40 <spark_sync_time_last+0xc>)
   d8c38:	681b      	ldr	r3, [r3, #0]
   d8c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8c3c:	9301      	str	r3, [sp, #4]
   d8c3e:	bd08      	pop	{r3, pc}
   d8c40:	00030244 	.word	0x00030244

000d8c44 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d8c44:	b508      	push	{r3, lr}
   d8c46:	4b02      	ldr	r3, [pc, #8]	; (d8c50 <spark_set_connection_property+0xc>)
   d8c48:	681b      	ldr	r3, [r3, #0]
   d8c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8c4c:	9301      	str	r3, [sp, #4]
   d8c4e:	bd08      	pop	{r3, pc}
   d8c50:	00030244 	.word	0x00030244

000d8c54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8c54:	b508      	push	{r3, lr}
   d8c56:	4b02      	ldr	r3, [pc, #8]	; (d8c60 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8c58:	681b      	ldr	r3, [r3, #0]
   d8c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8c5c:	9301      	str	r3, [sp, #4]
   d8c5e:	bd08      	pop	{r3, pc}
   d8c60:	00030244 	.word	0x00030244

000d8c64 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8c64:	b508      	push	{r3, lr}
   d8c66:	4b02      	ldr	r3, [pc, #8]	; (d8c70 <network_connect+0xc>)
   d8c68:	681b      	ldr	r3, [r3, #0]
   d8c6a:	685b      	ldr	r3, [r3, #4]
   d8c6c:	9301      	str	r3, [sp, #4]
   d8c6e:	bd08      	pop	{r3, pc}
   d8c70:	00030240 	.word	0x00030240

000d8c74 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8c74:	b508      	push	{r3, lr}
   d8c76:	4b02      	ldr	r3, [pc, #8]	; (d8c80 <network_connecting+0xc>)
   d8c78:	681b      	ldr	r3, [r3, #0]
   d8c7a:	689b      	ldr	r3, [r3, #8]
   d8c7c:	9301      	str	r3, [sp, #4]
   d8c7e:	bd08      	pop	{r3, pc}
   d8c80:	00030240 	.word	0x00030240

000d8c84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8c84:	b508      	push	{r3, lr}
   d8c86:	4b02      	ldr	r3, [pc, #8]	; (d8c90 <network_disconnect+0xc>)
   d8c88:	681b      	ldr	r3, [r3, #0]
   d8c8a:	68db      	ldr	r3, [r3, #12]
   d8c8c:	9301      	str	r3, [sp, #4]
   d8c8e:	bd08      	pop	{r3, pc}
   d8c90:	00030240 	.word	0x00030240

000d8c94 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8c94:	b508      	push	{r3, lr}
   d8c96:	4b02      	ldr	r3, [pc, #8]	; (d8ca0 <network_ready+0xc>)
   d8c98:	681b      	ldr	r3, [r3, #0]
   d8c9a:	691b      	ldr	r3, [r3, #16]
   d8c9c:	9301      	str	r3, [sp, #4]
   d8c9e:	bd08      	pop	{r3, pc}
   d8ca0:	00030240 	.word	0x00030240

000d8ca4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8ca4:	b508      	push	{r3, lr}
   d8ca6:	4b02      	ldr	r3, [pc, #8]	; (d8cb0 <network_on+0xc>)
   d8ca8:	681b      	ldr	r3, [r3, #0]
   d8caa:	695b      	ldr	r3, [r3, #20]
   d8cac:	9301      	str	r3, [sp, #4]
   d8cae:	bd08      	pop	{r3, pc}
   d8cb0:	00030240 	.word	0x00030240

000d8cb4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8cb4:	b508      	push	{r3, lr}
   d8cb6:	4b02      	ldr	r3, [pc, #8]	; (d8cc0 <network_off+0xc>)
   d8cb8:	681b      	ldr	r3, [r3, #0]
   d8cba:	699b      	ldr	r3, [r3, #24]
   d8cbc:	9301      	str	r3, [sp, #4]
   d8cbe:	bd08      	pop	{r3, pc}
   d8cc0:	00030240 	.word	0x00030240

000d8cc4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8cc4:	b508      	push	{r3, lr}
   d8cc6:	4b02      	ldr	r3, [pc, #8]	; (d8cd0 <network_listen+0xc>)
   d8cc8:	681b      	ldr	r3, [r3, #0]
   d8cca:	69db      	ldr	r3, [r3, #28]
   d8ccc:	9301      	str	r3, [sp, #4]
   d8cce:	bd08      	pop	{r3, pc}
   d8cd0:	00030240 	.word	0x00030240

000d8cd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8cd4:	b508      	push	{r3, lr}
   d8cd6:	4b02      	ldr	r3, [pc, #8]	; (d8ce0 <network_listening+0xc>)
   d8cd8:	681b      	ldr	r3, [r3, #0]
   d8cda:	6a1b      	ldr	r3, [r3, #32]
   d8cdc:	9301      	str	r3, [sp, #4]
   d8cde:	bd08      	pop	{r3, pc}
   d8ce0:	00030240 	.word	0x00030240

000d8ce4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8ce4:	b508      	push	{r3, lr}
   d8ce6:	4b02      	ldr	r3, [pc, #8]	; (d8cf0 <network_set_listen_timeout+0xc>)
   d8ce8:	681b      	ldr	r3, [r3, #0]
   d8cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8cec:	9301      	str	r3, [sp, #4]
   d8cee:	bd08      	pop	{r3, pc}
   d8cf0:	00030240 	.word	0x00030240

000d8cf4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8cf4:	b508      	push	{r3, lr}
   d8cf6:	4b02      	ldr	r3, [pc, #8]	; (d8d00 <network_get_listen_timeout+0xc>)
   d8cf8:	681b      	ldr	r3, [r3, #0]
   d8cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8cfc:	9301      	str	r3, [sp, #4]
   d8cfe:	bd08      	pop	{r3, pc}
   d8d00:	00030240 	.word	0x00030240

000d8d04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8d04:	b508      	push	{r3, lr}
   d8d06:	4b02      	ldr	r3, [pc, #8]	; (d8d10 <network_is_on+0xc>)
   d8d08:	681b      	ldr	r3, [r3, #0]
   d8d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8d0c:	9301      	str	r3, [sp, #4]
   d8d0e:	bd08      	pop	{r3, pc}
   d8d10:	00030240 	.word	0x00030240

000d8d14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8d14:	b508      	push	{r3, lr}
   d8d16:	4b02      	ldr	r3, [pc, #8]	; (d8d20 <network_is_off+0xc>)
   d8d18:	681b      	ldr	r3, [r3, #0]
   d8d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8d1c:	9301      	str	r3, [sp, #4]
   d8d1e:	bd08      	pop	{r3, pc}
   d8d20:	00030240 	.word	0x00030240

000d8d24 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8d24:	b508      	push	{r3, lr}
   d8d26:	4b02      	ldr	r3, [pc, #8]	; (d8d30 <malloc+0xc>)
   d8d28:	681b      	ldr	r3, [r3, #0]
   d8d2a:	681b      	ldr	r3, [r3, #0]
   d8d2c:	9301      	str	r3, [sp, #4]
   d8d2e:	bd08      	pop	{r3, pc}
   d8d30:	0003021c 	.word	0x0003021c

000d8d34 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8d34:	b508      	push	{r3, lr}
   d8d36:	4b02      	ldr	r3, [pc, #8]	; (d8d40 <free+0xc>)
   d8d38:	681b      	ldr	r3, [r3, #0]
   d8d3a:	685b      	ldr	r3, [r3, #4]
   d8d3c:	9301      	str	r3, [sp, #4]
   d8d3e:	bd08      	pop	{r3, pc}
   d8d40:	0003021c 	.word	0x0003021c

000d8d44 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8d44:	b508      	push	{r3, lr}
   d8d46:	4b02      	ldr	r3, [pc, #8]	; (d8d50 <realloc+0xc>)
   d8d48:	681b      	ldr	r3, [r3, #0]
   d8d4a:	689b      	ldr	r3, [r3, #8]
   d8d4c:	9301      	str	r3, [sp, #4]
   d8d4e:	bd08      	pop	{r3, pc}
   d8d50:	0003021c 	.word	0x0003021c

000d8d54 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8d54:	b508      	push	{r3, lr}
   d8d56:	4b02      	ldr	r3, [pc, #8]	; (d8d60 <siprintf+0xc>)
   d8d58:	681b      	ldr	r3, [r3, #0]
   d8d5a:	691b      	ldr	r3, [r3, #16]
   d8d5c:	9301      	str	r3, [sp, #4]
   d8d5e:	bd08      	pop	{r3, pc}
   d8d60:	0003021c 	.word	0x0003021c

000d8d64 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8d64:	b508      	push	{r3, lr}
   d8d66:	4b02      	ldr	r3, [pc, #8]	; (d8d70 <snprintf+0xc>)
   d8d68:	681b      	ldr	r3, [r3, #0]
   d8d6a:	69db      	ldr	r3, [r3, #28]
   d8d6c:	9301      	str	r3, [sp, #4]
   d8d6e:	bd08      	pop	{r3, pc}
   d8d70:	0003021c 	.word	0x0003021c

000d8d74 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8d74:	b508      	push	{r3, lr}
   d8d76:	4b02      	ldr	r3, [pc, #8]	; (d8d80 <vsnprintf+0xc>)
   d8d78:	681b      	ldr	r3, [r3, #0]
   d8d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8d7c:	9301      	str	r3, [sp, #4]
   d8d7e:	bd08      	pop	{r3, pc}
   d8d80:	0003021c 	.word	0x0003021c

000d8d84 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8d84:	b508      	push	{r3, lr}
   d8d86:	4b02      	ldr	r3, [pc, #8]	; (d8d90 <abort+0xc>)
   d8d88:	681b      	ldr	r3, [r3, #0]
   d8d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8d8c:	9301      	str	r3, [sp, #4]
   d8d8e:	bd08      	pop	{r3, pc}
   d8d90:	0003021c 	.word	0x0003021c

000d8d94 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8d94:	b508      	push	{r3, lr}
   d8d96:	4b02      	ldr	r3, [pc, #8]	; (d8da0 <_malloc_r+0xc>)
   d8d98:	681b      	ldr	r3, [r3, #0]
   d8d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8d9c:	9301      	str	r3, [sp, #4]
   d8d9e:	bd08      	pop	{r3, pc}
   d8da0:	0003021c 	.word	0x0003021c

000d8da4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8da4:	b508      	push	{r3, lr}
   d8da6:	4b02      	ldr	r3, [pc, #8]	; (d8db0 <__errno+0xc>)
   d8da8:	681b      	ldr	r3, [r3, #0]
   d8daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8dac:	9301      	str	r3, [sp, #4]
   d8dae:	bd08      	pop	{r3, pc}
   d8db0:	0003021c 	.word	0x0003021c

000d8db4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8db4:	b508      	push	{r3, lr}
   d8db6:	4b02      	ldr	r3, [pc, #8]	; (d8dc0 <newlib_impure_ptr_callback+0xc>)
   d8db8:	681b      	ldr	r3, [r3, #0]
   d8dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8dbc:	9301      	str	r3, [sp, #4]
   d8dbe:	bd08      	pop	{r3, pc}
   d8dc0:	0003021c 	.word	0x0003021c

000d8dc4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8dc4:	b508      	push	{r3, lr}
   d8dc6:	4b02      	ldr	r3, [pc, #8]	; (d8dd0 <strftime+0xc>)
   d8dc8:	681b      	ldr	r3, [r3, #0]
   d8dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8dcc:	9301      	str	r3, [sp, #4]
   d8dce:	bd08      	pop	{r3, pc}
   d8dd0:	0003021c 	.word	0x0003021c

000d8dd4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8dd4:	b508      	push	{r3, lr}
   d8dd6:	4b02      	ldr	r3, [pc, #8]	; (d8de0 <localtime_r+0xc>)
   d8dd8:	681b      	ldr	r3, [r3, #0]
   d8dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8ddc:	9301      	str	r3, [sp, #4]
   d8dde:	bd08      	pop	{r3, pc}
   d8de0:	0003021c 	.word	0x0003021c

000d8de4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8de4:	b508      	push	{r3, lr}
   d8de6:	4b02      	ldr	r3, [pc, #8]	; (d8df0 <gmtime_r+0xc>)
   d8de8:	681b      	ldr	r3, [r3, #0]
   d8dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8dec:	9301      	str	r3, [sp, #4]
   d8dee:	bd08      	pop	{r3, pc}
   d8df0:	0003021c 	.word	0x0003021c

000d8df4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8df4:	b508      	push	{r3, lr}
   d8df6:	4b02      	ldr	r3, [pc, #8]	; (d8e00 <mktime+0xc>)
   d8df8:	681b      	ldr	r3, [r3, #0]
   d8dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8dfc:	9301      	str	r3, [sp, #4]
   d8dfe:	bd08      	pop	{r3, pc}
   d8e00:	0003021c 	.word	0x0003021c

000d8e04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8e04:	2100      	movs	r1, #0
   d8e06:	f7ff be77 	b.w	d8af8 <system_delay_ms>

000d8e0a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8e0a:	b510      	push	{r4, lr}
      if (_M_empty())
   d8e0c:	6883      	ldr	r3, [r0, #8]
   d8e0e:	4604      	mov	r4, r0
   d8e10:	b90b      	cbnz	r3, d8e16 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8e12:	f001 feb2 	bl	dab7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8e16:	68c3      	ldr	r3, [r0, #12]
   d8e18:	4798      	blx	r3
      if (_M_manager)
   d8e1a:	68a3      	ldr	r3, [r4, #8]
   d8e1c:	b11b      	cbz	r3, d8e26 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8e1e:	2203      	movs	r2, #3
   d8e20:	4621      	mov	r1, r4
   d8e22:	4620      	mov	r0, r4
   d8e24:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8e26:	4620      	mov	r0, r4
   d8e28:	2110      	movs	r1, #16
}
   d8e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8e2e:	f001 be9e 	b.w	dab6e <_ZdlPvj>

000d8e32 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8e32:	b510      	push	{r4, lr}
   d8e34:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8e36:	6800      	ldr	r0, [r0, #0]
   d8e38:	b108      	cbz	r0, d8e3e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8e3a:	f7ff fc95 	bl	d8768 <os_mutex_recursive_destroy>
    }
   d8e3e:	4620      	mov	r0, r4
   d8e40:	bd10      	pop	{r4, pc}
	...

000d8e44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d8e44:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d8e46:	4c06      	ldr	r4, [pc, #24]	; (d8e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8e48:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8e4a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8e4c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8e4e:	f7ff fc83 	bl	d8758 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8e52:	4620      	mov	r0, r4
   d8e54:	4a03      	ldr	r2, [pc, #12]	; (d8e64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8e56:	4904      	ldr	r1, [pc, #16]	; (d8e68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8e5c:	f001 be82 	b.w	dab64 <__aeabi_atexit>
   d8e60:	2003e608 	.word	0x2003e608
   d8e64:	2003def0 	.word	0x2003def0
   d8e68:	000d8e33 	.word	0x000d8e33

000d8e6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8e6c:	4770      	bx	lr

000d8e6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8e6e:	2000      	movs	r0, #0
   d8e70:	4770      	bx	lr

000d8e72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8e72:	b510      	push	{r4, lr}
   d8e74:	2110      	movs	r1, #16
   d8e76:	4604      	mov	r4, r0
   d8e78:	f001 fe79 	bl	dab6e <_ZdlPvj>
   d8e7c:	4620      	mov	r0, r4
   d8e7e:	bd10      	pop	{r4, pc}

000d8e80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8e80:	b508      	push	{r3, lr}
      { delete this; }
   d8e82:	f7ff fff6 	bl	d8e72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8e86:	bd08      	pop	{r3, pc}

000d8e88 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8e88:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8e8a:	2200      	movs	r2, #0
   d8e8c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8e90:	6002      	str	r2, [r0, #0]
   d8e92:	8084      	strh	r4, [r0, #4]
   d8e94:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e96:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8e98:	680c      	ldr	r4, [r1, #0]
   d8e9a:	8085      	strh	r5, [r0, #4]
   d8e9c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e9e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8ea0:	bd30      	pop	{r4, r5, pc}

000d8ea2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8ea2:	b510      	push	{r4, lr}
   d8ea4:	4604      	mov	r4, r0
    free((void*)msg_);
   d8ea6:	6800      	ldr	r0, [r0, #0]
   d8ea8:	f7ff ff44 	bl	d8d34 <free>
}
   d8eac:	4620      	mov	r0, r4
   d8eae:	bd10      	pop	{r4, pc}

000d8eb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8eb0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8eb2:	68c4      	ldr	r4, [r0, #12]
   d8eb4:	b1f4      	cbz	r4, d8ef4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8eb6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8eb8:	2b02      	cmp	r3, #2
   d8eba:	d103      	bne.n	d8ec4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8ebc:	f104 000c 	add.w	r0, r4, #12
   d8ec0:	f7ff ffef 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8ec4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8ec6:	b135      	cbz	r5, d8ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8ec8:	4628      	mov	r0, r5
   d8eca:	f7fb fa21 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d8ece:	2110      	movs	r1, #16
   d8ed0:	4628      	mov	r0, r5
   d8ed2:	f001 fe4c 	bl	dab6e <_ZdlPvj>
   d8ed6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8ed8:	b135      	cbz	r5, d8ee8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8eda:	4628      	mov	r0, r5
   d8edc:	f7fb fa18 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d8ee0:	2110      	movs	r1, #16
   d8ee2:	4628      	mov	r0, r5
   d8ee4:	f001 fe43 	bl	dab6e <_ZdlPvj>
   d8ee8:	4620      	mov	r0, r4
   d8eea:	2114      	movs	r1, #20
   d8eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8ef0:	f001 be3d 	b.w	dab6e <_ZdlPvj>
   d8ef4:	bd38      	pop	{r3, r4, r5, pc}

000d8ef6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8ef6:	b510      	push	{r4, lr}
   d8ef8:	b088      	sub	sp, #32
   d8efa:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8efc:	4668      	mov	r0, sp
   d8efe:	f001 f8ac 	bl	da05a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8f02:	4669      	mov	r1, sp
   d8f04:	a804      	add	r0, sp, #16
   d8f06:	f001 f8cb 	bl	da0a0 <_ZN6StringC1ERKS_>
   d8f0a:	a804      	add	r0, sp, #16
   d8f0c:	47a0      	blx	r4
   d8f0e:	4604      	mov	r4, r0
   d8f10:	a804      	add	r0, sp, #16
   d8f12:	f001 f857 	bl	d9fc4 <_ZN6StringD1Ev>
    String p(param);
   d8f16:	4668      	mov	r0, sp
   d8f18:	f001 f854 	bl	d9fc4 <_ZN6StringD1Ev>
}
   d8f1c:	4620      	mov	r0, r4
   d8f1e:	b008      	add	sp, #32
   d8f20:	bd10      	pop	{r4, pc}

000d8f22 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d8f22:	b507      	push	{r0, r1, r2, lr}
   d8f24:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d8f28:	6882      	ldr	r2, [r0, #8]
   d8f2a:	b90a      	cbnz	r2, d8f30 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d8f2c:	f001 fe25 	bl	dab7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8f30:	68c3      	ldr	r3, [r0, #12]
   d8f32:	aa01      	add	r2, sp, #4
   d8f34:	4669      	mov	r1, sp
   d8f36:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d8f38:	b003      	add	sp, #12
   d8f3a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f3e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8f40:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8f46:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8f48:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8f4a:	461a      	mov	r2, r3
   d8f4c:	4669      	mov	r1, sp
   d8f4e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8f50:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8f54:	f8ad 4000 	strh.w	r4, [sp]
   d8f58:	f7ff fe24 	bl	d8ba4 <spark_function>
}
   d8f5c:	b004      	add	sp, #16
   d8f5e:	bd10      	pop	{r4, pc}

000d8f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f62:	460e      	mov	r6, r1
   d8f64:	4604      	mov	r4, r0
   d8f66:	f856 3b04 	ldr.w	r3, [r6], #4
   d8f6a:	9300      	str	r3, [sp, #0]
   d8f6c:	460d      	mov	r5, r1
   d8f6e:	a801      	add	r0, sp, #4
   d8f70:	4631      	mov	r1, r6
   d8f72:	f7fd fecf 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f76:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f78:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8f7a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f7c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8f7e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8f80:	2300      	movs	r3, #0
   d8f82:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d8f84:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8f86:	f7fc fb47 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f8a:	4630      	mov	r0, r6
   d8f8c:	f7fc fb44 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8f90:	4628      	mov	r0, r5
   d8f92:	2108      	movs	r1, #8
   d8f94:	f001 fdeb 	bl	dab6e <_ZdlPvj>
        return p;
    }
   d8f98:	4620      	mov	r0, r4
   d8f9a:	b002      	add	sp, #8
   d8f9c:	bd70      	pop	{r4, r5, r6, pc}

000d8f9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8f9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8fa0:	b510      	push	{r4, lr}
      if (_M_empty())
   d8fa2:	b90a      	cbnz	r2, d8fa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8fa4:	f001 fde9 	bl	dab7a <_ZSt25__throw_bad_function_callv>
    }
   d8fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fac:	68c3      	ldr	r3, [r0, #12]
   d8fae:	4718      	bx	r3

000d8fb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8fb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8fb2:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8fb4:	f100 0110 	add.w	r1, r0, #16
   d8fb8:	f7ff fff1 	bl	d8f9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8fbc:	bd08      	pop	{r3, pc}

000d8fbe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8fbe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8fc0:	b510      	push	{r4, lr}
      if (_M_empty())
   d8fc2:	b90a      	cbnz	r2, d8fc8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8fc4:	f001 fdd9 	bl	dab7a <_ZSt25__throw_bad_function_callv>
    }
   d8fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fcc:	68c3      	ldr	r3, [r0, #12]
   d8fce:	4718      	bx	r3

000d8fd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8fd0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8fd2:	6800      	ldr	r0, [r0, #0]
   d8fd4:	f100 0110 	add.w	r1, r0, #16
   d8fd8:	f7ff fff1 	bl	d8fbe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8fdc:	bd08      	pop	{r3, pc}
	...

000d8fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8fe0:	b538      	push	{r3, r4, r5, lr}
   d8fe2:	2300      	movs	r3, #0
   d8fe4:	4604      	mov	r4, r0
   d8fe6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8fe8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8fea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8fec:	f7fb f853 	bl	d4096 <_Znwj>
   d8ff0:	b128      	cbz	r0, d8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8ff2:	2301      	movs	r3, #1
   d8ff4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8ff8:	4b02      	ldr	r3, [pc, #8]	; (d9004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8ffa:	6003      	str	r3, [r0, #0]
   d8ffc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ffe:	6020      	str	r0, [r4, #0]
	}
   d9000:	4620      	mov	r0, r4
   d9002:	bd38      	pop	{r3, r4, r5, pc}
   d9004:	000de3ec 	.word	0x000de3ec

000d9008 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d9008:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d900a:	2300      	movs	r3, #0
   d900c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d900e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9010:	4604      	mov	r4, r0
   d9012:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9014:	b12b      	cbz	r3, d9022 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9016:	2202      	movs	r2, #2
   d9018:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d901a:	68eb      	ldr	r3, [r5, #12]
   d901c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d901e:	68ab      	ldr	r3, [r5, #8]
   d9020:	60a3      	str	r3, [r4, #8]
    }
   d9022:	4620      	mov	r0, r4
   d9024:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d9028:	b5f0      	push	{r4, r5, r6, r7, lr}
   d902a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d902c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d902e:	4668      	mov	r0, sp
   d9030:	f7ff ff2a 	bl	d8e88 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d9034:	f04f 0302 	mov.w	r3, #2
   d9038:	e8d4 2f4f 	ldrexb	r2, [r4]
   d903c:	2a00      	cmp	r2, #0
   d903e:	d103      	bne.n	d9048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d9040:	e8c4 3f41 	strexb	r1, r3, [r4]
   d9044:	2900      	cmp	r1, #0
   d9046:	d1f7      	bne.n	d9038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d9048:	d125      	bne.n	d9096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d904a:	f104 050c 	add.w	r5, r4, #12
   d904e:	4669      	mov	r1, sp
   d9050:	4628      	mov	r0, r5
   d9052:	f7ff ff19 	bl	d8e88 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d9056:	f3bf 8f5b 	dmb	ish
   d905a:	2301      	movs	r3, #1
   d905c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d905e:	2000      	movs	r0, #0
   d9060:	f104 0308 	add.w	r3, r4, #8
   d9064:	f3bf 8f5b 	dmb	ish
   d9068:	e853 6f00 	ldrex	r6, [r3]
   d906c:	e843 0200 	strex	r2, r0, [r3]
   d9070:	2a00      	cmp	r2, #0
   d9072:	d1f9      	bne.n	d9068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d9074:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9078:	b16e      	cbz	r6, d9096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d907a:	f7ff fd4d 	bl	d8b18 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d907e:	b178      	cbz	r0, d90a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9080:	4629      	mov	r1, r5
   d9082:	4630      	mov	r0, r6
   d9084:	f7ff ff8b 	bl	d8f9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d9088:	4630      	mov	r0, r6
   d908a:	f7fb f941 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d908e:	2110      	movs	r1, #16
   d9090:	4630      	mov	r0, r6
   d9092:	f001 fd6c 	bl	dab6e <_ZdlPvj>
        p_->setError(std::move(error));
   d9096:	4668      	mov	r0, sp
   d9098:	f7ff ff03 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
    }
   d909c:	b009      	add	sp, #36	; 0x24
   d909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d90a0:	4631      	mov	r1, r6
   d90a2:	a802      	add	r0, sp, #8
   d90a4:	f7ff ffb0 	bl	d9008 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d90a8:	68e0      	ldr	r0, [r4, #12]
   d90aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d90ae:	b108      	cbz	r0, d90b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d90b0:	f002 fc38 	bl	db924 <strdup>
        type_(type) {
   d90b4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d90b6:	2010      	movs	r0, #16
   d90b8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d90bc:	f7fa ffeb 	bl	d4096 <_Znwj>
   d90c0:	4605      	mov	r5, r0
   d90c2:	b1e8      	cbz	r0, d9100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d90c4:	2700      	movs	r7, #0
   d90c6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90c8:	2018      	movs	r0, #24
   d90ca:	f7fa ffe4 	bl	d4096 <_Znwj>
   d90ce:	4604      	mov	r4, r0
   d90d0:	b188      	cbz	r0, d90f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d90d2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d90d4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d90d6:	a802      	add	r0, sp, #8
   d90d8:	f7fd f862 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90dc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d90de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d90e4:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d90e6:	a906      	add	r1, sp, #24
   d90e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90ea:	60e3      	str	r3, [r4, #12]
   d90ec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d90f0:	9205      	str	r2, [sp, #20]
   d90f2:	f7ff fec9 	bl	d8e88 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d90f6:	4b08      	ldr	r3, [pc, #32]	; (d9118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d90f8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d90fa:	4b08      	ldr	r3, [pc, #32]	; (d911c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90fc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d90fe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d9100:	a806      	add	r0, sp, #24
   d9102:	f7ff fece 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d9106:	a802      	add	r0, sp, #8
   d9108:	f7fb f902 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d910c:	2200      	movs	r2, #0
   d910e:	4629      	mov	r1, r5
   d9110:	4803      	ldr	r0, [pc, #12]	; (d9120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d9112:	f7ff fd09 	bl	d8b28 <application_thread_invoke>
   d9116:	e7b7      	b.n	d9088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d9118:	000d8fb1 	.word	0x000d8fb1
   d911c:	000d9249 	.word	0x000d9249
   d9120:	000d8e0b 	.word	0x000d8e0b

000d9124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9128:	b08a      	sub	sp, #40	; 0x28
   d912a:	4605      	mov	r5, r0
   d912c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d9130:	460c      	mov	r4, r1
   d9132:	4617      	mov	r7, r2
   d9134:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9136:	f7ff fd4d 	bl	d8bd4 <spark_cloud_flag_connected>
   d913a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d913c:	4682      	mov	sl, r0
   d913e:	bb38      	cbnz	r0, d9190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d9140:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9144:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9146:	a905      	add	r1, sp, #20
   d9148:	4630      	mov	r0, r6
   d914a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d914e:	f7ff fe9b 	bl	d8e88 <_ZN8particle5ErrorC1EOS0_>
   d9152:	2014      	movs	r0, #20
   d9154:	f7fa ff9f 	bl	d4096 <_Znwj>
   d9158:	4604      	mov	r4, r0
   d915a:	b148      	cbz	r0, d9170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d915c:	2302      	movs	r3, #2
   d915e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9160:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9162:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9166:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d9168:	4631      	mov	r1, r6
   d916a:	300c      	adds	r0, #12
   d916c:	f7ff fe8c 	bl	d8e88 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9170:	4628      	mov	r0, r5
	: __shared_count(__p)
   d9172:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9174:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d9178:	f7ff ff32 	bl	d8fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d917c:	4630      	mov	r0, r6
   d917e:	f7ff fe90 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d9182:	a805      	add	r0, sp, #20
   d9184:	f7ff fe8d 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d9188:	4628      	mov	r0, r5
   d918a:	b00a      	add	sp, #40	; 0x28
   d918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9190:	230c      	movs	r3, #12
   d9192:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d9196:	2014      	movs	r0, #20
   d9198:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d919c:	9307      	str	r3, [sp, #28]
   d919e:	f7fa ff7a 	bl	d4096 <_Znwj>
   d91a2:	4601      	mov	r1, r0
   d91a4:	b128      	cbz	r0, d91b2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d91a6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d91aa:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d91ae:	f880 a001 	strb.w	sl, [r0, #1]
   d91b2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d91b4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d91b6:	f7ff ff13 	bl	d8fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d91ba:	4b22      	ldr	r3, [pc, #136]	; (d9244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d91bc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d91be:	2008      	movs	r0, #8
   d91c0:	f7fa ff69 	bl	d4096 <_Znwj>
   d91c4:	4682      	mov	sl, r0
   d91c6:	b128      	cbz	r0, d91d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91c8:	9b03      	ldr	r3, [sp, #12]
   d91ca:	f840 3b04 	str.w	r3, [r0], #4
   d91ce:	a904      	add	r1, sp, #16
   d91d0:	f7fd fda0 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d91d4:	9600      	str	r6, [sp, #0]
   d91d6:	fa5f f389 	uxtb.w	r3, r9
   d91da:	4642      	mov	r2, r8
   d91dc:	4639      	mov	r1, r7
   d91de:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d91e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d91e4:	f7ff fd06 	bl	d8bf4 <spark_send_event>
   d91e8:	b9b8      	cbnz	r0, d921a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d91ea:	9b03      	ldr	r3, [sp, #12]
   d91ec:	785b      	ldrb	r3, [r3, #1]
   d91ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d91f2:	b993      	cbnz	r3, d921a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d91f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d91f8:	a905      	add	r1, sp, #20
   d91fa:	a803      	add	r0, sp, #12
   d91fc:	9205      	str	r2, [sp, #20]
   d91fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9202:	f7ff ff11 	bl	d9028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9206:	a805      	add	r0, sp, #20
   d9208:	f7ff fe4b 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d920c:	a805      	add	r0, sp, #20
   d920e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9210:	f7ff fea6 	bl	d8f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d9214:	a806      	add	r0, sp, #24
   d9216:	f7fc f9ff 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d921a:	9b03      	ldr	r3, [sp, #12]
   d921c:	9305      	str	r3, [sp, #20]
   d921e:	a904      	add	r1, sp, #16
   d9220:	a806      	add	r0, sp, #24
   d9222:	f7fd fd77 	bl	d6d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9226:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9228:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d922a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d922c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d922e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d9230:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d9232:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d9234:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d9236:	f7fc f9ef 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d923a:	a804      	add	r0, sp, #16
   d923c:	f7fc f9ec 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d9240:	e7a2      	b.n	d9188 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d9242:	bf00      	nop
   d9244:	000d930d 	.word	0x000d930d

000d9248 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d9248:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d924a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d924c:	4605      	mov	r5, r0
	  switch (__op)
   d924e:	d007      	beq.n	d9260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d9250:	2a03      	cmp	r2, #3
   d9252:	d018      	beq.n	d9286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d9254:	2a01      	cmp	r2, #1
   d9256:	d101      	bne.n	d925c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9258:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d925a:	6003      	str	r3, [r0, #0]
	}
   d925c:	2000      	movs	r0, #0
   d925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9260:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d9262:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9264:	f7fa ff17 	bl	d4096 <_Znwj>
   d9268:	4604      	mov	r4, r0
   d926a:	b150      	cbz	r0, d9282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d926c:	4631      	mov	r1, r6
   d926e:	f7ff fecb 	bl	d9008 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9272:	6930      	ldr	r0, [r6, #16]
   d9274:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9278:	b108      	cbz	r0, d927e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d927a:	f002 fb53 	bl	db924 <strdup>
        type_(type) {
   d927e:	6120      	str	r0, [r4, #16]
   d9280:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d9282:	602c      	str	r4, [r5, #0]
	}
   d9284:	e7ea      	b.n	d925c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9286:	6804      	ldr	r4, [r0, #0]
   d9288:	2c00      	cmp	r4, #0
   d928a:	d0e7      	beq.n	d925c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d928c:	f104 0010 	add.w	r0, r4, #16
   d9290:	f7ff fe07 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d9294:	4620      	mov	r0, r4
   d9296:	f7fb f83b 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d929a:	2118      	movs	r1, #24
   d929c:	4620      	mov	r0, r4
   d929e:	f001 fc66 	bl	dab6e <_ZdlPvj>
   d92a2:	e7db      	b.n	d925c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d92a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d92a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d92a6:	2300      	movs	r3, #0
   d92a8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d92aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d92ac:	4604      	mov	r4, r0
   d92ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d92b0:	b12b      	cbz	r3, d92be <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d92b2:	2202      	movs	r2, #2
   d92b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d92b6:	68eb      	ldr	r3, [r5, #12]
   d92b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d92ba:	68ab      	ldr	r3, [r5, #8]
   d92bc:	60a3      	str	r3, [r4, #8]
    }
   d92be:	4620      	mov	r0, r4
   d92c0:	bd38      	pop	{r3, r4, r5, pc}

000d92c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d92c2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d92c4:	b570      	push	{r4, r5, r6, lr}
   d92c6:	4604      	mov	r4, r0
	  switch (__op)
   d92c8:	d007      	beq.n	d92da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d92ca:	2a03      	cmp	r2, #3
   d92cc:	d012      	beq.n	d92f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d92ce:	2a01      	cmp	r2, #1
   d92d0:	d101      	bne.n	d92d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d92d2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d92d4:	6003      	str	r3, [r0, #0]
	}
   d92d6:	2000      	movs	r0, #0
   d92d8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d92da:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d92dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d92de:	f7fa feda 	bl	d4096 <_Znwj>
   d92e2:	4605      	mov	r5, r0
   d92e4:	b120      	cbz	r0, d92f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d92e6:	4631      	mov	r1, r6
   d92e8:	f7ff ffdc 	bl	d92a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d92ec:	7c33      	ldrb	r3, [r6, #16]
   d92ee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d92f0:	6025      	str	r5, [r4, #0]
	}
   d92f2:	e7f0      	b.n	d92d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d92f4:	6804      	ldr	r4, [r0, #0]
   d92f6:	2c00      	cmp	r4, #0
   d92f8:	d0ed      	beq.n	d92d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d92fa:	4620      	mov	r0, r4
   d92fc:	f7fb f808 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9300:	2114      	movs	r1, #20
   d9302:	4620      	mov	r0, r4
   d9304:	f001 fc33 	bl	dab6e <_ZdlPvj>
   d9308:	e7e5      	b.n	d92d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d930c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d930c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d930e:	b089      	sub	sp, #36	; 0x24
   d9310:	4604      	mov	r4, r0
   d9312:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9314:	a801      	add	r0, sp, #4
   d9316:	4611      	mov	r1, r2
   d9318:	f7ff fe22 	bl	d8f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d931c:	b1a4      	cbz	r4, d9348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d931e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9320:	b11d      	cbz	r5, d932a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d9322:	4628      	mov	r0, r5
   d9324:	f002 fafe 	bl	db924 <strdup>
   d9328:	4605      	mov	r5, r0
   d932a:	a801      	add	r0, sp, #4
   d932c:	a903      	add	r1, sp, #12
        type_(type) {
   d932e:	9503      	str	r5, [sp, #12]
   d9330:	f8ad 4010 	strh.w	r4, [sp, #16]
   d9334:	f7ff fe78 	bl	d9028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9338:	a803      	add	r0, sp, #12
   d933a:	f7ff fdb2 	bl	d8ea2 <_ZN8particle5ErrorD1Ev>
   d933e:	a802      	add	r0, sp, #8
   d9340:	f7fc f96a 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9344:	b009      	add	sp, #36	; 0x24
   d9346:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9348:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d934a:	2301      	movs	r3, #1
   d934c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9350:	2a00      	cmp	r2, #0
   d9352:	d103      	bne.n	d935c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9354:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9358:	2900      	cmp	r1, #0
   d935a:	d1f7      	bne.n	d934c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d935c:	d1ef      	bne.n	d933e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d935e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9360:	f3bf 8f5b 	dmb	ish
   d9364:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9366:	1d2b      	adds	r3, r5, #4
   d9368:	f3bf 8f5b 	dmb	ish
   d936c:	e853 6f00 	ldrex	r6, [r3]
   d9370:	e843 4200 	strex	r2, r4, [r3]
   d9374:	2a00      	cmp	r2, #0
   d9376:	d1f9      	bne.n	d936c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9378:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d937c:	2e00      	cmp	r6, #0
   d937e:	d0de      	beq.n	d933e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9380:	4620      	mov	r0, r4
   d9382:	f7ff fbc9 	bl	d8b18 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9386:	4607      	mov	r7, r0
   d9388:	b160      	cbz	r0, d93a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d938a:	f105 010c 	add.w	r1, r5, #12
   d938e:	4630      	mov	r0, r6
   d9390:	f7ff fe15 	bl	d8fbe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9394:	4630      	mov	r0, r6
   d9396:	f7fa ffbb 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d939a:	2110      	movs	r1, #16
   d939c:	4630      	mov	r0, r6
   d939e:	f001 fbe6 	bl	dab6e <_ZdlPvj>
   d93a2:	e7cc      	b.n	d933e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d93a4:	4631      	mov	r1, r6
   d93a6:	a803      	add	r0, sp, #12
   d93a8:	f7ff ff7c 	bl	d92a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d93ac:	7b2b      	ldrb	r3, [r5, #12]
   d93ae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d93b2:	2010      	movs	r0, #16
   d93b4:	f7fa fe6f 	bl	d4096 <_Znwj>
   d93b8:	4605      	mov	r5, r0
   d93ba:	b1d0      	cbz	r0, d93f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d93bc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d93be:	2014      	movs	r0, #20
   d93c0:	f7fa fe69 	bl	d4096 <_Znwj>
   d93c4:	4604      	mov	r4, r0
   d93c6:	b178      	cbz	r0, d93e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d93c8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d93ca:	4601      	mov	r1, r0
   d93cc:	a803      	add	r0, sp, #12
   d93ce:	f7fc fee7 	bl	d61a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d93d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d93d6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93d8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d93da:	9205      	str	r2, [sp, #20]
   d93dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d93de:	60e3      	str	r3, [r4, #12]
   d93e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d93e4:	9206      	str	r2, [sp, #24]
   d93e6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d93e8:	4b06      	ldr	r3, [pc, #24]	; (d9404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d93ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d93ec:	4b06      	ldr	r3, [pc, #24]	; (d9408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d93ee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d93f0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d93f2:	a803      	add	r0, sp, #12
   d93f4:	f7fa ff8c 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d93f8:	2200      	movs	r2, #0
   d93fa:	4629      	mov	r1, r5
   d93fc:	4803      	ldr	r0, [pc, #12]	; (d940c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d93fe:	f7ff fb93 	bl	d8b28 <application_thread_invoke>
   d9402:	e7c7      	b.n	d9394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d9404:	000d8fd1 	.word	0x000d8fd1
   d9408:	000d92c3 	.word	0x000d92c3
   d940c:	000d8e0b 	.word	0x000d8e0b

000d9410 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9410:	2200      	movs	r2, #0
   d9412:	6840      	ldr	r0, [r0, #4]
   d9414:	4611      	mov	r1, r2
   d9416:	f7ff bc5d 	b.w	d8cd4 <network_listening>

000d941a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d941a:	2200      	movs	r2, #0
   d941c:	6840      	ldr	r0, [r0, #4]
   d941e:	4611      	mov	r1, r2
   d9420:	f7ff bc68 	b.w	d8cf4 <network_get_listen_timeout>

000d9424 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9424:	6840      	ldr	r0, [r0, #4]
   d9426:	2200      	movs	r2, #0
   d9428:	f7ff bc5c 	b.w	d8ce4 <network_set_listen_timeout>

000d942c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d942c:	6840      	ldr	r0, [r0, #4]
   d942e:	2200      	movs	r2, #0
   d9430:	f081 0101 	eor.w	r1, r1, #1
   d9434:	f7ff bc46 	b.w	d8cc4 <network_listen>

000d9438 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9438:	2300      	movs	r3, #0
   d943a:	6840      	ldr	r0, [r0, #4]
   d943c:	461a      	mov	r2, r3
   d943e:	4619      	mov	r1, r3
   d9440:	f7ff bc38 	b.w	d8cb4 <network_off>

000d9444 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9444:	2300      	movs	r3, #0
   d9446:	6840      	ldr	r0, [r0, #4]
   d9448:	461a      	mov	r2, r3
   d944a:	4619      	mov	r1, r3
   d944c:	f7ff bc2a 	b.w	d8ca4 <network_on>

000d9450 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9450:	2200      	movs	r2, #0
   d9452:	6840      	ldr	r0, [r0, #4]
   d9454:	4611      	mov	r1, r2
   d9456:	f7ff bc1d 	b.w	d8c94 <network_ready>

000d945a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d945a:	2200      	movs	r2, #0
   d945c:	6840      	ldr	r0, [r0, #4]
   d945e:	4611      	mov	r1, r2
   d9460:	f7ff bc08 	b.w	d8c74 <network_connecting>

000d9464 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9464:	6840      	ldr	r0, [r0, #4]
   d9466:	2200      	movs	r2, #0
   d9468:	2102      	movs	r1, #2
   d946a:	f7ff bc0b 	b.w	d8c84 <network_disconnect>

000d946e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d946e:	2300      	movs	r3, #0
   d9470:	6840      	ldr	r0, [r0, #4]
   d9472:	461a      	mov	r2, r3
   d9474:	f7ff bbf6 	b.w	d8c64 <network_connect>

000d9478 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9478:	4b02      	ldr	r3, [pc, #8]	; (d9484 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d947a:	2203      	movs	r2, #3
   d947c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d947e:	4a02      	ldr	r2, [pc, #8]	; (d9488 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9480:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d9482:	4770      	bx	lr
   d9484:	2003e60c 	.word	0x2003e60c
   d9488:	000de408 	.word	0x000de408

000d948c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d948c:	4770      	bx	lr

000d948e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d948e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9490:	4606      	mov	r6, r0
   d9492:	4615      	mov	r5, r2
   d9494:	460c      	mov	r4, r1
   d9496:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9498:	42bc      	cmp	r4, r7
   d949a:	d006      	beq.n	d94aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d949c:	6833      	ldr	r3, [r6, #0]
   d949e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d94a2:	689b      	ldr	r3, [r3, #8]
   d94a4:	4630      	mov	r0, r6
   d94a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d94a8:	e7f6      	b.n	d9498 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d94aa:	4628      	mov	r0, r5
   d94ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d94ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d94ae:	7c00      	ldrb	r0, [r0, #16]
   d94b0:	2200      	movs	r2, #0
   d94b2:	f7ff ba09 	b.w	d88c8 <hal_i2c_write>

000d94b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d94b6:	7c00      	ldrb	r0, [r0, #16]
   d94b8:	2100      	movs	r1, #0
   d94ba:	f7ff ba0d 	b.w	d88d8 <hal_i2c_available>

000d94be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d94be:	7c00      	ldrb	r0, [r0, #16]
   d94c0:	2100      	movs	r1, #0
   d94c2:	f7ff ba11 	b.w	d88e8 <hal_i2c_read>

000d94c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d94c6:	7c00      	ldrb	r0, [r0, #16]
   d94c8:	2100      	movs	r1, #0
   d94ca:	f7ff ba15 	b.w	d88f8 <hal_i2c_peek>

000d94ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d94ce:	7c00      	ldrb	r0, [r0, #16]
   d94d0:	2100      	movs	r1, #0
   d94d2:	f7ff ba19 	b.w	d8908 <hal_i2c_flush>

000d94d6 <_ZN7TwoWireD0Ev>:
   d94d6:	b510      	push	{r4, lr}
   d94d8:	2114      	movs	r1, #20
   d94da:	4604      	mov	r4, r0
   d94dc:	f001 fb47 	bl	dab6e <_ZdlPvj>
   d94e0:	4620      	mov	r0, r4
   d94e2:	bd10      	pop	{r4, pc}

000d94e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d94e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d94e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d94ea:	4604      	mov	r4, r0
   d94ec:	4608      	mov	r0, r1
   d94ee:	2100      	movs	r1, #0
   d94f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d94f4:	4b03      	ldr	r3, [pc, #12]	; (d9504 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d94f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d94f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d94fa:	4611      	mov	r1, r2
   d94fc:	f7ff fa14 	bl	d8928 <hal_i2c_init>
}
   d9500:	4620      	mov	r0, r4
   d9502:	bd10      	pop	{r4, pc}
   d9504:	000de444 	.word	0x000de444

000d9508 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9508:	2300      	movs	r3, #0
   d950a:	7c00      	ldrb	r0, [r0, #16]
   d950c:	461a      	mov	r2, r3
   d950e:	4619      	mov	r1, r3
   d9510:	f7ff b9c2 	b.w	d8898 <hal_i2c_begin>

000d9514 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9516:	2200      	movs	r2, #0
   d9518:	2314      	movs	r3, #20
   d951a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d951e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9522:	780b      	ldrb	r3, [r1, #0]
   d9524:	f88d 3008 	strb.w	r3, [sp, #8]
   d9528:	684b      	ldr	r3, [r1, #4]
   d952a:	9303      	str	r3, [sp, #12]
   d952c:	68cb      	ldr	r3, [r1, #12]
   d952e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9530:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9532:	7a0b      	ldrb	r3, [r1, #8]
   d9534:	9305      	str	r3, [sp, #20]
   d9536:	a901      	add	r1, sp, #4
   d9538:	f7ff fa0e 	bl	d8958 <hal_i2c_request_ex>
}
   d953c:	b007      	add	sp, #28
   d953e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9542 <_ZN7TwoWire11requestFromEhjh>:
{
   d9542:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9544:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9546:	f88d 1000 	strb.w	r1, [sp]
   d954a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d954e:	9103      	str	r1, [sp, #12]
   d9550:	bf18      	it	ne
   d9552:	2301      	movne	r3, #1
   d9554:	4669      	mov	r1, sp
    size_ = size;
   d9556:	9201      	str	r2, [sp, #4]
   d9558:	f88d 3008 	strb.w	r3, [sp, #8]
   d955c:	f7ff ffda 	bl	d9514 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9560:	b005      	add	sp, #20
   d9562:	f85d fb04 	ldr.w	pc, [sp], #4

000d9566 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9566:	7c00      	ldrb	r0, [r0, #16]
   d9568:	2200      	movs	r2, #0
   d956a:	f7ff b99d 	b.w	d88a8 <hal_i2c_begin_transmission>

000d956e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d956e:	b2c9      	uxtb	r1, r1
   d9570:	f7ff bff9 	b.w	d9566 <_ZN7TwoWire17beginTransmissionEh>

000d9574 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9574:	7c00      	ldrb	r0, [r0, #16]
   d9576:	2200      	movs	r2, #0
   d9578:	f7ff b99e 	b.w	d88b8 <hal_i2c_end_transmission>

000d957c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d957c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d957e:	2100      	movs	r1, #0
   d9580:	7c00      	ldrb	r0, [r0, #16]
   d9582:	f7ff f9d9 	bl	d8938 <hal_i2c_lock>
}
   d9586:	fab0 f080 	clz	r0, r0
   d958a:	0940      	lsrs	r0, r0, #5
   d958c:	bd08      	pop	{r3, pc}

000d958e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d958e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9590:	2100      	movs	r1, #0
   d9592:	7c00      	ldrb	r0, [r0, #16]
   d9594:	f7ff f9d8 	bl	d8948 <hal_i2c_unlock>
}
   d9598:	fab0 f080 	clz	r0, r0
   d959c:	0940      	lsrs	r0, r0, #5
   d959e:	bd08      	pop	{r3, pc}

000d95a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d95a0:	4700      	bx	r0
	...

000d95a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d95a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d95a8:	2400      	movs	r4, #0
{
   d95aa:	461d      	mov	r5, r3
   d95ac:	460f      	mov	r7, r1
   d95ae:	4690      	mov	r8, r2
   d95b0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d95b2:	f7ff f961 	bl	d8878 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d95b6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d95b8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d95bc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d95c0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d95c4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d95c8:	bfa2      	ittt	ge
   d95ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d95ce:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d95d2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d95d4:	4907      	ldr	r1, [pc, #28]	; (d95f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d95d6:	9400      	str	r4, [sp, #0]
   d95d8:	4643      	mov	r3, r8
   d95da:	463a      	mov	r2, r7
   d95dc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d95de:	bfa8      	it	ge
   d95e0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d95e4:	f7ff f940 	bl	d8868 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d95e8:	fab0 f080 	clz	r0, r0
   d95ec:	0940      	lsrs	r0, r0, #5
   d95ee:	b004      	add	sp, #16
   d95f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d95f4:	000d95a1 	.word	0x000d95a1

000d95f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d95f8:	4770      	bx	lr

000d95fa <_ZN9IPAddressD0Ev>:
   d95fa:	b510      	push	{r4, lr}
   d95fc:	2118      	movs	r1, #24
   d95fe:	4604      	mov	r4, r0
   d9600:	f001 fab5 	bl	dab6e <_ZdlPvj>
   d9604:	4620      	mov	r0, r4
   d9606:	bd10      	pop	{r4, pc}

000d9608 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9608:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d960a:	7d03      	ldrb	r3, [r0, #20]
   d960c:	2b06      	cmp	r3, #6
{
   d960e:	b08d      	sub	sp, #52	; 0x34
   d9610:	460e      	mov	r6, r1
   d9612:	f100 0704 	add.w	r7, r0, #4
   d9616:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d961a:	d012      	beq.n	d9642 <_ZNK9IPAddress7printToER5Print+0x3a>
   d961c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d9620:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9624:	220a      	movs	r2, #10
   d9626:	4630      	mov	r0, r6
   d9628:	f000 fc8f 	bl	d9f4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d962c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d962e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9630:	d019      	beq.n	d9666 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9632:	2c00      	cmp	r4, #0
   d9634:	d0f4      	beq.n	d9620 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9636:	212e      	movs	r1, #46	; 0x2e
   d9638:	4630      	mov	r0, r6
   d963a:	f000 fc83 	bl	d9f44 <_ZN5Print5printEc>
   d963e:	4404      	add	r4, r0
   d9640:	e7ee      	b.n	d9620 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9642:	232f      	movs	r3, #47	; 0x2f
   d9644:	466a      	mov	r2, sp
   d9646:	4639      	mov	r1, r7
   d9648:	200a      	movs	r0, #10
		buf[0] = 0;
   d964a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d964e:	f7ff f98b 	bl	d8968 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9652:	4668      	mov	r0, sp
   d9654:	f002 f983 	bl	db95e <strlen>
   d9658:	6833      	ldr	r3, [r6, #0]
   d965a:	4602      	mov	r2, r0
   d965c:	68db      	ldr	r3, [r3, #12]
   d965e:	4669      	mov	r1, sp
   d9660:	4630      	mov	r0, r6
   d9662:	4798      	blx	r3
   d9664:	4604      	mov	r4, r0
    }
    return n;
}
   d9666:	4620      	mov	r0, r4
   d9668:	b00d      	add	sp, #52	; 0x34
   d966a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d966c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d966c:	b510      	push	{r4, lr}
   d966e:	4b05      	ldr	r3, [pc, #20]	; (d9684 <_ZN9IPAddressC1Ev+0x18>)
   d9670:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9672:	2211      	movs	r2, #17
   d9674:	f840 3b04 	str.w	r3, [r0], #4
   d9678:	2100      	movs	r1, #0
   d967a:	f002 f915 	bl	db8a8 <memset>
}
   d967e:	4620      	mov	r0, r4
   d9680:	bd10      	pop	{r4, pc}
   d9682:	bf00      	nop
   d9684:	000de46c 	.word	0x000de46c

000d9688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9688:	4603      	mov	r3, r0
   d968a:	4a07      	ldr	r2, [pc, #28]	; (d96a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d968c:	b510      	push	{r4, lr}
   d968e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9692:	f101 0210 	add.w	r2, r1, #16
   d9696:	f851 4b04 	ldr.w	r4, [r1], #4
   d969a:	f843 4b04 	str.w	r4, [r3], #4
   d969e:	4291      	cmp	r1, r2
   d96a0:	d1f9      	bne.n	d9696 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d96a2:	780a      	ldrb	r2, [r1, #0]
   d96a4:	701a      	strb	r2, [r3, #0]
}
   d96a6:	bd10      	pop	{r4, pc}
   d96a8:	000de46c 	.word	0x000de46c

000d96ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d96ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d96ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d96b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d96b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d96ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d96be:	2304      	movs	r3, #4
   d96c0:	6041      	str	r1, [r0, #4]
   d96c2:	7503      	strb	r3, [r0, #20]
}
   d96c4:	bd10      	pop	{r4, pc}
	...

000d96c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d96c8:	b513      	push	{r0, r1, r4, lr}
   d96ca:	4b05      	ldr	r3, [pc, #20]	; (d96e0 <_ZN9IPAddressC1EPKh+0x18>)
   d96cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d96ce:	78cb      	ldrb	r3, [r1, #3]
   d96d0:	9300      	str	r3, [sp, #0]
   d96d2:	788b      	ldrb	r3, [r1, #2]
   d96d4:	784a      	ldrb	r2, [r1, #1]
   d96d6:	7809      	ldrb	r1, [r1, #0]
   d96d8:	f7ff ffe8 	bl	d96ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d96dc:	b002      	add	sp, #8
   d96de:	bd10      	pop	{r4, pc}
   d96e0:	000de46c 	.word	0x000de46c

000d96e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d96e4:	f100 0310 	add.w	r3, r0, #16
   d96e8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d96ea:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d96ee:	2901      	cmp	r1, #1
   d96f0:	4618      	mov	r0, r3
   d96f2:	d108      	bne.n	d9706 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d96f4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d96f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d96fc:	3a01      	subs	r2, #1
   d96fe:	f103 0310 	add.w	r3, r3, #16
   d9702:	d1f2      	bne.n	d96ea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9704:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9706:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9708:	bf04      	itt	eq
   d970a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d970e:	1852      	addeq	r2, r2, r1
   d9710:	e7f4      	b.n	d96fc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9712 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9712:	4770      	bx	lr

000d9714 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d9714:	4770      	bx	lr

000d9716 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d9716:	2000      	movs	r0, #0
   d9718:	4770      	bx	lr

000d971a <_ZN5spark16JSONBufferWriterD0Ev>:
   d971a:	b510      	push	{r4, lr}
   d971c:	2114      	movs	r1, #20
   d971e:	4604      	mov	r4, r0
   d9720:	f001 fa25 	bl	dab6e <_ZdlPvj>
   d9724:	4620      	mov	r0, r4
   d9726:	bd10      	pop	{r4, pc}

000d9728 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9728:	b510      	push	{r4, lr}
   d972a:	2110      	movs	r1, #16
   d972c:	4604      	mov	r4, r0
   d972e:	f001 fa1e 	bl	dab6e <_ZdlPvj>
   d9732:	4620      	mov	r0, r4
   d9734:	bd10      	pop	{r4, pc}

000d9736 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d9736:	b508      	push	{r3, lr}
      { delete this; }
   d9738:	f7ff fff6 	bl	d9728 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d973c:	bd08      	pop	{r3, pc}

000d973e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d973e:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d9740:	68c4      	ldr	r4, [r0, #12]
   d9742:	b17c      	cbz	r4, d9764 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d9744:	6820      	ldr	r0, [r4, #0]
   d9746:	b108      	cbz	r0, d974c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d9748:	f7fa fcab 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d974c:	7a23      	ldrb	r3, [r4, #8]
   d974e:	b11b      	cbz	r3, d9758 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d9750:	6860      	ldr	r0, [r4, #4]
   d9752:	b108      	cbz	r0, d9758 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d9754:	f7fa fca5 	bl	d40a2 <_ZdaPv>
   d9758:	4620      	mov	r0, r4
   d975a:	210c      	movs	r1, #12
   d975c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9760:	f001 ba05 	b.w	dab6e <_ZdlPvj>
   d9764:	bd10      	pop	{r4, pc}

000d9766 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d9766:	b538      	push	{r3, r4, r5, lr}
   d9768:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d976a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   d976e:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d9770:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d9772:	d207      	bcs.n	d9784 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d9774:	1ad2      	subs	r2, r2, r3
   d9776:	6880      	ldr	r0, [r0, #8]
   d9778:	42aa      	cmp	r2, r5
   d977a:	bf28      	it	cs
   d977c:	462a      	movcs	r2, r5
   d977e:	4418      	add	r0, r3
   d9780:	f002 f86a 	bl	db858 <memcpy>
    }
    n_ += size;
   d9784:	6922      	ldr	r2, [r4, #16]
   d9786:	442a      	add	r2, r5
   d9788:	6122      	str	r2, [r4, #16]
}
   d978a:	bd38      	pop	{r3, r4, r5, pc}

000d978c <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d978c:	b40e      	push	{r1, r2, r3}
   d978e:	b517      	push	{r0, r1, r2, r4, lr}
   d9790:	ab05      	add	r3, sp, #20
   d9792:	4604      	mov	r4, r0
   d9794:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d9798:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   d979a:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d979c:	6903      	ldr	r3, [r0, #16]
   d979e:	6880      	ldr	r0, [r0, #8]
   d97a0:	428b      	cmp	r3, r1
   d97a2:	bf38      	it	cc
   d97a4:	1ac9      	subcc	r1, r1, r3
   d97a6:	4418      	add	r0, r3
   d97a8:	bf28      	it	cs
   d97aa:	2100      	movcs	r1, #0
   d97ac:	9b01      	ldr	r3, [sp, #4]
   d97ae:	f7ff fae1 	bl	d8d74 <vsnprintf>
    va_end(args);
    n_ += n;
   d97b2:	6923      	ldr	r3, [r4, #16]
   d97b4:	4418      	add	r0, r3
   d97b6:	6120      	str	r0, [r4, #16]
}
   d97b8:	b003      	add	sp, #12
   d97ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d97be:	b003      	add	sp, #12
   d97c0:	4770      	bx	lr

000d97c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d97c2:	b510      	push	{r4, lr}
          _M_dispose();
   d97c4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d97c6:	4604      	mov	r4, r0
          _M_dispose();
   d97c8:	689b      	ldr	r3, [r3, #8]
   d97ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d97cc:	68a3      	ldr	r3, [r4, #8]
   d97ce:	3b01      	subs	r3, #1
   d97d0:	60a3      	str	r3, [r4, #8]
   d97d2:	b92b      	cbnz	r3, d97e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d97d4:	6823      	ldr	r3, [r4, #0]
   d97d6:	4620      	mov	r0, r4
   d97d8:	68db      	ldr	r3, [r3, #12]
    }
   d97da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d97de:	4718      	bx	r3
    }
   d97e0:	bd10      	pop	{r4, pc}

000d97e2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d97e2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d97e4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d97e6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d97ea:	689b      	ldr	r3, [r3, #8]
   d97ec:	2201      	movs	r2, #1
   d97ee:	f10d 0107 	add.w	r1, sp, #7
   d97f2:	4798      	blx	r3
}
   d97f4:	b003      	add	sp, #12
   d97f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d97fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d97fa:	b538      	push	{r3, r4, r5, lr}
   d97fc:	680b      	ldr	r3, [r1, #0]
   d97fe:	6003      	str	r3, [r0, #0]
   d9800:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9802:	6843      	ldr	r3, [r0, #4]
   d9804:	429d      	cmp	r5, r3
    class __shared_ptr
   d9806:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9808:	d00c      	beq.n	d9824 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d980a:	b115      	cbz	r5, d9812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d980c:	686b      	ldr	r3, [r5, #4]
   d980e:	3301      	adds	r3, #1
   d9810:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9812:	6860      	ldr	r0, [r4, #4]
   d9814:	b128      	cbz	r0, d9822 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d9816:	6843      	ldr	r3, [r0, #4]
   d9818:	3b01      	subs	r3, #1
   d981a:	6043      	str	r3, [r0, #4]
   d981c:	b90b      	cbnz	r3, d9822 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d981e:	f7ff ffd0 	bl	d97c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9822:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d9824:	4620      	mov	r0, r4
   d9826:	bd38      	pop	{r3, r4, r5, pc}

000d9828 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9828:	460b      	mov	r3, r1
   d982a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d982c:	2200      	movs	r2, #0
   d982e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9830:	e9c0 2200 	strd	r2, r2, [r0]
   d9834:	4604      	mov	r4, r0
        t_ = t;
   d9836:	6083      	str	r3, [r0, #8]
    if (t) {
   d9838:	b90b      	cbnz	r3, d983e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d983a:	4620      	mov	r0, r4
   d983c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d983e:	f7ff ffdc 	bl	d97fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9842:	e7fa      	b.n	d983a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9844 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9844:	6883      	ldr	r3, [r0, #8]
   d9846:	b1eb      	cbz	r3, d9884 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9848:	781a      	ldrb	r2, [r3, #0]
   d984a:	2a03      	cmp	r2, #3
   d984c:	d81a      	bhi.n	d9884 <_ZNK5spark9JSONValue4typeEv+0x40>
   d984e:	e8df f002 	tbb	[pc, r2]
   d9852:	1704      	.short	0x1704
   d9854:	1b02      	.short	0x1b02
   d9856:	2005      	movs	r0, #5
   d9858:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d985a:	6802      	ldr	r2, [r0, #0]
   d985c:	685b      	ldr	r3, [r3, #4]
   d985e:	6852      	ldr	r2, [r2, #4]
   d9860:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9862:	282d      	cmp	r0, #45	; 0x2d
   d9864:	d012      	beq.n	d988c <_ZNK5spark9JSONValue4typeEv+0x48>
   d9866:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d986a:	2b09      	cmp	r3, #9
   d986c:	d90e      	bls.n	d988c <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d986e:	2874      	cmp	r0, #116	; 0x74
   d9870:	d00e      	beq.n	d9890 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9872:	2866      	cmp	r0, #102	; 0x66
   d9874:	d00c      	beq.n	d9890 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9876:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d987a:	4258      	negs	r0, r3
   d987c:	4158      	adcs	r0, r3
   d987e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9880:	2006      	movs	r0, #6
   d9882:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9884:	2000      	movs	r0, #0
   d9886:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9888:	2004      	movs	r0, #4
   d988a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d988c:	2003      	movs	r0, #3
   d988e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9890:	2002      	movs	r0, #2
}
   d9892:	4770      	bx	lr

000d9894 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d9894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9898:	b086      	sub	sp, #24
   d989a:	4607      	mov	r7, r0
   d989c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d989e:	a802      	add	r0, sp, #8
   d98a0:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d98a2:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d98a4:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d98a6:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d98a8:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d98aa:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d98ac:	f7ff f8fc 	bl	d8aa8 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d98b0:	e9cd 4400 	strd	r4, r4, [sp]
   d98b4:	4623      	mov	r3, r4
   d98b6:	4642      	mov	r2, r8
   d98b8:	4639      	mov	r1, r7
   d98ba:	a802      	add	r0, sp, #8
   d98bc:	f7ff f8fc 	bl	d8ab8 <jsmn_parse>
    if (n <= 0) {
   d98c0:	1e06      	subs	r6, r0, #0
   d98c2:	dd1e      	ble.n	d9902 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d98c4:	4910      	ldr	r1, [pc, #64]	; (d9908 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d98c6:	0130      	lsls	r0, r6, #4
   d98c8:	f001 f955 	bl	dab76 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d98cc:	4605      	mov	r5, r0
   d98ce:	b190      	cbz	r0, d98f6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
    jsmn_init(&parser, nullptr); // Reset parser
   d98d0:	4621      	mov	r1, r4
   d98d2:	a802      	add	r0, sp, #8
   d98d4:	f7ff f8e8 	bl	d8aa8 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d98d8:	e9cd 6400 	strd	r6, r4, [sp]
   d98dc:	462b      	mov	r3, r5
   d98de:	4642      	mov	r2, r8
   d98e0:	4639      	mov	r1, r7
   d98e2:	a802      	add	r0, sp, #8
   d98e4:	f7ff f8e8 	bl	d8ab8 <jsmn_parse>
   d98e8:	42a0      	cmp	r0, r4
   d98ea:	dd07      	ble.n	d98fc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
    *tokens = t.release();
   d98ec:	f8ca 5000 	str.w	r5, [sl]
    return true;
   d98f0:	2001      	movs	r0, #1
    *count = n;
   d98f2:	f8c9 6000 	str.w	r6, [r9]
}
   d98f6:	b006      	add	sp, #24
   d98f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   d98fc:	4628      	mov	r0, r5
   d98fe:	f7fa fbd0 	bl	d40a2 <_ZdaPv>
      }
   d9902:	4620      	mov	r0, r4
   d9904:	e7f7      	b.n	d98f6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d9906:	bf00      	nop
   d9908:	000de5cc 	.word	0x000de5cc

000d990c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d990c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d9910:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d9912:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d9914:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d9916:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d9918:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d991a:	4607      	mov	r7, r0
    const char *s = s1;
   d991c:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d991e:	4619      	mov	r1, r3
                    *str = 0x0d;
   d9920:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d9924:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d9928:	42b4      	cmp	r4, r6
   d992a:	d063      	beq.n	d99f4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d992c:	4625      	mov	r5, r4
   d992e:	f815 2b01 	ldrb.w	r2, [r5], #1
   d9932:	2a5c      	cmp	r2, #92	; 0x5c
   d9934:	d12b      	bne.n	d998e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d9936:	42a1      	cmp	r1, r4
   d9938:	d007      	beq.n	d994a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d993a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d993e:	4618      	mov	r0, r3
   d9940:	465a      	mov	r2, fp
   d9942:	f001 ff97 	bl	db874 <memmove>
   d9946:	4603      	mov	r3, r0
                str += n;
   d9948:	445b      	add	r3, fp
            if (s == end) {
   d994a:	42b5      	cmp	r5, r6
   d994c:	d039      	beq.n	d99c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d994e:	7862      	ldrb	r2, [r4, #1]
   d9950:	2a75      	cmp	r2, #117	; 0x75
   d9952:	d12a      	bne.n	d99aa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d9954:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d9956:	1ab2      	subs	r2, r6, r2
   d9958:	2a03      	cmp	r2, #3
   d995a:	dd32      	ble.n	d99c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d995c:	1da0      	adds	r0, r4, #6
   d995e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d9962:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d9966:	45ae      	cmp	lr, r5
   d9968:	d053      	beq.n	d9a12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d996a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d996e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d9972:	fa5f fb82 	uxtb.w	fp, r2
   d9976:	f1bb 0f09 	cmp.w	fp, #9
   d997a:	d905      	bls.n	d9988 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d997c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d9980:	2a05      	cmp	r2, #5
   d9982:	d807      	bhi.n	d9994 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d9984:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d9988:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d998c:	e7eb      	b.n	d9966 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d998e:	4628      	mov	r0, r5
   d9990:	4604      	mov	r4, r0
   d9992:	e7c9      	b.n	d9928 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d9994:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d9998:	2a05      	cmp	r2, #5
   d999a:	d812      	bhi.n	d99c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d999c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d99a0:	e7f2      	b.n	d9988 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d99a2:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d99a6:	4601      	mov	r1, r0
   d99a8:	e7f2      	b.n	d9990 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d99aa:	2a6e      	cmp	r2, #110	; 0x6e
   d99ac:	d01c      	beq.n	d99e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d99ae:	d80e      	bhi.n	d99ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d99b0:	2a62      	cmp	r2, #98	; 0x62
   d99b2:	d013      	beq.n	d99dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d99b4:	d807      	bhi.n	d99c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d99b6:	2a2f      	cmp	r2, #47	; 0x2f
   d99b8:	d011      	beq.n	d99de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d99ba:	2a5c      	cmp	r2, #92	; 0x5c
   d99bc:	d00f      	beq.n	d99de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d99be:	2a22      	cmp	r2, #34	; 0x22
   d99c0:	d00d      	beq.n	d99de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d99c2:	2000      	movs	r0, #0
   d99c4:	e023      	b.n	d9a0e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d99c6:	2a66      	cmp	r2, #102	; 0x66
   d99c8:	d1fb      	bne.n	d99c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d99ca:	220c      	movs	r2, #12
   d99cc:	e007      	b.n	d99de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d99ce:	2a72      	cmp	r2, #114	; 0x72
   d99d0:	d00d      	beq.n	d99ee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d99d2:	2a74      	cmp	r2, #116	; 0x74
   d99d4:	d1f5      	bne.n	d99c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d99d6:	f883 a000 	strb.w	sl, [r3]
                    break;
   d99da:	e001      	b.n	d99e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d99dc:	2208      	movs	r2, #8
   d99de:	701a      	strb	r2, [r3, #0]
                ++s;
   d99e0:	1ca1      	adds	r1, r4, #2
                ++str;
   d99e2:	3301      	adds	r3, #1
                ++s;
   d99e4:	4608      	mov	r0, r1
   d99e6:	e7d3      	b.n	d9990 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d99e8:	f04f 020a 	mov.w	r2, #10
   d99ec:	e7f7      	b.n	d99de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d99ee:	f883 9000 	strb.w	r9, [r3]
                    break;
   d99f2:	e7f5      	b.n	d99e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   d99f4:	42a1      	cmp	r1, r4
   d99f6:	d006      	beq.n	d9a06 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d99f8:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d99fa:	4618      	mov	r0, r3
   d99fc:	4622      	mov	r2, r4
   d99fe:	f001 ff39 	bl	db874 <memmove>
   d9a02:	4603      	mov	r3, r0
        str += n;
   d9a04:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   d9a06:	eba3 0308 	sub.w	r3, r3, r8
   d9a0a:	60bb      	str	r3, [r7, #8]
    return true;
   d9a0c:	2001      	movs	r0, #1
}
   d9a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d9a12:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d9a16:	d9c4      	bls.n	d99a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d9a18:	4621      	mov	r1, r4
   d9a1a:	e7b9      	b.n	d9990 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d9a1c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d9a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9a1e:	4604      	mov	r4, r0
   d9a20:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d9a22:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d9a26:	2700      	movs	r7, #0
    while (t != end) {
   d9a28:	42b4      	cmp	r4, r6
   d9a2a:	d010      	beq.n	d9a4e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d9a2c:	7823      	ldrb	r3, [r4, #0]
   d9a2e:	2b03      	cmp	r3, #3
   d9a30:	d108      	bne.n	d9a44 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d9a32:	4629      	mov	r1, r5
   d9a34:	4620      	mov	r0, r4
   d9a36:	f7ff ff69 	bl	d990c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d9a3a:	b148      	cbz	r0, d9a50 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d9a3c:	68a3      	ldr	r3, [r4, #8]
   d9a3e:	54ef      	strb	r7, [r5, r3]
        ++t;
   d9a40:	3410      	adds	r4, #16
    while (t != end) {
   d9a42:	e7f1      	b.n	d9a28 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d9a44:	2b00      	cmp	r3, #0
   d9a46:	d1fb      	bne.n	d9a40 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d9a48:	68a2      	ldr	r2, [r4, #8]
   d9a4a:	54ab      	strb	r3, [r5, r2]
   d9a4c:	e7f8      	b.n	d9a40 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d9a4e:	2001      	movs	r0, #1
}
   d9a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d9a54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9a54:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9a56:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9a58:	e9c0 3300 	strd	r3, r3, [r0]
   d9a5c:	4604      	mov	r4, r0
        n_(0) {
   d9a5e:	480e      	ldr	r0, [pc, #56]	; (d9a98 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9a60:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9a64:	b1a9      	cbz	r1, d9a92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9a66:	780b      	ldrb	r3, [r1, #0]
   d9a68:	2b03      	cmp	r3, #3
   d9a6a:	d006      	beq.n	d9a7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9a6c:	b98b      	cbnz	r3, d9a92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9a6e:	6813      	ldr	r3, [r2, #0]
   d9a70:	6858      	ldr	r0, [r3, #4]
   d9a72:	684b      	ldr	r3, [r1, #4]
   d9a74:	5cc3      	ldrb	r3, [r0, r3]
   d9a76:	2b6e      	cmp	r3, #110	; 0x6e
   d9a78:	d007      	beq.n	d9a8a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d9a7a:	6813      	ldr	r3, [r2, #0]
   d9a7c:	684d      	ldr	r5, [r1, #4]
   d9a7e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9a80:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9a82:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9a84:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9a86:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9a88:	60e3      	str	r3, [r4, #12]
   d9a8a:	4611      	mov	r1, r2
   d9a8c:	4620      	mov	r0, r4
   d9a8e:	f7ff feb4 	bl	d97fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9a92:	4620      	mov	r0, r4
   d9a94:	bd38      	pop	{r3, r4, r5, pc}
   d9a96:	bf00      	nop
   d9a98:	000de5f4 	.word	0x000de5f4

000d9a9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9a9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9a9e:	2500      	movs	r5, #0
   d9aa0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d9aa2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d9aa6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9aaa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9aae:	4604      	mov	r4, r0
   d9ab0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9ab2:	b14b      	cbz	r3, d9ac8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9ab4:	781a      	ldrb	r2, [r3, #0]
   d9ab6:	2a01      	cmp	r2, #1
   d9ab8:	d106      	bne.n	d9ac8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d9aba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9abe:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9ac0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9ac2:	6143      	str	r3, [r0, #20]
   d9ac4:	f7ff fe99 	bl	d97fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9ac8:	4620      	mov	r0, r4
   d9aca:	bd38      	pop	{r3, r4, r5, pc}

000d9acc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9acc:	b510      	push	{r4, lr}
    if (!n_) {
   d9ace:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9ad0:	4604      	mov	r4, r0
    if (!n_) {
   d9ad2:	b163      	cbz	r3, d9aee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d9ad4:	6880      	ldr	r0, [r0, #8]
   d9ad6:	60e0      	str	r0, [r4, #12]
    --n_;
   d9ad8:	3b01      	subs	r3, #1
    ++t_;
   d9ada:	3010      	adds	r0, #16
   d9adc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9ade:	6120      	str	r0, [r4, #16]
    --n_;
   d9ae0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9ae2:	b113      	cbz	r3, d9aea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9ae4:	f7ff fdfe 	bl	d96e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9ae8:	60a0      	str	r0, [r4, #8]
    return true;
   d9aea:	2001      	movs	r0, #1
   d9aec:	e000      	b.n	d9af0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9aee:	4618      	mov	r0, r3
}
   d9af0:	bd10      	pop	{r4, pc}

000d9af2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9af2:	b510      	push	{r4, lr}
    write('}');
   d9af4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9af6:	4604      	mov	r4, r0
    write('}');
   d9af8:	f7ff fe73 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9afc:	2301      	movs	r3, #1
   d9afe:	7123      	strb	r3, [r4, #4]
}
   d9b00:	4620      	mov	r0, r4
   d9b02:	bd10      	pop	{r4, pc}

000d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   d9b04:	b508      	push	{r3, lr}
    switch (state_) {
   d9b06:	7903      	ldrb	r3, [r0, #4]
   d9b08:	2b01      	cmp	r3, #1
   d9b0a:	d002      	beq.n	d9b12 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9b0c:	2b02      	cmp	r3, #2
   d9b0e:	d004      	beq.n	d9b1a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   d9b10:	bd08      	pop	{r3, pc}
        write(',');
   d9b12:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9b14:	f7ff fe65 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
}
   d9b18:	e7fa      	b.n	d9b10 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d9b1a:	213a      	movs	r1, #58	; 0x3a
   d9b1c:	e7fa      	b.n	d9b14 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d9b1e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d9b1e:	b510      	push	{r4, lr}
   d9b20:	4604      	mov	r4, r0
    writeSeparator();
   d9b22:	f7ff ffef 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9b26:	4620      	mov	r0, r4
   d9b28:	217b      	movs	r1, #123	; 0x7b
   d9b2a:	f7ff fe5a 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d9b2e:	2300      	movs	r3, #0
   d9b30:	7123      	strb	r3, [r4, #4]
}
   d9b32:	4620      	mov	r0, r4
   d9b34:	bd10      	pop	{r4, pc}
	...

000d9b38 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   d9b38:	b538      	push	{r3, r4, r5, lr}
   d9b3a:	4604      	mov	r4, r0
   d9b3c:	460d      	mov	r5, r1
    writeSeparator();
   d9b3e:	f7ff ffe1 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   d9b42:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   d9b44:	689b      	ldr	r3, [r3, #8]
    if (val) {
   d9b46:	b13d      	cbz	r5, d9b58 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   d9b48:	4905      	ldr	r1, [pc, #20]	; (d9b60 <_ZN5spark10JSONWriter5valueEb+0x28>)
   d9b4a:	2204      	movs	r2, #4
        write("false", 5);
   d9b4c:	4620      	mov	r0, r4
   d9b4e:	4798      	blx	r3
    state_ = NEXT;
   d9b50:	2301      	movs	r3, #1
   d9b52:	7123      	strb	r3, [r4, #4]
}
   d9b54:	4620      	mov	r0, r4
   d9b56:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   d9b58:	4902      	ldr	r1, [pc, #8]	; (d9b64 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   d9b5a:	2205      	movs	r2, #5
   d9b5c:	e7f6      	b.n	d9b4c <_ZN5spark10JSONWriter5valueEb+0x14>
   d9b5e:	bf00      	nop
   d9b60:	000de482 	.word	0x000de482
   d9b64:	000de47c 	.word	0x000de47c

000d9b68 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9b68:	b513      	push	{r0, r1, r4, lr}
   d9b6a:	4604      	mov	r4, r0
   d9b6c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9b6e:	f7ff ffc9 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9b72:	6823      	ldr	r3, [r4, #0]
   d9b74:	9a01      	ldr	r2, [sp, #4]
   d9b76:	68db      	ldr	r3, [r3, #12]
   d9b78:	4903      	ldr	r1, [pc, #12]	; (d9b88 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9b7a:	4620      	mov	r0, r4
   d9b7c:	4798      	blx	r3
    state_ = NEXT;
   d9b7e:	2301      	movs	r3, #1
}
   d9b80:	4620      	mov	r0, r4
    state_ = NEXT;
   d9b82:	7123      	strb	r3, [r4, #4]
}
   d9b84:	b002      	add	sp, #8
   d9b86:	bd10      	pop	{r4, pc}
   d9b88:	000de328 	.word	0x000de328

000d9b8c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   d9b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b8e:	4604      	mov	r4, r0
   d9b90:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   d9b94:	f7ff ffb6 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   d9b98:	6823      	ldr	r3, [r4, #0]
   d9b9a:	4905      	ldr	r1, [pc, #20]	; (d9bb0 <_ZN5spark10JSONWriter5valueEd+0x24>)
   d9b9c:	68dd      	ldr	r5, [r3, #12]
   d9b9e:	4620      	mov	r0, r4
   d9ba0:	463b      	mov	r3, r7
   d9ba2:	4632      	mov	r2, r6
   d9ba4:	47a8      	blx	r5
    state_ = NEXT;
   d9ba6:	2301      	movs	r3, #1
   d9ba8:	7123      	strb	r3, [r4, #4]
}
   d9baa:	4620      	mov	r0, r4
   d9bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9bae:	bf00      	nop
   d9bb0:	000de487 	.word	0x000de487

000d9bb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9bb8:	460d      	mov	r5, r1
   d9bba:	4617      	mov	r7, r2
    write('"');
   d9bbc:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   d9bbe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d9c60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9bc2:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9bc4:	442f      	add	r7, r5
    write('"');
   d9bc6:	f7ff fe0c 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d9bca:	4629      	mov	r1, r5
    while (s != end) {
   d9bcc:	42bd      	cmp	r5, r7
   d9bce:	462a      	mov	r2, r5
   d9bd0:	d038      	beq.n	d9c44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d9bd2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d9bd6:	2e22      	cmp	r6, #34	; 0x22
   d9bd8:	d003      	beq.n	d9be2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9bda:	2e5c      	cmp	r6, #92	; 0x5c
   d9bdc:	d001      	beq.n	d9be2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9bde:	2e1f      	cmp	r6, #31
   d9be0:	d8f4      	bhi.n	d9bcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d9be2:	6823      	ldr	r3, [r4, #0]
   d9be4:	1a52      	subs	r2, r2, r1
   d9be6:	689b      	ldr	r3, [r3, #8]
   d9be8:	4620      	mov	r0, r4
   d9bea:	4798      	blx	r3
            write('\\');
   d9bec:	215c      	movs	r1, #92	; 0x5c
   d9bee:	4620      	mov	r0, r4
   d9bf0:	f7ff fdf7 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9bf4:	2e0d      	cmp	r6, #13
   d9bf6:	d80a      	bhi.n	d9c0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d9bf8:	2e07      	cmp	r6, #7
   d9bfa:	d91c      	bls.n	d9c36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9bfc:	f1a6 0308 	sub.w	r3, r6, #8
   d9c00:	2b05      	cmp	r3, #5
   d9c02:	d818      	bhi.n	d9c36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9c04:	e8df f003 	tbb	[pc, r3]
   d9c08:	17110f0d 	.word	0x17110f0d
   d9c0c:	1513      	.short	0x1513
   d9c0e:	2e22      	cmp	r6, #34	; 0x22
   d9c10:	d001      	beq.n	d9c16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9c12:	2e5c      	cmp	r6, #92	; 0x5c
   d9c14:	d10f      	bne.n	d9c36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d9c16:	4631      	mov	r1, r6
                write('b');
   d9c18:	4620      	mov	r0, r4
   d9c1a:	f7ff fde2 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   d9c1e:	4629      	mov	r1, r5
    while (s != end) {
   d9c20:	e7d4      	b.n	d9bcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d9c22:	2162      	movs	r1, #98	; 0x62
   d9c24:	e7f8      	b.n	d9c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9c26:	2174      	movs	r1, #116	; 0x74
   d9c28:	e7f6      	b.n	d9c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d9c2a:	216e      	movs	r1, #110	; 0x6e
   d9c2c:	e7f4      	b.n	d9c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d9c2e:	2166      	movs	r1, #102	; 0x66
   d9c30:	e7f2      	b.n	d9c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d9c32:	2172      	movs	r1, #114	; 0x72
   d9c34:	e7f0      	b.n	d9c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9c36:	6823      	ldr	r3, [r4, #0]
   d9c38:	4632      	mov	r2, r6
   d9c3a:	68db      	ldr	r3, [r3, #12]
   d9c3c:	4641      	mov	r1, r8
   d9c3e:	4620      	mov	r0, r4
   d9c40:	4798      	blx	r3
                break;
   d9c42:	e7ec      	b.n	d9c1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   d9c44:	428d      	cmp	r5, r1
   d9c46:	d004      	beq.n	d9c52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9c48:	6823      	ldr	r3, [r4, #0]
   d9c4a:	1a6a      	subs	r2, r5, r1
   d9c4c:	689b      	ldr	r3, [r3, #8]
   d9c4e:	4620      	mov	r0, r4
   d9c50:	4798      	blx	r3
    write('"');
   d9c52:	2122      	movs	r1, #34	; 0x22
   d9c54:	4620      	mov	r0, r4
   d9c56:	f7ff fdc4 	bl	d97e2 <_ZN5spark10JSONWriter5writeEc>
}
   d9c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9c5e:	bf00      	nop
   d9c60:	000de48a 	.word	0x000de48a

000d9c64 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9c64:	b513      	push	{r0, r1, r4, lr}
   d9c66:	4604      	mov	r4, r0
   d9c68:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9c6c:	f7ff ff4a 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9c70:	4620      	mov	r0, r4
   d9c72:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9c76:	f7ff ff9d 	bl	d9bb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9c7a:	2302      	movs	r3, #2
}
   d9c7c:	4620      	mov	r0, r4
    state_ = VALUE;
   d9c7e:	7123      	strb	r3, [r4, #4]
}
   d9c80:	b002      	add	sp, #8
   d9c82:	bd10      	pop	{r4, pc}

000d9c84 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9c84:	b513      	push	{r0, r1, r4, lr}
   d9c86:	4604      	mov	r4, r0
   d9c88:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9c8c:	f7ff ff3a 	bl	d9b04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9c90:	4620      	mov	r0, r4
   d9c92:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9c96:	f7ff ff8d 	bl	d9bb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9c9a:	2301      	movs	r3, #1
}
   d9c9c:	4620      	mov	r0, r4
    state_ = NEXT;
   d9c9e:	7123      	strb	r3, [r4, #4]
}
   d9ca0:	b002      	add	sp, #8
   d9ca2:	bd10      	pop	{r4, pc}

000d9ca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9ca4:	b538      	push	{r3, r4, r5, lr}
   d9ca6:	2300      	movs	r3, #0
   d9ca8:	4604      	mov	r4, r0
   d9caa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9cac:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d9cae:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9cb0:	f7fa f9f1 	bl	d4096 <_Znwj>
   d9cb4:	b128      	cbz	r0, d9cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d9cb6:	2301      	movs	r3, #1
   d9cb8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d9cbc:	4b02      	ldr	r3, [pc, #8]	; (d9cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d9cbe:	6003      	str	r3, [r0, #0]
   d9cc0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9cc2:	6020      	str	r0, [r4, #0]
	}
   d9cc4:	4620      	mov	r0, r4
   d9cc6:	bd38      	pop	{r3, r4, r5, pc}
   d9cc8:	000de498 	.word	0x000de498

000d9ccc <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d9ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9cce:	4604      	mov	r4, r0
   d9cd0:	b087      	sub	sp, #28
   d9cd2:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d9cd4:	200c      	movs	r0, #12
   d9cd6:	4927      	ldr	r1, [pc, #156]	; (d9d74 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d9cd8:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d9cda:	f000 ff4a 	bl	dab72 <_ZnwjRKSt9nothrow_t>
   d9cde:	4601      	mov	r1, r0
   d9ce0:	b118      	cbz	r0, d9cea <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d9ce2:	2300      	movs	r3, #0
   d9ce4:	e9c0 3300 	strd	r3, r3, [r0]
   d9ce8:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d9cea:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9cec:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d9cee:	f7ff ffd9 	bl	d9ca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d9cf2:	9a02      	ldr	r2, [sp, #8]
   d9cf4:	b942      	cbnz	r2, d9d08 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9cf6:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d9cfa:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d9cfc:	a803      	add	r0, sp, #12
   d9cfe:	f7fb fc8b 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9d02:	4620      	mov	r0, r4
   d9d04:	b007      	add	sp, #28
   d9d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d9d08:	2300      	movs	r3, #0
   d9d0a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d9d0c:	4629      	mov	r1, r5
   d9d0e:	ab01      	add	r3, sp, #4
   d9d10:	4630      	mov	r0, r6
   d9d12:	f7ff fdbf 	bl	d9894 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d9d16:	b918      	cbnz	r0, d9d20 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d9d18:	e9c4 0000 	strd	r0, r0, [r4]
   d9d1c:	60a0      	str	r0, [r4, #8]
}
   d9d1e:	e7ed      	b.n	d9cfc <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d9d20:	4914      	ldr	r1, [pc, #80]	; (d9d74 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9d22:	9f02      	ldr	r7, [sp, #8]
   d9d24:	1c68      	adds	r0, r5, #1
   d9d26:	f000 ff26 	bl	dab76 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d9d2a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d9d2c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d9d2e:	6858      	ldr	r0, [r3, #4]
   d9d30:	2800      	cmp	r0, #0
   d9d32:	d0f1      	beq.n	d9d18 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d9d34:	462a      	mov	r2, r5
   d9d36:	4631      	mov	r1, r6
   d9d38:	f001 fd8e 	bl	db858 <memcpy>
   d9d3c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9d3e:	9901      	ldr	r1, [sp, #4]
   d9d40:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d9d42:	2201      	movs	r2, #1
   d9d44:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d9d46:	685a      	ldr	r2, [r3, #4]
   d9d48:	f7ff fe68 	bl	d9a1c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d9d4c:	2800      	cmp	r0, #0
   d9d4e:	d0e3      	beq.n	d9d18 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d9d50:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d9d52:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9d54:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d9d56:	9b03      	ldr	r3, [sp, #12]
   d9d58:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d9d5a:	b113      	cbz	r3, d9d62 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d9d5c:	685a      	ldr	r2, [r3, #4]
   d9d5e:	3201      	adds	r2, #1
   d9d60:	605a      	str	r2, [r3, #4]
   d9d62:	aa04      	add	r2, sp, #16
   d9d64:	4620      	mov	r0, r4
   d9d66:	f7ff fd5f 	bl	d9828 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9d6a:	a805      	add	r0, sp, #20
   d9d6c:	f7fb fc54 	bl	d5618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9d70:	e7c4      	b.n	d9cfc <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d9d72:	bf00      	nop
   d9d74:	000de5cc 	.word	0x000de5cc

000d9d78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9d78:	4b01      	ldr	r3, [pc, #4]	; (d9d80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9d7a:	4a02      	ldr	r2, [pc, #8]	; (d9d84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9d7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9d7e:	4770      	bx	lr
   d9d80:	2003e614 	.word	0x2003e614
   d9d84:	000de4c4 	.word	0x000de4c4

000d9d88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9d88:	2300      	movs	r3, #0
   d9d8a:	6840      	ldr	r0, [r0, #4]
   d9d8c:	461a      	mov	r2, r3
   d9d8e:	f7fe bf69 	b.w	d8c64 <network_connect>

000d9d92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9d92:	6840      	ldr	r0, [r0, #4]
   d9d94:	2200      	movs	r2, #0
   d9d96:	2102      	movs	r1, #2
   d9d98:	f7fe bf74 	b.w	d8c84 <network_disconnect>

000d9d9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9d9c:	2200      	movs	r2, #0
   d9d9e:	6840      	ldr	r0, [r0, #4]
   d9da0:	4611      	mov	r1, r2
   d9da2:	f7fe bf67 	b.w	d8c74 <network_connecting>

000d9da6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9da6:	2200      	movs	r2, #0
   d9da8:	6840      	ldr	r0, [r0, #4]
   d9daa:	4611      	mov	r1, r2
   d9dac:	f7fe bf72 	b.w	d8c94 <network_ready>

000d9db0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9db0:	2300      	movs	r3, #0
   d9db2:	6840      	ldr	r0, [r0, #4]
   d9db4:	461a      	mov	r2, r3
   d9db6:	4619      	mov	r1, r3
   d9db8:	f7fe bf74 	b.w	d8ca4 <network_on>

000d9dbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9dbc:	2300      	movs	r3, #0
   d9dbe:	6840      	ldr	r0, [r0, #4]
   d9dc0:	461a      	mov	r2, r3
   d9dc2:	4619      	mov	r1, r3
   d9dc4:	f7fe bf76 	b.w	d8cb4 <network_off>

000d9dc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9dc8:	6840      	ldr	r0, [r0, #4]
   d9dca:	2100      	movs	r1, #0
   d9dcc:	f7fe bf9a 	b.w	d8d04 <network_is_on>

000d9dd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9dd0:	6840      	ldr	r0, [r0, #4]
   d9dd2:	2100      	movs	r1, #0
   d9dd4:	f7fe bf9e 	b.w	d8d14 <network_is_off>

000d9dd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9dd8:	6840      	ldr	r0, [r0, #4]
   d9dda:	2200      	movs	r2, #0
   d9ddc:	f081 0101 	eor.w	r1, r1, #1
   d9de0:	f7fe bf70 	b.w	d8cc4 <network_listen>

000d9de4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9de4:	6840      	ldr	r0, [r0, #4]
   d9de6:	2200      	movs	r2, #0
   d9de8:	f7fe bf7c 	b.w	d8ce4 <network_set_listen_timeout>

000d9dec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9dec:	2200      	movs	r2, #0
   d9dee:	6840      	ldr	r0, [r0, #4]
   d9df0:	4611      	mov	r1, r2
   d9df2:	f7fe bf7f 	b.w	d8cf4 <network_get_listen_timeout>

000d9df6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9df6:	2200      	movs	r2, #0
   d9df8:	6840      	ldr	r0, [r0, #4]
   d9dfa:	4611      	mov	r1, r2
   d9dfc:	f7fe bf6a 	b.w	d8cd4 <network_listening>

000d9e00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9e04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9e06:	b095      	sub	sp, #84	; 0x54
   d9e08:	4616      	mov	r6, r2
   d9e0a:	460d      	mov	r5, r1
   d9e0c:	4607      	mov	r7, r0
    IPAddress addr;
   d9e0e:	f7ff fc2d 	bl	d966c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9e12:	4621      	mov	r1, r4
   d9e14:	2218      	movs	r2, #24
   d9e16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9e18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9e1a:	f001 fd45 	bl	db8a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9e1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9e20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9e24:	4621      	mov	r1, r4
   d9e26:	466b      	mov	r3, sp
   d9e28:	aa0c      	add	r2, sp, #48	; 0x30
   d9e2a:	4630      	mov	r0, r6
   d9e2c:	f7fe fdac 	bl	d8988 <netdb_getaddrinfo>
    if (!r) {
   d9e30:	4604      	mov	r4, r0
   d9e32:	2800      	cmp	r0, #0
   d9e34:	d14c      	bne.n	d9ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9e36:	4602      	mov	r2, r0
   d9e38:	2101      	movs	r1, #1
   d9e3a:	6868      	ldr	r0, [r5, #4]
   d9e3c:	f7fe ff2a 	bl	d8c94 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9e42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e44:	4622      	mov	r2, r4
   d9e46:	6868      	ldr	r0, [r5, #4]
   d9e48:	f7fe ff24 	bl	d8c94 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e4e:	4681      	mov	r9, r0
        bool ok = false;
   d9e50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e52:	2e00      	cmp	r6, #0
   d9e54:	d03c      	beq.n	d9ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d9e56:	2900      	cmp	r1, #0
   d9e58:	d13a      	bne.n	d9ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9e5a:	6873      	ldr	r3, [r6, #4]
   d9e5c:	2b02      	cmp	r3, #2
   d9e5e:	d003      	beq.n	d9e68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9e60:	2b0a      	cmp	r3, #10
   d9e62:	d011      	beq.n	d9e88 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e64:	69f6      	ldr	r6, [r6, #28]
   d9e66:	e7f4      	b.n	d9e52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9e68:	f1b8 0f00 	cmp.w	r8, #0
   d9e6c:	d00a      	beq.n	d9e84 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9e6e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d9e70:	a806      	add	r0, sp, #24
   d9e72:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d9e74:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d9e76:	f7ff fc27 	bl	d96c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d9e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9e7c:	1d3c      	adds	r4, r7, #4
   d9e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9e80:	682b      	ldr	r3, [r5, #0]
   d9e82:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d9e84:	4641      	mov	r1, r8
   d9e86:	e7ed      	b.n	d9e64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9e88:	f1b9 0f00 	cmp.w	r9, #0
   d9e8c:	d101      	bne.n	d9e92 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9e8e:	4649      	mov	r1, r9
   d9e90:	e7e8      	b.n	d9e64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9e92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9e94:	2210      	movs	r2, #16
   d9e96:	a801      	add	r0, sp, #4
   d9e98:	f001 fd06 	bl	db8a8 <memset>
                    a.v = 6;
   d9e9c:	2306      	movs	r3, #6
   d9e9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9ea2:	ad01      	add	r5, sp, #4
   d9ea4:	f104 0308 	add.w	r3, r4, #8
   d9ea8:	3418      	adds	r4, #24
   d9eaa:	6818      	ldr	r0, [r3, #0]
   d9eac:	6859      	ldr	r1, [r3, #4]
   d9eae:	462a      	mov	r2, r5
   d9eb0:	c203      	stmia	r2!, {r0, r1}
   d9eb2:	3308      	adds	r3, #8
   d9eb4:	42a3      	cmp	r3, r4
   d9eb6:	4615      	mov	r5, r2
   d9eb8:	d1f7      	bne.n	d9eaa <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9eba:	a901      	add	r1, sp, #4
   d9ebc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9ebe:	ad07      	add	r5, sp, #28
   d9ec0:	f7ff fbe2 	bl	d9688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9ec6:	1d3c      	adds	r4, r7, #4
   d9ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9eca:	682b      	ldr	r3, [r5, #0]
   d9ecc:	7023      	strb	r3, [r4, #0]
   d9ece:	e7de      	b.n	d9e8e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9ed0:	9800      	ldr	r0, [sp, #0]
   d9ed2:	f7fe fd51 	bl	d8978 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9ed6:	4638      	mov	r0, r7
   d9ed8:	b015      	add	sp, #84	; 0x54
   d9eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9ee0:	4b02      	ldr	r3, [pc, #8]	; (d9eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9ee2:	4a03      	ldr	r2, [pc, #12]	; (d9ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9ee4:	601a      	str	r2, [r3, #0]
   d9ee6:	2200      	movs	r2, #0
   d9ee8:	605a      	str	r2, [r3, #4]

} // spark
   d9eea:	4770      	bx	lr
   d9eec:	2003e618 	.word	0x2003e618
   d9ef0:	000de4d0 	.word	0x000de4d0

000d9ef4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ef6:	4606      	mov	r6, r0
   d9ef8:	460d      	mov	r5, r1
  size_t n = 0;
   d9efa:	188f      	adds	r7, r1, r2
   d9efc:	2400      	movs	r4, #0
  while (size--) {
   d9efe:	42bd      	cmp	r5, r7
   d9f00:	d00c      	beq.n	d9f1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9f02:	6833      	ldr	r3, [r6, #0]
   d9f04:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9f08:	689b      	ldr	r3, [r3, #8]
   d9f0a:	4630      	mov	r0, r6
   d9f0c:	4798      	blx	r3
     if (chunk>=0)
   d9f0e:	1e03      	subs	r3, r0, #0
   d9f10:	db01      	blt.n	d9f16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9f12:	441c      	add	r4, r3
  while (size--) {
   d9f14:	e7f3      	b.n	d9efe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9f16:	2c00      	cmp	r4, #0
   d9f18:	bf08      	it	eq
   d9f1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9f1c:	4620      	mov	r0, r4
   d9f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f20 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9f20:	b513      	push	{r0, r1, r4, lr}
   d9f22:	4604      	mov	r4, r0
    }
   d9f24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9f26:	b159      	cbz	r1, d9f40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9f28:	9101      	str	r1, [sp, #4]
   d9f2a:	f001 fd18 	bl	db95e <strlen>
   d9f2e:	6823      	ldr	r3, [r4, #0]
   d9f30:	9901      	ldr	r1, [sp, #4]
   d9f32:	68db      	ldr	r3, [r3, #12]
   d9f34:	4602      	mov	r2, r0
   d9f36:	4620      	mov	r0, r4
    }
   d9f38:	b002      	add	sp, #8
   d9f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9f3e:	4718      	bx	r3
    }
   d9f40:	b002      	add	sp, #8
   d9f42:	bd10      	pop	{r4, pc}

000d9f44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9f44:	6803      	ldr	r3, [r0, #0]
   d9f46:	689b      	ldr	r3, [r3, #8]
   d9f48:	4718      	bx	r3

000d9f4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9f4a:	b530      	push	{r4, r5, lr}
   d9f4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9f4e:	2300      	movs	r3, #0
   d9f50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9f54:	2a01      	cmp	r2, #1
   d9f56:	bf98      	it	ls
   d9f58:	220a      	movls	r2, #10
   d9f5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9f5c:	460d      	mov	r5, r1
   d9f5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9f62:	fb01 5312 	mls	r3, r1, r2, r5
   d9f66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9f6a:	2b09      	cmp	r3, #9
   d9f6c:	bf94      	ite	ls
   d9f6e:	3330      	addls	r3, #48	; 0x30
   d9f70:	3337      	addhi	r3, #55	; 0x37
   d9f72:	b2db      	uxtb	r3, r3
  } while(n);
   d9f74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9f76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9f7a:	d9ef      	bls.n	d9f5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9f7c:	4621      	mov	r1, r4
   d9f7e:	f7ff ffcf 	bl	d9f20 <_ZN5Print5writeEPKc>
}
   d9f82:	b00b      	add	sp, #44	; 0x2c
   d9f84:	bd30      	pop	{r4, r5, pc}

000d9f86 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9f86:	b510      	push	{r4, lr}
   d9f88:	4604      	mov	r4, r0
   d9f8a:	f7fa f9c1 	bl	d4310 <_ZNSt14_Function_baseD1Ev>
   d9f8e:	4620      	mov	r0, r4
   d9f90:	bd10      	pop	{r4, pc}
	...

000d9f94 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9f94:	4803      	ldr	r0, [pc, #12]	; (d9fa4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9f96:	4a04      	ldr	r2, [pc, #16]	; (d9fa8 <_GLOBAL__sub_I_RGB+0x14>)
   d9f98:	4904      	ldr	r1, [pc, #16]	; (d9fac <_GLOBAL__sub_I_RGB+0x18>)
   d9f9a:	2300      	movs	r3, #0
   d9f9c:	6083      	str	r3, [r0, #8]
   d9f9e:	f000 bde1 	b.w	dab64 <__aeabi_atexit>
   d9fa2:	bf00      	nop
   d9fa4:	2003e620 	.word	0x2003e620
   d9fa8:	2003def0 	.word	0x2003def0
   d9fac:	000d9f87 	.word	0x000d9f87

000d9fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9fb0:	b510      	push	{r4, lr}
   d9fb2:	4604      	mov	r4, r0
   d9fb4:	4608      	mov	r0, r1
{
    _spi = spi;
   d9fb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9fb8:	f7fe fcee 	bl	d8998 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9fbc:	2300      	movs	r3, #0
   d9fbe:	6063      	str	r3, [r4, #4]
}
   d9fc0:	4620      	mov	r0, r4
   d9fc2:	bd10      	pop	{r4, pc}

000d9fc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9fc4:	b510      	push	{r4, lr}
   d9fc6:	4604      	mov	r4, r0
{
	free(buffer);
   d9fc8:	6800      	ldr	r0, [r0, #0]
   d9fca:	f7fe feb3 	bl	d8d34 <free>
}
   d9fce:	4620      	mov	r0, r4
   d9fd0:	bd10      	pop	{r4, pc}

000d9fd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9fd2:	b510      	push	{r4, lr}
   d9fd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9fd6:	6800      	ldr	r0, [r0, #0]
   d9fd8:	b108      	cbz	r0, d9fde <_ZN6String10invalidateEv+0xc>
   d9fda:	f7fe feab 	bl	d8d34 <free>
	buffer = NULL;
   d9fde:	2300      	movs	r3, #0
	capacity = len = 0;
   d9fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9fe4:	6023      	str	r3, [r4, #0]
}
   d9fe6:	bd10      	pop	{r4, pc}

000d9fe8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9fe8:	b538      	push	{r3, r4, r5, lr}
   d9fea:	4604      	mov	r4, r0
   d9fec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9fee:	6800      	ldr	r0, [r0, #0]
   d9ff0:	3101      	adds	r1, #1
   d9ff2:	f7fe fea7 	bl	d8d44 <realloc>
	if (newbuffer) {
   d9ff6:	b110      	cbz	r0, d9ffe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9ff8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9ffc:	2001      	movs	r0, #1
	}
	return 0;
}
   d9ffe:	bd38      	pop	{r3, r4, r5, pc}

000da000 <_ZN6String7reserveEj>:
{
   da000:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da002:	6803      	ldr	r3, [r0, #0]
{
   da004:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da006:	b123      	cbz	r3, da012 <_ZN6String7reserveEj+0x12>
   da008:	6843      	ldr	r3, [r0, #4]
   da00a:	428b      	cmp	r3, r1
   da00c:	d301      	bcc.n	da012 <_ZN6String7reserveEj+0x12>
   da00e:	2001      	movs	r0, #1
}
   da010:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da012:	4620      	mov	r0, r4
   da014:	f7ff ffe8 	bl	d9fe8 <_ZN6String12changeBufferEj>
   da018:	2800      	cmp	r0, #0
   da01a:	d0f9      	beq.n	da010 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da01c:	68a3      	ldr	r3, [r4, #8]
   da01e:	2b00      	cmp	r3, #0
   da020:	d1f5      	bne.n	da00e <_ZN6String7reserveEj+0xe>
   da022:	6822      	ldr	r2, [r4, #0]
   da024:	7013      	strb	r3, [r2, #0]
   da026:	e7f2      	b.n	da00e <_ZN6String7reserveEj+0xe>

000da028 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da02a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da02c:	4611      	mov	r1, r2
   da02e:	9201      	str	r2, [sp, #4]
{
   da030:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da032:	f7ff ffe5 	bl	da000 <_ZN6String7reserveEj>
   da036:	9a01      	ldr	r2, [sp, #4]
   da038:	b928      	cbnz	r0, da046 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da03a:	4620      	mov	r0, r4
   da03c:	f7ff ffc9 	bl	d9fd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da040:	4620      	mov	r0, r4
   da042:	b003      	add	sp, #12
   da044:	bd30      	pop	{r4, r5, pc}
	len = length;
   da046:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da048:	4629      	mov	r1, r5
   da04a:	6820      	ldr	r0, [r4, #0]
   da04c:	f001 fc04 	bl	db858 <memcpy>
	buffer[len] = 0;
   da050:	6822      	ldr	r2, [r4, #0]
   da052:	68a3      	ldr	r3, [r4, #8]
   da054:	2100      	movs	r1, #0
   da056:	54d1      	strb	r1, [r2, r3]
	return *this;
   da058:	e7f2      	b.n	da040 <_ZN6String4copyEPKcj+0x18>

000da05a <_ZN6StringC1EPKc>:
	buffer = NULL;
   da05a:	2300      	movs	r3, #0
String::String(const char *cstr)
   da05c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da05e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da062:	4604      	mov	r4, r0
	len = 0;
   da064:	6083      	str	r3, [r0, #8]
	flags = 0;
   da066:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da068:	b141      	cbz	r1, da07c <_ZN6StringC1EPKc+0x22>
   da06a:	4608      	mov	r0, r1
   da06c:	9101      	str	r1, [sp, #4]
   da06e:	f001 fc76 	bl	db95e <strlen>
   da072:	9901      	ldr	r1, [sp, #4]
   da074:	4602      	mov	r2, r0
   da076:	4620      	mov	r0, r4
   da078:	f7ff ffd6 	bl	da028 <_ZN6String4copyEPKcj>
}
   da07c:	4620      	mov	r0, r4
   da07e:	b002      	add	sp, #8
   da080:	bd10      	pop	{r4, pc}

000da082 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da082:	4288      	cmp	r0, r1
{
   da084:	b510      	push	{r4, lr}
   da086:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da088:	d005      	beq.n	da096 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da08a:	680b      	ldr	r3, [r1, #0]
   da08c:	b12b      	cbz	r3, da09a <_ZN6StringaSERKS_+0x18>
   da08e:	688a      	ldr	r2, [r1, #8]
   da090:	4619      	mov	r1, r3
   da092:	f7ff ffc9 	bl	da028 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da096:	4620      	mov	r0, r4
   da098:	bd10      	pop	{r4, pc}
	else invalidate();
   da09a:	f7ff ff9a 	bl	d9fd2 <_ZN6String10invalidateEv>
   da09e:	e7fa      	b.n	da096 <_ZN6StringaSERKS_+0x14>

000da0a0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da0a0:	b510      	push	{r4, lr}
	buffer = NULL;
   da0a2:	2300      	movs	r3, #0
String::String(const String &value)
   da0a4:	4604      	mov	r4, r0
	capacity = 0;
   da0a6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da0aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   da0ac:	7303      	strb	r3, [r0, #12]
	*this = value;
   da0ae:	f7ff ffe8 	bl	da082 <_ZN6StringaSERKS_>
}
   da0b2:	4620      	mov	r0, r4
   da0b4:	bd10      	pop	{r4, pc}

000da0b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   da0b6:	b513      	push	{r0, r1, r4, lr}
   da0b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   da0ba:	b159      	cbz	r1, da0d4 <_ZN6StringaSEPKc+0x1e>
   da0bc:	4608      	mov	r0, r1
   da0be:	9101      	str	r1, [sp, #4]
   da0c0:	f001 fc4d 	bl	db95e <strlen>
   da0c4:	9901      	ldr	r1, [sp, #4]
   da0c6:	4602      	mov	r2, r0
   da0c8:	4620      	mov	r0, r4
   da0ca:	f7ff ffad 	bl	da028 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da0ce:	4620      	mov	r0, r4
   da0d0:	b002      	add	sp, #8
   da0d2:	bd10      	pop	{r4, pc}
	else invalidate();
   da0d4:	f7ff ff7d 	bl	d9fd2 <_ZN6String10invalidateEv>
   da0d8:	e7f9      	b.n	da0ce <_ZN6StringaSEPKc+0x18>

000da0da <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   da0da:	b510      	push	{r4, lr}
   da0dc:	4604      	mov	r4, r0
   da0de:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   da0e0:	2300      	movs	r3, #0
	capacity = 0;
   da0e2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   da0e6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da0e8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   da0ea:	4608      	mov	r0, r1
	itoa(value, buf, base);
   da0ec:	a901      	add	r1, sp, #4
   da0ee:	f000 fbb9 	bl	da864 <itoa>
	*this = buf;
   da0f2:	a901      	add	r1, sp, #4
   da0f4:	4620      	mov	r0, r4
   da0f6:	f7ff ffde 	bl	da0b6 <_ZN6StringaSEPKc>
}
   da0fa:	4620      	mov	r0, r4
   da0fc:	b00a      	add	sp, #40	; 0x28
   da0fe:	bd10      	pop	{r4, pc}

000da100 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   da100:	b570      	push	{r4, r5, r6, lr}
   da102:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   da104:	460e      	mov	r6, r1
   da106:	b909      	cbnz	r1, da10c <_ZN6String6concatEPKcj+0xc>
   da108:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   da10a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   da10c:	b16a      	cbz	r2, da12a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   da10e:	6884      	ldr	r4, [r0, #8]
   da110:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   da112:	4621      	mov	r1, r4
   da114:	f7ff ff74 	bl	da000 <_ZN6String7reserveEj>
   da118:	2800      	cmp	r0, #0
   da11a:	d0f5      	beq.n	da108 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   da11c:	6828      	ldr	r0, [r5, #0]
   da11e:	68ab      	ldr	r3, [r5, #8]
   da120:	4631      	mov	r1, r6
   da122:	4418      	add	r0, r3
   da124:	f001 fbf6 	bl	db914 <strcpy>
	len = newlen;
   da128:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   da12a:	2001      	movs	r0, #1
   da12c:	e7ed      	b.n	da10a <_ZN6String6concatEPKcj+0xa>

000da12e <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   da12e:	b513      	push	{r0, r1, r4, lr}
   da130:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da132:	b929      	cbnz	r1, da140 <_ZplRK15StringSumHelperPKc+0x12>
   da134:	4620      	mov	r0, r4
   da136:	f7ff ff4c 	bl	d9fd2 <_ZN6String10invalidateEv>
	return a;
}
   da13a:	4620      	mov	r0, r4
   da13c:	b002      	add	sp, #8
   da13e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da140:	4608      	mov	r0, r1
   da142:	9101      	str	r1, [sp, #4]
   da144:	f001 fc0b 	bl	db95e <strlen>
   da148:	9901      	ldr	r1, [sp, #4]
   da14a:	4602      	mov	r2, r0
   da14c:	4620      	mov	r0, r4
   da14e:	f7ff ffd7 	bl	da100 <_ZN6String6concatEPKcj>
   da152:	2800      	cmp	r0, #0
   da154:	d0ee      	beq.n	da134 <_ZplRK15StringSumHelperPKc+0x6>
   da156:	e7f0      	b.n	da13a <_ZplRK15StringSumHelperPKc+0xc>

000da158 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da158:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da15a:	6882      	ldr	r2, [r0, #8]
   da15c:	b93a      	cbnz	r2, da16e <_ZNK6String6equalsEPKc+0x16>
   da15e:	b121      	cbz	r1, da16a <_ZNK6String6equalsEPKc+0x12>
   da160:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da162:	fab0 f080 	clz	r0, r0
   da166:	0940      	lsrs	r0, r0, #5
   da168:	e000      	b.n	da16c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da16a:	2001      	movs	r0, #1
}
   da16c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da16e:	6800      	ldr	r0, [r0, #0]
   da170:	b909      	cbnz	r1, da176 <_ZNK6String6equalsEPKc+0x1e>
   da172:	7800      	ldrb	r0, [r0, #0]
   da174:	e7f5      	b.n	da162 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da176:	f001 fbc3 	bl	db900 <strcmp>
   da17a:	e7f2      	b.n	da162 <_ZNK6String6equalsEPKc+0xa>

000da17c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   da17c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   da17e:	6800      	ldr	r0, [r0, #0]
   da180:	b140      	cbz	r0, da194 <_ZNK6String7toFloatEv+0x18>
   da182:	f001 fb41 	bl	db808 <atof>
   da186:	ec51 0b10 	vmov	r0, r1, d0
   da18a:	f001 faa9 	bl	db6e0 <__aeabi_d2f>
   da18e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   da192:	bd08      	pop	{r3, pc}
	return 0;
   da194:	ed9f 0a01 	vldr	s0, [pc, #4]	; da19c <_ZNK6String7toFloatEv+0x20>
   da198:	e7fb      	b.n	da192 <_ZNK6String7toFloatEv+0x16>
   da19a:	bf00      	nop
   da19c:	00000000 	.word	0x00000000

000da1a0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da1a0:	b40e      	push	{r1, r2, r3}
   da1a2:	b570      	push	{r4, r5, r6, lr}
   da1a4:	b087      	sub	sp, #28
   da1a6:	ad0b      	add	r5, sp, #44	; 0x2c
   da1a8:	4604      	mov	r4, r0
   da1aa:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da1ae:	9201      	str	r2, [sp, #4]
   da1b0:	462b      	mov	r3, r5
   da1b2:	2105      	movs	r1, #5
   da1b4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da1b6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da1b8:	f7fe fddc 	bl	d8d74 <vsnprintf>
    va_end(marker);

    String result;
   da1bc:	490b      	ldr	r1, [pc, #44]	; (da1ec <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da1be:	4606      	mov	r6, r0
    String result;
   da1c0:	4620      	mov	r0, r4
   da1c2:	f7ff ff4a 	bl	da05a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da1c6:	4631      	mov	r1, r6
   da1c8:	4620      	mov	r0, r4
   da1ca:	f7ff ff19 	bl	da000 <_ZN6String7reserveEj>
    if (result.buffer) {
   da1ce:	6820      	ldr	r0, [r4, #0]
   da1d0:	b130      	cbz	r0, da1e0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da1d2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da1d4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da1d6:	462b      	mov	r3, r5
   da1d8:	1c71      	adds	r1, r6, #1
   da1da:	f7fe fdcb 	bl	d8d74 <vsnprintf>
        va_end(marker);
        result.len = n;
   da1de:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da1e0:	4620      	mov	r0, r4
   da1e2:	b007      	add	sp, #28
   da1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da1e8:	b003      	add	sp, #12
   da1ea:	4770      	bx	lr
   da1ec:	000de5f4 	.word	0x000de5f4

000da1f0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   da1f0:	b507      	push	{r0, r1, r2, lr}
   da1f2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da1f4:	2100      	movs	r1, #0
{
   da1f6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da1f8:	9100      	str	r1, [sp, #0]
   da1fa:	2001      	movs	r0, #1
   da1fc:	218c      	movs	r1, #140	; 0x8c
   da1fe:	f7fe fcbf 	bl	d8b80 <system_reset>
}
   da202:	b003      	add	sp, #12
   da204:	f85d fb04 	ldr.w	pc, [sp], #4

000da208 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   da208:	4601      	mov	r1, r0
    reset(0, flags);
   da20a:	2000      	movs	r0, #0
   da20c:	f7ff bff0 	b.w	da1f0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000da210 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   da210:	2000      	movs	r0, #0
   da212:	f7ff bff9 	b.w	da208 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000da218 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   da218:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da21a:	4b09      	ldr	r3, [pc, #36]	; (da240 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   da21c:	4c09      	ldr	r4, [pc, #36]	; (da244 <_GLOBAL__sub_I_System+0x2c>)
   da21e:	2202      	movs	r2, #2
   da220:	2000      	movs	r0, #0
   da222:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   da224:	4b08      	ldr	r3, [pc, #32]	; (da248 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   da226:	6020      	str	r0, [r4, #0]
   da228:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   da22a:	71a0      	strb	r0, [r4, #6]
   da22c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da22e:	f7fe fc5b 	bl	d8ae8 <set_system_mode>
SystemClass System;
   da232:	4620      	mov	r0, r4
   da234:	4a05      	ldr	r2, [pc, #20]	; (da24c <_GLOBAL__sub_I_System+0x34>)
   da236:	4906      	ldr	r1, [pc, #24]	; (da250 <_GLOBAL__sub_I_System+0x38>)
   da238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   da23c:	f000 bc92 	b.w	dab64 <__aeabi_atexit>
   da240:	2003e63c 	.word	0x2003e63c
   da244:	2003e630 	.word	0x2003e630
   da248:	ffff0000 	.word	0xffff0000
   da24c:	2003def0 	.word	0x2003def0
   da250:	000d42f9 	.word	0x000d42f9

000da254 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da258:	4a15      	ldr	r2, [pc, #84]	; (da2b0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da25a:	f8df 8060 	ldr.w	r8, [pc, #96]	; da2bc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da25e:	e9d2 3200 	ldrd	r3, r2, [r2]
   da262:	18c0      	adds	r0, r0, r3
   da264:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da268:	4a12      	ldr	r2, [pc, #72]	; (da2b4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da26a:	e9d2 3200 	ldrd	r3, r2, [r2]
   da26e:	18c6      	adds	r6, r0, r3
   da270:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da274:	e9d8 2300 	ldrd	r2, r3, [r8]
   da278:	42bb      	cmp	r3, r7
   da27a:	bf08      	it	eq
   da27c:	42b2      	cmpeq	r2, r6
{
   da27e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da280:	d013      	beq.n	da2aa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da282:	a903      	add	r1, sp, #12
   da284:	4668      	mov	r0, sp
   da286:	e9cd 6700 	strd	r6, r7, [sp]
   da28a:	f7fe fda3 	bl	d8dd4 <localtime_r>
	calendar_time.tm_year += 1900;
   da28e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da290:	4d09      	ldr	r5, [pc, #36]	; (da2b8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da292:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da296:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da298:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da29a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da29c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da29e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da2a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da2a2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da2a6:	6823      	ldr	r3, [r4, #0]
   da2a8:	602b      	str	r3, [r5, #0]
    }
}
   da2aa:	b00c      	add	sp, #48	; 0x30
   da2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da2b0:	2003e678 	.word	0x2003e678
   da2b4:	2003e670 	.word	0x2003e670
   da2b8:	2003e648 	.word	0x2003e648
   da2bc:	2003e680 	.word	0x2003e680

000da2c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da2c0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da2c2:	2000      	movs	r0, #0
   da2c4:	f7fe fcae 	bl	d8c24 <spark_sync_time_pending>
   da2c8:	b128      	cbz	r0, da2d6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da2ca:	f7fe fc83 	bl	d8bd4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da2ce:	f080 0001 	eor.w	r0, r0, #1
   da2d2:	b2c0      	uxtb	r0, r0
    }
   da2d4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da2d6:	2001      	movs	r0, #1
   da2d8:	e7fc      	b.n	da2d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000da2da <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da2da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da2dc:	4602      	mov	r2, r0
   da2de:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da2e0:	4668      	mov	r0, sp
    struct timeval tv = {
   da2e2:	2100      	movs	r1, #0
    };
   da2e4:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da2e8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da2ec:	f7fe fa94 	bl	d8818 <hal_rtc_set_time>
   da2f0:	4602      	mov	r2, r0
   da2f2:	b910      	cbnz	r0, da2fa <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da2f4:	4601      	mov	r1, r0
   da2f6:	f7fe fc27 	bl	d8b48 <system_notify_time_changed>
    }
}
   da2fa:	b005      	add	sp, #20
   da2fc:	f85d fb04 	ldr.w	pc, [sp], #4

000da300 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da300:	b530      	push	{r4, r5, lr}
   da302:	4604      	mov	r4, r0
    t += time_zone_cache;
   da304:	4818      	ldr	r0, [pc, #96]	; (da368 <_ZN9TimeClass7timeStrEx+0x68>)
   da306:	e9d0 1000 	ldrd	r1, r0, [r0]
   da30a:	1852      	adds	r2, r2, r1
   da30c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da310:	4816      	ldr	r0, [pc, #88]	; (da36c <_ZN9TimeClass7timeStrEx+0x6c>)
   da312:	e9d0 1000 	ldrd	r1, r0, [r0]
   da316:	1852      	adds	r2, r2, r1
{
   da318:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da31a:	eb40 0303 	adc.w	r3, r0, r3
   da31e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da322:	2224      	movs	r2, #36	; 0x24
   da324:	eb0d 0002 	add.w	r0, sp, r2
   da328:	2100      	movs	r1, #0
   da32a:	f001 fabd 	bl	db8a8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da32e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da330:	a909      	add	r1, sp, #36	; 0x24
   da332:	4668      	mov	r0, sp
   da334:	f7fe fd4e 	bl	d8dd4 <localtime_r>
    char ascstr[26] = {};
   da338:	2216      	movs	r2, #22
   da33a:	4629      	mov	r1, r5
   da33c:	a803      	add	r0, sp, #12
   da33e:	9502      	str	r5, [sp, #8]
   da340:	f001 fab2 	bl	db8a8 <memset>
    asctime_r(&calendar_time, ascstr);
   da344:	a902      	add	r1, sp, #8
   da346:	a809      	add	r0, sp, #36	; 0x24
   da348:	f001 fa38 	bl	db7bc <asctime_r>
    int len = strlen(ascstr);
   da34c:	a802      	add	r0, sp, #8
   da34e:	f001 fb06 	bl	db95e <strlen>
    ascstr[len-1] = 0; // remove final newline
   da352:	ab12      	add	r3, sp, #72	; 0x48
   da354:	4418      	add	r0, r3
    return String(ascstr);
   da356:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da358:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da35c:	4620      	mov	r0, r4
   da35e:	f7ff fe7c 	bl	da05a <_ZN6StringC1EPKc>
}
   da362:	4620      	mov	r0, r4
   da364:	b013      	add	sp, #76	; 0x4c
   da366:	bd30      	pop	{r4, r5, pc}
   da368:	2003e678 	.word	0x2003e678
   da36c:	2003e670 	.word	0x2003e670

000da370 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da374:	b0a5      	sub	sp, #148	; 0x94
   da376:	4607      	mov	r7, r0
   da378:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da37a:	a814      	add	r0, sp, #80	; 0x50
{
   da37c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da37e:	223f      	movs	r2, #63	; 0x3f
{
   da380:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da382:	f001 fb06 	bl	db992 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da386:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da388:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da38a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da38e:	f001 fae6 	bl	db95e <strlen>
   da392:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da394:	bb5d      	cbnz	r5, da3ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da396:	492a      	ldr	r1, [pc, #168]	; (da440 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da398:	a803      	add	r0, sp, #12
   da39a:	f001 fabb 	bl	db914 <strcpy>
   da39e:	ae14      	add	r6, sp, #80	; 0x50
{
   da3a0:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da3a2:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da3a6:	45ab      	cmp	fp, r5
   da3a8:	d936      	bls.n	da418 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da3aa:	46b1      	mov	r9, r6
   da3ac:	f105 0a01 	add.w	sl, r5, #1
   da3b0:	f819 3b01 	ldrb.w	r3, [r9], #1
   da3b4:	2b25      	cmp	r3, #37	; 0x25
   da3b6:	d117      	bne.n	da3e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da3b8:	7873      	ldrb	r3, [r6, #1]
   da3ba:	2b7a      	cmp	r3, #122	; 0x7a
   da3bc:	d114      	bne.n	da3e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da3be:	a803      	add	r0, sp, #12
   da3c0:	f001 facd 	bl	db95e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da3c4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da3c6:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da3c8:	1828      	adds	r0, r5, r0
   da3ca:	4418      	add	r0, r3
   da3cc:	ebab 0205 	sub.w	r2, fp, r5
   da3d0:	1cb1      	adds	r1, r6, #2
   da3d2:	f001 fa41 	bl	db858 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da3d6:	4622      	mov	r2, r4
   da3d8:	a903      	add	r1, sp, #12
   da3da:	4630      	mov	r0, r6
   da3dc:	f001 fa3c 	bl	db858 <memcpy>
            len = strlen(format_str);
   da3e0:	a814      	add	r0, sp, #80	; 0x50
   da3e2:	f001 fabc 	bl	db95e <strlen>
   da3e6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da3e8:	464e      	mov	r6, r9
   da3ea:	4655      	mov	r5, sl
   da3ec:	e7d9      	b.n	da3a2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da3ee:	213c      	movs	r1, #60	; 0x3c
   da3f0:	fb95 f3f1 	sdiv	r3, r5, r1
   da3f4:	2b00      	cmp	r3, #0
   da3f6:	bfb8      	it	lt
   da3f8:	425b      	neglt	r3, r3
   da3fa:	fbb3 f2f1 	udiv	r2, r3, r1
   da3fe:	fb01 3312 	mls	r3, r1, r2, r3
   da402:	9300      	str	r3, [sp, #0]
   da404:	4a0f      	ldr	r2, [pc, #60]	; (da444 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da406:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da40a:	2110      	movs	r1, #16
   da40c:	a803      	add	r0, sp, #12
   da40e:	fb95 f3f3 	sdiv	r3, r5, r3
   da412:	f7fe fca7 	bl	d8d64 <snprintf>
   da416:	e7c2      	b.n	da39e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da418:	2100      	movs	r1, #0
   da41a:	222e      	movs	r2, #46	; 0x2e
   da41c:	a808      	add	r0, sp, #32
   da41e:	9107      	str	r1, [sp, #28]
   da420:	f001 fa42 	bl	db8a8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da424:	4643      	mov	r3, r8
   da426:	aa14      	add	r2, sp, #80	; 0x50
   da428:	2132      	movs	r1, #50	; 0x32
   da42a:	a807      	add	r0, sp, #28
   da42c:	f7fe fcca 	bl	d8dc4 <strftime>
    return String(buf);
   da430:	a907      	add	r1, sp, #28
   da432:	4638      	mov	r0, r7
   da434:	f7ff fe11 	bl	da05a <_ZN6StringC1EPKc>
}
   da438:	4638      	mov	r0, r7
   da43a:	b025      	add	sp, #148	; 0x94
   da43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da440:	000de504 	.word	0x000de504
   da444:	000de506 	.word	0x000de506

000da448 <_ZN9TimeClass6formatExPKc>:
{
   da448:	b5f0      	push	{r4, r5, r6, r7, lr}
   da44a:	b08d      	sub	sp, #52	; 0x34
   da44c:	e9cd 2300 	strd	r2, r3, [sp]
   da450:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da452:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da454:	b915      	cbnz	r5, da45c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da456:	4b19      	ldr	r3, [pc, #100]	; (da4bc <_ZN9TimeClass6formatExPKc+0x74>)
   da458:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da45a:	b12d      	cbz	r5, da468 <_ZN9TimeClass6formatExPKc+0x20>
   da45c:	4b18      	ldr	r3, [pc, #96]	; (da4c0 <_ZN9TimeClass6formatExPKc+0x78>)
   da45e:	4628      	mov	r0, r5
   da460:	6819      	ldr	r1, [r3, #0]
   da462:	f001 fa4d 	bl	db900 <strcmp>
   da466:	b938      	cbnz	r0, da478 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da468:	e9dd 2300 	ldrd	r2, r3, [sp]
   da46c:	4620      	mov	r0, r4
   da46e:	f7ff ff47 	bl	da300 <_ZN9TimeClass7timeStrEx>
}
   da472:	4620      	mov	r0, r4
   da474:	b00d      	add	sp, #52	; 0x34
   da476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da478:	4e12      	ldr	r6, [pc, #72]	; (da4c4 <_ZN9TimeClass6formatExPKc+0x7c>)
   da47a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da47c:	4f12      	ldr	r7, [pc, #72]	; (da4c8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da47e:	e9d6 3200 	ldrd	r3, r2, [r6]
   da482:	185b      	adds	r3, r3, r1
   da484:	9901      	ldr	r1, [sp, #4]
   da486:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da48a:	e9d7 0100 	ldrd	r0, r1, [r7]
   da48e:	181b      	adds	r3, r3, r0
   da490:	eb41 0202 	adc.w	r2, r1, r2
   da494:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da498:	2100      	movs	r1, #0
   da49a:	2224      	movs	r2, #36	; 0x24
   da49c:	a803      	add	r0, sp, #12
   da49e:	f001 fa03 	bl	db8a8 <memset>
    localtime_r(&t, &calendar_time);
   da4a2:	a903      	add	r1, sp, #12
   da4a4:	4668      	mov	r0, sp
   da4a6:	f7fe fc95 	bl	d8dd4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da4aa:	6832      	ldr	r2, [r6, #0]
   da4ac:	683b      	ldr	r3, [r7, #0]
   da4ae:	a903      	add	r1, sp, #12
   da4b0:	4413      	add	r3, r2
   da4b2:	4620      	mov	r0, r4
   da4b4:	462a      	mov	r2, r5
   da4b6:	f7ff ff5b 	bl	da370 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da4ba:	e7da      	b.n	da472 <_ZN9TimeClass6formatExPKc+0x2a>
   da4bc:	2003e644 	.word	0x2003e644
   da4c0:	2003dd10 	.word	0x2003dd10
   da4c4:	2003e678 	.word	0x2003e678
   da4c8:	2003e670 	.word	0x2003e670

000da4cc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da4cc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da4ce:	2000      	movs	r0, #0
   da4d0:	f7fe f98a 	bl	d87e8 <hal_rtc_time_is_valid>
    if (rtcstate)
   da4d4:	4604      	mov	r4, r0
   da4d6:	b9a0      	cbnz	r0, da502 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da4d8:	f7fe fafe 	bl	d8ad8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da4dc:	2801      	cmp	r0, #1
   da4de:	d110      	bne.n	da502 <_ZN9TimeClass7isValidEv+0x36>
   da4e0:	4620      	mov	r0, r4
   da4e2:	f7fe fb29 	bl	d8b38 <system_thread_get_state>
   da4e6:	b960      	cbnz	r0, da502 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da4e8:	f7ff feea 	bl	da2c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da4ec:	b910      	cbnz	r0, da4f4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da4ee:	f7fe fb61 	bl	d8bb4 <spark_process>
        while (_while() && !_condition()) {
   da4f2:	e7f9      	b.n	da4e8 <_ZN9TimeClass7isValidEv+0x1c>
   da4f4:	f7ff fee4 	bl	da2c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da4fc:	2000      	movs	r0, #0
   da4fe:	f7fe b973 	b.w	d87e8 <hal_rtc_time_is_valid>
}
   da502:	4620      	mov	r0, r4
   da504:	bd10      	pop	{r4, pc}

000da506 <_ZN9TimeClass3nowEv>:
{
   da506:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da508:	f7ff ffe0 	bl	da4cc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da50c:	2210      	movs	r2, #16
   da50e:	2100      	movs	r1, #0
   da510:	4668      	mov	r0, sp
   da512:	f001 f9c9 	bl	db8a8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da516:	2100      	movs	r1, #0
   da518:	4668      	mov	r0, sp
   da51a:	f7fe f975 	bl	d8808 <hal_rtc_get_time>
}
   da51e:	9800      	ldr	r0, [sp, #0]
   da520:	b005      	add	sp, #20
   da522:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da528 <_ZN9TimeClass4hourEv>:
{
   da528:	b508      	push	{r3, lr}
	return hour(now());
   da52a:	f7ff ffec 	bl	da506 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da52e:	17c1      	asrs	r1, r0, #31
   da530:	f7ff fe90 	bl	da254 <_ZL22Refresh_UnixTime_Cachex>
}
   da534:	4b01      	ldr	r3, [pc, #4]	; (da53c <_ZN9TimeClass4hourEv+0x14>)
   da536:	6898      	ldr	r0, [r3, #8]
   da538:	bd08      	pop	{r3, pc}
   da53a:	bf00      	nop
   da53c:	2003e648 	.word	0x2003e648

000da540 <_ZN9TimeClass4yearEv>:
{
   da540:	b508      	push	{r3, lr}
	return year(now());
   da542:	f7ff ffe0 	bl	da506 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da546:	17c1      	asrs	r1, r0, #31
   da548:	f7ff fe84 	bl	da254 <_ZL22Refresh_UnixTime_Cachex>
}
   da54c:	4b01      	ldr	r3, [pc, #4]	; (da554 <_ZN9TimeClass4yearEv+0x14>)
   da54e:	6958      	ldr	r0, [r3, #20]
   da550:	bd08      	pop	{r3, pc}
   da552:	bf00      	nop
   da554:	2003e648 	.word	0x2003e648

000da558 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da558:	4b02      	ldr	r3, [pc, #8]	; (da564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da55a:	681a      	ldr	r2, [r3, #0]
   da55c:	4b02      	ldr	r3, [pc, #8]	; (da568 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da55e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da560:	4770      	bx	lr
   da562:	bf00      	nop
   da564:	2003dd10 	.word	0x2003dd10
   da568:	2003e644 	.word	0x2003e644

000da56c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da56c:	4770      	bx	lr

000da56e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da56e:	7441      	strb	r1, [r0, #17]
}
   da570:	4770      	bx	lr

000da572 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   da572:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da574:	7c00      	ldrb	r0, [r0, #16]
   da576:	f7fe fa57 	bl	d8a28 <hal_usart_available_data_for_write>
}
   da57a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da57e:	bd08      	pop	{r3, pc}

000da580 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   da580:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da582:	7c00      	ldrb	r0, [r0, #16]
   da584:	f7fe fa28 	bl	d89d8 <hal_usart_available>
}
   da588:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da58c:	bd08      	pop	{r3, pc}

000da58e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   da58e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da590:	7c00      	ldrb	r0, [r0, #16]
   da592:	f7fe fa31 	bl	d89f8 <hal_usart_peek>
}
   da596:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da59a:	bd08      	pop	{r3, pc}

000da59c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   da59c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da59e:	7c00      	ldrb	r0, [r0, #16]
   da5a0:	f7fe fa22 	bl	d89e8 <hal_usart_read>
}
   da5a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da5a8:	bd08      	pop	{r3, pc}

000da5aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   da5aa:	7c00      	ldrb	r0, [r0, #16]
   da5ac:	f7fe ba2c 	b.w	d8a08 <hal_usart_flush>

000da5b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   da5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5b2:	7c45      	ldrb	r5, [r0, #17]
{
   da5b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5b6:	b12d      	cbz	r5, da5c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   da5b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   da5ba:	b003      	add	sp, #12
   da5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da5c0:	f7fe ba02 	b.w	d89c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5c4:	7c00      	ldrb	r0, [r0, #16]
   da5c6:	9101      	str	r1, [sp, #4]
   da5c8:	f7fe fa2e 	bl	d8a28 <hal_usart_available_data_for_write>
   da5cc:	2800      	cmp	r0, #0
   da5ce:	9901      	ldr	r1, [sp, #4]
   da5d0:	dcf2      	bgt.n	da5b8 <_ZN11USARTSerial5writeEh+0x8>
}
   da5d2:	4628      	mov	r0, r5
   da5d4:	b003      	add	sp, #12
   da5d6:	bd30      	pop	{r4, r5, pc}

000da5d8 <_ZN11USARTSerialD0Ev>:
   da5d8:	b510      	push	{r4, lr}
   da5da:	2114      	movs	r1, #20
   da5dc:	4604      	mov	r4, r0
   da5de:	f000 fac6 	bl	dab6e <_ZdlPvj>
   da5e2:	4620      	mov	r0, r4
   da5e4:	bd10      	pop	{r4, pc}
	...

000da5e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da5e8:	b510      	push	{r4, lr}
   da5ea:	f04f 0c00 	mov.w	ip, #0
   da5ee:	4604      	mov	r4, r0
   da5f0:	4608      	mov	r0, r1
   da5f2:	4611      	mov	r1, r2
   da5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da5f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da5fc:	4a04      	ldr	r2, [pc, #16]	; (da610 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da5fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da600:	2201      	movs	r2, #1
  _serial = serial;
   da602:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da604:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da606:	461a      	mov	r2, r3
   da608:	f7fe f9d6 	bl	d89b8 <hal_usart_init>
}
   da60c:	4620      	mov	r0, r4
   da60e:	bd10      	pop	{r4, pc}
   da610:	000de538 	.word	0x000de538

000da614 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da614:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da616:	4c0e      	ldr	r4, [pc, #56]	; (da650 <_Z22__fetch_global_Serial1v+0x3c>)
   da618:	7821      	ldrb	r1, [r4, #0]
   da61a:	f3bf 8f5b 	dmb	ish
   da61e:	f011 0101 	ands.w	r1, r1, #1
   da622:	d112      	bne.n	da64a <_Z22__fetch_global_Serial1v+0x36>
   da624:	4620      	mov	r0, r4
   da626:	9101      	str	r1, [sp, #4]
   da628:	f7f9 fd48 	bl	d40bc <__cxa_guard_acquire>
   da62c:	9901      	ldr	r1, [sp, #4]
   da62e:	b160      	cbz	r0, da64a <_Z22__fetch_global_Serial1v+0x36>
   da630:	4a08      	ldr	r2, [pc, #32]	; (da654 <_Z22__fetch_global_Serial1v+0x40>)
   da632:	4b09      	ldr	r3, [pc, #36]	; (da658 <_Z22__fetch_global_Serial1v+0x44>)
   da634:	4809      	ldr	r0, [pc, #36]	; (da65c <_Z22__fetch_global_Serial1v+0x48>)
   da636:	f7ff ffd7 	bl	da5e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da63a:	4620      	mov	r0, r4
   da63c:	f7f9 fd43 	bl	d40c6 <__cxa_guard_release>
   da640:	4a07      	ldr	r2, [pc, #28]	; (da660 <_Z22__fetch_global_Serial1v+0x4c>)
   da642:	4908      	ldr	r1, [pc, #32]	; (da664 <_Z22__fetch_global_Serial1v+0x50>)
   da644:	4805      	ldr	r0, [pc, #20]	; (da65c <_Z22__fetch_global_Serial1v+0x48>)
   da646:	f000 fa8d 	bl	dab64 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da64a:	4804      	ldr	r0, [pc, #16]	; (da65c <_Z22__fetch_global_Serial1v+0x48>)
   da64c:	b002      	add	sp, #8
   da64e:	bd10      	pop	{r4, pc}
   da650:	2003e688 	.word	0x2003e688
   da654:	2003e68c 	.word	0x2003e68c
   da658:	2003e710 	.word	0x2003e710
   da65c:	2003e794 	.word	0x2003e794
   da660:	2003def0 	.word	0x2003def0
   da664:	000da56d 	.word	0x000da56d

000da668 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da668:	7441      	strb	r1, [r0, #17]
}
   da66a:	4770      	bx	lr

000da66c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da66c:	4770      	bx	lr

000da66e <_ZN9USBSerial4readEv>:
{
   da66e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da670:	2100      	movs	r1, #0
   da672:	7c00      	ldrb	r0, [r0, #16]
   da674:	f7fe f9f8 	bl	d8a68 <HAL_USB_USART_Receive_Data>
}
   da678:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da67c:	bd08      	pop	{r3, pc}

000da67e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   da67e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da680:	2101      	movs	r1, #1
   da682:	7c00      	ldrb	r0, [r0, #16]
   da684:	f7fe f9f0 	bl	d8a68 <HAL_USB_USART_Receive_Data>
}
   da688:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da68c:	bd08      	pop	{r3, pc}

000da68e <_ZN9USBSerial17availableForWriteEv>:
{
   da68e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da690:	7c00      	ldrb	r0, [r0, #16]
   da692:	f7fe f9e1 	bl	d8a58 <HAL_USB_USART_Available_Data_For_Write>
}
   da696:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da69a:	bd08      	pop	{r3, pc}

000da69c <_ZN9USBSerial9availableEv>:
{
   da69c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da69e:	7c00      	ldrb	r0, [r0, #16]
   da6a0:	f7fe f9d2 	bl	d8a48 <HAL_USB_USART_Available_Data>
}
   da6a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da6a8:	bd08      	pop	{r3, pc}

000da6aa <_ZN9USBSerial5writeEh>:
{
   da6aa:	b513      	push	{r0, r1, r4, lr}
   da6ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da6ae:	7c00      	ldrb	r0, [r0, #16]
{
   da6b0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da6b2:	f7fe f9d1 	bl	d8a58 <HAL_USB_USART_Available_Data_For_Write>
   da6b6:	2800      	cmp	r0, #0
   da6b8:	9901      	ldr	r1, [sp, #4]
   da6ba:	dc01      	bgt.n	da6c0 <_ZN9USBSerial5writeEh+0x16>
   da6bc:	7c60      	ldrb	r0, [r4, #17]
   da6be:	b120      	cbz	r0, da6ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da6c0:	7c20      	ldrb	r0, [r4, #16]
   da6c2:	f7fe f9d9 	bl	d8a78 <HAL_USB_USART_Send_Data>
   da6c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da6ca:	b002      	add	sp, #8
   da6cc:	bd10      	pop	{r4, pc}

000da6ce <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da6ce:	7c00      	ldrb	r0, [r0, #16]
   da6d0:	f7fe b9da 	b.w	d8a88 <HAL_USB_USART_Flush_Data>

000da6d4 <_ZN9USBSerialD0Ev>:
   da6d4:	b510      	push	{r4, lr}
   da6d6:	2114      	movs	r1, #20
   da6d8:	4604      	mov	r4, r0
   da6da:	f000 fa48 	bl	dab6e <_ZdlPvj>
   da6de:	4620      	mov	r0, r4
   da6e0:	bd10      	pop	{r4, pc}
	...

000da6e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da6e4:	b510      	push	{r4, lr}
   da6e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da6ea:	4604      	mov	r4, r0
   da6ec:	4608      	mov	r0, r1
   da6ee:	2100      	movs	r1, #0
   da6f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da6f4:	4b04      	ldr	r3, [pc, #16]	; (da708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da6f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da6f8:	2301      	movs	r3, #1
  _serial = serial;
   da6fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da6fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da6fe:	4611      	mov	r1, r2
   da700:	f7fe f99a 	bl	d8a38 <HAL_USB_USART_Init>
}
   da704:	4620      	mov	r0, r4
   da706:	bd10      	pop	{r4, pc}
   da708:	000de568 	.word	0x000de568

000da70c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da70c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da70e:	2214      	movs	r2, #20
{
   da710:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da712:	2100      	movs	r1, #0
   da714:	f001 f8c8 	bl	db8a8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da718:	4620      	mov	r0, r4
   da71a:	bd10      	pop	{r4, pc}

000da71c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da71c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da71e:	4c10      	ldr	r4, [pc, #64]	; (da760 <_Z16_fetch_usbserialv+0x44>)
{
   da720:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da722:	a803      	add	r0, sp, #12
   da724:	f7ff fff2 	bl	da70c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da728:	7821      	ldrb	r1, [r4, #0]
   da72a:	f3bf 8f5b 	dmb	ish
   da72e:	f011 0101 	ands.w	r1, r1, #1
   da732:	d111      	bne.n	da758 <_Z16_fetch_usbserialv+0x3c>
   da734:	4620      	mov	r0, r4
   da736:	9101      	str	r1, [sp, #4]
   da738:	f7f9 fcc0 	bl	d40bc <__cxa_guard_acquire>
   da73c:	9901      	ldr	r1, [sp, #4]
   da73e:	b158      	cbz	r0, da758 <_Z16_fetch_usbserialv+0x3c>
   da740:	aa03      	add	r2, sp, #12
   da742:	4808      	ldr	r0, [pc, #32]	; (da764 <_Z16_fetch_usbserialv+0x48>)
   da744:	f7ff ffce 	bl	da6e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da748:	4620      	mov	r0, r4
   da74a:	f7f9 fcbc 	bl	d40c6 <__cxa_guard_release>
   da74e:	4a06      	ldr	r2, [pc, #24]	; (da768 <_Z16_fetch_usbserialv+0x4c>)
   da750:	4906      	ldr	r1, [pc, #24]	; (da76c <_Z16_fetch_usbserialv+0x50>)
   da752:	4804      	ldr	r0, [pc, #16]	; (da764 <_Z16_fetch_usbserialv+0x48>)
   da754:	f000 fa06 	bl	dab64 <__aeabi_atexit>
	return _usbserial;
}
   da758:	4802      	ldr	r0, [pc, #8]	; (da764 <_Z16_fetch_usbserialv+0x48>)
   da75a:	b008      	add	sp, #32
   da75c:	bd10      	pop	{r4, pc}
   da75e:	bf00      	nop
   da760:	2003e7a8 	.word	0x2003e7a8
   da764:	2003e7ac 	.word	0x2003e7ac
   da768:	2003def0 	.word	0x2003def0
   da76c:	000da66d 	.word	0x000da66d

000da770 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   da770:	2200      	movs	r2, #0
   da772:	6840      	ldr	r0, [r0, #4]
   da774:	4611      	mov	r1, r2
   da776:	f7fe ba8d 	b.w	d8c94 <network_ready>

000da77a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da77a:	2200      	movs	r2, #0
   da77c:	6840      	ldr	r0, [r0, #4]
   da77e:	4611      	mov	r1, r2
   da780:	f7fe baa8 	b.w	d8cd4 <network_listening>

000da784 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   da784:	2200      	movs	r2, #0
   da786:	6840      	ldr	r0, [r0, #4]
   da788:	4611      	mov	r1, r2
   da78a:	f7fe bab3 	b.w	d8cf4 <network_get_listen_timeout>

000da78e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   da78e:	6840      	ldr	r0, [r0, #4]
   da790:	2200      	movs	r2, #0
   da792:	f7fe baa7 	b.w	d8ce4 <network_set_listen_timeout>

000da796 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   da796:	6840      	ldr	r0, [r0, #4]
   da798:	2200      	movs	r2, #0
   da79a:	f081 0101 	eor.w	r1, r1, #1
   da79e:	f7fe ba91 	b.w	d8cc4 <network_listen>

000da7a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   da7a2:	2300      	movs	r3, #0
   da7a4:	6840      	ldr	r0, [r0, #4]
   da7a6:	461a      	mov	r2, r3
   da7a8:	4619      	mov	r1, r3
   da7aa:	f7fe ba83 	b.w	d8cb4 <network_off>

000da7ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   da7ae:	2300      	movs	r3, #0
   da7b0:	6840      	ldr	r0, [r0, #4]
   da7b2:	461a      	mov	r2, r3
   da7b4:	4619      	mov	r1, r3
   da7b6:	f7fe ba75 	b.w	d8ca4 <network_on>

000da7ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   da7ba:	2200      	movs	r2, #0
   da7bc:	6840      	ldr	r0, [r0, #4]
   da7be:	4611      	mov	r1, r2
   da7c0:	f7fe ba58 	b.w	d8c74 <network_connecting>

000da7c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da7c4:	6840      	ldr	r0, [r0, #4]
   da7c6:	2200      	movs	r2, #0
   da7c8:	2102      	movs	r1, #2
   da7ca:	f7fe ba5b 	b.w	d8c84 <network_disconnect>

000da7ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   da7ce:	2300      	movs	r3, #0
   da7d0:	6840      	ldr	r0, [r0, #4]
   da7d2:	461a      	mov	r2, r3
   da7d4:	f7fe ba46 	b.w	d8c64 <network_connect>

000da7d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   da7d8:	4b02      	ldr	r3, [pc, #8]	; (da7e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   da7da:	2204      	movs	r2, #4
   da7dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   da7de:	4a02      	ldr	r2, [pc, #8]	; (da7e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   da7e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   da7e2:	4770      	bx	lr
   da7e4:	2003e7c0 	.word	0x2003e7c0
   da7e8:	000de598 	.word	0x000de598

000da7ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   da7ec:	b510      	push	{r4, lr}
   da7ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   da7f0:	f001 f8b5 	bl	db95e <strlen>
   da7f4:	3801      	subs	r0, #1
   da7f6:	1823      	adds	r3, r4, r0
   da7f8:	4620      	mov	r0, r4
	while(i<j){
   da7fa:	4283      	cmp	r3, r0
   da7fc:	d906      	bls.n	da80c <_Z11str_reversePc+0x20>
		c = *i;
   da7fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   da800:	7819      	ldrb	r1, [r3, #0]
   da802:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   da806:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   da80a:	e7f6      	b.n	da7fa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   da80c:	bd10      	pop	{r4, pc}

000da80e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da80e:	b570      	push	{r4, r5, r6, lr}
   da810:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   da812:	1e91      	subs	r1, r2, #2
   da814:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   da816:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   da818:	d822      	bhi.n	da860 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   da81a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   da81c:	b16d      	cbz	r5, da83a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   da81e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   da822:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   da826:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   da828:	2d09      	cmp	r5, #9
                *ptr += '0';
   da82a:	bf94      	ite	ls
   da82c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   da82e:	3157      	addhi	r1, #87	; 0x57
   da830:	b2c9      	uxtb	r1, r1
   da832:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   da836:	4635      	mov	r5, r6
	while(a){
   da838:	e7f0      	b.n	da81c <ultoa+0xe>
   da83a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   da83c:	4423      	add	r3, r4
            *ptr++ = '0';
   da83e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   da840:	4293      	cmp	r3, r2
   da842:	d902      	bls.n	da84a <ultoa+0x3c>
            *ptr++ = '0';
   da844:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   da848:	e7fa      	b.n	da840 <ultoa+0x32>
   da84a:	1a1a      	subs	r2, r3, r0
   da84c:	4283      	cmp	r3, r0
   da84e:	bf38      	it	cc
   da850:	2200      	movcc	r2, #0

	*ptr = '\0';
   da852:	2300      	movs	r3, #0
   da854:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   da856:	4620      	mov	r0, r4
   da858:	f7ff ffc8 	bl	da7ec <_Z11str_reversePc>
	return buffer;
   da85c:	4620      	mov	r0, r4
}
   da85e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   da860:	2000      	movs	r0, #0
   da862:	e7fc      	b.n	da85e <ultoa+0x50>

000da864 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da864:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   da866:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   da868:	460c      	mov	r4, r1
   da86a:	4615      	mov	r5, r2
	if(a<0){
   da86c:	da0e      	bge.n	da88c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da86e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   da872:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   da876:	bf14      	ite	ne
   da878:	4258      	negne	r0, r3
   da87a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   da87c:	2301      	movs	r3, #1
		*buffer = '-';
   da87e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   da880:	462a      	mov	r2, r5
   da882:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   da884:	f7ff ffc3 	bl	da80e <ultoa>
	}
	return buffer;
}
   da888:	4620      	mov	r0, r4
   da88a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   da88c:	2301      	movs	r3, #1
   da88e:	e7f9      	b.n	da884 <itoa+0x20>

000da890 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da890:	4b01      	ldr	r3, [pc, #4]	; (da898 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da892:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da894:	4770      	bx	lr
   da896:	bf00      	nop
   da898:	2003dd18 	.word	0x2003dd18

000da89c <serialEventRun>:
{
   da89c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da89e:	4b0b      	ldr	r3, [pc, #44]	; (da8cc <serialEventRun+0x30>)
   da8a0:	b143      	cbz	r3, da8b4 <serialEventRun+0x18>
   da8a2:	f7ff ff3b 	bl	da71c <_Z16_fetch_usbserialv>
   da8a6:	6803      	ldr	r3, [r0, #0]
   da8a8:	691b      	ldr	r3, [r3, #16]
   da8aa:	4798      	blx	r3
   da8ac:	2800      	cmp	r0, #0
   da8ae:	dd01      	ble.n	da8b4 <serialEventRun+0x18>
        serialEvent();
   da8b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da8b4:	4b06      	ldr	r3, [pc, #24]	; (da8d0 <serialEventRun+0x34>)
   da8b6:	b143      	cbz	r3, da8ca <serialEventRun+0x2e>
   da8b8:	f7ff feac 	bl	da614 <_Z22__fetch_global_Serial1v>
   da8bc:	6803      	ldr	r3, [r0, #0]
   da8be:	691b      	ldr	r3, [r3, #16]
   da8c0:	4798      	blx	r3
   da8c2:	2800      	cmp	r0, #0
   da8c4:	dd01      	ble.n	da8ca <serialEventRun+0x2e>
        serialEvent1();
   da8c6:	f3af 8000 	nop.w
}
   da8ca:	bd08      	pop	{r3, pc}
	...

000da8d4 <_post_loop>:
{
   da8d4:	b508      	push	{r3, lr}
	serialEventRun();
   da8d6:	f7ff ffe1 	bl	da89c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da8da:	f7fd ff7d 	bl	d87d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da8de:	4b01      	ldr	r3, [pc, #4]	; (da8e4 <_post_loop+0x10>)
   da8e0:	6018      	str	r0, [r3, #0]
}
   da8e2:	bd08      	pop	{r3, pc}
   da8e4:	2003e7dc 	.word	0x2003e7dc

000da8e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da8e8:	4802      	ldr	r0, [pc, #8]	; (da8f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   da8ea:	4a03      	ldr	r2, [pc, #12]	; (da8f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   da8ec:	4903      	ldr	r1, [pc, #12]	; (da8fc <_Z33system_initialize_user_backup_ramv+0x14>)
   da8ee:	1a12      	subs	r2, r2, r0
   da8f0:	f000 bfb2 	b.w	db858 <memcpy>
   da8f4:	2003f400 	.word	0x2003f400
   da8f8:	2003fd44 	.word	0x2003fd44
   da8fc:	000de8e0 	.word	0x000de8e0

000da900 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da900:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da902:	2300      	movs	r3, #0
   da904:	9300      	str	r3, [sp, #0]
   da906:	461a      	mov	r2, r3
   da908:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da90c:	f7fe f92e 	bl	d8b6c <system_ctrl_set_result>
}
   da910:	b003      	add	sp, #12
   da912:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da918 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da918:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da91a:	8843      	ldrh	r3, [r0, #2]
   da91c:	2b0a      	cmp	r3, #10
   da91e:	d008      	beq.n	da932 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da920:	2b50      	cmp	r3, #80	; 0x50
   da922:	d10b      	bne.n	da93c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da924:	4b09      	ldr	r3, [pc, #36]	; (da94c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da926:	681b      	ldr	r3, [r3, #0]
   da928:	b14b      	cbz	r3, da93e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da92a:	b003      	add	sp, #12
   da92c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da930:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da932:	f7ff ffe5 	bl	da900 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da936:	b003      	add	sp, #12
   da938:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da93c:	2300      	movs	r3, #0
   da93e:	9300      	str	r3, [sp, #0]
   da940:	461a      	mov	r2, r3
   da942:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da946:	f7fe f911 	bl	d8b6c <system_ctrl_set_result>
}
   da94a:	e7f4      	b.n	da936 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da94c:	2003e7cc 	.word	0x2003e7cc

000da950 <module_user_init_hook>:
{
   da950:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da952:	4c12      	ldr	r4, [pc, #72]	; (da99c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da954:	4812      	ldr	r0, [pc, #72]	; (da9a0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da956:	4d13      	ldr	r5, [pc, #76]	; (da9a4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da958:	2100      	movs	r1, #0
   da95a:	f7fe fa2b 	bl	d8db4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da95e:	6823      	ldr	r3, [r4, #0]
   da960:	42ab      	cmp	r3, r5
   da962:	4b11      	ldr	r3, [pc, #68]	; (da9a8 <module_user_init_hook+0x58>)
   da964:	bf0c      	ite	eq
   da966:	2201      	moveq	r2, #1
   da968:	2200      	movne	r2, #0
   da96a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da96c:	d002      	beq.n	da974 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da96e:	f7ff ffbb 	bl	da8e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da972:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da974:	f7fd ff18 	bl	d87a8 <HAL_RNG_GetRandomNumber>
   da978:	4604      	mov	r4, r0
    srand(seed);
   da97a:	f000 ff9d 	bl	db8b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da97e:	4b0b      	ldr	r3, [pc, #44]	; (da9ac <module_user_init_hook+0x5c>)
   da980:	b113      	cbz	r3, da988 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da982:	4620      	mov	r0, r4
   da984:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da988:	2100      	movs	r1, #0
   da98a:	4808      	ldr	r0, [pc, #32]	; (da9ac <module_user_init_hook+0x5c>)
   da98c:	f7fe f962 	bl	d8c54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da994:	4806      	ldr	r0, [pc, #24]	; (da9b0 <module_user_init_hook+0x60>)
   da996:	2100      	movs	r1, #0
   da998:	f7fe b8de 	b.w	d8b58 <system_ctrl_set_app_request_handler>
   da99c:	2003fd40 	.word	0x2003fd40
   da9a0:	000da891 	.word	0x000da891
   da9a4:	9a271c1e 	.word	0x9a271c1e
   da9a8:	2003e7c8 	.word	0x2003e7c8
   da9ac:	00000000 	.word	0x00000000
   da9b0:	000da919 	.word	0x000da919

000da9b4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da9b4:	b508      	push	{r3, lr}
   da9b6:	4b02      	ldr	r3, [pc, #8]	; (da9c0 <spark_protocol_instance+0xc>)
   da9b8:	681b      	ldr	r3, [r3, #0]
   da9ba:	681b      	ldr	r3, [r3, #0]
   da9bc:	9301      	str	r3, [sp, #4]
   da9be:	bd08      	pop	{r3, pc}
   da9c0:	0003025c 	.word	0x0003025c

000da9c4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b02      	ldr	r3, [pc, #8]	; (da9d0 <spark_protocol_set_product_id+0xc>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	685b      	ldr	r3, [r3, #4]
   da9cc:	9301      	str	r3, [sp, #4]
   da9ce:	bd08      	pop	{r3, pc}
   da9d0:	0003025c 	.word	0x0003025c

000da9d4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da9d4:	b508      	push	{r3, lr}
   da9d6:	4b02      	ldr	r3, [pc, #8]	; (da9e0 <spark_protocol_set_product_firmware_version+0xc>)
   da9d8:	681b      	ldr	r3, [r3, #0]
   da9da:	689b      	ldr	r3, [r3, #8]
   da9dc:	9301      	str	r3, [sp, #4]
   da9de:	bd08      	pop	{r3, pc}
   da9e0:	0003025c 	.word	0x0003025c

000da9e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da9e4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da9e6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da9e8:	d902      	bls.n	da9f0 <pinAvailable+0xc>
    return false;
   da9ea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da9ec:	b002      	add	sp, #8
   da9ee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da9f0:	f1a0 030b 	sub.w	r3, r0, #11
   da9f4:	2b02      	cmp	r3, #2
   da9f6:	d81a      	bhi.n	daa2e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da9f8:	4c17      	ldr	r4, [pc, #92]	; (daa58 <pinAvailable+0x74>)
   da9fa:	7821      	ldrb	r1, [r4, #0]
   da9fc:	f3bf 8f5b 	dmb	ish
   daa00:	f011 0101 	ands.w	r1, r1, #1
   daa04:	d10b      	bne.n	daa1e <pinAvailable+0x3a>
   daa06:	4620      	mov	r0, r4
   daa08:	9101      	str	r1, [sp, #4]
   daa0a:	f7f9 fb57 	bl	d40bc <__cxa_guard_acquire>
   daa0e:	9901      	ldr	r1, [sp, #4]
   daa10:	b128      	cbz	r0, daa1e <pinAvailable+0x3a>
   daa12:	4812      	ldr	r0, [pc, #72]	; (daa5c <pinAvailable+0x78>)
   daa14:	f7ff facc 	bl	d9fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   daa18:	4620      	mov	r0, r4
   daa1a:	f7f9 fb54 	bl	d40c6 <__cxa_guard_release>
   daa1e:	4b0f      	ldr	r3, [pc, #60]	; (daa5c <pinAvailable+0x78>)
   daa20:	7818      	ldrb	r0, [r3, #0]
   daa22:	f7fd ffc1 	bl	d89a8 <hal_spi_is_enabled>
   daa26:	2800      	cmp	r0, #0
   daa28:	d1df      	bne.n	da9ea <pinAvailable+0x6>
  return true; // 'pin' is available
   daa2a:	2001      	movs	r0, #1
   daa2c:	e7de      	b.n	da9ec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   daa2e:	2801      	cmp	r0, #1
   daa30:	d809      	bhi.n	daa46 <pinAvailable+0x62>
   daa32:	f000 f86f 	bl	dab14 <_Z19__fetch_global_Wirev>
   daa36:	2100      	movs	r1, #0
   daa38:	7c00      	ldrb	r0, [r0, #16]
   daa3a:	f7fd ff6d 	bl	d8918 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   daa3e:	f080 0001 	eor.w	r0, r0, #1
   daa42:	b2c0      	uxtb	r0, r0
   daa44:	e7d2      	b.n	da9ec <pinAvailable+0x8>
   daa46:	3809      	subs	r0, #9
   daa48:	2801      	cmp	r0, #1
   daa4a:	d8ee      	bhi.n	daa2a <pinAvailable+0x46>
   daa4c:	f7ff fde2 	bl	da614 <_Z22__fetch_global_Serial1v>
   daa50:	7c00      	ldrb	r0, [r0, #16]
   daa52:	f7fd ffe1 	bl	d8a18 <hal_usart_is_enabled>
   daa56:	e7f2      	b.n	daa3e <pinAvailable+0x5a>
   daa58:	2003e7d0 	.word	0x2003e7d0
   daa5c:	2003e7d4 	.word	0x2003e7d4

000daa60 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   daa60:	2823      	cmp	r0, #35	; 0x23
{
   daa62:	b538      	push	{r3, r4, r5, lr}
   daa64:	4604      	mov	r4, r0
   daa66:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   daa68:	d80a      	bhi.n	daa80 <pinMode+0x20>
   daa6a:	29ff      	cmp	r1, #255	; 0xff
   daa6c:	d008      	beq.n	daa80 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   daa6e:	f7ff ffb9 	bl	da9e4 <pinAvailable>
   daa72:	b128      	cbz	r0, daa80 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   daa74:	4629      	mov	r1, r5
   daa76:	4620      	mov	r0, r4
}
   daa78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   daa7c:	f7fd bedc 	b.w	d8838 <HAL_Pin_Mode>
}
   daa80:	bd38      	pop	{r3, r4, r5, pc}

000daa82 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   daa82:	b538      	push	{r3, r4, r5, lr}
   daa84:	4604      	mov	r4, r0
   daa86:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daa88:	f7fd fede 	bl	d8848 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   daa8c:	28ff      	cmp	r0, #255	; 0xff
   daa8e:	d010      	beq.n	daab2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   daa90:	2806      	cmp	r0, #6
   daa92:	d804      	bhi.n	daa9e <digitalWrite+0x1c>
   daa94:	234d      	movs	r3, #77	; 0x4d
   daa96:	fa23 f000 	lsr.w	r0, r3, r0
   daa9a:	07c3      	lsls	r3, r0, #31
   daa9c:	d409      	bmi.n	daab2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   daa9e:	4620      	mov	r0, r4
   daaa0:	f7ff ffa0 	bl	da9e4 <pinAvailable>
   daaa4:	b128      	cbz	r0, daab2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   daaa6:	4629      	mov	r1, r5
   daaa8:	4620      	mov	r0, r4
}
   daaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   daaae:	f7fd bed3 	b.w	d8858 <HAL_GPIO_Write>
}
   daab2:	bd38      	pop	{r3, r4, r5, pc}

000daab4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   daab4:	280d      	cmp	r0, #13
{
   daab6:	b510      	push	{r4, lr}
   daab8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   daaba:	bf9c      	itt	ls
   daabc:	340e      	addls	r4, #14
   daabe:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   daac0:	4620      	mov	r0, r4
   daac2:	f7ff ff8f 	bl	da9e4 <pinAvailable>
   daac6:	b150      	cbz	r0, daade <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   daac8:	2103      	movs	r1, #3
   daaca:	4620      	mov	r0, r4
   daacc:	f7fd feac 	bl	d8828 <HAL_Validate_Pin_Function>
   daad0:	2803      	cmp	r0, #3
   daad2:	d104      	bne.n	daade <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   daad4:	4620      	mov	r0, r4
}
   daad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   daada:	f7fd bed5 	b.w	d8888 <hal_adc_read>
}
   daade:	2000      	movs	r0, #0
   daae0:	bd10      	pop	{r4, pc}
	...

000daae4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   daae4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   daae6:	2300      	movs	r3, #0
   daae8:	2520      	movs	r5, #32
   daaea:	8043      	strh	r3, [r0, #2]
   daaec:	2314      	movs	r3, #20
{
   daaee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   daaf0:	8003      	strh	r3, [r0, #0]
   daaf2:	6085      	str	r5, [r0, #8]
   daaf4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daaf6:	4906      	ldr	r1, [pc, #24]	; (dab10 <_Z17acquireWireBufferv+0x2c>)
   daaf8:	4628      	mov	r0, r5
   daafa:	f000 f83c 	bl	dab76 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daafe:	4904      	ldr	r1, [pc, #16]	; (dab10 <_Z17acquireWireBufferv+0x2c>)
	};
   dab00:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dab02:	4628      	mov	r0, r5
   dab04:	f000 f837 	bl	dab76 <_ZnajRKSt9nothrow_t>
	};
   dab08:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   dab0a:	4620      	mov	r0, r4
   dab0c:	bd38      	pop	{r3, r4, r5, pc}
   dab0e:	bf00      	nop
   dab10:	000de5cc 	.word	0x000de5cc

000dab14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dab14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dab16:	4d0f      	ldr	r5, [pc, #60]	; (dab54 <_Z19__fetch_global_Wirev+0x40>)
   dab18:	7829      	ldrb	r1, [r5, #0]
   dab1a:	f3bf 8f5b 	dmb	ish
   dab1e:	f011 0401 	ands.w	r4, r1, #1
{
   dab22:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dab24:	d113      	bne.n	dab4e <_Z19__fetch_global_Wirev+0x3a>
   dab26:	4628      	mov	r0, r5
   dab28:	f7f9 fac8 	bl	d40bc <__cxa_guard_acquire>
   dab2c:	b178      	cbz	r0, dab4e <_Z19__fetch_global_Wirev+0x3a>
   dab2e:	a801      	add	r0, sp, #4
   dab30:	f7ff ffd8 	bl	daae4 <_Z17acquireWireBufferv>
   dab34:	aa01      	add	r2, sp, #4
   dab36:	4621      	mov	r1, r4
   dab38:	4807      	ldr	r0, [pc, #28]	; (dab58 <_Z19__fetch_global_Wirev+0x44>)
   dab3a:	f7fe fcd3 	bl	d94e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dab3e:	4628      	mov	r0, r5
   dab40:	f7f9 fac1 	bl	d40c6 <__cxa_guard_release>
   dab44:	4a05      	ldr	r2, [pc, #20]	; (dab5c <_Z19__fetch_global_Wirev+0x48>)
   dab46:	4906      	ldr	r1, [pc, #24]	; (dab60 <_Z19__fetch_global_Wirev+0x4c>)
   dab48:	4803      	ldr	r0, [pc, #12]	; (dab58 <_Z19__fetch_global_Wirev+0x44>)
   dab4a:	f000 f80b 	bl	dab64 <__aeabi_atexit>
	return wire;
}
   dab4e:	4802      	ldr	r0, [pc, #8]	; (dab58 <_Z19__fetch_global_Wirev+0x44>)
   dab50:	b007      	add	sp, #28
   dab52:	bd30      	pop	{r4, r5, pc}
   dab54:	2003e7e0 	.word	0x2003e7e0
   dab58:	2003e7e4 	.word	0x2003e7e4
   dab5c:	2003def0 	.word	0x2003def0
   dab60:	000d948d 	.word	0x000d948d

000dab64 <__aeabi_atexit>:
   dab64:	460b      	mov	r3, r1
   dab66:	4601      	mov	r1, r0
   dab68:	4618      	mov	r0, r3
   dab6a:	f000 be55 	b.w	db818 <__cxa_atexit>

000dab6e <_ZdlPvj>:
   dab6e:	f7f9 ba96 	b.w	d409e <_ZdlPv>

000dab72 <_ZnwjRKSt9nothrow_t>:
   dab72:	f7f9 ba90 	b.w	d4096 <_Znwj>

000dab76 <_ZnajRKSt9nothrow_t>:
   dab76:	f7f9 ba90 	b.w	d409a <_Znaj>

000dab7a <_ZSt25__throw_bad_function_callv>:
   dab7a:	b508      	push	{r3, lr}
   dab7c:	f7fe f902 	bl	d8d84 <abort>

000dab80 <sqrt>:
   dab80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dab84:	ed2d 8b02 	vpush	{d8}
   dab88:	b08b      	sub	sp, #44	; 0x2c
   dab8a:	ec55 4b10 	vmov	r4, r5, d0
   dab8e:	f000 f855 	bl	dac3c <__ieee754_sqrt>
   dab92:	4b28      	ldr	r3, [pc, #160]	; (dac34 <sqrt+0xb4>)
   dab94:	eeb0 8a40 	vmov.f32	s16, s0
   dab98:	eef0 8a60 	vmov.f32	s17, s1
   dab9c:	f993 7000 	ldrsb.w	r7, [r3]
   daba0:	1c7b      	adds	r3, r7, #1
   daba2:	d012      	beq.n	dabca <sqrt+0x4a>
   daba4:	4622      	mov	r2, r4
   daba6:	462b      	mov	r3, r5
   daba8:	4620      	mov	r0, r4
   dabaa:	4629      	mov	r1, r5
   dabac:	f000 fd62 	bl	db674 <__aeabi_dcmpun>
   dabb0:	4606      	mov	r6, r0
   dabb2:	b950      	cbnz	r0, dabca <sqrt+0x4a>
   dabb4:	f04f 0800 	mov.w	r8, #0
   dabb8:	f04f 0900 	mov.w	r9, #0
   dabbc:	4620      	mov	r0, r4
   dabbe:	4629      	mov	r1, r5
   dabc0:	4642      	mov	r2, r8
   dabc2:	464b      	mov	r3, r9
   dabc4:	f000 fd2e 	bl	db624 <__aeabi_dcmplt>
   dabc8:	b940      	cbnz	r0, dabdc <sqrt+0x5c>
   dabca:	eeb0 0a48 	vmov.f32	s0, s16
   dabce:	eef0 0a68 	vmov.f32	s1, s17
   dabd2:	b00b      	add	sp, #44	; 0x2c
   dabd4:	ecbd 8b02 	vpop	{d8}
   dabd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dabdc:	4b16      	ldr	r3, [pc, #88]	; (dac38 <sqrt+0xb8>)
   dabde:	9608      	str	r6, [sp, #32]
   dabe0:	2201      	movs	r2, #1
   dabe2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dabe6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dabea:	9200      	str	r2, [sp, #0]
   dabec:	9301      	str	r3, [sp, #4]
   dabee:	b197      	cbz	r7, dac16 <sqrt+0x96>
   dabf0:	4642      	mov	r2, r8
   dabf2:	464b      	mov	r3, r9
   dabf4:	4640      	mov	r0, r8
   dabf6:	4649      	mov	r1, r9
   dabf8:	f000 fbcc 	bl	db394 <__aeabi_ddiv>
   dabfc:	2f02      	cmp	r7, #2
   dabfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dac02:	d10a      	bne.n	dac1a <sqrt+0x9a>
   dac04:	f7fe f8ce 	bl	d8da4 <__errno>
   dac08:	2321      	movs	r3, #33	; 0x21
   dac0a:	6003      	str	r3, [r0, #0]
   dac0c:	9b08      	ldr	r3, [sp, #32]
   dac0e:	b963      	cbnz	r3, dac2a <sqrt+0xaa>
   dac10:	ed9d 8b06 	vldr	d8, [sp, #24]
   dac14:	e7d9      	b.n	dabca <sqrt+0x4a>
   dac16:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dac1a:	4668      	mov	r0, sp
   dac1c:	f000 f8d2 	bl	dadc4 <matherr>
   dac20:	2800      	cmp	r0, #0
   dac22:	d0ef      	beq.n	dac04 <sqrt+0x84>
   dac24:	9b08      	ldr	r3, [sp, #32]
   dac26:	2b00      	cmp	r3, #0
   dac28:	d0f2      	beq.n	dac10 <sqrt+0x90>
   dac2a:	f7fe f8bb 	bl	d8da4 <__errno>
   dac2e:	9b08      	ldr	r3, [sp, #32]
   dac30:	6003      	str	r3, [r0, #0]
   dac32:	e7ed      	b.n	dac10 <sqrt+0x90>
   dac34:	2003dd14 	.word	0x2003dd14
   dac38:	000de5d0 	.word	0x000de5d0

000dac3c <__ieee754_sqrt>:
   dac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dac40:	4a5f      	ldr	r2, [pc, #380]	; (dadc0 <__ieee754_sqrt+0x184>)
   dac42:	ec57 6b10 	vmov	r6, r7, d0
   dac46:	43ba      	bics	r2, r7
   dac48:	f000 8098 	beq.w	dad7c <__ieee754_sqrt+0x140>
   dac4c:	2f00      	cmp	r7, #0
   dac4e:	ee10 4a10 	vmov	r4, s0
   dac52:	463b      	mov	r3, r7
   dac54:	dd4e      	ble.n	dacf4 <__ieee754_sqrt+0xb8>
   dac56:	1539      	asrs	r1, r7, #20
   dac58:	d05b      	beq.n	dad12 <__ieee754_sqrt+0xd6>
   dac5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dac5e:	07ca      	lsls	r2, r1, #31
   dac60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dac64:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dac68:	d403      	bmi.n	dac72 <__ieee754_sqrt+0x36>
   dac6a:	005b      	lsls	r3, r3, #1
   dac6c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dac70:	0064      	lsls	r4, r4, #1
   dac72:	0fe2      	lsrs	r2, r4, #31
   dac74:	f04f 0c00 	mov.w	ip, #0
   dac78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dac7c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dac80:	0064      	lsls	r4, r4, #1
   dac82:	4666      	mov	r6, ip
   dac84:	2516      	movs	r5, #22
   dac86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dac8a:	18b1      	adds	r1, r6, r2
   dac8c:	4299      	cmp	r1, r3
   dac8e:	dc02      	bgt.n	dac96 <__ieee754_sqrt+0x5a>
   dac90:	1a5b      	subs	r3, r3, r1
   dac92:	188e      	adds	r6, r1, r2
   dac94:	4494      	add	ip, r2
   dac96:	005b      	lsls	r3, r3, #1
   dac98:	3d01      	subs	r5, #1
   dac9a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dac9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daca2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daca6:	d1f0      	bne.n	dac8a <__ieee754_sqrt+0x4e>
   daca8:	462f      	mov	r7, r5
   dacaa:	2020      	movs	r0, #32
   dacac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   dacb0:	e009      	b.n	dacc6 <__ieee754_sqrt+0x8a>
   dacb2:	d03e      	beq.n	dad32 <__ieee754_sqrt+0xf6>
   dacb4:	0fe1      	lsrs	r1, r4, #31
   dacb6:	3801      	subs	r0, #1
   dacb8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dacbc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dacc0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dacc4:	d03e      	beq.n	dad44 <__ieee754_sqrt+0x108>
   dacc6:	42b3      	cmp	r3, r6
   dacc8:	eb02 0105 	add.w	r1, r2, r5
   daccc:	ddf1      	ble.n	dacb2 <__ieee754_sqrt+0x76>
   dacce:	2900      	cmp	r1, #0
   dacd0:	eb01 0502 	add.w	r5, r1, r2
   dacd4:	db09      	blt.n	dacea <__ieee754_sqrt+0xae>
   dacd6:	46b0      	mov	r8, r6
   dacd8:	1b9b      	subs	r3, r3, r6
   dacda:	42a1      	cmp	r1, r4
   dacdc:	bf88      	it	hi
   dacde:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   dace2:	1a64      	subs	r4, r4, r1
   dace4:	4417      	add	r7, r2
   dace6:	4646      	mov	r6, r8
   dace8:	e7e4      	b.n	dacb4 <__ieee754_sqrt+0x78>
   dacea:	2d00      	cmp	r5, #0
   dacec:	dbf3      	blt.n	dacd6 <__ieee754_sqrt+0x9a>
   dacee:	f106 0801 	add.w	r8, r6, #1
   dacf2:	e7f1      	b.n	dacd8 <__ieee754_sqrt+0x9c>
   dacf4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dacf8:	4332      	orrs	r2, r6
   dacfa:	d036      	beq.n	dad6a <__ieee754_sqrt+0x12e>
   dacfc:	2f00      	cmp	r7, #0
   dacfe:	d14d      	bne.n	dad9c <__ieee754_sqrt+0x160>
   dad00:	4639      	mov	r1, r7
   dad02:	0ae2      	lsrs	r2, r4, #11
   dad04:	3915      	subs	r1, #21
   dad06:	0564      	lsls	r4, r4, #21
   dad08:	4613      	mov	r3, r2
   dad0a:	2a00      	cmp	r2, #0
   dad0c:	d0f9      	beq.n	dad02 <__ieee754_sqrt+0xc6>
   dad0e:	02d7      	lsls	r7, r2, #11
   dad10:	d451      	bmi.n	dadb6 <__ieee754_sqrt+0x17a>
   dad12:	2000      	movs	r0, #0
   dad14:	005b      	lsls	r3, r3, #1
   dad16:	02de      	lsls	r6, r3, #11
   dad18:	4605      	mov	r5, r0
   dad1a:	f100 0001 	add.w	r0, r0, #1
   dad1e:	d5f9      	bpl.n	dad14 <__ieee754_sqrt+0xd8>
   dad20:	461a      	mov	r2, r3
   dad22:	4623      	mov	r3, r4
   dad24:	4084      	lsls	r4, r0
   dad26:	f1c0 0020 	rsb	r0, r0, #32
   dad2a:	40c3      	lsrs	r3, r0
   dad2c:	4313      	orrs	r3, r2
   dad2e:	1b49      	subs	r1, r1, r5
   dad30:	e793      	b.n	dac5a <__ieee754_sqrt+0x1e>
   dad32:	42a1      	cmp	r1, r4
   dad34:	d8be      	bhi.n	dacb4 <__ieee754_sqrt+0x78>
   dad36:	2900      	cmp	r1, #0
   dad38:	eb01 0502 	add.w	r5, r1, r2
   dad3c:	dbd5      	blt.n	dacea <__ieee754_sqrt+0xae>
   dad3e:	4698      	mov	r8, r3
   dad40:	2300      	movs	r3, #0
   dad42:	e7ce      	b.n	dace2 <__ieee754_sqrt+0xa6>
   dad44:	4323      	orrs	r3, r4
   dad46:	d112      	bne.n	dad6e <__ieee754_sqrt+0x132>
   dad48:	0878      	lsrs	r0, r7, #1
   dad4a:	ea4f 016c 	mov.w	r1, ip, asr #1
   dad4e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dad52:	f01c 0f01 	tst.w	ip, #1
   dad56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dad5a:	bf18      	it	ne
   dad5c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dad60:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dad64:	4602      	mov	r2, r0
   dad66:	ec43 2b10 	vmov	d0, r2, r3
   dad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad6e:	1c7b      	adds	r3, r7, #1
   dad70:	bf16      	itet	ne
   dad72:	1c78      	addne	r0, r7, #1
   dad74:	f10c 0c01 	addeq.w	ip, ip, #1
   dad78:	0840      	lsrne	r0, r0, #1
   dad7a:	e7e6      	b.n	dad4a <__ieee754_sqrt+0x10e>
   dad7c:	ee10 2a10 	vmov	r2, s0
   dad80:	ee10 0a10 	vmov	r0, s0
   dad84:	463b      	mov	r3, r7
   dad86:	4639      	mov	r1, r7
   dad88:	f000 f9da 	bl	db140 <__aeabi_dmul>
   dad8c:	4632      	mov	r2, r6
   dad8e:	463b      	mov	r3, r7
   dad90:	f000 f820 	bl	dadd4 <__adddf3>
   dad94:	ec41 0b10 	vmov	d0, r0, r1
   dad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad9c:	ee10 2a10 	vmov	r2, s0
   dada0:	4630      	mov	r0, r6
   dada2:	4639      	mov	r1, r7
   dada4:	f000 f814 	bl	dadd0 <__aeabi_dsub>
   dada8:	4602      	mov	r2, r0
   dadaa:	460b      	mov	r3, r1
   dadac:	f000 faf2 	bl	db394 <__aeabi_ddiv>
   dadb0:	ec41 0b10 	vmov	d0, r0, r1
   dadb4:	e7d9      	b.n	dad6a <__ieee754_sqrt+0x12e>
   dadb6:	4623      	mov	r3, r4
   dadb8:	2020      	movs	r0, #32
   dadba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dadbe:	e7b4      	b.n	dad2a <__ieee754_sqrt+0xee>
   dadc0:	7ff00000 	.word	0x7ff00000

000dadc4 <matherr>:
   dadc4:	2000      	movs	r0, #0
   dadc6:	4770      	bx	lr

000dadc8 <__aeabi_drsub>:
   dadc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dadcc:	e002      	b.n	dadd4 <__adddf3>
   dadce:	bf00      	nop

000dadd0 <__aeabi_dsub>:
   dadd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dadd4 <__adddf3>:
   dadd4:	b530      	push	{r4, r5, lr}
   dadd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dadda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dadde:	ea94 0f05 	teq	r4, r5
   dade2:	bf08      	it	eq
   dade4:	ea90 0f02 	teqeq	r0, r2
   dade8:	bf1f      	itttt	ne
   dadea:	ea54 0c00 	orrsne.w	ip, r4, r0
   dadee:	ea55 0c02 	orrsne.w	ip, r5, r2
   dadf2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dadf6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dadfa:	f000 80e2 	beq.w	dafc2 <__adddf3+0x1ee>
   dadfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dae02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dae06:	bfb8      	it	lt
   dae08:	426d      	neglt	r5, r5
   dae0a:	dd0c      	ble.n	dae26 <__adddf3+0x52>
   dae0c:	442c      	add	r4, r5
   dae0e:	ea80 0202 	eor.w	r2, r0, r2
   dae12:	ea81 0303 	eor.w	r3, r1, r3
   dae16:	ea82 0000 	eor.w	r0, r2, r0
   dae1a:	ea83 0101 	eor.w	r1, r3, r1
   dae1e:	ea80 0202 	eor.w	r2, r0, r2
   dae22:	ea81 0303 	eor.w	r3, r1, r3
   dae26:	2d36      	cmp	r5, #54	; 0x36
   dae28:	bf88      	it	hi
   dae2a:	bd30      	pophi	{r4, r5, pc}
   dae2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dae30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dae34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dae38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dae3c:	d002      	beq.n	dae44 <__adddf3+0x70>
   dae3e:	4240      	negs	r0, r0
   dae40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dae44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dae48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dae4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dae50:	d002      	beq.n	dae58 <__adddf3+0x84>
   dae52:	4252      	negs	r2, r2
   dae54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dae58:	ea94 0f05 	teq	r4, r5
   dae5c:	f000 80a7 	beq.w	dafae <__adddf3+0x1da>
   dae60:	f1a4 0401 	sub.w	r4, r4, #1
   dae64:	f1d5 0e20 	rsbs	lr, r5, #32
   dae68:	db0d      	blt.n	dae86 <__adddf3+0xb2>
   dae6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   dae6e:	fa22 f205 	lsr.w	r2, r2, r5
   dae72:	1880      	adds	r0, r0, r2
   dae74:	f141 0100 	adc.w	r1, r1, #0
   dae78:	fa03 f20e 	lsl.w	r2, r3, lr
   dae7c:	1880      	adds	r0, r0, r2
   dae7e:	fa43 f305 	asr.w	r3, r3, r5
   dae82:	4159      	adcs	r1, r3
   dae84:	e00e      	b.n	daea4 <__adddf3+0xd0>
   dae86:	f1a5 0520 	sub.w	r5, r5, #32
   dae8a:	f10e 0e20 	add.w	lr, lr, #32
   dae8e:	2a01      	cmp	r2, #1
   dae90:	fa03 fc0e 	lsl.w	ip, r3, lr
   dae94:	bf28      	it	cs
   dae96:	f04c 0c02 	orrcs.w	ip, ip, #2
   dae9a:	fa43 f305 	asr.w	r3, r3, r5
   dae9e:	18c0      	adds	r0, r0, r3
   daea0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   daea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   daea8:	d507      	bpl.n	daeba <__adddf3+0xe6>
   daeaa:	f04f 0e00 	mov.w	lr, #0
   daeae:	f1dc 0c00 	rsbs	ip, ip, #0
   daeb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   daeb6:	eb6e 0101 	sbc.w	r1, lr, r1
   daeba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   daebe:	d31b      	bcc.n	daef8 <__adddf3+0x124>
   daec0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   daec4:	d30c      	bcc.n	daee0 <__adddf3+0x10c>
   daec6:	0849      	lsrs	r1, r1, #1
   daec8:	ea5f 0030 	movs.w	r0, r0, rrx
   daecc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   daed0:	f104 0401 	add.w	r4, r4, #1
   daed4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   daed8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   daedc:	f080 809a 	bcs.w	db014 <__adddf3+0x240>
   daee0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   daee4:	bf08      	it	eq
   daee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   daeea:	f150 0000 	adcs.w	r0, r0, #0
   daeee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daef2:	ea41 0105 	orr.w	r1, r1, r5
   daef6:	bd30      	pop	{r4, r5, pc}
   daef8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   daefc:	4140      	adcs	r0, r0
   daefe:	eb41 0101 	adc.w	r1, r1, r1
   daf02:	3c01      	subs	r4, #1
   daf04:	bf28      	it	cs
   daf06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   daf0a:	d2e9      	bcs.n	daee0 <__adddf3+0x10c>
   daf0c:	f091 0f00 	teq	r1, #0
   daf10:	bf04      	itt	eq
   daf12:	4601      	moveq	r1, r0
   daf14:	2000      	moveq	r0, #0
   daf16:	fab1 f381 	clz	r3, r1
   daf1a:	bf08      	it	eq
   daf1c:	3320      	addeq	r3, #32
   daf1e:	f1a3 030b 	sub.w	r3, r3, #11
   daf22:	f1b3 0220 	subs.w	r2, r3, #32
   daf26:	da0c      	bge.n	daf42 <__adddf3+0x16e>
   daf28:	320c      	adds	r2, #12
   daf2a:	dd08      	ble.n	daf3e <__adddf3+0x16a>
   daf2c:	f102 0c14 	add.w	ip, r2, #20
   daf30:	f1c2 020c 	rsb	r2, r2, #12
   daf34:	fa01 f00c 	lsl.w	r0, r1, ip
   daf38:	fa21 f102 	lsr.w	r1, r1, r2
   daf3c:	e00c      	b.n	daf58 <__adddf3+0x184>
   daf3e:	f102 0214 	add.w	r2, r2, #20
   daf42:	bfd8      	it	le
   daf44:	f1c2 0c20 	rsble	ip, r2, #32
   daf48:	fa01 f102 	lsl.w	r1, r1, r2
   daf4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   daf50:	bfdc      	itt	le
   daf52:	ea41 010c 	orrle.w	r1, r1, ip
   daf56:	4090      	lslle	r0, r2
   daf58:	1ae4      	subs	r4, r4, r3
   daf5a:	bfa2      	ittt	ge
   daf5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   daf60:	4329      	orrge	r1, r5
   daf62:	bd30      	popge	{r4, r5, pc}
   daf64:	ea6f 0404 	mvn.w	r4, r4
   daf68:	3c1f      	subs	r4, #31
   daf6a:	da1c      	bge.n	dafa6 <__adddf3+0x1d2>
   daf6c:	340c      	adds	r4, #12
   daf6e:	dc0e      	bgt.n	daf8e <__adddf3+0x1ba>
   daf70:	f104 0414 	add.w	r4, r4, #20
   daf74:	f1c4 0220 	rsb	r2, r4, #32
   daf78:	fa20 f004 	lsr.w	r0, r0, r4
   daf7c:	fa01 f302 	lsl.w	r3, r1, r2
   daf80:	ea40 0003 	orr.w	r0, r0, r3
   daf84:	fa21 f304 	lsr.w	r3, r1, r4
   daf88:	ea45 0103 	orr.w	r1, r5, r3
   daf8c:	bd30      	pop	{r4, r5, pc}
   daf8e:	f1c4 040c 	rsb	r4, r4, #12
   daf92:	f1c4 0220 	rsb	r2, r4, #32
   daf96:	fa20 f002 	lsr.w	r0, r0, r2
   daf9a:	fa01 f304 	lsl.w	r3, r1, r4
   daf9e:	ea40 0003 	orr.w	r0, r0, r3
   dafa2:	4629      	mov	r1, r5
   dafa4:	bd30      	pop	{r4, r5, pc}
   dafa6:	fa21 f004 	lsr.w	r0, r1, r4
   dafaa:	4629      	mov	r1, r5
   dafac:	bd30      	pop	{r4, r5, pc}
   dafae:	f094 0f00 	teq	r4, #0
   dafb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dafb6:	bf06      	itte	eq
   dafb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dafbc:	3401      	addeq	r4, #1
   dafbe:	3d01      	subne	r5, #1
   dafc0:	e74e      	b.n	dae60 <__adddf3+0x8c>
   dafc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dafc6:	bf18      	it	ne
   dafc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dafcc:	d029      	beq.n	db022 <__adddf3+0x24e>
   dafce:	ea94 0f05 	teq	r4, r5
   dafd2:	bf08      	it	eq
   dafd4:	ea90 0f02 	teqeq	r0, r2
   dafd8:	d005      	beq.n	dafe6 <__adddf3+0x212>
   dafda:	ea54 0c00 	orrs.w	ip, r4, r0
   dafde:	bf04      	itt	eq
   dafe0:	4619      	moveq	r1, r3
   dafe2:	4610      	moveq	r0, r2
   dafe4:	bd30      	pop	{r4, r5, pc}
   dafe6:	ea91 0f03 	teq	r1, r3
   dafea:	bf1e      	ittt	ne
   dafec:	2100      	movne	r1, #0
   dafee:	2000      	movne	r0, #0
   daff0:	bd30      	popne	{r4, r5, pc}
   daff2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   daff6:	d105      	bne.n	db004 <__adddf3+0x230>
   daff8:	0040      	lsls	r0, r0, #1
   daffa:	4149      	adcs	r1, r1
   daffc:	bf28      	it	cs
   daffe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db002:	bd30      	pop	{r4, r5, pc}
   db004:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db008:	bf3c      	itt	cc
   db00a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db00e:	bd30      	popcc	{r4, r5, pc}
   db010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db014:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db018:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db01c:	f04f 0000 	mov.w	r0, #0
   db020:	bd30      	pop	{r4, r5, pc}
   db022:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db026:	bf1a      	itte	ne
   db028:	4619      	movne	r1, r3
   db02a:	4610      	movne	r0, r2
   db02c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db030:	bf1c      	itt	ne
   db032:	460b      	movne	r3, r1
   db034:	4602      	movne	r2, r0
   db036:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db03a:	bf06      	itte	eq
   db03c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db040:	ea91 0f03 	teqeq	r1, r3
   db044:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db048:	bd30      	pop	{r4, r5, pc}
   db04a:	bf00      	nop

000db04c <__aeabi_ui2d>:
   db04c:	f090 0f00 	teq	r0, #0
   db050:	bf04      	itt	eq
   db052:	2100      	moveq	r1, #0
   db054:	4770      	bxeq	lr
   db056:	b530      	push	{r4, r5, lr}
   db058:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db05c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db060:	f04f 0500 	mov.w	r5, #0
   db064:	f04f 0100 	mov.w	r1, #0
   db068:	e750      	b.n	daf0c <__adddf3+0x138>
   db06a:	bf00      	nop

000db06c <__aeabi_i2d>:
   db06c:	f090 0f00 	teq	r0, #0
   db070:	bf04      	itt	eq
   db072:	2100      	moveq	r1, #0
   db074:	4770      	bxeq	lr
   db076:	b530      	push	{r4, r5, lr}
   db078:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db07c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db080:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db084:	bf48      	it	mi
   db086:	4240      	negmi	r0, r0
   db088:	f04f 0100 	mov.w	r1, #0
   db08c:	e73e      	b.n	daf0c <__adddf3+0x138>
   db08e:	bf00      	nop

000db090 <__aeabi_f2d>:
   db090:	0042      	lsls	r2, r0, #1
   db092:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db096:	ea4f 0131 	mov.w	r1, r1, rrx
   db09a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db09e:	bf1f      	itttt	ne
   db0a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db0a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db0a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db0ac:	4770      	bxne	lr
   db0ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db0b2:	bf08      	it	eq
   db0b4:	4770      	bxeq	lr
   db0b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db0ba:	bf04      	itt	eq
   db0bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db0c0:	4770      	bxeq	lr
   db0c2:	b530      	push	{r4, r5, lr}
   db0c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   db0c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db0cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db0d0:	e71c      	b.n	daf0c <__adddf3+0x138>
   db0d2:	bf00      	nop

000db0d4 <__aeabi_ul2d>:
   db0d4:	ea50 0201 	orrs.w	r2, r0, r1
   db0d8:	bf08      	it	eq
   db0da:	4770      	bxeq	lr
   db0dc:	b530      	push	{r4, r5, lr}
   db0de:	f04f 0500 	mov.w	r5, #0
   db0e2:	e00a      	b.n	db0fa <__aeabi_l2d+0x16>

000db0e4 <__aeabi_l2d>:
   db0e4:	ea50 0201 	orrs.w	r2, r0, r1
   db0e8:	bf08      	it	eq
   db0ea:	4770      	bxeq	lr
   db0ec:	b530      	push	{r4, r5, lr}
   db0ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db0f2:	d502      	bpl.n	db0fa <__aeabi_l2d+0x16>
   db0f4:	4240      	negs	r0, r0
   db0f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db0fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db0fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db102:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db106:	f43f aed8 	beq.w	daeba <__adddf3+0xe6>
   db10a:	f04f 0203 	mov.w	r2, #3
   db10e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db112:	bf18      	it	ne
   db114:	3203      	addne	r2, #3
   db116:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db11a:	bf18      	it	ne
   db11c:	3203      	addne	r2, #3
   db11e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db122:	f1c2 0320 	rsb	r3, r2, #32
   db126:	fa00 fc03 	lsl.w	ip, r0, r3
   db12a:	fa20 f002 	lsr.w	r0, r0, r2
   db12e:	fa01 fe03 	lsl.w	lr, r1, r3
   db132:	ea40 000e 	orr.w	r0, r0, lr
   db136:	fa21 f102 	lsr.w	r1, r1, r2
   db13a:	4414      	add	r4, r2
   db13c:	e6bd      	b.n	daeba <__adddf3+0xe6>
   db13e:	bf00      	nop

000db140 <__aeabi_dmul>:
   db140:	b570      	push	{r4, r5, r6, lr}
   db142:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db146:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db14a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db14e:	bf1d      	ittte	ne
   db150:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db154:	ea94 0f0c 	teqne	r4, ip
   db158:	ea95 0f0c 	teqne	r5, ip
   db15c:	f000 f8de 	bleq	db31c <__aeabi_dmul+0x1dc>
   db160:	442c      	add	r4, r5
   db162:	ea81 0603 	eor.w	r6, r1, r3
   db166:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db16a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db16e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db172:	bf18      	it	ne
   db174:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db17c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db180:	d038      	beq.n	db1f4 <__aeabi_dmul+0xb4>
   db182:	fba0 ce02 	umull	ip, lr, r0, r2
   db186:	f04f 0500 	mov.w	r5, #0
   db18a:	fbe1 e502 	umlal	lr, r5, r1, r2
   db18e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db192:	fbe0 e503 	umlal	lr, r5, r0, r3
   db196:	f04f 0600 	mov.w	r6, #0
   db19a:	fbe1 5603 	umlal	r5, r6, r1, r3
   db19e:	f09c 0f00 	teq	ip, #0
   db1a2:	bf18      	it	ne
   db1a4:	f04e 0e01 	orrne.w	lr, lr, #1
   db1a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db1ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db1b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db1b4:	d204      	bcs.n	db1c0 <__aeabi_dmul+0x80>
   db1b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db1ba:	416d      	adcs	r5, r5
   db1bc:	eb46 0606 	adc.w	r6, r6, r6
   db1c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db1c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db1c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db1cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db1d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db1d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db1d8:	bf88      	it	hi
   db1da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db1de:	d81e      	bhi.n	db21e <__aeabi_dmul+0xde>
   db1e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db1e4:	bf08      	it	eq
   db1e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db1ea:	f150 0000 	adcs.w	r0, r0, #0
   db1ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db1f2:	bd70      	pop	{r4, r5, r6, pc}
   db1f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db1f8:	ea46 0101 	orr.w	r1, r6, r1
   db1fc:	ea40 0002 	orr.w	r0, r0, r2
   db200:	ea81 0103 	eor.w	r1, r1, r3
   db204:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db208:	bfc2      	ittt	gt
   db20a:	ebd4 050c 	rsbsgt	r5, r4, ip
   db20e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db212:	bd70      	popgt	{r4, r5, r6, pc}
   db214:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db218:	f04f 0e00 	mov.w	lr, #0
   db21c:	3c01      	subs	r4, #1
   db21e:	f300 80ab 	bgt.w	db378 <__aeabi_dmul+0x238>
   db222:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db226:	bfde      	ittt	le
   db228:	2000      	movle	r0, #0
   db22a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db22e:	bd70      	pople	{r4, r5, r6, pc}
   db230:	f1c4 0400 	rsb	r4, r4, #0
   db234:	3c20      	subs	r4, #32
   db236:	da35      	bge.n	db2a4 <__aeabi_dmul+0x164>
   db238:	340c      	adds	r4, #12
   db23a:	dc1b      	bgt.n	db274 <__aeabi_dmul+0x134>
   db23c:	f104 0414 	add.w	r4, r4, #20
   db240:	f1c4 0520 	rsb	r5, r4, #32
   db244:	fa00 f305 	lsl.w	r3, r0, r5
   db248:	fa20 f004 	lsr.w	r0, r0, r4
   db24c:	fa01 f205 	lsl.w	r2, r1, r5
   db250:	ea40 0002 	orr.w	r0, r0, r2
   db254:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db258:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db25c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db260:	fa21 f604 	lsr.w	r6, r1, r4
   db264:	eb42 0106 	adc.w	r1, r2, r6
   db268:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db26c:	bf08      	it	eq
   db26e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db272:	bd70      	pop	{r4, r5, r6, pc}
   db274:	f1c4 040c 	rsb	r4, r4, #12
   db278:	f1c4 0520 	rsb	r5, r4, #32
   db27c:	fa00 f304 	lsl.w	r3, r0, r4
   db280:	fa20 f005 	lsr.w	r0, r0, r5
   db284:	fa01 f204 	lsl.w	r2, r1, r4
   db288:	ea40 0002 	orr.w	r0, r0, r2
   db28c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db294:	f141 0100 	adc.w	r1, r1, #0
   db298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db29c:	bf08      	it	eq
   db29e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db2a2:	bd70      	pop	{r4, r5, r6, pc}
   db2a4:	f1c4 0520 	rsb	r5, r4, #32
   db2a8:	fa00 f205 	lsl.w	r2, r0, r5
   db2ac:	ea4e 0e02 	orr.w	lr, lr, r2
   db2b0:	fa20 f304 	lsr.w	r3, r0, r4
   db2b4:	fa01 f205 	lsl.w	r2, r1, r5
   db2b8:	ea43 0302 	orr.w	r3, r3, r2
   db2bc:	fa21 f004 	lsr.w	r0, r1, r4
   db2c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db2c4:	fa21 f204 	lsr.w	r2, r1, r4
   db2c8:	ea20 0002 	bic.w	r0, r0, r2
   db2cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db2d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db2d4:	bf08      	it	eq
   db2d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db2da:	bd70      	pop	{r4, r5, r6, pc}
   db2dc:	f094 0f00 	teq	r4, #0
   db2e0:	d10f      	bne.n	db302 <__aeabi_dmul+0x1c2>
   db2e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db2e6:	0040      	lsls	r0, r0, #1
   db2e8:	eb41 0101 	adc.w	r1, r1, r1
   db2ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db2f0:	bf08      	it	eq
   db2f2:	3c01      	subeq	r4, #1
   db2f4:	d0f7      	beq.n	db2e6 <__aeabi_dmul+0x1a6>
   db2f6:	ea41 0106 	orr.w	r1, r1, r6
   db2fa:	f095 0f00 	teq	r5, #0
   db2fe:	bf18      	it	ne
   db300:	4770      	bxne	lr
   db302:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db306:	0052      	lsls	r2, r2, #1
   db308:	eb43 0303 	adc.w	r3, r3, r3
   db30c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db310:	bf08      	it	eq
   db312:	3d01      	subeq	r5, #1
   db314:	d0f7      	beq.n	db306 <__aeabi_dmul+0x1c6>
   db316:	ea43 0306 	orr.w	r3, r3, r6
   db31a:	4770      	bx	lr
   db31c:	ea94 0f0c 	teq	r4, ip
   db320:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db324:	bf18      	it	ne
   db326:	ea95 0f0c 	teqne	r5, ip
   db32a:	d00c      	beq.n	db346 <__aeabi_dmul+0x206>
   db32c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db330:	bf18      	it	ne
   db332:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db336:	d1d1      	bne.n	db2dc <__aeabi_dmul+0x19c>
   db338:	ea81 0103 	eor.w	r1, r1, r3
   db33c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db340:	f04f 0000 	mov.w	r0, #0
   db344:	bd70      	pop	{r4, r5, r6, pc}
   db346:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db34a:	bf06      	itte	eq
   db34c:	4610      	moveq	r0, r2
   db34e:	4619      	moveq	r1, r3
   db350:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db354:	d019      	beq.n	db38a <__aeabi_dmul+0x24a>
   db356:	ea94 0f0c 	teq	r4, ip
   db35a:	d102      	bne.n	db362 <__aeabi_dmul+0x222>
   db35c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db360:	d113      	bne.n	db38a <__aeabi_dmul+0x24a>
   db362:	ea95 0f0c 	teq	r5, ip
   db366:	d105      	bne.n	db374 <__aeabi_dmul+0x234>
   db368:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db36c:	bf1c      	itt	ne
   db36e:	4610      	movne	r0, r2
   db370:	4619      	movne	r1, r3
   db372:	d10a      	bne.n	db38a <__aeabi_dmul+0x24a>
   db374:	ea81 0103 	eor.w	r1, r1, r3
   db378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db37c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db380:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db384:	f04f 0000 	mov.w	r0, #0
   db388:	bd70      	pop	{r4, r5, r6, pc}
   db38a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db38e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db392:	bd70      	pop	{r4, r5, r6, pc}

000db394 <__aeabi_ddiv>:
   db394:	b570      	push	{r4, r5, r6, lr}
   db396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db39a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db39e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db3a2:	bf1d      	ittte	ne
   db3a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db3a8:	ea94 0f0c 	teqne	r4, ip
   db3ac:	ea95 0f0c 	teqne	r5, ip
   db3b0:	f000 f8a7 	bleq	db502 <__aeabi_ddiv+0x16e>
   db3b4:	eba4 0405 	sub.w	r4, r4, r5
   db3b8:	ea81 0e03 	eor.w	lr, r1, r3
   db3bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db3c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db3c4:	f000 8088 	beq.w	db4d8 <__aeabi_ddiv+0x144>
   db3c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db3cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db3d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db3d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db3d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db3dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db3e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db3e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db3e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db3ec:	429d      	cmp	r5, r3
   db3ee:	bf08      	it	eq
   db3f0:	4296      	cmpeq	r6, r2
   db3f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db3f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db3fa:	d202      	bcs.n	db402 <__aeabi_ddiv+0x6e>
   db3fc:	085b      	lsrs	r3, r3, #1
   db3fe:	ea4f 0232 	mov.w	r2, r2, rrx
   db402:	1ab6      	subs	r6, r6, r2
   db404:	eb65 0503 	sbc.w	r5, r5, r3
   db408:	085b      	lsrs	r3, r3, #1
   db40a:	ea4f 0232 	mov.w	r2, r2, rrx
   db40e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db412:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db416:	ebb6 0e02 	subs.w	lr, r6, r2
   db41a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db41e:	bf22      	ittt	cs
   db420:	1ab6      	subcs	r6, r6, r2
   db422:	4675      	movcs	r5, lr
   db424:	ea40 000c 	orrcs.w	r0, r0, ip
   db428:	085b      	lsrs	r3, r3, #1
   db42a:	ea4f 0232 	mov.w	r2, r2, rrx
   db42e:	ebb6 0e02 	subs.w	lr, r6, r2
   db432:	eb75 0e03 	sbcs.w	lr, r5, r3
   db436:	bf22      	ittt	cs
   db438:	1ab6      	subcs	r6, r6, r2
   db43a:	4675      	movcs	r5, lr
   db43c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db440:	085b      	lsrs	r3, r3, #1
   db442:	ea4f 0232 	mov.w	r2, r2, rrx
   db446:	ebb6 0e02 	subs.w	lr, r6, r2
   db44a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db44e:	bf22      	ittt	cs
   db450:	1ab6      	subcs	r6, r6, r2
   db452:	4675      	movcs	r5, lr
   db454:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db458:	085b      	lsrs	r3, r3, #1
   db45a:	ea4f 0232 	mov.w	r2, r2, rrx
   db45e:	ebb6 0e02 	subs.w	lr, r6, r2
   db462:	eb75 0e03 	sbcs.w	lr, r5, r3
   db466:	bf22      	ittt	cs
   db468:	1ab6      	subcs	r6, r6, r2
   db46a:	4675      	movcs	r5, lr
   db46c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db470:	ea55 0e06 	orrs.w	lr, r5, r6
   db474:	d018      	beq.n	db4a8 <__aeabi_ddiv+0x114>
   db476:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db47a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db47e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db482:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db486:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db48a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db48e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db492:	d1c0      	bne.n	db416 <__aeabi_ddiv+0x82>
   db494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db498:	d10b      	bne.n	db4b2 <__aeabi_ddiv+0x11e>
   db49a:	ea41 0100 	orr.w	r1, r1, r0
   db49e:	f04f 0000 	mov.w	r0, #0
   db4a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db4a6:	e7b6      	b.n	db416 <__aeabi_ddiv+0x82>
   db4a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db4ac:	bf04      	itt	eq
   db4ae:	4301      	orreq	r1, r0
   db4b0:	2000      	moveq	r0, #0
   db4b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db4b6:	bf88      	it	hi
   db4b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db4bc:	f63f aeaf 	bhi.w	db21e <__aeabi_dmul+0xde>
   db4c0:	ebb5 0c03 	subs.w	ip, r5, r3
   db4c4:	bf04      	itt	eq
   db4c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   db4ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db4ce:	f150 0000 	adcs.w	r0, r0, #0
   db4d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db4d6:	bd70      	pop	{r4, r5, r6, pc}
   db4d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db4dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db4e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db4e4:	bfc2      	ittt	gt
   db4e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   db4ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db4ee:	bd70      	popgt	{r4, r5, r6, pc}
   db4f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db4f4:	f04f 0e00 	mov.w	lr, #0
   db4f8:	3c01      	subs	r4, #1
   db4fa:	e690      	b.n	db21e <__aeabi_dmul+0xde>
   db4fc:	ea45 0e06 	orr.w	lr, r5, r6
   db500:	e68d      	b.n	db21e <__aeabi_dmul+0xde>
   db502:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db506:	ea94 0f0c 	teq	r4, ip
   db50a:	bf08      	it	eq
   db50c:	ea95 0f0c 	teqeq	r5, ip
   db510:	f43f af3b 	beq.w	db38a <__aeabi_dmul+0x24a>
   db514:	ea94 0f0c 	teq	r4, ip
   db518:	d10a      	bne.n	db530 <__aeabi_ddiv+0x19c>
   db51a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db51e:	f47f af34 	bne.w	db38a <__aeabi_dmul+0x24a>
   db522:	ea95 0f0c 	teq	r5, ip
   db526:	f47f af25 	bne.w	db374 <__aeabi_dmul+0x234>
   db52a:	4610      	mov	r0, r2
   db52c:	4619      	mov	r1, r3
   db52e:	e72c      	b.n	db38a <__aeabi_dmul+0x24a>
   db530:	ea95 0f0c 	teq	r5, ip
   db534:	d106      	bne.n	db544 <__aeabi_ddiv+0x1b0>
   db536:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db53a:	f43f aefd 	beq.w	db338 <__aeabi_dmul+0x1f8>
   db53e:	4610      	mov	r0, r2
   db540:	4619      	mov	r1, r3
   db542:	e722      	b.n	db38a <__aeabi_dmul+0x24a>
   db544:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db548:	bf18      	it	ne
   db54a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db54e:	f47f aec5 	bne.w	db2dc <__aeabi_dmul+0x19c>
   db552:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db556:	f47f af0d 	bne.w	db374 <__aeabi_dmul+0x234>
   db55a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db55e:	f47f aeeb 	bne.w	db338 <__aeabi_dmul+0x1f8>
   db562:	e712      	b.n	db38a <__aeabi_dmul+0x24a>

000db564 <__gedf2>:
   db564:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db568:	e006      	b.n	db578 <__cmpdf2+0x4>
   db56a:	bf00      	nop

000db56c <__ledf2>:
   db56c:	f04f 0c01 	mov.w	ip, #1
   db570:	e002      	b.n	db578 <__cmpdf2+0x4>
   db572:	bf00      	nop

000db574 <__cmpdf2>:
   db574:	f04f 0c01 	mov.w	ip, #1
   db578:	f84d cd04 	str.w	ip, [sp, #-4]!
   db57c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db588:	bf18      	it	ne
   db58a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db58e:	d01b      	beq.n	db5c8 <__cmpdf2+0x54>
   db590:	b001      	add	sp, #4
   db592:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db596:	bf0c      	ite	eq
   db598:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db59c:	ea91 0f03 	teqne	r1, r3
   db5a0:	bf02      	ittt	eq
   db5a2:	ea90 0f02 	teqeq	r0, r2
   db5a6:	2000      	moveq	r0, #0
   db5a8:	4770      	bxeq	lr
   db5aa:	f110 0f00 	cmn.w	r0, #0
   db5ae:	ea91 0f03 	teq	r1, r3
   db5b2:	bf58      	it	pl
   db5b4:	4299      	cmppl	r1, r3
   db5b6:	bf08      	it	eq
   db5b8:	4290      	cmpeq	r0, r2
   db5ba:	bf2c      	ite	cs
   db5bc:	17d8      	asrcs	r0, r3, #31
   db5be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db5c2:	f040 0001 	orr.w	r0, r0, #1
   db5c6:	4770      	bx	lr
   db5c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db5cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db5d0:	d102      	bne.n	db5d8 <__cmpdf2+0x64>
   db5d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db5d6:	d107      	bne.n	db5e8 <__cmpdf2+0x74>
   db5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db5dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db5e0:	d1d6      	bne.n	db590 <__cmpdf2+0x1c>
   db5e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db5e6:	d0d3      	beq.n	db590 <__cmpdf2+0x1c>
   db5e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   db5ec:	4770      	bx	lr
   db5ee:	bf00      	nop

000db5f0 <__aeabi_cdrcmple>:
   db5f0:	4684      	mov	ip, r0
   db5f2:	4610      	mov	r0, r2
   db5f4:	4662      	mov	r2, ip
   db5f6:	468c      	mov	ip, r1
   db5f8:	4619      	mov	r1, r3
   db5fa:	4663      	mov	r3, ip
   db5fc:	e000      	b.n	db600 <__aeabi_cdcmpeq>
   db5fe:	bf00      	nop

000db600 <__aeabi_cdcmpeq>:
   db600:	b501      	push	{r0, lr}
   db602:	f7ff ffb7 	bl	db574 <__cmpdf2>
   db606:	2800      	cmp	r0, #0
   db608:	bf48      	it	mi
   db60a:	f110 0f00 	cmnmi.w	r0, #0
   db60e:	bd01      	pop	{r0, pc}

000db610 <__aeabi_dcmpeq>:
   db610:	f84d ed08 	str.w	lr, [sp, #-8]!
   db614:	f7ff fff4 	bl	db600 <__aeabi_cdcmpeq>
   db618:	bf0c      	ite	eq
   db61a:	2001      	moveq	r0, #1
   db61c:	2000      	movne	r0, #0
   db61e:	f85d fb08 	ldr.w	pc, [sp], #8
   db622:	bf00      	nop

000db624 <__aeabi_dcmplt>:
   db624:	f84d ed08 	str.w	lr, [sp, #-8]!
   db628:	f7ff ffea 	bl	db600 <__aeabi_cdcmpeq>
   db62c:	bf34      	ite	cc
   db62e:	2001      	movcc	r0, #1
   db630:	2000      	movcs	r0, #0
   db632:	f85d fb08 	ldr.w	pc, [sp], #8
   db636:	bf00      	nop

000db638 <__aeabi_dcmple>:
   db638:	f84d ed08 	str.w	lr, [sp, #-8]!
   db63c:	f7ff ffe0 	bl	db600 <__aeabi_cdcmpeq>
   db640:	bf94      	ite	ls
   db642:	2001      	movls	r0, #1
   db644:	2000      	movhi	r0, #0
   db646:	f85d fb08 	ldr.w	pc, [sp], #8
   db64a:	bf00      	nop

000db64c <__aeabi_dcmpge>:
   db64c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db650:	f7ff ffce 	bl	db5f0 <__aeabi_cdrcmple>
   db654:	bf94      	ite	ls
   db656:	2001      	movls	r0, #1
   db658:	2000      	movhi	r0, #0
   db65a:	f85d fb08 	ldr.w	pc, [sp], #8
   db65e:	bf00      	nop

000db660 <__aeabi_dcmpgt>:
   db660:	f84d ed08 	str.w	lr, [sp, #-8]!
   db664:	f7ff ffc4 	bl	db5f0 <__aeabi_cdrcmple>
   db668:	bf34      	ite	cc
   db66a:	2001      	movcc	r0, #1
   db66c:	2000      	movcs	r0, #0
   db66e:	f85d fb08 	ldr.w	pc, [sp], #8
   db672:	bf00      	nop

000db674 <__aeabi_dcmpun>:
   db674:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db678:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db67c:	d102      	bne.n	db684 <__aeabi_dcmpun+0x10>
   db67e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db682:	d10a      	bne.n	db69a <__aeabi_dcmpun+0x26>
   db684:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db68c:	d102      	bne.n	db694 <__aeabi_dcmpun+0x20>
   db68e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db692:	d102      	bne.n	db69a <__aeabi_dcmpun+0x26>
   db694:	f04f 0000 	mov.w	r0, #0
   db698:	4770      	bx	lr
   db69a:	f04f 0001 	mov.w	r0, #1
   db69e:	4770      	bx	lr

000db6a0 <__aeabi_d2uiz>:
   db6a0:	004a      	lsls	r2, r1, #1
   db6a2:	d211      	bcs.n	db6c8 <__aeabi_d2uiz+0x28>
   db6a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db6a8:	d211      	bcs.n	db6ce <__aeabi_d2uiz+0x2e>
   db6aa:	d50d      	bpl.n	db6c8 <__aeabi_d2uiz+0x28>
   db6ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db6b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db6b4:	d40e      	bmi.n	db6d4 <__aeabi_d2uiz+0x34>
   db6b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db6ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db6be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db6c2:	fa23 f002 	lsr.w	r0, r3, r2
   db6c6:	4770      	bx	lr
   db6c8:	f04f 0000 	mov.w	r0, #0
   db6cc:	4770      	bx	lr
   db6ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db6d2:	d102      	bne.n	db6da <__aeabi_d2uiz+0x3a>
   db6d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db6d8:	4770      	bx	lr
   db6da:	f04f 0000 	mov.w	r0, #0
   db6de:	4770      	bx	lr

000db6e0 <__aeabi_d2f>:
   db6e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db6e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db6e8:	bf24      	itt	cs
   db6ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db6ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db6f2:	d90d      	bls.n	db710 <__aeabi_d2f+0x30>
   db6f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db6f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db6fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db700:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db704:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db708:	bf08      	it	eq
   db70a:	f020 0001 	biceq.w	r0, r0, #1
   db70e:	4770      	bx	lr
   db710:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db714:	d121      	bne.n	db75a <__aeabi_d2f+0x7a>
   db716:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db71a:	bfbc      	itt	lt
   db71c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db720:	4770      	bxlt	lr
   db722:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db726:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db72a:	f1c2 0218 	rsb	r2, r2, #24
   db72e:	f1c2 0c20 	rsb	ip, r2, #32
   db732:	fa10 f30c 	lsls.w	r3, r0, ip
   db736:	fa20 f002 	lsr.w	r0, r0, r2
   db73a:	bf18      	it	ne
   db73c:	f040 0001 	orrne.w	r0, r0, #1
   db740:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db744:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db748:	fa03 fc0c 	lsl.w	ip, r3, ip
   db74c:	ea40 000c 	orr.w	r0, r0, ip
   db750:	fa23 f302 	lsr.w	r3, r3, r2
   db754:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db758:	e7cc      	b.n	db6f4 <__aeabi_d2f+0x14>
   db75a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db75e:	d107      	bne.n	db770 <__aeabi_d2f+0x90>
   db760:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db764:	bf1e      	ittt	ne
   db766:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db76a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db76e:	4770      	bxne	lr
   db770:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db774:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db77c:	4770      	bx	lr
   db77e:	bf00      	nop

000db780 <__aeabi_d2ulz>:
   db780:	b5d0      	push	{r4, r6, r7, lr}
   db782:	4b0c      	ldr	r3, [pc, #48]	; (db7b4 <__aeabi_d2ulz+0x34>)
   db784:	2200      	movs	r2, #0
   db786:	4606      	mov	r6, r0
   db788:	460f      	mov	r7, r1
   db78a:	f7ff fcd9 	bl	db140 <__aeabi_dmul>
   db78e:	f7ff ff87 	bl	db6a0 <__aeabi_d2uiz>
   db792:	4604      	mov	r4, r0
   db794:	f7ff fc5a 	bl	db04c <__aeabi_ui2d>
   db798:	4b07      	ldr	r3, [pc, #28]	; (db7b8 <__aeabi_d2ulz+0x38>)
   db79a:	2200      	movs	r2, #0
   db79c:	f7ff fcd0 	bl	db140 <__aeabi_dmul>
   db7a0:	4602      	mov	r2, r0
   db7a2:	460b      	mov	r3, r1
   db7a4:	4630      	mov	r0, r6
   db7a6:	4639      	mov	r1, r7
   db7a8:	f7ff fb12 	bl	dadd0 <__aeabi_dsub>
   db7ac:	f7ff ff78 	bl	db6a0 <__aeabi_d2uiz>
   db7b0:	4621      	mov	r1, r4
   db7b2:	bdd0      	pop	{r4, r6, r7, pc}
   db7b4:	3df00000 	.word	0x3df00000
   db7b8:	41f00000 	.word	0x41f00000

000db7bc <asctime_r>:
   db7bc:	b510      	push	{r4, lr}
   db7be:	460c      	mov	r4, r1
   db7c0:	6941      	ldr	r1, [r0, #20]
   db7c2:	6903      	ldr	r3, [r0, #16]
   db7c4:	6982      	ldr	r2, [r0, #24]
   db7c6:	b086      	sub	sp, #24
   db7c8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db7cc:	9104      	str	r1, [sp, #16]
   db7ce:	6801      	ldr	r1, [r0, #0]
   db7d0:	9103      	str	r1, [sp, #12]
   db7d2:	6841      	ldr	r1, [r0, #4]
   db7d4:	9102      	str	r1, [sp, #8]
   db7d6:	6881      	ldr	r1, [r0, #8]
   db7d8:	9101      	str	r1, [sp, #4]
   db7da:	68c1      	ldr	r1, [r0, #12]
   db7dc:	9100      	str	r1, [sp, #0]
   db7de:	4907      	ldr	r1, [pc, #28]	; (db7fc <asctime_r+0x40>)
   db7e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db7e4:	440b      	add	r3, r1
   db7e6:	4906      	ldr	r1, [pc, #24]	; (db800 <asctime_r+0x44>)
   db7e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db7ec:	440a      	add	r2, r1
   db7ee:	4620      	mov	r0, r4
   db7f0:	4904      	ldr	r1, [pc, #16]	; (db804 <asctime_r+0x48>)
   db7f2:	f7fd faaf 	bl	d8d54 <siprintf>
   db7f6:	4620      	mov	r0, r4
   db7f8:	b006      	add	sp, #24
   db7fa:	bd10      	pop	{r4, pc}
   db7fc:	000de60a 	.word	0x000de60a
   db800:	000de5f5 	.word	0x000de5f5
   db804:	000de5d5 	.word	0x000de5d5

000db808 <atof>:
   db808:	2100      	movs	r1, #0
   db80a:	f000 befb 	b.w	dc604 <strtod>

000db80e <atoi>:
   db80e:	220a      	movs	r2, #10
   db810:	2100      	movs	r1, #0
   db812:	f000 bf7d 	b.w	dc710 <strtol>
	...

000db818 <__cxa_atexit>:
   db818:	b510      	push	{r4, lr}
   db81a:	4c05      	ldr	r4, [pc, #20]	; (db830 <__cxa_atexit+0x18>)
   db81c:	4613      	mov	r3, r2
   db81e:	b12c      	cbz	r4, db82c <__cxa_atexit+0x14>
   db820:	460a      	mov	r2, r1
   db822:	4601      	mov	r1, r0
   db824:	2002      	movs	r0, #2
   db826:	f3af 8000 	nop.w
   db82a:	bd10      	pop	{r4, pc}
   db82c:	4620      	mov	r0, r4
   db82e:	e7fc      	b.n	db82a <__cxa_atexit+0x12>
   db830:	00000000 	.word	0x00000000

000db834 <gmtime>:
   db834:	b538      	push	{r3, r4, r5, lr}
   db836:	4b07      	ldr	r3, [pc, #28]	; (db854 <gmtime+0x20>)
   db838:	681d      	ldr	r5, [r3, #0]
   db83a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   db83c:	4604      	mov	r4, r0
   db83e:	b91b      	cbnz	r3, db848 <gmtime+0x14>
   db840:	2024      	movs	r0, #36	; 0x24
   db842:	f7fd fa6f 	bl	d8d24 <malloc>
   db846:	63e8      	str	r0, [r5, #60]	; 0x3c
   db848:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   db84a:	4620      	mov	r0, r4
   db84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db850:	f7fd bac8 	b.w	d8de4 <gmtime_r>
   db854:	2003dd18 	.word	0x2003dd18

000db858 <memcpy>:
   db858:	440a      	add	r2, r1
   db85a:	4291      	cmp	r1, r2
   db85c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db860:	d100      	bne.n	db864 <memcpy+0xc>
   db862:	4770      	bx	lr
   db864:	b510      	push	{r4, lr}
   db866:	f811 4b01 	ldrb.w	r4, [r1], #1
   db86a:	f803 4f01 	strb.w	r4, [r3, #1]!
   db86e:	4291      	cmp	r1, r2
   db870:	d1f9      	bne.n	db866 <memcpy+0xe>
   db872:	bd10      	pop	{r4, pc}

000db874 <memmove>:
   db874:	4288      	cmp	r0, r1
   db876:	b510      	push	{r4, lr}
   db878:	eb01 0402 	add.w	r4, r1, r2
   db87c:	d902      	bls.n	db884 <memmove+0x10>
   db87e:	4284      	cmp	r4, r0
   db880:	4623      	mov	r3, r4
   db882:	d807      	bhi.n	db894 <memmove+0x20>
   db884:	1e43      	subs	r3, r0, #1
   db886:	42a1      	cmp	r1, r4
   db888:	d008      	beq.n	db89c <memmove+0x28>
   db88a:	f811 2b01 	ldrb.w	r2, [r1], #1
   db88e:	f803 2f01 	strb.w	r2, [r3, #1]!
   db892:	e7f8      	b.n	db886 <memmove+0x12>
   db894:	4402      	add	r2, r0
   db896:	4601      	mov	r1, r0
   db898:	428a      	cmp	r2, r1
   db89a:	d100      	bne.n	db89e <memmove+0x2a>
   db89c:	bd10      	pop	{r4, pc}
   db89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db8a6:	e7f7      	b.n	db898 <memmove+0x24>

000db8a8 <memset>:
   db8a8:	4402      	add	r2, r0
   db8aa:	4603      	mov	r3, r0
   db8ac:	4293      	cmp	r3, r2
   db8ae:	d100      	bne.n	db8b2 <memset+0xa>
   db8b0:	4770      	bx	lr
   db8b2:	f803 1b01 	strb.w	r1, [r3], #1
   db8b6:	e7f9      	b.n	db8ac <memset+0x4>

000db8b8 <srand>:
   db8b8:	b538      	push	{r3, r4, r5, lr}
   db8ba:	4b0d      	ldr	r3, [pc, #52]	; (db8f0 <srand+0x38>)
   db8bc:	681d      	ldr	r5, [r3, #0]
   db8be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db8c0:	4604      	mov	r4, r0
   db8c2:	b97b      	cbnz	r3, db8e4 <srand+0x2c>
   db8c4:	2018      	movs	r0, #24
   db8c6:	f7fd fa2d 	bl	d8d24 <malloc>
   db8ca:	4a0a      	ldr	r2, [pc, #40]	; (db8f4 <srand+0x3c>)
   db8cc:	4b0a      	ldr	r3, [pc, #40]	; (db8f8 <srand+0x40>)
   db8ce:	63a8      	str	r0, [r5, #56]	; 0x38
   db8d0:	e9c0 2300 	strd	r2, r3, [r0]
   db8d4:	4b09      	ldr	r3, [pc, #36]	; (db8fc <srand+0x44>)
   db8d6:	6083      	str	r3, [r0, #8]
   db8d8:	230b      	movs	r3, #11
   db8da:	8183      	strh	r3, [r0, #12]
   db8dc:	2201      	movs	r2, #1
   db8de:	2300      	movs	r3, #0
   db8e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db8e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db8e6:	2200      	movs	r2, #0
   db8e8:	611c      	str	r4, [r3, #16]
   db8ea:	615a      	str	r2, [r3, #20]
   db8ec:	bd38      	pop	{r3, r4, r5, pc}
   db8ee:	bf00      	nop
   db8f0:	2003dd18 	.word	0x2003dd18
   db8f4:	abcd330e 	.word	0xabcd330e
   db8f8:	e66d1234 	.word	0xe66d1234
   db8fc:	0005deec 	.word	0x0005deec

000db900 <strcmp>:
   db900:	f810 2b01 	ldrb.w	r2, [r0], #1
   db904:	f811 3b01 	ldrb.w	r3, [r1], #1
   db908:	2a01      	cmp	r2, #1
   db90a:	bf28      	it	cs
   db90c:	429a      	cmpcs	r2, r3
   db90e:	d0f7      	beq.n	db900 <strcmp>
   db910:	1ad0      	subs	r0, r2, r3
   db912:	4770      	bx	lr

000db914 <strcpy>:
   db914:	4603      	mov	r3, r0
   db916:	f811 2b01 	ldrb.w	r2, [r1], #1
   db91a:	f803 2b01 	strb.w	r2, [r3], #1
   db91e:	2a00      	cmp	r2, #0
   db920:	d1f9      	bne.n	db916 <strcpy+0x2>
   db922:	4770      	bx	lr

000db924 <strdup>:
   db924:	4b02      	ldr	r3, [pc, #8]	; (db930 <strdup+0xc>)
   db926:	4601      	mov	r1, r0
   db928:	6818      	ldr	r0, [r3, #0]
   db92a:	f000 b803 	b.w	db934 <_strdup_r>
   db92e:	bf00      	nop
   db930:	2003dd18 	.word	0x2003dd18

000db934 <_strdup_r>:
   db934:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db936:	4604      	mov	r4, r0
   db938:	4608      	mov	r0, r1
   db93a:	460d      	mov	r5, r1
   db93c:	f000 f80f 	bl	db95e <strlen>
   db940:	1c42      	adds	r2, r0, #1
   db942:	4611      	mov	r1, r2
   db944:	4620      	mov	r0, r4
   db946:	9201      	str	r2, [sp, #4]
   db948:	f7fd fa24 	bl	d8d94 <_malloc_r>
   db94c:	4604      	mov	r4, r0
   db94e:	b118      	cbz	r0, db958 <_strdup_r+0x24>
   db950:	9a01      	ldr	r2, [sp, #4]
   db952:	4629      	mov	r1, r5
   db954:	f7ff ff80 	bl	db858 <memcpy>
   db958:	4620      	mov	r0, r4
   db95a:	b003      	add	sp, #12
   db95c:	bd30      	pop	{r4, r5, pc}

000db95e <strlen>:
   db95e:	4603      	mov	r3, r0
   db960:	f813 2b01 	ldrb.w	r2, [r3], #1
   db964:	2a00      	cmp	r2, #0
   db966:	d1fb      	bne.n	db960 <strlen+0x2>
   db968:	1a18      	subs	r0, r3, r0
   db96a:	3801      	subs	r0, #1
   db96c:	4770      	bx	lr

000db96e <strncmp>:
   db96e:	b510      	push	{r4, lr}
   db970:	b16a      	cbz	r2, db98e <strncmp+0x20>
   db972:	3901      	subs	r1, #1
   db974:	1884      	adds	r4, r0, r2
   db976:	f810 3b01 	ldrb.w	r3, [r0], #1
   db97a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db97e:	4293      	cmp	r3, r2
   db980:	d103      	bne.n	db98a <strncmp+0x1c>
   db982:	42a0      	cmp	r0, r4
   db984:	d001      	beq.n	db98a <strncmp+0x1c>
   db986:	2b00      	cmp	r3, #0
   db988:	d1f5      	bne.n	db976 <strncmp+0x8>
   db98a:	1a98      	subs	r0, r3, r2
   db98c:	bd10      	pop	{r4, pc}
   db98e:	4610      	mov	r0, r2
   db990:	e7fc      	b.n	db98c <strncmp+0x1e>

000db992 <strncpy>:
   db992:	b510      	push	{r4, lr}
   db994:	3901      	subs	r1, #1
   db996:	4603      	mov	r3, r0
   db998:	b132      	cbz	r2, db9a8 <strncpy+0x16>
   db99a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db99e:	f803 4b01 	strb.w	r4, [r3], #1
   db9a2:	3a01      	subs	r2, #1
   db9a4:	2c00      	cmp	r4, #0
   db9a6:	d1f7      	bne.n	db998 <strncpy+0x6>
   db9a8:	441a      	add	r2, r3
   db9aa:	2100      	movs	r1, #0
   db9ac:	4293      	cmp	r3, r2
   db9ae:	d100      	bne.n	db9b2 <strncpy+0x20>
   db9b0:	bd10      	pop	{r4, pc}
   db9b2:	f803 1b01 	strb.w	r1, [r3], #1
   db9b6:	e7f9      	b.n	db9ac <strncpy+0x1a>

000db9b8 <sulp>:
   db9b8:	b570      	push	{r4, r5, r6, lr}
   db9ba:	4604      	mov	r4, r0
   db9bc:	460d      	mov	r5, r1
   db9be:	ec45 4b10 	vmov	d0, r4, r5
   db9c2:	4616      	mov	r6, r2
   db9c4:	f001 fd1a 	bl	dd3fc <__ulp>
   db9c8:	ec51 0b10 	vmov	r0, r1, d0
   db9cc:	b17e      	cbz	r6, db9ee <sulp+0x36>
   db9ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db9d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db9d6:	2b00      	cmp	r3, #0
   db9d8:	dd09      	ble.n	db9ee <sulp+0x36>
   db9da:	051b      	lsls	r3, r3, #20
   db9dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db9e0:	2400      	movs	r4, #0
   db9e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db9e6:	4622      	mov	r2, r4
   db9e8:	462b      	mov	r3, r5
   db9ea:	f7ff fba9 	bl	db140 <__aeabi_dmul>
   db9ee:	bd70      	pop	{r4, r5, r6, pc}

000db9f0 <_strtod_l>:
   db9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db9f4:	b0a3      	sub	sp, #140	; 0x8c
   db9f6:	461f      	mov	r7, r3
   db9f8:	2300      	movs	r3, #0
   db9fa:	931e      	str	r3, [sp, #120]	; 0x78
   db9fc:	4ba4      	ldr	r3, [pc, #656]	; (dbc90 <_strtod_l+0x2a0>)
   db9fe:	9219      	str	r2, [sp, #100]	; 0x64
   dba00:	681b      	ldr	r3, [r3, #0]
   dba02:	9307      	str	r3, [sp, #28]
   dba04:	4604      	mov	r4, r0
   dba06:	4618      	mov	r0, r3
   dba08:	4688      	mov	r8, r1
   dba0a:	f7ff ffa8 	bl	db95e <strlen>
   dba0e:	f04f 0a00 	mov.w	sl, #0
   dba12:	4605      	mov	r5, r0
   dba14:	f04f 0b00 	mov.w	fp, #0
   dba18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dba1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba1e:	781a      	ldrb	r2, [r3, #0]
   dba20:	2a2b      	cmp	r2, #43	; 0x2b
   dba22:	d04c      	beq.n	dbabe <_strtod_l+0xce>
   dba24:	d839      	bhi.n	dba9a <_strtod_l+0xaa>
   dba26:	2a0d      	cmp	r2, #13
   dba28:	d832      	bhi.n	dba90 <_strtod_l+0xa0>
   dba2a:	2a08      	cmp	r2, #8
   dba2c:	d832      	bhi.n	dba94 <_strtod_l+0xa4>
   dba2e:	2a00      	cmp	r2, #0
   dba30:	d03c      	beq.n	dbaac <_strtod_l+0xbc>
   dba32:	2300      	movs	r3, #0
   dba34:	930e      	str	r3, [sp, #56]	; 0x38
   dba36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dba38:	7833      	ldrb	r3, [r6, #0]
   dba3a:	2b30      	cmp	r3, #48	; 0x30
   dba3c:	f040 80b4 	bne.w	dbba8 <_strtod_l+0x1b8>
   dba40:	7873      	ldrb	r3, [r6, #1]
   dba42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dba46:	2b58      	cmp	r3, #88	; 0x58
   dba48:	d16c      	bne.n	dbb24 <_strtod_l+0x134>
   dba4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dba4c:	9301      	str	r3, [sp, #4]
   dba4e:	ab1e      	add	r3, sp, #120	; 0x78
   dba50:	9702      	str	r7, [sp, #8]
   dba52:	9300      	str	r3, [sp, #0]
   dba54:	4a8f      	ldr	r2, [pc, #572]	; (dbc94 <_strtod_l+0x2a4>)
   dba56:	ab1f      	add	r3, sp, #124	; 0x7c
   dba58:	a91d      	add	r1, sp, #116	; 0x74
   dba5a:	4620      	mov	r0, r4
   dba5c:	f000 feca 	bl	dc7f4 <__gethex>
   dba60:	f010 0707 	ands.w	r7, r0, #7
   dba64:	4605      	mov	r5, r0
   dba66:	d005      	beq.n	dba74 <_strtod_l+0x84>
   dba68:	2f06      	cmp	r7, #6
   dba6a:	d12a      	bne.n	dbac2 <_strtod_l+0xd2>
   dba6c:	3601      	adds	r6, #1
   dba6e:	2300      	movs	r3, #0
   dba70:	961d      	str	r6, [sp, #116]	; 0x74
   dba72:	930e      	str	r3, [sp, #56]	; 0x38
   dba74:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dba76:	2b00      	cmp	r3, #0
   dba78:	f040 8596 	bne.w	dc5a8 <_strtod_l+0xbb8>
   dba7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dba7e:	b1db      	cbz	r3, dbab8 <_strtod_l+0xc8>
   dba80:	4652      	mov	r2, sl
   dba82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dba86:	ec43 2b10 	vmov	d0, r2, r3
   dba8a:	b023      	add	sp, #140	; 0x8c
   dba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba90:	2a20      	cmp	r2, #32
   dba92:	d1ce      	bne.n	dba32 <_strtod_l+0x42>
   dba94:	3301      	adds	r3, #1
   dba96:	931d      	str	r3, [sp, #116]	; 0x74
   dba98:	e7c0      	b.n	dba1c <_strtod_l+0x2c>
   dba9a:	2a2d      	cmp	r2, #45	; 0x2d
   dba9c:	d1c9      	bne.n	dba32 <_strtod_l+0x42>
   dba9e:	2201      	movs	r2, #1
   dbaa0:	920e      	str	r2, [sp, #56]	; 0x38
   dbaa2:	1c5a      	adds	r2, r3, #1
   dbaa4:	921d      	str	r2, [sp, #116]	; 0x74
   dbaa6:	785b      	ldrb	r3, [r3, #1]
   dbaa8:	2b00      	cmp	r3, #0
   dbaaa:	d1c4      	bne.n	dba36 <_strtod_l+0x46>
   dbaac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbaae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbab2:	2b00      	cmp	r3, #0
   dbab4:	f040 8576 	bne.w	dc5a4 <_strtod_l+0xbb4>
   dbab8:	4652      	mov	r2, sl
   dbaba:	465b      	mov	r3, fp
   dbabc:	e7e3      	b.n	dba86 <_strtod_l+0x96>
   dbabe:	2200      	movs	r2, #0
   dbac0:	e7ee      	b.n	dbaa0 <_strtod_l+0xb0>
   dbac2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbac4:	b13a      	cbz	r2, dbad6 <_strtod_l+0xe6>
   dbac6:	2135      	movs	r1, #53	; 0x35
   dbac8:	a820      	add	r0, sp, #128	; 0x80
   dbaca:	f001 fd96 	bl	dd5fa <__copybits>
   dbace:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbad0:	4620      	mov	r0, r4
   dbad2:	f001 f9cb 	bl	dce6c <_Bfree>
   dbad6:	3f01      	subs	r7, #1
   dbad8:	2f05      	cmp	r7, #5
   dbada:	d807      	bhi.n	dbaec <_strtod_l+0xfc>
   dbadc:	e8df f007 	tbb	[pc, r7]
   dbae0:	1d180b0e 	.word	0x1d180b0e
   dbae4:	030e      	.short	0x030e
   dbae6:	f04f 0b00 	mov.w	fp, #0
   dbaea:	46da      	mov	sl, fp
   dbaec:	0728      	lsls	r0, r5, #28
   dbaee:	d5c1      	bpl.n	dba74 <_strtod_l+0x84>
   dbaf0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dbaf4:	e7be      	b.n	dba74 <_strtod_l+0x84>
   dbaf6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dbafa:	e7f7      	b.n	dbaec <_strtod_l+0xfc>
   dbafc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dbb00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dbb02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dbb06:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dbb0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dbb0e:	e7ed      	b.n	dbaec <_strtod_l+0xfc>
   dbb10:	f8df b184 	ldr.w	fp, [pc, #388]	; dbc98 <_strtod_l+0x2a8>
   dbb14:	f04f 0a00 	mov.w	sl, #0
   dbb18:	e7e8      	b.n	dbaec <_strtod_l+0xfc>
   dbb1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dbb1e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbb22:	e7e3      	b.n	dbaec <_strtod_l+0xfc>
   dbb24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbb26:	1c5a      	adds	r2, r3, #1
   dbb28:	921d      	str	r2, [sp, #116]	; 0x74
   dbb2a:	785b      	ldrb	r3, [r3, #1]
   dbb2c:	2b30      	cmp	r3, #48	; 0x30
   dbb2e:	d0f9      	beq.n	dbb24 <_strtod_l+0x134>
   dbb30:	2b00      	cmp	r3, #0
   dbb32:	d09f      	beq.n	dba74 <_strtod_l+0x84>
   dbb34:	2301      	movs	r3, #1
   dbb36:	f04f 0900 	mov.w	r9, #0
   dbb3a:	9304      	str	r3, [sp, #16]
   dbb3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbb3e:	930a      	str	r3, [sp, #40]	; 0x28
   dbb40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dbb44:	464f      	mov	r7, r9
   dbb46:	220a      	movs	r2, #10
   dbb48:	981d      	ldr	r0, [sp, #116]	; 0x74
   dbb4a:	7806      	ldrb	r6, [r0, #0]
   dbb4c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dbb50:	b2d9      	uxtb	r1, r3
   dbb52:	2909      	cmp	r1, #9
   dbb54:	d92a      	bls.n	dbbac <_strtod_l+0x1bc>
   dbb56:	9907      	ldr	r1, [sp, #28]
   dbb58:	462a      	mov	r2, r5
   dbb5a:	f7ff ff08 	bl	db96e <strncmp>
   dbb5e:	b398      	cbz	r0, dbbc8 <_strtod_l+0x1d8>
   dbb60:	2000      	movs	r0, #0
   dbb62:	4633      	mov	r3, r6
   dbb64:	463d      	mov	r5, r7
   dbb66:	9007      	str	r0, [sp, #28]
   dbb68:	4602      	mov	r2, r0
   dbb6a:	2b65      	cmp	r3, #101	; 0x65
   dbb6c:	d001      	beq.n	dbb72 <_strtod_l+0x182>
   dbb6e:	2b45      	cmp	r3, #69	; 0x45
   dbb70:	d118      	bne.n	dbba4 <_strtod_l+0x1b4>
   dbb72:	b91d      	cbnz	r5, dbb7c <_strtod_l+0x18c>
   dbb74:	9b04      	ldr	r3, [sp, #16]
   dbb76:	4303      	orrs	r3, r0
   dbb78:	d098      	beq.n	dbaac <_strtod_l+0xbc>
   dbb7a:	2500      	movs	r5, #0
   dbb7c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dbb80:	f108 0301 	add.w	r3, r8, #1
   dbb84:	931d      	str	r3, [sp, #116]	; 0x74
   dbb86:	f898 3001 	ldrb.w	r3, [r8, #1]
   dbb8a:	2b2b      	cmp	r3, #43	; 0x2b
   dbb8c:	d075      	beq.n	dbc7a <_strtod_l+0x28a>
   dbb8e:	2b2d      	cmp	r3, #45	; 0x2d
   dbb90:	d07b      	beq.n	dbc8a <_strtod_l+0x29a>
   dbb92:	f04f 0c00 	mov.w	ip, #0
   dbb96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dbb9a:	2909      	cmp	r1, #9
   dbb9c:	f240 8082 	bls.w	dbca4 <_strtod_l+0x2b4>
   dbba0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbba4:	2600      	movs	r6, #0
   dbba6:	e09d      	b.n	dbce4 <_strtod_l+0x2f4>
   dbba8:	2300      	movs	r3, #0
   dbbaa:	e7c4      	b.n	dbb36 <_strtod_l+0x146>
   dbbac:	2f08      	cmp	r7, #8
   dbbae:	bfd8      	it	le
   dbbb0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dbbb2:	f100 0001 	add.w	r0, r0, #1
   dbbb6:	bfda      	itte	le
   dbbb8:	fb02 3301 	mlale	r3, r2, r1, r3
   dbbbc:	9309      	strle	r3, [sp, #36]	; 0x24
   dbbbe:	fb02 3909 	mlagt	r9, r2, r9, r3
   dbbc2:	3701      	adds	r7, #1
   dbbc4:	901d      	str	r0, [sp, #116]	; 0x74
   dbbc6:	e7bf      	b.n	dbb48 <_strtod_l+0x158>
   dbbc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbbca:	195a      	adds	r2, r3, r5
   dbbcc:	921d      	str	r2, [sp, #116]	; 0x74
   dbbce:	5d5b      	ldrb	r3, [r3, r5]
   dbbd0:	2f00      	cmp	r7, #0
   dbbd2:	d037      	beq.n	dbc44 <_strtod_l+0x254>
   dbbd4:	9007      	str	r0, [sp, #28]
   dbbd6:	463d      	mov	r5, r7
   dbbd8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dbbdc:	2a09      	cmp	r2, #9
   dbbde:	d912      	bls.n	dbc06 <_strtod_l+0x216>
   dbbe0:	2201      	movs	r2, #1
   dbbe2:	e7c2      	b.n	dbb6a <_strtod_l+0x17a>
   dbbe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbbe6:	1c5a      	adds	r2, r3, #1
   dbbe8:	921d      	str	r2, [sp, #116]	; 0x74
   dbbea:	785b      	ldrb	r3, [r3, #1]
   dbbec:	3001      	adds	r0, #1
   dbbee:	2b30      	cmp	r3, #48	; 0x30
   dbbf0:	d0f8      	beq.n	dbbe4 <_strtod_l+0x1f4>
   dbbf2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dbbf6:	2a08      	cmp	r2, #8
   dbbf8:	f200 84db 	bhi.w	dc5b2 <_strtod_l+0xbc2>
   dbbfc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dbbfe:	9007      	str	r0, [sp, #28]
   dbc00:	2000      	movs	r0, #0
   dbc02:	920a      	str	r2, [sp, #40]	; 0x28
   dbc04:	4605      	mov	r5, r0
   dbc06:	3b30      	subs	r3, #48	; 0x30
   dbc08:	f100 0201 	add.w	r2, r0, #1
   dbc0c:	d014      	beq.n	dbc38 <_strtod_l+0x248>
   dbc0e:	9907      	ldr	r1, [sp, #28]
   dbc10:	4411      	add	r1, r2
   dbc12:	9107      	str	r1, [sp, #28]
   dbc14:	462a      	mov	r2, r5
   dbc16:	eb00 0e05 	add.w	lr, r0, r5
   dbc1a:	210a      	movs	r1, #10
   dbc1c:	4572      	cmp	r2, lr
   dbc1e:	d113      	bne.n	dbc48 <_strtod_l+0x258>
   dbc20:	182a      	adds	r2, r5, r0
   dbc22:	2a08      	cmp	r2, #8
   dbc24:	f105 0501 	add.w	r5, r5, #1
   dbc28:	4405      	add	r5, r0
   dbc2a:	dc1c      	bgt.n	dbc66 <_strtod_l+0x276>
   dbc2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbc2e:	220a      	movs	r2, #10
   dbc30:	fb02 3301 	mla	r3, r2, r1, r3
   dbc34:	9309      	str	r3, [sp, #36]	; 0x24
   dbc36:	2200      	movs	r2, #0
   dbc38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbc3a:	1c59      	adds	r1, r3, #1
   dbc3c:	911d      	str	r1, [sp, #116]	; 0x74
   dbc3e:	785b      	ldrb	r3, [r3, #1]
   dbc40:	4610      	mov	r0, r2
   dbc42:	e7c9      	b.n	dbbd8 <_strtod_l+0x1e8>
   dbc44:	4638      	mov	r0, r7
   dbc46:	e7d2      	b.n	dbbee <_strtod_l+0x1fe>
   dbc48:	2a08      	cmp	r2, #8
   dbc4a:	dc04      	bgt.n	dbc56 <_strtod_l+0x266>
   dbc4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dbc4e:	434e      	muls	r6, r1
   dbc50:	9609      	str	r6, [sp, #36]	; 0x24
   dbc52:	3201      	adds	r2, #1
   dbc54:	e7e2      	b.n	dbc1c <_strtod_l+0x22c>
   dbc56:	f102 0c01 	add.w	ip, r2, #1
   dbc5a:	f1bc 0f10 	cmp.w	ip, #16
   dbc5e:	bfd8      	it	le
   dbc60:	fb01 f909 	mulle.w	r9, r1, r9
   dbc64:	e7f5      	b.n	dbc52 <_strtod_l+0x262>
   dbc66:	2d10      	cmp	r5, #16
   dbc68:	bfdc      	itt	le
   dbc6a:	220a      	movle	r2, #10
   dbc6c:	fb02 3909 	mlale	r9, r2, r9, r3
   dbc70:	e7e1      	b.n	dbc36 <_strtod_l+0x246>
   dbc72:	2300      	movs	r3, #0
   dbc74:	9307      	str	r3, [sp, #28]
   dbc76:	2201      	movs	r2, #1
   dbc78:	e77c      	b.n	dbb74 <_strtod_l+0x184>
   dbc7a:	f04f 0c00 	mov.w	ip, #0
   dbc7e:	f108 0302 	add.w	r3, r8, #2
   dbc82:	931d      	str	r3, [sp, #116]	; 0x74
   dbc84:	f898 3002 	ldrb.w	r3, [r8, #2]
   dbc88:	e785      	b.n	dbb96 <_strtod_l+0x1a6>
   dbc8a:	f04f 0c01 	mov.w	ip, #1
   dbc8e:	e7f6      	b.n	dbc7e <_strtod_l+0x28e>
   dbc90:	000de794 	.word	0x000de794
   dbc94:	000de63c 	.word	0x000de63c
   dbc98:	7ff00000 	.word	0x7ff00000
   dbc9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbc9e:	1c59      	adds	r1, r3, #1
   dbca0:	911d      	str	r1, [sp, #116]	; 0x74
   dbca2:	785b      	ldrb	r3, [r3, #1]
   dbca4:	2b30      	cmp	r3, #48	; 0x30
   dbca6:	d0f9      	beq.n	dbc9c <_strtod_l+0x2ac>
   dbca8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dbcac:	2908      	cmp	r1, #8
   dbcae:	f63f af79 	bhi.w	dbba4 <_strtod_l+0x1b4>
   dbcb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dbcb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbcb8:	9308      	str	r3, [sp, #32]
   dbcba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbcbc:	1c59      	adds	r1, r3, #1
   dbcbe:	911d      	str	r1, [sp, #116]	; 0x74
   dbcc0:	785b      	ldrb	r3, [r3, #1]
   dbcc2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dbcc6:	2e09      	cmp	r6, #9
   dbcc8:	d937      	bls.n	dbd3a <_strtod_l+0x34a>
   dbcca:	9e08      	ldr	r6, [sp, #32]
   dbccc:	1b89      	subs	r1, r1, r6
   dbcce:	2908      	cmp	r1, #8
   dbcd0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dbcd4:	dc02      	bgt.n	dbcdc <_strtod_l+0x2ec>
   dbcd6:	4576      	cmp	r6, lr
   dbcd8:	bfa8      	it	ge
   dbcda:	4676      	movge	r6, lr
   dbcdc:	f1bc 0f00 	cmp.w	ip, #0
   dbce0:	d000      	beq.n	dbce4 <_strtod_l+0x2f4>
   dbce2:	4276      	negs	r6, r6
   dbce4:	2d00      	cmp	r5, #0
   dbce6:	d14f      	bne.n	dbd88 <_strtod_l+0x398>
   dbce8:	9904      	ldr	r1, [sp, #16]
   dbcea:	4301      	orrs	r1, r0
   dbcec:	f47f aec2 	bne.w	dba74 <_strtod_l+0x84>
   dbcf0:	2a00      	cmp	r2, #0
   dbcf2:	f47f aedb 	bne.w	dbaac <_strtod_l+0xbc>
   dbcf6:	2b69      	cmp	r3, #105	; 0x69
   dbcf8:	d027      	beq.n	dbd4a <_strtod_l+0x35a>
   dbcfa:	dc24      	bgt.n	dbd46 <_strtod_l+0x356>
   dbcfc:	2b49      	cmp	r3, #73	; 0x49
   dbcfe:	d024      	beq.n	dbd4a <_strtod_l+0x35a>
   dbd00:	2b4e      	cmp	r3, #78	; 0x4e
   dbd02:	f47f aed3 	bne.w	dbaac <_strtod_l+0xbc>
   dbd06:	499e      	ldr	r1, [pc, #632]	; (dbf80 <_strtod_l+0x590>)
   dbd08:	a81d      	add	r0, sp, #116	; 0x74
   dbd0a:	f000 ffb9 	bl	dcc80 <__match>
   dbd0e:	2800      	cmp	r0, #0
   dbd10:	f43f aecc 	beq.w	dbaac <_strtod_l+0xbc>
   dbd14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd16:	781b      	ldrb	r3, [r3, #0]
   dbd18:	2b28      	cmp	r3, #40	; 0x28
   dbd1a:	d12d      	bne.n	dbd78 <_strtod_l+0x388>
   dbd1c:	4999      	ldr	r1, [pc, #612]	; (dbf84 <_strtod_l+0x594>)
   dbd1e:	aa20      	add	r2, sp, #128	; 0x80
   dbd20:	a81d      	add	r0, sp, #116	; 0x74
   dbd22:	f000 ffc1 	bl	dcca8 <__hexnan>
   dbd26:	2805      	cmp	r0, #5
   dbd28:	d126      	bne.n	dbd78 <_strtod_l+0x388>
   dbd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dbd2c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dbd30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dbd34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dbd38:	e69c      	b.n	dba74 <_strtod_l+0x84>
   dbd3a:	210a      	movs	r1, #10
   dbd3c:	fb01 3e0e 	mla	lr, r1, lr, r3
   dbd40:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dbd44:	e7b9      	b.n	dbcba <_strtod_l+0x2ca>
   dbd46:	2b6e      	cmp	r3, #110	; 0x6e
   dbd48:	e7db      	b.n	dbd02 <_strtod_l+0x312>
   dbd4a:	498f      	ldr	r1, [pc, #572]	; (dbf88 <_strtod_l+0x598>)
   dbd4c:	a81d      	add	r0, sp, #116	; 0x74
   dbd4e:	f000 ff97 	bl	dcc80 <__match>
   dbd52:	2800      	cmp	r0, #0
   dbd54:	f43f aeaa 	beq.w	dbaac <_strtod_l+0xbc>
   dbd58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd5a:	498c      	ldr	r1, [pc, #560]	; (dbf8c <_strtod_l+0x59c>)
   dbd5c:	3b01      	subs	r3, #1
   dbd5e:	a81d      	add	r0, sp, #116	; 0x74
   dbd60:	931d      	str	r3, [sp, #116]	; 0x74
   dbd62:	f000 ff8d 	bl	dcc80 <__match>
   dbd66:	b910      	cbnz	r0, dbd6e <_strtod_l+0x37e>
   dbd68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd6a:	3301      	adds	r3, #1
   dbd6c:	931d      	str	r3, [sp, #116]	; 0x74
   dbd6e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dbf9c <_strtod_l+0x5ac>
   dbd72:	f04f 0a00 	mov.w	sl, #0
   dbd76:	e67d      	b.n	dba74 <_strtod_l+0x84>
   dbd78:	4885      	ldr	r0, [pc, #532]	; (dbf90 <_strtod_l+0x5a0>)
   dbd7a:	f001 fc91 	bl	dd6a0 <nan>
   dbd7e:	ed8d 0b04 	vstr	d0, [sp, #16]
   dbd82:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dbd86:	e675      	b.n	dba74 <_strtod_l+0x84>
   dbd88:	9b07      	ldr	r3, [sp, #28]
   dbd8a:	9809      	ldr	r0, [sp, #36]	; 0x24
   dbd8c:	1af3      	subs	r3, r6, r3
   dbd8e:	2f00      	cmp	r7, #0
   dbd90:	bf08      	it	eq
   dbd92:	462f      	moveq	r7, r5
   dbd94:	2d10      	cmp	r5, #16
   dbd96:	9308      	str	r3, [sp, #32]
   dbd98:	46a8      	mov	r8, r5
   dbd9a:	bfa8      	it	ge
   dbd9c:	f04f 0810 	movge.w	r8, #16
   dbda0:	f7ff f954 	bl	db04c <__aeabi_ui2d>
   dbda4:	2d09      	cmp	r5, #9
   dbda6:	4682      	mov	sl, r0
   dbda8:	468b      	mov	fp, r1
   dbdaa:	dd13      	ble.n	dbdd4 <_strtod_l+0x3e4>
   dbdac:	4b79      	ldr	r3, [pc, #484]	; (dbf94 <_strtod_l+0x5a4>)
   dbdae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dbdb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dbdb6:	f7ff f9c3 	bl	db140 <__aeabi_dmul>
   dbdba:	4682      	mov	sl, r0
   dbdbc:	4648      	mov	r0, r9
   dbdbe:	468b      	mov	fp, r1
   dbdc0:	f7ff f944 	bl	db04c <__aeabi_ui2d>
   dbdc4:	4602      	mov	r2, r0
   dbdc6:	460b      	mov	r3, r1
   dbdc8:	4650      	mov	r0, sl
   dbdca:	4659      	mov	r1, fp
   dbdcc:	f7ff f802 	bl	dadd4 <__adddf3>
   dbdd0:	4682      	mov	sl, r0
   dbdd2:	468b      	mov	fp, r1
   dbdd4:	2d0f      	cmp	r5, #15
   dbdd6:	dc38      	bgt.n	dbe4a <_strtod_l+0x45a>
   dbdd8:	9b08      	ldr	r3, [sp, #32]
   dbdda:	2b00      	cmp	r3, #0
   dbddc:	f43f ae4a 	beq.w	dba74 <_strtod_l+0x84>
   dbde0:	dd24      	ble.n	dbe2c <_strtod_l+0x43c>
   dbde2:	2b16      	cmp	r3, #22
   dbde4:	dc0b      	bgt.n	dbdfe <_strtod_l+0x40e>
   dbde6:	4d6b      	ldr	r5, [pc, #428]	; (dbf94 <_strtod_l+0x5a4>)
   dbde8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dbdec:	e9d5 0100 	ldrd	r0, r1, [r5]
   dbdf0:	4652      	mov	r2, sl
   dbdf2:	465b      	mov	r3, fp
   dbdf4:	f7ff f9a4 	bl	db140 <__aeabi_dmul>
   dbdf8:	4682      	mov	sl, r0
   dbdfa:	468b      	mov	fp, r1
   dbdfc:	e63a      	b.n	dba74 <_strtod_l+0x84>
   dbdfe:	9a08      	ldr	r2, [sp, #32]
   dbe00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dbe04:	4293      	cmp	r3, r2
   dbe06:	db20      	blt.n	dbe4a <_strtod_l+0x45a>
   dbe08:	4c62      	ldr	r4, [pc, #392]	; (dbf94 <_strtod_l+0x5a4>)
   dbe0a:	f1c5 050f 	rsb	r5, r5, #15
   dbe0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dbe12:	4652      	mov	r2, sl
   dbe14:	465b      	mov	r3, fp
   dbe16:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbe1a:	f7ff f991 	bl	db140 <__aeabi_dmul>
   dbe1e:	9b08      	ldr	r3, [sp, #32]
   dbe20:	1b5d      	subs	r5, r3, r5
   dbe22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dbe26:	e9d4 2300 	ldrd	r2, r3, [r4]
   dbe2a:	e7e3      	b.n	dbdf4 <_strtod_l+0x404>
   dbe2c:	9b08      	ldr	r3, [sp, #32]
   dbe2e:	3316      	adds	r3, #22
   dbe30:	db0b      	blt.n	dbe4a <_strtod_l+0x45a>
   dbe32:	9b07      	ldr	r3, [sp, #28]
   dbe34:	4a57      	ldr	r2, [pc, #348]	; (dbf94 <_strtod_l+0x5a4>)
   dbe36:	1b9e      	subs	r6, r3, r6
   dbe38:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dbe3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dbe40:	4650      	mov	r0, sl
   dbe42:	4659      	mov	r1, fp
   dbe44:	f7ff faa6 	bl	db394 <__aeabi_ddiv>
   dbe48:	e7d6      	b.n	dbdf8 <_strtod_l+0x408>
   dbe4a:	9b08      	ldr	r3, [sp, #32]
   dbe4c:	eba5 0808 	sub.w	r8, r5, r8
   dbe50:	4498      	add	r8, r3
   dbe52:	f1b8 0f00 	cmp.w	r8, #0
   dbe56:	dd71      	ble.n	dbf3c <_strtod_l+0x54c>
   dbe58:	f018 030f 	ands.w	r3, r8, #15
   dbe5c:	d00a      	beq.n	dbe74 <_strtod_l+0x484>
   dbe5e:	494d      	ldr	r1, [pc, #308]	; (dbf94 <_strtod_l+0x5a4>)
   dbe60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dbe64:	4652      	mov	r2, sl
   dbe66:	465b      	mov	r3, fp
   dbe68:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbe6c:	f7ff f968 	bl	db140 <__aeabi_dmul>
   dbe70:	4682      	mov	sl, r0
   dbe72:	468b      	mov	fp, r1
   dbe74:	f038 080f 	bics.w	r8, r8, #15
   dbe78:	d04d      	beq.n	dbf16 <_strtod_l+0x526>
   dbe7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dbe7e:	dd22      	ble.n	dbec6 <_strtod_l+0x4d6>
   dbe80:	2500      	movs	r5, #0
   dbe82:	462e      	mov	r6, r5
   dbe84:	9509      	str	r5, [sp, #36]	; 0x24
   dbe86:	9507      	str	r5, [sp, #28]
   dbe88:	2322      	movs	r3, #34	; 0x22
   dbe8a:	f8df b110 	ldr.w	fp, [pc, #272]	; dbf9c <_strtod_l+0x5ac>
   dbe8e:	6023      	str	r3, [r4, #0]
   dbe90:	f04f 0a00 	mov.w	sl, #0
   dbe94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbe96:	2b00      	cmp	r3, #0
   dbe98:	f43f adec 	beq.w	dba74 <_strtod_l+0x84>
   dbe9c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbe9e:	4620      	mov	r0, r4
   dbea0:	f000 ffe4 	bl	dce6c <_Bfree>
   dbea4:	9907      	ldr	r1, [sp, #28]
   dbea6:	4620      	mov	r0, r4
   dbea8:	f000 ffe0 	bl	dce6c <_Bfree>
   dbeac:	4631      	mov	r1, r6
   dbeae:	4620      	mov	r0, r4
   dbeb0:	f000 ffdc 	bl	dce6c <_Bfree>
   dbeb4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbeb6:	4620      	mov	r0, r4
   dbeb8:	f000 ffd8 	bl	dce6c <_Bfree>
   dbebc:	4629      	mov	r1, r5
   dbebe:	4620      	mov	r0, r4
   dbec0:	f000 ffd4 	bl	dce6c <_Bfree>
   dbec4:	e5d6      	b.n	dba74 <_strtod_l+0x84>
   dbec6:	2300      	movs	r3, #0
   dbec8:	ea4f 1828 	mov.w	r8, r8, asr #4
   dbecc:	4650      	mov	r0, sl
   dbece:	4659      	mov	r1, fp
   dbed0:	4699      	mov	r9, r3
   dbed2:	f1b8 0f01 	cmp.w	r8, #1
   dbed6:	dc21      	bgt.n	dbf1c <_strtod_l+0x52c>
   dbed8:	b10b      	cbz	r3, dbede <_strtod_l+0x4ee>
   dbeda:	4682      	mov	sl, r0
   dbedc:	468b      	mov	fp, r1
   dbede:	4b2e      	ldr	r3, [pc, #184]	; (dbf98 <_strtod_l+0x5a8>)
   dbee0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dbee4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dbee8:	4652      	mov	r2, sl
   dbeea:	465b      	mov	r3, fp
   dbeec:	e9d9 0100 	ldrd	r0, r1, [r9]
   dbef0:	f7ff f926 	bl	db140 <__aeabi_dmul>
   dbef4:	4b29      	ldr	r3, [pc, #164]	; (dbf9c <_strtod_l+0x5ac>)
   dbef6:	460a      	mov	r2, r1
   dbef8:	400b      	ands	r3, r1
   dbefa:	4929      	ldr	r1, [pc, #164]	; (dbfa0 <_strtod_l+0x5b0>)
   dbefc:	428b      	cmp	r3, r1
   dbefe:	4682      	mov	sl, r0
   dbf00:	d8be      	bhi.n	dbe80 <_strtod_l+0x490>
   dbf02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dbf06:	428b      	cmp	r3, r1
   dbf08:	bf86      	itte	hi
   dbf0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dbfa4 <_strtod_l+0x5b4>
   dbf0e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dbf12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dbf16:	2300      	movs	r3, #0
   dbf18:	9304      	str	r3, [sp, #16]
   dbf1a:	e081      	b.n	dc020 <_strtod_l+0x630>
   dbf1c:	f018 0f01 	tst.w	r8, #1
   dbf20:	d007      	beq.n	dbf32 <_strtod_l+0x542>
   dbf22:	4b1d      	ldr	r3, [pc, #116]	; (dbf98 <_strtod_l+0x5a8>)
   dbf24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dbf28:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf2c:	f7ff f908 	bl	db140 <__aeabi_dmul>
   dbf30:	2301      	movs	r3, #1
   dbf32:	f109 0901 	add.w	r9, r9, #1
   dbf36:	ea4f 0868 	mov.w	r8, r8, asr #1
   dbf3a:	e7ca      	b.n	dbed2 <_strtod_l+0x4e2>
   dbf3c:	d0eb      	beq.n	dbf16 <_strtod_l+0x526>
   dbf3e:	f1c8 0800 	rsb	r8, r8, #0
   dbf42:	f018 020f 	ands.w	r2, r8, #15
   dbf46:	d00a      	beq.n	dbf5e <_strtod_l+0x56e>
   dbf48:	4b12      	ldr	r3, [pc, #72]	; (dbf94 <_strtod_l+0x5a4>)
   dbf4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dbf4e:	4650      	mov	r0, sl
   dbf50:	4659      	mov	r1, fp
   dbf52:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf56:	f7ff fa1d 	bl	db394 <__aeabi_ddiv>
   dbf5a:	4682      	mov	sl, r0
   dbf5c:	468b      	mov	fp, r1
   dbf5e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dbf62:	d0d8      	beq.n	dbf16 <_strtod_l+0x526>
   dbf64:	f1b8 0f1f 	cmp.w	r8, #31
   dbf68:	dd1e      	ble.n	dbfa8 <_strtod_l+0x5b8>
   dbf6a:	2500      	movs	r5, #0
   dbf6c:	462e      	mov	r6, r5
   dbf6e:	9509      	str	r5, [sp, #36]	; 0x24
   dbf70:	9507      	str	r5, [sp, #28]
   dbf72:	2322      	movs	r3, #34	; 0x22
   dbf74:	f04f 0a00 	mov.w	sl, #0
   dbf78:	f04f 0b00 	mov.w	fp, #0
   dbf7c:	6023      	str	r3, [r4, #0]
   dbf7e:	e789      	b.n	dbe94 <_strtod_l+0x4a4>
   dbf80:	000de637 	.word	0x000de637
   dbf84:	000de650 	.word	0x000de650
   dbf88:	000de62e 	.word	0x000de62e
   dbf8c:	000de631 	.word	0x000de631
   dbf90:	000de5f4 	.word	0x000de5f4
   dbf94:	000de7d0 	.word	0x000de7d0
   dbf98:	000de7a8 	.word	0x000de7a8
   dbf9c:	7ff00000 	.word	0x7ff00000
   dbfa0:	7ca00000 	.word	0x7ca00000
   dbfa4:	7fefffff 	.word	0x7fefffff
   dbfa8:	f018 0310 	ands.w	r3, r8, #16
   dbfac:	bf18      	it	ne
   dbfae:	236a      	movne	r3, #106	; 0x6a
   dbfb0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc368 <_strtod_l+0x978>
   dbfb4:	9304      	str	r3, [sp, #16]
   dbfb6:	4650      	mov	r0, sl
   dbfb8:	4659      	mov	r1, fp
   dbfba:	2300      	movs	r3, #0
   dbfbc:	f018 0f01 	tst.w	r8, #1
   dbfc0:	d004      	beq.n	dbfcc <_strtod_l+0x5dc>
   dbfc2:	e9d9 2300 	ldrd	r2, r3, [r9]
   dbfc6:	f7ff f8bb 	bl	db140 <__aeabi_dmul>
   dbfca:	2301      	movs	r3, #1
   dbfcc:	ea5f 0868 	movs.w	r8, r8, asr #1
   dbfd0:	f109 0908 	add.w	r9, r9, #8
   dbfd4:	d1f2      	bne.n	dbfbc <_strtod_l+0x5cc>
   dbfd6:	b10b      	cbz	r3, dbfdc <_strtod_l+0x5ec>
   dbfd8:	4682      	mov	sl, r0
   dbfda:	468b      	mov	fp, r1
   dbfdc:	9b04      	ldr	r3, [sp, #16]
   dbfde:	b1bb      	cbz	r3, dc010 <_strtod_l+0x620>
   dbfe0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dbfe4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbfe8:	2b00      	cmp	r3, #0
   dbfea:	4659      	mov	r1, fp
   dbfec:	dd10      	ble.n	dc010 <_strtod_l+0x620>
   dbfee:	2b1f      	cmp	r3, #31
   dbff0:	f340 8128 	ble.w	dc244 <_strtod_l+0x854>
   dbff4:	2b34      	cmp	r3, #52	; 0x34
   dbff6:	bfde      	ittt	le
   dbff8:	3b20      	suble	r3, #32
   dbffa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dbffe:	fa02 f303 	lslle.w	r3, r2, r3
   dc002:	f04f 0a00 	mov.w	sl, #0
   dc006:	bfcc      	ite	gt
   dc008:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc00c:	ea03 0b01 	andle.w	fp, r3, r1
   dc010:	2200      	movs	r2, #0
   dc012:	2300      	movs	r3, #0
   dc014:	4650      	mov	r0, sl
   dc016:	4659      	mov	r1, fp
   dc018:	f7ff fafa 	bl	db610 <__aeabi_dcmpeq>
   dc01c:	2800      	cmp	r0, #0
   dc01e:	d1a4      	bne.n	dbf6a <_strtod_l+0x57a>
   dc020:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc022:	9300      	str	r3, [sp, #0]
   dc024:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc026:	462b      	mov	r3, r5
   dc028:	463a      	mov	r2, r7
   dc02a:	4620      	mov	r0, r4
   dc02c:	f000 ff73 	bl	dcf16 <__s2b>
   dc030:	9009      	str	r0, [sp, #36]	; 0x24
   dc032:	2800      	cmp	r0, #0
   dc034:	f43f af24 	beq.w	dbe80 <_strtod_l+0x490>
   dc038:	9b07      	ldr	r3, [sp, #28]
   dc03a:	1b9e      	subs	r6, r3, r6
   dc03c:	9b08      	ldr	r3, [sp, #32]
   dc03e:	2b00      	cmp	r3, #0
   dc040:	bfb4      	ite	lt
   dc042:	4633      	movlt	r3, r6
   dc044:	2300      	movge	r3, #0
   dc046:	9310      	str	r3, [sp, #64]	; 0x40
   dc048:	9b08      	ldr	r3, [sp, #32]
   dc04a:	2500      	movs	r5, #0
   dc04c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc050:	9318      	str	r3, [sp, #96]	; 0x60
   dc052:	462e      	mov	r6, r5
   dc054:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc056:	4620      	mov	r0, r4
   dc058:	6859      	ldr	r1, [r3, #4]
   dc05a:	f000 fed3 	bl	dce04 <_Balloc>
   dc05e:	9007      	str	r0, [sp, #28]
   dc060:	2800      	cmp	r0, #0
   dc062:	f43f af11 	beq.w	dbe88 <_strtod_l+0x498>
   dc066:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc068:	691a      	ldr	r2, [r3, #16]
   dc06a:	3202      	adds	r2, #2
   dc06c:	f103 010c 	add.w	r1, r3, #12
   dc070:	0092      	lsls	r2, r2, #2
   dc072:	300c      	adds	r0, #12
   dc074:	f7ff fbf0 	bl	db858 <memcpy>
   dc078:	ec4b ab10 	vmov	d0, sl, fp
   dc07c:	aa20      	add	r2, sp, #128	; 0x80
   dc07e:	a91f      	add	r1, sp, #124	; 0x7c
   dc080:	4620      	mov	r0, r4
   dc082:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc086:	f001 fa35 	bl	dd4f4 <__d2b>
   dc08a:	901e      	str	r0, [sp, #120]	; 0x78
   dc08c:	2800      	cmp	r0, #0
   dc08e:	f43f aefb 	beq.w	dbe88 <_strtod_l+0x498>
   dc092:	2101      	movs	r1, #1
   dc094:	4620      	mov	r0, r4
   dc096:	f000 ffcc 	bl	dd032 <__i2b>
   dc09a:	4606      	mov	r6, r0
   dc09c:	2800      	cmp	r0, #0
   dc09e:	f43f aef3 	beq.w	dbe88 <_strtod_l+0x498>
   dc0a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dc0a4:	9904      	ldr	r1, [sp, #16]
   dc0a6:	2b00      	cmp	r3, #0
   dc0a8:	bfab      	itete	ge
   dc0aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dc0ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dc0ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dc0b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dc0b4:	bfac      	ite	ge
   dc0b6:	eb03 0902 	addge.w	r9, r3, r2
   dc0ba:	1ad7      	sublt	r7, r2, r3
   dc0bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dc0be:	eba3 0801 	sub.w	r8, r3, r1
   dc0c2:	4490      	add	r8, r2
   dc0c4:	4ba3      	ldr	r3, [pc, #652]	; (dc354 <_strtod_l+0x964>)
   dc0c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc0ca:	4598      	cmp	r8, r3
   dc0cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dc0d0:	f280 80cc 	bge.w	dc26c <_strtod_l+0x87c>
   dc0d4:	eba3 0308 	sub.w	r3, r3, r8
   dc0d8:	2b1f      	cmp	r3, #31
   dc0da:	eba2 0203 	sub.w	r2, r2, r3
   dc0de:	f04f 0101 	mov.w	r1, #1
   dc0e2:	f300 80b6 	bgt.w	dc252 <_strtod_l+0x862>
   dc0e6:	fa01 f303 	lsl.w	r3, r1, r3
   dc0ea:	9311      	str	r3, [sp, #68]	; 0x44
   dc0ec:	2300      	movs	r3, #0
   dc0ee:	930c      	str	r3, [sp, #48]	; 0x30
   dc0f0:	eb09 0802 	add.w	r8, r9, r2
   dc0f4:	9b04      	ldr	r3, [sp, #16]
   dc0f6:	45c1      	cmp	r9, r8
   dc0f8:	4417      	add	r7, r2
   dc0fa:	441f      	add	r7, r3
   dc0fc:	464b      	mov	r3, r9
   dc0fe:	bfa8      	it	ge
   dc100:	4643      	movge	r3, r8
   dc102:	42bb      	cmp	r3, r7
   dc104:	bfa8      	it	ge
   dc106:	463b      	movge	r3, r7
   dc108:	2b00      	cmp	r3, #0
   dc10a:	bfc2      	ittt	gt
   dc10c:	eba8 0803 	subgt.w	r8, r8, r3
   dc110:	1aff      	subgt	r7, r7, r3
   dc112:	eba9 0903 	subgt.w	r9, r9, r3
   dc116:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc118:	2b00      	cmp	r3, #0
   dc11a:	dd17      	ble.n	dc14c <_strtod_l+0x75c>
   dc11c:	4631      	mov	r1, r6
   dc11e:	461a      	mov	r2, r3
   dc120:	4620      	mov	r0, r4
   dc122:	f001 f82b 	bl	dd17c <__pow5mult>
   dc126:	4606      	mov	r6, r0
   dc128:	2800      	cmp	r0, #0
   dc12a:	f43f aead 	beq.w	dbe88 <_strtod_l+0x498>
   dc12e:	4601      	mov	r1, r0
   dc130:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc132:	4620      	mov	r0, r4
   dc134:	f000 ff86 	bl	dd044 <__multiply>
   dc138:	900f      	str	r0, [sp, #60]	; 0x3c
   dc13a:	2800      	cmp	r0, #0
   dc13c:	f43f aea4 	beq.w	dbe88 <_strtod_l+0x498>
   dc140:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc142:	4620      	mov	r0, r4
   dc144:	f000 fe92 	bl	dce6c <_Bfree>
   dc148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc14a:	931e      	str	r3, [sp, #120]	; 0x78
   dc14c:	f1b8 0f00 	cmp.w	r8, #0
   dc150:	f300 8091 	bgt.w	dc276 <_strtod_l+0x886>
   dc154:	9b08      	ldr	r3, [sp, #32]
   dc156:	2b00      	cmp	r3, #0
   dc158:	dd08      	ble.n	dc16c <_strtod_l+0x77c>
   dc15a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc15c:	9907      	ldr	r1, [sp, #28]
   dc15e:	4620      	mov	r0, r4
   dc160:	f001 f80c 	bl	dd17c <__pow5mult>
   dc164:	9007      	str	r0, [sp, #28]
   dc166:	2800      	cmp	r0, #0
   dc168:	f43f ae8e 	beq.w	dbe88 <_strtod_l+0x498>
   dc16c:	2f00      	cmp	r7, #0
   dc16e:	dd08      	ble.n	dc182 <_strtod_l+0x792>
   dc170:	9907      	ldr	r1, [sp, #28]
   dc172:	463a      	mov	r2, r7
   dc174:	4620      	mov	r0, r4
   dc176:	f001 f84f 	bl	dd218 <__lshift>
   dc17a:	9007      	str	r0, [sp, #28]
   dc17c:	2800      	cmp	r0, #0
   dc17e:	f43f ae83 	beq.w	dbe88 <_strtod_l+0x498>
   dc182:	f1b9 0f00 	cmp.w	r9, #0
   dc186:	dd08      	ble.n	dc19a <_strtod_l+0x7aa>
   dc188:	4631      	mov	r1, r6
   dc18a:	464a      	mov	r2, r9
   dc18c:	4620      	mov	r0, r4
   dc18e:	f001 f843 	bl	dd218 <__lshift>
   dc192:	4606      	mov	r6, r0
   dc194:	2800      	cmp	r0, #0
   dc196:	f43f ae77 	beq.w	dbe88 <_strtod_l+0x498>
   dc19a:	9a07      	ldr	r2, [sp, #28]
   dc19c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc19e:	4620      	mov	r0, r4
   dc1a0:	f001 f8b5 	bl	dd30e <__mdiff>
   dc1a4:	4605      	mov	r5, r0
   dc1a6:	2800      	cmp	r0, #0
   dc1a8:	f43f ae6e 	beq.w	dbe88 <_strtod_l+0x498>
   dc1ac:	68c3      	ldr	r3, [r0, #12]
   dc1ae:	930f      	str	r3, [sp, #60]	; 0x3c
   dc1b0:	2300      	movs	r3, #0
   dc1b2:	60c3      	str	r3, [r0, #12]
   dc1b4:	4631      	mov	r1, r6
   dc1b6:	f001 f88e 	bl	dd2d6 <__mcmp>
   dc1ba:	2800      	cmp	r0, #0
   dc1bc:	da65      	bge.n	dc28a <_strtod_l+0x89a>
   dc1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc1c0:	ea53 030a 	orrs.w	r3, r3, sl
   dc1c4:	f040 8087 	bne.w	dc2d6 <_strtod_l+0x8e6>
   dc1c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc1cc:	2b00      	cmp	r3, #0
   dc1ce:	f040 8082 	bne.w	dc2d6 <_strtod_l+0x8e6>
   dc1d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc1d6:	0d1b      	lsrs	r3, r3, #20
   dc1d8:	051b      	lsls	r3, r3, #20
   dc1da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dc1de:	d97a      	bls.n	dc2d6 <_strtod_l+0x8e6>
   dc1e0:	696b      	ldr	r3, [r5, #20]
   dc1e2:	b913      	cbnz	r3, dc1ea <_strtod_l+0x7fa>
   dc1e4:	692b      	ldr	r3, [r5, #16]
   dc1e6:	2b01      	cmp	r3, #1
   dc1e8:	dd75      	ble.n	dc2d6 <_strtod_l+0x8e6>
   dc1ea:	4629      	mov	r1, r5
   dc1ec:	2201      	movs	r2, #1
   dc1ee:	4620      	mov	r0, r4
   dc1f0:	f001 f812 	bl	dd218 <__lshift>
   dc1f4:	4631      	mov	r1, r6
   dc1f6:	4605      	mov	r5, r0
   dc1f8:	f001 f86d 	bl	dd2d6 <__mcmp>
   dc1fc:	2800      	cmp	r0, #0
   dc1fe:	dd6a      	ble.n	dc2d6 <_strtod_l+0x8e6>
   dc200:	9904      	ldr	r1, [sp, #16]
   dc202:	4a55      	ldr	r2, [pc, #340]	; (dc358 <_strtod_l+0x968>)
   dc204:	465b      	mov	r3, fp
   dc206:	2900      	cmp	r1, #0
   dc208:	f000 8085 	beq.w	dc316 <_strtod_l+0x926>
   dc20c:	ea02 010b 	and.w	r1, r2, fp
   dc210:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dc214:	dc7f      	bgt.n	dc316 <_strtod_l+0x926>
   dc216:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dc21a:	f77f aeaa 	ble.w	dbf72 <_strtod_l+0x582>
   dc21e:	4a4f      	ldr	r2, [pc, #316]	; (dc35c <_strtod_l+0x96c>)
   dc220:	2300      	movs	r3, #0
   dc222:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dc226:	4650      	mov	r0, sl
   dc228:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dc22c:	4659      	mov	r1, fp
   dc22e:	f7fe ff87 	bl	db140 <__aeabi_dmul>
   dc232:	460b      	mov	r3, r1
   dc234:	4303      	orrs	r3, r0
   dc236:	bf08      	it	eq
   dc238:	2322      	moveq	r3, #34	; 0x22
   dc23a:	4682      	mov	sl, r0
   dc23c:	468b      	mov	fp, r1
   dc23e:	bf08      	it	eq
   dc240:	6023      	streq	r3, [r4, #0]
   dc242:	e62b      	b.n	dbe9c <_strtod_l+0x4ac>
   dc244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc248:	fa02 f303 	lsl.w	r3, r2, r3
   dc24c:	ea03 0a0a 	and.w	sl, r3, sl
   dc250:	e6de      	b.n	dc010 <_strtod_l+0x620>
   dc252:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dc256:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dc25a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dc25e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dc262:	fa01 f308 	lsl.w	r3, r1, r8
   dc266:	930c      	str	r3, [sp, #48]	; 0x30
   dc268:	9111      	str	r1, [sp, #68]	; 0x44
   dc26a:	e741      	b.n	dc0f0 <_strtod_l+0x700>
   dc26c:	2300      	movs	r3, #0
   dc26e:	930c      	str	r3, [sp, #48]	; 0x30
   dc270:	2301      	movs	r3, #1
   dc272:	9311      	str	r3, [sp, #68]	; 0x44
   dc274:	e73c      	b.n	dc0f0 <_strtod_l+0x700>
   dc276:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc278:	4642      	mov	r2, r8
   dc27a:	4620      	mov	r0, r4
   dc27c:	f000 ffcc 	bl	dd218 <__lshift>
   dc280:	901e      	str	r0, [sp, #120]	; 0x78
   dc282:	2800      	cmp	r0, #0
   dc284:	f47f af66 	bne.w	dc154 <_strtod_l+0x764>
   dc288:	e5fe      	b.n	dbe88 <_strtod_l+0x498>
   dc28a:	465f      	mov	r7, fp
   dc28c:	d16e      	bne.n	dc36c <_strtod_l+0x97c>
   dc28e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc290:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc294:	b342      	cbz	r2, dc2e8 <_strtod_l+0x8f8>
   dc296:	4a32      	ldr	r2, [pc, #200]	; (dc360 <_strtod_l+0x970>)
   dc298:	4293      	cmp	r3, r2
   dc29a:	d128      	bne.n	dc2ee <_strtod_l+0x8fe>
   dc29c:	9b04      	ldr	r3, [sp, #16]
   dc29e:	4650      	mov	r0, sl
   dc2a0:	b1eb      	cbz	r3, dc2de <_strtod_l+0x8ee>
   dc2a2:	4a2d      	ldr	r2, [pc, #180]	; (dc358 <_strtod_l+0x968>)
   dc2a4:	403a      	ands	r2, r7
   dc2a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc2aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc2ae:	d819      	bhi.n	dc2e4 <_strtod_l+0x8f4>
   dc2b0:	0d12      	lsrs	r2, r2, #20
   dc2b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc2b6:	fa01 f303 	lsl.w	r3, r1, r3
   dc2ba:	4298      	cmp	r0, r3
   dc2bc:	d117      	bne.n	dc2ee <_strtod_l+0x8fe>
   dc2be:	4b29      	ldr	r3, [pc, #164]	; (dc364 <_strtod_l+0x974>)
   dc2c0:	429f      	cmp	r7, r3
   dc2c2:	d102      	bne.n	dc2ca <_strtod_l+0x8da>
   dc2c4:	3001      	adds	r0, #1
   dc2c6:	f43f addf 	beq.w	dbe88 <_strtod_l+0x498>
   dc2ca:	4b23      	ldr	r3, [pc, #140]	; (dc358 <_strtod_l+0x968>)
   dc2cc:	403b      	ands	r3, r7
   dc2ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc2d2:	f04f 0a00 	mov.w	sl, #0
   dc2d6:	9b04      	ldr	r3, [sp, #16]
   dc2d8:	2b00      	cmp	r3, #0
   dc2da:	d1a0      	bne.n	dc21e <_strtod_l+0x82e>
   dc2dc:	e5de      	b.n	dbe9c <_strtod_l+0x4ac>
   dc2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc2e2:	e7ea      	b.n	dc2ba <_strtod_l+0x8ca>
   dc2e4:	460b      	mov	r3, r1
   dc2e6:	e7e8      	b.n	dc2ba <_strtod_l+0x8ca>
   dc2e8:	ea53 030a 	orrs.w	r3, r3, sl
   dc2ec:	d088      	beq.n	dc200 <_strtod_l+0x810>
   dc2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc2f0:	b1db      	cbz	r3, dc32a <_strtod_l+0x93a>
   dc2f2:	423b      	tst	r3, r7
   dc2f4:	d0ef      	beq.n	dc2d6 <_strtod_l+0x8e6>
   dc2f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc2f8:	9a04      	ldr	r2, [sp, #16]
   dc2fa:	4650      	mov	r0, sl
   dc2fc:	4659      	mov	r1, fp
   dc2fe:	b1c3      	cbz	r3, dc332 <_strtod_l+0x942>
   dc300:	f7ff fb5a 	bl	db9b8 <sulp>
   dc304:	4602      	mov	r2, r0
   dc306:	460b      	mov	r3, r1
   dc308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc30c:	f7fe fd62 	bl	dadd4 <__adddf3>
   dc310:	4682      	mov	sl, r0
   dc312:	468b      	mov	fp, r1
   dc314:	e7df      	b.n	dc2d6 <_strtod_l+0x8e6>
   dc316:	4013      	ands	r3, r2
   dc318:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc31c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc320:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc324:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc328:	e7d5      	b.n	dc2d6 <_strtod_l+0x8e6>
   dc32a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc32c:	ea13 0f0a 	tst.w	r3, sl
   dc330:	e7e0      	b.n	dc2f4 <_strtod_l+0x904>
   dc332:	f7ff fb41 	bl	db9b8 <sulp>
   dc336:	4602      	mov	r2, r0
   dc338:	460b      	mov	r3, r1
   dc33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc33e:	f7fe fd47 	bl	dadd0 <__aeabi_dsub>
   dc342:	2200      	movs	r2, #0
   dc344:	2300      	movs	r3, #0
   dc346:	4682      	mov	sl, r0
   dc348:	468b      	mov	fp, r1
   dc34a:	f7ff f961 	bl	db610 <__aeabi_dcmpeq>
   dc34e:	2800      	cmp	r0, #0
   dc350:	d0c1      	beq.n	dc2d6 <_strtod_l+0x8e6>
   dc352:	e60e      	b.n	dbf72 <_strtod_l+0x582>
   dc354:	fffffc02 	.word	0xfffffc02
   dc358:	7ff00000 	.word	0x7ff00000
   dc35c:	39500000 	.word	0x39500000
   dc360:	000fffff 	.word	0x000fffff
   dc364:	7fefffff 	.word	0x7fefffff
   dc368:	000de668 	.word	0x000de668
   dc36c:	4631      	mov	r1, r6
   dc36e:	4628      	mov	r0, r5
   dc370:	f001 f910 	bl	dd594 <__ratio>
   dc374:	ec59 8b10 	vmov	r8, r9, d0
   dc378:	ee10 0a10 	vmov	r0, s0
   dc37c:	2200      	movs	r2, #0
   dc37e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc382:	4649      	mov	r1, r9
   dc384:	f7ff f958 	bl	db638 <__aeabi_dcmple>
   dc388:	2800      	cmp	r0, #0
   dc38a:	d07c      	beq.n	dc486 <_strtod_l+0xa96>
   dc38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc38e:	2b00      	cmp	r3, #0
   dc390:	d04c      	beq.n	dc42c <_strtod_l+0xa3c>
   dc392:	4b95      	ldr	r3, [pc, #596]	; (dc5e8 <_strtod_l+0xbf8>)
   dc394:	2200      	movs	r2, #0
   dc396:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc39a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dc5e8 <_strtod_l+0xbf8>
   dc39e:	f04f 0800 	mov.w	r8, #0
   dc3a2:	4b92      	ldr	r3, [pc, #584]	; (dc5ec <_strtod_l+0xbfc>)
   dc3a4:	403b      	ands	r3, r7
   dc3a6:	9311      	str	r3, [sp, #68]	; 0x44
   dc3a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc3aa:	4b91      	ldr	r3, [pc, #580]	; (dc5f0 <_strtod_l+0xc00>)
   dc3ac:	429a      	cmp	r2, r3
   dc3ae:	f040 80b2 	bne.w	dc516 <_strtod_l+0xb26>
   dc3b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc3b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc3ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc3be:	ec4b ab10 	vmov	d0, sl, fp
   dc3c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc3c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc3ca:	f001 f817 	bl	dd3fc <__ulp>
   dc3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc3d2:	ec53 2b10 	vmov	r2, r3, d0
   dc3d6:	f7fe feb3 	bl	db140 <__aeabi_dmul>
   dc3da:	4652      	mov	r2, sl
   dc3dc:	465b      	mov	r3, fp
   dc3de:	f7fe fcf9 	bl	dadd4 <__adddf3>
   dc3e2:	460b      	mov	r3, r1
   dc3e4:	4981      	ldr	r1, [pc, #516]	; (dc5ec <_strtod_l+0xbfc>)
   dc3e6:	4a83      	ldr	r2, [pc, #524]	; (dc5f4 <_strtod_l+0xc04>)
   dc3e8:	4019      	ands	r1, r3
   dc3ea:	4291      	cmp	r1, r2
   dc3ec:	4682      	mov	sl, r0
   dc3ee:	d95e      	bls.n	dc4ae <_strtod_l+0xabe>
   dc3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc3f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc3f6:	4293      	cmp	r3, r2
   dc3f8:	d103      	bne.n	dc402 <_strtod_l+0xa12>
   dc3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc3fc:	3301      	adds	r3, #1
   dc3fe:	f43f ad43 	beq.w	dbe88 <_strtod_l+0x498>
   dc402:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dc600 <_strtod_l+0xc10>
   dc406:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc40a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc40c:	4620      	mov	r0, r4
   dc40e:	f000 fd2d 	bl	dce6c <_Bfree>
   dc412:	9907      	ldr	r1, [sp, #28]
   dc414:	4620      	mov	r0, r4
   dc416:	f000 fd29 	bl	dce6c <_Bfree>
   dc41a:	4631      	mov	r1, r6
   dc41c:	4620      	mov	r0, r4
   dc41e:	f000 fd25 	bl	dce6c <_Bfree>
   dc422:	4629      	mov	r1, r5
   dc424:	4620      	mov	r0, r4
   dc426:	f000 fd21 	bl	dce6c <_Bfree>
   dc42a:	e613      	b.n	dc054 <_strtod_l+0x664>
   dc42c:	f1ba 0f00 	cmp.w	sl, #0
   dc430:	d11b      	bne.n	dc46a <_strtod_l+0xa7a>
   dc432:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc436:	b9f3      	cbnz	r3, dc476 <_strtod_l+0xa86>
   dc438:	4b6b      	ldr	r3, [pc, #428]	; (dc5e8 <_strtod_l+0xbf8>)
   dc43a:	2200      	movs	r2, #0
   dc43c:	4640      	mov	r0, r8
   dc43e:	4649      	mov	r1, r9
   dc440:	f7ff f8f0 	bl	db624 <__aeabi_dcmplt>
   dc444:	b9d0      	cbnz	r0, dc47c <_strtod_l+0xa8c>
   dc446:	4640      	mov	r0, r8
   dc448:	4649      	mov	r1, r9
   dc44a:	4b6b      	ldr	r3, [pc, #428]	; (dc5f8 <_strtod_l+0xc08>)
   dc44c:	2200      	movs	r2, #0
   dc44e:	f7fe fe77 	bl	db140 <__aeabi_dmul>
   dc452:	4680      	mov	r8, r0
   dc454:	4689      	mov	r9, r1
   dc456:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc45a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc45e:	931b      	str	r3, [sp, #108]	; 0x6c
   dc460:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc464:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc468:	e79b      	b.n	dc3a2 <_strtod_l+0x9b2>
   dc46a:	f1ba 0f01 	cmp.w	sl, #1
   dc46e:	d102      	bne.n	dc476 <_strtod_l+0xa86>
   dc470:	2f00      	cmp	r7, #0
   dc472:	f43f ad7e 	beq.w	dbf72 <_strtod_l+0x582>
   dc476:	4b61      	ldr	r3, [pc, #388]	; (dc5fc <_strtod_l+0xc0c>)
   dc478:	2200      	movs	r2, #0
   dc47a:	e78c      	b.n	dc396 <_strtod_l+0x9a6>
   dc47c:	f8df 9178 	ldr.w	r9, [pc, #376]	; dc5f8 <_strtod_l+0xc08>
   dc480:	f04f 0800 	mov.w	r8, #0
   dc484:	e7e7      	b.n	dc456 <_strtod_l+0xa66>
   dc486:	4b5c      	ldr	r3, [pc, #368]	; (dc5f8 <_strtod_l+0xc08>)
   dc488:	4640      	mov	r0, r8
   dc48a:	4649      	mov	r1, r9
   dc48c:	2200      	movs	r2, #0
   dc48e:	f7fe fe57 	bl	db140 <__aeabi_dmul>
   dc492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc494:	4680      	mov	r8, r0
   dc496:	4689      	mov	r9, r1
   dc498:	b933      	cbnz	r3, dc4a8 <_strtod_l+0xab8>
   dc49a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc49e:	9012      	str	r0, [sp, #72]	; 0x48
   dc4a0:	9313      	str	r3, [sp, #76]	; 0x4c
   dc4a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc4a6:	e7dd      	b.n	dc464 <_strtod_l+0xa74>
   dc4a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc4ac:	e7f9      	b.n	dc4a2 <_strtod_l+0xab2>
   dc4ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc4b2:	9b04      	ldr	r3, [sp, #16]
   dc4b4:	2b00      	cmp	r3, #0
   dc4b6:	d1a8      	bne.n	dc40a <_strtod_l+0xa1a>
   dc4b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc4bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc4be:	0d1b      	lsrs	r3, r3, #20
   dc4c0:	051b      	lsls	r3, r3, #20
   dc4c2:	429a      	cmp	r2, r3
   dc4c4:	d1a1      	bne.n	dc40a <_strtod_l+0xa1a>
   dc4c6:	4640      	mov	r0, r8
   dc4c8:	4649      	mov	r1, r9
   dc4ca:	f001 f8ff 	bl	dd6cc <__aeabi_d2lz>
   dc4ce:	f7fe fe09 	bl	db0e4 <__aeabi_l2d>
   dc4d2:	4602      	mov	r2, r0
   dc4d4:	460b      	mov	r3, r1
   dc4d6:	4640      	mov	r0, r8
   dc4d8:	4649      	mov	r1, r9
   dc4da:	f7fe fc79 	bl	dadd0 <__aeabi_dsub>
   dc4de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc4e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc4e4:	ea43 030a 	orr.w	r3, r3, sl
   dc4e8:	4313      	orrs	r3, r2
   dc4ea:	4680      	mov	r8, r0
   dc4ec:	4689      	mov	r9, r1
   dc4ee:	d053      	beq.n	dc598 <_strtod_l+0xba8>
   dc4f0:	a335      	add	r3, pc, #212	; (adr r3, dc5c8 <_strtod_l+0xbd8>)
   dc4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4f6:	f7ff f895 	bl	db624 <__aeabi_dcmplt>
   dc4fa:	2800      	cmp	r0, #0
   dc4fc:	f47f acce 	bne.w	dbe9c <_strtod_l+0x4ac>
   dc500:	a333      	add	r3, pc, #204	; (adr r3, dc5d0 <_strtod_l+0xbe0>)
   dc502:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc506:	4640      	mov	r0, r8
   dc508:	4649      	mov	r1, r9
   dc50a:	f7ff f8a9 	bl	db660 <__aeabi_dcmpgt>
   dc50e:	2800      	cmp	r0, #0
   dc510:	f43f af7b 	beq.w	dc40a <_strtod_l+0xa1a>
   dc514:	e4c2      	b.n	dbe9c <_strtod_l+0x4ac>
   dc516:	9b04      	ldr	r3, [sp, #16]
   dc518:	b333      	cbz	r3, dc568 <_strtod_l+0xb78>
   dc51a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc51c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dc520:	d822      	bhi.n	dc568 <_strtod_l+0xb78>
   dc522:	a32d      	add	r3, pc, #180	; (adr r3, dc5d8 <_strtod_l+0xbe8>)
   dc524:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc528:	4640      	mov	r0, r8
   dc52a:	4649      	mov	r1, r9
   dc52c:	f7ff f884 	bl	db638 <__aeabi_dcmple>
   dc530:	b1a0      	cbz	r0, dc55c <_strtod_l+0xb6c>
   dc532:	4649      	mov	r1, r9
   dc534:	4640      	mov	r0, r8
   dc536:	f7ff f8b3 	bl	db6a0 <__aeabi_d2uiz>
   dc53a:	2801      	cmp	r0, #1
   dc53c:	bf38      	it	cc
   dc53e:	2001      	movcc	r0, #1
   dc540:	f7fe fd84 	bl	db04c <__aeabi_ui2d>
   dc544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc546:	4680      	mov	r8, r0
   dc548:	4689      	mov	r9, r1
   dc54a:	bb13      	cbnz	r3, dc592 <_strtod_l+0xba2>
   dc54c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc550:	9014      	str	r0, [sp, #80]	; 0x50
   dc552:	9315      	str	r3, [sp, #84]	; 0x54
   dc554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dc558:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dc55e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc560:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dc564:	1a9b      	subs	r3, r3, r2
   dc566:	930d      	str	r3, [sp, #52]	; 0x34
   dc568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc56c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dc570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc574:	f000 ff42 	bl	dd3fc <__ulp>
   dc578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc57c:	ec53 2b10 	vmov	r2, r3, d0
   dc580:	f7fe fdde 	bl	db140 <__aeabi_dmul>
   dc584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc588:	f7fe fc24 	bl	dadd4 <__adddf3>
   dc58c:	4682      	mov	sl, r0
   dc58e:	468b      	mov	fp, r1
   dc590:	e78f      	b.n	dc4b2 <_strtod_l+0xac2>
   dc592:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dc596:	e7dd      	b.n	dc554 <_strtod_l+0xb64>
   dc598:	a311      	add	r3, pc, #68	; (adr r3, dc5e0 <_strtod_l+0xbf0>)
   dc59a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc59e:	f7ff f841 	bl	db624 <__aeabi_dcmplt>
   dc5a2:	e7b4      	b.n	dc50e <_strtod_l+0xb1e>
   dc5a4:	2300      	movs	r3, #0
   dc5a6:	930e      	str	r3, [sp, #56]	; 0x38
   dc5a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc5aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc5ac:	6013      	str	r3, [r2, #0]
   dc5ae:	f7ff ba65 	b.w	dba7c <_strtod_l+0x8c>
   dc5b2:	2b65      	cmp	r3, #101	; 0x65
   dc5b4:	f43f ab5d 	beq.w	dbc72 <_strtod_l+0x282>
   dc5b8:	2b45      	cmp	r3, #69	; 0x45
   dc5ba:	f43f ab5a 	beq.w	dbc72 <_strtod_l+0x282>
   dc5be:	2201      	movs	r2, #1
   dc5c0:	f7ff bb92 	b.w	dbce8 <_strtod_l+0x2f8>
   dc5c4:	f3af 8000 	nop.w
   dc5c8:	94a03595 	.word	0x94a03595
   dc5cc:	3fdfffff 	.word	0x3fdfffff
   dc5d0:	35afe535 	.word	0x35afe535
   dc5d4:	3fe00000 	.word	0x3fe00000
   dc5d8:	ffc00000 	.word	0xffc00000
   dc5dc:	41dfffff 	.word	0x41dfffff
   dc5e0:	94a03595 	.word	0x94a03595
   dc5e4:	3fcfffff 	.word	0x3fcfffff
   dc5e8:	3ff00000 	.word	0x3ff00000
   dc5ec:	7ff00000 	.word	0x7ff00000
   dc5f0:	7fe00000 	.word	0x7fe00000
   dc5f4:	7c9fffff 	.word	0x7c9fffff
   dc5f8:	3fe00000 	.word	0x3fe00000
   dc5fc:	bff00000 	.word	0xbff00000
   dc600:	7fefffff 	.word	0x7fefffff

000dc604 <strtod>:
   dc604:	460a      	mov	r2, r1
   dc606:	4601      	mov	r1, r0
   dc608:	4802      	ldr	r0, [pc, #8]	; (dc614 <strtod+0x10>)
   dc60a:	4b03      	ldr	r3, [pc, #12]	; (dc618 <strtod+0x14>)
   dc60c:	6800      	ldr	r0, [r0, #0]
   dc60e:	f7ff b9ef 	b.w	db9f0 <_strtod_l>
   dc612:	bf00      	nop
   dc614:	2003dd18 	.word	0x2003dd18
   dc618:	2003dd80 	.word	0x2003dd80

000dc61c <_strtol_l.isra.0>:
   dc61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc620:	4e3a      	ldr	r6, [pc, #232]	; (dc70c <_strtol_l.isra.0+0xf0>)
   dc622:	4686      	mov	lr, r0
   dc624:	468c      	mov	ip, r1
   dc626:	4660      	mov	r0, ip
   dc628:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc62c:	5da5      	ldrb	r5, [r4, r6]
   dc62e:	f015 0508 	ands.w	r5, r5, #8
   dc632:	d1f8      	bne.n	dc626 <_strtol_l.isra.0+0xa>
   dc634:	2c2d      	cmp	r4, #45	; 0x2d
   dc636:	d133      	bne.n	dc6a0 <_strtol_l.isra.0+0x84>
   dc638:	f89c 4000 	ldrb.w	r4, [ip]
   dc63c:	f04f 0801 	mov.w	r8, #1
   dc640:	f100 0c02 	add.w	ip, r0, #2
   dc644:	2b00      	cmp	r3, #0
   dc646:	d05c      	beq.n	dc702 <_strtol_l.isra.0+0xe6>
   dc648:	2b10      	cmp	r3, #16
   dc64a:	d10c      	bne.n	dc666 <_strtol_l.isra.0+0x4a>
   dc64c:	2c30      	cmp	r4, #48	; 0x30
   dc64e:	d10a      	bne.n	dc666 <_strtol_l.isra.0+0x4a>
   dc650:	f89c 0000 	ldrb.w	r0, [ip]
   dc654:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc658:	2858      	cmp	r0, #88	; 0x58
   dc65a:	d14d      	bne.n	dc6f8 <_strtol_l.isra.0+0xdc>
   dc65c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc660:	2310      	movs	r3, #16
   dc662:	f10c 0c02 	add.w	ip, ip, #2
   dc666:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc66a:	3f01      	subs	r7, #1
   dc66c:	2600      	movs	r6, #0
   dc66e:	fbb7 f9f3 	udiv	r9, r7, r3
   dc672:	4630      	mov	r0, r6
   dc674:	fb03 7a19 	mls	sl, r3, r9, r7
   dc678:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc67c:	2d09      	cmp	r5, #9
   dc67e:	d818      	bhi.n	dc6b2 <_strtol_l.isra.0+0x96>
   dc680:	462c      	mov	r4, r5
   dc682:	42a3      	cmp	r3, r4
   dc684:	dd24      	ble.n	dc6d0 <_strtol_l.isra.0+0xb4>
   dc686:	1c75      	adds	r5, r6, #1
   dc688:	d007      	beq.n	dc69a <_strtol_l.isra.0+0x7e>
   dc68a:	4581      	cmp	r9, r0
   dc68c:	d31d      	bcc.n	dc6ca <_strtol_l.isra.0+0xae>
   dc68e:	d101      	bne.n	dc694 <_strtol_l.isra.0+0x78>
   dc690:	45a2      	cmp	sl, r4
   dc692:	db1a      	blt.n	dc6ca <_strtol_l.isra.0+0xae>
   dc694:	fb00 4003 	mla	r0, r0, r3, r4
   dc698:	2601      	movs	r6, #1
   dc69a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc69e:	e7eb      	b.n	dc678 <_strtol_l.isra.0+0x5c>
   dc6a0:	2c2b      	cmp	r4, #43	; 0x2b
   dc6a2:	bf08      	it	eq
   dc6a4:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc6a8:	46a8      	mov	r8, r5
   dc6aa:	bf08      	it	eq
   dc6ac:	f100 0c02 	addeq.w	ip, r0, #2
   dc6b0:	e7c8      	b.n	dc644 <_strtol_l.isra.0+0x28>
   dc6b2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc6b6:	2d19      	cmp	r5, #25
   dc6b8:	d801      	bhi.n	dc6be <_strtol_l.isra.0+0xa2>
   dc6ba:	3c37      	subs	r4, #55	; 0x37
   dc6bc:	e7e1      	b.n	dc682 <_strtol_l.isra.0+0x66>
   dc6be:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc6c2:	2d19      	cmp	r5, #25
   dc6c4:	d804      	bhi.n	dc6d0 <_strtol_l.isra.0+0xb4>
   dc6c6:	3c57      	subs	r4, #87	; 0x57
   dc6c8:	e7db      	b.n	dc682 <_strtol_l.isra.0+0x66>
   dc6ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc6ce:	e7e4      	b.n	dc69a <_strtol_l.isra.0+0x7e>
   dc6d0:	1c73      	adds	r3, r6, #1
   dc6d2:	d106      	bne.n	dc6e2 <_strtol_l.isra.0+0xc6>
   dc6d4:	2322      	movs	r3, #34	; 0x22
   dc6d6:	f8ce 3000 	str.w	r3, [lr]
   dc6da:	4638      	mov	r0, r7
   dc6dc:	b942      	cbnz	r2, dc6f0 <_strtol_l.isra.0+0xd4>
   dc6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6e2:	f1b8 0f00 	cmp.w	r8, #0
   dc6e6:	d000      	beq.n	dc6ea <_strtol_l.isra.0+0xce>
   dc6e8:	4240      	negs	r0, r0
   dc6ea:	2a00      	cmp	r2, #0
   dc6ec:	d0f7      	beq.n	dc6de <_strtol_l.isra.0+0xc2>
   dc6ee:	b10e      	cbz	r6, dc6f4 <_strtol_l.isra.0+0xd8>
   dc6f0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc6f4:	6011      	str	r1, [r2, #0]
   dc6f6:	e7f2      	b.n	dc6de <_strtol_l.isra.0+0xc2>
   dc6f8:	2430      	movs	r4, #48	; 0x30
   dc6fa:	2b00      	cmp	r3, #0
   dc6fc:	d1b3      	bne.n	dc666 <_strtol_l.isra.0+0x4a>
   dc6fe:	2308      	movs	r3, #8
   dc700:	e7b1      	b.n	dc666 <_strtol_l.isra.0+0x4a>
   dc702:	2c30      	cmp	r4, #48	; 0x30
   dc704:	d0a4      	beq.n	dc650 <_strtol_l.isra.0+0x34>
   dc706:	230a      	movs	r3, #10
   dc708:	e7ad      	b.n	dc666 <_strtol_l.isra.0+0x4a>
   dc70a:	bf00      	nop
   dc70c:	000de691 	.word	0x000de691

000dc710 <strtol>:
   dc710:	4613      	mov	r3, r2
   dc712:	460a      	mov	r2, r1
   dc714:	4601      	mov	r1, r0
   dc716:	4802      	ldr	r0, [pc, #8]	; (dc720 <strtol+0x10>)
   dc718:	6800      	ldr	r0, [r0, #0]
   dc71a:	f7ff bf7f 	b.w	dc61c <_strtol_l.isra.0>
   dc71e:	bf00      	nop
   dc720:	2003dd18 	.word	0x2003dd18

000dc724 <rshift>:
   dc724:	6903      	ldr	r3, [r0, #16]
   dc726:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dc72a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc72e:	ea4f 1261 	mov.w	r2, r1, asr #5
   dc732:	f100 0414 	add.w	r4, r0, #20
   dc736:	dd45      	ble.n	dc7c4 <rshift+0xa0>
   dc738:	f011 011f 	ands.w	r1, r1, #31
   dc73c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dc740:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dc744:	d10c      	bne.n	dc760 <rshift+0x3c>
   dc746:	f100 0710 	add.w	r7, r0, #16
   dc74a:	4629      	mov	r1, r5
   dc74c:	42b1      	cmp	r1, r6
   dc74e:	d334      	bcc.n	dc7ba <rshift+0x96>
   dc750:	1a9b      	subs	r3, r3, r2
   dc752:	009b      	lsls	r3, r3, #2
   dc754:	1eea      	subs	r2, r5, #3
   dc756:	4296      	cmp	r6, r2
   dc758:	bf38      	it	cc
   dc75a:	2300      	movcc	r3, #0
   dc75c:	4423      	add	r3, r4
   dc75e:	e015      	b.n	dc78c <rshift+0x68>
   dc760:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dc764:	f1c1 0820 	rsb	r8, r1, #32
   dc768:	40cf      	lsrs	r7, r1
   dc76a:	f105 0e04 	add.w	lr, r5, #4
   dc76e:	46a1      	mov	r9, r4
   dc770:	4576      	cmp	r6, lr
   dc772:	46f4      	mov	ip, lr
   dc774:	d815      	bhi.n	dc7a2 <rshift+0x7e>
   dc776:	1a9b      	subs	r3, r3, r2
   dc778:	009a      	lsls	r2, r3, #2
   dc77a:	3a04      	subs	r2, #4
   dc77c:	3501      	adds	r5, #1
   dc77e:	42ae      	cmp	r6, r5
   dc780:	bf38      	it	cc
   dc782:	2200      	movcc	r2, #0
   dc784:	18a3      	adds	r3, r4, r2
   dc786:	50a7      	str	r7, [r4, r2]
   dc788:	b107      	cbz	r7, dc78c <rshift+0x68>
   dc78a:	3304      	adds	r3, #4
   dc78c:	1b1a      	subs	r2, r3, r4
   dc78e:	42a3      	cmp	r3, r4
   dc790:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dc794:	bf08      	it	eq
   dc796:	2300      	moveq	r3, #0
   dc798:	6102      	str	r2, [r0, #16]
   dc79a:	bf08      	it	eq
   dc79c:	6143      	streq	r3, [r0, #20]
   dc79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc7a2:	f8dc c000 	ldr.w	ip, [ip]
   dc7a6:	fa0c fc08 	lsl.w	ip, ip, r8
   dc7aa:	ea4c 0707 	orr.w	r7, ip, r7
   dc7ae:	f849 7b04 	str.w	r7, [r9], #4
   dc7b2:	f85e 7b04 	ldr.w	r7, [lr], #4
   dc7b6:	40cf      	lsrs	r7, r1
   dc7b8:	e7da      	b.n	dc770 <rshift+0x4c>
   dc7ba:	f851 cb04 	ldr.w	ip, [r1], #4
   dc7be:	f847 cf04 	str.w	ip, [r7, #4]!
   dc7c2:	e7c3      	b.n	dc74c <rshift+0x28>
   dc7c4:	4623      	mov	r3, r4
   dc7c6:	e7e1      	b.n	dc78c <rshift+0x68>

000dc7c8 <__hexdig_fun>:
   dc7c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc7cc:	2b09      	cmp	r3, #9
   dc7ce:	d802      	bhi.n	dc7d6 <__hexdig_fun+0xe>
   dc7d0:	3820      	subs	r0, #32
   dc7d2:	b2c0      	uxtb	r0, r0
   dc7d4:	4770      	bx	lr
   dc7d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc7da:	2b05      	cmp	r3, #5
   dc7dc:	d801      	bhi.n	dc7e2 <__hexdig_fun+0x1a>
   dc7de:	3847      	subs	r0, #71	; 0x47
   dc7e0:	e7f7      	b.n	dc7d2 <__hexdig_fun+0xa>
   dc7e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc7e6:	2b05      	cmp	r3, #5
   dc7e8:	d801      	bhi.n	dc7ee <__hexdig_fun+0x26>
   dc7ea:	3827      	subs	r0, #39	; 0x27
   dc7ec:	e7f1      	b.n	dc7d2 <__hexdig_fun+0xa>
   dc7ee:	2000      	movs	r0, #0
   dc7f0:	4770      	bx	lr
	...

000dc7f4 <__gethex>:
   dc7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7f8:	ed2d 8b02 	vpush	{d8}
   dc7fc:	b089      	sub	sp, #36	; 0x24
   dc7fe:	ee08 0a10 	vmov	s16, r0
   dc802:	9304      	str	r3, [sp, #16]
   dc804:	4bbc      	ldr	r3, [pc, #752]	; (dcaf8 <__gethex+0x304>)
   dc806:	681b      	ldr	r3, [r3, #0]
   dc808:	9301      	str	r3, [sp, #4]
   dc80a:	4618      	mov	r0, r3
   dc80c:	468b      	mov	fp, r1
   dc80e:	4690      	mov	r8, r2
   dc810:	f7ff f8a5 	bl	db95e <strlen>
   dc814:	9b01      	ldr	r3, [sp, #4]
   dc816:	f8db 2000 	ldr.w	r2, [fp]
   dc81a:	4403      	add	r3, r0
   dc81c:	4682      	mov	sl, r0
   dc81e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc822:	9305      	str	r3, [sp, #20]
   dc824:	1c93      	adds	r3, r2, #2
   dc826:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dc82a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dc82e:	32fe      	adds	r2, #254	; 0xfe
   dc830:	18d1      	adds	r1, r2, r3
   dc832:	461f      	mov	r7, r3
   dc834:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc838:	9100      	str	r1, [sp, #0]
   dc83a:	2830      	cmp	r0, #48	; 0x30
   dc83c:	d0f8      	beq.n	dc830 <__gethex+0x3c>
   dc83e:	f7ff ffc3 	bl	dc7c8 <__hexdig_fun>
   dc842:	4604      	mov	r4, r0
   dc844:	2800      	cmp	r0, #0
   dc846:	d13a      	bne.n	dc8be <__gethex+0xca>
   dc848:	9901      	ldr	r1, [sp, #4]
   dc84a:	4652      	mov	r2, sl
   dc84c:	4638      	mov	r0, r7
   dc84e:	f7ff f88e 	bl	db96e <strncmp>
   dc852:	4605      	mov	r5, r0
   dc854:	2800      	cmp	r0, #0
   dc856:	d168      	bne.n	dc92a <__gethex+0x136>
   dc858:	f817 000a 	ldrb.w	r0, [r7, sl]
   dc85c:	eb07 060a 	add.w	r6, r7, sl
   dc860:	f7ff ffb2 	bl	dc7c8 <__hexdig_fun>
   dc864:	2800      	cmp	r0, #0
   dc866:	d062      	beq.n	dc92e <__gethex+0x13a>
   dc868:	4633      	mov	r3, r6
   dc86a:	7818      	ldrb	r0, [r3, #0]
   dc86c:	2830      	cmp	r0, #48	; 0x30
   dc86e:	461f      	mov	r7, r3
   dc870:	f103 0301 	add.w	r3, r3, #1
   dc874:	d0f9      	beq.n	dc86a <__gethex+0x76>
   dc876:	f7ff ffa7 	bl	dc7c8 <__hexdig_fun>
   dc87a:	2301      	movs	r3, #1
   dc87c:	fab0 f480 	clz	r4, r0
   dc880:	0964      	lsrs	r4, r4, #5
   dc882:	4635      	mov	r5, r6
   dc884:	9300      	str	r3, [sp, #0]
   dc886:	463a      	mov	r2, r7
   dc888:	4616      	mov	r6, r2
   dc88a:	3201      	adds	r2, #1
   dc88c:	7830      	ldrb	r0, [r6, #0]
   dc88e:	f7ff ff9b 	bl	dc7c8 <__hexdig_fun>
   dc892:	2800      	cmp	r0, #0
   dc894:	d1f8      	bne.n	dc888 <__gethex+0x94>
   dc896:	9901      	ldr	r1, [sp, #4]
   dc898:	4652      	mov	r2, sl
   dc89a:	4630      	mov	r0, r6
   dc89c:	f7ff f867 	bl	db96e <strncmp>
   dc8a0:	b980      	cbnz	r0, dc8c4 <__gethex+0xd0>
   dc8a2:	b94d      	cbnz	r5, dc8b8 <__gethex+0xc4>
   dc8a4:	eb06 050a 	add.w	r5, r6, sl
   dc8a8:	462a      	mov	r2, r5
   dc8aa:	4616      	mov	r6, r2
   dc8ac:	3201      	adds	r2, #1
   dc8ae:	7830      	ldrb	r0, [r6, #0]
   dc8b0:	f7ff ff8a 	bl	dc7c8 <__hexdig_fun>
   dc8b4:	2800      	cmp	r0, #0
   dc8b6:	d1f8      	bne.n	dc8aa <__gethex+0xb6>
   dc8b8:	1bad      	subs	r5, r5, r6
   dc8ba:	00ad      	lsls	r5, r5, #2
   dc8bc:	e004      	b.n	dc8c8 <__gethex+0xd4>
   dc8be:	2400      	movs	r4, #0
   dc8c0:	4625      	mov	r5, r4
   dc8c2:	e7e0      	b.n	dc886 <__gethex+0x92>
   dc8c4:	2d00      	cmp	r5, #0
   dc8c6:	d1f7      	bne.n	dc8b8 <__gethex+0xc4>
   dc8c8:	7833      	ldrb	r3, [r6, #0]
   dc8ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc8ce:	2b50      	cmp	r3, #80	; 0x50
   dc8d0:	d13b      	bne.n	dc94a <__gethex+0x156>
   dc8d2:	7873      	ldrb	r3, [r6, #1]
   dc8d4:	2b2b      	cmp	r3, #43	; 0x2b
   dc8d6:	d02c      	beq.n	dc932 <__gethex+0x13e>
   dc8d8:	2b2d      	cmp	r3, #45	; 0x2d
   dc8da:	d02e      	beq.n	dc93a <__gethex+0x146>
   dc8dc:	1c71      	adds	r1, r6, #1
   dc8de:	f04f 0900 	mov.w	r9, #0
   dc8e2:	7808      	ldrb	r0, [r1, #0]
   dc8e4:	f7ff ff70 	bl	dc7c8 <__hexdig_fun>
   dc8e8:	1e43      	subs	r3, r0, #1
   dc8ea:	b2db      	uxtb	r3, r3
   dc8ec:	2b18      	cmp	r3, #24
   dc8ee:	d82c      	bhi.n	dc94a <__gethex+0x156>
   dc8f0:	f1a0 0210 	sub.w	r2, r0, #16
   dc8f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc8f8:	f7ff ff66 	bl	dc7c8 <__hexdig_fun>
   dc8fc:	1e43      	subs	r3, r0, #1
   dc8fe:	b2db      	uxtb	r3, r3
   dc900:	2b18      	cmp	r3, #24
   dc902:	d91d      	bls.n	dc940 <__gethex+0x14c>
   dc904:	f1b9 0f00 	cmp.w	r9, #0
   dc908:	d000      	beq.n	dc90c <__gethex+0x118>
   dc90a:	4252      	negs	r2, r2
   dc90c:	4415      	add	r5, r2
   dc90e:	f8cb 1000 	str.w	r1, [fp]
   dc912:	b1e4      	cbz	r4, dc94e <__gethex+0x15a>
   dc914:	9b00      	ldr	r3, [sp, #0]
   dc916:	2b00      	cmp	r3, #0
   dc918:	bf14      	ite	ne
   dc91a:	2700      	movne	r7, #0
   dc91c:	2706      	moveq	r7, #6
   dc91e:	4638      	mov	r0, r7
   dc920:	b009      	add	sp, #36	; 0x24
   dc922:	ecbd 8b02 	vpop	{d8}
   dc926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc92a:	463e      	mov	r6, r7
   dc92c:	4625      	mov	r5, r4
   dc92e:	2401      	movs	r4, #1
   dc930:	e7ca      	b.n	dc8c8 <__gethex+0xd4>
   dc932:	f04f 0900 	mov.w	r9, #0
   dc936:	1cb1      	adds	r1, r6, #2
   dc938:	e7d3      	b.n	dc8e2 <__gethex+0xee>
   dc93a:	f04f 0901 	mov.w	r9, #1
   dc93e:	e7fa      	b.n	dc936 <__gethex+0x142>
   dc940:	230a      	movs	r3, #10
   dc942:	fb03 0202 	mla	r2, r3, r2, r0
   dc946:	3a10      	subs	r2, #16
   dc948:	e7d4      	b.n	dc8f4 <__gethex+0x100>
   dc94a:	4631      	mov	r1, r6
   dc94c:	e7df      	b.n	dc90e <__gethex+0x11a>
   dc94e:	1bf3      	subs	r3, r6, r7
   dc950:	3b01      	subs	r3, #1
   dc952:	4621      	mov	r1, r4
   dc954:	2b07      	cmp	r3, #7
   dc956:	dc52      	bgt.n	dc9fe <__gethex+0x20a>
   dc958:	ee18 0a10 	vmov	r0, s16
   dc95c:	f000 fa52 	bl	dce04 <_Balloc>
   dc960:	f04f 0b00 	mov.w	fp, #0
   dc964:	f100 0914 	add.w	r9, r0, #20
   dc968:	f1ca 0301 	rsb	r3, sl, #1
   dc96c:	4604      	mov	r4, r0
   dc96e:	f8cd 9008 	str.w	r9, [sp, #8]
   dc972:	f8cd b000 	str.w	fp, [sp]
   dc976:	9306      	str	r3, [sp, #24]
   dc978:	42b7      	cmp	r7, r6
   dc97a:	d343      	bcc.n	dca04 <__gethex+0x210>
   dc97c:	9802      	ldr	r0, [sp, #8]
   dc97e:	9b00      	ldr	r3, [sp, #0]
   dc980:	f840 3b04 	str.w	r3, [r0], #4
   dc984:	eba0 0009 	sub.w	r0, r0, r9
   dc988:	1080      	asrs	r0, r0, #2
   dc98a:	0146      	lsls	r6, r0, #5
   dc98c:	6120      	str	r0, [r4, #16]
   dc98e:	4618      	mov	r0, r3
   dc990:	f000 faff 	bl	dcf92 <__hi0bits>
   dc994:	1a30      	subs	r0, r6, r0
   dc996:	f8d8 6000 	ldr.w	r6, [r8]
   dc99a:	42b0      	cmp	r0, r6
   dc99c:	dd66      	ble.n	dca6c <__gethex+0x278>
   dc99e:	1b87      	subs	r7, r0, r6
   dc9a0:	4639      	mov	r1, r7
   dc9a2:	4620      	mov	r0, r4
   dc9a4:	f000 fe4c 	bl	dd640 <__any_on>
   dc9a8:	4682      	mov	sl, r0
   dc9aa:	b1a8      	cbz	r0, dc9d8 <__gethex+0x1e4>
   dc9ac:	1e7b      	subs	r3, r7, #1
   dc9ae:	1159      	asrs	r1, r3, #5
   dc9b0:	f003 021f 	and.w	r2, r3, #31
   dc9b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc9b8:	f04f 0a01 	mov.w	sl, #1
   dc9bc:	fa0a f202 	lsl.w	r2, sl, r2
   dc9c0:	420a      	tst	r2, r1
   dc9c2:	d009      	beq.n	dc9d8 <__gethex+0x1e4>
   dc9c4:	4553      	cmp	r3, sl
   dc9c6:	dd05      	ble.n	dc9d4 <__gethex+0x1e0>
   dc9c8:	1eb9      	subs	r1, r7, #2
   dc9ca:	4620      	mov	r0, r4
   dc9cc:	f000 fe38 	bl	dd640 <__any_on>
   dc9d0:	2800      	cmp	r0, #0
   dc9d2:	d148      	bne.n	dca66 <__gethex+0x272>
   dc9d4:	f04f 0a02 	mov.w	sl, #2
   dc9d8:	4639      	mov	r1, r7
   dc9da:	4620      	mov	r0, r4
   dc9dc:	f7ff fea2 	bl	dc724 <rshift>
   dc9e0:	443d      	add	r5, r7
   dc9e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc9e6:	42ab      	cmp	r3, r5
   dc9e8:	da4f      	bge.n	dca8a <__gethex+0x296>
   dc9ea:	ee18 0a10 	vmov	r0, s16
   dc9ee:	4621      	mov	r1, r4
   dc9f0:	f000 fa3c 	bl	dce6c <_Bfree>
   dc9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc9f6:	2300      	movs	r3, #0
   dc9f8:	6013      	str	r3, [r2, #0]
   dc9fa:	27a3      	movs	r7, #163	; 0xa3
   dc9fc:	e78f      	b.n	dc91e <__gethex+0x12a>
   dc9fe:	3101      	adds	r1, #1
   dca00:	105b      	asrs	r3, r3, #1
   dca02:	e7a7      	b.n	dc954 <__gethex+0x160>
   dca04:	1e73      	subs	r3, r6, #1
   dca06:	9a05      	ldr	r2, [sp, #20]
   dca08:	9303      	str	r3, [sp, #12]
   dca0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dca0e:	4293      	cmp	r3, r2
   dca10:	d019      	beq.n	dca46 <__gethex+0x252>
   dca12:	f1bb 0f20 	cmp.w	fp, #32
   dca16:	d107      	bne.n	dca28 <__gethex+0x234>
   dca18:	9b02      	ldr	r3, [sp, #8]
   dca1a:	9a00      	ldr	r2, [sp, #0]
   dca1c:	f843 2b04 	str.w	r2, [r3], #4
   dca20:	9302      	str	r3, [sp, #8]
   dca22:	2300      	movs	r3, #0
   dca24:	9300      	str	r3, [sp, #0]
   dca26:	469b      	mov	fp, r3
   dca28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dca2c:	f7ff fecc 	bl	dc7c8 <__hexdig_fun>
   dca30:	9b00      	ldr	r3, [sp, #0]
   dca32:	f000 000f 	and.w	r0, r0, #15
   dca36:	fa00 f00b 	lsl.w	r0, r0, fp
   dca3a:	4303      	orrs	r3, r0
   dca3c:	9300      	str	r3, [sp, #0]
   dca3e:	f10b 0b04 	add.w	fp, fp, #4
   dca42:	9b03      	ldr	r3, [sp, #12]
   dca44:	e00d      	b.n	dca62 <__gethex+0x26e>
   dca46:	9b03      	ldr	r3, [sp, #12]
   dca48:	9a06      	ldr	r2, [sp, #24]
   dca4a:	4413      	add	r3, r2
   dca4c:	42bb      	cmp	r3, r7
   dca4e:	d3e0      	bcc.n	dca12 <__gethex+0x21e>
   dca50:	4618      	mov	r0, r3
   dca52:	9901      	ldr	r1, [sp, #4]
   dca54:	9307      	str	r3, [sp, #28]
   dca56:	4652      	mov	r2, sl
   dca58:	f7fe ff89 	bl	db96e <strncmp>
   dca5c:	9b07      	ldr	r3, [sp, #28]
   dca5e:	2800      	cmp	r0, #0
   dca60:	d1d7      	bne.n	dca12 <__gethex+0x21e>
   dca62:	461e      	mov	r6, r3
   dca64:	e788      	b.n	dc978 <__gethex+0x184>
   dca66:	f04f 0a03 	mov.w	sl, #3
   dca6a:	e7b5      	b.n	dc9d8 <__gethex+0x1e4>
   dca6c:	da0a      	bge.n	dca84 <__gethex+0x290>
   dca6e:	1a37      	subs	r7, r6, r0
   dca70:	4621      	mov	r1, r4
   dca72:	ee18 0a10 	vmov	r0, s16
   dca76:	463a      	mov	r2, r7
   dca78:	f000 fbce 	bl	dd218 <__lshift>
   dca7c:	1bed      	subs	r5, r5, r7
   dca7e:	4604      	mov	r4, r0
   dca80:	f100 0914 	add.w	r9, r0, #20
   dca84:	f04f 0a00 	mov.w	sl, #0
   dca88:	e7ab      	b.n	dc9e2 <__gethex+0x1ee>
   dca8a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dca8e:	42a8      	cmp	r0, r5
   dca90:	dd6d      	ble.n	dcb6e <__gethex+0x37a>
   dca92:	1b45      	subs	r5, r0, r5
   dca94:	42ae      	cmp	r6, r5
   dca96:	dc31      	bgt.n	dcafc <__gethex+0x308>
   dca98:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dca9c:	2b02      	cmp	r3, #2
   dca9e:	d023      	beq.n	dcae8 <__gethex+0x2f4>
   dcaa0:	2b03      	cmp	r3, #3
   dcaa2:	d025      	beq.n	dcaf0 <__gethex+0x2fc>
   dcaa4:	2b01      	cmp	r3, #1
   dcaa6:	d115      	bne.n	dcad4 <__gethex+0x2e0>
   dcaa8:	42ae      	cmp	r6, r5
   dcaaa:	d113      	bne.n	dcad4 <__gethex+0x2e0>
   dcaac:	2e01      	cmp	r6, #1
   dcaae:	d10b      	bne.n	dcac8 <__gethex+0x2d4>
   dcab0:	9a04      	ldr	r2, [sp, #16]
   dcab2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dcab6:	6013      	str	r3, [r2, #0]
   dcab8:	2301      	movs	r3, #1
   dcaba:	6123      	str	r3, [r4, #16]
   dcabc:	f8c9 3000 	str.w	r3, [r9]
   dcac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcac2:	2762      	movs	r7, #98	; 0x62
   dcac4:	601c      	str	r4, [r3, #0]
   dcac6:	e72a      	b.n	dc91e <__gethex+0x12a>
   dcac8:	1e71      	subs	r1, r6, #1
   dcaca:	4620      	mov	r0, r4
   dcacc:	f000 fdb8 	bl	dd640 <__any_on>
   dcad0:	2800      	cmp	r0, #0
   dcad2:	d1ed      	bne.n	dcab0 <__gethex+0x2bc>
   dcad4:	ee18 0a10 	vmov	r0, s16
   dcad8:	4621      	mov	r1, r4
   dcada:	f000 f9c7 	bl	dce6c <_Bfree>
   dcade:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dcae0:	2300      	movs	r3, #0
   dcae2:	6013      	str	r3, [r2, #0]
   dcae4:	2750      	movs	r7, #80	; 0x50
   dcae6:	e71a      	b.n	dc91e <__gethex+0x12a>
   dcae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcaea:	2b00      	cmp	r3, #0
   dcaec:	d1f2      	bne.n	dcad4 <__gethex+0x2e0>
   dcaee:	e7df      	b.n	dcab0 <__gethex+0x2bc>
   dcaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcaf2:	2b00      	cmp	r3, #0
   dcaf4:	d1dc      	bne.n	dcab0 <__gethex+0x2bc>
   dcaf6:	e7ed      	b.n	dcad4 <__gethex+0x2e0>
   dcaf8:	000de794 	.word	0x000de794
   dcafc:	1e6f      	subs	r7, r5, #1
   dcafe:	f1ba 0f00 	cmp.w	sl, #0
   dcb02:	d131      	bne.n	dcb68 <__gethex+0x374>
   dcb04:	b127      	cbz	r7, dcb10 <__gethex+0x31c>
   dcb06:	4639      	mov	r1, r7
   dcb08:	4620      	mov	r0, r4
   dcb0a:	f000 fd99 	bl	dd640 <__any_on>
   dcb0e:	4682      	mov	sl, r0
   dcb10:	117b      	asrs	r3, r7, #5
   dcb12:	2101      	movs	r1, #1
   dcb14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dcb18:	f007 071f 	and.w	r7, r7, #31
   dcb1c:	fa01 f707 	lsl.w	r7, r1, r7
   dcb20:	421f      	tst	r7, r3
   dcb22:	4629      	mov	r1, r5
   dcb24:	4620      	mov	r0, r4
   dcb26:	bf18      	it	ne
   dcb28:	f04a 0a02 	orrne.w	sl, sl, #2
   dcb2c:	1b76      	subs	r6, r6, r5
   dcb2e:	f7ff fdf9 	bl	dc724 <rshift>
   dcb32:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dcb36:	2702      	movs	r7, #2
   dcb38:	f1ba 0f00 	cmp.w	sl, #0
   dcb3c:	d048      	beq.n	dcbd0 <__gethex+0x3dc>
   dcb3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dcb42:	2b02      	cmp	r3, #2
   dcb44:	d015      	beq.n	dcb72 <__gethex+0x37e>
   dcb46:	2b03      	cmp	r3, #3
   dcb48:	d017      	beq.n	dcb7a <__gethex+0x386>
   dcb4a:	2b01      	cmp	r3, #1
   dcb4c:	d109      	bne.n	dcb62 <__gethex+0x36e>
   dcb4e:	f01a 0f02 	tst.w	sl, #2
   dcb52:	d006      	beq.n	dcb62 <__gethex+0x36e>
   dcb54:	f8d9 0000 	ldr.w	r0, [r9]
   dcb58:	ea4a 0a00 	orr.w	sl, sl, r0
   dcb5c:	f01a 0f01 	tst.w	sl, #1
   dcb60:	d10e      	bne.n	dcb80 <__gethex+0x38c>
   dcb62:	f047 0710 	orr.w	r7, r7, #16
   dcb66:	e033      	b.n	dcbd0 <__gethex+0x3dc>
   dcb68:	f04f 0a01 	mov.w	sl, #1
   dcb6c:	e7d0      	b.n	dcb10 <__gethex+0x31c>
   dcb6e:	2701      	movs	r7, #1
   dcb70:	e7e2      	b.n	dcb38 <__gethex+0x344>
   dcb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcb74:	f1c3 0301 	rsb	r3, r3, #1
   dcb78:	9315      	str	r3, [sp, #84]	; 0x54
   dcb7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcb7c:	2b00      	cmp	r3, #0
   dcb7e:	d0f0      	beq.n	dcb62 <__gethex+0x36e>
   dcb80:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dcb84:	f104 0314 	add.w	r3, r4, #20
   dcb88:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dcb8c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dcb90:	f04f 0c00 	mov.w	ip, #0
   dcb94:	4618      	mov	r0, r3
   dcb96:	f853 2b04 	ldr.w	r2, [r3], #4
   dcb9a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dcb9e:	d01c      	beq.n	dcbda <__gethex+0x3e6>
   dcba0:	3201      	adds	r2, #1
   dcba2:	6002      	str	r2, [r0, #0]
   dcba4:	2f02      	cmp	r7, #2
   dcba6:	f104 0314 	add.w	r3, r4, #20
   dcbaa:	d13a      	bne.n	dcc22 <__gethex+0x42e>
   dcbac:	f8d8 2000 	ldr.w	r2, [r8]
   dcbb0:	3a01      	subs	r2, #1
   dcbb2:	42b2      	cmp	r2, r6
   dcbb4:	d10a      	bne.n	dcbcc <__gethex+0x3d8>
   dcbb6:	1171      	asrs	r1, r6, #5
   dcbb8:	2201      	movs	r2, #1
   dcbba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dcbbe:	f006 061f 	and.w	r6, r6, #31
   dcbc2:	fa02 f606 	lsl.w	r6, r2, r6
   dcbc6:	421e      	tst	r6, r3
   dcbc8:	bf18      	it	ne
   dcbca:	4617      	movne	r7, r2
   dcbcc:	f047 0720 	orr.w	r7, r7, #32
   dcbd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcbd2:	601c      	str	r4, [r3, #0]
   dcbd4:	9b04      	ldr	r3, [sp, #16]
   dcbd6:	601d      	str	r5, [r3, #0]
   dcbd8:	e6a1      	b.n	dc91e <__gethex+0x12a>
   dcbda:	4299      	cmp	r1, r3
   dcbdc:	f843 cc04 	str.w	ip, [r3, #-4]
   dcbe0:	d8d8      	bhi.n	dcb94 <__gethex+0x3a0>
   dcbe2:	68a3      	ldr	r3, [r4, #8]
   dcbe4:	4599      	cmp	r9, r3
   dcbe6:	db14      	blt.n	dcc12 <__gethex+0x41e>
   dcbe8:	6861      	ldr	r1, [r4, #4]
   dcbea:	ee18 0a10 	vmov	r0, s16
   dcbee:	3101      	adds	r1, #1
   dcbf0:	f000 f908 	bl	dce04 <_Balloc>
   dcbf4:	6922      	ldr	r2, [r4, #16]
   dcbf6:	3202      	adds	r2, #2
   dcbf8:	f104 010c 	add.w	r1, r4, #12
   dcbfc:	4682      	mov	sl, r0
   dcbfe:	0092      	lsls	r2, r2, #2
   dcc00:	300c      	adds	r0, #12
   dcc02:	f7fe fe29 	bl	db858 <memcpy>
   dcc06:	4621      	mov	r1, r4
   dcc08:	ee18 0a10 	vmov	r0, s16
   dcc0c:	f000 f92e 	bl	dce6c <_Bfree>
   dcc10:	4654      	mov	r4, sl
   dcc12:	6923      	ldr	r3, [r4, #16]
   dcc14:	1c5a      	adds	r2, r3, #1
   dcc16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dcc1a:	6122      	str	r2, [r4, #16]
   dcc1c:	2201      	movs	r2, #1
   dcc1e:	615a      	str	r2, [r3, #20]
   dcc20:	e7c0      	b.n	dcba4 <__gethex+0x3b0>
   dcc22:	6922      	ldr	r2, [r4, #16]
   dcc24:	454a      	cmp	r2, r9
   dcc26:	dd0b      	ble.n	dcc40 <__gethex+0x44c>
   dcc28:	2101      	movs	r1, #1
   dcc2a:	4620      	mov	r0, r4
   dcc2c:	f7ff fd7a 	bl	dc724 <rshift>
   dcc30:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcc34:	3501      	adds	r5, #1
   dcc36:	42ab      	cmp	r3, r5
   dcc38:	f6ff aed7 	blt.w	dc9ea <__gethex+0x1f6>
   dcc3c:	2701      	movs	r7, #1
   dcc3e:	e7c5      	b.n	dcbcc <__gethex+0x3d8>
   dcc40:	f016 061f 	ands.w	r6, r6, #31
   dcc44:	d0fa      	beq.n	dcc3c <__gethex+0x448>
   dcc46:	449b      	add	fp, r3
   dcc48:	f1c6 0620 	rsb	r6, r6, #32
   dcc4c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dcc50:	f000 f99f 	bl	dcf92 <__hi0bits>
   dcc54:	42b0      	cmp	r0, r6
   dcc56:	dbe7      	blt.n	dcc28 <__gethex+0x434>
   dcc58:	e7f0      	b.n	dcc3c <__gethex+0x448>
   dcc5a:	bf00      	nop

000dcc5c <L_shift>:
   dcc5c:	f1c2 0208 	rsb	r2, r2, #8
   dcc60:	0092      	lsls	r2, r2, #2
   dcc62:	b570      	push	{r4, r5, r6, lr}
   dcc64:	f1c2 0620 	rsb	r6, r2, #32
   dcc68:	6843      	ldr	r3, [r0, #4]
   dcc6a:	6804      	ldr	r4, [r0, #0]
   dcc6c:	fa03 f506 	lsl.w	r5, r3, r6
   dcc70:	432c      	orrs	r4, r5
   dcc72:	40d3      	lsrs	r3, r2
   dcc74:	6004      	str	r4, [r0, #0]
   dcc76:	f840 3f04 	str.w	r3, [r0, #4]!
   dcc7a:	4288      	cmp	r0, r1
   dcc7c:	d3f4      	bcc.n	dcc68 <L_shift+0xc>
   dcc7e:	bd70      	pop	{r4, r5, r6, pc}

000dcc80 <__match>:
   dcc80:	b530      	push	{r4, r5, lr}
   dcc82:	6803      	ldr	r3, [r0, #0]
   dcc84:	3301      	adds	r3, #1
   dcc86:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcc8a:	b914      	cbnz	r4, dcc92 <__match+0x12>
   dcc8c:	6003      	str	r3, [r0, #0]
   dcc8e:	2001      	movs	r0, #1
   dcc90:	bd30      	pop	{r4, r5, pc}
   dcc92:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcc96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dcc9a:	2d19      	cmp	r5, #25
   dcc9c:	bf98      	it	ls
   dcc9e:	3220      	addls	r2, #32
   dcca0:	42a2      	cmp	r2, r4
   dcca2:	d0f0      	beq.n	dcc86 <__match+0x6>
   dcca4:	2000      	movs	r0, #0
   dcca6:	e7f3      	b.n	dcc90 <__match+0x10>

000dcca8 <__hexnan>:
   dcca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dccac:	680b      	ldr	r3, [r1, #0]
   dccae:	6801      	ldr	r1, [r0, #0]
   dccb0:	115e      	asrs	r6, r3, #5
   dccb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dccb6:	f013 031f 	ands.w	r3, r3, #31
   dccba:	b087      	sub	sp, #28
   dccbc:	bf18      	it	ne
   dccbe:	3604      	addne	r6, #4
   dccc0:	2500      	movs	r5, #0
   dccc2:	1f37      	subs	r7, r6, #4
   dccc4:	4682      	mov	sl, r0
   dccc6:	4690      	mov	r8, r2
   dccc8:	9301      	str	r3, [sp, #4]
   dccca:	f846 5c04 	str.w	r5, [r6, #-4]
   dccce:	46b9      	mov	r9, r7
   dccd0:	463c      	mov	r4, r7
   dccd2:	9502      	str	r5, [sp, #8]
   dccd4:	46ab      	mov	fp, r5
   dccd6:	784a      	ldrb	r2, [r1, #1]
   dccd8:	1c4b      	adds	r3, r1, #1
   dccda:	9303      	str	r3, [sp, #12]
   dccdc:	b342      	cbz	r2, dcd30 <__hexnan+0x88>
   dccde:	4610      	mov	r0, r2
   dcce0:	9105      	str	r1, [sp, #20]
   dcce2:	9204      	str	r2, [sp, #16]
   dcce4:	f7ff fd70 	bl	dc7c8 <__hexdig_fun>
   dcce8:	2800      	cmp	r0, #0
   dccea:	d14f      	bne.n	dcd8c <__hexnan+0xe4>
   dccec:	9a04      	ldr	r2, [sp, #16]
   dccee:	9905      	ldr	r1, [sp, #20]
   dccf0:	2a20      	cmp	r2, #32
   dccf2:	d818      	bhi.n	dcd26 <__hexnan+0x7e>
   dccf4:	9b02      	ldr	r3, [sp, #8]
   dccf6:	459b      	cmp	fp, r3
   dccf8:	dd13      	ble.n	dcd22 <__hexnan+0x7a>
   dccfa:	454c      	cmp	r4, r9
   dccfc:	d206      	bcs.n	dcd0c <__hexnan+0x64>
   dccfe:	2d07      	cmp	r5, #7
   dcd00:	dc04      	bgt.n	dcd0c <__hexnan+0x64>
   dcd02:	462a      	mov	r2, r5
   dcd04:	4649      	mov	r1, r9
   dcd06:	4620      	mov	r0, r4
   dcd08:	f7ff ffa8 	bl	dcc5c <L_shift>
   dcd0c:	4544      	cmp	r4, r8
   dcd0e:	d950      	bls.n	dcdb2 <__hexnan+0x10a>
   dcd10:	2300      	movs	r3, #0
   dcd12:	f1a4 0904 	sub.w	r9, r4, #4
   dcd16:	f844 3c04 	str.w	r3, [r4, #-4]
   dcd1a:	f8cd b008 	str.w	fp, [sp, #8]
   dcd1e:	464c      	mov	r4, r9
   dcd20:	461d      	mov	r5, r3
   dcd22:	9903      	ldr	r1, [sp, #12]
   dcd24:	e7d7      	b.n	dccd6 <__hexnan+0x2e>
   dcd26:	2a29      	cmp	r2, #41	; 0x29
   dcd28:	d156      	bne.n	dcdd8 <__hexnan+0x130>
   dcd2a:	3102      	adds	r1, #2
   dcd2c:	f8ca 1000 	str.w	r1, [sl]
   dcd30:	f1bb 0f00 	cmp.w	fp, #0
   dcd34:	d050      	beq.n	dcdd8 <__hexnan+0x130>
   dcd36:	454c      	cmp	r4, r9
   dcd38:	d206      	bcs.n	dcd48 <__hexnan+0xa0>
   dcd3a:	2d07      	cmp	r5, #7
   dcd3c:	dc04      	bgt.n	dcd48 <__hexnan+0xa0>
   dcd3e:	462a      	mov	r2, r5
   dcd40:	4649      	mov	r1, r9
   dcd42:	4620      	mov	r0, r4
   dcd44:	f7ff ff8a 	bl	dcc5c <L_shift>
   dcd48:	4544      	cmp	r4, r8
   dcd4a:	d934      	bls.n	dcdb6 <__hexnan+0x10e>
   dcd4c:	f1a8 0204 	sub.w	r2, r8, #4
   dcd50:	4623      	mov	r3, r4
   dcd52:	f853 1b04 	ldr.w	r1, [r3], #4
   dcd56:	f842 1f04 	str.w	r1, [r2, #4]!
   dcd5a:	429f      	cmp	r7, r3
   dcd5c:	d2f9      	bcs.n	dcd52 <__hexnan+0xaa>
   dcd5e:	1b3b      	subs	r3, r7, r4
   dcd60:	f023 0303 	bic.w	r3, r3, #3
   dcd64:	3304      	adds	r3, #4
   dcd66:	3401      	adds	r4, #1
   dcd68:	3e03      	subs	r6, #3
   dcd6a:	42b4      	cmp	r4, r6
   dcd6c:	bf88      	it	hi
   dcd6e:	2304      	movhi	r3, #4
   dcd70:	4443      	add	r3, r8
   dcd72:	2200      	movs	r2, #0
   dcd74:	f843 2b04 	str.w	r2, [r3], #4
   dcd78:	429f      	cmp	r7, r3
   dcd7a:	d2fb      	bcs.n	dcd74 <__hexnan+0xcc>
   dcd7c:	683b      	ldr	r3, [r7, #0]
   dcd7e:	b91b      	cbnz	r3, dcd88 <__hexnan+0xe0>
   dcd80:	4547      	cmp	r7, r8
   dcd82:	d127      	bne.n	dcdd4 <__hexnan+0x12c>
   dcd84:	2301      	movs	r3, #1
   dcd86:	603b      	str	r3, [r7, #0]
   dcd88:	2005      	movs	r0, #5
   dcd8a:	e026      	b.n	dcdda <__hexnan+0x132>
   dcd8c:	3501      	adds	r5, #1
   dcd8e:	2d08      	cmp	r5, #8
   dcd90:	f10b 0b01 	add.w	fp, fp, #1
   dcd94:	dd06      	ble.n	dcda4 <__hexnan+0xfc>
   dcd96:	4544      	cmp	r4, r8
   dcd98:	d9c3      	bls.n	dcd22 <__hexnan+0x7a>
   dcd9a:	2300      	movs	r3, #0
   dcd9c:	f844 3c04 	str.w	r3, [r4, #-4]
   dcda0:	2501      	movs	r5, #1
   dcda2:	3c04      	subs	r4, #4
   dcda4:	6822      	ldr	r2, [r4, #0]
   dcda6:	f000 000f 	and.w	r0, r0, #15
   dcdaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dcdae:	6022      	str	r2, [r4, #0]
   dcdb0:	e7b7      	b.n	dcd22 <__hexnan+0x7a>
   dcdb2:	2508      	movs	r5, #8
   dcdb4:	e7b5      	b.n	dcd22 <__hexnan+0x7a>
   dcdb6:	9b01      	ldr	r3, [sp, #4]
   dcdb8:	2b00      	cmp	r3, #0
   dcdba:	d0df      	beq.n	dcd7c <__hexnan+0xd4>
   dcdbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcdc0:	f1c3 0320 	rsb	r3, r3, #32
   dcdc4:	fa22 f303 	lsr.w	r3, r2, r3
   dcdc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dcdcc:	401a      	ands	r2, r3
   dcdce:	f846 2c04 	str.w	r2, [r6, #-4]
   dcdd2:	e7d3      	b.n	dcd7c <__hexnan+0xd4>
   dcdd4:	3f04      	subs	r7, #4
   dcdd6:	e7d1      	b.n	dcd7c <__hexnan+0xd4>
   dcdd8:	2004      	movs	r0, #4
   dcdda:	b007      	add	sp, #28
   dcddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcde0 <__ascii_mbtowc>:
   dcde0:	b082      	sub	sp, #8
   dcde2:	b901      	cbnz	r1, dcde6 <__ascii_mbtowc+0x6>
   dcde4:	a901      	add	r1, sp, #4
   dcde6:	b142      	cbz	r2, dcdfa <__ascii_mbtowc+0x1a>
   dcde8:	b14b      	cbz	r3, dcdfe <__ascii_mbtowc+0x1e>
   dcdea:	7813      	ldrb	r3, [r2, #0]
   dcdec:	600b      	str	r3, [r1, #0]
   dcdee:	7812      	ldrb	r2, [r2, #0]
   dcdf0:	1e10      	subs	r0, r2, #0
   dcdf2:	bf18      	it	ne
   dcdf4:	2001      	movne	r0, #1
   dcdf6:	b002      	add	sp, #8
   dcdf8:	4770      	bx	lr
   dcdfa:	4610      	mov	r0, r2
   dcdfc:	e7fb      	b.n	dcdf6 <__ascii_mbtowc+0x16>
   dcdfe:	f06f 0001 	mvn.w	r0, #1
   dce02:	e7f8      	b.n	dcdf6 <__ascii_mbtowc+0x16>

000dce04 <_Balloc>:
   dce04:	b570      	push	{r4, r5, r6, lr}
   dce06:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dce08:	4604      	mov	r4, r0
   dce0a:	460d      	mov	r5, r1
   dce0c:	b93e      	cbnz	r6, dce1e <_Balloc+0x1a>
   dce0e:	2010      	movs	r0, #16
   dce10:	f7fb ff88 	bl	d8d24 <malloc>
   dce14:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dce18:	6260      	str	r0, [r4, #36]	; 0x24
   dce1a:	6006      	str	r6, [r0, #0]
   dce1c:	60c6      	str	r6, [r0, #12]
   dce1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dce20:	68f3      	ldr	r3, [r6, #12]
   dce22:	b183      	cbz	r3, dce46 <_Balloc+0x42>
   dce24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dce26:	68db      	ldr	r3, [r3, #12]
   dce28:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dce2c:	b9b8      	cbnz	r0, dce5e <_Balloc+0x5a>
   dce2e:	2101      	movs	r1, #1
   dce30:	fa01 f605 	lsl.w	r6, r1, r5
   dce34:	1d72      	adds	r2, r6, #5
   dce36:	0092      	lsls	r2, r2, #2
   dce38:	4620      	mov	r0, r4
   dce3a:	f000 fc22 	bl	dd682 <_calloc_r>
   dce3e:	b160      	cbz	r0, dce5a <_Balloc+0x56>
   dce40:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dce44:	e00e      	b.n	dce64 <_Balloc+0x60>
   dce46:	2221      	movs	r2, #33	; 0x21
   dce48:	2104      	movs	r1, #4
   dce4a:	4620      	mov	r0, r4
   dce4c:	f000 fc19 	bl	dd682 <_calloc_r>
   dce50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dce52:	60f0      	str	r0, [r6, #12]
   dce54:	68db      	ldr	r3, [r3, #12]
   dce56:	2b00      	cmp	r3, #0
   dce58:	d1e4      	bne.n	dce24 <_Balloc+0x20>
   dce5a:	2000      	movs	r0, #0
   dce5c:	bd70      	pop	{r4, r5, r6, pc}
   dce5e:	6802      	ldr	r2, [r0, #0]
   dce60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dce64:	2300      	movs	r3, #0
   dce66:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dce6a:	e7f7      	b.n	dce5c <_Balloc+0x58>

000dce6c <_Bfree>:
   dce6c:	b570      	push	{r4, r5, r6, lr}
   dce6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dce70:	4605      	mov	r5, r0
   dce72:	460c      	mov	r4, r1
   dce74:	b93e      	cbnz	r6, dce86 <_Bfree+0x1a>
   dce76:	2010      	movs	r0, #16
   dce78:	f7fb ff54 	bl	d8d24 <malloc>
   dce7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dce80:	6268      	str	r0, [r5, #36]	; 0x24
   dce82:	6006      	str	r6, [r0, #0]
   dce84:	60c6      	str	r6, [r0, #12]
   dce86:	b13c      	cbz	r4, dce98 <_Bfree+0x2c>
   dce88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dce8a:	6862      	ldr	r2, [r4, #4]
   dce8c:	68db      	ldr	r3, [r3, #12]
   dce8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dce92:	6021      	str	r1, [r4, #0]
   dce94:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dce98:	bd70      	pop	{r4, r5, r6, pc}

000dce9a <__multadd>:
   dce9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dce9e:	690e      	ldr	r6, [r1, #16]
   dcea0:	4607      	mov	r7, r0
   dcea2:	4698      	mov	r8, r3
   dcea4:	460c      	mov	r4, r1
   dcea6:	f101 0014 	add.w	r0, r1, #20
   dceaa:	2300      	movs	r3, #0
   dceac:	6805      	ldr	r5, [r0, #0]
   dceae:	b2a9      	uxth	r1, r5
   dceb0:	fb02 8101 	mla	r1, r2, r1, r8
   dceb4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dceb8:	0c2d      	lsrs	r5, r5, #16
   dceba:	fb02 c505 	mla	r5, r2, r5, ip
   dcebe:	b289      	uxth	r1, r1
   dcec0:	3301      	adds	r3, #1
   dcec2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dcec6:	429e      	cmp	r6, r3
   dcec8:	f840 1b04 	str.w	r1, [r0], #4
   dcecc:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dced0:	dcec      	bgt.n	dceac <__multadd+0x12>
   dced2:	f1b8 0f00 	cmp.w	r8, #0
   dced6:	d01b      	beq.n	dcf10 <__multadd+0x76>
   dced8:	68a3      	ldr	r3, [r4, #8]
   dceda:	42b3      	cmp	r3, r6
   dcedc:	dc12      	bgt.n	dcf04 <__multadd+0x6a>
   dcede:	6861      	ldr	r1, [r4, #4]
   dcee0:	4638      	mov	r0, r7
   dcee2:	3101      	adds	r1, #1
   dcee4:	f7ff ff8e 	bl	dce04 <_Balloc>
   dcee8:	6922      	ldr	r2, [r4, #16]
   dceea:	3202      	adds	r2, #2
   dceec:	f104 010c 	add.w	r1, r4, #12
   dcef0:	4605      	mov	r5, r0
   dcef2:	0092      	lsls	r2, r2, #2
   dcef4:	300c      	adds	r0, #12
   dcef6:	f7fe fcaf 	bl	db858 <memcpy>
   dcefa:	4621      	mov	r1, r4
   dcefc:	4638      	mov	r0, r7
   dcefe:	f7ff ffb5 	bl	dce6c <_Bfree>
   dcf02:	462c      	mov	r4, r5
   dcf04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dcf08:	3601      	adds	r6, #1
   dcf0a:	f8c3 8014 	str.w	r8, [r3, #20]
   dcf0e:	6126      	str	r6, [r4, #16]
   dcf10:	4620      	mov	r0, r4
   dcf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcf16 <__s2b>:
   dcf16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcf1a:	460c      	mov	r4, r1
   dcf1c:	4615      	mov	r5, r2
   dcf1e:	461f      	mov	r7, r3
   dcf20:	2209      	movs	r2, #9
   dcf22:	3308      	adds	r3, #8
   dcf24:	4606      	mov	r6, r0
   dcf26:	fb93 f3f2 	sdiv	r3, r3, r2
   dcf2a:	2100      	movs	r1, #0
   dcf2c:	2201      	movs	r2, #1
   dcf2e:	429a      	cmp	r2, r3
   dcf30:	db20      	blt.n	dcf74 <__s2b+0x5e>
   dcf32:	4630      	mov	r0, r6
   dcf34:	f7ff ff66 	bl	dce04 <_Balloc>
   dcf38:	9b08      	ldr	r3, [sp, #32]
   dcf3a:	6143      	str	r3, [r0, #20]
   dcf3c:	2d09      	cmp	r5, #9
   dcf3e:	f04f 0301 	mov.w	r3, #1
   dcf42:	6103      	str	r3, [r0, #16]
   dcf44:	dd19      	ble.n	dcf7a <__s2b+0x64>
   dcf46:	f104 0909 	add.w	r9, r4, #9
   dcf4a:	46c8      	mov	r8, r9
   dcf4c:	442c      	add	r4, r5
   dcf4e:	f818 3b01 	ldrb.w	r3, [r8], #1
   dcf52:	4601      	mov	r1, r0
   dcf54:	3b30      	subs	r3, #48	; 0x30
   dcf56:	220a      	movs	r2, #10
   dcf58:	4630      	mov	r0, r6
   dcf5a:	f7ff ff9e 	bl	dce9a <__multadd>
   dcf5e:	45a0      	cmp	r8, r4
   dcf60:	d1f5      	bne.n	dcf4e <__s2b+0x38>
   dcf62:	f1a5 0408 	sub.w	r4, r5, #8
   dcf66:	444c      	add	r4, r9
   dcf68:	1b2d      	subs	r5, r5, r4
   dcf6a:	1963      	adds	r3, r4, r5
   dcf6c:	42bb      	cmp	r3, r7
   dcf6e:	db07      	blt.n	dcf80 <__s2b+0x6a>
   dcf70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcf74:	0052      	lsls	r2, r2, #1
   dcf76:	3101      	adds	r1, #1
   dcf78:	e7d9      	b.n	dcf2e <__s2b+0x18>
   dcf7a:	340a      	adds	r4, #10
   dcf7c:	2509      	movs	r5, #9
   dcf7e:	e7f3      	b.n	dcf68 <__s2b+0x52>
   dcf80:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcf84:	4601      	mov	r1, r0
   dcf86:	3b30      	subs	r3, #48	; 0x30
   dcf88:	220a      	movs	r2, #10
   dcf8a:	4630      	mov	r0, r6
   dcf8c:	f7ff ff85 	bl	dce9a <__multadd>
   dcf90:	e7eb      	b.n	dcf6a <__s2b+0x54>

000dcf92 <__hi0bits>:
   dcf92:	0c03      	lsrs	r3, r0, #16
   dcf94:	041b      	lsls	r3, r3, #16
   dcf96:	b9d3      	cbnz	r3, dcfce <__hi0bits+0x3c>
   dcf98:	0400      	lsls	r0, r0, #16
   dcf9a:	2310      	movs	r3, #16
   dcf9c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcfa0:	bf04      	itt	eq
   dcfa2:	0200      	lsleq	r0, r0, #8
   dcfa4:	3308      	addeq	r3, #8
   dcfa6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcfaa:	bf04      	itt	eq
   dcfac:	0100      	lsleq	r0, r0, #4
   dcfae:	3304      	addeq	r3, #4
   dcfb0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcfb4:	bf04      	itt	eq
   dcfb6:	0080      	lsleq	r0, r0, #2
   dcfb8:	3302      	addeq	r3, #2
   dcfba:	2800      	cmp	r0, #0
   dcfbc:	db05      	blt.n	dcfca <__hi0bits+0x38>
   dcfbe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dcfc2:	f103 0301 	add.w	r3, r3, #1
   dcfc6:	bf08      	it	eq
   dcfc8:	2320      	moveq	r3, #32
   dcfca:	4618      	mov	r0, r3
   dcfcc:	4770      	bx	lr
   dcfce:	2300      	movs	r3, #0
   dcfd0:	e7e4      	b.n	dcf9c <__hi0bits+0xa>

000dcfd2 <__lo0bits>:
   dcfd2:	6803      	ldr	r3, [r0, #0]
   dcfd4:	f013 0207 	ands.w	r2, r3, #7
   dcfd8:	4601      	mov	r1, r0
   dcfda:	d00b      	beq.n	dcff4 <__lo0bits+0x22>
   dcfdc:	07da      	lsls	r2, r3, #31
   dcfde:	d424      	bmi.n	dd02a <__lo0bits+0x58>
   dcfe0:	0798      	lsls	r0, r3, #30
   dcfe2:	bf49      	itett	mi
   dcfe4:	085b      	lsrmi	r3, r3, #1
   dcfe6:	089b      	lsrpl	r3, r3, #2
   dcfe8:	2001      	movmi	r0, #1
   dcfea:	600b      	strmi	r3, [r1, #0]
   dcfec:	bf5c      	itt	pl
   dcfee:	600b      	strpl	r3, [r1, #0]
   dcff0:	2002      	movpl	r0, #2
   dcff2:	4770      	bx	lr
   dcff4:	b298      	uxth	r0, r3
   dcff6:	b9b0      	cbnz	r0, dd026 <__lo0bits+0x54>
   dcff8:	0c1b      	lsrs	r3, r3, #16
   dcffa:	2010      	movs	r0, #16
   dcffc:	f013 0fff 	tst.w	r3, #255	; 0xff
   dd000:	bf04      	itt	eq
   dd002:	0a1b      	lsreq	r3, r3, #8
   dd004:	3008      	addeq	r0, #8
   dd006:	071a      	lsls	r2, r3, #28
   dd008:	bf04      	itt	eq
   dd00a:	091b      	lsreq	r3, r3, #4
   dd00c:	3004      	addeq	r0, #4
   dd00e:	079a      	lsls	r2, r3, #30
   dd010:	bf04      	itt	eq
   dd012:	089b      	lsreq	r3, r3, #2
   dd014:	3002      	addeq	r0, #2
   dd016:	07da      	lsls	r2, r3, #31
   dd018:	d403      	bmi.n	dd022 <__lo0bits+0x50>
   dd01a:	085b      	lsrs	r3, r3, #1
   dd01c:	f100 0001 	add.w	r0, r0, #1
   dd020:	d005      	beq.n	dd02e <__lo0bits+0x5c>
   dd022:	600b      	str	r3, [r1, #0]
   dd024:	4770      	bx	lr
   dd026:	4610      	mov	r0, r2
   dd028:	e7e8      	b.n	dcffc <__lo0bits+0x2a>
   dd02a:	2000      	movs	r0, #0
   dd02c:	4770      	bx	lr
   dd02e:	2020      	movs	r0, #32
   dd030:	4770      	bx	lr

000dd032 <__i2b>:
   dd032:	b510      	push	{r4, lr}
   dd034:	460c      	mov	r4, r1
   dd036:	2101      	movs	r1, #1
   dd038:	f7ff fee4 	bl	dce04 <_Balloc>
   dd03c:	2201      	movs	r2, #1
   dd03e:	6144      	str	r4, [r0, #20]
   dd040:	6102      	str	r2, [r0, #16]
   dd042:	bd10      	pop	{r4, pc}

000dd044 <__multiply>:
   dd044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd048:	4615      	mov	r5, r2
   dd04a:	690a      	ldr	r2, [r1, #16]
   dd04c:	692b      	ldr	r3, [r5, #16]
   dd04e:	429a      	cmp	r2, r3
   dd050:	bfb8      	it	lt
   dd052:	460b      	movlt	r3, r1
   dd054:	460c      	mov	r4, r1
   dd056:	bfbc      	itt	lt
   dd058:	462c      	movlt	r4, r5
   dd05a:	461d      	movlt	r5, r3
   dd05c:	6927      	ldr	r7, [r4, #16]
   dd05e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dd062:	68a3      	ldr	r3, [r4, #8]
   dd064:	6861      	ldr	r1, [r4, #4]
   dd066:	eb07 0609 	add.w	r6, r7, r9
   dd06a:	42b3      	cmp	r3, r6
   dd06c:	bfb8      	it	lt
   dd06e:	3101      	addlt	r1, #1
   dd070:	b085      	sub	sp, #20
   dd072:	f7ff fec7 	bl	dce04 <_Balloc>
   dd076:	f100 0114 	add.w	r1, r0, #20
   dd07a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dd07e:	460b      	mov	r3, r1
   dd080:	2200      	movs	r2, #0
   dd082:	4543      	cmp	r3, r8
   dd084:	d31d      	bcc.n	dd0c2 <__multiply+0x7e>
   dd086:	f104 0314 	add.w	r3, r4, #20
   dd08a:	f105 0214 	add.w	r2, r5, #20
   dd08e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dd092:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd096:	9302      	str	r3, [sp, #8]
   dd098:	1b3b      	subs	r3, r7, r4
   dd09a:	3b15      	subs	r3, #21
   dd09c:	f023 0303 	bic.w	r3, r3, #3
   dd0a0:	3304      	adds	r3, #4
   dd0a2:	f104 0515 	add.w	r5, r4, #21
   dd0a6:	42af      	cmp	r7, r5
   dd0a8:	bf38      	it	cc
   dd0aa:	2304      	movcc	r3, #4
   dd0ac:	9301      	str	r3, [sp, #4]
   dd0ae:	9b02      	ldr	r3, [sp, #8]
   dd0b0:	9203      	str	r2, [sp, #12]
   dd0b2:	4293      	cmp	r3, r2
   dd0b4:	d808      	bhi.n	dd0c8 <__multiply+0x84>
   dd0b6:	2e00      	cmp	r6, #0
   dd0b8:	dc5a      	bgt.n	dd170 <__multiply+0x12c>
   dd0ba:	6106      	str	r6, [r0, #16]
   dd0bc:	b005      	add	sp, #20
   dd0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd0c2:	f843 2b04 	str.w	r2, [r3], #4
   dd0c6:	e7dc      	b.n	dd082 <__multiply+0x3e>
   dd0c8:	f8b2 a000 	ldrh.w	sl, [r2]
   dd0cc:	f1ba 0f00 	cmp.w	sl, #0
   dd0d0:	d024      	beq.n	dd11c <__multiply+0xd8>
   dd0d2:	f104 0e14 	add.w	lr, r4, #20
   dd0d6:	4689      	mov	r9, r1
   dd0d8:	f04f 0c00 	mov.w	ip, #0
   dd0dc:	f85e 5b04 	ldr.w	r5, [lr], #4
   dd0e0:	f8d9 b000 	ldr.w	fp, [r9]
   dd0e4:	b2ab      	uxth	r3, r5
   dd0e6:	fa1f fb8b 	uxth.w	fp, fp
   dd0ea:	fb0a b303 	mla	r3, sl, r3, fp
   dd0ee:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dd0f2:	f8d9 5000 	ldr.w	r5, [r9]
   dd0f6:	4463      	add	r3, ip
   dd0f8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd0fc:	fb0a c50b 	mla	r5, sl, fp, ip
   dd100:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dd104:	b29b      	uxth	r3, r3
   dd106:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dd10a:	4577      	cmp	r7, lr
   dd10c:	f849 3b04 	str.w	r3, [r9], #4
   dd110:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd114:	d8e2      	bhi.n	dd0dc <__multiply+0x98>
   dd116:	9b01      	ldr	r3, [sp, #4]
   dd118:	f841 c003 	str.w	ip, [r1, r3]
   dd11c:	9b03      	ldr	r3, [sp, #12]
   dd11e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dd122:	3204      	adds	r2, #4
   dd124:	f1b9 0f00 	cmp.w	r9, #0
   dd128:	d020      	beq.n	dd16c <__multiply+0x128>
   dd12a:	680b      	ldr	r3, [r1, #0]
   dd12c:	f104 0c14 	add.w	ip, r4, #20
   dd130:	468e      	mov	lr, r1
   dd132:	f04f 0a00 	mov.w	sl, #0
   dd136:	f8bc 5000 	ldrh.w	r5, [ip]
   dd13a:	f8be b002 	ldrh.w	fp, [lr, #2]
   dd13e:	fb09 b505 	mla	r5, r9, r5, fp
   dd142:	44aa      	add	sl, r5
   dd144:	b29b      	uxth	r3, r3
   dd146:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dd14a:	f84e 3b04 	str.w	r3, [lr], #4
   dd14e:	f85c 3b04 	ldr.w	r3, [ip], #4
   dd152:	f8be 5000 	ldrh.w	r5, [lr]
   dd156:	0c1b      	lsrs	r3, r3, #16
   dd158:	fb09 5303 	mla	r3, r9, r3, r5
   dd15c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dd160:	4567      	cmp	r7, ip
   dd162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dd166:	d8e6      	bhi.n	dd136 <__multiply+0xf2>
   dd168:	9d01      	ldr	r5, [sp, #4]
   dd16a:	514b      	str	r3, [r1, r5]
   dd16c:	3104      	adds	r1, #4
   dd16e:	e79e      	b.n	dd0ae <__multiply+0x6a>
   dd170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dd174:	2b00      	cmp	r3, #0
   dd176:	d1a0      	bne.n	dd0ba <__multiply+0x76>
   dd178:	3e01      	subs	r6, #1
   dd17a:	e79c      	b.n	dd0b6 <__multiply+0x72>

000dd17c <__pow5mult>:
   dd17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd180:	4615      	mov	r5, r2
   dd182:	f012 0203 	ands.w	r2, r2, #3
   dd186:	4606      	mov	r6, r0
   dd188:	460f      	mov	r7, r1
   dd18a:	d007      	beq.n	dd19c <__pow5mult+0x20>
   dd18c:	4c21      	ldr	r4, [pc, #132]	; (dd214 <__pow5mult+0x98>)
   dd18e:	3a01      	subs	r2, #1
   dd190:	2300      	movs	r3, #0
   dd192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd196:	f7ff fe80 	bl	dce9a <__multadd>
   dd19a:	4607      	mov	r7, r0
   dd19c:	10ad      	asrs	r5, r5, #2
   dd19e:	d035      	beq.n	dd20c <__pow5mult+0x90>
   dd1a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd1a2:	b93c      	cbnz	r4, dd1b4 <__pow5mult+0x38>
   dd1a4:	2010      	movs	r0, #16
   dd1a6:	f7fb fdbd 	bl	d8d24 <malloc>
   dd1aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dd1ae:	6270      	str	r0, [r6, #36]	; 0x24
   dd1b0:	6004      	str	r4, [r0, #0]
   dd1b2:	60c4      	str	r4, [r0, #12]
   dd1b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd1b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd1bc:	b94c      	cbnz	r4, dd1d2 <__pow5mult+0x56>
   dd1be:	f240 2171 	movw	r1, #625	; 0x271
   dd1c2:	4630      	mov	r0, r6
   dd1c4:	f7ff ff35 	bl	dd032 <__i2b>
   dd1c8:	2300      	movs	r3, #0
   dd1ca:	f8c8 0008 	str.w	r0, [r8, #8]
   dd1ce:	4604      	mov	r4, r0
   dd1d0:	6003      	str	r3, [r0, #0]
   dd1d2:	f04f 0900 	mov.w	r9, #0
   dd1d6:	07eb      	lsls	r3, r5, #31
   dd1d8:	d50a      	bpl.n	dd1f0 <__pow5mult+0x74>
   dd1da:	4639      	mov	r1, r7
   dd1dc:	4622      	mov	r2, r4
   dd1de:	4630      	mov	r0, r6
   dd1e0:	f7ff ff30 	bl	dd044 <__multiply>
   dd1e4:	4639      	mov	r1, r7
   dd1e6:	4680      	mov	r8, r0
   dd1e8:	4630      	mov	r0, r6
   dd1ea:	f7ff fe3f 	bl	dce6c <_Bfree>
   dd1ee:	4647      	mov	r7, r8
   dd1f0:	106d      	asrs	r5, r5, #1
   dd1f2:	d00b      	beq.n	dd20c <__pow5mult+0x90>
   dd1f4:	6820      	ldr	r0, [r4, #0]
   dd1f6:	b938      	cbnz	r0, dd208 <__pow5mult+0x8c>
   dd1f8:	4622      	mov	r2, r4
   dd1fa:	4621      	mov	r1, r4
   dd1fc:	4630      	mov	r0, r6
   dd1fe:	f7ff ff21 	bl	dd044 <__multiply>
   dd202:	6020      	str	r0, [r4, #0]
   dd204:	f8c0 9000 	str.w	r9, [r0]
   dd208:	4604      	mov	r4, r0
   dd20a:	e7e4      	b.n	dd1d6 <__pow5mult+0x5a>
   dd20c:	4638      	mov	r0, r7
   dd20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd212:	bf00      	nop
   dd214:	000de898 	.word	0x000de898

000dd218 <__lshift>:
   dd218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd21c:	460c      	mov	r4, r1
   dd21e:	6849      	ldr	r1, [r1, #4]
   dd220:	6923      	ldr	r3, [r4, #16]
   dd222:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dd226:	68a3      	ldr	r3, [r4, #8]
   dd228:	4607      	mov	r7, r0
   dd22a:	4691      	mov	r9, r2
   dd22c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dd230:	f108 0601 	add.w	r6, r8, #1
   dd234:	42b3      	cmp	r3, r6
   dd236:	db3f      	blt.n	dd2b8 <__lshift+0xa0>
   dd238:	4638      	mov	r0, r7
   dd23a:	f7ff fde3 	bl	dce04 <_Balloc>
   dd23e:	2300      	movs	r3, #0
   dd240:	4605      	mov	r5, r0
   dd242:	f100 0114 	add.w	r1, r0, #20
   dd246:	f100 0210 	add.w	r2, r0, #16
   dd24a:	4618      	mov	r0, r3
   dd24c:	4553      	cmp	r3, sl
   dd24e:	db36      	blt.n	dd2be <__lshift+0xa6>
   dd250:	6920      	ldr	r0, [r4, #16]
   dd252:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dd256:	f104 0314 	add.w	r3, r4, #20
   dd25a:	f019 091f 	ands.w	r9, r9, #31
   dd25e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dd262:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dd266:	d02e      	beq.n	dd2c6 <__lshift+0xae>
   dd268:	f1c9 0e20 	rsb	lr, r9, #32
   dd26c:	468a      	mov	sl, r1
   dd26e:	2200      	movs	r2, #0
   dd270:	6818      	ldr	r0, [r3, #0]
   dd272:	fa00 f009 	lsl.w	r0, r0, r9
   dd276:	4302      	orrs	r2, r0
   dd278:	f84a 2b04 	str.w	r2, [sl], #4
   dd27c:	f853 2b04 	ldr.w	r2, [r3], #4
   dd280:	459c      	cmp	ip, r3
   dd282:	fa22 f20e 	lsr.w	r2, r2, lr
   dd286:	d8f3      	bhi.n	dd270 <__lshift+0x58>
   dd288:	ebac 0304 	sub.w	r3, ip, r4
   dd28c:	3b15      	subs	r3, #21
   dd28e:	f023 0303 	bic.w	r3, r3, #3
   dd292:	3304      	adds	r3, #4
   dd294:	f104 0015 	add.w	r0, r4, #21
   dd298:	4560      	cmp	r0, ip
   dd29a:	bf88      	it	hi
   dd29c:	2304      	movhi	r3, #4
   dd29e:	50ca      	str	r2, [r1, r3]
   dd2a0:	b10a      	cbz	r2, dd2a6 <__lshift+0x8e>
   dd2a2:	f108 0602 	add.w	r6, r8, #2
   dd2a6:	3e01      	subs	r6, #1
   dd2a8:	4638      	mov	r0, r7
   dd2aa:	612e      	str	r6, [r5, #16]
   dd2ac:	4621      	mov	r1, r4
   dd2ae:	f7ff fddd 	bl	dce6c <_Bfree>
   dd2b2:	4628      	mov	r0, r5
   dd2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd2b8:	3101      	adds	r1, #1
   dd2ba:	005b      	lsls	r3, r3, #1
   dd2bc:	e7ba      	b.n	dd234 <__lshift+0x1c>
   dd2be:	f842 0f04 	str.w	r0, [r2, #4]!
   dd2c2:	3301      	adds	r3, #1
   dd2c4:	e7c2      	b.n	dd24c <__lshift+0x34>
   dd2c6:	3904      	subs	r1, #4
   dd2c8:	f853 2b04 	ldr.w	r2, [r3], #4
   dd2cc:	f841 2f04 	str.w	r2, [r1, #4]!
   dd2d0:	459c      	cmp	ip, r3
   dd2d2:	d8f9      	bhi.n	dd2c8 <__lshift+0xb0>
   dd2d4:	e7e7      	b.n	dd2a6 <__lshift+0x8e>

000dd2d6 <__mcmp>:
   dd2d6:	b530      	push	{r4, r5, lr}
   dd2d8:	6902      	ldr	r2, [r0, #16]
   dd2da:	690c      	ldr	r4, [r1, #16]
   dd2dc:	1b12      	subs	r2, r2, r4
   dd2de:	d10e      	bne.n	dd2fe <__mcmp+0x28>
   dd2e0:	f100 0314 	add.w	r3, r0, #20
   dd2e4:	3114      	adds	r1, #20
   dd2e6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dd2ea:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dd2ee:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dd2f2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dd2f6:	42a5      	cmp	r5, r4
   dd2f8:	d003      	beq.n	dd302 <__mcmp+0x2c>
   dd2fa:	d305      	bcc.n	dd308 <__mcmp+0x32>
   dd2fc:	2201      	movs	r2, #1
   dd2fe:	4610      	mov	r0, r2
   dd300:	bd30      	pop	{r4, r5, pc}
   dd302:	4283      	cmp	r3, r0
   dd304:	d3f3      	bcc.n	dd2ee <__mcmp+0x18>
   dd306:	e7fa      	b.n	dd2fe <__mcmp+0x28>
   dd308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd30c:	e7f7      	b.n	dd2fe <__mcmp+0x28>

000dd30e <__mdiff>:
   dd30e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd312:	460c      	mov	r4, r1
   dd314:	4606      	mov	r6, r0
   dd316:	4611      	mov	r1, r2
   dd318:	4620      	mov	r0, r4
   dd31a:	4617      	mov	r7, r2
   dd31c:	f7ff ffdb 	bl	dd2d6 <__mcmp>
   dd320:	1e05      	subs	r5, r0, #0
   dd322:	d108      	bne.n	dd336 <__mdiff+0x28>
   dd324:	4629      	mov	r1, r5
   dd326:	4630      	mov	r0, r6
   dd328:	f7ff fd6c 	bl	dce04 <_Balloc>
   dd32c:	2301      	movs	r3, #1
   dd32e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dd332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd336:	bfa4      	itt	ge
   dd338:	463b      	movge	r3, r7
   dd33a:	4627      	movge	r7, r4
   dd33c:	4630      	mov	r0, r6
   dd33e:	6879      	ldr	r1, [r7, #4]
   dd340:	bfa6      	itte	ge
   dd342:	461c      	movge	r4, r3
   dd344:	2500      	movge	r5, #0
   dd346:	2501      	movlt	r5, #1
   dd348:	f7ff fd5c 	bl	dce04 <_Balloc>
   dd34c:	693e      	ldr	r6, [r7, #16]
   dd34e:	60c5      	str	r5, [r0, #12]
   dd350:	6925      	ldr	r5, [r4, #16]
   dd352:	f107 0114 	add.w	r1, r7, #20
   dd356:	f104 0914 	add.w	r9, r4, #20
   dd35a:	f100 0e14 	add.w	lr, r0, #20
   dd35e:	f107 0210 	add.w	r2, r7, #16
   dd362:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd366:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd36a:	46f2      	mov	sl, lr
   dd36c:	2700      	movs	r7, #0
   dd36e:	f859 3b04 	ldr.w	r3, [r9], #4
   dd372:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd376:	fa1f f883 	uxth.w	r8, r3
   dd37a:	fa17 f78b 	uxtah	r7, r7, fp
   dd37e:	0c1b      	lsrs	r3, r3, #16
   dd380:	eba7 0808 	sub.w	r8, r7, r8
   dd384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd388:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd38c:	fa1f f888 	uxth.w	r8, r8
   dd390:	141f      	asrs	r7, r3, #16
   dd392:	454d      	cmp	r5, r9
   dd394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd398:	f84a 3b04 	str.w	r3, [sl], #4
   dd39c:	d8e7      	bhi.n	dd36e <__mdiff+0x60>
   dd39e:	1b2b      	subs	r3, r5, r4
   dd3a0:	3b15      	subs	r3, #21
   dd3a2:	f023 0303 	bic.w	r3, r3, #3
   dd3a6:	3304      	adds	r3, #4
   dd3a8:	3415      	adds	r4, #21
   dd3aa:	42a5      	cmp	r5, r4
   dd3ac:	bf38      	it	cc
   dd3ae:	2304      	movcc	r3, #4
   dd3b0:	4419      	add	r1, r3
   dd3b2:	4473      	add	r3, lr
   dd3b4:	469e      	mov	lr, r3
   dd3b6:	460d      	mov	r5, r1
   dd3b8:	4565      	cmp	r5, ip
   dd3ba:	d30e      	bcc.n	dd3da <__mdiff+0xcc>
   dd3bc:	f10c 0203 	add.w	r2, ip, #3
   dd3c0:	1a52      	subs	r2, r2, r1
   dd3c2:	f022 0203 	bic.w	r2, r2, #3
   dd3c6:	3903      	subs	r1, #3
   dd3c8:	458c      	cmp	ip, r1
   dd3ca:	bf38      	it	cc
   dd3cc:	2200      	movcc	r2, #0
   dd3ce:	441a      	add	r2, r3
   dd3d0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd3d4:	b17b      	cbz	r3, dd3f6 <__mdiff+0xe8>
   dd3d6:	6106      	str	r6, [r0, #16]
   dd3d8:	e7ab      	b.n	dd332 <__mdiff+0x24>
   dd3da:	f855 8b04 	ldr.w	r8, [r5], #4
   dd3de:	fa17 f488 	uxtah	r4, r7, r8
   dd3e2:	1422      	asrs	r2, r4, #16
   dd3e4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd3e8:	b2a4      	uxth	r4, r4
   dd3ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd3ee:	f84e 4b04 	str.w	r4, [lr], #4
   dd3f2:	1417      	asrs	r7, r2, #16
   dd3f4:	e7e0      	b.n	dd3b8 <__mdiff+0xaa>
   dd3f6:	3e01      	subs	r6, #1
   dd3f8:	e7ea      	b.n	dd3d0 <__mdiff+0xc2>
	...

000dd3fc <__ulp>:
   dd3fc:	b082      	sub	sp, #8
   dd3fe:	ed8d 0b00 	vstr	d0, [sp]
   dd402:	9b01      	ldr	r3, [sp, #4]
   dd404:	4912      	ldr	r1, [pc, #72]	; (dd450 <__ulp+0x54>)
   dd406:	4019      	ands	r1, r3
   dd408:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd40c:	2900      	cmp	r1, #0
   dd40e:	dd05      	ble.n	dd41c <__ulp+0x20>
   dd410:	2200      	movs	r2, #0
   dd412:	460b      	mov	r3, r1
   dd414:	ec43 2b10 	vmov	d0, r2, r3
   dd418:	b002      	add	sp, #8
   dd41a:	4770      	bx	lr
   dd41c:	4249      	negs	r1, r1
   dd41e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd422:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd426:	f04f 0200 	mov.w	r2, #0
   dd42a:	f04f 0300 	mov.w	r3, #0
   dd42e:	da04      	bge.n	dd43a <__ulp+0x3e>
   dd430:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd434:	fa41 f300 	asr.w	r3, r1, r0
   dd438:	e7ec      	b.n	dd414 <__ulp+0x18>
   dd43a:	f1a0 0114 	sub.w	r1, r0, #20
   dd43e:	291e      	cmp	r1, #30
   dd440:	bfda      	itte	le
   dd442:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd446:	fa20 f101 	lsrle.w	r1, r0, r1
   dd44a:	2101      	movgt	r1, #1
   dd44c:	460a      	mov	r2, r1
   dd44e:	e7e1      	b.n	dd414 <__ulp+0x18>
   dd450:	7ff00000 	.word	0x7ff00000

000dd454 <__b2d>:
   dd454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd456:	6905      	ldr	r5, [r0, #16]
   dd458:	f100 0714 	add.w	r7, r0, #20
   dd45c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd460:	1f2e      	subs	r6, r5, #4
   dd462:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd466:	4620      	mov	r0, r4
   dd468:	f7ff fd93 	bl	dcf92 <__hi0bits>
   dd46c:	f1c0 0320 	rsb	r3, r0, #32
   dd470:	280a      	cmp	r0, #10
   dd472:	f8df c07c 	ldr.w	ip, [pc, #124]	; dd4f0 <__b2d+0x9c>
   dd476:	600b      	str	r3, [r1, #0]
   dd478:	dc14      	bgt.n	dd4a4 <__b2d+0x50>
   dd47a:	f1c0 0e0b 	rsb	lr, r0, #11
   dd47e:	fa24 f10e 	lsr.w	r1, r4, lr
   dd482:	42b7      	cmp	r7, r6
   dd484:	ea41 030c 	orr.w	r3, r1, ip
   dd488:	bf34      	ite	cc
   dd48a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd48e:	2100      	movcs	r1, #0
   dd490:	3015      	adds	r0, #21
   dd492:	fa04 f000 	lsl.w	r0, r4, r0
   dd496:	fa21 f10e 	lsr.w	r1, r1, lr
   dd49a:	ea40 0201 	orr.w	r2, r0, r1
   dd49e:	ec43 2b10 	vmov	d0, r2, r3
   dd4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd4a4:	42b7      	cmp	r7, r6
   dd4a6:	bf3a      	itte	cc
   dd4a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd4ac:	f1a5 0608 	subcc.w	r6, r5, #8
   dd4b0:	2100      	movcs	r1, #0
   dd4b2:	380b      	subs	r0, #11
   dd4b4:	d017      	beq.n	dd4e6 <__b2d+0x92>
   dd4b6:	f1c0 0c20 	rsb	ip, r0, #32
   dd4ba:	fa04 f500 	lsl.w	r5, r4, r0
   dd4be:	42be      	cmp	r6, r7
   dd4c0:	fa21 f40c 	lsr.w	r4, r1, ip
   dd4c4:	ea45 0504 	orr.w	r5, r5, r4
   dd4c8:	bf8c      	ite	hi
   dd4ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd4ce:	2400      	movls	r4, #0
   dd4d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd4d4:	fa01 f000 	lsl.w	r0, r1, r0
   dd4d8:	fa24 f40c 	lsr.w	r4, r4, ip
   dd4dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd4e0:	ea40 0204 	orr.w	r2, r0, r4
   dd4e4:	e7db      	b.n	dd49e <__b2d+0x4a>
   dd4e6:	ea44 030c 	orr.w	r3, r4, ip
   dd4ea:	460a      	mov	r2, r1
   dd4ec:	e7d7      	b.n	dd49e <__b2d+0x4a>
   dd4ee:	bf00      	nop
   dd4f0:	3ff00000 	.word	0x3ff00000

000dd4f4 <__d2b>:
   dd4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd4f8:	4689      	mov	r9, r1
   dd4fa:	2101      	movs	r1, #1
   dd4fc:	ec57 6b10 	vmov	r6, r7, d0
   dd500:	4690      	mov	r8, r2
   dd502:	f7ff fc7f 	bl	dce04 <_Balloc>
   dd506:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dd50a:	4604      	mov	r4, r0
   dd50c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dd510:	bb35      	cbnz	r5, dd560 <__d2b+0x6c>
   dd512:	2e00      	cmp	r6, #0
   dd514:	9301      	str	r3, [sp, #4]
   dd516:	d028      	beq.n	dd56a <__d2b+0x76>
   dd518:	4668      	mov	r0, sp
   dd51a:	9600      	str	r6, [sp, #0]
   dd51c:	f7ff fd59 	bl	dcfd2 <__lo0bits>
   dd520:	9900      	ldr	r1, [sp, #0]
   dd522:	b300      	cbz	r0, dd566 <__d2b+0x72>
   dd524:	9a01      	ldr	r2, [sp, #4]
   dd526:	f1c0 0320 	rsb	r3, r0, #32
   dd52a:	fa02 f303 	lsl.w	r3, r2, r3
   dd52e:	430b      	orrs	r3, r1
   dd530:	40c2      	lsrs	r2, r0
   dd532:	6163      	str	r3, [r4, #20]
   dd534:	9201      	str	r2, [sp, #4]
   dd536:	9b01      	ldr	r3, [sp, #4]
   dd538:	61a3      	str	r3, [r4, #24]
   dd53a:	2b00      	cmp	r3, #0
   dd53c:	bf14      	ite	ne
   dd53e:	2202      	movne	r2, #2
   dd540:	2201      	moveq	r2, #1
   dd542:	6122      	str	r2, [r4, #16]
   dd544:	b1d5      	cbz	r5, dd57c <__d2b+0x88>
   dd546:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dd54a:	4405      	add	r5, r0
   dd54c:	f8c9 5000 	str.w	r5, [r9]
   dd550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd554:	f8c8 0000 	str.w	r0, [r8]
   dd558:	4620      	mov	r0, r4
   dd55a:	b003      	add	sp, #12
   dd55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd564:	e7d5      	b.n	dd512 <__d2b+0x1e>
   dd566:	6161      	str	r1, [r4, #20]
   dd568:	e7e5      	b.n	dd536 <__d2b+0x42>
   dd56a:	a801      	add	r0, sp, #4
   dd56c:	f7ff fd31 	bl	dcfd2 <__lo0bits>
   dd570:	9b01      	ldr	r3, [sp, #4]
   dd572:	6163      	str	r3, [r4, #20]
   dd574:	2201      	movs	r2, #1
   dd576:	6122      	str	r2, [r4, #16]
   dd578:	3020      	adds	r0, #32
   dd57a:	e7e3      	b.n	dd544 <__d2b+0x50>
   dd57c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dd580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd584:	f8c9 0000 	str.w	r0, [r9]
   dd588:	6918      	ldr	r0, [r3, #16]
   dd58a:	f7ff fd02 	bl	dcf92 <__hi0bits>
   dd58e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dd592:	e7df      	b.n	dd554 <__d2b+0x60>

000dd594 <__ratio>:
   dd594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd598:	4688      	mov	r8, r1
   dd59a:	4669      	mov	r1, sp
   dd59c:	4681      	mov	r9, r0
   dd59e:	f7ff ff59 	bl	dd454 <__b2d>
   dd5a2:	a901      	add	r1, sp, #4
   dd5a4:	4640      	mov	r0, r8
   dd5a6:	ec55 4b10 	vmov	r4, r5, d0
   dd5aa:	f7ff ff53 	bl	dd454 <__b2d>
   dd5ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd5b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd5b6:	eba3 0c02 	sub.w	ip, r3, r2
   dd5ba:	e9dd 3200 	ldrd	r3, r2, [sp]
   dd5be:	1a9b      	subs	r3, r3, r2
   dd5c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dd5c4:	ec51 0b10 	vmov	r0, r1, d0
   dd5c8:	2b00      	cmp	r3, #0
   dd5ca:	bfd6      	itet	le
   dd5cc:	460a      	movle	r2, r1
   dd5ce:	462a      	movgt	r2, r5
   dd5d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dd5d4:	468b      	mov	fp, r1
   dd5d6:	462f      	mov	r7, r5
   dd5d8:	bfd4      	ite	le
   dd5da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dd5de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dd5e2:	4620      	mov	r0, r4
   dd5e4:	ee10 2a10 	vmov	r2, s0
   dd5e8:	465b      	mov	r3, fp
   dd5ea:	4639      	mov	r1, r7
   dd5ec:	f7fd fed2 	bl	db394 <__aeabi_ddiv>
   dd5f0:	ec41 0b10 	vmov	d0, r0, r1
   dd5f4:	b003      	add	sp, #12
   dd5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd5fa <__copybits>:
   dd5fa:	3901      	subs	r1, #1
   dd5fc:	b570      	push	{r4, r5, r6, lr}
   dd5fe:	1149      	asrs	r1, r1, #5
   dd600:	6914      	ldr	r4, [r2, #16]
   dd602:	3101      	adds	r1, #1
   dd604:	f102 0314 	add.w	r3, r2, #20
   dd608:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd60c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd610:	1f05      	subs	r5, r0, #4
   dd612:	42a3      	cmp	r3, r4
   dd614:	d30c      	bcc.n	dd630 <__copybits+0x36>
   dd616:	1aa3      	subs	r3, r4, r2
   dd618:	3b11      	subs	r3, #17
   dd61a:	f023 0303 	bic.w	r3, r3, #3
   dd61e:	3211      	adds	r2, #17
   dd620:	42a2      	cmp	r2, r4
   dd622:	bf88      	it	hi
   dd624:	2300      	movhi	r3, #0
   dd626:	4418      	add	r0, r3
   dd628:	2300      	movs	r3, #0
   dd62a:	4288      	cmp	r0, r1
   dd62c:	d305      	bcc.n	dd63a <__copybits+0x40>
   dd62e:	bd70      	pop	{r4, r5, r6, pc}
   dd630:	f853 6b04 	ldr.w	r6, [r3], #4
   dd634:	f845 6f04 	str.w	r6, [r5, #4]!
   dd638:	e7eb      	b.n	dd612 <__copybits+0x18>
   dd63a:	f840 3b04 	str.w	r3, [r0], #4
   dd63e:	e7f4      	b.n	dd62a <__copybits+0x30>

000dd640 <__any_on>:
   dd640:	f100 0214 	add.w	r2, r0, #20
   dd644:	6900      	ldr	r0, [r0, #16]
   dd646:	114b      	asrs	r3, r1, #5
   dd648:	4298      	cmp	r0, r3
   dd64a:	b510      	push	{r4, lr}
   dd64c:	db11      	blt.n	dd672 <__any_on+0x32>
   dd64e:	dd0a      	ble.n	dd666 <__any_on+0x26>
   dd650:	f011 011f 	ands.w	r1, r1, #31
   dd654:	d007      	beq.n	dd666 <__any_on+0x26>
   dd656:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd65a:	fa24 f001 	lsr.w	r0, r4, r1
   dd65e:	fa00 f101 	lsl.w	r1, r0, r1
   dd662:	428c      	cmp	r4, r1
   dd664:	d10b      	bne.n	dd67e <__any_on+0x3e>
   dd666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd66a:	4293      	cmp	r3, r2
   dd66c:	d803      	bhi.n	dd676 <__any_on+0x36>
   dd66e:	2000      	movs	r0, #0
   dd670:	bd10      	pop	{r4, pc}
   dd672:	4603      	mov	r3, r0
   dd674:	e7f7      	b.n	dd666 <__any_on+0x26>
   dd676:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd67a:	2900      	cmp	r1, #0
   dd67c:	d0f5      	beq.n	dd66a <__any_on+0x2a>
   dd67e:	2001      	movs	r0, #1
   dd680:	e7f6      	b.n	dd670 <__any_on+0x30>

000dd682 <_calloc_r>:
   dd682:	b513      	push	{r0, r1, r4, lr}
   dd684:	434a      	muls	r2, r1
   dd686:	4611      	mov	r1, r2
   dd688:	9201      	str	r2, [sp, #4]
   dd68a:	f7fb fb83 	bl	d8d94 <_malloc_r>
   dd68e:	4604      	mov	r4, r0
   dd690:	b118      	cbz	r0, dd69a <_calloc_r+0x18>
   dd692:	9a01      	ldr	r2, [sp, #4]
   dd694:	2100      	movs	r1, #0
   dd696:	f7fe f907 	bl	db8a8 <memset>
   dd69a:	4620      	mov	r0, r4
   dd69c:	b002      	add	sp, #8
   dd69e:	bd10      	pop	{r4, pc}

000dd6a0 <nan>:
   dd6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dd6a8 <nan+0x8>
   dd6a4:	4770      	bx	lr
   dd6a6:	bf00      	nop
   dd6a8:	00000000 	.word	0x00000000
   dd6ac:	7ff80000 	.word	0x7ff80000

000dd6b0 <__ascii_wctomb>:
   dd6b0:	b149      	cbz	r1, dd6c6 <__ascii_wctomb+0x16>
   dd6b2:	2aff      	cmp	r2, #255	; 0xff
   dd6b4:	bf85      	ittet	hi
   dd6b6:	238a      	movhi	r3, #138	; 0x8a
   dd6b8:	6003      	strhi	r3, [r0, #0]
   dd6ba:	700a      	strbls	r2, [r1, #0]
   dd6bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dd6c0:	bf98      	it	ls
   dd6c2:	2001      	movls	r0, #1
   dd6c4:	4770      	bx	lr
   dd6c6:	4608      	mov	r0, r1
   dd6c8:	4770      	bx	lr
	...

000dd6cc <__aeabi_d2lz>:
   dd6cc:	b538      	push	{r3, r4, r5, lr}
   dd6ce:	2200      	movs	r2, #0
   dd6d0:	2300      	movs	r3, #0
   dd6d2:	4604      	mov	r4, r0
   dd6d4:	460d      	mov	r5, r1
   dd6d6:	f7fd ffa5 	bl	db624 <__aeabi_dcmplt>
   dd6da:	b928      	cbnz	r0, dd6e8 <__aeabi_d2lz+0x1c>
   dd6dc:	4620      	mov	r0, r4
   dd6de:	4629      	mov	r1, r5
   dd6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd6e4:	f7fe b84c 	b.w	db780 <__aeabi_d2ulz>
   dd6e8:	4620      	mov	r0, r4
   dd6ea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dd6ee:	f7fe f847 	bl	db780 <__aeabi_d2ulz>
   dd6f2:	4240      	negs	r0, r0
   dd6f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd6f8:	bd38      	pop	{r3, r4, r5, pc}
   dd6fa:	bf00      	nop

000dd6fc <dynalib_user>:
   dd6fc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd70c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dd71c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dd72c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dd73c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dd74c:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   dd75c:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   dd76c:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   dd77c:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   dd78c:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   dd79c:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   dd7ac:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   dd7bc:	726f 5320 7869 4e00 206f 6144 6174 5200     or Six.No Data.R
   dd7cc:	7365 6f70 736e 2065 6552 6563 7669 6465     esponse Received
   dd7dc:	5500 6b6e 6f6e 6e77 7220 7365 6f70 736e     .Unknown respons
   dd7ec:	2065 6572 6563 6976 6465 2520 0069 6553     e recevied %i.Se
   dd7fc:	2074 6f74 3320 6472 5020 7261 7974 5320     t to 3rd Party S
   dd80c:	6d69 5300 7465 7420 206f 6150 7472 6369     im.Set to Partic
   dd81c:	656c 5320 6d69 4b00 6565 2070 6c41 7669     le Sim.Keep Aliv
   dd82c:	2065 6573 2074 6f74 2520 2069 6573 0063     e set to %i sec.
   dd83c:	654b 7065 4120 696c 6576 5200 7065 726f     Keep Alive.Repor
   dd84c:	6974 676e 5420 6d69 2065 6553 2074 6f74     ting Time Set to
   dd85c:	2520 2073 694d 756e 6574 2e73 5300 7465      %s Minutes..Set
   dd86c:	5620 7265 6f62 6573 4d20 646f 0065 6c43      Verbose Mode.Cl
   dd87c:	6165 6572 2064 6556 6272 736f 2065 6f4d     eared Verbose Mo
   dd88c:	6564 4400 7369 6261 656c 2064 6553 736e     de.Disabled Sens
   dd89c:	726f 4f20 656e 5300 6e65 6f73 2072 7453     or One.Sensor St
   dd8ac:	7461 7375 4400 7369 6261 656c 2064 6553     atus.Disabled Se
   dd8bc:	736e 726f 5420 6f77 4400 7369 6261 656c     nsor Two.Disable
   dd8cc:	2064 6553 736e 726f 5420 7268 6565 4400     d Sensor Three.D
   dd8dc:	7369 6261 656c 2064 6553 736e 726f 4620     isabled Sensor F
   dd8ec:	756f 0072 6944 6173 6c62 6465 5320 6e65     our.Disabled Sen
   dd8fc:	6f73 2072 6946 6576 4400 7369 6261 656c     sor Five.Disable
   dd90c:	2064 6553 736e 726f 5320 7869 4f00 6570     d Sensor Six.Ope
   dd91c:	6172 6974 6e6f 4d20 646f 2065 6925 4400     ration Mode %i.D
   dd92c:	7665 6369 2065 6552 6573 2074 7553 6363     evice Reset Succ
   dd93c:	7365 0073 6f4c 6461 6e69 2067 7953 7473     ess.Loading Syst
   dd94c:	6d65 4420 6665 7561 746c 0073 6f4c 6461     em Defaults.Load
   dd95c:	6e69 2067 6f43 736e 6174 746e 4420 6665     ing Constant Def
   dd96c:	7561 746c 2073 3039 392e 5000 7465 6574     aults 90.9.Pette
   dd97c:	0064 6157 6374 6468 676f 4600 6f72 206d     d.Watchdog.From 
   dd98c:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
   dd99c:	6172 736e 7469 6f69 006e 5443 4f20 656e     ransition.CT One
   dd9ac:	203a 3325 312e 0066 5443 5420 6f77 2520     : %3.1f.CT Two %
   dd9bc:	2e33 6631 4300 2054 6854 6572 3a65 2520     3.1f.CT Three: %
   dd9cc:	2e33 6631 5300 6e65 6f73 2072 6f46 7275     3.1f.Sensor Four
   dd9dc:	4320 6e6f 7473 6e61 2074 203a 3325 312e      Constant : %3.1
   dd9ec:	0066 6553 736e 726f 4620 7669 2065 6f43     f.Sensor Five Co
   dd9fc:	736e 6174 746e 3a20 2520 2e33 6631 5300     nstant : %3.1f.S
   dda0c:	6e65 6f73 2072 6953 2078 6f43 736e 6174     ensor Six Consta
   dda1c:	746e 3a20 2520 2e33 6631 4300 6e6f 7473     nt : %3.1f.Const
   dda2c:	6e61 2074 6e4f 2065 6156 756c 2065 6573     ant One Value se
   dda3c:	2074 6f74 0020 6f43 736e 6174 746e 5420     t to .Constant T
   dda4c:	6f77 5620 6c61 6575 7320 7465 7420 206f     wo Value set to 
   dda5c:	4300 6e6f 7473 6e61 2074 6854 6572 2065     .Constant Three 
   dda6c:	6156 756c 2065 6573 2074 6f74 0020 6f43     Value set to .Co
   dda7c:	736e 6174 746e 4620 756f 2072 6156 756c     nstant Four Valu
   dda8c:	2065 6573 2074 6f74 0020 6f43 736e 6174     e set to .Consta
   dda9c:	746e 4620 7669 2065 6156 756c 2065 6573     nt Five Value se
   ddaac:	2074 6f74 0020 6f43 736e 6174 746e 5320     t to .Constant S
   ddabc:	7869 5620 6c61 6575 7320 7465 7420 206f     ix Value set to 
   ddacc:	5200 6c65 6165 6573 4f00 6570 6172 6974     .Release.Operati
   ddadc:	676e 4d20 646f 0065 6553 736e 726f 0073     ng Mode.Sensors.
   ddaec:	6553 736e 726f 6e4f 4365 6e6f 656e 7463     SensorOneConnect
   ddafc:	6465 5300 6e65 6f73 4f72 656e 6f43 736e     ed.SensorOneCons
   ddb0c:	6174 746e 5300 6e65 6f73 5472 6f77 6f43     tant.SensorTwoCo
   ddb1c:	6e6e 6365 6574 0064 6553 736e 726f 7754     nnected.SensorTw
   ddb2c:	436f 6e6f 7473 6e61 0074 6553 736e 726f     oConstant.Sensor
   ddb3c:	6854 6572 4365 6e6f 656e 7463 6465 5300     ThreeConnected.S
   ddb4c:	6e65 6f73 5472 7268 6565 6f43 736e 6174     ensorThreeConsta
   ddb5c:	746e 5300 6e65 6f73 4672 756f 4372 6e6f     nt.SensorFourCon
   ddb6c:	656e 7463 6465 5300 6e65 6f73 4672 756f     nected.SensorFou
   ddb7c:	4372 6e6f 7473 6e61 0074 6553 736e 726f     rConstant.Sensor
   ddb8c:	6946 6576 6f43 6e6e 6365 6574 0064 6553     FiveConnected.Se
   ddb9c:	736e 726f 6946 6576 6f43 736e 6174 746e     nsorFiveConstant
   ddbac:	5300 6e65 6f73 5372 7869 6f43 6e6e 6365     .SensorSixConnec
   ddbbc:	6574 0064 6553 736e 726f 6953 4378 6e6f     ted.SensorSixCon
   ddbcc:	7473 6e61 0074 6854 7269 2064 6150 7472     stant.Third Part
   ddbdc:	2079 6953 006d 654b 7065 6c41 7669 0065     y Sim.KeepAlive.
   ddbec:	6552 6f70 7472 6e69 2067 7544 6172 6974     Reporting Durati
   ddbfc:	6e6f 5300 7379 6574 206d 6f43 666e 6769     on.System Config
   ddc0c:	7275 7461 6f69 006e 6c61 6169 0073 6f6e     uration.alias.no
   ddc1c:	6320 6e6f 6966 2067 6573 0074 6174 7367      config set.tags
   ddc2c:	6c00 7461 6c00 6e6f 6967 7574 6564 7000     .lat.longitude.p
   ddc3c:	6f72 7564 7463 6300 696c 6e65 0074 6544     roduct.client.De
   ddc4c:	6976 6563 4e2d 6d61 0065 6564 6976 6563     vice-Name.device
   ddc5c:	695f 0064 6176 756c 7365 7300 6e65 6f73     _id.values.senso
   ddc6c:	4f72 656e 7300 6e65 6f73 5472 6f77 7300     rOne.sensorTwo.s
   ddc7c:	6e65 6f73 5472 7268 6565 7300 6e65 6f73     ensorThree.senso
   ddc8c:	4672 756f 0072 6573 736e 726f 6946 6576     rFour.sensorFive
   ddc9c:	7300 6e65 6f73 5372 7869 5300 6e65 6f73     .sensorSix.Senso
   ddcac:	4f72 656e 0052 6553 736e 726f 6e4f 5365     rOneR.SensorOneS
   ddcbc:	5300 6e65 6f73 4f72 656e 0054 6553 736e     .SensorOneT.Sens
   ddccc:	726f 7754 526f 5300 6e65 6f73 5472 6f77     orTwoR.SensorTwo
   ddcdc:	0053 6553 736e 726f 7754 546f 5300 6e65     S.SensorTwoT.Sen
   ddcec:	6f73 4f72 656e 004e 6f70 6577 6d72 6e6f     sorOneN.powermon
   ddcfc:	7469 726f 6e69 5f67 6f68 6b6f 6900 666e     itoring_hook.inf
   ddd0c:	756c 5f78 6f68 6b6f 7300 6170 6b72 642f     lux_hook.spark/d
   ddd1c:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   ddd2c:	0064 7245 6f72 2072 7453 7461 2065 202d     d.Error State - 
   ddd3c:	6552 6573 0074 7453 7461 0065 002a 682f     Reset.State.*./h
   ddd4c:	6f6f 2d6b 6572 7073 6e6f 6573 702f 776f     ook-response/pow
   ddd5c:	7265 6f6d 696e 6f74 6972 676e 685f 6f6f     ermonitoring_hoo
   ddd6c:	2f6b 4200 7461 6574 7972 4200 7461 6574     k/.Battery.Batte
   ddd7c:	7972 6f43 746e 7865 0074 654b 7065 4120     ryContext.Keep A
   ddd8c:	696c 6576 5320 6365 4f00 6570 6172 6974     live Sec.Operati
   ddd9c:	6e6f 4d20 646f 0065 654d 7361 7275 2d65     on Mode.Measure-
   dddac:	6f4e 0077 6843 6365 206b 6f43 666e 6769     Now.Check Config
   dddbc:	7275 7461 6f69 006e 6556 6272 736f 2d65     uration.Verbose-
   dddcc:	6f4d 6564 5300 7465 4320 6e6f 7473 6e61     Mode.Set Constan
   ddddc:	2074 6e4f 0065 6553 2074 6f43 736e 6174     t One.Set Consta
   dddec:	746e 5420 6f77 5300 7465 4320 6e6f 7473     nt Two.Set Const
   dddfc:	6e61 2074 6854 6572 0065 6553 2074 6f43     ant Three.Set Co
   dde0c:	736e 6174 746e 4620 756f 0072 6553 2074     nstant Four.Set 
   dde1c:	6f43 736e 6174 746e 4620 7669 0065 6553     Constant Five.Se
   dde2c:	2074 6f43 736e 6174 746e 5320 7869 4500     t Constant Six.E
   dde3c:	616e 6c62 2065 6553 736e 726f 4400 7369     nable Sensor.Dis
   dde4c:	6261 656c 5320 6e65 6f73 0072 6552 6f70     able Sensor.Repo
   dde5c:	7472 6e69 2067 7544 6172 6974 6e6f 4d28     rting Duration(M
   dde6c:	4e49 5455 5345 0029 6552 6f62 746f 4420     INUTES).Reboot D
   dde7c:	7665 6369 0065 6c43 756f 4364 6e6f 6966     evice.CloudConfi
   dde8c:	4467 7665 6369 4e65 746f 7365 5300 7465     gDeviceNotes.Set
   dde9c:	7075 4c20 6f6f 0070 6f4c 6461 6e69 2067     up Loop.Loading 
   ddeac:	6544 6166 6c75 7374 5300 6174 7472 7075     Defaults.Startup
   ddebc:	0000 0000                                   ....

000ddec0 <_ZTV5Timer>:
	...
   ddec8:	4325 000d 4379 000d 41dd 000d               %C..yC...A..

000dded4 <_ZTV17PublishQueueAsync>:
	...
   ddedc:	41e9 000d 41fd 000d 8145 000d 82d1 000d     .A...A..E.......
   ddeec:	8291 000d 826f 000d 8417 000d 82b7 000d     ....o...........

000ddefc <_ZTV8MB85RC64>:
	...
   ddf04:	4211 000d 4225 000d 773d 000d 77d3 000d     .B..%B..=w...w..
   ddf14:	7855 000d                                   Ux..

000ddf18 <_ZTV18CloudConfigStorage>:
	...
   ddf20:	40cd 000d 40a9 000d 40a9 000d 612d 000d     .@...@...@..-a..
   ddf30:	40d1 000d 40d3 000d 0000 0000 0000 0000     .@...@..........

000ddf40 <_ZTV26CloudConfigStorageRetained>:
	...
   ddf48:	40d7 000d 690d 000d 411d 000d 612d 000d     .@...i...A..-a..
   ddf58:	40d1 000d 6989 000d 6175 000d 618d 000d     .@...i..ua...a..
   ddf68:	40db 000d d710 000d d718 000d d71c 000d     .@..............
   ddf78:	d725 000d d72d 000d d739 000d d73f 000d     %...-...9...?...
   ddf88:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   ddf98:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000ddfc8 <_ZL13releaseNumber>:
   ddfc8:	3331 302e 0032 0000                         13.02...

000ddfd0 <_ZL17FRAMversionNumber>:
   ddfd0:	0016 0000 7325 682f 6f6f 2d6b 6572 7073     ....%s/hook-resp
   ddfe0:	6e6f 6573 252f 2f73 7500 6470 7461 4465     onse/%s/.updateD
   ddff0:	7461 2061 6163 6c6c 6465 2520 0073 6c43     ata called %s.Cl
   de000:	756f 4364 6e6f 6966 5567 6470 7461 5765     oudConfigUpdateW
   de010:	6265 6f68 6b6f 3a3a 7473 7261 5574 6470     ebhook::startUpd
   de020:	7461 2065 7325 6300 6f6c 6475 6320 6e6f     ate %s.cloud con
   de030:	656e 7463 6465 7700 6961 2074 6f66 2072     nected.wait for 
   de040:	7075 6164 6574 6e00 206f 6164 6174 6f20     update.no data o
   de050:	2072 7075 6164 6574 6120 2074 6572 7473     r update at rest
   de060:	7261 0074 6863 6365 696b 676e 6620 726f     art.checking for
   de070:	7420 6d69 2065 7075 6164 6574 7300 6174      time update.sta
   de080:	6574 7453 7261 5574 6470 7461 0065 7473     teStartUpdate.st
   de090:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   de0a0:	6c70 7465 2065 6974 656d 756f 0074 7473     plete timeout.st
   de0b0:	7461 5765 6961 5574 6470 7461 4365 6d6f     ateWaitUpdateCom
   de0c0:	6c70 7465 2065 6f63 706d 656c 6574 0000     plete complete..

000de0d0 <_ZTV11CloudConfig>:
	...
   de0d8:	6c0d 000d 6a41 000d 6a61 000d               .l..Aj..aj..

000de0e4 <_ZTV22CloudConfigStorageData>:
	...
   de0ec:	40d7 000d 690d 000d 40a9 000d 612d 000d     .@...i...@..-a..
   de0fc:	40d1 000d 6989 000d 0000 0000 0000 0000     .@...i..........
   de10c:	40a9 000d                                   .@..

000de110 <_ZTV24CloudConfigUpdateWebhook>:
	...
   de118:	6ca1 000d 6909 000d 6c45 000d 6959 000d     .l...i..El..Yi..
   de128:	6975 000d                                   ui..

000de12c <_ZTV29CloudConfigUpdateSubscription>:
	...
   de134:	6ca1 000d 6909 000d 690b 000d 692d 000d     .l...i...i..-i..
   de144:	6945 000d 6170 7472 6369 656c 642f 7665     Ei..particle/dev
   de154:	6369 2f65 616e 656d 0000 0000               ice/name....

000de160 <_ZTV16DeviceNameHelper>:
	...
   de168:	7125 000d 7145 000d 7055 000d               %q..Eq..Up..

000de174 <_ZTV24DeviceNameHelperRetained>:
	...
   de17c:	7159 000d 716d 000d 7055 000d 7277 7469     Yq..mq..Up..writ
   de18c:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   de19c:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   de1ac:	7264 253d 0075 0000                         dr=%u...

000de1b4 <_ZTV6MB85RC>:
	...
   de1bc:	768d 000d 768f 000d 773d 000d 77d3 000d     .v...v..=w...w..
   de1cc:	7855 000d 6564 6976 6563 6552 6461 6620     Ux..deviceRead f
   de1dc:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   de1ec:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   de1fc:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   de20c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   de21c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   de22c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   de23c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   de24c:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   de25c:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   de26c:	0063 0000                                   c...

000de270 <_ZTV12MCP79410SRAM>:
	...
   de278:	7915 000d 792b 000d 7905 000d 7909 000d     .y..+y...y...y..
   de288:	7955 000d 7c3d 000d 7e5d 000d               Uy..=|..]~..

000de294 <_ZTV12MCP79410Time>:
	...
   de29c:	7919 000d 791d 000d                         .y...y..

000de2a4 <_ZTV14MCP79410EEPROM>:
	...
   de2ac:	7917 000d 7939 000d 790d 000d 7911 000d     .y..9y...y...y..
   de2bc:	7955 000d 7c77 000d 809d 000d               Uy..w|......

000de2c8 <_ZTV8MCP79410>:
	...
   de2d0:	791b 000d 7947 000d 7550 6c62 7369 5168     .y..Gy..PublishQ
   de2e0:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   de2f0:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   de300:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   de310:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   de320:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   de330:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   de340:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   de350:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   de360:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   de370:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   de380:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   de390:	7162 0000                                   bq..

000de394 <_ZTV21PublishQueueAsyncBase>:
	...
   de3a4:	8145 000d 40a9 000d 40a9 000d 40a9 000d     E....@...@...@..
   de3b4:	40a9 000d 40a9 000d                         .@...@..

000de3bc <_ZTV25PublishQueueAsyncRetained>:
	...
   de3c4:	822d 000d 8241 000d 8145 000d 82d1 000d     -...A...E.......
   de3d4:	8291 000d 826f 000d 8417 000d 82b7 000d     ....o...........

000de3e4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de3ec:	8e6d 000d 8e73 000d 8eb1 000d 8e81 000d     m...s...........
   de3fc:	8e6f 000d                                   o...

000de400 <_ZTVN5spark13EthernetClassE>:
	...
   de408:	946f 000d 9465 000d 945b 000d 9451 000d     o...e...[...Q...
   de418:	9445 000d 9439 000d 9dc9 000d 9dd1 000d     E...9...........
   de428:	942d 000d 9425 000d 941b 000d 9411 000d     -...%...........
   de438:	9e01 000d                                   ....

000de43c <_ZTV7TwoWire>:
	...
   de444:	948d 000d 94d7 000d 94af 000d 948f 000d     ................
   de454:	94b7 000d 94bf 000d 94c7 000d 94cf 000d     ................

000de464 <_ZTV9IPAddress>:
	...
   de46c:	9609 000d 95f9 000d 95fb 000d 2e30 0030     ............0.0.
   de47c:	6166 736c 0065 7274 6575 2500 0067 2575     false.true.%g.u%
   de48c:	3430 0078                                   04x.

000de490 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de498:	9713 000d 9729 000d 973f 000d 9737 000d     ....)...?...7...
   de4a8:	9717 000d                                   ....

000de4ac <_ZTVN5spark16JSONBufferWriterE>:
	...
   de4b4:	9715 000d 971b 000d 9767 000d 978d 000d     ........g.......
   de4c4:	7061 0070                                   app.

000de4c8 <_ZTVN5spark12NetworkClassE>:
	...
   de4d0:	9d89 000d 9d93 000d 9d9d 000d 9da7 000d     ................
   de4e0:	9db1 000d 9dbd 000d 9dc9 000d 9dd1 000d     ................
   de4f0:	9dd9 000d 9de5 000d 9ded 000d 9df7 000d     ................
   de500:	9e01 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   de510:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   de520:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000de530 <_ZTV11USARTSerial>:
	...
   de538:	a56d 000d a5d9 000d a5b1 000d 9ef5 000d     m...............
   de548:	a581 000d a59d 000d a58f 000d a5ab 000d     ................
   de558:	a56f 000d a573 000d                         o...s...

000de560 <_ZTV9USBSerial>:
	...
   de568:	a66d 000d a6d5 000d a6ab 000d 9ef5 000d     m...............
   de578:	a69d 000d a66f 000d a67f 000d a6cf 000d     ....o...........
   de588:	a68f 000d a669 000d                         ....i...

000de590 <_ZTVN5spark9WiFiClassE>:
	...
   de598:	a7cf 000d a7c5 000d a7bb 000d a771 000d     ............q...
   de5a8:	a7af 000d a7a3 000d 9dc9 000d 9dd1 000d     ................
   de5b8:	a797 000d a78f 000d a785 000d a77b 000d     ............{...
   de5c8:	9e01 000d                                   ....

000de5cc <_ZSt7nothrow>:
   de5cc:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   de5dc:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   de5ec:	2e25 6432 2520 0a64                          %.2d %d..

000de5f5 <day_name.6145>:
   de5f5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de605:	6972 6153                                    riSat

000de60a <mon_name.6146>:
   de60a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de61a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de62a:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000de63c <fpi.7566>:
   de63c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de64c:	0000 0000                                   ....

000de650 <fpinan.7602>:
   de650:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000de668 <tinytens>:
   de668:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de678:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de688:	6f43 64ac 0628 1168                         Co.d(.h.

000de690 <_ctype_>:
   de690:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de6a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de6b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de6c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de6d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de6e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de6f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de700:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de710:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de794 <_C_numeric_locale>:
   de794:	d867 000d e5f4 000d dd7c 2003 0043 4f50     g.......|.. C.PO
   de7a4:	4953 0058                                   SIX.

000de7a8 <__mprec_bigtens>:
   de7a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de7b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de7c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de7d0 <__mprec_tens>:
   de7d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de7e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de7f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de800:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de810:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de820:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de830:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de840:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de850:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de860:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de870:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de880:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de890:	9db4 79d9 7843 44ea                         ...yCx.D

000de898 <p05.7490>:
   de898:	0005 0000 0019 0000 007d 0000               ........}...

000de8a4 <link_const_variable_data_end>:
   de8a4:	000d6681 	.word	0x000d6681
   de8a8:	000d7049 	.word	0x000d7049
   de8ac:	000d7599 	.word	0x000d7599
   de8b0:	000d80cd 	.word	0x000d80cd
   de8b4:	000d86a9 	.word	0x000d86a9
   de8b8:	000d8e45 	.word	0x000d8e45
   de8bc:	000d9479 	.word	0x000d9479
   de8c0:	000d9d79 	.word	0x000d9d79
   de8c4:	000d9ee1 	.word	0x000d9ee1
   de8c8:	000d9f95 	.word	0x000d9f95
   de8cc:	000da219 	.word	0x000da219
   de8d0:	000da559 	.word	0x000da559
   de8d4:	000da7d9 	.word	0x000da7d9

000de8d8 <link_constructors_end>:
	...
