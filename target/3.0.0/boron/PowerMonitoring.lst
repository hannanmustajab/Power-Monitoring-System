
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/boron/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000085e0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dc600  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003d738  000dce04  0001d738  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000e00  2003d9f8  2003d9f8  0002d9f8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dd0c0  000dd0c0  0002d0c0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dd0ec  000dd0ec  0002d0ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e3070  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bb08  00000000  00000000  00210160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003dc9c  00000000  00000000  0022bc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003348  00000000  00000000  00269904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a9b8  00000000  00000000  0026cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f984  00000000  00000000  00277604  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b619  00000000  00000000  002b6f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00134be0  00000000  00000000  003025a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009878  00000000  00000000  00437184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fbd5 	bl	d97e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fbf7 	bl	d9830 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d738 	.word	0x2003d738
   d404c:	000dce04 	.word	0x000dce04
   d4050:	2003d9f4 	.word	0x2003d9f4
   d4054:	2003d9f8 	.word	0x2003d9f8
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fc39 	bl	d88d8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc5cc 	.word	0x000dc5cc
   d4080:	000dc5f8 	.word	0x000dc5f8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 ba5e 	b.w	d5544 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff4b 	bl	d4f24 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bbe3 	b.w	d885c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b9c5 	b.w	d7424 <malloc>

000d409a <_Znaj>:
   d409a:	f003 b9c3 	b.w	d7424 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b9c9 	b.w	d7434 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 f884 	bl	d71b8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6ee9 	.word	0x000d6ee9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
  if ( sensorConstants.sensorSixConstant < 0.0  || sensorConstants.sensorSixConstant > 3000.0) sensorConstants.sensorSixConstant = 90.91;
  fram.put(FRAM::sensorConstantsAddr,sensorConstants);
}


void watchdogISR()
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
{
   d40ce:	4770      	bx	lr
   d40d0:	2003e5d1 	.word	0x2003e5d1

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
  sysStatus.reportingBoundary = command.toFloat();
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
  sysStatusWriteNeeded = true;
  return 1;
}

   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f004 f8ab 	bl	d824e <_ZNK6String6equalsEPKc>
int measureNow(String command) // Function to force sending data in current hour
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
{
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
  if (command == "1") {
   d4100:	2001      	movs	r0, #1
    state = MEASURING_STATE;
    return 1;
  }
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000db6d3 	.word	0x000db6d3
   d4108:	2003e59d 	.word	0x2003e59d

000d410c <_Z12enableSensor6String>:
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
} 

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
*/
int enableSensor(String Sensor){
  char * pEND;
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f006 fabf 	bl	da698 <strtol>
  char data[256];
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  char * pEND;
   d411e:	4604      	mov	r4, r0
  char data[256];
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
 
   d412a:	7718      	strb	r0, [r3, #28]
  if (tempSensor == 1){
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f005 fbb4 	bl	d989c <strcpy>
    sysStatus.sensorOneConnected = true;
   d4134:	7034      	strb	r4, [r6, #0]
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
    sysStatusWriteNeeded = true;  
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
  } else if (tempSensor == 2){
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    return 1;     
   d4146:	775d      	strb	r5, [r3, #29]
  else if (tempSensor == 6){
   d4148:	a802      	add	r0, sp, #8
   d414a:	f005 fba7 	bl	d989c <strcpy>
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d414e:	462c      	mov	r4, r5
    sysStatus.sensorSixConnected = true;
   d4150:	7035      	strb	r5, [r6, #0]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
    return 1;    
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
  else if (tempSensor == 3){
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
  }
   d415a:	779d      	strb	r5, [r3, #30]
  else if (tempSensor == 3){
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
    return 1;
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
  else if (tempSensor == 4){
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
  }
   d4164:	77dd      	strb	r5, [r3, #31]
  else if (tempSensor == 4){
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
    return 1;  
   d4168:	2805      	cmp	r0, #5
  else if (tempSensor == 5){
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
  else if (tempSensor == 6){
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
  }
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
  }
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
  else if (tempSensor == 6){
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  char data[256];
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5a0 	.word	0x2003e5a0
   d4184:	2003e5d0 	.word	0x2003e5d0
   d4188:	000db6d5 	.word	0x000db6d5
   d418c:	000db6e8 	.word	0x000db6e8
   d4190:	000db6fb 	.word	0x000db6fb
   d4194:	000db710 	.word	0x000db710
   d4198:	000db724 	.word	0x000db724
   d419c:	000db738 	.word	0x000db738

000d41a0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41a0:	6943      	ldr	r3, [r0, #20]
   d41a2:	b113      	cbz	r3, d41aa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41a4:	6983      	ldr	r3, [r0, #24]
   d41a6:	300c      	adds	r0, #12
   d41a8:	4718      	bx	r3
            callback();
        }
    }
   d41aa:	4770      	bx	lr

000d41ac <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4b03      	ldr	r3, [pc, #12]	; (d41bc <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41b0:	6003      	str	r3, [r0, #0]
   d41b2:	4604      	mov	r4, r0
   d41b4:	f002 fbca 	bl	d694c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41b8:	4620      	mov	r0, r4
   d41ba:	bd10      	pop	{r4, pc}
   d41bc:	000dbe5c 	.word	0x000dbe5c

000d41c0 <_ZN17PublishQueueAsyncD0Ev>:
   d41c0:	b510      	push	{r4, lr}
   d41c2:	4604      	mov	r4, r0
   d41c4:	f7ff fff2 	bl	d41ac <_ZN17PublishQueueAsyncD1Ev>
   d41c8:	4620      	mov	r0, r4
   d41ca:	2138      	movs	r1, #56	; 0x38
   d41cc:	f004 fc93 	bl	d8af6 <_ZdlPvj>
   d41d0:	4620      	mov	r0, r4
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41d4:	b510      	push	{r4, lr}
   d41d6:	4b03      	ldr	r3, [pc, #12]	; (d41e4 <_ZN8MB85RC64D1Ev+0x10>)
   d41d8:	6003      	str	r3, [r0, #0]
   d41da:	4604      	mov	r4, r0
   d41dc:	f001 fdce 	bl	d5d7c <_ZN6MB85RCD1Ev>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}
   d41e4:	000dbe84 	.word	0x000dbe84

000d41e8 <_ZN8MB85RC64D0Ev>:
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4604      	mov	r4, r0
   d41ec:	f7ff fff2 	bl	d41d4 <_ZN8MB85RC64D1Ev>
   d41f0:	4620      	mov	r0, r4
   d41f2:	2110      	movs	r1, #16
   d41f4:	f004 fc7f 	bl	d8af6 <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41fc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41fe:	2100      	movs	r1, #0
   d4200:	4604      	mov	r4, r0
   d4202:	4608      	mov	r0, r1
   d4204:	f002 fdf8 	bl	d6df8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4208:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d420a:	4620      	mov	r0, r4
   d420c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d420e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4210:	f002 fe0a 	bl	d6e28 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4214:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4216:	b10c      	cbz	r4, d421c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4218:	2301      	movs	r3, #1
   d421a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d421c:	2100      	movs	r1, #0
   d421e:	2001      	movs	r0, #1
   d4220:	f002 fdea 	bl	d6df8 <os_thread_scheduling>
            }
        }
        if (t) {
   d4224:	b12c      	cbz	r4, d4232 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4226:	6823      	ldr	r3, [r4, #0]
   d4228:	4620      	mov	r0, r4
   d422a:	689b      	ldr	r3, [r3, #8]
   d422c:	4798      	blx	r3
            t->running = false;
   d422e:	2300      	movs	r3, #0
   d4230:	7123      	strb	r3, [r4, #4]
        }
    }
   d4232:	b002      	add	sp, #8
   d4234:	bd10      	pop	{r4, pc}

000d4236 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4236:	b510      	push	{r4, lr}
   d4238:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d423a:	6800      	ldr	r0, [r0, #0]
   d423c:	b108      	cbz	r0, d4242 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d423e:	f003 f8f9 	bl	d7434 <free>
class SystemClass {
   d4242:	4620      	mov	r0, r4
   d4244:	bd10      	pop	{r4, pc}

000d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4246:	2300      	movs	r3, #0
   d4248:	2204      	movs	r2, #4
   d424a:	f003 b823 	b.w	d7294 <spark_variable>
	...

000d4250 <_Z16keepAliveMessagev>:
}
   d4250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4252:	4b10      	ldr	r3, [pc, #64]	; (d4294 <_Z16keepAliveMessagev+0x44>)
   d4254:	4a10      	ldr	r2, [pc, #64]	; (d4298 <_Z16keepAliveMessagev+0x48>)
   d4256:	781b      	ldrb	r3, [r3, #0]
   d4258:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d425a:	4910      	ldr	r1, [pc, #64]	; (d429c <_Z16keepAliveMessagev+0x4c>)
   d425c:	4313      	orrs	r3, r2
   d425e:	f88d 3000 	strb.w	r3, [sp]
   d4262:	2200      	movs	r2, #0
   d4264:	233c      	movs	r3, #60	; 0x3c
   d4266:	a802      	add	r0, sp, #8
   d4268:	f003 fb46 	bl	d78f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d426c:	9c03      	ldr	r4, [sp, #12]
   d426e:	b17c      	cbz	r4, d4290 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d4270:	6863      	ldr	r3, [r4, #4]
   d4272:	3b01      	subs	r3, #1
   d4274:	6063      	str	r3, [r4, #4]
   d4276:	b95b      	cbnz	r3, d4290 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	4620      	mov	r0, r4
   d427c:	689b      	ldr	r3, [r3, #8]
   d427e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4280:	68a3      	ldr	r3, [r4, #8]
   d4282:	3b01      	subs	r3, #1
   d4284:	60a3      	str	r3, [r4, #8]
   d4286:	b91b      	cbnz	r3, d4290 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d4288:	6823      	ldr	r3, [r4, #0]
   d428a:	4620      	mov	r0, r4
   d428c:	68db      	ldr	r3, [r3, #12]
   d428e:	4798      	blx	r3
void keepAliveMessage() {
   d4290:	b004      	add	sp, #16
   d4292:	bd10      	pop	{r4, pc}
   d4294:	2003dae8 	.word	0x2003dae8
   d4298:	2003dae9 	.word	0x2003dae9
   d429c:	000db74b 	.word	0x000db74b

000d42a0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42a0:	b510      	push	{r4, lr}
      if (_M_manager)
   d42a2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42a4:	4604      	mov	r4, r0
      if (_M_manager)
   d42a6:	b113      	cbz	r3, d42ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42a8:	2203      	movs	r2, #3
   d42aa:	4601      	mov	r1, r0
   d42ac:	4798      	blx	r3
    }
   d42ae:	4620      	mov	r0, r4
   d42b0:	bd10      	pop	{r4, pc}
	...

000d42b4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42b6:	4b13      	ldr	r3, [pc, #76]	; (d4304 <_ZN5TimerD1Ev+0x50>)
   d42b8:	6003      	str	r3, [r0, #0]
   d42ba:	4604      	mov	r4, r0
        if (handle) {
   d42bc:	6880      	ldr	r0, [r0, #8]
   d42be:	b1c8      	cbz	r0, d42f4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42c0:	2500      	movs	r5, #0
   d42c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42c6:	e9cd 3500 	strd	r3, r5, [sp]
   d42ca:	2102      	movs	r1, #2
   d42cc:	462b      	mov	r3, r5
   d42ce:	462a      	mov	r2, r5
   d42d0:	f002 fdb2 	bl	d6e38 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42d4:	68a0      	ldr	r0, [r4, #8]
   d42d6:	4629      	mov	r1, r5
   d42d8:	f002 fde6 	bl	d6ea8 <os_timer_set_id>
            while (running) {
   d42dc:	7923      	ldrb	r3, [r4, #4]
   d42de:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42e2:	b113      	cbz	r3, d42ea <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42e4:	f002 fd80 	bl	d6de8 <os_thread_yield>
            while (running) {
   d42e8:	e7f8      	b.n	d42dc <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42ea:	68a0      	ldr	r0, [r4, #8]
   d42ec:	4629      	mov	r1, r5
   d42ee:	f002 fd93 	bl	d6e18 <os_timer_destroy>
            handle = nullptr;
   d42f2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42f4:	f104 000c 	add.w	r0, r4, #12
   d42f8:	f7ff ffd2 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
    }
   d42fc:	4620      	mov	r0, r4
   d42fe:	b003      	add	sp, #12
   d4300:	bd30      	pop	{r4, r5, pc}
   d4302:	bf00      	nop
   d4304:	000dbe48 	.word	0x000dbe48

000d4308 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4308:	b510      	push	{r4, lr}
   d430a:	4604      	mov	r4, r0
    }
   d430c:	f7ff ffd2 	bl	d42b4 <_ZN5TimerD1Ev>
   d4310:	4620      	mov	r0, r4
   d4312:	211c      	movs	r1, #28
   d4314:	f004 fbef 	bl	d8af6 <_ZdlPvj>
   d4318:	4620      	mov	r0, r4
   d431a:	bd10      	pop	{r4, pc}

000d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d431c:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d431e:	4801      	ldr	r0, [pc, #4]	; (d4324 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4320:	f003 b9f7 	b.w	d7712 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4324:	000d76e7 	.word	0x000d76e7

000d4328 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4328:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d432a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d432c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d432e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4336:	2201      	movs	r2, #1
   d4338:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d433a:	4341      	muls	r1, r0
   d433c:	466a      	mov	r2, sp
   d433e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4340:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4344:	f002 fffe 	bl	d7344 <spark_set_connection_property>
    }
   d4348:	b003      	add	sp, #12
   d434a:	f85d fb04 	ldr.w	pc, [sp], #4

000d434e <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d434e:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4350:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4352:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4354:	2100      	movs	r1, #0
   d4356:	b140      	cbz	r0, d436a <_ZN5Timer12changePeriodEjj+0x1c>
   d4358:	e9cd 2100 	strd	r2, r1, [sp]
   d435c:	460a      	mov	r2, r1
   d435e:	2103      	movs	r1, #3
   d4360:	f002 fd6a 	bl	d6e38 <os_timer_change>
   d4364:	fab0 f080 	clz	r0, r0
   d4368:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d436a:	b003      	add	sp, #12
   d436c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4370:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4372:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4374:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4378:	f88d 3000 	strb.w	r3, [sp]
   d437c:	f88d 5004 	strb.w	r5, [sp, #4]
   d4380:	68e4      	ldr	r4, [r4, #12]
   d4382:	233c      	movs	r3, #60	; 0x3c
   d4384:	47a0      	blx	r4
	}
   d4386:	b003      	add	sp, #12
   d4388:	bd30      	pop	{r4, r5, pc}
	...

000d438c <_Z14UbidotsHandlerPKcS0_>:
}
   d438c:	b510      	push	{r4, lr}
  char responseString[64];
   d438e:	780b      	ldrb	r3, [r1, #0]
}
   d4390:	b092      	sub	sp, #72	; 0x48
   d4392:	460c      	mov	r4, r1
  char responseString[64];
   d4394:	b97b      	cbnz	r3, d43b6 <_Z14UbidotsHandlerPKcS0_+0x2a>
    // Response is only a single number thanks to Template
   d4396:	4919      	ldr	r1, [pc, #100]	; (d43fc <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4398:	a802      	add	r0, sp, #8
   d439a:	f005 fa7f 	bl	d989c <strcpy>
        val_(0) {
   d439e:	2300      	movs	r3, #0
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d43a0:	f88d 3000 	strb.w	r3, [sp]
   d43a4:	4b16      	ldr	r3, [pc, #88]	; (d4400 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d43a6:	4917      	ldr	r1, [pc, #92]	; (d4404 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d43a8:	781b      	ldrb	r3, [r3, #0]
   d43aa:	4817      	ldr	r0, [pc, #92]	; (d4408 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43ac:	aa02      	add	r2, sp, #8
   d43ae:	f7ff ffdf 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
   d43b2:	b012      	add	sp, #72	; 0x48
   d43b4:	bd10      	pop	{r4, pc}
    snprintf(responseString, sizeof(responseString),"No Data");
   d43b6:	4608      	mov	r0, r1
   d43b8:	f005 f9ed 	bl	d9796 <atoi>
   d43bc:	28c8      	cmp	r0, #200	; 0xc8
   d43be:	d10e      	bne.n	d43de <_Z14UbidotsHandlerPKcS0_+0x52>
  }
   d43c0:	4912      	ldr	r1, [pc, #72]	; (d440c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43c2:	a802      	add	r0, sp, #8
   d43c4:	f005 fa6a 	bl	d989c <strcpy>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43c8:	f004 f8f1 	bl	d85ae <_ZN9TimeClass3nowEv>
   d43cc:	4b10      	ldr	r3, [pc, #64]	; (d4410 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43ce:	6198      	str	r0, [r3, #24]
    snprintf(responseString, sizeof(responseString),"Response Received");
   d43d0:	4b10      	ldr	r3, [pc, #64]	; (d4414 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43d2:	2201      	movs	r2, #1
   d43d4:	701a      	strb	r2, [r3, #0]
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d43d6:	4b10      	ldr	r3, [pc, #64]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43d8:	2200      	movs	r2, #0
   d43da:	701a      	strb	r2, [r3, #0]
   d43dc:	e7df      	b.n	d439e <_Z14UbidotsHandlerPKcS0_+0x12>
    snprintf(responseString, sizeof(responseString),"No Data");
   d43de:	4620      	mov	r0, r4
   d43e0:	f005 f9d9 	bl	d9796 <atoi>
   d43e4:	28c9      	cmp	r0, #201	; 0xc9
   d43e6:	d0eb      	beq.n	d43c0 <_Z14UbidotsHandlerPKcS0_+0x34>
  }
   d43e8:	4620      	mov	r0, r4
   d43ea:	f005 f9d4 	bl	d9796 <atoi>
   d43ee:	4a0b      	ldr	r2, [pc, #44]	; (d441c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43f0:	4603      	mov	r3, r0
   d43f2:	2140      	movs	r1, #64	; 0x40
   d43f4:	a802      	add	r0, sp, #8
   d43f6:	f003 f835 	bl	d7464 <snprintf>
   d43fa:	e7d0      	b.n	d439e <_Z14UbidotsHandlerPKcS0_+0x12>
   d43fc:	000db74d 	.word	0x000db74d
   d4400:	2003dae9 	.word	0x2003dae9
   d4404:	000db784 	.word	0x000db784
   d4408:	2003e3e0 	.word	0x2003e3e0
   d440c:	000db755 	.word	0x000db755
   d4410:	2003e5a0 	.word	0x2003e5a0
   d4414:	2003e5d0 	.word	0x2003e5d0
   d4418:	2003db0b 	.word	0x2003db0b
   d441c:	000db767 	.word	0x000db767

000d4420 <_Z16setThirdPartySim6String>:

   d4420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4422:	491c      	ldr	r1, [pc, #112]	; (d4494 <_Z16setThirdPartySim6String+0x74>)
   d4424:	4605      	mov	r5, r0
   d4426:	f003 ff12 	bl	d824e <_ZNK6String6equalsEPKc>
int setThirdPartySim(String command) // Function to force sending data in current hour
   d442a:	4604      	mov	r4, r0
   d442c:	b300      	cbz	r0, d4470 <_Z16setThirdPartySim6String+0x50>
  if (command == "1")
   d442e:	4c1a      	ldr	r4, [pc, #104]	; (d4498 <_Z16setThirdPartySim6String+0x78>)
   d4430:	2301      	movs	r3, #1
  {
   d4432:	6860      	ldr	r0, [r4, #4]
  if (command == "1")
   d4434:	7063      	strb	r3, [r4, #1]
  {
   d4436:	f7ff ff77 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
    sysStatus.thirdPartySim = true;
   d443a:	6863      	ldr	r3, [r4, #4]
   d443c:	4817      	ldr	r0, [pc, #92]	; (d449c <_Z16setThirdPartySim6String+0x7c>)
   d443e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4442:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4446:	4359      	muls	r1, r3
   d4448:	f7ff ff81 	bl	d434e <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d444c:	f002 ff42 	bl	d72d4 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4450:	b148      	cbz	r0, d4466 <_Z16setThirdPartySim6String+0x46>
   d4452:	2300      	movs	r3, #0
   d4454:	f88d 3000 	strb.w	r3, [sp]
   d4458:	4b11      	ldr	r3, [pc, #68]	; (d44a0 <_Z16setThirdPartySim6String+0x80>)
   d445a:	4a12      	ldr	r2, [pc, #72]	; (d44a4 <_Z16setThirdPartySim6String+0x84>)
   d445c:	781b      	ldrb	r3, [r3, #0]
   d445e:	4912      	ldr	r1, [pc, #72]	; (d44a8 <_Z16setThirdPartySim6String+0x88>)
   d4460:	4812      	ldr	r0, [pc, #72]	; (d44ac <_Z16setThirdPartySim6String+0x8c>)
   d4462:	f7ff ff85 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4466:	4b12      	ldr	r3, [pc, #72]	; (d44b0 <_Z16setThirdPartySim6String+0x90>)
   d4468:	2001      	movs	r0, #1
   d446a:	7018      	strb	r0, [r3, #0]
  }
   d446c:	b003      	add	sp, #12
   d446e:	bd30      	pop	{r4, r5, pc}
   d4470:	4910      	ldr	r1, [pc, #64]	; (d44b4 <_Z16setThirdPartySim6String+0x94>)
   d4472:	4628      	mov	r0, r5
   d4474:	f003 feeb 	bl	d824e <_ZNK6String6equalsEPKc>
    return 1;
   d4478:	2800      	cmp	r0, #0
   d447a:	d0f7      	beq.n	d446c <_Z16setThirdPartySim6String+0x4c>
  else if (command == "0")
   d447c:	4b06      	ldr	r3, [pc, #24]	; (d4498 <_Z16setThirdPartySim6String+0x78>)
   d447e:	705c      	strb	r4, [r3, #1]
   d4480:	f002 ff28 	bl	d72d4 <spark_cloud_flag_connected>
  {
   d4484:	2800      	cmp	r0, #0
   d4486:	d0ee      	beq.n	d4466 <_Z16setThirdPartySim6String+0x46>
   d4488:	4b05      	ldr	r3, [pc, #20]	; (d44a0 <_Z16setThirdPartySim6String+0x80>)
   d448a:	f88d 4000 	strb.w	r4, [sp]
   d448e:	781b      	ldrb	r3, [r3, #0]
   d4490:	4a09      	ldr	r2, [pc, #36]	; (d44b8 <_Z16setThirdPartySim6String+0x98>)
   d4492:	e7e4      	b.n	d445e <_Z16setThirdPartySim6String+0x3e>
   d4494:	000db6d3 	.word	0x000db6d3
   d4498:	2003e5a0 	.word	0x2003e5a0
   d449c:	2003e3c0 	.word	0x2003e3c0
   d44a0:	2003dae9 	.word	0x2003dae9
   d44a4:	000db791 	.word	0x000db791
   d44a8:	000db823 	.word	0x000db823
   d44ac:	2003e3e0 	.word	0x2003e3e0
   d44b0:	2003e5d0 	.word	0x2003e5d0
   d44b4:	000db7a6 	.word	0x000db7a6
   d44b8:	000db7a8 	.word	0x000db7a8

000d44bc <_Z12setKeepAlive6String>:

   d44bc:	b510      	push	{r4, lr}
   d44be:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
   d44c0:	6800      	ldr	r0, [r0, #0]
   d44c2:	220a      	movs	r2, #10
   d44c4:	a903      	add	r1, sp, #12
   d44c6:	f006 f8e7 	bl	da698 <strtol>
  char data[256];
   d44ca:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44ce:	d822      	bhi.n	d4516 <_Z12setKeepAlive6String+0x5a>
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44d0:	4c12      	ldr	r4, [pc, #72]	; (d451c <_Z12setKeepAlive6String+0x60>)
   d44d2:	6060      	str	r0, [r4, #4]
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44d4:	f7ff ff28 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
  sysStatus.keepAlive = tempTime;
   d44d8:	6863      	ldr	r3, [r4, #4]
   d44da:	4811      	ldr	r0, [pc, #68]	; (d4520 <_Z12setKeepAlive6String+0x64>)
   d44dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44e0:	4359      	muls	r1, r3
   d44e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44e6:	f7ff ff32 	bl	d434e <_ZN5Timer12changePeriodEjj>
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44ea:	6863      	ldr	r3, [r4, #4]
   d44ec:	4a0d      	ldr	r2, [pc, #52]	; (d4524 <_Z12setKeepAlive6String+0x68>)
   d44ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44f2:	a804      	add	r0, sp, #16
   d44f4:	f002 ffb6 	bl	d7464 <snprintf>
   d44f8:	2300      	movs	r3, #0
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44fa:	f88d 3000 	strb.w	r3, [sp]
   d44fe:	4b0a      	ldr	r3, [pc, #40]	; (d4528 <_Z12setKeepAlive6String+0x6c>)
   d4500:	490a      	ldr	r1, [pc, #40]	; (d452c <_Z12setKeepAlive6String+0x70>)
   d4502:	781b      	ldrb	r3, [r3, #0]
   d4504:	480a      	ldr	r0, [pc, #40]	; (d4530 <_Z12setKeepAlive6String+0x74>)
   d4506:	aa04      	add	r2, sp, #16
   d4508:	f7ff ff32 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d450c:	4b09      	ldr	r3, [pc, #36]	; (d4534 <_Z12setKeepAlive6String+0x78>)
   d450e:	2001      	movs	r0, #1
   d4510:	7018      	strb	r0, [r3, #0]
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4512:	b044      	add	sp, #272	; 0x110
   d4514:	bd10      	pop	{r4, pc}
  char data[256];
   d4516:	2000      	movs	r0, #0
   d4518:	e7fb      	b.n	d4512 <_Z12setKeepAlive6String+0x56>
   d451a:	bf00      	nop
   d451c:	2003e5a0 	.word	0x2003e5a0
   d4520:	2003e3c0 	.word	0x2003e3c0
   d4524:	000db7bc 	.word	0x000db7bc
   d4528:	2003dae9 	.word	0x2003dae9
   d452c:	000db7d5 	.word	0x000db7d5
   d4530:	2003e3e0 	.word	0x2003e3e0
   d4534:	2003e5d0 	.word	0x2003e5d0

000d4538 <_Z20setReportingDuration6String>:

   d4538:	b500      	push	{lr}
   d453a:	b089      	sub	sp, #36	; 0x24
   d453c:	9003      	str	r0, [sp, #12]
// This function is used to update the reportingDuration. 
   d453e:	f003 fe99 	bl	d8274 <_ZNK6String7toFloatEv>
   d4542:	4b0e      	ldr	r3, [pc, #56]	; (d457c <_Z20setReportingDuration6String+0x44>)
int setReportingDuration(String command){
   d4544:	9903      	ldr	r1, [sp, #12]
// This function is used to update the reportingDuration. 
   d4546:	eebd 0ac0 	vcvt.s32.f32	s0, s0
int setReportingDuration(String command){
   d454a:	a804      	add	r0, sp, #16
// This function is used to update the reportingDuration. 
   d454c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
int setReportingDuration(String command){
   d4550:	f003 fe46 	bl	d81e0 <_ZN6StringC1ERKS_>
   d4554:	2300      	movs	r3, #0
   d4556:	f88d 3000 	strb.w	r3, [sp]
   d455a:	4b09      	ldr	r3, [pc, #36]	; (d4580 <_Z20setReportingDuration6String+0x48>)
   d455c:	9a04      	ldr	r2, [sp, #16]
   d455e:	781b      	ldrb	r3, [r3, #0]
   d4560:	4908      	ldr	r1, [pc, #32]	; (d4584 <_Z20setReportingDuration6String+0x4c>)
   d4562:	4809      	ldr	r0, [pc, #36]	; (d4588 <_Z20setReportingDuration6String+0x50>)
   d4564:	f7ff ff04 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4568:	a804      	add	r0, sp, #16
   d456a:	f003 fdcb 	bl	d8104 <_ZN6StringD1Ev>
  sysStatus.reportingBoundary = command.toFloat();
   d456e:	4b07      	ldr	r3, [pc, #28]	; (d458c <_Z20setReportingDuration6String+0x54>)
   d4570:	2001      	movs	r0, #1
   d4572:	7018      	strb	r0, [r3, #0]
  sysStatusWriteNeeded = true;
   d4574:	b009      	add	sp, #36	; 0x24
   d4576:	f85d fb04 	ldr.w	pc, [sp], #4
   d457a:	bf00      	nop
   d457c:	2003e5a0 	.word	0x2003e5a0
   d4580:	2003dae9 	.word	0x2003dae9
   d4584:	000db7e0 	.word	0x000db7e0
   d4588:	2003e3e0 	.word	0x2003e3e0
   d458c:	2003e5d0 	.word	0x2003e5d0

000d4590 <_Z14setVerboseMode6String>:

   d4590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4592:	4916      	ldr	r1, [pc, #88]	; (d45ec <_Z14setVerboseMode6String+0x5c>)
   d4594:	4605      	mov	r5, r0
   d4596:	f003 fe5a 	bl	d824e <_ZNK6String6equalsEPKc>
int setVerboseMode(String command) // Function to force sending data in current hour
   d459a:	4604      	mov	r4, r0
   d459c:	b188      	cbz	r0, d45c2 <_Z14setVerboseMode6String+0x32>
  if (command == "1")
   d459e:	4b14      	ldr	r3, [pc, #80]	; (d45f0 <_Z14setVerboseMode6String+0x60>)
  {
   d45a0:	4a14      	ldr	r2, [pc, #80]	; (d45f4 <_Z14setVerboseMode6String+0x64>)
   d45a2:	4915      	ldr	r1, [pc, #84]	; (d45f8 <_Z14setVerboseMode6String+0x68>)
   d45a4:	4815      	ldr	r0, [pc, #84]	; (d45fc <_Z14setVerboseMode6String+0x6c>)
  if (command == "1")
   d45a6:	2401      	movs	r4, #1
   d45a8:	725c      	strb	r4, [r3, #9]
   d45aa:	2300      	movs	r3, #0
  {
   d45ac:	f88d 3000 	strb.w	r3, [sp]
   d45b0:	4b13      	ldr	r3, [pc, #76]	; (d4600 <_Z14setVerboseMode6String+0x70>)
   d45b2:	781b      	ldrb	r3, [r3, #0]
   d45b4:	f7ff fedc 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.verboseMode = true;
   d45b8:	4b12      	ldr	r3, [pc, #72]	; (d4604 <_Z14setVerboseMode6String+0x74>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45ba:	4620      	mov	r0, r4
    sysStatus.verboseMode = true;
   d45bc:	701c      	strb	r4, [r3, #0]
  }
   d45be:	b003      	add	sp, #12
   d45c0:	bd30      	pop	{r4, r5, pc}
   d45c2:	4911      	ldr	r1, [pc, #68]	; (d4608 <_Z14setVerboseMode6String+0x78>)
   d45c4:	4628      	mov	r0, r5
   d45c6:	f003 fe42 	bl	d824e <_ZNK6String6equalsEPKc>
    return 1;
   d45ca:	2800      	cmp	r0, #0
   d45cc:	d0f7      	beq.n	d45be <_Z14setVerboseMode6String+0x2e>
  else if (command == "0")
   d45ce:	4b08      	ldr	r3, [pc, #32]	; (d45f0 <_Z14setVerboseMode6String+0x60>)
  {
   d45d0:	4a0e      	ldr	r2, [pc, #56]	; (d460c <_Z14setVerboseMode6String+0x7c>)
  else if (command == "0")
   d45d2:	725c      	strb	r4, [r3, #9]
  {
   d45d4:	4b0a      	ldr	r3, [pc, #40]	; (d4600 <_Z14setVerboseMode6String+0x70>)
   d45d6:	f88d 4000 	strb.w	r4, [sp]
   d45da:	781b      	ldrb	r3, [r3, #0]
   d45dc:	4906      	ldr	r1, [pc, #24]	; (d45f8 <_Z14setVerboseMode6String+0x68>)
   d45de:	4807      	ldr	r0, [pc, #28]	; (d45fc <_Z14setVerboseMode6String+0x6c>)
   d45e0:	f7ff fec6 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.verboseMode = false;
   d45e4:	4b07      	ldr	r3, [pc, #28]	; (d4604 <_Z14setVerboseMode6String+0x74>)
   d45e6:	2001      	movs	r0, #1
   d45e8:	7018      	strb	r0, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45ea:	e7e8      	b.n	d45be <_Z14setVerboseMode6String+0x2e>
   d45ec:	000db6d3 	.word	0x000db6d3
   d45f0:	2003e5a0 	.word	0x2003e5a0
   d45f4:	000db802 	.word	0x000db802
   d45f8:	000db823 	.word	0x000db823
   d45fc:	2003e3e0 	.word	0x2003e3e0
   d4600:	2003dae9 	.word	0x2003dae9
   d4604:	2003e5d0 	.word	0x2003e5d0
   d4608:	000db7a6 	.word	0x000db7a6
   d460c:	000db813 	.word	0x000db813

000d4610 <_Z13disableSensor6String>:
  }
}

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
   d4610:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4612:	b0c5      	sub	sp, #276	; 0x114
*/
int disableSensor(String Sensor){
  char * pEND;
   d4614:	6800      	ldr	r0, [r0, #0]
   d4616:	220a      	movs	r2, #10
   d4618:	a903      	add	r1, sp, #12
   d461a:	f006 f83d 	bl	da698 <strtol>
  char data[256];
   d461e:	1e43      	subs	r3, r0, #1
   d4620:	2b06      	cmp	r3, #6
  char * pEND;
   d4622:	4604      	mov	r4, r0
  char data[256];
   d4624:	f04f 0500 	mov.w	r5, #0
   d4628:	d839      	bhi.n	d469e <_Z13disableSensor6String+0x8e>
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d462a:	2801      	cmp	r0, #1
   d462c:	4b1d      	ldr	r3, [pc, #116]	; (d46a4 <_Z13disableSensor6String+0x94>)
   d462e:	4f1e      	ldr	r7, [pc, #120]	; (d46a8 <_Z13disableSensor6String+0x98>)
   d4630:	4e1e      	ldr	r6, [pc, #120]	; (d46ac <_Z13disableSensor6String+0x9c>)
   d4632:	d110      	bne.n	d4656 <_Z13disableSensor6String+0x46>
 
  if (tempSensor == 1){
   d4634:	491e      	ldr	r1, [pc, #120]	; (d46b0 <_Z13disableSensor6String+0xa0>)
 
   d4636:	771d      	strb	r5, [r3, #28]
  if (tempSensor == 1){
   d4638:	a804      	add	r0, sp, #16
   d463a:	f005 f92f 	bl	d989c <strcpy>
    sysStatus.sensorOneConnected = false;
   d463e:	783b      	ldrb	r3, [r7, #0]
   d4640:	491c      	ldr	r1, [pc, #112]	; (d46b4 <_Z13disableSensor6String+0xa4>)
   d4642:	481d      	ldr	r0, [pc, #116]	; (d46b8 <_Z13disableSensor6String+0xa8>)
   d4644:	f88d 5000 	strb.w	r5, [sp]
   d4648:	aa04      	add	r2, sp, #16
   d464a:	f7ff fe91 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;    
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d464e:	7034      	strb	r4, [r6, #0]
    publishQueue.publish("Sensor Status",data,PRIVATE);
    sysStatusWriteNeeded = true; 
    return 1;      
   d4650:	4620      	mov	r0, r4
   d4652:	b045      	add	sp, #276	; 0x114
   d4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sysStatusWriteNeeded = true;  
   d4656:	2802      	cmp	r0, #2
   d4658:	d10e      	bne.n	d4678 <_Z13disableSensor6String+0x68>
  } else if (tempSensor == 2){
   d465a:	4918      	ldr	r1, [pc, #96]	; (d46bc <_Z13disableSensor6String+0xac>)
    return 1;     
   d465c:	775d      	strb	r5, [r3, #29]
  else if (tempSensor == 6){
   d465e:	a804      	add	r0, sp, #16
   d4660:	f005 f91c 	bl	d989c <strcpy>
    sysStatus.sensorSixConnected = false;
   d4664:	783b      	ldrb	r3, [r7, #0]
   d4666:	4913      	ldr	r1, [pc, #76]	; (d46b4 <_Z13disableSensor6String+0xa4>)
   d4668:	4813      	ldr	r0, [pc, #76]	; (d46b8 <_Z13disableSensor6String+0xa8>)
   d466a:	f88d 5000 	strb.w	r5, [sp]
   d466e:	aa04      	add	r2, sp, #16
   d4670:	f7ff fe7e 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4674:	2401      	movs	r4, #1
   d4676:	e7ea      	b.n	d464e <_Z13disableSensor6String+0x3e>
    return 1;    
   d4678:	2803      	cmp	r0, #3
   d467a:	d102      	bne.n	d4682 <_Z13disableSensor6String+0x72>
  else if (tempSensor == 3){
   d467c:	4910      	ldr	r1, [pc, #64]	; (d46c0 <_Z13disableSensor6String+0xb0>)
  }
   d467e:	779d      	strb	r5, [r3, #30]
  else if (tempSensor == 3){
   d4680:	e7ed      	b.n	d465e <_Z13disableSensor6String+0x4e>
    return 1;
   d4682:	2804      	cmp	r0, #4
   d4684:	d102      	bne.n	d468c <_Z13disableSensor6String+0x7c>
  else if (tempSensor == 4){
   d4686:	490f      	ldr	r1, [pc, #60]	; (d46c4 <_Z13disableSensor6String+0xb4>)
  }
   d4688:	77dd      	strb	r5, [r3, #31]
  else if (tempSensor == 4){
   d468a:	e7e8      	b.n	d465e <_Z13disableSensor6String+0x4e>
    return 1;  
   d468c:	2805      	cmp	r0, #5
  else if (tempSensor == 5){
   d468e:	bf0b      	itete	eq
   d4690:	490d      	ldreq	r1, [pc, #52]	; (d46c8 <_Z13disableSensor6String+0xb8>)
  else if (tempSensor == 6){
   d4692:	490e      	ldrne	r1, [pc, #56]	; (d46cc <_Z13disableSensor6String+0xbc>)
  }
   d4694:	f883 5020 	strbeq.w	r5, [r3, #32]
  }
   d4698:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
  else if (tempSensor == 6){
   d469c:	e7df      	b.n	d465e <_Z13disableSensor6String+0x4e>
  char data[256];
   d469e:	462c      	mov	r4, r5
   d46a0:	e7d6      	b.n	d4650 <_Z13disableSensor6String+0x40>
   d46a2:	bf00      	nop
   d46a4:	2003e5a0 	.word	0x2003e5a0
   d46a8:	2003dae9 	.word	0x2003dae9
   d46ac:	2003e5d0 	.word	0x2003e5d0
   d46b0:	000db828 	.word	0x000db828
   d46b4:	000db83c 	.word	0x000db83c
   d46b8:	2003e3e0 	.word	0x2003e3e0
   d46bc:	000db84a 	.word	0x000db84a
   d46c0:	000db85e 	.word	0x000db85e
   d46c4:	000db874 	.word	0x000db874
   d46c8:	000db889 	.word	0x000db889
   d46cc:	000db89e 	.word	0x000db89e

000d46d0 <_Z16setOperatingMode6String>:
  }
}
   d46d0:	b500      	push	{lr}
   d46d2:	b0c5      	sub	sp, #276	; 0x114

int setOperatingMode(String Sensor){
  char * pEND;
   d46d4:	6800      	ldr	r0, [r0, #0]
   d46d6:	220a      	movs	r2, #10
   d46d8:	a903      	add	r1, sp, #12
   d46da:	f005 ffdd 	bl	da698 <strtol>
  char data[256];
   d46de:	2804      	cmp	r0, #4
   d46e0:	d818      	bhi.n	d4714 <_Z16setOperatingMode6String+0x44>
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46e2:	4b0d      	ldr	r3, [pc, #52]	; (d4718 <_Z16setOperatingMode6String+0x48>)
  else{
   d46e4:	4a0d      	ldr	r2, [pc, #52]	; (d471c <_Z16setOperatingMode6String+0x4c>)
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46e6:	6298      	str	r0, [r3, #40]	; 0x28
  else{
   d46e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46ec:	4603      	mov	r3, r0
   d46ee:	a804      	add	r0, sp, #16
   d46f0:	f002 feb8 	bl	d7464 <snprintf>
   d46f4:	2300      	movs	r3, #0
    sysStatus.operatingMode = tempSensor;
   d46f6:	f88d 3000 	strb.w	r3, [sp]
   d46fa:	4b09      	ldr	r3, [pc, #36]	; (d4720 <_Z16setOperatingMode6String+0x50>)
   d46fc:	4909      	ldr	r1, [pc, #36]	; (d4724 <_Z16setOperatingMode6String+0x54>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	4809      	ldr	r0, [pc, #36]	; (d4728 <_Z16setOperatingMode6String+0x58>)
   d4702:	aa04      	add	r2, sp, #16
   d4704:	f7ff fe34 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4708:	4b08      	ldr	r3, [pc, #32]	; (d472c <_Z16setOperatingMode6String+0x5c>)
   d470a:	2001      	movs	r0, #1
   d470c:	7018      	strb	r0, [r3, #0]
    publishQueue.publish("Mode",data,PRIVATE);
    sysStatusWriteNeeded = true;  
    return 1; 
   d470e:	b045      	add	sp, #276	; 0x114
   d4710:	f85d fb04 	ldr.w	pc, [sp], #4
  char data[256];
   d4714:	2000      	movs	r0, #0
   d4716:	e7fa      	b.n	d470e <_Z16setOperatingMode6String+0x3e>
   d4718:	2003e5a0 	.word	0x2003e5a0
   d471c:	000db8b2 	.word	0x000db8b2
   d4720:	2003dae9 	.word	0x2003dae9
   d4724:	000db823 	.word	0x000db823
   d4728:	2003e3e0 	.word	0x2003e3e0
   d472c:	2003e5d0 	.word	0x2003e5d0

000d4730 <_Z11resetSystem6String>:
      return 1;
      } else return 0;
  }


  void getBatteryCharge()
   d4730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
  // voltage = analogRead(BATT) * 0.0011224;
   d4732:	220a      	movs	r2, #10
   d4734:	6800      	ldr	r0, [r0, #0]
   d4736:	a903      	add	r1, sp, #12
   d4738:	f005 ffae 	bl	da698 <strtol>
  // snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d473c:	2801      	cmp	r0, #1
  // voltage = analogRead(BATT) * 0.0011224;
   d473e:	4604      	mov	r4, r0
  // snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d4740:	f04f 0300 	mov.w	r3, #0
   d4744:	d111      	bne.n	d476a <_Z11resetSystem6String+0x3a>
}

   d4746:	f88d 3000 	strb.w	r3, [sp]
   d474a:	4b09      	ldr	r3, [pc, #36]	; (d4770 <_Z11resetSystem6String+0x40>)
   d474c:	4a09      	ldr	r2, [pc, #36]	; (d4774 <_Z11resetSystem6String+0x44>)
   d474e:	781b      	ldrb	r3, [r3, #0]
   d4750:	4909      	ldr	r1, [pc, #36]	; (d4778 <_Z11resetSystem6String+0x48>)
   d4752:	480a      	ldr	r0, [pc, #40]	; (d477c <_Z11resetSystem6String+0x4c>)
   d4754:	f7ff fe0c 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
void loadEmonlib(){
   d4758:	f241 3088 	movw	r0, #5000	; 0x1388
   d475c:	f002 feca 	bl	d74f4 <delay>
 
   d4760:	f003 fdaa 	bl	d82b8 <_ZN11SystemClass5resetEv>
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4764:	4620      	mov	r0, r4
   d4766:	b004      	add	sp, #16
   d4768:	bd10      	pop	{r4, pc}
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d476a:	461c      	mov	r4, r3
   d476c:	e7fa      	b.n	d4764 <_Z11resetSystem6String+0x34>
   d476e:	bf00      	nop
   d4770:	2003dae9 	.word	0x2003dae9
   d4774:	000db8c4 	.word	0x000db8c4
   d4778:	000dbb87 	.word	0x000dbb87
   d477c:	2003e3e0 	.word	0x2003e3e0

000d4780 <_Z18loadSystemDefaultsv>:

   d4780:	b507      	push	{r0, r1, r2, lr}
   d4782:	f002 fda7 	bl	d72d4 <spark_cloud_flag_connected>

   d4786:	b148      	cbz	r0, d479c <_Z18loadSystemDefaultsv+0x1c>
   d4788:	2300      	movs	r3, #0
   d478a:	f88d 3000 	strb.w	r3, [sp]
   d478e:	4b0f      	ldr	r3, [pc, #60]	; (d47cc <_Z18loadSystemDefaultsv+0x4c>)
   d4790:	4a0f      	ldr	r2, [pc, #60]	; (d47d0 <_Z18loadSystemDefaultsv+0x50>)
   d4792:	781b      	ldrb	r3, [r3, #0]
   d4794:	490f      	ldr	r1, [pc, #60]	; (d47d4 <_Z18loadSystemDefaultsv+0x54>)
   d4796:	4810      	ldr	r0, [pc, #64]	; (d47d8 <_Z18loadSystemDefaultsv+0x58>)
   d4798:	f7ff fdea 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d479c:	4a0f      	ldr	r2, [pc, #60]	; (d47dc <_Z18loadSystemDefaultsv+0x5c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d479e:	4810      	ldr	r0, [pc, #64]	; (d47e0 <_Z18loadSystemDefaultsv+0x60>)
   d47a0:	2378      	movs	r3, #120	; 0x78
   d47a2:	6053      	str	r3, [r2, #4]
  sysStatus.thirdPartySim = 1;
   d47a4:	f240 1301 	movw	r3, #257	; 0x101
   d47a8:	8013      	strh	r3, [r2, #0]
  sysStatus.keepAlive = 120;
   d47aa:	2300      	movs	r3, #0
  sysStatus.lowBatteryMode = false;
   d47ac:	2101      	movs	r1, #1
  sysStatus.keepAlive = 120;
   d47ae:	7253      	strb	r3, [r2, #9]
  sysStatus.structuresVersion = 1;
   d47b0:	7293      	strb	r3, [r2, #10]
  sysStatus.lowBatteryMode = false;
   d47b2:	f44f 7316 	mov.w	r3, #600	; 0x258
   d47b6:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   d47ba:	2330      	movs	r3, #48	; 0x30
  sysStatus.reportingBoundary = 10*60;
   d47bc:	7711      	strb	r1, [r2, #28]
  sysStatus.operatingMode = 1;
   d47be:	f882 1020 	strb.w	r1, [r2, #32]
  sysStatus.sensorFiveConnected=1;
   d47c2:	b003      	add	sp, #12
   d47c4:	f85d eb04 	ldr.w	lr, [sp], #4
   d47c8:	f001 bb93 	b.w	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
   d47cc:	2003dae9 	.word	0x2003dae9
   d47d0:	000db8d9 	.word	0x000db8d9
   d47d4:	000db823 	.word	0x000db823
   d47d8:	2003e3e0 	.word	0x2003e3e0
   d47dc:	2003e5a0 	.word	0x2003e5a0
   d47e0:	2003e3b0 	.word	0x2003e3b0

000d47e4 <_Z20loadConstantDefaultsv>:
}
   d47e4:	b507      	push	{r0, r1, r2, lr}
   d47e6:	f002 fd75 	bl	d72d4 <spark_cloud_flag_connected>

   d47ea:	b148      	cbz	r0, d4800 <_Z20loadConstantDefaultsv+0x1c>
   d47ec:	2300      	movs	r3, #0
   d47ee:	f88d 3000 	strb.w	r3, [sp]
   d47f2:	4b0c      	ldr	r3, [pc, #48]	; (d4824 <_Z20loadConstantDefaultsv+0x40>)
   d47f4:	4a0c      	ldr	r2, [pc, #48]	; (d4828 <_Z20loadConstantDefaultsv+0x44>)
   d47f6:	781b      	ldrb	r3, [r3, #0]
   d47f8:	490c      	ldr	r1, [pc, #48]	; (d482c <_Z20loadConstantDefaultsv+0x48>)
   d47fa:	480d      	ldr	r0, [pc, #52]	; (d4830 <_Z20loadConstantDefaultsv+0x4c>)
   d47fc:	f7ff fdb8 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d4800:	4a0c      	ldr	r2, [pc, #48]	; (d4834 <_Z20loadConstantDefaultsv+0x50>)
   d4802:	4b0d      	ldr	r3, [pc, #52]	; (d4838 <_Z20loadConstantDefaultsv+0x54>)
  sensorConstants.sensorThreeConstant = 90.9;
   d4804:	490d      	ldr	r1, [pc, #52]	; (d483c <_Z20loadConstantDefaultsv+0x58>)
   d4806:	480e      	ldr	r0, [pc, #56]	; (d4840 <_Z20loadConstantDefaultsv+0x5c>)
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d4808:	6013      	str	r3, [r2, #0]
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d480a:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorOneConstant = 90.9;
   d480c:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorTwoConstant = 90.9;
   d480e:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorThreeConstant = 90.9;
   d4810:	6111      	str	r1, [r2, #16]
  sensorConstants.sensorFourConstant = 90.9;
   d4812:	6153      	str	r3, [r2, #20]
   d4814:	21a0      	movs	r1, #160	; 0xa0
   d4816:	2318      	movs	r3, #24
  sensorConstants.sensorSixConstant = 90.9;
   d4818:	b003      	add	sp, #12
   d481a:	f85d eb04 	ldr.w	lr, [sp], #4
   d481e:	f001 bb68 	b.w	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
   d4822:	bf00      	nop
   d4824:	2003dae9 	.word	0x2003dae9
   d4828:	000db8f1 	.word	0x000db8f1
   d482c:	000db823 	.word	0x000db823
   d4830:	2003e3e0 	.word	0x2003e3e0
   d4834:	2003e438 	.word	0x2003e438
   d4838:	42b5cccd 	.word	0x42b5cccd
   d483c:	4426c000 	.word	0x4426c000
   d4840:	2003e3b0 	.word	0x2003e3b0

000d4844 <_Z17checkSystemValuesv>:
}
   d4844:	b510      	push	{r4, lr}

   d4846:	4c15      	ldr	r4, [pc, #84]	; (d489c <_Z17checkSystemValuesv+0x58>)
   d4848:	7a23      	ldrb	r3, [r4, #8]
   d484a:	2b01      	cmp	r3, #1
   d484c:	d904      	bls.n	d4858 <_Z17checkSystemValuesv+0x14>
   d484e:	f002 fd41 	bl	d72d4 <spark_cloud_flag_connected>
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4852:	b300      	cbz	r0, d4896 <_Z17checkSystemValuesv+0x52>
   d4854:	2301      	movs	r3, #1
   d4856:	7223      	strb	r3, [r4, #8]
    else sysStatus.connectedStatus = false;
   d4858:	6863      	ldr	r3, [r4, #4]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d485a:	4a11      	ldr	r2, [pc, #68]	; (d48a0 <_Z17checkSystemValuesv+0x5c>)
    else sysStatus.connectedStatus = false;
   d485c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4860:	bf84      	itt	hi
   d4862:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4866:	6063      	strhi	r3, [r4, #4]
  }
   d4868:	7a63      	ldrb	r3, [r4, #9]
   d486a:	2b01      	cmp	r3, #1
   d486c:	bf84      	itt	hi
   d486e:	2301      	movhi	r3, #1
   d4870:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4872:	7aa3      	ldrb	r3, [r4, #10]
   d4874:	2b01      	cmp	r3, #1
   d4876:	bf84      	itt	hi
   d4878:	2300      	movhi	r3, #0
   d487a:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d487c:	6963      	ldr	r3, [r4, #20]
   d487e:	2bff      	cmp	r3, #255	; 0xff
   d4880:	bf84      	itt	hi
   d4882:	2300      	movhi	r3, #0
   d4884:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4888:	2b05      	cmp	r3, #5
   d488a:	f04f 0301 	mov.w	r3, #1
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d488e:	7013      	strb	r3, [r2, #0]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4890:	bf88      	it	hi
   d4892:	62a3      	strhi	r3, [r4, #40]	; 0x28
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4894:	bd10      	pop	{r4, pc}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4896:	7220      	strb	r0, [r4, #8]
   d4898:	e7de      	b.n	d4858 <_Z17checkSystemValuesv+0x14>
   d489a:	bf00      	nop
   d489c:	2003e5a0 	.word	0x2003e5a0
   d48a0:	2003e5d0 	.word	0x2003e5d0

000d48a4 <_Z19checkConstantValuesv>:

   d48a4:	4b33      	ldr	r3, [pc, #204]	; (d4974 <_Z19checkConstantValuesv+0xd0>)
   d48a6:	edd3 7a00 	vldr	s15, [r3]
   d48aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48b2:	d406      	bmi.n	d48c2 <_Z19checkConstantValuesv+0x1e>
   d48b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48c0:	dd01      	ble.n	d48c6 <_Z19checkConstantValuesv+0x22>
   d48c2:	4a2e      	ldr	r2, [pc, #184]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d48c4:	601a      	str	r2, [r3, #0]
void checkConstantValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d48c6:	edd3 7a01 	vldr	s15, [r3, #4]
   d48ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48d2:	d406      	bmi.n	d48e2 <_Z19checkConstantValuesv+0x3e>
   d48d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48e0:	dd01      	ble.n	d48e6 <_Z19checkConstantValuesv+0x42>
   d48e2:	4a26      	ldr	r2, [pc, #152]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d48e4:	605a      	str	r2, [r3, #4]
  if ( sensorConstants.sensorOneConstant < 0.0  || sensorConstants.sensorOneConstant > 3000.0) sensorConstants.sensorOneConstant = 90.91;
   d48e6:	edd3 7a02 	vldr	s15, [r3, #8]
   d48ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48f2:	d406      	bmi.n	d4902 <_Z19checkConstantValuesv+0x5e>
   d48f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d48f8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4900:	dd01      	ble.n	d4906 <_Z19checkConstantValuesv+0x62>
   d4902:	4a1e      	ldr	r2, [pc, #120]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4904:	609a      	str	r2, [r3, #8]
  if ( sensorConstants.sensorTwoConstant < 0.0  || sensorConstants.sensorTwoConstant > 3000.0) sensorConstants.sensorTwoConstant = 90.91;
   d4906:	edd3 7a03 	vldr	s15, [r3, #12]
   d490a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d490e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4912:	d406      	bmi.n	d4922 <_Z19checkConstantValuesv+0x7e>
   d4914:	ed9f 7a18 	vldr	s14, [pc, #96]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4918:	eef4 7ac7 	vcmpe.f32	s15, s14
   d491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4920:	dd01      	ble.n	d4926 <_Z19checkConstantValuesv+0x82>
   d4922:	4a16      	ldr	r2, [pc, #88]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4924:	60da      	str	r2, [r3, #12]
  if ( sensorConstants.sensorThreeConstant < 0.0  || sensorConstants.sensorThreeConstant > 3000.0) sensorConstants.sensorThreeConstant = 90.91;
   d4926:	edd3 7a04 	vldr	s15, [r3, #16]
   d492a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4932:	d406      	bmi.n	d4942 <_Z19checkConstantValuesv+0x9e>
   d4934:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4938:	eef4 7ac7 	vcmpe.f32	s15, s14
   d493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4940:	dd01      	ble.n	d4946 <_Z19checkConstantValuesv+0xa2>
   d4942:	4a0e      	ldr	r2, [pc, #56]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4944:	611a      	str	r2, [r3, #16]
  if ( sensorConstants.sensorFourConstant < 0.0  || sensorConstants.sensorFourConstant > 3000.0) sensorConstants.sensorFourConstant = 90.91;
   d4946:	edd3 7a05 	vldr	s15, [r3, #20]
   d494a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4952:	d406      	bmi.n	d4962 <_Z19checkConstantValuesv+0xbe>
   d4954:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4978 <_Z19checkConstantValuesv+0xd4>
   d4958:	eef4 7ac7 	vcmpe.f32	s15, s14
   d495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4960:	dd01      	ble.n	d4966 <_Z19checkConstantValuesv+0xc2>
   d4962:	4a06      	ldr	r2, [pc, #24]	; (d497c <_Z19checkConstantValuesv+0xd8>)
   d4964:	615a      	str	r2, [r3, #20]
   d4966:	4a03      	ldr	r2, [pc, #12]	; (d4974 <_Z19checkConstantValuesv+0xd0>)
   d4968:	4805      	ldr	r0, [pc, #20]	; (d4980 <_Z19checkConstantValuesv+0xdc>)
   d496a:	2318      	movs	r3, #24
   d496c:	21a0      	movs	r1, #160	; 0xa0
   d496e:	f001 bac0 	b.w	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
   d4972:	bf00      	nop
   d4974:	2003e438 	.word	0x2003e438
   d4978:	453b8000 	.word	0x453b8000
   d497c:	42b5d1ec 	.word	0x42b5d1ec
   d4980:	2003e3b0 	.word	0x2003e3b0

000d4984 <_Z11petWatchdogv>:

   d4984:	b507      	push	{r0, r1, r2, lr}
void petWatchdog()
   d4986:	2101      	movs	r1, #1
   d4988:	2005      	movs	r0, #5
   d498a:	f004 f83e 	bl	d8a0a <digitalWrite>
{
   d498e:	2100      	movs	r1, #0
   d4990:	2005      	movs	r0, #5
   d4992:	f004 f83a 	bl	d8a0a <digitalWrite>
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d4996:	4a09      	ldr	r2, [pc, #36]	; (d49bc <_Z11petWatchdogv+0x38>)
   d4998:	2300      	movs	r3, #0
   d499a:	7013      	strb	r3, [r2, #0]
  digitalWrite(donePin, LOW);
   d499c:	4a08      	ldr	r2, [pc, #32]	; (d49c0 <_Z11petWatchdogv+0x3c>)
   d499e:	7a52      	ldrb	r2, [r2, #9]
   d49a0:	b142      	cbz	r2, d49b4 <_Z11petWatchdogv+0x30>
   d49a2:	f88d 3000 	strb.w	r3, [sp]
   d49a6:	4b07      	ldr	r3, [pc, #28]	; (d49c4 <_Z11petWatchdogv+0x40>)
   d49a8:	4a07      	ldr	r2, [pc, #28]	; (d49c8 <_Z11petWatchdogv+0x44>)
   d49aa:	781b      	ldrb	r3, [r3, #0]
   d49ac:	4907      	ldr	r1, [pc, #28]	; (d49cc <_Z11petWatchdogv+0x48>)
   d49ae:	4808      	ldr	r0, [pc, #32]	; (d49d0 <_Z11petWatchdogv+0x4c>)
   d49b0:	f7ff fcde 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  watchdogFlag = false;
   d49b4:	b003      	add	sp, #12
   d49b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d49ba:	bf00      	nop
   d49bc:	2003e5d1 	.word	0x2003e5d1
   d49c0:	2003e5a0 	.word	0x2003e5a0
   d49c4:	2003dae9 	.word	0x2003dae9
   d49c8:	000db910 	.word	0x000db910
   d49cc:	000db917 	.word	0x000db917
   d49d0:	2003e3e0 	.word	0x2003e3e0

000d49d4 <_Z9sendEventv>:

   d49d4:	b510      	push	{r4, lr}
{
   d49d6:	4b58      	ldr	r3, [pc, #352]	; (d4b38 <_Z9sendEventv+0x164>)
   d49d8:	4c58      	ldr	r4, [pc, #352]	; (d4b3c <_Z9sendEventv+0x168>)
   d49da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49dc:	2b01      	cmp	r3, #1

   d49de:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
{
   d49e2:	d143      	bne.n	d4a6c <_Z9sendEventv+0x98>
  char data[512];                 
   d49e4:	6960      	ldr	r0, [r4, #20]
   d49e6:	f004 fb17 	bl	d9018 <__aeabi_f2d>
   d49ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d49ee:	6920      	ldr	r0, [r4, #16]
   d49f0:	f004 fb12 	bl	d9018 <__aeabi_f2d>
   d49f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d49f8:	68e0      	ldr	r0, [r4, #12]
   d49fa:	f004 fb0d 	bl	d9018 <__aeabi_f2d>
   d49fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4a02:	68a0      	ldr	r0, [r4, #8]
   d4a04:	f004 fb08 	bl	d9018 <__aeabi_f2d>
   d4a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4a0c:	6860      	ldr	r0, [r4, #4]
   d4a0e:	f004 fb03 	bl	d9018 <__aeabi_f2d>
   d4a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4a16:	6820      	ldr	r0, [r4, #0]
   d4a18:	f004 fafe 	bl	d9018 <__aeabi_f2d>
   d4a1c:	e9cd 0100 	strd	r0, r1, [sp]
   d4a20:	4a47      	ldr	r2, [pc, #284]	; (d4b40 <_Z9sendEventv+0x16c>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4a22:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4a26:	a80c      	add	r0, sp, #48	; 0x30
   d4a28:	f002 fd1c 	bl	d7464 <snprintf>
   d4a2c:	2300      	movs	r3, #0
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4a2e:	f88d 3000 	strb.w	r3, [sp]
   d4a32:	4b44      	ldr	r3, [pc, #272]	; (d4b44 <_Z9sendEventv+0x170>)
   d4a34:	4944      	ldr	r1, [pc, #272]	; (d4b48 <_Z9sendEventv+0x174>)
   d4a36:	781b      	ldrb	r3, [r3, #0]
   d4a38:	4844      	ldr	r0, [pc, #272]	; (d4b4c <_Z9sendEventv+0x178>)
   d4a3a:	aa0c      	add	r2, sp, #48	; 0x30
   d4a3c:	f7ff fc98 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4a40:	6823      	ldr	r3, [r4, #0]
   d4a42:	61a3      	str	r3, [r4, #24]
  // Update the previous sensor values.
   d4a44:	6863      	ldr	r3, [r4, #4]
   d4a46:	61e3      	str	r3, [r4, #28]
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d4a48:	68a3      	ldr	r3, [r4, #8]
   d4a4a:	6223      	str	r3, [r4, #32]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d4a4c:	68e3      	ldr	r3, [r4, #12]
   d4a4e:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d4a50:	6923      	ldr	r3, [r4, #16]
   d4a52:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d4a54:	6963      	ldr	r3, [r4, #20]
   d4a56:	62e3      	str	r3, [r4, #44]	; 0x2c
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d4a58:	4b3d      	ldr	r3, [pc, #244]	; (d4b50 <_Z9sendEventv+0x17c>)
   d4a5a:	2201      	movs	r2, #1
   d4a5c:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a5e:	f002 fa4b 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d4a62:	4b3c      	ldr	r3, [pc, #240]	; (d4b54 <_Z9sendEventv+0x180>)
   d4a64:	6018      	str	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4a66:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d4a6a:	bd10      	pop	{r4, pc}
  if (sysStatus.operatingMode == 1){
   d4a6c:	2b02      	cmp	r3, #2
   d4a6e:	d11f      	bne.n	d4ab0 <_Z9sendEventv+0xdc>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4a70:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4a72:	f004 fad1 	bl	d9018 <__aeabi_f2d>
   d4a76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4a7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4a7c:	f004 facc 	bl	d9018 <__aeabi_f2d>
   d4a80:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4a84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d4a86:	f004 fac7 	bl	d9018 <__aeabi_f2d>
   d4a8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4a8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4a90:	f004 fac2 	bl	d9018 <__aeabi_f2d>
   d4a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4a98:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d4a9a:	f004 fabd 	bl	d9018 <__aeabi_f2d>
   d4a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4aa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d4aa4:	f004 fab8 	bl	d9018 <__aeabi_f2d>
   d4aa8:	4a2b      	ldr	r2, [pc, #172]	; (d4b58 <_Z9sendEventv+0x184>)
   d4aaa:	e9cd 0100 	strd	r0, r1, [sp]
   d4aae:	e7b8      	b.n	d4a22 <_Z9sendEventv+0x4e>
  } else if (sysStatus.operatingMode == 2){
   d4ab0:	2b03      	cmp	r3, #3
   d4ab2:	d11f      	bne.n	d4af4 <_Z9sendEventv+0x120>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d4ab4:	6960      	ldr	r0, [r4, #20]
   d4ab6:	f004 faaf 	bl	d9018 <__aeabi_f2d>
   d4aba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4abe:	6920      	ldr	r0, [r4, #16]
   d4ac0:	f004 faaa 	bl	d9018 <__aeabi_f2d>
   d4ac4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4ac8:	68e0      	ldr	r0, [r4, #12]
   d4aca:	f004 faa5 	bl	d9018 <__aeabi_f2d>
   d4ace:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4ad2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4ad4:	f004 faa0 	bl	d9018 <__aeabi_f2d>
   d4ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4adc:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d4ade:	f004 fa9b 	bl	d9018 <__aeabi_f2d>
   d4ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4ae6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d4ae8:	f004 fa96 	bl	d9018 <__aeabi_f2d>
   d4aec:	4a1b      	ldr	r2, [pc, #108]	; (d4b5c <_Z9sendEventv+0x188>)
   d4aee:	e9cd 0100 	strd	r0, r1, [sp]
   d4af2:	e796      	b.n	d4a22 <_Z9sendEventv+0x4e>
  }else if (sysStatus.operatingMode == 3){
   d4af4:	2b04      	cmp	r3, #4
   d4af6:	d199      	bne.n	d4a2c <_Z9sendEventv+0x58>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4af8:	6960      	ldr	r0, [r4, #20]
   d4afa:	f004 fa8d 	bl	d9018 <__aeabi_f2d>
   d4afe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4b02:	6920      	ldr	r0, [r4, #16]
   d4b04:	f004 fa88 	bl	d9018 <__aeabi_f2d>
   d4b08:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4b0c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   d4b0e:	f004 fa83 	bl	d9018 <__aeabi_f2d>
   d4b12:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4b16:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d4b18:	f004 fa7e 	bl	d9018 <__aeabi_f2d>
   d4b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4b20:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d4b22:	f004 fa79 	bl	d9018 <__aeabi_f2d>
   d4b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b2a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d4b2c:	f004 fa74 	bl	d9018 <__aeabi_f2d>
   d4b30:	4a0b      	ldr	r2, [pc, #44]	; (d4b60 <_Z9sendEventv+0x18c>)
   d4b32:	e9cd 0100 	strd	r0, r1, [sp]
   d4b36:	e774      	b.n	d4a22 <_Z9sendEventv+0x4e>
   d4b38:	2003e5a0 	.word	0x2003e5a0
   d4b3c:	2003e450 	.word	0x2003e450
   d4b40:	000db920 	.word	0x000db920
   d4b44:	2003dae9 	.word	0x2003dae9
   d4b48:	000dbb2c 	.word	0x000dbb2c
   d4b4c:	2003e3e0 	.word	0x2003e3e0
   d4b50:	2003db0b 	.word	0x2003db0b
   d4b54:	2003e5d4 	.word	0x2003e5d4
   d4b58:	000db9a2 	.word	0x000db9a2
   d4b5c:	000dba26 	.word	0x000dba26
   d4b60:	000dbaa9 	.word	0x000dbaa9

000d4b64 <_Z22publishStateTransitionv>:

   d4b64:	b530      	push	{r4, r5, lr}
{
   d4b66:	4d11      	ldr	r5, [pc, #68]	; (d4bac <_Z22publishStateTransitionv+0x48>)
   d4b68:	4c11      	ldr	r4, [pc, #68]	; (d4bb0 <_Z22publishStateTransitionv+0x4c>)
   d4b6a:	4912      	ldr	r1, [pc, #72]	; (d4bb4 <_Z22publishStateTransitionv+0x50>)
   d4b6c:	782a      	ldrb	r2, [r5, #0]
   d4b6e:	7820      	ldrb	r0, [r4, #0]

   d4b70:	b08d      	sub	sp, #52	; 0x34
{
   d4b72:	231a      	movs	r3, #26
   d4b74:	fb03 1202 	mla	r2, r3, r2, r1
   d4b78:	9200      	str	r2, [sp, #0]
   d4b7a:	fb03 1300 	mla	r3, r3, r0, r1
   d4b7e:	4a0e      	ldr	r2, [pc, #56]	; (d4bb8 <_Z22publishStateTransitionv+0x54>)
   d4b80:	2128      	movs	r1, #40	; 0x28
   d4b82:	a802      	add	r0, sp, #8
   d4b84:	f002 fc6e 	bl	d7464 <snprintf>
  char stateTransitionString[40];
   d4b88:	782b      	ldrb	r3, [r5, #0]
   d4b8a:	7023      	strb	r3, [r4, #0]
   d4b8c:	f002 fba2 	bl	d72d4 <spark_cloud_flag_connected>
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4b90:	b148      	cbz	r0, d4ba6 <_Z22publishStateTransitionv+0x42>
   d4b92:	2300      	movs	r3, #0
   d4b94:	f88d 3000 	strb.w	r3, [sp]
   d4b98:	4b08      	ldr	r3, [pc, #32]	; (d4bbc <_Z22publishStateTransitionv+0x58>)
   d4b9a:	4909      	ldr	r1, [pc, #36]	; (d4bc0 <_Z22publishStateTransitionv+0x5c>)
   d4b9c:	781b      	ldrb	r3, [r3, #0]
   d4b9e:	4809      	ldr	r0, [pc, #36]	; (d4bc4 <_Z22publishStateTransitionv+0x60>)
   d4ba0:	aa02      	add	r2, sp, #8
   d4ba2:	f7ff fbe5 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  oldState = state;
   d4ba6:	b00d      	add	sp, #52	; 0x34
   d4ba8:	bd30      	pop	{r4, r5, pc}
   d4baa:	bf00      	nop
   d4bac:	2003e59d 	.word	0x2003e59d
   d4bb0:	2003e3dc 	.word	0x2003e3dc
   d4bb4:	2003d748 	.word	0x2003d748
   d4bb8:	000dbb41 	.word	0x000dbb41
   d4bbc:	2003dae9 	.word	0x2003dae9
   d4bc0:	000dbb4f 	.word	0x000dbb4f
   d4bc4:	2003e3e0 	.word	0x2003e3e0

000d4bc8 <_Z17getBatteryContextv>:

   d4bc8:	b530      	push	{r4, r5, lr}
void getBatteryContext() 
   d4bca:	4d0d      	ldr	r5, [pc, #52]	; (d4c00 <_Z17getBatteryContextv+0x38>)
   d4bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

   d4bce:	b089      	sub	sp, #36	; 0x24
void getBatteryContext() 
   d4bd0:	ac01      	add	r4, sp, #4
   d4bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
   d4bd8:	4b0a      	ldr	r3, [pc, #40]	; (d4c04 <_Z17getBatteryContextv+0x3c>)
void getBatteryContext() 
   d4bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
   d4bde:	7c1b      	ldrb	r3, [r3, #16]
   d4be0:	4809      	ldr	r0, [pc, #36]	; (d4c08 <_Z17getBatteryContextv+0x40>)
   d4be2:	aa08      	add	r2, sp, #32
   d4be4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4be8:	2110      	movs	r1, #16
   d4bea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4bee:	4a07      	ldr	r2, [pc, #28]	; (d4c0c <_Z17getBatteryContextv+0x44>)
   d4bf0:	f002 fc38 	bl	d7464 <snprintf>
  // sysStatus.batteryState = System.batteryState();
   d4bf4:	4b06      	ldr	r3, [pc, #24]	; (d4c10 <_Z17getBatteryContextv+0x48>)
   d4bf6:	2201      	movs	r2, #1
   d4bf8:	701a      	strb	r2, [r3, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4bfa:	b009      	add	sp, #36	; 0x24
   d4bfc:	bd30      	pop	{r4, r5, pc}
   d4bfe:	bf00      	nop
   d4c00:	000dbe98 	.word	0x000dbe98
   d4c04:	2003e5a0 	.word	0x2003e5a0
   d4c08:	2003daea 	.word	0x2003daea
   d4c0c:	000dbf74 	.word	0x000dbf74
   d4c10:	2003e5d0 	.word	0x2003e5d0

000d4c14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
// Wires=4 for 4 wires: R,S,T and N
   d4c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t p=0;
   d4c18:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4c1c:	f109 0407 	add.w	r4, r9, #7
// Wires=4 for 4 wires: R,S,T and N
   d4c20:	b083      	sub	sp, #12
   uint8_t p=0;
   d4c22:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
// Wires=4 for 4 wires: R,S,T and N
   d4c26:	af02      	add	r7, sp, #8
   uint8_t p=0;
   d4c28:	ebad 0d04 	sub.w	sp, sp, r4
   d4c2c:	ad02      	add	r5, sp, #8
   d4c2e:	46ac      	mov	ip, r5
   d4c30:	f04f 0e00 	mov.w	lr, #0
   d4c34:	f84c eb04 	str.w	lr, [ip], #4
   d4c38:	3802      	subs	r0, #2
   d4c3a:	2800      	cmp	r0, #0
   d4c3c:	da2a      	bge.n	d4c94 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
  for (uint8_t i=0;i<p;i++){
   d4c3e:	f8df b068 	ldr.w	fp, [pc, #104]	; d4ca8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  
   d4c42:	f8df a068 	ldr.w	sl, [pc, #104]	; d4cac <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4c46:	460c      	mov	r4, r1
   d4c48:	4690      	mov	r8, r2
   d4c4a:	461e      	mov	r6, r3
   d4c4c:	44a9      	add	r9, r5
   float i_rms_per_Phase[p]={0};
   d4c4e:	454d      	cmp	r5, r9
   d4c50:	d024      	beq.n	d4c9c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
  for (uint8_t i=0;i<p;i++){
   d4c52:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4c56:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4c5a:	4658      	mov	r0, fp
   d4c5c:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4c60:	f000 ffa2 	bl	d5ba8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4c64:	ec51 0b10 	vmov	r0, r1, d0
   d4c68:	f004 fcfe 	bl	d9668 <__aeabi_d2f>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4c6c:	f848 0b04 	str.w	r0, [r8], #4
  for (uint8_t i=0;i<p;i++){
   d4c70:	f845 0b04 	str.w	r0, [r5], #4
  
   d4c74:	f004 f9d0 	bl	d9018 <__aeabi_f2d>
   d4c78:	e9da 2300 	ldrd	r2, r3, [sl]
   d4c7c:	f004 fa24 	bl	d90c8 <__aeabi_dmul>
   d4c80:	4b08      	ldr	r3, [pc, #32]	; (d4ca4 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d4c82:	2200      	movs	r2, #0
   d4c84:	f004 fb4a 	bl	d931c <__aeabi_ddiv>
   d4c88:	f004 fcee 	bl	d9668 <__aeabi_d2f>
   d4c8c:	3410      	adds	r4, #16
   d4c8e:	f846 0b04 	str.w	r0, [r6], #4
   float i_rms_per_Phase[p]={0};
   d4c92:	e7dc      	b.n	d4c4e <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   uint8_t p=0;
   d4c94:	f84c eb04 	str.w	lr, [ip], #4
   d4c98:	3801      	subs	r0, #1
   d4c9a:	e7ce      	b.n	d4c3a <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
  }
   d4c9c:	3704      	adds	r7, #4
   d4c9e:	46bd      	mov	sp, r7
   d4ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ca4:	408f4000 	.word	0x408f4000
   d4ca8:	2003da00 	.word	0x2003da00
   d4cac:	2003d740 	.word	0x2003d740

000d4cb0 <_Z16takeMeasurementsv>:

   d4cb0:	b570      	push	{r4, r5, r6, lr}
bool takeMeasurements() 
   d4cb2:	4c90      	ldr	r4, [pc, #576]	; (d4ef4 <_Z16takeMeasurementsv+0x244>)
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4cb4:	4d90      	ldr	r5, [pc, #576]	; (d4ef8 <_Z16takeMeasurementsv+0x248>)
bool takeMeasurements() 
   d4cb6:	2300      	movs	r3, #0
   d4cb8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
{   
   d4cbc:	f7ff ff84 	bl	d4bc8 <_Z17getBatteryContextv>
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d4cc0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d4cc2:	2801      	cmp	r0, #1
   d4cc4:	d14a      	bne.n	d4d5c <_Z16takeMeasurementsv+0xac>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d4cc6:	7f2b      	ldrb	r3, [r5, #28]
   d4cc8:	b14b      	cbz	r3, d4cde <_Z16takeMeasurementsv+0x2e>
   d4cca:	488c      	ldr	r0, [pc, #560]	; (d4efc <_Z16takeMeasurementsv+0x24c>)
   d4ccc:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4cd0:	f000 ffea 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4cd4:	ec51 0b10 	vmov	r0, r1, d0
   d4cd8:	f004 fcc6 	bl	d9668 <__aeabi_d2f>
   d4cdc:	6020      	str	r0, [r4, #0]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d4cde:	7f6b      	ldrb	r3, [r5, #29]
   d4ce0:	b14b      	cbz	r3, d4cf6 <_Z16takeMeasurementsv+0x46>
   d4ce2:	4887      	ldr	r0, [pc, #540]	; (d4f00 <_Z16takeMeasurementsv+0x250>)
   d4ce4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4ce8:	f000 ffde 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4cec:	ec51 0b10 	vmov	r0, r1, d0
   d4cf0:	f004 fcba 	bl	d9668 <__aeabi_d2f>
   d4cf4:	6060      	str	r0, [r4, #4]
  };
   d4cf6:	7fab      	ldrb	r3, [r5, #30]
   d4cf8:	b14b      	cbz	r3, d4d0e <_Z16takeMeasurementsv+0x5e>
   d4cfa:	4882      	ldr	r0, [pc, #520]	; (d4f04 <_Z16takeMeasurementsv+0x254>)
   d4cfc:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d00:	f000 ffd2 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d04:	ec51 0b10 	vmov	r0, r1, d0
   d4d08:	f004 fcae 	bl	d9668 <__aeabi_d2f>
   d4d0c:	60a0      	str	r0, [r4, #8]

   d4d0e:	7feb      	ldrb	r3, [r5, #31]
   d4d10:	b14b      	cbz	r3, d4d26 <_Z16takeMeasurementsv+0x76>
   d4d12:	487d      	ldr	r0, [pc, #500]	; (d4f08 <_Z16takeMeasurementsv+0x258>)
   d4d14:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d18:	f000 ffc6 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d1c:	ec51 0b10 	vmov	r0, r1, d0
   d4d20:	f004 fca2 	bl	d9668 <__aeabi_d2f>
   d4d24:	60e0      	str	r0, [r4, #12]
  // Three Phase Load with 3 Wires - Load Two
   d4d26:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4d2a:	b14b      	cbz	r3, d4d40 <_Z16takeMeasurementsv+0x90>
   d4d2c:	4877      	ldr	r0, [pc, #476]	; (d4f0c <_Z16takeMeasurementsv+0x25c>)
   d4d2e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d32:	f000 ffb9 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d36:	ec51 0b10 	vmov	r0, r1, d0
   d4d3a:	f004 fc95 	bl	d9668 <__aeabi_d2f>
   d4d3e:	6120      	str	r0, [r4, #16]
  Load_Monitor::CT_Property_Struct ThreePhaseLoadTwo[3]=
   d4d40:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4d44:	b1eb      	cbz	r3, d4d82 <_Z16takeMeasurementsv+0xd2>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4d46:	4872      	ldr	r0, [pc, #456]	; (d4f10 <_Z16takeMeasurementsv+0x260>)
   d4d48:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d4c:	f000 ffac 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d50:	ec51 0b10 	vmov	r0, r1, d0
   d4d54:	f004 fc88 	bl	d9668 <__aeabi_d2f>
   d4d58:	6160      	str	r0, [r4, #20]
   d4d5a:	e012      	b.n	d4d82 <_Z16takeMeasurementsv+0xd2>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d4d5c:	2802      	cmp	r0, #2
   d4d5e:	f040 808b 	bne.w	d4e78 <_Z16takeMeasurementsv+0x1c8>
  };
   d4d62:	496c      	ldr	r1, [pc, #432]	; (d4f14 <_Z16takeMeasurementsv+0x264>)
   d4d64:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4d68:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4d6c:	2003      	movs	r0, #3
   d4d6e:	f7ff ff51 	bl	d4c14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
  // Three Phase Load with 4 Wires - Load One
   d4d72:	4969      	ldr	r1, [pc, #420]	; (d4f18 <_Z16takeMeasurementsv+0x268>)
   d4d74:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4d78:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4d7c:	2003      	movs	r0, #3
   d4d7e:	f7ff ff49 	bl	d4c14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      // Load for three phase with 3 Wires.
   d4d82:	edd4 7a00 	vldr	s15, [r4]
   d4d86:	ed94 7a06 	vldr	s14, [r4, #24]
    // In operation mode 3 of the three wire load, CT1 to CT 3 are load A and CT4 to CT6 are available for single phase operation.
   d4d8a:	4e64      	ldr	r6, [pc, #400]	; (d4f1c <_Z16takeMeasurementsv+0x26c>)
      // Load for three phase with 3 Wires.
   d4d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d94:	bfd8      	it	le
   d4d96:	eef1 7a67 	vnegle.f32	s15, s15
   d4d9a:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4d9e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d4da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    // In operation mode 3 of the three wire load, CT1 to CT 3 are load A and CT4 to CT6 are available for single phase operation.
   d4da6:	2201      	movs	r2, #1
      // Load for three phase with 3 Wires.
   d4da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    // In operation mode 3 of the three wire load, CT1 to CT 3 are load A and CT4 to CT6 are available for single phase operation.
   d4dac:	7032      	strb	r2, [r6, #0]
      // Load for three phase with 3 Wires.
   d4dae:	da59      	bge.n	d4e64 <_Z16takeMeasurementsv+0x1b4>
   d4db0:	ed94 7a01 	vldr	s14, [r4, #4]
   d4db4:	edd4 6a07 	vldr	s13, [r4, #28]
   d4db8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4dc0:	bfd8      	it	le
   d4dc2:	eeb1 7a47 	vnegle.f32	s14, s14
   d4dc6:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4dd2:	da47      	bge.n	d4e64 <_Z16takeMeasurementsv+0x1b4>
   d4dd4:	ed94 7a02 	vldr	s14, [r4, #8]
   d4dd8:	edd4 6a08 	vldr	s13, [r4, #32]
   d4ddc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4de4:	bfd8      	it	le
   d4de6:	eeb1 7a47 	vnegle.f32	s14, s14
   d4dea:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4df6:	da35      	bge.n	d4e64 <_Z16takeMeasurementsv+0x1b4>
   d4df8:	ed94 7a03 	vldr	s14, [r4, #12]
   d4dfc:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4e00:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e08:	bfd8      	it	le
   d4e0a:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e0e:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e1a:	da23      	bge.n	d4e64 <_Z16takeMeasurementsv+0x1b4>
   d4e1c:	ed94 7a04 	vldr	s14, [r4, #16]
   d4e20:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4e24:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e2c:	bfd8      	it	le
   d4e2e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e32:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e3e:	da11      	bge.n	d4e64 <_Z16takeMeasurementsv+0x1b4>
   d4e40:	ed94 7a05 	vldr	s14, [r4, #20]
   d4e44:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4e48:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e50:	bfd8      	it	le
   d4e52:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e56:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e62:	db44      	blt.n	d4eee <_Z16takeMeasurementsv+0x23e>
      
   d4e64:	2501      	movs	r5, #1
   d4e66:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
      // CT4 to CT6 are available for single phase operation.
   d4e6a:	f003 fba0 	bl	d85ae <_ZN9TimeClass3nowEv>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480); 
   d4e6e:	7035      	strb	r5, [r6, #0]
      // CT4 to CT6 are available for single phase operation.
   d4e70:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      else sensorData.sensorFourCurrent=0;
   d4e74:	4628      	mov	r0, r5
      else sensorData.sensorFiveCurrent=0;           
   d4e76:	bd70      	pop	{r4, r5, r6, pc}
      {CT2_PIN,sensorConstants.sensorTwoConstant},                                              // S phase
   d4e78:	2803      	cmp	r0, #3
   d4e7a:	d12a      	bne.n	d4ed2 <_Z16takeMeasurementsv+0x222>
      {CT4_PIN,sensorConstants.sensorFourConstant}                                              // N phase 
   d4e7c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4e80:	4924      	ldr	r1, [pc, #144]	; (d4f14 <_Z16takeMeasurementsv+0x264>)
   d4e82:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4e86:	f7ff fec5 	bl	d4c14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    sensorData.validData = false;
   d4e8a:	7feb      	ldrb	r3, [r5, #31]
   d4e8c:	b1f3      	cbz	r3, d4ecc <_Z16takeMeasurementsv+0x21c>
   d4e8e:	481e      	ldr	r0, [pc, #120]	; (d4f08 <_Z16takeMeasurementsv+0x258>)
   d4e90:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4e94:	f000 ff08 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e98:	ec51 0b10 	vmov	r0, r1, d0
   d4e9c:	f004 fbe4 	bl	d9668 <__aeabi_d2f>
   d4ea0:	60e0      	str	r0, [r4, #12]
    else if ((sysStatus.operatingMode) == 2){
   d4ea2:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4ea6:	b1fb      	cbz	r3, d4ee8 <_Z16takeMeasurementsv+0x238>
   d4ea8:	4818      	ldr	r0, [pc, #96]	; (d4f0c <_Z16takeMeasurementsv+0x25c>)
   d4eaa:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4eae:	f000 fefb 	bl	d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4eb2:	ec51 0b10 	vmov	r0, r1, d0
   d4eb6:	f004 fbd7 	bl	d9668 <__aeabi_d2f>
   d4eba:	6120      	str	r0, [r4, #16]
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4ebc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4ec0:	2b00      	cmp	r3, #0
   d4ec2:	f47f af40 	bne.w	d4d46 <_Z16takeMeasurementsv+0x96>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4ec6:	2300      	movs	r3, #0
   d4ec8:	6163      	str	r3, [r4, #20]
   d4eca:	e75a      	b.n	d4d82 <_Z16takeMeasurementsv+0xd2>
    getBatteryContext();     
   d4ecc:	2300      	movs	r3, #0
   d4ece:	60e3      	str	r3, [r4, #12]
    
   d4ed0:	e7e7      	b.n	d4ea2 <_Z16takeMeasurementsv+0x1f2>
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4ed2:	2804      	cmp	r0, #4
   d4ed4:	f47f af55 	bne.w	d4d82 <_Z16takeMeasurementsv+0xd2>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d4ed8:	4911      	ldr	r1, [pc, #68]	; (d4f20 <_Z16takeMeasurementsv+0x270>)
   d4eda:	f104 0370 	add.w	r3, r4, #112	; 0x70
   d4ede:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4ee2:	f7ff fe97 	bl	d4c14 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d4ee6:	e7dc      	b.n	d4ea2 <_Z16takeMeasurementsv+0x1f2>
      // Load One
   d4ee8:	2300      	movs	r3, #0
   d4eea:	6123      	str	r3, [r4, #16]
   d4eec:	e7e6      	b.n	d4ebc <_Z16takeMeasurementsv+0x20c>
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);    
   d4eee:	2000      	movs	r0, #0
   d4ef0:	e7c1      	b.n	d4e76 <_Z16takeMeasurementsv+0x1c6>
   d4ef2:	bf00      	nop
   d4ef4:	2003e450 	.word	0x2003e450
   d4ef8:	2003e5a0 	.word	0x2003e5a0
   d4efc:	2003df60 	.word	0x2003df60
   d4f00:	2003e018 	.word	0x2003e018
   d4f04:	2003e0d0 	.word	0x2003e0d0
   d4f08:	2003e188 	.word	0x2003e188
   d4f0c:	2003e240 	.word	0x2003e240
   d4f10:	2003e2f8 	.word	0x2003e2f8
   d4f14:	2003da88 	.word	0x2003da88
   d4f18:	2003dab8 	.word	0x2003dab8
   d4f1c:	2003e4dc 	.word	0x2003e4dc
   d4f20:	2003da48 	.word	0x2003da48

000d4f24 <loop>:

   d4f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
// loop() runs over and over again, as quickly as it can execute.
   d4f26:	4c75      	ldr	r4, [pc, #468]	; (d50fc <loop+0x1d8>)
   d4f28:	7823      	ldrb	r3, [r4, #0]
   d4f2a:	3b01      	subs	r3, #1
   d4f2c:	2b05      	cmp	r3, #5
   d4f2e:	d817      	bhi.n	d4f60 <loop+0x3c>
   d4f30:	e8df f003 	tbb	[pc, r3]
   d4f34:	685c03be 	.word	0x685c03be
   d4f38:	8b42      	.short	0x8b42
  switch(state) {
   d4f3a:	4b71      	ldr	r3, [pc, #452]	; (d5100 <loop+0x1dc>)
   d4f3c:	7a5b      	ldrb	r3, [r3, #9]
   d4f3e:	b12b      	cbz	r3, d4f4c <loop+0x28>
   d4f40:	4b70      	ldr	r3, [pc, #448]	; (d5104 <loop+0x1e0>)
   d4f42:	781b      	ldrb	r3, [r3, #0]
   d4f44:	2b02      	cmp	r3, #2
   d4f46:	d001      	beq.n	d4f4c <loop+0x28>
   d4f48:	f7ff fe0c 	bl	d4b64 <_Z22publishStateTransitionv>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f4c:	f003 fb2f 	bl	d85ae <_ZN9TimeClass3nowEv>
   d4f50:	230a      	movs	r3, #10
   d4f52:	fb90 f2f3 	sdiv	r2, r0, r3
   d4f56:	fb02 0313 	mls	r3, r2, r3, r0
   d4f5a:	b90b      	cbnz	r3, d4f60 <loop+0x3c>
   d4f5c:	2305      	movs	r3, #5
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d4f5e:	7023      	strb	r3, [r4, #0]
  }
   d4f60:	4869      	ldr	r0, [pc, #420]	; (d5108 <loop+0x1e4>)
   d4f62:	f001 fba3 	bl	d66ac <_ZN8MCP794104loopEv>
  rtc.loop();                                                                               // keeps the clock up to date
   d4f66:	4b69      	ldr	r3, [pc, #420]	; (d510c <loop+0x1e8>)
   d4f68:	781b      	ldrb	r3, [r3, #0]
   d4f6a:	b10b      	cbz	r3, d4f70 <loop+0x4c>
   d4f6c:	f7ff fd0a 	bl	d4984 <_Z11petWatchdogv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4f70:	4c67      	ldr	r4, [pc, #412]	; (d5110 <loop+0x1ec>)
   d4f72:	7823      	ldrb	r3, [r4, #0]
   d4f74:	b13b      	cbz	r3, d4f86 <loop+0x62>
   d4f76:	2330      	movs	r3, #48	; 0x30
   d4f78:	4a61      	ldr	r2, [pc, #388]	; (d5100 <loop+0x1dc>)
   d4f7a:	4866      	ldr	r0, [pc, #408]	; (d5114 <loop+0x1f0>)
   d4f7c:	2101      	movs	r1, #1
   d4f7e:	f000 ffb8 	bl	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
  if (sysStatusWriteNeeded) {
   d4f82:	2300      	movs	r3, #0
   d4f84:	7023      	strb	r3, [r4, #0]
  }
   d4f86:	4c64      	ldr	r4, [pc, #400]	; (d5118 <loop+0x1f4>)
   d4f88:	7823      	ldrb	r3, [r4, #0]
   d4f8a:	b143      	cbz	r3, d4f9e <loop+0x7a>
   d4f8c:	238c      	movs	r3, #140	; 0x8c
   d4f8e:	4a63      	ldr	r2, [pc, #396]	; (d511c <loop+0x1f8>)
   d4f90:	4860      	ldr	r0, [pc, #384]	; (d5114 <loop+0x1f0>)
   d4f92:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4f96:	f000 ffac 	bl	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
  if (sensorDataWriteNeeded) {
   d4f9a:	2300      	movs	r3, #0
   d4f9c:	7023      	strb	r3, [r4, #0]
  }
   d4f9e:	4c60      	ldr	r4, [pc, #384]	; (d5120 <loop+0x1fc>)
   d4fa0:	7823      	ldrb	r3, [r4, #0]
   d4fa2:	b13b      	cbz	r3, d4fb4 <loop+0x90>
   d4fa4:	2318      	movs	r3, #24
   d4fa6:	4a5f      	ldr	r2, [pc, #380]	; (d5124 <loop+0x200>)
   d4fa8:	485a      	ldr	r0, [pc, #360]	; (d5114 <loop+0x1f0>)
   d4faa:	21a0      	movs	r1, #160	; 0xa0
   d4fac:	f000 ffa1 	bl	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
  if (constantsStatusWriteNeeded) {
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	7023      	strb	r3, [r4, #0]
  }
   d4fb4:	b003      	add	sp, #12
   d4fb6:	bd30      	pop	{r4, r5, pc}

   d4fb8:	4d51      	ldr	r5, [pc, #324]	; (d5100 <loop+0x1dc>)
   d4fba:	7a6a      	ldrb	r2, [r5, #9]
   d4fbc:	b12a      	cbz	r2, d4fca <loop+0xa6>
   d4fbe:	4b51      	ldr	r3, [pc, #324]	; (d5104 <loop+0x1e0>)
   d4fc0:	781b      	ldrb	r3, [r3, #0]
   d4fc2:	2b05      	cmp	r3, #5
   d4fc4:	d001      	beq.n	d4fca <loop+0xa6>
   d4fc6:	f7ff fdcd 	bl	d4b64 <_Z22publishStateTransitionv>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fca:	f7ff fe71 	bl	d4cb0 <_Z16takeMeasurementsv>
   d4fce:	b108      	cbz	r0, d4fd4 <loop+0xb0>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fd0:	2304      	movs	r3, #4
   d4fd2:	e7c4      	b.n	d4f5e <loop+0x3a>
    if (takeMeasurements()) state = REPORTING_STATE;
   d4fd4:	f003 faeb 	bl	d85ae <_ZN9TimeClass3nowEv>
   d4fd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d4fda:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fde:	fb02 0313 	mls	r3, r2, r3, r0
   d4fe2:	b90b      	cbnz	r3, d4fe8 <loop+0xc4>
   d4fe4:	2303      	movs	r3, #3
   d4fe6:	e7ba      	b.n	d4f5e <loop+0x3a>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d4fe8:	2302      	movs	r3, #2
   d4fea:	e7b8      	b.n	d4f5e <loop+0x3a>
  case MEASURING_STATE:                                                                     // Take measurements prior to sending
   d4fec:	4b44      	ldr	r3, [pc, #272]	; (d5100 <loop+0x1dc>)
   d4fee:	7a5b      	ldrb	r3, [r3, #9]
   d4ff0:	b12b      	cbz	r3, d4ffe <loop+0xda>
   d4ff2:	4b44      	ldr	r3, [pc, #272]	; (d5104 <loop+0x1e0>)
   d4ff4:	781b      	ldrb	r3, [r3, #0]
   d4ff6:	2b03      	cmp	r3, #3
   d4ff8:	d001      	beq.n	d4ffe <loop+0xda>
   d4ffa:	f7ff fdb3 	bl	d4b64 <_Z22publishStateTransitionv>
    
   d4ffe:	f7ff fe57 	bl	d4cb0 <_Z16takeMeasurementsv>
   d5002:	e7e5      	b.n	d4fd0 <loop+0xac>

   d5004:	4b3e      	ldr	r3, [pc, #248]	; (d5100 <loop+0x1dc>)
   d5006:	7a5b      	ldrb	r3, [r3, #9]
   d5008:	b12b      	cbz	r3, d5016 <loop+0xf2>
   d500a:	4b3e      	ldr	r3, [pc, #248]	; (d5104 <loop+0x1e0>)
   d500c:	781b      	ldrb	r3, [r3, #0]
   d500e:	2b04      	cmp	r3, #4
   d5010:	d001      	beq.n	d5016 <loop+0xf2>
   d5012:	f7ff fda7 	bl	d4b64 <_Z22publishStateTransitionv>
   d5016:	f002 f95d 	bl	d72d4 <spark_cloud_flag_connected>
  case REPORTING_STATE: 
   d501a:	b168      	cbz	r0, d5038 <loop+0x114>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d501c:	f003 fad8 	bl	d85d0 <_ZN9TimeClass4hourEv>
   d5020:	280c      	cmp	r0, #12
   d5022:	d105      	bne.n	d5030 <loop+0x10c>
   d5024:	f002 f956 	bl	d72d4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5028:	b110      	cbz	r0, d5030 <loop+0x10c>
        return spark_sync_time(NULL);
   d502a:	2000      	movs	r0, #0
   d502c:	f002 f972 	bl	d7314 <spark_sync_time>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5030:	f7ff fcd0 	bl	d49d4 <_Z9sendEventv>
      // takeMeasurements();
   d5034:	2306      	movs	r3, #6
   d5036:	e792      	b.n	d4f5e <loop+0x3a>
        spark_cloud_flag_connect();
   d5038:	f002 f944 	bl	d72c4 <spark_cloud_flag_connect>
    else {
   d503c:	2302      	movs	r3, #2
   d503e:	7023      	strb	r3, [r4, #0]
   d5040:	f001 ff5a 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
      Particle.connect();
   d5044:	4b38      	ldr	r3, [pc, #224]	; (d5128 <loop+0x204>)
   d5046:	6018      	str	r0, [r3, #0]
   d5048:	e78a      	b.n	d4f60 <loop+0x3c>

   d504a:	4b2d      	ldr	r3, [pc, #180]	; (d5100 <loop+0x1dc>)
   d504c:	7a5b      	ldrb	r3, [r3, #9]
   d504e:	b12b      	cbz	r3, d505c <loop+0x138>
   d5050:	4b2c      	ldr	r3, [pc, #176]	; (d5104 <loop+0x1e0>)
   d5052:	781b      	ldrb	r3, [r3, #0]
   d5054:	2b06      	cmp	r3, #6
   d5056:	d001      	beq.n	d505c <loop+0x138>
   d5058:	f7ff fd84 	bl	d4b64 <_Z22publishStateTransitionv>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d505c:	4b33      	ldr	r3, [pc, #204]	; (d512c <loop+0x208>)
   d505e:	781b      	ldrb	r3, [r3, #0]
   d5060:	b943      	cbnz	r3, d5074 <loop+0x150>
   d5062:	f003 faa4 	bl	d85ae <_ZN9TimeClass3nowEv>
   d5066:	230a      	movs	r3, #10
   d5068:	fb90 f2f3 	sdiv	r2, r0, r3
   d506c:	fb02 0313 	mls	r3, r2, r3, r0
   d5070:	2b00      	cmp	r3, #0
   d5072:	d0b9      	beq.n	d4fe8 <loop+0xc4>
   d5074:	f001 ff40 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
     state = IDLE_STATE;
   d5078:	4b2d      	ldr	r3, [pc, #180]	; (d5130 <loop+0x20c>)
   d507a:	681b      	ldr	r3, [r3, #0]
   d507c:	1ac0      	subs	r0, r0, r3
   d507e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5082:	4298      	cmp	r0, r3
   d5084:	f67f af6c 	bls.w	d4f60 <loop+0x3c>
   d5088:	f001 ff36 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
    }
   d508c:	4d26      	ldr	r5, [pc, #152]	; (d5128 <loop+0x204>)
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d508e:	4a29      	ldr	r2, [pc, #164]	; (d5134 <loop+0x210>)
    }
   d5090:	6028      	str	r0, [r5, #0]
   d5092:	2300      	movs	r3, #0
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d5094:	f88d 3000 	strb.w	r3, [sp]
   d5098:	4b27      	ldr	r3, [pc, #156]	; (d5138 <loop+0x214>)
   d509a:	4928      	ldr	r1, [pc, #160]	; (d513c <loop+0x218>)
   d509c:	781b      	ldrb	r3, [r3, #0]
   d509e:	4828      	ldr	r0, [pc, #160]	; (d5140 <loop+0x21c>)
   d50a0:	f7ff f966 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      resetTimeStamp = millis();
   d50a4:	2301      	movs	r3, #1
   d50a6:	7023      	strb	r3, [r4, #0]
   d50a8:	f001 ff26 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50ac:	6028      	str	r0, [r5, #0]
   d50ae:	e757      	b.n	d4f60 <loop+0x3c>
  
   d50b0:	4b14      	ldr	r3, [pc, #80]	; (d5104 <loop+0x1e0>)
   d50b2:	781b      	ldrb	r3, [r3, #0]
   d50b4:	2b01      	cmp	r3, #1
   d50b6:	d001      	beq.n	d50bc <loop+0x198>
   d50b8:	f7ff fd54 	bl	d4b64 <_Z22publishStateTransitionv>
   d50bc:	f001 ff1c 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
   d50c0:	4b19      	ldr	r3, [pc, #100]	; (d5128 <loop+0x204>)
   d50c2:	681b      	ldr	r3, [r3, #0]
   d50c4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d50c8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d50cc:	4283      	cmp	r3, r0
   d50ce:	f4bf af47 	bcs.w	d4f60 <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50d2:	f002 f8ff 	bl	d72d4 <spark_cloud_flag_connected>
    if (millis() > resetTimeStamp + resetWait)
   d50d6:	b148      	cbz	r0, d50ec <loop+0x1c8>
   d50d8:	2300      	movs	r3, #0
   d50da:	f88d 3000 	strb.w	r3, [sp]
   d50de:	4b16      	ldr	r3, [pc, #88]	; (d5138 <loop+0x214>)
   d50e0:	4a18      	ldr	r2, [pc, #96]	; (d5144 <loop+0x220>)
   d50e2:	781b      	ldrb	r3, [r3, #0]
   d50e4:	4918      	ldr	r1, [pc, #96]	; (d5148 <loop+0x224>)
   d50e6:	4816      	ldr	r0, [pc, #88]	; (d5140 <loop+0x21c>)
   d50e8:	f7ff f942 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    {
   d50ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d50f0:	f002 fa00 	bl	d74f4 <delay>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d50f4:	f003 f8e0 	bl	d82b8 <_ZN11SystemClass5resetEv>
   d50f8:	e732      	b.n	d4f60 <loop+0x3c>
   d50fa:	bf00      	nop
   d50fc:	2003e59d 	.word	0x2003e59d
   d5100:	2003e5a0 	.word	0x2003e5a0
   d5104:	2003e3dc 	.word	0x2003e3dc
   d5108:	2003e41c 	.word	0x2003e41c
   d510c:	2003e5d1 	.word	0x2003e5d1
   d5110:	2003e5d0 	.word	0x2003e5d0
   d5114:	2003e3b0 	.word	0x2003e3b0
   d5118:	2003e4dc 	.word	0x2003e4dc
   d511c:	2003e450 	.word	0x2003e450
   d5120:	2003db0a 	.word	0x2003db0a
   d5124:	2003e438 	.word	0x2003e438
   d5128:	2003e418 	.word	0x2003e418
   d512c:	2003db0b 	.word	0x2003db0b
   d5130:	2003e5d4 	.word	0x2003e5d4
   d5134:	000dc320 	.word	0x000dc320
   d5138:	2003dae9 	.word	0x2003dae9
   d513c:	000dbb60 	.word	0x000dbb60
   d5140:	2003e3e0 	.word	0x2003e3e0
   d5144:	000dbb79 	.word	0x000dbb79
   d5148:	000dbb8d 	.word	0x000dbb8d

000d514c <_Z11loadEmonlibv>:
      // CT5 & CT6 are available for single phase operation.
   d514c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      else sensorData.sensorFiveCurrent=0;                  
   d5150:	4c44      	ldr	r4, [pc, #272]	; (d5264 <_Z11loadEmonlibv+0x118>)
   d5152:	f8df b13c 	ldr.w	fp, [pc, #316]	; d5290 <_Z11loadEmonlibv+0x144>
   d5156:	6820      	ldr	r0, [r4, #0]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d5158:	f8df a138 	ldr.w	sl, [pc, #312]	; d5294 <_Z11loadEmonlibv+0x148>
      else sensorData.sensorSixCurrent=0;
   d515c:	f8df 9138 	ldr.w	r9, [pc, #312]	; d5298 <_Z11loadEmonlibv+0x14c>
    }
   d5160:	f8df 8138 	ldr.w	r8, [pc, #312]	; d529c <_Z11loadEmonlibv+0x150>

   d5164:	4f40      	ldr	r7, [pc, #256]	; (d5268 <_Z11loadEmonlibv+0x11c>)
    sensorDataWriteNeeded = true;
   d5166:	4e41      	ldr	r6, [pc, #260]	; (d526c <_Z11loadEmonlibv+0x120>)
    if (((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d5168:	4d41      	ldr	r5, [pc, #260]	; (d5270 <_Z11loadEmonlibv+0x124>)
      else sensorData.sensorFiveCurrent=0;                  
   d516a:	f003 ff55 	bl	d9018 <__aeabi_f2d>
   d516e:	ec41 0b10 	vmov	d0, r0, r1
   d5172:	f89b 1000 	ldrb.w	r1, [fp]
   d5176:	483f      	ldr	r0, [pc, #252]	; (d5274 <_Z11loadEmonlibv+0x128>)
   d5178:	f000 fd8a 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d517c:	6860      	ldr	r0, [r4, #4]
   d517e:	f003 ff4b 	bl	d9018 <__aeabi_f2d>
   d5182:	ec41 0b10 	vmov	d0, r0, r1
   d5186:	f89a 1000 	ldrb.w	r1, [sl]
   d518a:	483b      	ldr	r0, [pc, #236]	; (d5278 <_Z11loadEmonlibv+0x12c>)
   d518c:	f000 fd80 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      else sensorData.sensorSixCurrent=0;
   d5190:	68a0      	ldr	r0, [r4, #8]
   d5192:	f003 ff41 	bl	d9018 <__aeabi_f2d>
   d5196:	ec41 0b10 	vmov	d0, r0, r1
   d519a:	f899 1000 	ldrb.w	r1, [r9]
   d519e:	4837      	ldr	r0, [pc, #220]	; (d527c <_Z11loadEmonlibv+0x130>)
   d51a0:	f000 fd76 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
    }
   d51a4:	68e0      	ldr	r0, [r4, #12]
   d51a6:	f003 ff37 	bl	d9018 <__aeabi_f2d>
   d51aa:	ec41 0b10 	vmov	d0, r0, r1
   d51ae:	f898 1000 	ldrb.w	r1, [r8]
   d51b2:	4833      	ldr	r0, [pc, #204]	; (d5280 <_Z11loadEmonlibv+0x134>)
   d51b4:	f000 fd6c 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>

   d51b8:	6920      	ldr	r0, [r4, #16]
   d51ba:	f003 ff2d 	bl	d9018 <__aeabi_f2d>
   d51be:	ec41 0b10 	vmov	d0, r0, r1
   d51c2:	7839      	ldrb	r1, [r7, #0]
   d51c4:	482f      	ldr	r0, [pc, #188]	; (d5284 <_Z11loadEmonlibv+0x138>)
   d51c6:	f000 fd63 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
    sensorDataWriteNeeded = true;
   d51ca:	6960      	ldr	r0, [r4, #20]
   d51cc:	f003 ff24 	bl	d9018 <__aeabi_f2d>
   d51d0:	ec41 0b10 	vmov	d0, r0, r1
   d51d4:	7831      	ldrb	r1, [r6, #0]
   d51d6:	482c      	ldr	r0, [pc, #176]	; (d5288 <_Z11loadEmonlibv+0x13c>)
   d51d8:	f000 fd5a 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
    if (((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d51dc:	6820      	ldr	r0, [r4, #0]
   d51de:	f003 ff1b 	bl	d9018 <__aeabi_f2d>
   d51e2:	ec41 0b10 	vmov	d0, r0, r1
   d51e6:	f89b 1000 	ldrb.w	r1, [fp]
   d51ea:	4628      	mov	r0, r5
   d51ec:	f000 fd50 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      // Indicate that this is a valid data array and store it
   d51f0:	6860      	ldr	r0, [r4, #4]
   d51f2:	f003 ff11 	bl	d9018 <__aeabi_f2d>
   d51f6:	ec41 0b10 	vmov	d0, r0, r1
   d51fa:	f89a 1000 	ldrb.w	r1, [sl]
   d51fe:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   d5202:	f000 fd45 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      sensorData.validData = true;
   d5206:	68a0      	ldr	r0, [r4, #8]
   d5208:	f003 ff06 	bl	d9018 <__aeabi_f2d>
   d520c:	ec41 0b10 	vmov	d0, r0, r1
   d5210:	f899 1000 	ldrb.w	r1, [r9]
   d5214:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   d5218:	f000 fd3a 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      sensorData.timeStamp = Time.now();
   d521c:	68e0      	ldr	r0, [r4, #12]
   d521e:	f003 fefb 	bl	d9018 <__aeabi_f2d>
   d5222:	ec41 0b10 	vmov	d0, r0, r1
   d5226:	f898 1000 	ldrb.w	r1, [r8]
   d522a:	f505 700a 	add.w	r0, r5, #552	; 0x228
   d522e:	f000 fd2f 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      sensorDataWriteNeeded = true;
   d5232:	6920      	ldr	r0, [r4, #16]
   d5234:	f003 fef0 	bl	d9018 <__aeabi_f2d>
   d5238:	ec41 0b10 	vmov	d0, r0, r1
   d523c:	7839      	ldrb	r1, [r7, #0]
   d523e:	f505 7038 	add.w	r0, r5, #736	; 0x2e0
   d5242:	f000 fd25 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      return 1;
   d5246:	6960      	ldr	r0, [r4, #20]
   d5248:	f003 fee6 	bl	d9018 <__aeabi_f2d>
   d524c:	ec41 0b10 	vmov	d0, r0, r1
   d5250:	7831      	ldrb	r1, [r6, #0]
   d5252:	f505 7066 	add.w	r0, r5, #920	; 0x398
   d5256:	f000 fd1b 	bl	d5c90 <_ZN13EnergyMonitor7currentEjd>
      } else return 0;
   d525a:	4b0c      	ldr	r3, [pc, #48]	; (d528c <_Z11loadEmonlibv+0x140>)
   d525c:	2201      	movs	r2, #1
   d525e:	701a      	strb	r2, [r3, #0]

   d5260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5264:	2003e438 	.word	0x2003e438
   d5268:	2003d73c 	.word	0x2003d73c
   d526c:	2003d73d 	.word	0x2003d73d
   d5270:	2003db10 	.word	0x2003db10
   d5274:	2003df60 	.word	0x2003df60
   d5278:	2003e018 	.word	0x2003e018
   d527c:	2003e0d0 	.word	0x2003e0d0
   d5280:	2003e188 	.word	0x2003e188
   d5284:	2003e240 	.word	0x2003e240
   d5288:	2003e2f8 	.word	0x2003e2f8
   d528c:	2003db0a 	.word	0x2003db0a
   d5290:	2003d738 	.word	0x2003d738
   d5294:	2003d739 	.word	0x2003d739
   d5298:	2003d73a 	.word	0x2003d73a
   d529c:	2003d73b 	.word	0x2003d73b

000d52a0 <_Z20updateConstantValuesv>:

   d52a0:	b513      	push	{r0, r1, r4, lr}
void updateConstantValues()
   d52a2:	4c22      	ldr	r4, [pc, #136]	; (d532c <_Z20updateConstantValuesv+0x8c>)
   d52a4:	6820      	ldr	r0, [r4, #0]
   d52a6:	f003 feb7 	bl	d9018 <__aeabi_f2d>
   d52aa:	4a21      	ldr	r2, [pc, #132]	; (d5330 <_Z20updateConstantValuesv+0x90>)
   d52ac:	e9cd 0100 	strd	r0, r1, [sp]
   d52b0:	2120      	movs	r1, #32
   d52b2:	4820      	ldr	r0, [pc, #128]	; (d5334 <_Z20updateConstantValuesv+0x94>)
   d52b4:	f002 f8d6 	bl	d7464 <snprintf>
{   
   d52b8:	6860      	ldr	r0, [r4, #4]
   d52ba:	f003 fead 	bl	d9018 <__aeabi_f2d>
   d52be:	4a1e      	ldr	r2, [pc, #120]	; (d5338 <_Z20updateConstantValuesv+0x98>)
   d52c0:	e9cd 0100 	strd	r0, r1, [sp]
   d52c4:	2120      	movs	r1, #32
   d52c6:	481d      	ldr	r0, [pc, #116]	; (d533c <_Z20updateConstantValuesv+0x9c>)
   d52c8:	f002 f8cc 	bl	d7464 <snprintf>
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d52cc:	68a0      	ldr	r0, [r4, #8]
   d52ce:	f003 fea3 	bl	d9018 <__aeabi_f2d>
   d52d2:	4a1b      	ldr	r2, [pc, #108]	; (d5340 <_Z20updateConstantValuesv+0xa0>)
   d52d4:	e9cd 0100 	strd	r0, r1, [sp]
   d52d8:	2120      	movs	r1, #32
   d52da:	481a      	ldr	r0, [pc, #104]	; (d5344 <_Z20updateConstantValuesv+0xa4>)
   d52dc:	f002 f8c2 	bl	d7464 <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d52e0:	68e0      	ldr	r0, [r4, #12]
   d52e2:	f003 fe99 	bl	d9018 <__aeabi_f2d>
   d52e6:	4a18      	ldr	r2, [pc, #96]	; (d5348 <_Z20updateConstantValuesv+0xa8>)
   d52e8:	e9cd 0100 	strd	r0, r1, [sp]
   d52ec:	2120      	movs	r1, #32
   d52ee:	4817      	ldr	r0, [pc, #92]	; (d534c <_Z20updateConstantValuesv+0xac>)
   d52f0:	f002 f8b8 	bl	d7464 <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d52f4:	6920      	ldr	r0, [r4, #16]
   d52f6:	f003 fe8f 	bl	d9018 <__aeabi_f2d>
   d52fa:	4a15      	ldr	r2, [pc, #84]	; (d5350 <_Z20updateConstantValuesv+0xb0>)
   d52fc:	e9cd 0100 	strd	r0, r1, [sp]
   d5300:	2120      	movs	r1, #32
   d5302:	4814      	ldr	r0, [pc, #80]	; (d5354 <_Z20updateConstantValuesv+0xb4>)
   d5304:	f002 f8ae 	bl	d7464 <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d5308:	6960      	ldr	r0, [r4, #20]
   d530a:	f003 fe85 	bl	d9018 <__aeabi_f2d>
   d530e:	4a12      	ldr	r2, [pc, #72]	; (d5358 <_Z20updateConstantValuesv+0xb8>)
   d5310:	e9cd 0100 	strd	r0, r1, [sp]
   d5314:	2120      	movs	r1, #32
   d5316:	4811      	ldr	r0, [pc, #68]	; (d535c <_Z20updateConstantValuesv+0xbc>)
   d5318:	f002 f8a4 	bl	d7464 <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d531c:	f7ff ff16 	bl	d514c <_Z11loadEmonlibv>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d5320:	4b0f      	ldr	r3, [pc, #60]	; (d5360 <_Z20updateConstantValuesv+0xc0>)
   d5322:	2201      	movs	r2, #1
   d5324:	701a      	strb	r2, [r3, #0]
    loadEmonlib();
   d5326:	b002      	add	sp, #8
   d5328:	bd10      	pop	{r4, pc}
   d532a:	bf00      	nop
   d532c:	2003e438 	.word	0x2003e438
   d5330:	000dbb93 	.word	0x000dbb93
   d5334:	2003e51d 	.word	0x2003e51d
   d5338:	000dbba1 	.word	0x000dbba1
   d533c:	2003e57d 	.word	0x2003e57d
   d5340:	000dbbae 	.word	0x000dbbae
   d5344:	2003e55d 	.word	0x2003e55d
   d5348:	000dbbbe 	.word	0x000dbbbe
   d534c:	2003e4fd 	.word	0x2003e4fd
   d5350:	000dbbdb 	.word	0x000dbbdb
   d5354:	2003e4dd 	.word	0x2003e4dd
   d5358:	000dbbf8 	.word	0x000dbbf8
   d535c:	2003e53d 	.word	0x2003e53d
   d5360:	2003db0a 	.word	0x2003db0a

000d5364 <_Z14setConstantOne6String>:

   d5364:	b500      	push	{lr}
   d5366:	b089      	sub	sp, #36	; 0x24
   d5368:	9003      	str	r0, [sp, #12]

   d536a:	f002 ff83 	bl	d8274 <_ZNK6String7toFloatEv>
   d536e:	4b0d      	ldr	r3, [pc, #52]	; (d53a4 <_Z14setConstantOne6String+0x40>)
int setConstantOne(String command){
   d5370:	9903      	ldr	r1, [sp, #12]

   d5372:	ed83 0a00 	vstr	s0, [r3]
int setConstantOne(String command){
   d5376:	a804      	add	r0, sp, #16
   d5378:	f002 ff32 	bl	d81e0 <_ZN6StringC1ERKS_>
   d537c:	2300      	movs	r3, #0
   d537e:	f88d 3000 	strb.w	r3, [sp]
   d5382:	4b09      	ldr	r3, [pc, #36]	; (d53a8 <_Z14setConstantOne6String+0x44>)
   d5384:	9a04      	ldr	r2, [sp, #16]
   d5386:	781b      	ldrb	r3, [r3, #0]
   d5388:	4908      	ldr	r1, [pc, #32]	; (d53ac <_Z14setConstantOne6String+0x48>)
   d538a:	4809      	ldr	r0, [pc, #36]	; (d53b0 <_Z14setConstantOne6String+0x4c>)
   d538c:	f7fe fff0 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5390:	a804      	add	r0, sp, #16
   d5392:	f002 feb7 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorOneConstant = command.toFloat();
   d5396:	f7ff ff83 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d539a:	2001      	movs	r0, #1
   d539c:	b009      	add	sp, #36	; 0x24
   d539e:	f85d fb04 	ldr.w	pc, [sp], #4
   d53a2:	bf00      	nop
   d53a4:	2003e438 	.word	0x2003e438
   d53a8:	2003dae9 	.word	0x2003dae9
   d53ac:	000dbc14 	.word	0x000dbc14
   d53b0:	2003e3e0 	.word	0x2003e3e0

000d53b4 <_Z14setConstantTwo6String>:
}
   d53b4:	b500      	push	{lr}
   d53b6:	b089      	sub	sp, #36	; 0x24
   d53b8:	9003      	str	r0, [sp, #12]

   d53ba:	f002 ff5b 	bl	d8274 <_ZNK6String7toFloatEv>
   d53be:	4b0d      	ldr	r3, [pc, #52]	; (d53f4 <_Z14setConstantTwo6String+0x40>)
int setConstantTwo(String command){
   d53c0:	9903      	ldr	r1, [sp, #12]

   d53c2:	ed83 0a01 	vstr	s0, [r3, #4]
int setConstantTwo(String command){
   d53c6:	a804      	add	r0, sp, #16
   d53c8:	f002 ff0a 	bl	d81e0 <_ZN6StringC1ERKS_>
   d53cc:	2300      	movs	r3, #0
   d53ce:	f88d 3000 	strb.w	r3, [sp]
   d53d2:	4b09      	ldr	r3, [pc, #36]	; (d53f8 <_Z14setConstantTwo6String+0x44>)
   d53d4:	9a04      	ldr	r2, [sp, #16]
   d53d6:	781b      	ldrb	r3, [r3, #0]
   d53d8:	4908      	ldr	r1, [pc, #32]	; (d53fc <_Z14setConstantTwo6String+0x48>)
   d53da:	4809      	ldr	r0, [pc, #36]	; (d5400 <_Z14setConstantTwo6String+0x4c>)
   d53dc:	f7fe ffc8 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d53e0:	a804      	add	r0, sp, #16
   d53e2:	f002 fe8f 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorTwoConstant = command.toFloat();
   d53e6:	f7ff ff5b 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d53ea:	2001      	movs	r0, #1
   d53ec:	b009      	add	sp, #36	; 0x24
   d53ee:	f85d fb04 	ldr.w	pc, [sp], #4
   d53f2:	bf00      	nop
   d53f4:	2003e438 	.word	0x2003e438
   d53f8:	2003dae9 	.word	0x2003dae9
   d53fc:	000dbc2f 	.word	0x000dbc2f
   d5400:	2003e3e0 	.word	0x2003e3e0

000d5404 <_Z16setConstantThree6String>:
}
   d5404:	b500      	push	{lr}
   d5406:	b089      	sub	sp, #36	; 0x24
   d5408:	9003      	str	r0, [sp, #12]

   d540a:	f002 ff33 	bl	d8274 <_ZNK6String7toFloatEv>
   d540e:	4b0d      	ldr	r3, [pc, #52]	; (d5444 <_Z16setConstantThree6String+0x40>)
int setConstantThree(String command){
   d5410:	9903      	ldr	r1, [sp, #12]

   d5412:	ed83 0a02 	vstr	s0, [r3, #8]
int setConstantThree(String command){
   d5416:	a804      	add	r0, sp, #16
   d5418:	f002 fee2 	bl	d81e0 <_ZN6StringC1ERKS_>
   d541c:	2300      	movs	r3, #0
   d541e:	f88d 3000 	strb.w	r3, [sp]
   d5422:	4b09      	ldr	r3, [pc, #36]	; (d5448 <_Z16setConstantThree6String+0x44>)
   d5424:	9a04      	ldr	r2, [sp, #16]
   d5426:	781b      	ldrb	r3, [r3, #0]
   d5428:	4908      	ldr	r1, [pc, #32]	; (d544c <_Z16setConstantThree6String+0x48>)
   d542a:	4809      	ldr	r0, [pc, #36]	; (d5450 <_Z16setConstantThree6String+0x4c>)
   d542c:	f7fe ffa0 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5430:	a804      	add	r0, sp, #16
   d5432:	f002 fe67 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorThreeConstant = command.toFloat();
   d5436:	f7ff ff33 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d543a:	2001      	movs	r0, #1
   d543c:	b009      	add	sp, #36	; 0x24
   d543e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5442:	bf00      	nop
   d5444:	2003e438 	.word	0x2003e438
   d5448:	2003dae9 	.word	0x2003dae9
   d544c:	000dbc4a 	.word	0x000dbc4a
   d5450:	2003e3e0 	.word	0x2003e3e0

000d5454 <_Z15setConstantFour6String>:
}
   d5454:	b500      	push	{lr}
   d5456:	b089      	sub	sp, #36	; 0x24
   d5458:	9003      	str	r0, [sp, #12]

   d545a:	f002 ff0b 	bl	d8274 <_ZNK6String7toFloatEv>
   d545e:	4b0d      	ldr	r3, [pc, #52]	; (d5494 <_Z15setConstantFour6String+0x40>)
int setConstantFour(String command){
   d5460:	9903      	ldr	r1, [sp, #12]

   d5462:	ed83 0a03 	vstr	s0, [r3, #12]
int setConstantFour(String command){
   d5466:	a804      	add	r0, sp, #16
   d5468:	f002 feba 	bl	d81e0 <_ZN6StringC1ERKS_>
   d546c:	2300      	movs	r3, #0
   d546e:	f88d 3000 	strb.w	r3, [sp]
   d5472:	4b09      	ldr	r3, [pc, #36]	; (d5498 <_Z15setConstantFour6String+0x44>)
   d5474:	9a04      	ldr	r2, [sp, #16]
   d5476:	781b      	ldrb	r3, [r3, #0]
   d5478:	4908      	ldr	r1, [pc, #32]	; (d549c <_Z15setConstantFour6String+0x48>)
   d547a:	4809      	ldr	r0, [pc, #36]	; (d54a0 <_Z15setConstantFour6String+0x4c>)
   d547c:	f7fe ff78 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5480:	a804      	add	r0, sp, #16
   d5482:	f002 fe3f 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorFourConstant = command.toFloat();
   d5486:	f7ff ff0b 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d548a:	2001      	movs	r0, #1
   d548c:	b009      	add	sp, #36	; 0x24
   d548e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5492:	bf00      	nop
   d5494:	2003e438 	.word	0x2003e438
   d5498:	2003dae9 	.word	0x2003dae9
   d549c:	000dbc67 	.word	0x000dbc67
   d54a0:	2003e3e0 	.word	0x2003e3e0

000d54a4 <_Z15setConstantFive6String>:
}
   d54a4:	b500      	push	{lr}
   d54a6:	b089      	sub	sp, #36	; 0x24
   d54a8:	9003      	str	r0, [sp, #12]

   d54aa:	f002 fee3 	bl	d8274 <_ZNK6String7toFloatEv>
   d54ae:	4b0d      	ldr	r3, [pc, #52]	; (d54e4 <_Z15setConstantFive6String+0x40>)
int setConstantFive(String command){
   d54b0:	9903      	ldr	r1, [sp, #12]

   d54b2:	ed83 0a04 	vstr	s0, [r3, #16]
int setConstantFive(String command){
   d54b6:	a804      	add	r0, sp, #16
   d54b8:	f002 fe92 	bl	d81e0 <_ZN6StringC1ERKS_>
   d54bc:	2300      	movs	r3, #0
   d54be:	f88d 3000 	strb.w	r3, [sp]
   d54c2:	4b09      	ldr	r3, [pc, #36]	; (d54e8 <_Z15setConstantFive6String+0x44>)
   d54c4:	9a04      	ldr	r2, [sp, #16]
   d54c6:	781b      	ldrb	r3, [r3, #0]
   d54c8:	4908      	ldr	r1, [pc, #32]	; (d54ec <_Z15setConstantFive6String+0x48>)
   d54ca:	4809      	ldr	r0, [pc, #36]	; (d54f0 <_Z15setConstantFive6String+0x4c>)
   d54cc:	f7fe ff50 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d54d0:	a804      	add	r0, sp, #16
   d54d2:	f002 fe17 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorFiveConstant = command.toFloat();
   d54d6:	f7ff fee3 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d54da:	2001      	movs	r0, #1
   d54dc:	b009      	add	sp, #36	; 0x24
   d54de:	f85d fb04 	ldr.w	pc, [sp], #4
   d54e2:	bf00      	nop
   d54e4:	2003e438 	.word	0x2003e438
   d54e8:	2003dae9 	.word	0x2003dae9
   d54ec:	000dbc83 	.word	0x000dbc83
   d54f0:	2003e3e0 	.word	0x2003e3e0

000d54f4 <_Z14setConstantSix6String>:
}
   d54f4:	b500      	push	{lr}
   d54f6:	b089      	sub	sp, #36	; 0x24
   d54f8:	9003      	str	r0, [sp, #12]

   d54fa:	f002 febb 	bl	d8274 <_ZNK6String7toFloatEv>
   d54fe:	4b0d      	ldr	r3, [pc, #52]	; (d5534 <_Z14setConstantSix6String+0x40>)
int setConstantSix(String command){
   d5500:	9903      	ldr	r1, [sp, #12]

   d5502:	ed83 0a05 	vstr	s0, [r3, #20]
int setConstantSix(String command){
   d5506:	a804      	add	r0, sp, #16
   d5508:	f002 fe6a 	bl	d81e0 <_ZN6StringC1ERKS_>
   d550c:	2300      	movs	r3, #0
   d550e:	f88d 3000 	strb.w	r3, [sp]
   d5512:	4b09      	ldr	r3, [pc, #36]	; (d5538 <_Z14setConstantSix6String+0x44>)
   d5514:	9a04      	ldr	r2, [sp, #16]
   d5516:	781b      	ldrb	r3, [r3, #0]
   d5518:	4908      	ldr	r1, [pc, #32]	; (d553c <_Z14setConstantSix6String+0x48>)
   d551a:	4809      	ldr	r0, [pc, #36]	; (d5540 <_Z14setConstantSix6String+0x4c>)
   d551c:	f7fe ff28 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5520:	a804      	add	r0, sp, #16
   d5522:	f002 fdef 	bl	d8104 <_ZN6StringD1Ev>
  sensorConstants.sensorSixConstant = command.toFloat();
   d5526:	f7ff febb 	bl	d52a0 <_Z20updateConstantValuesv>
  updateConstantValues();
   d552a:	2001      	movs	r0, #1
   d552c:	b009      	add	sp, #36	; 0x24
   d552e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5532:	bf00      	nop
   d5534:	2003e438 	.word	0x2003e438
   d5538:	2003dae9 	.word	0x2003dae9
   d553c:	000dbc9f 	.word	0x000dbc9f
   d5540:	2003e3e0 	.word	0x2003e3e0

000d5544 <setup>:
   
   d5544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
// setup() runs once, when the device is first turned on.
   d5548:	2100      	movs	r1, #0
   
   d554a:	b09a      	sub	sp, #104	; 0x68
// setup() runs once, when the device is first turned on.
   d554c:	2008      	movs	r0, #8
   d554e:	f003 fa4b 	bl	d89e8 <pinMode>
void setup() {
   d5552:	2101      	movs	r1, #1
   d5554:	2005      	movs	r0, #5
   d5556:	f003 fa47 	bl	d89e8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d555a:	f7ff fa13 	bl	d4984 <_Z11petWatchdogv>

   d555e:	2300      	movs	r3, #0
   d5560:	9300      	str	r3, [sp, #0]
   d5562:	2201      	movs	r2, #1
   d5564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5568:	49a6      	ldr	r1, [pc, #664]	; (d5804 <setup+0x2c0>)
   d556a:	2008      	movs	r0, #8
   d556c:	f002 fc04 	bl	d7d78 <_Z15attachInterrupttPFvvE13InterruptModeah>

   d5570:	4ba5      	ldr	r3, [pc, #660]	; (d5808 <setup+0x2c4>)
   d5572:	aa0a      	add	r2, sp, #40	; 0x28
   d5574:	f103 0510 	add.w	r5, r3, #16
   d5578:	4617      	mov	r7, r2
   d557a:	6818      	ldr	r0, [r3, #0]
   d557c:	6859      	ldr	r1, [r3, #4]
   d557e:	4614      	mov	r4, r2
   d5580:	c403      	stmia	r4!, {r0, r1}
   d5582:	3308      	adds	r3, #8
   d5584:	42ab      	cmp	r3, r5
   d5586:	4622      	mov	r2, r4
   d5588:	d1f7      	bne.n	d557a <setup+0x36>
   d558a:	8819      	ldrh	r1, [r3, #0]
   d558c:	789b      	ldrb	r3, [r3, #2]
   d558e:	70a3      	strb	r3, [r4, #2]
   d5590:	222d      	movs	r2, #45	; 0x2d
   d5592:	8021      	strh	r1, [r4, #0]
   d5594:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d5598:	2100      	movs	r1, #0

   d559a:	4c9c      	ldr	r4, [pc, #624]	; (d580c <setup+0x2c8>)
   d559c:	4d9c      	ldr	r5, [pc, #624]	; (d5810 <setup+0x2cc>)
   d559e:	2600      	movs	r6, #0

   d55a0:	f004 f946 	bl	d9830 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d55a4:	a802      	add	r0, sp, #8

   d55a6:	7026      	strb	r6, [r4, #0]
   d55a8:	f001 fe9c 	bl	d72e4 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d55ac:	a902      	add	r1, sp, #8
   d55ae:	a806      	add	r0, sp, #24
   d55b0:	f002 fe16 	bl	d81e0 <_ZN6StringC1ERKS_>
  state = INITIALIZATION_STATE;
   d55b4:	4997      	ldr	r1, [pc, #604]	; (d5814 <setup+0x2d0>)
   d55b6:	a806      	add	r0, sp, #24
   d55b8:	f002 fe34 	bl	d8224 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d55bc:	e9cd 6600 	strd	r6, r6, [sp]
   d55c0:	4633      	mov	r3, r6
   d55c2:	4632      	mov	r2, r6
   d55c4:	4994      	ldr	r1, [pc, #592]	; (d5818 <setup+0x2d4>)
   d55c6:	6800      	ldr	r0, [r0, #0]
   d55c8:	f001 fe9c 	bl	d7304 <spark_subscribe>
class StringSumHelper : public String
   d55cc:	a806      	add	r0, sp, #24
   d55ce:	f002 fd99 	bl	d8104 <_ZN6StringD1Ev>
   d55d2:	a802      	add	r0, sp, #8
   d55d4:	f002 fd96 	bl	d8104 <_ZN6StringD1Ev>
        return _variable(varKey, var, STRING);
   d55d8:	4990      	ldr	r1, [pc, #576]	; (d581c <setup+0x2d8>)
   d55da:	4891      	ldr	r0, [pc, #580]	; (d5820 <setup+0x2dc>)
   d55dc:	f7fe fe33 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d55e0:	4990      	ldr	r1, [pc, #576]	; (d5824 <setup+0x2e0>)
   d55e2:	4891      	ldr	r0, [pc, #580]	; (d5828 <setup+0x2e4>)
   d55e4:	f7fe fe2f 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d55e8:	4990      	ldr	r1, [pc, #576]	; (d582c <setup+0x2e8>)
   d55ea:	4891      	ldr	r0, [pc, #580]	; (d5830 <setup+0x2ec>)
   d55ec:	f7fe fe2b 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d55f0:	4990      	ldr	r1, [pc, #576]	; (d5834 <setup+0x2f0>)
   d55f2:	4891      	ldr	r0, [pc, #580]	; (d5838 <setup+0x2f4>)
   d55f4:	4633      	mov	r3, r6
   d55f6:	2202      	movs	r2, #2
   d55f8:	f001 fe4c 	bl	d7294 <spark_variable>
   d55fc:	4633      	mov	r3, r6
   d55fe:	2201      	movs	r2, #1
   d5600:	498e      	ldr	r1, [pc, #568]	; (d583c <setup+0x2f8>)
   d5602:	488f      	ldr	r0, [pc, #572]	; (d5840 <setup+0x2fc>)
   d5604:	f001 fe46 	bl	d7294 <spark_variable>
        return _variable(varKey, var, STRING);
   d5608:	498e      	ldr	r1, [pc, #568]	; (d5844 <setup+0x300>)
   d560a:	488f      	ldr	r0, [pc, #572]	; (d5848 <setup+0x304>)
   d560c:	f7fe fe1b 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5610:	498e      	ldr	r1, [pc, #568]	; (d584c <setup+0x308>)
   d5612:	488f      	ldr	r0, [pc, #572]	; (d5850 <setup+0x30c>)
   d5614:	f7fe fe17 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5618:	498e      	ldr	r1, [pc, #568]	; (d5854 <setup+0x310>)
   d561a:	488f      	ldr	r0, [pc, #572]	; (d5858 <setup+0x314>)
   d561c:	f7fe fe13 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5620:	498e      	ldr	r1, [pc, #568]	; (d585c <setup+0x318>)
   d5622:	488f      	ldr	r0, [pc, #572]	; (d5860 <setup+0x31c>)
   d5624:	f7fe fe0f 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5628:	498e      	ldr	r1, [pc, #568]	; (d5864 <setup+0x320>)
   d562a:	488f      	ldr	r0, [pc, #572]	; (d5868 <setup+0x324>)
   d562c:	f7fe fe0b 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5630:	498e      	ldr	r1, [pc, #568]	; (d586c <setup+0x328>)
   d5632:	488f      	ldr	r0, [pc, #572]	; (d5870 <setup+0x32c>)
   d5634:	f7fe fe07 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5638:	498e      	ldr	r1, [pc, #568]	; (d5874 <setup+0x330>)
   d563a:	488f      	ldr	r0, [pc, #572]	; (d5878 <setup+0x334>)
   d563c:	4633      	mov	r3, r6
   d563e:	2202      	movs	r2, #2
   d5640:	f001 fe28 	bl	d7294 <spark_variable>
   d5644:	4633      	mov	r3, r6
   d5646:	2202      	movs	r2, #2
   d5648:	498c      	ldr	r1, [pc, #560]	; (d587c <setup+0x338>)
   d564a:	488d      	ldr	r0, [pc, #564]	; (d5880 <setup+0x33c>)
   d564c:	f001 fe22 	bl	d7294 <spark_variable>
        return _function(name, args...);
   d5650:	498c      	ldr	r1, [pc, #560]	; (d5884 <setup+0x340>)
   d5652:	488d      	ldr	r0, [pc, #564]	; (d5888 <setup+0x344>)
   d5654:	f7fe fe62 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5658:	498c      	ldr	r1, [pc, #560]	; (d588c <setup+0x348>)
   d565a:	488d      	ldr	r0, [pc, #564]	; (d5890 <setup+0x34c>)
   d565c:	f7fe fe5e 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5660:	498c      	ldr	r1, [pc, #560]	; (d5894 <setup+0x350>)
   d5662:	488d      	ldr	r0, [pc, #564]	; (d5898 <setup+0x354>)
   d5664:	f7fe fe5a 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5668:	498c      	ldr	r1, [pc, #560]	; (d589c <setup+0x358>)
   d566a:	4875      	ldr	r0, [pc, #468]	; (d5840 <setup+0x2fc>)
   d566c:	f7fe fe56 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5670:	498b      	ldr	r1, [pc, #556]	; (d58a0 <setup+0x35c>)
   d5672:	488c      	ldr	r0, [pc, #560]	; (d58a4 <setup+0x360>)
   d5674:	f7fe fe52 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5678:	498b      	ldr	r1, [pc, #556]	; (d58a8 <setup+0x364>)
   d567a:	488c      	ldr	r0, [pc, #560]	; (d58ac <setup+0x368>)
   d567c:	f7fe fe4e 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5680:	498b      	ldr	r1, [pc, #556]	; (d58b0 <setup+0x36c>)
   d5682:	488c      	ldr	r0, [pc, #560]	; (d58b4 <setup+0x370>)
   d5684:	f7fe fe4a 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5688:	498b      	ldr	r1, [pc, #556]	; (d58b8 <setup+0x374>)
   d568a:	488c      	ldr	r0, [pc, #560]	; (d58bc <setup+0x378>)
   d568c:	f7fe fe46 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5690:	498b      	ldr	r1, [pc, #556]	; (d58c0 <setup+0x37c>)
   d5692:	488c      	ldr	r0, [pc, #560]	; (d58c4 <setup+0x380>)
   d5694:	f7fe fe42 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5698:	498b      	ldr	r1, [pc, #556]	; (d58c8 <setup+0x384>)
   d569a:	488c      	ldr	r0, [pc, #560]	; (d58cc <setup+0x388>)
   d569c:	f7fe fe3e 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56a0:	498b      	ldr	r1, [pc, #556]	; (d58d0 <setup+0x38c>)
   d56a2:	488c      	ldr	r0, [pc, #560]	; (d58d4 <setup+0x390>)
   d56a4:	f7fe fe3a 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56a8:	498b      	ldr	r1, [pc, #556]	; (d58d8 <setup+0x394>)
   d56aa:	488c      	ldr	r0, [pc, #560]	; (d58dc <setup+0x398>)
   d56ac:	f7fe fe36 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56b0:	498b      	ldr	r1, [pc, #556]	; (d58e0 <setup+0x39c>)
   d56b2:	488c      	ldr	r0, [pc, #560]	; (d58e4 <setup+0x3a0>)
   d56b4:	f7fe fe32 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56b8:	498b      	ldr	r1, [pc, #556]	; (d58e8 <setup+0x3a4>)
   d56ba:	488c      	ldr	r0, [pc, #560]	; (d58ec <setup+0x3a8>)
   d56bc:	f7fe fe2e 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56c0:	498b      	ldr	r1, [pc, #556]	; (d58f0 <setup+0x3ac>)
   d56c2:	488c      	ldr	r0, [pc, #560]	; (d58f4 <setup+0x3b0>)
   d56c4:	f7fe fe2a 	bl	d431c <_ZN10CloudClass9_functionEPKcPFi6StringE>
  Particle.function("Reboot Device",resetSystem);
   d56c8:	488b      	ldr	r0, [pc, #556]	; (d58f8 <setup+0x3b4>)
   d56ca:	f000 fee9 	bl	d64a0 <_ZN8MCP794105setupEv>

   d56ce:	4631      	mov	r1, r6
   d56d0:	4889      	ldr	r0, [pc, #548]	; (d58f8 <setup+0x3b4>)
   d56d2:	f001 f822 	bl	d671a <_ZN8MCP7941010clearAlarmEi>

   d56d6:	4889      	ldr	r0, [pc, #548]	; (d58fc <setup+0x3b8>)
   d56d8:	f000 fb7e 	bl	d5dd8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d56dc:	2301      	movs	r3, #1
   d56de:	4887      	ldr	r0, [pc, #540]	; (d58fc <setup+0x3b8>)
   d56e0:	aa06      	add	r2, sp, #24
   d56e2:	4631      	mov	r1, r6
   d56e4:	f000 fbba 	bl	d5e5c <_ZN6MB85RC8readDataEjPhj>
  byte tempVersion;
   d56e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d56ec:	2b16      	cmp	r3, #22
   d56ee:	d045      	beq.n	d577c <setup+0x238>
  fram.get(FRAM::versionAddr, tempVersion);
   d56f0:	4882      	ldr	r0, [pc, #520]	; (d58fc <setup+0x3b8>)
   d56f2:	f000 fb7b 	bl	d5dec <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d56f6:	4a82      	ldr	r2, [pc, #520]	; (d5900 <setup+0x3bc>)
   d56f8:	4880      	ldr	r0, [pc, #512]	; (d58fc <setup+0x3b8>)
   d56fa:	2304      	movs	r3, #4
   d56fc:	4631      	mov	r1, r6
   d56fe:	f000 fbf8 	bl	d5ef2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5702:	2301      	movs	r3, #1
   d5704:	487d      	ldr	r0, [pc, #500]	; (d58fc <setup+0x3b8>)
   d5706:	aa06      	add	r2, sp, #24
   d5708:	4631      	mov	r1, r6
   d570a:	f000 fba7 	bl	d5e5c <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                                         // Put the right value in
   d570e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5712:	2b16      	cmp	r3, #22
   d5714:	d024      	beq.n	d5760 <setup+0x21c>
   d5716:	2301      	movs	r3, #1
   d5718:	7023      	strb	r3, [r4, #0]
  }
   d571a:	f7ff f8c3 	bl	d48a4 <_Z19checkConstantValuesv>

   d571e:	f7ff f891 	bl	d4844 <_Z17checkSystemValuesv>
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5722:	f7ff fd13 	bl	d514c <_Z11loadEmonlibv>
  
   d5726:	786b      	ldrb	r3, [r5, #1]
   d5728:	2b00      	cmp	r3, #0
   d572a:	d04b      	beq.n	d57c4 <setup+0x280>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d572c:	2000      	movs	r0, #0
   d572e:	f001 fbf3 	bl	d6f18 <hal_timer_millis>
   d5732:	f04f 0a00 	mov.w	sl, #0
   d5736:	4606      	mov	r6, r0
   d5738:	2000      	movs	r0, #0
   d573a:	f001 fbed 	bl	d6f18 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d573e:	ebb0 0806 	subs.w	r8, r0, r6
   d5742:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d5746:	2300      	movs	r3, #0
   d5748:	f247 522f 	movw	r2, #29999	; 0x752f
   d574c:	454b      	cmp	r3, r9
   d574e:	bf08      	it	eq
   d5750:	4542      	cmpeq	r2, r8
   d5752:	d329      	bcc.n	d57a8 <setup+0x264>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5754:	f001 fdbe 	bl	d72d4 <spark_cloud_flag_connected>
   d5758:	bb30      	cbnz	r0, d57a8 <setup+0x264>
            spark_process();
   d575a:	f001 fdab 	bl	d72b4 <spark_process>
        while (_while() && !_condition()) {
   d575e:	e7eb      	b.n	d5738 <setup+0x1f4>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d5760:	4b68      	ldr	r3, [pc, #416]	; (d5904 <setup+0x3c0>)
   d5762:	f88d 6000 	strb.w	r6, [sp]
   d5766:	781b      	ldrb	r3, [r3, #0]
   d5768:	4a67      	ldr	r2, [pc, #412]	; (d5908 <setup+0x3c4>)
   d576a:	4968      	ldr	r1, [pc, #416]	; (d590c <setup+0x3c8>)
   d576c:	4868      	ldr	r0, [pc, #416]	; (d5910 <setup+0x3cc>)
   d576e:	f7fe fdff 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    else {
   d5772:	f7ff f805 	bl	d4780 <_Z18loadSystemDefaultsv>
      publishQueue.publish("Loading Defaults","Setup Loop",PRIVATE);
   d5776:	f7ff f835 	bl	d47e4 <_Z20loadConstantDefaultsv>
   d577a:	e7ce      	b.n	d571a <setup+0x1d6>
  }
   d577c:	4b61      	ldr	r3, [pc, #388]	; (d5904 <setup+0x3c0>)
   d577e:	f88d 6000 	strb.w	r6, [sp]
   d5782:	781b      	ldrb	r3, [r3, #0]
   d5784:	4a60      	ldr	r2, [pc, #384]	; (d5908 <setup+0x3c4>)
   d5786:	4963      	ldr	r1, [pc, #396]	; (d5914 <setup+0x3d0>)
   d5788:	4861      	ldr	r0, [pc, #388]	; (d5910 <setup+0x3cc>)
   d578a:	f7fe fdf1 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d578e:	4a62      	ldr	r2, [pc, #392]	; (d5918 <setup+0x3d4>)
   d5790:	485a      	ldr	r0, [pc, #360]	; (d58fc <setup+0x3b8>)
   d5792:	2318      	movs	r3, #24
   d5794:	21a0      	movs	r1, #160	; 0xa0
   d5796:	f000 fb61 	bl	d5e5c <_ZN6MB85RC8readDataEjPhj>
   d579a:	2330      	movs	r3, #48	; 0x30
   d579c:	462a      	mov	r2, r5
   d579e:	2101      	movs	r1, #1
   d57a0:	4856      	ldr	r0, [pc, #344]	; (d58fc <setup+0x3b8>)
   d57a2:	f000 fb5b 	bl	d5e5c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d57a6:	e7b8      	b.n	d571a <setup+0x1d6>
   d57a8:	f001 fd94 	bl	d72d4 <spark_cloud_flag_connected>
  if (sysStatus.thirdPartySim) {
   d57ac:	6868      	ldr	r0, [r5, #4]
   d57ae:	f7fe fdbb 	bl	d4328 <_ZN10CloudClass9keepAliveEj>
    waitFor(Particle.connected,30 * 1000); 
   d57b2:	686b      	ldr	r3, [r5, #4]
   d57b4:	4859      	ldr	r0, [pc, #356]	; (d591c <setup+0x3d8>)
   d57b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d57ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d57be:	4359      	muls	r1, r3
   d57c0:	f7fe fdc5 	bl	d434e <_ZN5Timer12changePeriodEjj>
  }
   d57c4:	f7ff fd6c 	bl	d52a0 <_Z20updateConstantValuesv>

   d57c8:	f7ff fa72 	bl	d4cb0 <_Z16takeMeasurementsv>

   d57cc:	7a6b      	ldrb	r3, [r5, #9]
   d57ce:	b14b      	cbz	r3, d57e4 <setup+0x2a0>
   d57d0:	2300      	movs	r3, #0
   d57d2:	f88d 3000 	strb.w	r3, [sp]
   d57d6:	4b4b      	ldr	r3, [pc, #300]	; (d5904 <setup+0x3c0>)
   d57d8:	4951      	ldr	r1, [pc, #324]	; (d5920 <setup+0x3dc>)
   d57da:	781b      	ldrb	r3, [r3, #0]
   d57dc:	484c      	ldr	r0, [pc, #304]	; (d5910 <setup+0x3cc>)
   d57de:	463a      	mov	r2, r7
   d57e0:	f7fe fdc6 	bl	d4370 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d57e4:	f001 fd76 	bl	d72d4 <spark_cloud_flag_connected>
   d57e8:	b910      	cbnz	r0, d57f0 <setup+0x2ac>
            spark_process();
   d57ea:	f001 fd63 	bl	d72b4 <spark_process>
        while (_while() && !_condition()) {
   d57ee:	e7f9      	b.n	d57e4 <setup+0x2a0>
   d57f0:	f001 fd70 	bl	d72d4 <spark_cloud_flag_connected>
  waitUntil(Particle.connected);
   d57f4:	7823      	ldrb	r3, [r4, #0]
   d57f6:	b90b      	cbnz	r3, d57fc <setup+0x2b8>
   d57f8:	2302      	movs	r3, #2
   d57fa:	7023      	strb	r3, [r4, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d57fc:	b01a      	add	sp, #104	; 0x68
   d57fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5802:	bf00      	nop
   d5804:	000d40c9 	.word	0x000d40c9
   d5808:	000dbeb4 	.word	0x000dbeb4
   d580c:	2003e59d 	.word	0x2003e59d
   d5810:	2003e5a0 	.word	0x2003e5a0
   d5814:	000dbcba 	.word	0x000dbcba
   d5818:	000d438d 	.word	0x000d438d
   d581c:	000dbef4 	.word	0x000dbef4
   d5820:	000dbcdf 	.word	0x000dbcdf
   d5824:	2003dafa 	.word	0x2003dafa
   d5828:	000dbce7 	.word	0x000dbce7
   d582c:	2003daea 	.word	0x2003daea
   d5830:	000dbcef 	.word	0x000dbcef
   d5834:	2003e5a4 	.word	0x2003e5a4
   d5838:	000dbcfe 	.word	0x000dbcfe
   d583c:	2003e5a1 	.word	0x2003e5a1
   d5840:	000db798 	.word	0x000db798
   d5844:	2003e51d 	.word	0x2003e51d
   d5848:	000dbd4c 	.word	0x000dbd4c
   d584c:	2003e57d 	.word	0x2003e57d
   d5850:	000dbd5d 	.word	0x000dbd5d
   d5854:	2003e55d 	.word	0x2003e55d
   d5858:	000dbd6e 	.word	0x000dbd6e
   d585c:	2003e4fd 	.word	0x2003e4fd
   d5860:	000dbd81 	.word	0x000dbd81
   d5864:	2003e4dd 	.word	0x2003e4dd
   d5868:	000dbd93 	.word	0x000dbd93
   d586c:	2003e53d 	.word	0x2003e53d
   d5870:	000dbda5 	.word	0x000dbda5
   d5874:	2003e5c4 	.word	0x2003e5c4
   d5878:	000dbd0d 	.word	0x000dbd0d
   d587c:	2003e5c8 	.word	0x2003e5c8
   d5880:	000dbd20 	.word	0x000dbd20
   d5884:	000d40f1 	.word	0x000d40f1
   d5888:	000dbd2f 	.word	0x000dbd2f
   d588c:	000d4591 	.word	0x000d4591
   d5890:	000dbd3b 	.word	0x000dbd3b
   d5894:	000d44bd 	.word	0x000d44bd
   d5898:	000db7d5 	.word	0x000db7d5
   d589c:	000d4421 	.word	0x000d4421
   d58a0:	000d5365 	.word	0x000d5365
   d58a4:	000dbd48 	.word	0x000dbd48
   d58a8:	000d53b5 	.word	0x000d53b5
   d58ac:	000dbd59 	.word	0x000dbd59
   d58b0:	000d5405 	.word	0x000d5405
   d58b4:	000dbd6a 	.word	0x000dbd6a
   d58b8:	000d5455 	.word	0x000d5455
   d58bc:	000dbd7d 	.word	0x000dbd7d
   d58c0:	000d54a5 	.word	0x000d54a5
   d58c4:	000dbd8f 	.word	0x000dbd8f
   d58c8:	000d54f5 	.word	0x000d54f5
   d58cc:	000dbda1 	.word	0x000dbda1
   d58d0:	000d410d 	.word	0x000d410d
   d58d4:	000dbdb2 	.word	0x000dbdb2
   d58d8:	000d4611 	.word	0x000d4611
   d58dc:	000dbdc0 	.word	0x000dbdc0
   d58e0:	000d46d1 	.word	0x000d46d1
   d58e4:	000dbdcf 	.word	0x000dbdcf
   d58e8:	000d4539 	.word	0x000d4539
   d58ec:	000dbdde 	.word	0x000dbdde
   d58f0:	000d4731 	.word	0x000d4731
   d58f4:	000dbdfa 	.word	0x000dbdfa
   d58f8:	2003e41c 	.word	0x2003e41c
   d58fc:	2003e3b0 	.word	0x2003e3b0
   d5900:	000dbefc 	.word	0x000dbefc
   d5904:	2003dae9 	.word	0x2003dae9
   d5908:	000dbe08 	.word	0x000dbe08
   d590c:	000dbe13 	.word	0x000dbe13
   d5910:	2003e3e0 	.word	0x2003e3e0
   d5914:	000dbe24 	.word	0x000dbe24
   d5918:	2003e438 	.word	0x2003e438
   d591c:	2003e3c0 	.word	0x2003e3c0
   d5920:	000dbe36 	.word	0x000dbe36

000d5924 <_GLOBAL__sub_I___appProductID>:
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d5928:	4b7c      	ldr	r3, [pc, #496]	; (d5b1c <_GLOBAL__sub_I___appProductID+0x1f8>)
              error_(SYSTEM_ERROR_NONE) {
   d592a:	4d7d      	ldr	r5, [pc, #500]	; (d5b20 <_GLOBAL__sub_I___appProductID+0x1fc>)
// Prototypes and System Mode calls
   d592c:	4f7d      	ldr	r7, [pc, #500]	; (d5b24 <_GLOBAL__sub_I___appProductID+0x200>)
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d592e:	ed2d 8b06 	vpush	{d8-d10}
   d5932:	2601      	movs	r6, #1
   d5934:	701e      	strb	r6, [r3, #0]
   d5936:	4b7c      	ldr	r3, [pc, #496]	; (d5b28 <_GLOBAL__sub_I___appProductID+0x204>)
   d5938:	2202      	movs	r2, #2
   d593a:	b089      	sub	sp, #36	; 0x24
   d593c:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d593e:	f002 fffd 	bl	d893c <spark_protocol_instance>
   d5942:	2300      	movs	r3, #0
   d5944:	461a      	mov	r2, r3
   d5946:	f642 51d6 	movw	r1, #11734	; 0x2dd6
   d594a:	f002 ffff 	bl	d894c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d594e:	f002 fff5 	bl	d893c <spark_protocol_instance>
   d5952:	2300      	movs	r3, #0
   d5954:	461a      	mov	r2, r3
   d5956:	2109      	movs	r1, #9
   d5958:	2400      	movs	r4, #0
   d595a:	f002 ffff 	bl	d895c <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d595e:	4b73      	ldr	r3, [pc, #460]	; (d5b2c <_GLOBAL__sub_I___appProductID+0x208>)
   d5960:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5962:	602c      	str	r4, [r5, #0]
   d5964:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5966:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5968:	4630      	mov	r0, r6
   d596a:	f001 fc3d 	bl	d71e8 <set_system_mode>
// Prototypes and System Mode calls
   d596e:	463a      	mov	r2, r7
   d5970:	496f      	ldr	r1, [pc, #444]	; (d5b30 <_GLOBAL__sub_I___appProductID+0x20c>)
   d5972:	4628      	mov	r0, r5
   d5974:	f003 f8ba 	bl	d8aec <__aeabi_atexit>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5978:	4621      	mov	r1, r4
   d597a:	4630      	mov	r0, r6
   d597c:	f001 fc44 	bl	d7208 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5980:	4631      	mov	r1, r6
   d5982:	2004      	movs	r0, #4
   d5984:	f001 fa98 	bl	d6eb8 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
   d5988:	f003 f888 	bl	d8a9c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d598c:	4d69      	ldr	r5, [pc, #420]	; (d5b34 <_GLOBAL__sub_I___appProductID+0x210>)
   d598e:	4601      	mov	r1, r0
   d5990:	4623      	mov	r3, r4
   d5992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5996:	4628      	mov	r0, r5
   d5998:	f000 fa14 	bl	d5dc4 <_ZN6MB85RCC1ER7TwoWireji>
   d599c:	4b66      	ldr	r3, [pc, #408]	; (d5b38 <_GLOBAL__sub_I___appProductID+0x214>)
   d599e:	602b      	str	r3, [r5, #0]
   d59a0:	463a      	mov	r2, r7
   d59a2:	4966      	ldr	r1, [pc, #408]	; (d5b3c <_GLOBAL__sub_I___appProductID+0x218>)
   d59a4:	4628      	mov	r0, r5
   d59a6:	f003 f8a1 	bl	d8aec <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d59aa:	f003 f877 	bl	d8a9c <_Z19__fetch_global_Wirev>
   d59ae:	4d64      	ldr	r5, [pc, #400]	; (d5b40 <_GLOBAL__sub_I___appProductID+0x21c>)
   d59b0:	4601      	mov	r1, r0
   d59b2:	4628      	mov	r0, r5
   d59b4:	f000 fc7c 	bl	d62b0 <_ZN8MCP79410C1ER7TwoWire>
   d59b8:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d59ba:	4d62      	ldr	r5, [pc, #392]	; (d5b44 <_GLOBAL__sub_I___appProductID+0x220>)
   d59bc:	4962      	ldr	r1, [pc, #392]	; (d5b48 <_GLOBAL__sub_I___appProductID+0x224>)
   d59be:	463a      	mov	r2, r7
   d59c0:	f003 f894 	bl	d8aec <__aeabi_atexit>
   d59c4:	4961      	ldr	r1, [pc, #388]	; (d5b4c <_GLOBAL__sub_I___appProductID+0x228>)
   d59c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d59ca:	4628      	mov	r0, r5
   d59cc:	f001 f8e6 	bl	d6b9c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d59d0:	4b5f      	ldr	r3, [pc, #380]	; (d5b50 <_GLOBAL__sub_I___appProductID+0x22c>)
   d59d2:	602b      	str	r3, [r5, #0]
retained uint8_t publishQueueRetainedBuffer[2048];                                          // Create a buffer in FRAM for cached publishes
   d59d4:	463a      	mov	r2, r7
   d59d6:	495f      	ldr	r1, [pc, #380]	; (d5b54 <_GLOBAL__sub_I___appProductID+0x230>)
   d59d8:	4628      	mov	r0, r5
   d59da:	f003 f887 	bl	d8aec <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d59de:	4b5e      	ldr	r3, [pc, #376]	; (d5b58 <_GLOBAL__sub_I___appProductID+0x234>)
   d59e0:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59e2:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d59e6:	4d5d      	ldr	r5, [pc, #372]	; (d5b5c <_GLOBAL__sub_I___appProductID+0x238>)
   d59e8:	4b5d      	ldr	r3, [pc, #372]	; (d5b60 <_GLOBAL__sub_I___appProductID+0x23c>)
   d59ea:	602b      	str	r3, [r5, #0]
   d59ec:	e898 0003 	ldmia.w	r8, {r0, r1}
   d59f0:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d59f2:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59f6:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d59fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d59fe:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5a02:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5a06:	e883 0003 	stmia.w	r3, {r0, r1}
   d5a0a:	4b56      	ldr	r3, [pc, #344]	; (d5b64 <_GLOBAL__sub_I___appProductID+0x240>)
   d5a0c:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a0e:	69ab      	ldr	r3, [r5, #24]
   d5a10:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a12:	4b55      	ldr	r3, [pc, #340]	; (d5b68 <_GLOBAL__sub_I___appProductID+0x244>)
   d5a14:	712c      	strb	r4, [r5, #4]
   d5a16:	60ac      	str	r4, [r5, #8]
   d5a18:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5a1a:	4a54      	ldr	r2, [pc, #336]	; (d5b6c <_GLOBAL__sub_I___appProductID+0x248>)
      __a = _GLIBCXX_MOVE(__b);
   d5a1c:	9406      	str	r4, [sp, #24]
   d5a1e:	462b      	mov	r3, r5
   d5a20:	e9cd 4400 	strd	r4, r4, [sp]
   d5a24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5a28:	f105 0008 	add.w	r0, r5, #8
   d5a2c:	f001 f9ec 	bl	d6e08 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5a30:	4640      	mov	r0, r8
   d5a32:	f7fe fc35 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5a36:	463a      	mov	r2, r7
   d5a38:	494d      	ldr	r1, [pc, #308]	; (d5b70 <_GLOBAL__sub_I___appProductID+0x24c>)
   d5a3a:	4628      	mov	r0, r5
   d5a3c:	f003 f856 	bl	d8aec <__aeabi_atexit>

   d5a40:	4d4c      	ldr	r5, [pc, #304]	; (d5b74 <_GLOBAL__sub_I___appProductID+0x250>)

   d5a42:	4b4d      	ldr	r3, [pc, #308]	; (d5b78 <_GLOBAL__sub_I___appProductID+0x254>)

   d5a44:	63ac      	str	r4, [r5, #56]	; 0x38

   d5a46:	629e      	str	r6, [r3, #40]	; 0x28

   d5a48:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
   d5a4c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
   d5a50:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d5a54:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d5a58:	646c      	str	r4, [r5, #68]	; 0x44
   d5a5a:	652c      	str	r4, [r5, #80]	; 0x50
   d5a5c:	65ec      	str	r4, [r5, #92]	; 0x5c
   d5a5e:	4621      	mov	r1, r4
   d5a60:	2210      	movs	r2, #16
   d5a62:	f105 0060 	add.w	r0, r5, #96	; 0x60
   d5a66:	f003 fee3 	bl	d9830 <memset>
   d5a6a:	2210      	movs	r2, #16
   d5a6c:	4621      	mov	r1, r4
   d5a6e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   d5a72:	f003 fedd 	bl	d9830 <memset>
  Load_Monitor::CT_Property_Struct ThreePhaseLoadOne[3] = {
   d5a76:	4b41      	ldr	r3, [pc, #260]	; (d5b7c <_GLOBAL__sub_I___appProductID+0x258>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5a78:	4c41      	ldr	r4, [pc, #260]	; (d5b80 <_GLOBAL__sub_I___appProductID+0x25c>)
  Load_Monitor::CT_Property_Struct ThreePhaseLoadOne[3] = {
   d5a7a:	4d42      	ldr	r5, [pc, #264]	; (d5b84 <_GLOBAL__sub_I___appProductID+0x260>)
   d5a7c:	f893 9000 	ldrb.w	r9, [r3]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5a80:	f8c4 9000 	str.w	r9, [r4]
  Load_Monitor::CT_Property_Struct ThreePhaseLoadOne[3] = {
   d5a84:	6828      	ldr	r0, [r5, #0]
   d5a86:	f003 fac7 	bl	d9018 <__aeabi_f2d>
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5a8a:	4b3f      	ldr	r3, [pc, #252]	; (d5b88 <_GLOBAL__sub_I___appProductID+0x264>)
   d5a8c:	f893 8000 	ldrb.w	r8, [r3]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5a90:	f8c4 8010 	str.w	r8, [r4, #16]
  Load_Monitor::CT_Property_Struct ThreePhaseLoadOne[3] = {
   d5a94:	ec41 0b1a 	vmov	d10, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5a98:	e9c4 0102 	strd	r0, r1, [r4, #8]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5a9c:	6868      	ldr	r0, [r5, #4]
   d5a9e:	f003 fabb 	bl	d9018 <__aeabi_f2d>
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5aa2:	4b3a      	ldr	r3, [pc, #232]	; (d5b8c <_GLOBAL__sub_I___appProductID+0x268>)
   d5aa4:	781f      	ldrb	r7, [r3, #0]
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5aa6:	6227      	str	r7, [r4, #32]
    {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5aa8:	ec41 0b19 	vmov	d9, r0, r1
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5aac:	e9c4 0106 	strd	r0, r1, [r4, #24]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5ab0:	68a8      	ldr	r0, [r5, #8]
   d5ab2:	f003 fab1 	bl	d9018 <__aeabi_f2d>
  {  
   d5ab6:	4b36      	ldr	r3, [pc, #216]	; (d5b90 <_GLOBAL__sub_I___appProductID+0x26c>)
    {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5ab8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5abc:	4c35      	ldr	r4, [pc, #212]	; (d5b94 <_GLOBAL__sub_I___appProductID+0x270>)
  {  
   d5abe:	781e      	ldrb	r6, [r3, #0]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5ac0:	6026      	str	r6, [r4, #0]
    {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5ac2:	ec41 0b18 	vmov	d8, r0, r1
  {  
   d5ac6:	68e8      	ldr	r0, [r5, #12]
   d5ac8:	f003 faa6 	bl	d9018 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5acc:	4b32      	ldr	r3, [pc, #200]	; (d5b98 <_GLOBAL__sub_I___appProductID+0x274>)
  {  
   d5ace:	4682      	mov	sl, r0
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5ad0:	781b      	ldrb	r3, [r3, #0]
   d5ad2:	6123      	str	r3, [r4, #16]
  {  
   d5ad4:	468b      	mov	fp, r1
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5ad6:	e9c4 ab02 	strd	sl, fp, [r4, #8]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5ada:	6928      	ldr	r0, [r5, #16]
   d5adc:	f003 fa9c 	bl	d9018 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5ae0:	4b2e      	ldr	r3, [pc, #184]	; (d5b9c <_GLOBAL__sub_I___appProductID+0x278>)
   d5ae2:	781b      	ldrb	r3, [r3, #0]
   d5ae4:	6223      	str	r3, [r4, #32]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5ae6:	e9c4 0106 	strd	r0, r1, [r4, #24]
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5aea:	6968      	ldr	r0, [r5, #20]
   d5aec:	f003 fa94 	bl	d9018 <__aeabi_f2d>
      {CT4_PIN,sensorConstants.sensorFourConstant}                                              // N phase 
   d5af0:	4b2b      	ldr	r3, [pc, #172]	; (d5ba0 <_GLOBAL__sub_I___appProductID+0x27c>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5af2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
      {CT4_PIN,sensorConstants.sensorFourConstant}                                              // N phase 
   d5af6:	ed83 ab02 	vstr	d10, [r3, #8]
   d5afa:	ed83 9b06 	vstr	d9, [r3, #24]
   d5afe:	ed83 8b0a 	vstr	d8, [r3, #40]	; 0x28
   d5b02:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
   d5b06:	f8c3 9000 	str.w	r9, [r3]
   d5b0a:	f8c3 8010 	str.w	r8, [r3, #16]
   d5b0e:	621f      	str	r7, [r3, #32]
   d5b10:	631e      	str	r6, [r3, #48]	; 0x30
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5b12:	b009      	add	sp, #36	; 0x24
   d5b14:	ecbd 8b06 	vpop	{d8-d10}
   d5b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b1c:	2003dae9 	.word	0x2003dae9
   d5b20:	2003da38 	.word	0x2003da38
   d5b24:	2003d9f8 	.word	0x2003d9f8
   d5b28:	2003dae8 	.word	0x2003dae8
   d5b2c:	ffff0000 	.word	0xffff0000
   d5b30:	000d4237 	.word	0x000d4237
   d5b34:	2003e3b0 	.word	0x2003e3b0
   d5b38:	000dbe84 	.word	0x000dbe84
   d5b3c:	000d41d5 	.word	0x000d41d5
   d5b40:	2003e41c 	.word	0x2003e41c
   d5b44:	2003e3e0 	.word	0x2003e3e0
   d5b48:	000d603b 	.word	0x000d603b
   d5b4c:	2003f400 	.word	0x2003f400
   d5b50:	000dbe5c 	.word	0x000dbe5c
   d5b54:	000d41ad 	.word	0x000d41ad
   d5b58:	000d4251 	.word	0x000d4251
   d5b5c:	2003e3c0 	.word	0x2003e3c0
   d5b60:	000dbe48 	.word	0x000dbe48
   d5b64:	000d40d9 	.word	0x000d40d9
   d5b68:	000d40d5 	.word	0x000d40d5
   d5b6c:	000d41fd 	.word	0x000d41fd
   d5b70:	000d42b5 	.word	0x000d42b5
   d5b74:	2003e450 	.word	0x2003e450
   d5b78:	2003e5a0 	.word	0x2003e5a0
   d5b7c:	2003d738 	.word	0x2003d738
   d5b80:	2003da88 	.word	0x2003da88
   d5b84:	2003e438 	.word	0x2003e438
   d5b88:	2003d739 	.word	0x2003d739
   d5b8c:	2003d73a 	.word	0x2003d73a
   d5b90:	2003d73b 	.word	0x2003d73b
   d5b94:	2003dab8 	.word	0x2003dab8
   d5b98:	2003d73c 	.word	0x2003d73c
   d5b9c:	2003d73d 	.word	0x2003d73d
   d5ba0:	2003da48 	.word	0x2003da48
   d5ba4:	00000000 	.word	0x00000000

000d5ba8 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5ba8:	b082      	sub	sp, #8
   d5baa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bae:	a90a      	add	r1, sp, #40	; 0x28
   d5bb0:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d5bb4:	4b34      	ldr	r3, [pc, #208]	; (d5c88 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5bb6:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d5c8c <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d5bba:	2200      	movs	r2, #0
   d5bbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5bc0:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d5bc2:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5bc6:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d5bca:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d5bce:	f002 ff35 	bl	d8a3c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5bd2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d5bd6:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5bd8:	f003 fa0c 	bl	d8ff4 <__aeabi_i2d>
   d5bdc:	4642      	mov	r2, r8
   d5bde:	464b      	mov	r3, r9
   d5be0:	4606      	mov	r6, r0
   d5be2:	460f      	mov	r7, r1
   d5be4:	f003 f8b8 	bl	d8d58 <__aeabi_dsub>
   d5be8:	4652      	mov	r2, sl
   d5bea:	465b      	mov	r3, fp
   d5bec:	f003 fa6c 	bl	d90c8 <__aeabi_dmul>
   d5bf0:	4642      	mov	r2, r8
   d5bf2:	464b      	mov	r3, r9
   d5bf4:	f003 f8b2 	bl	d8d5c <__adddf3>
   d5bf8:	4602      	mov	r2, r0
   d5bfa:	460b      	mov	r3, r1
   d5bfc:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d5c00:	4630      	mov	r0, r6
   d5c02:	4639      	mov	r1, r7
   d5c04:	f003 f8a8 	bl	d8d58 <__aeabi_dsub>
   d5c08:	4602      	mov	r2, r0
   d5c0a:	460b      	mov	r3, r1
   d5c0c:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5c10:	f003 fa5a 	bl	d90c8 <__aeabi_dmul>
   d5c14:	4602      	mov	r2, r0
   d5c16:	460b      	mov	r3, r1
   d5c18:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d5c1c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d5c20:	f003 f89c 	bl	d8d5c <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d5c24:	3d01      	subs	r5, #1
    sumI += sqI;
   d5c26:	4606      	mov	r6, r0
   d5c28:	460f      	mov	r7, r1
   d5c2a:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d5c2e:	d1cc      	bne.n	d5bca <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d5c34:	a310      	add	r3, pc, #64	; (adr r3, d5c78 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d5c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c3a:	f003 fa45 	bl	d90c8 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5c3e:	a310      	add	r3, pc, #64	; (adr r3, d5c80 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d5c40:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5c44:	4680      	mov	r8, r0
   d5c46:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5c48:	4630      	mov	r0, r6
   d5c4a:	4639      	mov	r1, r7
   d5c4c:	f003 fb66 	bl	d931c <__aeabi_ddiv>
   d5c50:	ec41 0b10 	vmov	d0, r0, r1
   d5c54:	f002 ff58 	bl	d8b08 <sqrt>

  //Reset accumulators
  sumI = 0;
   d5c58:	2200      	movs	r2, #0
   d5c5a:	2300      	movs	r3, #0
   d5c5c:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5c60:	ec51 0b10 	vmov	r0, r1, d0
   d5c64:	4642      	mov	r2, r8
   d5c66:	464b      	mov	r3, r9
   d5c68:	f003 fa2e 	bl	d90c8 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d5c6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c70:	ec41 0b10 	vmov	d0, r0, r1
   d5c74:	b002      	add	sp, #8
   d5c76:	4770      	bx	lr
   d5c78:	66666666 	.word	0x66666666
   d5c7c:	3f4a6666 	.word	0x3f4a6666
   d5c80:	00000000 	.word	0x00000000
   d5c84:	4099f800 	.word	0x4099f800
   d5c88:	40a00000 	.word	0x40a00000
   d5c8c:	3f300000 	.word	0x3f300000

000d5c90 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d5c90:	4b03      	ldr	r3, [pc, #12]	; (d5ca0 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d5c92:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d5c94:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d5c96:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5c9a:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d5c9e:	4770      	bx	lr
   d5ca0:	40a00000 	.word	0x40a00000
   d5ca4:	00000000 	.word	0x00000000

000d5ca8 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5cac:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5d78 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5cb0:	9101      	str	r1, [sp, #4]
   d5cb2:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5cb4:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5cb6:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5cba:	9b01      	ldr	r3, [sp, #4]
   d5cbc:	429d      	cmp	r5, r3
   d5cbe:	d02f      	beq.n	d5d20 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5cc0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d5cc2:	f002 febb 	bl	d8a3c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5cc6:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5cca:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5ccc:	f003 f992 	bl	d8ff4 <__aeabi_i2d>
   d5cd0:	4642      	mov	r2, r8
   d5cd2:	464b      	mov	r3, r9
   d5cd4:	4606      	mov	r6, r0
   d5cd6:	460f      	mov	r7, r1
   d5cd8:	f003 f83e 	bl	d8d58 <__aeabi_dsub>
   d5cdc:	4652      	mov	r2, sl
   d5cde:	465b      	mov	r3, fp
   d5ce0:	f003 f9f2 	bl	d90c8 <__aeabi_dmul>
   d5ce4:	4642      	mov	r2, r8
   d5ce6:	464b      	mov	r3, r9
   d5ce8:	f003 f838 	bl	d8d5c <__adddf3>
   d5cec:	4602      	mov	r2, r0
   d5cee:	460b      	mov	r3, r1
   d5cf0:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d5cf4:	4630      	mov	r0, r6
   d5cf6:	4639      	mov	r1, r7
   d5cf8:	f003 f82e 	bl	d8d58 <__aeabi_dsub>
   d5cfc:	4602      	mov	r2, r0
   d5cfe:	460b      	mov	r3, r1
   d5d00:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5d04:	f003 f9e0 	bl	d90c8 <__aeabi_dmul>
   d5d08:	4602      	mov	r2, r0
   d5d0a:	460b      	mov	r3, r1
   d5d0c:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d5d10:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5d14:	f003 f822 	bl	d8d5c <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d18:	3501      	adds	r5, #1
    sumI += sqI;
   d5d1a:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5d1e:	e7cc      	b.n	d5cba <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5d20:	a313      	add	r3, pc, #76	; (adr r3, d5d70 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d5d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d26:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d5d2a:	f003 f9cd 	bl	d90c8 <__aeabi_dmul>
   d5d2e:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5d30:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5d32:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5d34:	f003 f94e 	bl	d8fd4 <__aeabi_ui2d>
   d5d38:	4602      	mov	r2, r0
   d5d3a:	460b      	mov	r3, r1
   d5d3c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5d40:	f003 faec 	bl	d931c <__aeabi_ddiv>
   d5d44:	ec41 0b10 	vmov	d0, r0, r1
   d5d48:	f002 fede 	bl	d8b08 <sqrt>
   d5d4c:	4632      	mov	r2, r6
   d5d4e:	463b      	mov	r3, r7
   d5d50:	ec51 0b10 	vmov	r0, r1, d0
   d5d54:	f003 f9b8 	bl	d90c8 <__aeabi_dmul>
   d5d58:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d5d5c:	2200      	movs	r2, #0
   d5d5e:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5d60:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d5d64:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d5d68:	b003      	add	sp, #12
   d5d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d6e:	bf00      	nop
   d5d70:	66666666 	.word	0x66666666
   d5d74:	3f4a6666 	.word	0x3f4a6666
   d5d78:	3f500000 	.word	0x3f500000

000d5d7c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5d7c:	4770      	bx	lr

000d5d7e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5d7e:	b510      	push	{r4, lr}
}
   d5d80:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5d82:	4604      	mov	r4, r0
}
   d5d84:	f002 feb7 	bl	d8af6 <_ZdlPvj>
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bd10      	pop	{r4, pc}

000d5d8c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5d8c:	6803      	ldr	r3, [r0, #0]
   d5d8e:	b2c9      	uxtb	r1, r1
   d5d90:	689b      	ldr	r3, [r3, #8]
   d5d92:	4718      	bx	r3

000d5d94 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5d94:	b40e      	push	{r1, r2, r3}
   d5d96:	b510      	push	{r4, lr}
   d5d98:	b08d      	sub	sp, #52	; 0x34
   d5d9a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5d9c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5d9e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5da2:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5da4:	2300      	movs	r3, #0
   d5da6:	2020      	movs	r0, #32
   d5da8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5dac:	e9cd 4200 	strd	r4, r2, [sp]
   d5db0:	201e      	movs	r0, #30
   d5db2:	aa04      	add	r2, sp, #16
   d5db4:	f001 fa08 	bl	d71c8 <log_message_v>
}
   d5db8:	b00d      	add	sp, #52	; 0x34
   d5dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5dbe:	b003      	add	sp, #12
   d5dc0:	4770      	bx	lr
	...

000d5dc4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5dc4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5dc6:	4d03      	ldr	r5, [pc, #12]	; (d5dd4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5dc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5dcc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5dd0:	bd30      	pop	{r4, r5, pc}
   d5dd2:	bf00      	nop
   d5dd4:	000dbf34 	.word	0x000dbf34

000d5dd8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5dd8:	6840      	ldr	r0, [r0, #4]
   d5dda:	f001 bf7f 	b.w	d7cdc <_ZN7TwoWire5beginEv>

000d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5dde:	b510      	push	{r4, lr}
   d5de0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5de2:	6800      	ldr	r0, [r0, #0]
   d5de4:	f001 ffbd 	bl	d7d62 <_ZN7TwoWire6unlockEv>
   d5de8:	4620      	mov	r0, r4
   d5dea:	bd10      	pop	{r4, pc}

000d5dec <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5df0:	b08a      	sub	sp, #40	; 0x28
   d5df2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5df4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5df6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5df8:	f001 ffaa 	bl	d7d50 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5dfc:	221e      	movs	r2, #30
   d5dfe:	2100      	movs	r1, #0
   d5e00:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5e02:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5e04:	f003 fd14 	bl	d9830 <memset>
		size_t framAddr = 0;
   d5e08:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5e0a:	b1ef      	cbz	r7, d5e48 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5e0c:	6823      	ldr	r3, [r4, #0]
   d5e0e:	2f1e      	cmp	r7, #30
   d5e10:	46b8      	mov	r8, r7
   d5e12:	bf28      	it	cs
   d5e14:	f04f 081e 	movcs.w	r8, #30
   d5e18:	68dd      	ldr	r5, [r3, #12]
   d5e1a:	aa02      	add	r2, sp, #8
   d5e1c:	4643      	mov	r3, r8
   d5e1e:	4631      	mov	r1, r6
   d5e20:	4620      	mov	r0, r4
   d5e22:	47a8      	blx	r5
			if (!result) {
   d5e24:	4605      	mov	r5, r0
   d5e26:	b958      	cbnz	r0, d5e40 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5e28:	480a      	ldr	r0, [pc, #40]	; (d5e54 <_ZN6MB85RC5eraseEv+0x68>)
   d5e2a:	490b      	ldr	r1, [pc, #44]	; (d5e58 <_ZN6MB85RC5eraseEv+0x6c>)
   d5e2c:	4632      	mov	r2, r6
   d5e2e:	f7ff ffb1 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5e32:	a801      	add	r0, sp, #4
   d5e34:	f7ff ffd3 	bl	d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5e38:	4628      	mov	r0, r5
   d5e3a:	b00a      	add	sp, #40	; 0x28
   d5e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5e40:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5e44:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5e46:	e7e0      	b.n	d5e0a <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5e48:	a801      	add	r0, sp, #4
   d5e4a:	f7ff ffc8 	bl	d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5e4e:	2501      	movs	r5, #1
   d5e50:	e7f2      	b.n	d5e38 <_ZN6MB85RC5eraseEv+0x4c>
   d5e52:	bf00      	nop
   d5e54:	2003e61c 	.word	0x2003e61c
   d5e58:	000dbf00 	.word	0x000dbf00

000d5e5c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5e60:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5e62:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5e64:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5e66:	460d      	mov	r5, r1
   d5e68:	4616      	mov	r6, r2
   d5e6a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5e6c:	f001 ff70 	bl	d7d50 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5e70:	b1a7      	cbz	r7, d5e9c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5e72:	68e1      	ldr	r1, [r4, #12]
   d5e74:	6860      	ldr	r0, [r4, #4]
   d5e76:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5e7a:	f001 ff62 	bl	d7d42 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5e7e:	0a29      	lsrs	r1, r5, #8
   d5e80:	6860      	ldr	r0, [r4, #4]
   d5e82:	f7ff ff83 	bl	d5d8c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5e86:	4629      	mov	r1, r5
   d5e88:	6860      	ldr	r0, [r4, #4]
   d5e8a:	f7ff ff7f 	bl	d5d8c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5e8e:	6860      	ldr	r0, [r4, #4]
   d5e90:	2100      	movs	r1, #0
   d5e92:	f001 ff59 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5e96:	b148      	cbz	r0, d5eac <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5e98:	2400      	movs	r4, #0
   d5e9a:	e000      	b.n	d5e9e <_ZN6MB85RC8readDataEjPhj+0x42>
   d5e9c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5e9e:	a801      	add	r0, sp, #4
   d5ea0:	f7ff ff9d 	bl	d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	b003      	add	sp, #12
   d5ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5eac:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5eae:	7b21      	ldrb	r1, [r4, #12]
   d5eb0:	6860      	ldr	r0, [r4, #4]
   d5eb2:	46b8      	mov	r8, r7
   d5eb4:	bf28      	it	cs
   d5eb6:	f04f 0820 	movcs.w	r8, #32
   d5eba:	2301      	movs	r3, #1
   d5ebc:	4642      	mov	r2, r8
   d5ebe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ec2:	f001 ff28 	bl	d7d16 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5ec6:	f002 fde9 	bl	d8a9c <_Z19__fetch_global_Wirev>
   d5eca:	6803      	ldr	r3, [r0, #0]
   d5ecc:	691b      	ldr	r3, [r3, #16]
   d5ece:	4798      	blx	r3
   d5ed0:	4540      	cmp	r0, r8
   d5ed2:	dbe1      	blt.n	d5e98 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5ed4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5ed8:	f002 fde0 	bl	d8a9c <_Z19__fetch_global_Wirev>
   d5edc:	6803      	ldr	r3, [r0, #0]
   d5ede:	695b      	ldr	r3, [r3, #20]
   d5ee0:	4798      	blx	r3
   d5ee2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5ee6:	454e      	cmp	r6, r9
   d5ee8:	d1f6      	bne.n	d5ed8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5eea:	4445      	add	r5, r8
   d5eec:	eba7 0708 	sub.w	r7, r7, r8
   d5ef0:	e7be      	b.n	d5e70 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5ef2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ef6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5ef8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5efa:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5efc:	460e      	mov	r6, r1
   d5efe:	4690      	mov	r8, r2
   d5f00:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5f02:	f001 ff25 	bl	d7d50 <_ZN7TwoWire4lockEv>
   d5f06:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5f0a:	f1b9 0f00 	cmp.w	r9, #0
   d5f0e:	d02a      	beq.n	d5f66 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5f10:	b34d      	cbz	r5, d5f66 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5f12:	68e1      	ldr	r1, [r4, #12]
   d5f14:	6860      	ldr	r0, [r4, #4]
   d5f16:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f1a:	f001 ff12 	bl	d7d42 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5f1e:	0a31      	lsrs	r1, r6, #8
   d5f20:	6860      	ldr	r0, [r4, #4]
   d5f22:	f7ff ff33 	bl	d5d8c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5f26:	6860      	ldr	r0, [r4, #4]
   d5f28:	4631      	mov	r1, r6
   d5f2a:	f7ff ff2f 	bl	d5d8c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5f2e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5f32:	4647      	mov	r7, r8
   d5f34:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5f38:	6860      	ldr	r0, [r4, #4]
   d5f3a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5f3e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5f40:	3d01      	subs	r5, #1
				wire.write(*data);
   d5f42:	689b      	ldr	r3, [r3, #8]
   d5f44:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5f46:	4555      	cmp	r5, sl
   d5f48:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5f4c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5f4e:	d001      	beq.n	d5f54 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5f50:	2d00      	cmp	r5, #0
   d5f52:	d1f1      	bne.n	d5f38 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5f54:	6860      	ldr	r0, [r4, #4]
   d5f56:	2101      	movs	r1, #1
   d5f58:	f001 fef6 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5f5c:	2800      	cmp	r0, #0
   d5f5e:	d0d7      	beq.n	d5f10 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5f60:	f04f 0900 	mov.w	r9, #0
   d5f64:	e7d1      	b.n	d5f0a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5f66:	a801      	add	r0, sp, #4
   d5f68:	f7ff ff39 	bl	d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5f6c:	4648      	mov	r0, r9
   d5f6e:	b003      	add	sp, #12
   d5f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5f74 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f78:	b08b      	sub	sp, #44	; 0x2c
   d5f7a:	460e      	mov	r6, r1
   d5f7c:	4615      	mov	r5, r2
   d5f7e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5f80:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f82:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5f84:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5f86:	f001 fee3 	bl	d7d50 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5f8a:	42ae      	cmp	r6, r5
   d5f8c:	d229      	bcs.n	d5fe2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5f8e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5f90:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5f92:	b18c      	cbz	r4, d5fb8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5f94:	2c1e      	cmp	r4, #30
   d5f96:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5f98:	f8d8 3000 	ldr.w	r3, [r8]
   d5f9c:	bf28      	it	cs
   d5f9e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5fa0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5fa2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5fa6:	aa02      	add	r2, sp, #8
   d5fa8:	463b      	mov	r3, r7
   d5faa:	4631      	mov	r1, r6
   d5fac:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5fae:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5fb0:	47c8      	blx	r9
				if (!result) {
   d5fb2:	b948      	cbnz	r0, d5fc8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5fb4:	2400      	movs	r4, #0
   d5fb6:	e000      	b.n	d5fba <_ZN6MB85RC8moveDataEjjj+0x46>
   d5fb8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5fba:	a801      	add	r0, sp, #4
   d5fbc:	f7ff ff0f 	bl	d5dde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	b00b      	add	sp, #44	; 0x2c
   d5fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5fc8:	f8d8 3000 	ldr.w	r3, [r8]
   d5fcc:	aa02      	add	r2, sp, #8
   d5fce:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5fd2:	4629      	mov	r1, r5
   d5fd4:	463b      	mov	r3, r7
   d5fd6:	4640      	mov	r0, r8
   d5fd8:	47c8      	blx	r9
				if (!result) {
   d5fda:	2800      	cmp	r0, #0
   d5fdc:	d0ea      	beq.n	d5fb4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5fde:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5fe0:	e7d7      	b.n	d5f92 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5fe2:	d9e9      	bls.n	d5fb8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5fe4:	2c00      	cmp	r4, #0
   d5fe6:	d0e7      	beq.n	d5fb8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5fe8:	f8d8 3000 	ldr.w	r3, [r8]
   d5fec:	2c1e      	cmp	r4, #30
   d5fee:	4627      	mov	r7, r4
   d5ff0:	bf28      	it	cs
   d5ff2:	271e      	movcs	r7, #30
   d5ff4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5ff8:	aa02      	add	r2, sp, #8
   d5ffa:	463b      	mov	r3, r7
   d5ffc:	4631      	mov	r1, r6
   d5ffe:	4640      	mov	r0, r8
   d6000:	47c8      	blx	r9
				if (!result) {
   d6002:	2800      	cmp	r0, #0
   d6004:	d0d6      	beq.n	d5fb4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6006:	f8d8 3000 	ldr.w	r3, [r8]
   d600a:	aa02      	add	r2, sp, #8
   d600c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6010:	4629      	mov	r1, r5
   d6012:	463b      	mov	r3, r7
   d6014:	4640      	mov	r0, r8
   d6016:	47c8      	blx	r9
				if (!result) {
   d6018:	2800      	cmp	r0, #0
   d601a:	d0cb      	beq.n	d5fb4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d601c:	443e      	add	r6, r7
				framAddrTo += count;
   d601e:	443d      	add	r5, r7
				numBytes -= count;
   d6020:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6022:	e7df      	b.n	d5fe4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6024 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d6024:	2040      	movs	r0, #64	; 0x40
   d6026:	4770      	bx	lr

000d6028 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6028:	2000      	movs	r0, #0
   d602a:	4770      	bx	lr

000d602c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d602c:	2080      	movs	r0, #128	; 0x80
   d602e:	4770      	bx	lr

000d6030 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6030:	20ff      	movs	r0, #255	; 0xff
   d6032:	4770      	bx	lr

000d6034 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6034:	4770      	bx	lr

000d6036 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6036:	4770      	bx	lr

000d6038 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6038:	4770      	bx	lr

000d603a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d603a:	4770      	bx	lr

000d603c <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d603c:	b510      	push	{r4, lr}
}
   d603e:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d6040:	4604      	mov	r4, r0
}
   d6042:	f002 fd58 	bl	d8af6 <_ZdlPvj>
   d6046:	4620      	mov	r0, r4
   d6048:	bd10      	pop	{r4, pc}

000d604a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d604a:	b510      	push	{r4, lr}
}
   d604c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d604e:	4604      	mov	r4, r0
}
   d6050:	f002 fd51 	bl	d8af6 <_ZdlPvj>
   d6054:	4620      	mov	r0, r4
   d6056:	bd10      	pop	{r4, pc}

000d6058 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d6058:	b510      	push	{r4, lr}
}
   d605a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d605c:	4604      	mov	r4, r0
}
   d605e:	f002 fd4a 	bl	d8af6 <_ZdlPvj>
   d6062:	4620      	mov	r0, r4
   d6064:	bd10      	pop	{r4, pc}

000d6066 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d6066:	b510      	push	{r4, lr}
}
   d6068:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d606a:	4604      	mov	r4, r0
}
   d606c:	f002 fd43 	bl	d8af6 <_ZdlPvj>
   d6070:	4620      	mov	r0, r4
   d6072:	bd10      	pop	{r4, pc}

000d6074 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d6074:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d6078:	6803      	ldr	r3, [r0, #0]
   d607a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d607c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d607e:	4798      	blx	r3
   d6080:	2210      	movs	r2, #16
   d6082:	4601      	mov	r1, r0
   d6084:	4668      	mov	r0, sp
   d6086:	f003 fbd3 	bl	d9830 <memset>
	size_t len = length();
   d608a:	6823      	ldr	r3, [r4, #0]
   d608c:	4620      	mov	r0, r4
   d608e:	689b      	ldr	r3, [r3, #8]
   d6090:	4798      	blx	r3
	size_t offset = 0;
   d6092:	2500      	movs	r5, #0
	size_t len = length();
   d6094:	4607      	mov	r7, r0
	bool bResult = false;
   d6096:	4628      	mov	r0, r5
	while(offset < len) {
   d6098:	42bd      	cmp	r5, r7
   d609a:	d20e      	bcs.n	d60ba <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d609c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d609e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d60a0:	2e10      	cmp	r6, #16
   d60a2:	bf28      	it	cs
   d60a4:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d60a6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d60aa:	466a      	mov	r2, sp
   d60ac:	4633      	mov	r3, r6
   d60ae:	4629      	mov	r1, r5
   d60b0:	4620      	mov	r0, r4
   d60b2:	47c0      	blx	r8
		if (!bResult) {
   d60b4:	b108      	cbz	r0, d60ba <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d60b6:	4435      	add	r5, r6
	while(offset < len) {
   d60b8:	e7ee      	b.n	d6098 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d60ba:	b004      	add	sp, #16
   d60bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60c0 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d60c0:	f44f 7380 	mov.w	r3, #256	; 0x100
   d60c4:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d60c6:	f240 1301 	movw	r3, #257	; 0x101
   d60ca:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d60cc:	2300      	movs	r3, #0
   d60ce:	8203      	strh	r3, [r0, #16]
}
   d60d0:	4770      	bx	lr
	...

000d60d4 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b06      	ldr	r3, [pc, #24]	; (d60f0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d60d8:	6003      	str	r3, [r0, #0]
   d60da:	4b06      	ldr	r3, [pc, #24]	; (d60f4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d60dc:	6043      	str	r3, [r0, #4]
   d60de:	f240 7304 	movw	r3, #1796	; 0x704
   d60e2:	8103      	strh	r3, [r0, #8]
   d60e4:	2300      	movs	r3, #0
   d60e6:	7443      	strb	r3, [r0, #17]
	clear();
   d60e8:	f7ff ffea 	bl	d60c0 <_ZN12MCP79410Time5clearEv>
}
   d60ec:	bd08      	pop	{r3, pc}
   d60ee:	bf00      	nop
   d60f0:	000dc014 	.word	0x000dc014
   d60f4:	03020100 	.word	0x03020100

000d60f8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d60f8:	0903      	lsrs	r3, r0, #4
}
   d60fa:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d60fc:	f000 000f 	and.w	r0, r0, #15
}
   d6100:	fb02 0003 	mla	r0, r2, r3, r0
   d6104:	4770      	bx	lr

000d6106 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6106:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6108:	7a80      	ldrb	r0, [r0, #10]
   d610a:	f7ff fff5 	bl	d60f8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d610e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6112:	bd08      	pop	{r3, pc}

000d6114 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6114:	7ac0      	ldrb	r0, [r0, #11]
   d6116:	f000 001f 	and.w	r0, r0, #31
   d611a:	f7ff bfed 	b.w	d60f8 <_ZN12MCP79410Time8bcdToIntEh>

000d611e <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d611e:	7b00      	ldrb	r0, [r0, #12]
   d6120:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6124:	f7ff bfe8 	b.w	d60f8 <_ZN12MCP79410Time8bcdToIntEh>

000d6128 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6128:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d612a:	7b81      	ldrb	r1, [r0, #14]
   d612c:	064a      	lsls	r2, r1, #25
   d612e:	d50d      	bpl.n	d614c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6130:	f001 001f 	and.w	r0, r1, #31
   d6134:	f7ff ffe0 	bl	d60f8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6138:	068b      	lsls	r3, r1, #26
   d613a:	d503      	bpl.n	d6144 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d613c:	280c      	cmp	r0, #12
   d613e:	d000      	beq.n	d6142 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6140:	300c      	adds	r0, #12
}
   d6142:	bd08      	pop	{r3, pc}
				return 0;
   d6144:	280c      	cmp	r0, #12
   d6146:	bf08      	it	eq
   d6148:	2000      	moveq	r0, #0
   d614a:	e7fa      	b.n	d6142 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d614c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6150:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6154:	f7ff bfd0 	b.w	d60f8 <_ZN12MCP79410Time8bcdToIntEh>

000d6158 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6158:	7bc0      	ldrb	r0, [r0, #15]
   d615a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d615e:	f7ff bfcb 	b.w	d60f8 <_ZN12MCP79410Time8bcdToIntEh>

000d6162 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6162:	7c00      	ldrb	r0, [r0, #16]
   d6164:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6168:	f7ff bfc6 	b.w	d60f8 <_ZN12MCP79410Time8bcdToIntEh>

000d616c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d616c:	b510      	push	{r4, lr}
   d616e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6170:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6172:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6174:	2100      	movs	r1, #0
   d6176:	a801      	add	r0, sp, #4
   d6178:	f003 fb5a 	bl	d9830 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d617c:	4620      	mov	r0, r4
   d617e:	f7ff ffc2 	bl	d6106 <_ZNK12MCP79410Time7getYearEv>
   d6182:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6186:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6188:	4620      	mov	r0, r4
   d618a:	f7ff ffc3 	bl	d6114 <_ZNK12MCP79410Time8getMonthEv>
   d618e:	3801      	subs	r0, #1
   d6190:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6192:	4620      	mov	r0, r4
   d6194:	f7ff ffc3 	bl	d611e <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6198:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d619a:	4620      	mov	r0, r4
   d619c:	f7ff ffc4 	bl	d6128 <_ZNK12MCP79410Time7getHourEv>
   d61a0:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d61a2:	4620      	mov	r0, r4
   d61a4:	f7ff ffd8 	bl	d6158 <_ZNK12MCP79410Time9getMinuteEv>
   d61a8:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d61aa:	4620      	mov	r0, r4
   d61ac:	f7ff ffd9 	bl	d6162 <_ZNK12MCP79410Time9getSecondEv>
   d61b0:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d61b2:	a801      	add	r0, sp, #4
   d61b4:	f001 f996 	bl	d74e4 <mktime>
}
   d61b8:	b00a      	add	sp, #40	; 0x28
   d61ba:	bd10      	pop	{r4, pc}

000d61bc <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d61bc:	210a      	movs	r1, #10
   d61be:	fb90 f2f1 	sdiv	r2, r0, r1
   d61c2:	fb92 f3f1 	sdiv	r3, r2, r1
   d61c6:	fb01 2313 	mls	r3, r1, r3, r2
   d61ca:	011b      	lsls	r3, r3, #4
   d61cc:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d61ce:	fb01 0012 	mls	r0, r1, r2, r0
   d61d2:	4318      	orrs	r0, r3
}
   d61d4:	b2c0      	uxtb	r0, r0
   d61d6:	4770      	bx	lr

000d61d8 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d61d8:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d61da:	b510      	push	{r4, lr}
   d61dc:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d61de:	fb91 f0f3 	sdiv	r0, r1, r3
   d61e2:	fb00 1013 	mls	r0, r0, r3, r1
   d61e6:	f7ff ffe9 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
   d61ea:	72a0      	strb	r0, [r4, #10]
}
   d61ec:	bd10      	pop	{r4, pc}

000d61ee <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d61ee:	b510      	push	{r4, lr}
   d61f0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d61f2:	4608      	mov	r0, r1
   d61f4:	f7ff ffe2 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
   d61f8:	72e0      	strb	r0, [r4, #11]
}
   d61fa:	bd10      	pop	{r4, pc}

000d61fc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d61fc:	b510      	push	{r4, lr}
   d61fe:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6200:	4608      	mov	r0, r1
   d6202:	f7ff ffdb 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6206:	7b23      	ldrb	r3, [r4, #12]
   d6208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d620c:	4318      	orrs	r0, r3
   d620e:	7320      	strb	r0, [r4, #12]
}
   d6210:	bd10      	pop	{r4, pc}

000d6212 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6212:	b510      	push	{r4, lr}
   d6214:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6216:	1c48      	adds	r0, r1, #1
   d6218:	f7ff ffd0 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d621c:	7b63      	ldrb	r3, [r4, #13]
   d621e:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6222:	4318      	orrs	r0, r3
   d6224:	7360      	strb	r0, [r4, #13]
}
   d6226:	bd10      	pop	{r4, pc}

000d6228 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6228:	b510      	push	{r4, lr}
   d622a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d622c:	4608      	mov	r0, r1
   d622e:	f7ff ffc5 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
   d6232:	73a0      	strb	r0, [r4, #14]
}
   d6234:	bd10      	pop	{r4, pc}

000d6236 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6236:	b510      	push	{r4, lr}
   d6238:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d623a:	4608      	mov	r0, r1
   d623c:	f7ff ffbe 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
   d6240:	73e0      	strb	r0, [r4, #15]
}
   d6242:	bd10      	pop	{r4, pc}

000d6244 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6244:	b510      	push	{r4, lr}
   d6246:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6248:	4608      	mov	r0, r1
   d624a:	f7ff ffb7 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d624e:	7c23      	ldrb	r3, [r4, #16]
   d6250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6254:	4318      	orrs	r0, r3
   d6256:	7420      	strb	r0, [r4, #16]
}
   d6258:	bd10      	pop	{r4, pc}

000d625a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d625a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d625c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d625e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6260:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6264:	f003 faaa 	bl	d97bc <gmtime>
   d6268:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d626a:	6941      	ldr	r1, [r0, #20]
   d626c:	4620      	mov	r0, r4
   d626e:	f7ff ffb3 	bl	d61d8 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6272:	6929      	ldr	r1, [r5, #16]
   d6274:	4620      	mov	r0, r4
   d6276:	3101      	adds	r1, #1
   d6278:	f7ff ffb9 	bl	d61ee <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d627c:	68e9      	ldr	r1, [r5, #12]
   d627e:	4620      	mov	r0, r4
   d6280:	f7ff ffbc 	bl	d61fc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6284:	69a9      	ldr	r1, [r5, #24]
   d6286:	4620      	mov	r0, r4
   d6288:	f7ff ffc3 	bl	d6212 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d628c:	68a9      	ldr	r1, [r5, #8]
   d628e:	4620      	mov	r0, r4
   d6290:	f7ff ffca 	bl	d6228 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6294:	6869      	ldr	r1, [r5, #4]
   d6296:	4620      	mov	r0, r4
   d6298:	f7ff ffcd 	bl	d6236 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d629c:	6829      	ldr	r1, [r5, #0]
   d629e:	293b      	cmp	r1, #59	; 0x3b
   d62a0:	bfa8      	it	ge
   d62a2:	213b      	movge	r1, #59	; 0x3b
   d62a4:	4620      	mov	r0, r4
   d62a6:	f7ff ffcd 	bl	d6244 <_ZN12MCP79410Time9setSecondEi>
}
   d62aa:	b003      	add	sp, #12
   d62ac:	bd30      	pop	{r4, r5, pc}
	...

000d62b0 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d62b0:	4a05      	ldr	r2, [pc, #20]	; (d62c8 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d62b2:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d62b4:	e9c0 2100 	strd	r2, r1, [r0]
   d62b8:	4a04      	ldr	r2, [pc, #16]	; (d62cc <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d62ba:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d62bc:	4a04      	ldr	r2, [pc, #16]	; (d62d0 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d62be:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d62c0:	4a04      	ldr	r2, [pc, #16]	; (d62d4 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d62c2:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d62c4:	6142      	str	r2, [r0, #20]
}
   d62c6:	4770      	bx	lr
   d62c8:	000dc048 	.word	0x000dc048
   d62cc:	03010000 	.word	0x03010000
   d62d0:	000dbff0 	.word	0x000dbff0
   d62d4:	000dc024 	.word	0x000dc024

000d62d8 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d62d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62dc:	4604      	mov	r4, r0
   d62de:	460f      	mov	r7, r1
   d62e0:	4690      	mov	r8, r2
   d62e2:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d62e4:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d62e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d62e8:	429e      	cmp	r6, r3
   d62ea:	d231      	bcs.n	d6350 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d62ec:	6860      	ldr	r0, [r4, #4]
   d62ee:	4639      	mov	r1, r7
   d62f0:	f001 fd23 	bl	d7d3a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d62f4:	eb08 0106 	add.w	r1, r8, r6
   d62f8:	6860      	ldr	r0, [r4, #4]
   d62fa:	f7ff fd47 	bl	d5d8c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d62fe:	6860      	ldr	r0, [r4, #4]
   d6300:	2100      	movs	r1, #0
   d6302:	f001 fd21 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6306:	4605      	mov	r5, r0
   d6308:	b9d0      	cbnz	r0, d6340 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d630c:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d630e:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6310:	2a20      	cmp	r2, #32
   d6312:	f04f 0301 	mov.w	r3, #1
   d6316:	bf28      	it	cs
   d6318:	2220      	movcs	r2, #32
   d631a:	4639      	mov	r1, r7
   d631c:	f001 fcfb 	bl	d7d16 <_ZN7TwoWire11requestFromEhjh>
   d6320:	eb09 0b06 	add.w	fp, r9, r6
   d6324:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6326:	eb0b 0a00 	add.w	sl, fp, r0
   d632a:	45da      	cmp	sl, fp
   d632c:	d006      	beq.n	d633c <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d632e:	6860      	ldr	r0, [r4, #4]
   d6330:	6803      	ldr	r3, [r0, #0]
   d6332:	695b      	ldr	r3, [r3, #20]
   d6334:	4798      	blx	r3
   d6336:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d633a:	e7f6      	b.n	d632a <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d633c:	442e      	add	r6, r5
	while(offset < bufLen) {
   d633e:	e7d2      	b.n	d62e6 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6340:	4602      	mov	r2, r0
   d6342:	4904      	ldr	r1, [pc, #16]	; (d6354 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6344:	4804      	ldr	r0, [pc, #16]	; (d6358 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6346:	f7ff fd25 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d634a:	4628      	mov	r0, r5
   d634c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6350:	2500      	movs	r5, #0
	return stat;
   d6352:	e7fa      	b.n	d634a <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6354:	000dbf48 	.word	0x000dbf48
   d6358:	2003e5d8 	.word	0x2003e5d8

000d635c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d635c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6360:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6364:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6366:	6803      	ldr	r3, [r0, #0]
   d6368:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d636a:	4605      	mov	r5, r0
   d636c:	460c      	mov	r4, r1
   d636e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6370:	4798      	blx	r3
   d6372:	4580      	cmp	r8, r0
   d6374:	d80d      	bhi.n	d6392 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6376:	3420      	adds	r4, #32
   d6378:	6868      	ldr	r0, [r5, #4]
   d637a:	9600      	str	r6, [sp, #0]
   d637c:	463b      	mov	r3, r7
   d637e:	b2e2      	uxtb	r2, r4
   d6380:	216f      	movs	r1, #111	; 0x6f
   d6382:	f7ff ffa9 	bl	d62d8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6386:	fab0 f080 	clz	r0, r0
   d638a:	0940      	lsrs	r0, r0, #5
}
   d638c:	b002      	add	sp, #8
   d638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6392:	2000      	movs	r0, #0
   d6394:	e7fa      	b.n	d638c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6396 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6396:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d639a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d639e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d63a0:	6803      	ldr	r3, [r0, #0]
   d63a2:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63a4:	4604      	mov	r4, r0
   d63a6:	460d      	mov	r5, r1
   d63a8:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d63aa:	4798      	blx	r3
   d63ac:	4580      	cmp	r8, r0
   d63ae:	d80c      	bhi.n	d63ca <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d63b0:	6860      	ldr	r0, [r4, #4]
   d63b2:	9600      	str	r6, [sp, #0]
   d63b4:	463b      	mov	r3, r7
   d63b6:	b2ea      	uxtb	r2, r5
   d63b8:	2157      	movs	r1, #87	; 0x57
   d63ba:	f7ff ff8d 	bl	d62d8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d63be:	fab0 f080 	clz	r0, r0
   d63c2:	0940      	lsrs	r0, r0, #5
}
   d63c4:	b002      	add	sp, #8
   d63c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d63ca:	2000      	movs	r0, #0
   d63cc:	e7fa      	b.n	d63c4 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d63ce <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d63ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d63d0:	1e1e      	subs	r6, r3, #0
   d63d2:	bf0c      	ite	eq
   d63d4:	2307      	moveq	r3, #7
   d63d6:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d63d8:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d63da:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d63dc:	ab02      	add	r3, sp, #8
   d63de:	460a      	mov	r2, r1
   d63e0:	216f      	movs	r1, #111	; 0x6f
   d63e2:	f7ff ff79 	bl	d62d8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d63e6:	4605      	mov	r5, r0
   d63e8:	b9a8      	cbnz	r0, d6416 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d63ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d63ee:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d63f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d63f4:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d63f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d63fa:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d63fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6400:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6402:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6406:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6408:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d640c:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d640e:	b92e      	cbnz	r6, d641c <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6410:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6414:	72a3      	strb	r3, [r4, #10]
}
   d6416:	4628      	mov	r0, r5
   d6418:	b004      	add	sp, #16
   d641a:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d641c:	f002 f8e4 	bl	d85e8 <_ZN9TimeClass4yearEv>
   d6420:	f7ff fecc 	bl	d61bc <_ZN12MCP79410Time8intToBcdEi>
   d6424:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6426:	e7f6      	b.n	d6416 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6428 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d642a:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d642c:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d642e:	9300      	str	r3, [sp, #0]
   d6430:	216f      	movs	r1, #111	; 0x6f
   d6432:	ab03      	add	r3, sp, #12
   d6434:	f7ff ff50 	bl	d62d8 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6438:	b920      	cbnz	r0, d6444 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d643a:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d643e:	b005      	add	sp, #20
   d6440:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6444:	2000      	movs	r0, #0
   d6446:	e7fa      	b.n	d643e <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6448 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6448:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d644a:	2103      	movs	r1, #3
   d644c:	f7ff ffec 	bl	d6428 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6450:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6454:	bd08      	pop	{r3, pc}

000d6456 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6456:	b538      	push	{r3, r4, r5, lr}
   d6458:	2300      	movs	r3, #0
   d645a:	460c      	mov	r4, r1
   d645c:	460a      	mov	r2, r1
   d645e:	4619      	mov	r1, r3
   d6460:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6462:	f7ff ffb4 	bl	d63ce <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6466:	b930      	cbnz	r0, d6476 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6468:	7aa3      	ldrb	r3, [r4, #10]
   d646a:	b123      	cbz	r3, d6476 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d646c:	4628      	mov	r0, r5
}
   d646e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6472:	f7ff bfe9 	b.w	d6448 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6476:	2000      	movs	r0, #0
   d6478:	bd38      	pop	{r3, r4, r5, pc}

000d647a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d647a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d647c:	4602      	mov	r2, r0
	MCP79410Time time;
   d647e:	a801      	add	r0, sp, #4
   d6480:	f7ff fe28 	bl	d60d4 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6484:	a901      	add	r1, sp, #4
   d6486:	4610      	mov	r0, r2
   d6488:	f7ff ffe5 	bl	d6456 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d648c:	b128      	cbz	r0, d649a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d648e:	a801      	add	r0, sp, #4
   d6490:	f7ff fe6c 	bl	d616c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6494:	b007      	add	sp, #28
   d6496:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d649a:	2000      	movs	r0, #0
   d649c:	4601      	mov	r1, r0
   d649e:	e7f9      	b.n	d6494 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d64a0 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d64a0:	b5d0      	push	{r4, r6, r7, lr}
   d64a2:	4604      	mov	r4, r0
   d64a4:	b086      	sub	sp, #24
	wire.begin();
   d64a6:	6840      	ldr	r0, [r0, #4]
   d64a8:	f001 fc18 	bl	d7cdc <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d64ac:	f002 f862 	bl	d8574 <_ZN9TimeClass7isValidEv>
   d64b0:	b9e8      	cbnz	r0, d64ee <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d64b2:	7ae3      	ldrb	r3, [r4, #11]
   d64b4:	079b      	lsls	r3, r3, #30
   d64b6:	d51a      	bpl.n	d64ee <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d64b8:	4620      	mov	r0, r4
   d64ba:	f7ff ffde 	bl	d647a <_ZNK8MCP7941010getRTCTimeEv>
   d64be:	4606      	mov	r6, r0
   d64c0:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d64c2:	ea56 0307 	orrs.w	r3, r6, r7
   d64c6:	d012      	beq.n	d64ee <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d64c8:	f001 ff5b 	bl	d8382 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d64cc:	4b0a      	ldr	r3, [pc, #40]	; (d64f8 <_ZN8MCP794105setupEv+0x58>)
   d64ce:	490b      	ldr	r1, [pc, #44]	; (d64fc <_ZN8MCP794105setupEv+0x5c>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	9300      	str	r3, [sp, #0]
   d64d4:	4632      	mov	r2, r6
   d64d6:	463b      	mov	r3, r7
   d64d8:	a802      	add	r0, sp, #8
   d64da:	f002 f809 	bl	d84f0 <_ZN9TimeClass6formatExPKc>
   d64de:	4808      	ldr	r0, [pc, #32]	; (d6500 <_ZN8MCP794105setupEv+0x60>)
   d64e0:	9a02      	ldr	r2, [sp, #8]
   d64e2:	4908      	ldr	r1, [pc, #32]	; (d6504 <_ZN8MCP794105setupEv+0x64>)
   d64e4:	f7ff fc56 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
   d64e8:	a802      	add	r0, sp, #8
   d64ea:	f001 fe0b 	bl	d8104 <_ZN6StringD1Ev>
	setupDone = true;
   d64ee:	2301      	movs	r3, #1
   d64f0:	7223      	strb	r3, [r4, #8]
}
   d64f2:	b006      	add	sp, #24
   d64f4:	bdd0      	pop	{r4, r6, r7, pc}
   d64f6:	bf00      	nop
   d64f8:	2003d818 	.word	0x2003d818
   d64fc:	2003e648 	.word	0x2003e648
   d6500:	2003e5d8 	.word	0x2003e5d8
   d6504:	000dbf62 	.word	0x000dbf62

000d6508 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d650c:	4606      	mov	r6, r0
   d650e:	4688      	mov	r8, r1
   d6510:	4691      	mov	r9, r2
   d6512:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6514:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6518:	429d      	cmp	r5, r3
   d651a:	d229      	bcs.n	d6570 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d651c:	6870      	ldr	r0, [r6, #4]
   d651e:	4641      	mov	r1, r8
   d6520:	f001 fc0b 	bl	d7d3a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6524:	6870      	ldr	r0, [r6, #4]
   d6526:	eb09 0105 	add.w	r1, r9, r5
   d652a:	f7ff fc2f 	bl	d5d8c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d652e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6530:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6532:	2f1f      	cmp	r7, #31
   d6534:	bf28      	it	cs
   d6536:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6538:	eb0a 0405 	add.w	r4, sl, r5
   d653c:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6540:	6870      	ldr	r0, [r6, #4]
   d6542:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6546:	6802      	ldr	r2, [r0, #0]
   d6548:	6892      	ldr	r2, [r2, #8]
   d654a:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d654c:	45a3      	cmp	fp, r4
   d654e:	d1f7      	bne.n	d6540 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6550:	6870      	ldr	r0, [r6, #4]
   d6552:	2101      	movs	r1, #1
   d6554:	f001 fbf8 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6558:	4604      	mov	r4, r0
   d655a:	b138      	cbz	r0, d656c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d655c:	4602      	mov	r2, r0
   d655e:	4905      	ldr	r1, [pc, #20]	; (d6574 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6560:	4805      	ldr	r0, [pc, #20]	; (d6578 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6562:	f7ff fc17 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6566:	4620      	mov	r0, r4
   d6568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d656c:	443d      	add	r5, r7
	while(offset < bufLen) {
   d656e:	e7d2      	b.n	d6516 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6570:	2400      	movs	r4, #0
	return stat;
   d6572:	e7f8      	b.n	d6566 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6574:	000dbf77 	.word	0x000dbf77
   d6578:	2003e5d8 	.word	0x2003e5d8

000d657c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d657c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6580:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6584:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6586:	6803      	ldr	r3, [r0, #0]
   d6588:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d658a:	4605      	mov	r5, r0
   d658c:	460c      	mov	r4, r1
   d658e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6590:	4798      	blx	r3
   d6592:	4580      	cmp	r8, r0
   d6594:	d80d      	bhi.n	d65b2 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6596:	3420      	adds	r4, #32
   d6598:	6868      	ldr	r0, [r5, #4]
   d659a:	9600      	str	r6, [sp, #0]
   d659c:	463b      	mov	r3, r7
   d659e:	b2e2      	uxtb	r2, r4
   d65a0:	216f      	movs	r1, #111	; 0x6f
   d65a2:	f7ff ffb1 	bl	d6508 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d65a6:	fab0 f080 	clz	r0, r0
   d65aa:	0940      	lsrs	r0, r0, #5
}
   d65ac:	b002      	add	sp, #8
   d65ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d65b2:	2000      	movs	r0, #0
   d65b4:	e7fa      	b.n	d65ac <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d65b6 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d65b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d65b8:	7c13      	ldrb	r3, [r2, #16]
   d65ba:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d65be:	7bd3      	ldrb	r3, [r2, #15]
   d65c0:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d65c4:	7b93      	ldrb	r3, [r2, #14]
   d65c6:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d65ca:	7b53      	ldrb	r3, [r2, #13]
   d65cc:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d65d0:	7b13      	ldrb	r3, [r2, #12]
   d65d2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d65d6:	7ad3      	ldrb	r3, [r2, #11]
   d65d8:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d65dc:	7a93      	ldrb	r3, [r2, #10]
   d65de:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d65e2:	2307      	movs	r3, #7
   d65e4:	9300      	str	r3, [sp, #0]
   d65e6:	460a      	mov	r2, r1
   d65e8:	ab02      	add	r3, sp, #8
   d65ea:	216f      	movs	r1, #111	; 0x6f
   d65ec:	f7ff ff8c 	bl	d6508 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d65f0:	b005      	add	sp, #20
   d65f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d65f6 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d65f6:	b510      	push	{r4, lr}
   d65f8:	b088      	sub	sp, #32
   d65fa:	4604      	mov	r4, r0
	MCP79410Time time;
   d65fc:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d65fe:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6600:	f7ff fd68 	bl	d60d4 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6604:	9b01      	ldr	r3, [sp, #4]
   d6606:	a803      	add	r0, sp, #12
   d6608:	f7ff fe27 	bl	d625a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d660c:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6610:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6612:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6616:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d661a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d661e:	b16a      	cbz	r2, d663c <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6620:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6624:	aa03      	add	r2, sp, #12
   d6626:	2100      	movs	r1, #0
   d6628:	4620      	mov	r0, r4
   d662a:	f88d 3019 	strb.w	r3, [sp, #25]
   d662e:	f7ff ffc2 	bl	d65b6 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6632:	fab0 f080 	clz	r0, r0
   d6636:	0940      	lsrs	r0, r0, #5
   d6638:	b008      	add	sp, #32
   d663a:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d663c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6640:	e7f0      	b.n	d6624 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6644 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6644:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6646:	b087      	sub	sp, #28
   d6648:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d664a:	f001 ff93 	bl	d8574 <_ZN9TimeClass7isValidEv>
   d664e:	4604      	mov	r4, r0
   d6650:	b1e8      	cbz	r0, d668e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d6652:	f001 ffac 	bl	d85ae <_ZN9TimeClass3nowEv>
   d6656:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6658:	4602      	mov	r2, r0
		time_t now = Time.now();
   d665a:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d665c:	463b      	mov	r3, r7
   d665e:	4628      	mov	r0, r5
   d6660:	f7ff ffc9 	bl	d65f6 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6664:	4b0c      	ldr	r3, [pc, #48]	; (d6698 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6666:	490d      	ldr	r1, [pc, #52]	; (d669c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	9300      	str	r3, [sp, #0]
   d666c:	4632      	mov	r2, r6
   d666e:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6670:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6672:	a802      	add	r0, sp, #8
   d6674:	f001 ff3c 	bl	d84f0 <_ZN9TimeClass6formatExPKc>
   d6678:	4809      	ldr	r0, [pc, #36]	; (d66a0 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d667a:	9a02      	ldr	r2, [sp, #8]
   d667c:	4909      	ldr	r1, [pc, #36]	; (d66a4 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d667e:	f7ff fb89 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
   d6682:	a802      	add	r0, sp, #8
   d6684:	f001 fd3e 	bl	d8104 <_ZN6StringD1Ev>
}
   d6688:	4620      	mov	r0, r4
   d668a:	b007      	add	sp, #28
   d668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d668e:	4906      	ldr	r1, [pc, #24]	; (d66a8 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6690:	4803      	ldr	r0, [pc, #12]	; (d66a0 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6692:	f7ff fb7f 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
   d6696:	e7f7      	b.n	d6688 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6698:	2003d818 	.word	0x2003d818
   d669c:	2003e648 	.word	0x2003e648
   d66a0:	2003e5d8 	.word	0x2003e5d8
   d66a4:	000dbf92 	.word	0x000dbf92
   d66a8:	000dbfa8 	.word	0x000dbfa8

000d66ac <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d66ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d66ae:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d66b0:	4604      	mov	r4, r0
	if (!timeSet) {
   d66b2:	b99d      	cbnz	r5, d66dc <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d66b4:	f001 ff5e 	bl	d8574 <_ZN9TimeClass7isValidEv>
   d66b8:	b180      	cbz	r0, d66dc <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d66ba:	2200      	movs	r2, #0
   d66bc:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d66be:	4669      	mov	r1, sp
   d66c0:	4628      	mov	r0, r5
        tm = 0;
   d66c2:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d66c6:	f000 fe35 	bl	d7334 <spark_sync_time_last>
			if (lastSync != 0) {
   d66ca:	b138      	cbz	r0, d66dc <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d66cc:	7ae3      	ldrb	r3, [r4, #11]
   d66ce:	07db      	lsls	r3, r3, #31
   d66d0:	d502      	bpl.n	d66d8 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d66d2:	4620      	mov	r0, r4
   d66d4:	f7ff ffb6 	bl	d6644 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d66d8:	2301      	movs	r3, #1
   d66da:	7263      	strb	r3, [r4, #9]
}
   d66dc:	b003      	add	sp, #12
   d66de:	bd30      	pop	{r4, r5, pc}

000d66e0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d66e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d66e2:	2301      	movs	r3, #1
	buf[0] = value;
   d66e4:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d66e8:	9300      	str	r3, [sp, #0]
   d66ea:	460a      	mov	r2, r1
   d66ec:	ab03      	add	r3, sp, #12
   d66ee:	216f      	movs	r1, #111	; 0x6f
   d66f0:	f7ff ff0a 	bl	d6508 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d66f4:	b005      	add	sp, #20
   d66f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d66fa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d66fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66fc:	4604      	mov	r4, r0
   d66fe:	460d      	mov	r5, r1
   d6700:	4617      	mov	r7, r2
   d6702:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d6704:	f7ff fe90 	bl	d6428 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6708:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d670c:	4332      	orrs	r2, r6
   d670e:	4629      	mov	r1, r5
   d6710:	4620      	mov	r0, r4
}
   d6712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d6716:	f7ff bfe3 	b.w	d66e0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d671a <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d671a:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d671c:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d671e:	d80c      	bhi.n	d673a <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6720:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d6722:	f04f 0300 	mov.w	r3, #0
   d6726:	bf14      	ite	ne
   d6728:	22df      	movne	r2, #223	; 0xdf
   d672a:	22ef      	moveq	r2, #239	; 0xef
   d672c:	2107      	movs	r1, #7
   d672e:	f7ff ffe4 	bl	d66fa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d6732:	fab0 f080 	clz	r0, r0
   d6736:	0940      	lsrs	r0, r0, #5
}
   d6738:	bd08      	pop	{r3, pc}
		return false;
   d673a:	2000      	movs	r0, #0
   d673c:	e7fc      	b.n	d6738 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d673e <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d673e:	b538      	push	{r3, r4, r5, lr}
   d6740:	4604      	mov	r4, r0
   d6742:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6744:	6860      	ldr	r0, [r4, #4]
   d6746:	2157      	movs	r1, #87	; 0x57
   d6748:	f001 faf7 	bl	d7d3a <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d674c:	6860      	ldr	r0, [r4, #4]
   d674e:	2101      	movs	r1, #1
   d6750:	f001 fafa 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6754:	b108      	cbz	r0, d675a <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d6756:	3d01      	subs	r5, #1
   d6758:	d1f4      	bne.n	d6744 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d675a:	bd38      	pop	{r3, r4, r5, pc}

000d675c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6760:	4604      	mov	r4, r0
   d6762:	460f      	mov	r7, r1
   d6764:	4616      	mov	r6, r2
   d6766:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d676a:	45b0      	cmp	r8, r6
   d676c:	d020      	beq.n	d67b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d676e:	6860      	ldr	r0, [r4, #4]
   d6770:	2157      	movs	r1, #87	; 0x57
   d6772:	f001 fae2 	bl	d7d3a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6776:	4639      	mov	r1, r7
   d6778:	6860      	ldr	r0, [r4, #4]
   d677a:	f7ff fb07 	bl	d5d8c <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d677e:	6860      	ldr	r0, [r4, #4]
   d6780:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6784:	6803      	ldr	r3, [r0, #0]
   d6786:	689b      	ldr	r3, [r3, #8]
   d6788:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d678a:	6860      	ldr	r0, [r4, #4]
   d678c:	2101      	movs	r1, #1
   d678e:	f001 fadb 	bl	d7d48 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6792:	3701      	adds	r7, #1
   d6794:	4605      	mov	r5, r0
   d6796:	b138      	cbz	r0, d67a8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6798:	4602      	mov	r2, r0
   d679a:	4906      	ldr	r1, [pc, #24]	; (d67b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d679c:	4806      	ldr	r0, [pc, #24]	; (d67b8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d679e:	f7ff faf9 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
}
   d67a2:	4628      	mov	r0, r5
   d67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d67a8:	4620      	mov	r0, r4
   d67aa:	f7ff ffc8 	bl	d673e <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d67ae:	e7dc      	b.n	d676a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d67b0:	2500      	movs	r5, #0
	return stat;
   d67b2:	e7f6      	b.n	d67a2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d67b4:	000dbfbd 	.word	0x000dbfbd
   d67b8:	2003e5d8 	.word	0x2003e5d8

000d67bc <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d67be:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67c0:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d67c2:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67c4:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d67c6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67c8:	4604      	mov	r4, r0
   d67ca:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d67cc:	4798      	blx	r3
   d67ce:	4287      	cmp	r7, r0
   d67d0:	d80a      	bhi.n	d67e8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d67d2:	9a01      	ldr	r2, [sp, #4]
   d67d4:	6860      	ldr	r0, [r4, #4]
   d67d6:	4633      	mov	r3, r6
   d67d8:	b2e9      	uxtb	r1, r5
   d67da:	f7ff ffbf 	bl	d675c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d67de:	fab0 f080 	clz	r0, r0
   d67e2:	0940      	lsrs	r0, r0, #5
}
   d67e4:	b003      	add	sp, #12
   d67e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d67e8:	2000      	movs	r0, #0
   d67ea:	e7fb      	b.n	d67e4 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d67ec <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d67ec:	4b01      	ldr	r3, [pc, #4]	; (d67f4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d67ee:	4a02      	ldr	r2, [pc, #8]	; (d67f8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d67f0:	601a      	str	r2, [r3, #0]
}
   d67f2:	4770      	bx	lr
   d67f4:	2003e5d8 	.word	0x2003e5d8
   d67f8:	000dbfde 	.word	0x000dbfde

000d67fc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d67fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d67fe:	4603      	mov	r3, r0
	switch (__op)
   d6800:	d102      	bne.n	d6808 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6802:	6001      	str	r1, [r0, #0]
      }
   d6804:	2000      	movs	r0, #0
   d6806:	4770      	bx	lr
	  switch (__op)
   d6808:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d680a:	bf04      	itt	eq
   d680c:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6810:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6814:	e7f6      	b.n	d6804 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6816 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6816:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6818:	2301      	movs	r3, #1
   d681a:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d681c:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d681e:	4604      	mov	r4, r0
        if (th->func) {
   d6820:	b143      	cbz	r3, d6834 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6822:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6824:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6826:	2301      	movs	r3, #1
   d6828:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d682a:	2000      	movs	r0, #0
    }
   d682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6830:	f000 bb32 	b.w	d6e98 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6834:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6836:	2800      	cmp	r0, #0
   d6838:	d0f5      	beq.n	d6826 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d683a:	6883      	ldr	r3, [r0, #8]
   d683c:	b90b      	cbnz	r3, d6842 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d683e:	f002 f960 	bl	d8b02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6842:	68c3      	ldr	r3, [r0, #12]
   d6844:	e7ee      	b.n	d6824 <_ZN6Thread3runEPv+0xe>

000d6846 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6846:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6848:	6842      	ldr	r2, [r0, #4]
   d684a:	4603      	mov	r3, r0
   d684c:	1054      	asrs	r4, r2, #1
   d684e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6852:	07d2      	lsls	r2, r2, #31
   d6854:	bf48      	it	mi
   d6856:	590a      	ldrmi	r2, [r1, r4]
   d6858:	681b      	ldr	r3, [r3, #0]
      }
   d685a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d685e:	bf48      	it	mi
   d6860:	58d3      	ldrmi	r3, [r2, r3]
   d6862:	4718      	bx	r3

000d6864 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6864:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d6866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6868:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d686c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d686e:	3008      	adds	r0, #8
   d6870:	f000 faea 	bl	d6e48 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6874:	2004      	movs	r0, #4
   d6876:	f7fd fc0e 	bl	d4096 <_Znwj>
   d687a:	4605      	mov	r5, r0
   d687c:	b398      	cbz	r0, d68e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d687e:	491b      	ldr	r1, [pc, #108]	; (d68ec <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6880:	2014      	movs	r0, #20
   d6882:	f002 f93a 	bl	d8afa <_ZnwjRKSt9nothrow_t>
   d6886:	b130      	cbz	r0, d6896 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6888:	2300      	movs	r3, #0
            exited(false) {
   d688a:	e9c0 3300 	strd	r3, r3, [r0]
   d688e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6892:	7403      	strb	r3, [r0, #16]
   d6894:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6896:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6898:	b1a0      	cbz	r0, d68c4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d689a:	4b15      	ldr	r3, [pc, #84]	; (d68f0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d689c:	4915      	ldr	r1, [pc, #84]	; (d68f4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d689e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d68a6:	e9cd 0300 	strd	r0, r3, [sp]
   d68aa:	2202      	movs	r2, #2
   d68ac:	4b12      	ldr	r3, [pc, #72]	; (d68f8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d68ae:	3004      	adds	r0, #4
   d68b0:	f000 fa92 	bl	d6dd8 <os_thread_create>
   d68b4:	b930      	cbnz	r0, d68c4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d68b6:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d68b8:	7c1b      	ldrb	r3, [r3, #16]
   d68ba:	b9a3      	cbnz	r3, d68e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d68bc:	2001      	movs	r0, #1
   d68be:	f000 fb0b 	bl	d6ed8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d68c2:	e7f8      	b.n	d68b6 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68c4:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68c6:	2300      	movs	r3, #0
   d68c8:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d68ca:	b164      	cbz	r4, d68e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d68cc:	6827      	ldr	r7, [r4, #0]
   d68ce:	b137      	cbz	r7, d68de <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d68d0:	4638      	mov	r0, r7
   d68d2:	f7fd fce5 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d68d6:	2110      	movs	r1, #16
   d68d8:	4638      	mov	r0, r7
   d68da:	f002 f90c 	bl	d8af6 <_ZdlPvj>
   d68de:	2114      	movs	r1, #20
   d68e0:	4620      	mov	r0, r4
   d68e2:	f002 f908 	bl	d8af6 <_ZdlPvj>
   d68e6:	6075      	str	r5, [r6, #4]
}
   d68e8:	b003      	add	sp, #12
   d68ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68ec:	000dc2f8 	.word	0x000dc2f8
   d68f0:	000d6b03 	.word	0x000d6b03
   d68f4:	000dc050 	.word	0x000dc050
   d68f8:	000d6817 	.word	0x000d6817

000d68fc <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d68fc:	f247 5130 	movw	r1, #30000	; 0x7530
   d6900:	4a08      	ldr	r2, [pc, #32]	; (d6924 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d6902:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6904:	4908      	ldr	r1, [pc, #32]	; (d6928 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d6906:	6002      	str	r2, [r0, #0]
   d6908:	2200      	movs	r2, #0
   d690a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d690e:	4907      	ldr	r1, [pc, #28]	; (d692c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6910:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d6912:	4907      	ldr	r1, [pc, #28]	; (d6930 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6914:	6042      	str	r2, [r0, #4]
   d6916:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d691a:	6181      	str	r1, [r0, #24]
   d691c:	8502      	strh	r2, [r0, #40]	; 0x28
   d691e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d6922:	4770      	bx	lr
   d6924:	000dc114 	.word	0x000dc114
   d6928:	000d6c6d 	.word	0x000d6c6d
   d692c:	000d6847 	.word	0x000d6847
   d6930:	000d67fd 	.word	0x000d67fd

000d6934 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6934:	b510      	push	{r4, lr}
   d6936:	4b04      	ldr	r3, [pc, #16]	; (d6948 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6938:	4604      	mov	r4, r0
   d693a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d693e:	f7fd fcaf 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
}
   d6942:	4620      	mov	r0, r4
   d6944:	bd10      	pop	{r4, pc}
   d6946:	bf00      	nop
   d6948:	000dc114 	.word	0x000dc114

000d694c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d694c:	b510      	push	{r4, lr}
   d694e:	4b03      	ldr	r3, [pc, #12]	; (d695c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6950:	6003      	str	r3, [r0, #0]
   d6952:	4604      	mov	r4, r0
   d6954:	f7ff ffee 	bl	d6934 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6958:	4620      	mov	r0, r4
   d695a:	bd10      	pop	{r4, pc}
   d695c:	000dc13c 	.word	0x000dc13c

000d6960 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6960:	b510      	push	{r4, lr}
   d6962:	4604      	mov	r4, r0
}
   d6964:	f7ff fff2 	bl	d694c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6968:	4620      	mov	r0, r4
   d696a:	2138      	movs	r1, #56	; 0x38
   d696c:	f002 f8c3 	bl	d8af6 <_ZdlPvj>
   d6970:	4620      	mov	r0, r4
   d6972:	bd10      	pop	{r4, pc}

000d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d6974:	6880      	ldr	r0, [r0, #8]
   d6976:	f000 ba6f 	b.w	d6e58 <os_mutex_lock>

000d697a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d697a:	6880      	ldr	r0, [r0, #8]
   d697c:	f000 ba74 	b.w	d6e68 <os_mutex_unlock>

000d6980 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6980:	b510      	push	{r4, lr}
   d6982:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6984:	6800      	ldr	r0, [r0, #0]
   d6986:	f7ff fff8 	bl	d697a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d698a:	4620      	mov	r0, r4
   d698c:	bd10      	pop	{r4, pc}

000d698e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d698e:	b513      	push	{r0, r1, r4, lr}
   d6990:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6992:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6994:	f7ff ffee 	bl	d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d699a:	88dc      	ldrh	r4, [r3, #6]
   d699c:	b2a4      	uxth	r4, r4
   d699e:	b10c      	cbz	r4, d69a4 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d69a0:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d69a4:	a801      	add	r0, sp, #4
   d69a6:	f7ff ffeb 	bl	d6980 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d69aa:	4620      	mov	r0, r4
   d69ac:	b002      	add	sp, #8
   d69ae:	bd10      	pop	{r4, pc}

000d69b0 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d69b0:	b513      	push	{r0, r1, r4, lr}
   d69b2:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d69b4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d69b6:	f7ff ffdd 	bl	d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d69ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d69be:	b943      	cbnz	r3, d69d2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d69c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d69c2:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d69c4:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d69c6:	a801      	add	r0, sp, #4
   d69c8:	f7ff ffda 	bl	d6980 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d69cc:	4620      	mov	r0, r4
   d69ce:	b002      	add	sp, #8
   d69d0:	bd10      	pop	{r4, pc}
	bool result = false;
   d69d2:	2400      	movs	r4, #0
   d69d4:	e7f7      	b.n	d69c6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d69d6 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d69d6:	b513      	push	{r0, r1, r4, lr}
   d69d8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d69da:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d69dc:	f7ff ffca 	bl	d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d69e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d69e2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d69e4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d69e6:	f7ff ffcb 	bl	d6980 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d69ea:	4620      	mov	r0, r4
   d69ec:	b002      	add	sp, #8
   d69ee:	bd10      	pop	{r4, pc}

000d69f0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d69f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d69f4:	4699      	mov	r9, r3
   d69f6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d69f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d69fc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6a00:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6a04:	4604      	mov	r4, r0
   d6a06:	460f      	mov	r7, r1
   d6a08:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6a0a:	b913      	cbnz	r3, d6a12 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6a0c:	6803      	ldr	r3, [r0, #0]
   d6a0e:	689b      	ldr	r3, [r3, #8]
   d6a10:	4798      	blx	r3
		data = "";
   d6a12:	4b31      	ldr	r3, [pc, #196]	; (d6ad8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a14:	4638      	mov	r0, r7
		data = "";
   d6a16:	2e00      	cmp	r6, #0
   d6a18:	bf08      	it	eq
   d6a1a:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a1c:	f002 ff63 	bl	d98e6 <strlen>
   d6a20:	4605      	mov	r5, r0
   d6a22:	4630      	mov	r0, r6
   d6a24:	f002 ff5f 	bl	d98e6 <strlen>
   d6a28:	4428      	add	r0, r5
   d6a2a:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6a2e:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6a30:	bf1c      	itt	ne
   d6a32:	f025 0503 	bicne.w	r5, r5, #3
   d6a36:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6a38:	4633      	mov	r3, r6
   d6a3a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d6a3e:	e9cd 9a00 	strd	r9, sl, [sp]
   d6a42:	4926      	ldr	r1, [pc, #152]	; (d6adc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6a44:	4826      	ldr	r0, [pc, #152]	; (d6ae0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6a46:	463a      	mov	r2, r7
   d6a48:	f7ff f9a4 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6a4c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6a4e:	3b08      	subs	r3, #8
   d6a50:	42ab      	cmp	r3, r5
   d6a52:	d212      	bcs.n	d6a7a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d6a54:	2400      	movs	r4, #0
}
   d6a56:	4620      	mov	r0, r4
   d6a58:	b006      	add	sp, #24
   d6a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d6a5e:	88cb      	ldrh	r3, [r1, #6]
   d6a60:	2b01      	cmp	r3, #1
   d6a62:	d036      	beq.n	d6ad2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d6a64:	a805      	add	r0, sp, #20
   d6a66:	f7ff ff8b 	bl	d6980 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d6a6a:	6823      	ldr	r3, [r4, #0]
   d6a6c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6a70:	699b      	ldr	r3, [r3, #24]
   d6a72:	4620      	mov	r0, r4
   d6a74:	4798      	blx	r3
   d6a76:	2800      	cmp	r0, #0
   d6a78:	d0ec      	beq.n	d6a54 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6a7a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6a7c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6a7e:	f7ff ff79 	bl	d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6a82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6a84:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d6a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6a88:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6a8a:	1ad2      	subs	r2, r2, r3
   d6a8c:	42aa      	cmp	r2, r5
   d6a8e:	d3e6      	bcc.n	d6a5e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6a90:	ea48 080a 	orr.w	r8, r8, sl
   d6a94:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6a98:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6a9e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d6aa2:	4639      	mov	r1, r7
   d6aa4:	4640      	mov	r0, r8
   d6aa6:	f002 fef9 	bl	d989c <strcpy>
				cp += strlen(cp) + 1;
   d6aaa:	4640      	mov	r0, r8
   d6aac:	f002 ff1b 	bl	d98e6 <strlen>
   d6ab0:	3001      	adds	r0, #1
				strcpy(cp, data);
   d6ab2:	4631      	mov	r1, r6
   d6ab4:	4440      	add	r0, r8
   d6ab6:	f002 fef1 	bl	d989c <strcpy>
				nextFree += size;
   d6aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6abe:	441d      	add	r5, r3
   d6ac0:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d6ac2:	88d3      	ldrh	r3, [r2, #6]
   d6ac4:	3301      	adds	r3, #1
   d6ac6:	80d3      	strh	r3, [r2, #6]
				return true;
   d6ac8:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6aca:	a805      	add	r0, sp, #20
   d6acc:	f7ff ff58 	bl	d6980 <_ZN11StMutexLockD1Ev>
   d6ad0:	e7c1      	b.n	d6a56 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d6ad2:	2400      	movs	r4, #0
   d6ad4:	e7f9      	b.n	d6aca <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d6ad6:	bf00      	nop
   d6ad8:	000dc320 	.word	0x000dc320
   d6adc:	000dc062 	.word	0x000dc062
   d6ae0:	2003e5dc 	.word	0x2003e5dc

000d6ae4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ae8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6aec:	69a3      	ldr	r3, [r4, #24]
   d6aee:	b90b      	cbnz	r3, d6af4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6af0:	f002 f807 	bl	d8b02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6af4:	69e3      	ldr	r3, [r4, #28]
   d6af6:	4621      	mov	r1, r4
   d6af8:	4628      	mov	r0, r5
   d6afa:	4798      	blx	r3
		os_thread_yield();
   d6afc:	f000 f974 	bl	d6de8 <os_thread_yield>
	while(true) {
   d6b00:	e7f4      	b.n	d6aec <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6b02 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6b02:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6b04:	f7ff ffee 	bl	d6ae4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6b08 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b08:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d6b0a:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b0e:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b10:	4628      	mov	r0, r5
   d6b12:	f002 fee8 	bl	d98e6 <strlen>
   d6b16:	3001      	adds	r0, #1
   d6b18:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b1a:	4628      	mov	r0, r5
   d6b1c:	f002 fee3 	bl	d98e6 <strlen>
	size_t offset = start - retainedBuffer;
   d6b20:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b22:	3001      	adds	r0, #1
   d6b24:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d6b26:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d6b28:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6b2c:	bf1c      	itt	ne
   d6b2e:	f1c3 0304 	rsbne	r3, r3, #4
   d6b32:	18c0      	addne	r0, r0, r3
}
   d6b34:	bd68      	pop	{r3, r5, r6, pc}

000d6b36 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6b38:	4604      	mov	r4, r0
   d6b3a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6b3c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6b3e:	f7ff ff19 	bl	d6974 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6b42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6b44:	88fb      	ldrh	r3, [r7, #6]
   d6b46:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d6b4a:	b1e6      	cbz	r6, d6b86 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d6b4c:	2b01      	cmp	r3, #1
   d6b4e:	d922      	bls.n	d6b96 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d6b50:	4629      	mov	r1, r5
   d6b52:	4620      	mov	r0, r4
   d6b54:	f7ff ffd8 	bl	d6b08 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6b58:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d6b5a:	4629      	mov	r1, r5
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	f7ff ffd3 	bl	d6b08 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6b62:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d6b64:	443a      	add	r2, r7
	if (after > 0) {
   d6b66:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d6b68:	4601      	mov	r1, r0
	size_t len = next - start;
   d6b6a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d6b6e:	d002      	beq.n	d6b76 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d6b70:	4628      	mov	r0, r5
   d6b72:	f002 fe43 	bl	d97fc <memmove>
	nextFree -= len;
   d6b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6b78:	1b9b      	subs	r3, r3, r6
   d6b7a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d6b7c:	88fb      	ldrh	r3, [r7, #6]
   d6b7e:	3b01      	subs	r3, #1
   d6b80:	80fb      	strh	r3, [r7, #6]
	return true;
   d6b82:	2601      	movs	r6, #1
   d6b84:	e001      	b.n	d6b8a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d6b86:	2b00      	cmp	r3, #0
   d6b88:	d1e7      	bne.n	d6b5a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d6b8a:	a801      	add	r0, sp, #4
   d6b8c:	f7ff fef8 	bl	d6980 <_ZN11StMutexLockD1Ev>
}
   d6b90:	4630      	mov	r0, r6
   d6b92:	b003      	add	sp, #12
   d6b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d6b96:	2600      	movs	r6, #0
   d6b98:	e7f7      	b.n	d6b8a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6b9c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ba0:	460d      	mov	r5, r1
   d6ba2:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6ba4:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6ba6:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6ba8:	f7ff fea8 	bl	d68fc <_ZN21PublishQueueAsyncBaseC1Ev>
   d6bac:	4b15      	ldr	r3, [pc, #84]	; (d6c04 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bae:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6bb2:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bb4:	4b14      	ldr	r3, [pc, #80]	; (d6c08 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6bb6:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bb8:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6bba:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bbc:	4698      	mov	r8, r3
   d6bbe:	d117      	bne.n	d6bf0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6bc0:	88ab      	ldrh	r3, [r5, #4]
   d6bc2:	b29b      	uxth	r3, r3
   d6bc4:	42b3      	cmp	r3, r6
   d6bc6:	d113      	bne.n	d6bf0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6bc8:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6bcc:	6367      	str	r7, [r4, #52]	; 0x34
   d6bce:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6bd2:	88eb      	ldrh	r3, [r5, #6]
   d6bd4:	fa1f f289 	uxth.w	r2, r9
   d6bd8:	b29b      	uxth	r3, r3
   d6bda:	429a      	cmp	r2, r3
   d6bdc:	d20e      	bcs.n	d6bfc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6be0:	4620      	mov	r0, r4
   d6be2:	f7ff ff91 	bl	d6b08 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6be6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6be8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6bea:	f109 0901 	add.w	r9, r9, #1
   d6bee:	d9f0      	bls.n	d6bd2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6bf0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6bf2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6bf6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6bf8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6bfa:	80eb      	strh	r3, [r5, #6]
}
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c02:	bf00      	nop
   d6c04:	000dc13c 	.word	0x000dc13c
   d6c08:	d19cab61 	.word	0xd19cab61

000d6c0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6c0c:	b510      	push	{r4, lr}
   d6c0e:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6c12:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6c14:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6c16:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6c18:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6c1a:	b90a      	cbnz	r2, d6c20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6c1c:	07d9      	lsls	r1, r3, #31
   d6c1e:	d505      	bpl.n	d6c2c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6c24:	4b0f      	ldr	r3, [pc, #60]	; (d6c64 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6c26:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6c28:	4b0f      	ldr	r3, [pc, #60]	; (d6c68 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6c2a:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c2c:	ab02      	add	r3, sp, #8
   d6c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c32:	466a      	mov	r2, sp
   d6c34:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c38:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6c3c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6c40:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c44:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c46:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c4a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c4c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c4e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6c50:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6c52:	4618      	mov	r0, r3
   d6c54:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c56:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6c58:	9105      	str	r1, [sp, #20]
   d6c5a:	f7fd fb21 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	}
   d6c5e:	4620      	mov	r0, r4
   d6c60:	b006      	add	sp, #24
   d6c62:	bd10      	pop	{r4, pc}
   d6c64:	000d6847 	.word	0x000d6847
   d6c68:	000d67fd 	.word	0x000d67fd

000d6c6c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d6c6c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6c6e:	4b05      	ldr	r3, [pc, #20]	; (d6c84 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6c70:	9300      	str	r3, [sp, #0]
   d6c72:	4669      	mov	r1, sp
   d6c74:	2300      	movs	r3, #0
   d6c76:	3010      	adds	r0, #16
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	f7ff ffc7 	bl	d6c0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6c7e:	b003      	add	sp, #12
   d6c80:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c84:	000d6cb5 	.word	0x000d6cb5

000d6c88 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6c88:	b513      	push	{r0, r1, r4, lr}
   d6c8a:	4604      	mov	r4, r0
   d6c8c:	f000 f934 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6c92:	1ac0      	subs	r0, r0, r3
   d6c94:	68e3      	ldr	r3, [r4, #12]
   d6c96:	4298      	cmp	r0, r3
   d6c98:	d308      	bcc.n	d6cac <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6c9a:	4b05      	ldr	r3, [pc, #20]	; (d6cb0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6c9c:	9300      	str	r3, [sp, #0]
   d6c9e:	4669      	mov	r1, sp
   d6ca0:	2300      	movs	r3, #0
   d6ca2:	f104 0010 	add.w	r0, r4, #16
   d6ca6:	9301      	str	r3, [sp, #4]
   d6ca8:	f7ff ffb0 	bl	d6c0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6cac:	b002      	add	sp, #8
   d6cae:	bd10      	pop	{r4, pc}
   d6cb0:	000d6cb5 	.word	0x000d6cb5

000d6cb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d6cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6cb8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6cbc:	b086      	sub	sp, #24
   d6cbe:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6cc0:	2b00      	cmp	r3, #0
   d6cc2:	d164      	bne.n	d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6cc4:	f000 fb06 	bl	d72d4 <spark_cloud_flag_connected>
   d6cc8:	2800      	cmp	r0, #0
   d6cca:	d060      	beq.n	d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6ccc:	f000 f914 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
   d6cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6cd2:	1ac0      	subs	r0, r0, r3
   d6cd4:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6cd8:	4298      	cmp	r0, r3
   d6cda:	d958      	bls.n	d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6cdc:	6823      	ldr	r3, [r4, #0]
   d6cde:	4620      	mov	r0, r4
   d6ce0:	695b      	ldr	r3, [r3, #20]
   d6ce2:	4798      	blx	r3
		if (data) {
   d6ce4:	4605      	mov	r5, r0
   d6ce6:	2800      	cmp	r0, #0
   d6ce8:	d051      	beq.n	d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6cea:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6cee:	2301      	movs	r3, #1
   d6cf0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d6cf4:	4638      	mov	r0, r7
   d6cf6:	f002 fdf6 	bl	d98e6 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6cfa:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6cfe:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d6d02:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d04:	682b      	ldr	r3, [r5, #0]
   d6d06:	492b      	ldr	r1, [pc, #172]	; (d6db4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6d08:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6d0a:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d0c:	4633      	mov	r3, r6
   d6d0e:	482a      	ldr	r0, [pc, #168]	; (d6db8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d10:	463a      	mov	r2, r7
   d6d12:	f7ff f83f 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6d16:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6d18:	f88d 8000 	strb.w	r8, [sp]
   d6d1c:	4632      	mov	r2, r6
   d6d1e:	4639      	mov	r1, r7
   d6d20:	a802      	add	r0, sp, #8
   d6d22:	f000 fde9 	bl	d78f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6d26:	9d02      	ldr	r5, [sp, #8]
   d6d28:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d6d2a:	b91b      	cbnz	r3, d6d34 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6d2c:	2001      	movs	r0, #1
   d6d2e:	f000 fbe1 	bl	d74f4 <delay>
			while(!request.isDone()) {
   d6d32:	e7f8      	b.n	d6d26 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d34:	2000      	movs	r0, #0
   d6d36:	f000 fa6f 	bl	d7218 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d3a:	b120      	cbz	r0, d6d46 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6d3c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6d3e:	b913      	cbnz	r3, d6d46 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d6d40:	f000 fab8 	bl	d72b4 <spark_process>
    }
   d6d44:	e7fa      	b.n	d6d3c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6d46:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d6d48:	2b01      	cmp	r3, #1
   d6d4a:	d123      	bne.n	d6d94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d6d4c:	491b      	ldr	r1, [pc, #108]	; (d6dbc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6d4e:	481a      	ldr	r0, [pc, #104]	; (d6db8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d50:	f7ff f820 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6d54:	6823      	ldr	r3, [r4, #0]
   d6d56:	2100      	movs	r1, #0
   d6d58:	699b      	ldr	r3, [r3, #24]
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	4798      	blx	r3
			isSending = false;
   d6d5e:	2300      	movs	r3, #0
   d6d60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6d64:	f000 f8c8 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6d68:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d6d6a:	9c03      	ldr	r4, [sp, #12]
   d6d6c:	b17c      	cbz	r4, d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d6d6e:	6863      	ldr	r3, [r4, #4]
   d6d70:	3b01      	subs	r3, #1
   d6d72:	6063      	str	r3, [r4, #4]
   d6d74:	b95b      	cbnz	r3, d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d6d76:	6823      	ldr	r3, [r4, #0]
   d6d78:	4620      	mov	r0, r4
   d6d7a:	689b      	ldr	r3, [r3, #8]
   d6d7c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d7e:	68a3      	ldr	r3, [r4, #8]
   d6d80:	3b01      	subs	r3, #1
   d6d82:	60a3      	str	r3, [r4, #8]
   d6d84:	b91b      	cbnz	r3, d6d8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6d86:	6823      	ldr	r3, [r4, #0]
   d6d88:	4620      	mov	r0, r4
   d6d8a:	68db      	ldr	r3, [r3, #12]
   d6d8c:	4798      	blx	r3
}
   d6d8e:	b006      	add	sp, #24
   d6d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6d94:	68e2      	ldr	r2, [r4, #12]
   d6d96:	490a      	ldr	r1, [pc, #40]	; (d6dc0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6d98:	4807      	ldr	r0, [pc, #28]	; (d6db8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d9a:	f7fe fffb 	bl	d5d94 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6d9e:	4b09      	ldr	r3, [pc, #36]	; (d6dc4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6da0:	9304      	str	r3, [sp, #16]
   d6da2:	a904      	add	r1, sp, #16
   d6da4:	2300      	movs	r3, #0
   d6da6:	f104 0010 	add.w	r0, r4, #16
   d6daa:	9305      	str	r3, [sp, #20]
   d6dac:	f7ff ff2e 	bl	d6c0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6db0:	e7d5      	b.n	d6d5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6db2:	bf00      	nop
   d6db4:	000dc0a3 	.word	0x000dc0a3
   d6db8:	2003e5dc 	.word	0x2003e5dc
   d6dbc:	000dc0c4 	.word	0x000dc0c4
   d6dc0:	000dc0db 	.word	0x000dc0db
   d6dc4:	000d6c89 	.word	0x000d6c89

000d6dc8 <_GLOBAL__sub_I_pubqLogger>:
   d6dc8:	4b01      	ldr	r3, [pc, #4]	; (d6dd0 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6dca:	4a02      	ldr	r2, [pc, #8]	; (d6dd4 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6dcc:	601a      	str	r2, [r3, #0]
}
   d6dce:	4770      	bx	lr
   d6dd0:	2003e5dc 	.word	0x2003e5dc
   d6dd4:	000dc102 	.word	0x000dc102

000d6dd8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <os_thread_create+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	685b      	ldr	r3, [r3, #4]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030248 	.word	0x00030248

000d6de8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <os_thread_yield+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	68db      	ldr	r3, [r3, #12]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030248 	.word	0x00030248

000d6df8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <os_thread_scheduling+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	69db      	ldr	r3, [r3, #28]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030248 	.word	0x00030248

000d6e08 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <os_timer_create+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6a1b      	ldr	r3, [r3, #32]
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030248 	.word	0x00030248

000d6e18 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <os_timer_destroy+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030248 	.word	0x00030248

000d6e28 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <os_timer_get_id+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030248 	.word	0x00030248

000d6e38 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <os_timer_change+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030248 	.word	0x00030248

000d6e48 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <os_mutex_create+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030248 	.word	0x00030248

000d6e58 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <os_mutex_lock+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030248 	.word	0x00030248

000d6e68 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <os_mutex_unlock+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030248 	.word	0x00030248

000d6e78 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <os_mutex_recursive_create+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030248 	.word	0x00030248

000d6e88 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <os_mutex_recursive_destroy+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030248 	.word	0x00030248

000d6e98 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <os_thread_exit+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030248 	.word	0x00030248

000d6ea8 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <os_timer_set_id+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030248 	.word	0x00030248

000d6eb8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <HAL_Feature_Set+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030234 	.word	0x00030234

000d6ec8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <HAL_RNG_GetRandomNumber+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	685b      	ldr	r3, [r3, #4]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	00030218 	.word	0x00030218

000d6ed8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <HAL_Delay_Milliseconds+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	689b      	ldr	r3, [r3, #8]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	00030218 	.word	0x00030218

000d6ee8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <HAL_Delay_Microseconds+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	68db      	ldr	r3, [r3, #12]
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	00030218 	.word	0x00030218

000d6ef8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	695b      	ldr	r3, [r3, #20]
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	00030218 	.word	0x00030218

000d6f08 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <hal_rtc_time_is_valid+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	00030218 	.word	0x00030218

000d6f18 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <hal_timer_millis+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	00030218 	.word	0x00030218

000d6f28 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <hal_rtc_get_time+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	00030218 	.word	0x00030218

000d6f38 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	4b02      	ldr	r3, [pc, #8]	; (d6f44 <hal_rtc_set_time+0xc>)
   d6f3c:	681b      	ldr	r3, [r3, #0]
   d6f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6f40:	9301      	str	r3, [sp, #4]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	00030218 	.word	0x00030218

000d6f48 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6f48:	b508      	push	{r3, lr}
   d6f4a:	4b02      	ldr	r3, [pc, #8]	; (d6f54 <HAL_Validate_Pin_Function+0xc>)
   d6f4c:	681b      	ldr	r3, [r3, #0]
   d6f4e:	685b      	ldr	r3, [r3, #4]
   d6f50:	9301      	str	r3, [sp, #4]
   d6f52:	bd08      	pop	{r3, pc}
   d6f54:	0003022c 	.word	0x0003022c

000d6f58 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <HAL_Pin_Mode+0xc>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	689b      	ldr	r3, [r3, #8]
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	bd08      	pop	{r3, pc}
   d6f64:	0003022c 	.word	0x0003022c

000d6f68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6f68:	b508      	push	{r3, lr}
   d6f6a:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <HAL_Get_Pin_Mode+0xc>)
   d6f6c:	681b      	ldr	r3, [r3, #0]
   d6f6e:	68db      	ldr	r3, [r3, #12]
   d6f70:	9301      	str	r3, [sp, #4]
   d6f72:	bd08      	pop	{r3, pc}
   d6f74:	0003022c 	.word	0x0003022c

000d6f78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6f78:	b508      	push	{r3, lr}
   d6f7a:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <HAL_GPIO_Write+0xc>)
   d6f7c:	681b      	ldr	r3, [r3, #0]
   d6f7e:	691b      	ldr	r3, [r3, #16]
   d6f80:	9301      	str	r3, [sp, #4]
   d6f82:	bd08      	pop	{r3, pc}
   d6f84:	0003022c 	.word	0x0003022c

000d6f88 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6f88:	b508      	push	{r3, lr}
   d6f8a:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <HAL_Interrupts_Attach+0xc>)
   d6f8c:	681b      	ldr	r3, [r3, #0]
   d6f8e:	699b      	ldr	r3, [r3, #24]
   d6f90:	9301      	str	r3, [sp, #4]
   d6f92:	bd08      	pop	{r3, pc}
   d6f94:	0003022c 	.word	0x0003022c

000d6f98 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6f98:	b508      	push	{r3, lr}
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <HAL_Interrupts_Detach+0xc>)
   d6f9c:	681b      	ldr	r3, [r3, #0]
   d6f9e:	69db      	ldr	r3, [r3, #28]
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	bd08      	pop	{r3, pc}
   d6fa4:	0003022c 	.word	0x0003022c

000d6fa8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6fa8:	b508      	push	{r3, lr}
   d6faa:	4b02      	ldr	r3, [pc, #8]	; (d6fb4 <hal_adc_read+0xc>)
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb0:	9301      	str	r3, [sp, #4]
   d6fb2:	bd08      	pop	{r3, pc}
   d6fb4:	0003022c 	.word	0x0003022c

000d6fb8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6fb8:	b508      	push	{r3, lr}
   d6fba:	4b02      	ldr	r3, [pc, #8]	; (d6fc4 <hal_i2c_begin+0xc>)
   d6fbc:	681b      	ldr	r3, [r3, #0]
   d6fbe:	68db      	ldr	r3, [r3, #12]
   d6fc0:	9301      	str	r3, [sp, #4]
   d6fc2:	bd08      	pop	{r3, pc}
   d6fc4:	00030228 	.word	0x00030228

000d6fc8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6fc8:	b508      	push	{r3, lr}
   d6fca:	4b02      	ldr	r3, [pc, #8]	; (d6fd4 <hal_i2c_begin_transmission+0xc>)
   d6fcc:	681b      	ldr	r3, [r3, #0]
   d6fce:	699b      	ldr	r3, [r3, #24]
   d6fd0:	9301      	str	r3, [sp, #4]
   d6fd2:	bd08      	pop	{r3, pc}
   d6fd4:	00030228 	.word	0x00030228

000d6fd8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6fd8:	b508      	push	{r3, lr}
   d6fda:	4b02      	ldr	r3, [pc, #8]	; (d6fe4 <hal_i2c_end_transmission+0xc>)
   d6fdc:	681b      	ldr	r3, [r3, #0]
   d6fde:	69db      	ldr	r3, [r3, #28]
   d6fe0:	9301      	str	r3, [sp, #4]
   d6fe2:	bd08      	pop	{r3, pc}
   d6fe4:	00030228 	.word	0x00030228

000d6fe8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6fe8:	b508      	push	{r3, lr}
   d6fea:	4b02      	ldr	r3, [pc, #8]	; (d6ff4 <hal_i2c_write+0xc>)
   d6fec:	681b      	ldr	r3, [r3, #0]
   d6fee:	6a1b      	ldr	r3, [r3, #32]
   d6ff0:	9301      	str	r3, [sp, #4]
   d6ff2:	bd08      	pop	{r3, pc}
   d6ff4:	00030228 	.word	0x00030228

000d6ff8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6ff8:	b508      	push	{r3, lr}
   d6ffa:	4b02      	ldr	r3, [pc, #8]	; (d7004 <hal_i2c_available+0xc>)
   d6ffc:	681b      	ldr	r3, [r3, #0]
   d6ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7000:	9301      	str	r3, [sp, #4]
   d7002:	bd08      	pop	{r3, pc}
   d7004:	00030228 	.word	0x00030228

000d7008 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7008:	b508      	push	{r3, lr}
   d700a:	4b02      	ldr	r3, [pc, #8]	; (d7014 <hal_i2c_read+0xc>)
   d700c:	681b      	ldr	r3, [r3, #0]
   d700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7010:	9301      	str	r3, [sp, #4]
   d7012:	bd08      	pop	{r3, pc}
   d7014:	00030228 	.word	0x00030228

000d7018 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7018:	b508      	push	{r3, lr}
   d701a:	4b02      	ldr	r3, [pc, #8]	; (d7024 <hal_i2c_peek+0xc>)
   d701c:	681b      	ldr	r3, [r3, #0]
   d701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7020:	9301      	str	r3, [sp, #4]
   d7022:	bd08      	pop	{r3, pc}
   d7024:	00030228 	.word	0x00030228

000d7028 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7028:	b508      	push	{r3, lr}
   d702a:	4b02      	ldr	r3, [pc, #8]	; (d7034 <hal_i2c_flush+0xc>)
   d702c:	681b      	ldr	r3, [r3, #0]
   d702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7030:	9301      	str	r3, [sp, #4]
   d7032:	bd08      	pop	{r3, pc}
   d7034:	00030228 	.word	0x00030228

000d7038 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7038:	b508      	push	{r3, lr}
   d703a:	4b02      	ldr	r3, [pc, #8]	; (d7044 <hal_i2c_is_enabled+0xc>)
   d703c:	681b      	ldr	r3, [r3, #0]
   d703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7040:	9301      	str	r3, [sp, #4]
   d7042:	bd08      	pop	{r3, pc}
   d7044:	00030228 	.word	0x00030228

000d7048 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7048:	b508      	push	{r3, lr}
   d704a:	4b02      	ldr	r3, [pc, #8]	; (d7054 <hal_i2c_init+0xc>)
   d704c:	681b      	ldr	r3, [r3, #0]
   d704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7050:	9301      	str	r3, [sp, #4]
   d7052:	bd08      	pop	{r3, pc}
   d7054:	00030228 	.word	0x00030228

000d7058 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7058:	b508      	push	{r3, lr}
   d705a:	4b02      	ldr	r3, [pc, #8]	; (d7064 <hal_i2c_lock+0xc>)
   d705c:	681b      	ldr	r3, [r3, #0]
   d705e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7060:	9301      	str	r3, [sp, #4]
   d7062:	bd08      	pop	{r3, pc}
   d7064:	00030228 	.word	0x00030228

000d7068 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7068:	b508      	push	{r3, lr}
   d706a:	4b02      	ldr	r3, [pc, #8]	; (d7074 <hal_i2c_unlock+0xc>)
   d706c:	681b      	ldr	r3, [r3, #0]
   d706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7070:	9301      	str	r3, [sp, #4]
   d7072:	bd08      	pop	{r3, pc}
   d7074:	00030228 	.word	0x00030228

000d7078 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7078:	b508      	push	{r3, lr}
   d707a:	4b02      	ldr	r3, [pc, #8]	; (d7084 <hal_i2c_request_ex+0xc>)
   d707c:	681b      	ldr	r3, [r3, #0]
   d707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7080:	9301      	str	r3, [sp, #4]
   d7082:	bd08      	pop	{r3, pc}
   d7084:	00030228 	.word	0x00030228

000d7088 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7088:	b508      	push	{r3, lr}
   d708a:	4b02      	ldr	r3, [pc, #8]	; (d7094 <inet_inet_ntop+0xc>)
   d708c:	681b      	ldr	r3, [r3, #0]
   d708e:	695b      	ldr	r3, [r3, #20]
   d7090:	9301      	str	r3, [sp, #4]
   d7092:	bd08      	pop	{r3, pc}
   d7094:	00030264 	.word	0x00030264

000d7098 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7098:	b508      	push	{r3, lr}
   d709a:	4b02      	ldr	r3, [pc, #8]	; (d70a4 <netdb_freeaddrinfo+0xc>)
   d709c:	681b      	ldr	r3, [r3, #0]
   d709e:	689b      	ldr	r3, [r3, #8]
   d70a0:	9301      	str	r3, [sp, #4]
   d70a2:	bd08      	pop	{r3, pc}
   d70a4:	00030268 	.word	0x00030268

000d70a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d70a8:	b508      	push	{r3, lr}
   d70aa:	4b02      	ldr	r3, [pc, #8]	; (d70b4 <netdb_getaddrinfo+0xc>)
   d70ac:	681b      	ldr	r3, [r3, #0]
   d70ae:	68db      	ldr	r3, [r3, #12]
   d70b0:	9301      	str	r3, [sp, #4]
   d70b2:	bd08      	pop	{r3, pc}
   d70b4:	00030268 	.word	0x00030268

000d70b8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d70b8:	b508      	push	{r3, lr}
   d70ba:	4b02      	ldr	r3, [pc, #8]	; (d70c4 <hal_spi_init+0xc>)
   d70bc:	681b      	ldr	r3, [r3, #0]
   d70be:	69db      	ldr	r3, [r3, #28]
   d70c0:	9301      	str	r3, [sp, #4]
   d70c2:	bd08      	pop	{r3, pc}
   d70c4:	00030230 	.word	0x00030230

000d70c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d70c8:	b508      	push	{r3, lr}
   d70ca:	4b02      	ldr	r3, [pc, #8]	; (d70d4 <hal_spi_is_enabled+0xc>)
   d70cc:	681b      	ldr	r3, [r3, #0]
   d70ce:	6a1b      	ldr	r3, [r3, #32]
   d70d0:	9301      	str	r3, [sp, #4]
   d70d2:	bd08      	pop	{r3, pc}
   d70d4:	00030230 	.word	0x00030230

000d70d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d70d8:	b508      	push	{r3, lr}
   d70da:	4b02      	ldr	r3, [pc, #8]	; (d70e4 <hal_usart_init+0xc>)
   d70dc:	681b      	ldr	r3, [r3, #0]
   d70de:	681b      	ldr	r3, [r3, #0]
   d70e0:	9301      	str	r3, [sp, #4]
   d70e2:	bd08      	pop	{r3, pc}
   d70e4:	0003023c 	.word	0x0003023c

000d70e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d70e8:	b508      	push	{r3, lr}
   d70ea:	4b02      	ldr	r3, [pc, #8]	; (d70f4 <hal_usart_write+0xc>)
   d70ec:	681b      	ldr	r3, [r3, #0]
   d70ee:	68db      	ldr	r3, [r3, #12]
   d70f0:	9301      	str	r3, [sp, #4]
   d70f2:	bd08      	pop	{r3, pc}
   d70f4:	0003023c 	.word	0x0003023c

000d70f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d70f8:	b508      	push	{r3, lr}
   d70fa:	4b02      	ldr	r3, [pc, #8]	; (d7104 <hal_usart_available+0xc>)
   d70fc:	681b      	ldr	r3, [r3, #0]
   d70fe:	691b      	ldr	r3, [r3, #16]
   d7100:	9301      	str	r3, [sp, #4]
   d7102:	bd08      	pop	{r3, pc}
   d7104:	0003023c 	.word	0x0003023c

000d7108 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7108:	b508      	push	{r3, lr}
   d710a:	4b02      	ldr	r3, [pc, #8]	; (d7114 <hal_usart_read+0xc>)
   d710c:	681b      	ldr	r3, [r3, #0]
   d710e:	695b      	ldr	r3, [r3, #20]
   d7110:	9301      	str	r3, [sp, #4]
   d7112:	bd08      	pop	{r3, pc}
   d7114:	0003023c 	.word	0x0003023c

000d7118 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7118:	b508      	push	{r3, lr}
   d711a:	4b02      	ldr	r3, [pc, #8]	; (d7124 <hal_usart_peek+0xc>)
   d711c:	681b      	ldr	r3, [r3, #0]
   d711e:	699b      	ldr	r3, [r3, #24]
   d7120:	9301      	str	r3, [sp, #4]
   d7122:	bd08      	pop	{r3, pc}
   d7124:	0003023c 	.word	0x0003023c

000d7128 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7128:	b508      	push	{r3, lr}
   d712a:	4b02      	ldr	r3, [pc, #8]	; (d7134 <hal_usart_flush+0xc>)
   d712c:	681b      	ldr	r3, [r3, #0]
   d712e:	69db      	ldr	r3, [r3, #28]
   d7130:	9301      	str	r3, [sp, #4]
   d7132:	bd08      	pop	{r3, pc}
   d7134:	0003023c 	.word	0x0003023c

000d7138 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7138:	b508      	push	{r3, lr}
   d713a:	4b02      	ldr	r3, [pc, #8]	; (d7144 <hal_usart_is_enabled+0xc>)
   d713c:	681b      	ldr	r3, [r3, #0]
   d713e:	6a1b      	ldr	r3, [r3, #32]
   d7140:	9301      	str	r3, [sp, #4]
   d7142:	bd08      	pop	{r3, pc}
   d7144:	0003023c 	.word	0x0003023c

000d7148 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7148:	b508      	push	{r3, lr}
   d714a:	4b02      	ldr	r3, [pc, #8]	; (d7154 <hal_usart_available_data_for_write+0xc>)
   d714c:	681b      	ldr	r3, [r3, #0]
   d714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7150:	9301      	str	r3, [sp, #4]
   d7152:	bd08      	pop	{r3, pc}
   d7154:	0003023c 	.word	0x0003023c

000d7158 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7158:	b508      	push	{r3, lr}
   d715a:	4b02      	ldr	r3, [pc, #8]	; (d7164 <HAL_USB_USART_Init+0xc>)
   d715c:	681b      	ldr	r3, [r3, #0]
   d715e:	681b      	ldr	r3, [r3, #0]
   d7160:	9301      	str	r3, [sp, #4]
   d7162:	bd08      	pop	{r3, pc}
   d7164:	0003024c 	.word	0x0003024c

000d7168 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7168:	b508      	push	{r3, lr}
   d716a:	4b02      	ldr	r3, [pc, #8]	; (d7174 <HAL_USB_USART_Available_Data+0xc>)
   d716c:	681b      	ldr	r3, [r3, #0]
   d716e:	691b      	ldr	r3, [r3, #16]
   d7170:	9301      	str	r3, [sp, #4]
   d7172:	bd08      	pop	{r3, pc}
   d7174:	0003024c 	.word	0x0003024c

000d7178 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7178:	b508      	push	{r3, lr}
   d717a:	4b02      	ldr	r3, [pc, #8]	; (d7184 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d717c:	681b      	ldr	r3, [r3, #0]
   d717e:	695b      	ldr	r3, [r3, #20]
   d7180:	9301      	str	r3, [sp, #4]
   d7182:	bd08      	pop	{r3, pc}
   d7184:	0003024c 	.word	0x0003024c

000d7188 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7188:	b508      	push	{r3, lr}
   d718a:	4b02      	ldr	r3, [pc, #8]	; (d7194 <HAL_USB_USART_Receive_Data+0xc>)
   d718c:	681b      	ldr	r3, [r3, #0]
   d718e:	699b      	ldr	r3, [r3, #24]
   d7190:	9301      	str	r3, [sp, #4]
   d7192:	bd08      	pop	{r3, pc}
   d7194:	0003024c 	.word	0x0003024c

000d7198 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7198:	b508      	push	{r3, lr}
   d719a:	4b02      	ldr	r3, [pc, #8]	; (d71a4 <HAL_USB_USART_Send_Data+0xc>)
   d719c:	681b      	ldr	r3, [r3, #0]
   d719e:	69db      	ldr	r3, [r3, #28]
   d71a0:	9301      	str	r3, [sp, #4]
   d71a2:	bd08      	pop	{r3, pc}
   d71a4:	0003024c 	.word	0x0003024c

000d71a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d71a8:	b508      	push	{r3, lr}
   d71aa:	4b02      	ldr	r3, [pc, #8]	; (d71b4 <HAL_USB_USART_Flush_Data+0xc>)
   d71ac:	681b      	ldr	r3, [r3, #0]
   d71ae:	6a1b      	ldr	r3, [r3, #32]
   d71b0:	9301      	str	r3, [sp, #4]
   d71b2:	bd08      	pop	{r3, pc}
   d71b4:	0003024c 	.word	0x0003024c

000d71b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d71b8:	b508      	push	{r3, lr}
   d71ba:	4b02      	ldr	r3, [pc, #8]	; (d71c4 <panic_+0xc>)
   d71bc:	681b      	ldr	r3, [r3, #0]
   d71be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71c0:	9301      	str	r3, [sp, #4]
   d71c2:	bd08      	pop	{r3, pc}
   d71c4:	00030260 	.word	0x00030260

000d71c8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d71c8:	b508      	push	{r3, lr}
   d71ca:	4b02      	ldr	r3, [pc, #8]	; (d71d4 <log_message_v+0xc>)
   d71cc:	681b      	ldr	r3, [r3, #0]
   d71ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d71d0:	9301      	str	r3, [sp, #4]
   d71d2:	bd08      	pop	{r3, pc}
   d71d4:	00030260 	.word	0x00030260

000d71d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d71d8:	b508      	push	{r3, lr}
   d71da:	4b02      	ldr	r3, [pc, #8]	; (d71e4 <system_mode+0xc>)
   d71dc:	681b      	ldr	r3, [r3, #0]
   d71de:	681b      	ldr	r3, [r3, #0]
   d71e0:	9301      	str	r3, [sp, #4]
   d71e2:	bd08      	pop	{r3, pc}
   d71e4:	00030220 	.word	0x00030220

000d71e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d71e8:	b508      	push	{r3, lr}
   d71ea:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <set_system_mode+0xc>)
   d71ec:	681b      	ldr	r3, [r3, #0]
   d71ee:	685b      	ldr	r3, [r3, #4]
   d71f0:	9301      	str	r3, [sp, #4]
   d71f2:	bd08      	pop	{r3, pc}
   d71f4:	00030220 	.word	0x00030220

000d71f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d71f8:	b508      	push	{r3, lr}
   d71fa:	4b02      	ldr	r3, [pc, #8]	; (d7204 <system_delay_ms+0xc>)
   d71fc:	681b      	ldr	r3, [r3, #0]
   d71fe:	695b      	ldr	r3, [r3, #20]
   d7200:	9301      	str	r3, [sp, #4]
   d7202:	bd08      	pop	{r3, pc}
   d7204:	00030220 	.word	0x00030220

000d7208 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7208:	b508      	push	{r3, lr}
   d720a:	4b02      	ldr	r3, [pc, #8]	; (d7214 <system_thread_set_state+0xc>)
   d720c:	681b      	ldr	r3, [r3, #0]
   d720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7210:	9301      	str	r3, [sp, #4]
   d7212:	bd08      	pop	{r3, pc}
   d7214:	00030220 	.word	0x00030220

000d7218 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7218:	b508      	push	{r3, lr}
   d721a:	4b02      	ldr	r3, [pc, #8]	; (d7224 <application_thread_current+0xc>)
   d721c:	681b      	ldr	r3, [r3, #0]
   d721e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7220:	9301      	str	r3, [sp, #4]
   d7222:	bd08      	pop	{r3, pc}
   d7224:	00030220 	.word	0x00030220

000d7228 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7228:	b508      	push	{r3, lr}
   d722a:	4b02      	ldr	r3, [pc, #8]	; (d7234 <application_thread_invoke+0xc>)
   d722c:	681b      	ldr	r3, [r3, #0]
   d722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7230:	9301      	str	r3, [sp, #4]
   d7232:	bd08      	pop	{r3, pc}
   d7234:	00030220 	.word	0x00030220

000d7238 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7238:	b508      	push	{r3, lr}
   d723a:	4b02      	ldr	r3, [pc, #8]	; (d7244 <system_thread_get_state+0xc>)
   d723c:	681b      	ldr	r3, [r3, #0]
   d723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7240:	9301      	str	r3, [sp, #4]
   d7242:	bd08      	pop	{r3, pc}
   d7244:	00030220 	.word	0x00030220

000d7248 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7248:	b508      	push	{r3, lr}
   d724a:	4b02      	ldr	r3, [pc, #8]	; (d7254 <system_notify_time_changed+0xc>)
   d724c:	681b      	ldr	r3, [r3, #0]
   d724e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7250:	9301      	str	r3, [sp, #4]
   d7252:	bd08      	pop	{r3, pc}
   d7254:	00030220 	.word	0x00030220

000d7258 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7258:	b508      	push	{r3, lr}
   d725a:	4b03      	ldr	r3, [pc, #12]	; (d7268 <system_ctrl_set_app_request_handler+0x10>)
   d725c:	681b      	ldr	r3, [r3, #0]
   d725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7262:	9301      	str	r3, [sp, #4]
   d7264:	bd08      	pop	{r3, pc}
   d7266:	0000      	.short	0x0000
   d7268:	00030220 	.word	0x00030220

000d726c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b03      	ldr	r3, [pc, #12]	; (d727c <system_ctrl_set_result+0x10>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7276:	9301      	str	r3, [sp, #4]
   d7278:	bd08      	pop	{r3, pc}
   d727a:	0000      	.short	0x0000
   d727c:	00030220 	.word	0x00030220

000d7280 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d7280:	b508      	push	{r3, lr}
   d7282:	4b03      	ldr	r3, [pc, #12]	; (d7290 <system_reset+0x10>)
   d7284:	681b      	ldr	r3, [r3, #0]
   d7286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d728a:	9301      	str	r3, [sp, #4]
   d728c:	bd08      	pop	{r3, pc}
   d728e:	0000      	.short	0x0000
   d7290:	00030220 	.word	0x00030220

000d7294 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <spark_variable+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	681b      	ldr	r3, [r3, #0]
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	00030244 	.word	0x00030244

000d72a4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <spark_function+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	685b      	ldr	r3, [r3, #4]
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	00030244 	.word	0x00030244

000d72b4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <spark_process+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	689b      	ldr	r3, [r3, #8]
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	00030244 	.word	0x00030244

000d72c4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d72c4:	b508      	push	{r3, lr}
   d72c6:	4b02      	ldr	r3, [pc, #8]	; (d72d0 <spark_cloud_flag_connect+0xc>)
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	68db      	ldr	r3, [r3, #12]
   d72cc:	9301      	str	r3, [sp, #4]
   d72ce:	bd08      	pop	{r3, pc}
   d72d0:	00030244 	.word	0x00030244

000d72d4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d72d4:	b508      	push	{r3, lr}
   d72d6:	4b02      	ldr	r3, [pc, #8]	; (d72e0 <spark_cloud_flag_connected+0xc>)
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	695b      	ldr	r3, [r3, #20]
   d72dc:	9301      	str	r3, [sp, #4]
   d72de:	bd08      	pop	{r3, pc}
   d72e0:	00030244 	.word	0x00030244

000d72e4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d72e4:	b508      	push	{r3, lr}
   d72e6:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <spark_deviceID+0xc>)
   d72e8:	681b      	ldr	r3, [r3, #0]
   d72ea:	69db      	ldr	r3, [r3, #28]
   d72ec:	9301      	str	r3, [sp, #4]
   d72ee:	bd08      	pop	{r3, pc}
   d72f0:	00030244 	.word	0x00030244

000d72f4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d72f4:	b508      	push	{r3, lr}
   d72f6:	4b02      	ldr	r3, [pc, #8]	; (d7300 <spark_send_event+0xc>)
   d72f8:	681b      	ldr	r3, [r3, #0]
   d72fa:	6a1b      	ldr	r3, [r3, #32]
   d72fc:	9301      	str	r3, [sp, #4]
   d72fe:	bd08      	pop	{r3, pc}
   d7300:	00030244 	.word	0x00030244

000d7304 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7304:	b508      	push	{r3, lr}
   d7306:	4b02      	ldr	r3, [pc, #8]	; (d7310 <spark_subscribe+0xc>)
   d7308:	681b      	ldr	r3, [r3, #0]
   d730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d730c:	9301      	str	r3, [sp, #4]
   d730e:	bd08      	pop	{r3, pc}
   d7310:	00030244 	.word	0x00030244

000d7314 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7314:	b508      	push	{r3, lr}
   d7316:	4b02      	ldr	r3, [pc, #8]	; (d7320 <spark_sync_time+0xc>)
   d7318:	681b      	ldr	r3, [r3, #0]
   d731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d731c:	9301      	str	r3, [sp, #4]
   d731e:	bd08      	pop	{r3, pc}
   d7320:	00030244 	.word	0x00030244

000d7324 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7324:	b508      	push	{r3, lr}
   d7326:	4b02      	ldr	r3, [pc, #8]	; (d7330 <spark_sync_time_pending+0xc>)
   d7328:	681b      	ldr	r3, [r3, #0]
   d732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d732c:	9301      	str	r3, [sp, #4]
   d732e:	bd08      	pop	{r3, pc}
   d7330:	00030244 	.word	0x00030244

000d7334 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7334:	b508      	push	{r3, lr}
   d7336:	4b02      	ldr	r3, [pc, #8]	; (d7340 <spark_sync_time_last+0xc>)
   d7338:	681b      	ldr	r3, [r3, #0]
   d733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d733c:	9301      	str	r3, [sp, #4]
   d733e:	bd08      	pop	{r3, pc}
   d7340:	00030244 	.word	0x00030244

000d7344 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d7344:	b508      	push	{r3, lr}
   d7346:	4b02      	ldr	r3, [pc, #8]	; (d7350 <spark_set_connection_property+0xc>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d734c:	9301      	str	r3, [sp, #4]
   d734e:	bd08      	pop	{r3, pc}
   d7350:	00030244 	.word	0x00030244

000d7354 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7354:	b508      	push	{r3, lr}
   d7356:	4b02      	ldr	r3, [pc, #8]	; (d7360 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7358:	681b      	ldr	r3, [r3, #0]
   d735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d735c:	9301      	str	r3, [sp, #4]
   d735e:	bd08      	pop	{r3, pc}
   d7360:	00030244 	.word	0x00030244

000d7364 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7364:	b508      	push	{r3, lr}
   d7366:	4b02      	ldr	r3, [pc, #8]	; (d7370 <network_connect+0xc>)
   d7368:	681b      	ldr	r3, [r3, #0]
   d736a:	685b      	ldr	r3, [r3, #4]
   d736c:	9301      	str	r3, [sp, #4]
   d736e:	bd08      	pop	{r3, pc}
   d7370:	00030240 	.word	0x00030240

000d7374 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7374:	b508      	push	{r3, lr}
   d7376:	4b02      	ldr	r3, [pc, #8]	; (d7380 <network_connecting+0xc>)
   d7378:	681b      	ldr	r3, [r3, #0]
   d737a:	689b      	ldr	r3, [r3, #8]
   d737c:	9301      	str	r3, [sp, #4]
   d737e:	bd08      	pop	{r3, pc}
   d7380:	00030240 	.word	0x00030240

000d7384 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7384:	b508      	push	{r3, lr}
   d7386:	4b02      	ldr	r3, [pc, #8]	; (d7390 <network_disconnect+0xc>)
   d7388:	681b      	ldr	r3, [r3, #0]
   d738a:	68db      	ldr	r3, [r3, #12]
   d738c:	9301      	str	r3, [sp, #4]
   d738e:	bd08      	pop	{r3, pc}
   d7390:	00030240 	.word	0x00030240

000d7394 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7394:	b508      	push	{r3, lr}
   d7396:	4b02      	ldr	r3, [pc, #8]	; (d73a0 <network_ready+0xc>)
   d7398:	681b      	ldr	r3, [r3, #0]
   d739a:	691b      	ldr	r3, [r3, #16]
   d739c:	9301      	str	r3, [sp, #4]
   d739e:	bd08      	pop	{r3, pc}
   d73a0:	00030240 	.word	0x00030240

000d73a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d73a4:	b508      	push	{r3, lr}
   d73a6:	4b02      	ldr	r3, [pc, #8]	; (d73b0 <network_on+0xc>)
   d73a8:	681b      	ldr	r3, [r3, #0]
   d73aa:	695b      	ldr	r3, [r3, #20]
   d73ac:	9301      	str	r3, [sp, #4]
   d73ae:	bd08      	pop	{r3, pc}
   d73b0:	00030240 	.word	0x00030240

000d73b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d73b4:	b508      	push	{r3, lr}
   d73b6:	4b02      	ldr	r3, [pc, #8]	; (d73c0 <network_off+0xc>)
   d73b8:	681b      	ldr	r3, [r3, #0]
   d73ba:	699b      	ldr	r3, [r3, #24]
   d73bc:	9301      	str	r3, [sp, #4]
   d73be:	bd08      	pop	{r3, pc}
   d73c0:	00030240 	.word	0x00030240

000d73c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d73c4:	b508      	push	{r3, lr}
   d73c6:	4b02      	ldr	r3, [pc, #8]	; (d73d0 <network_listen+0xc>)
   d73c8:	681b      	ldr	r3, [r3, #0]
   d73ca:	69db      	ldr	r3, [r3, #28]
   d73cc:	9301      	str	r3, [sp, #4]
   d73ce:	bd08      	pop	{r3, pc}
   d73d0:	00030240 	.word	0x00030240

000d73d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d73d4:	b508      	push	{r3, lr}
   d73d6:	4b02      	ldr	r3, [pc, #8]	; (d73e0 <network_listening+0xc>)
   d73d8:	681b      	ldr	r3, [r3, #0]
   d73da:	6a1b      	ldr	r3, [r3, #32]
   d73dc:	9301      	str	r3, [sp, #4]
   d73de:	bd08      	pop	{r3, pc}
   d73e0:	00030240 	.word	0x00030240

000d73e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d73e4:	b508      	push	{r3, lr}
   d73e6:	4b02      	ldr	r3, [pc, #8]	; (d73f0 <network_set_listen_timeout+0xc>)
   d73e8:	681b      	ldr	r3, [r3, #0]
   d73ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73ec:	9301      	str	r3, [sp, #4]
   d73ee:	bd08      	pop	{r3, pc}
   d73f0:	00030240 	.word	0x00030240

000d73f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d73f4:	b508      	push	{r3, lr}
   d73f6:	4b02      	ldr	r3, [pc, #8]	; (d7400 <network_get_listen_timeout+0xc>)
   d73f8:	681b      	ldr	r3, [r3, #0]
   d73fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d73fc:	9301      	str	r3, [sp, #4]
   d73fe:	bd08      	pop	{r3, pc}
   d7400:	00030240 	.word	0x00030240

000d7404 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7404:	b508      	push	{r3, lr}
   d7406:	4b02      	ldr	r3, [pc, #8]	; (d7410 <network_is_on+0xc>)
   d7408:	681b      	ldr	r3, [r3, #0]
   d740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d740c:	9301      	str	r3, [sp, #4]
   d740e:	bd08      	pop	{r3, pc}
   d7410:	00030240 	.word	0x00030240

000d7414 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7414:	b508      	push	{r3, lr}
   d7416:	4b02      	ldr	r3, [pc, #8]	; (d7420 <network_is_off+0xc>)
   d7418:	681b      	ldr	r3, [r3, #0]
   d741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d741c:	9301      	str	r3, [sp, #4]
   d741e:	bd08      	pop	{r3, pc}
   d7420:	00030240 	.word	0x00030240

000d7424 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7424:	b508      	push	{r3, lr}
   d7426:	4b02      	ldr	r3, [pc, #8]	; (d7430 <malloc+0xc>)
   d7428:	681b      	ldr	r3, [r3, #0]
   d742a:	681b      	ldr	r3, [r3, #0]
   d742c:	9301      	str	r3, [sp, #4]
   d742e:	bd08      	pop	{r3, pc}
   d7430:	0003021c 	.word	0x0003021c

000d7434 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7434:	b508      	push	{r3, lr}
   d7436:	4b02      	ldr	r3, [pc, #8]	; (d7440 <free+0xc>)
   d7438:	681b      	ldr	r3, [r3, #0]
   d743a:	685b      	ldr	r3, [r3, #4]
   d743c:	9301      	str	r3, [sp, #4]
   d743e:	bd08      	pop	{r3, pc}
   d7440:	0003021c 	.word	0x0003021c

000d7444 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7444:	b508      	push	{r3, lr}
   d7446:	4b02      	ldr	r3, [pc, #8]	; (d7450 <realloc+0xc>)
   d7448:	681b      	ldr	r3, [r3, #0]
   d744a:	689b      	ldr	r3, [r3, #8]
   d744c:	9301      	str	r3, [sp, #4]
   d744e:	bd08      	pop	{r3, pc}
   d7450:	0003021c 	.word	0x0003021c

000d7454 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7454:	b508      	push	{r3, lr}
   d7456:	4b02      	ldr	r3, [pc, #8]	; (d7460 <siprintf+0xc>)
   d7458:	681b      	ldr	r3, [r3, #0]
   d745a:	691b      	ldr	r3, [r3, #16]
   d745c:	9301      	str	r3, [sp, #4]
   d745e:	bd08      	pop	{r3, pc}
   d7460:	0003021c 	.word	0x0003021c

000d7464 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7464:	b508      	push	{r3, lr}
   d7466:	4b02      	ldr	r3, [pc, #8]	; (d7470 <snprintf+0xc>)
   d7468:	681b      	ldr	r3, [r3, #0]
   d746a:	69db      	ldr	r3, [r3, #28]
   d746c:	9301      	str	r3, [sp, #4]
   d746e:	bd08      	pop	{r3, pc}
   d7470:	0003021c 	.word	0x0003021c

000d7474 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7474:	b508      	push	{r3, lr}
   d7476:	4b02      	ldr	r3, [pc, #8]	; (d7480 <abort+0xc>)
   d7478:	681b      	ldr	r3, [r3, #0]
   d747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d747c:	9301      	str	r3, [sp, #4]
   d747e:	bd08      	pop	{r3, pc}
   d7480:	0003021c 	.word	0x0003021c

000d7484 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7484:	b508      	push	{r3, lr}
   d7486:	4b02      	ldr	r3, [pc, #8]	; (d7490 <_malloc_r+0xc>)
   d7488:	681b      	ldr	r3, [r3, #0]
   d748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d748c:	9301      	str	r3, [sp, #4]
   d748e:	bd08      	pop	{r3, pc}
   d7490:	0003021c 	.word	0x0003021c

000d7494 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7494:	b508      	push	{r3, lr}
   d7496:	4b02      	ldr	r3, [pc, #8]	; (d74a0 <__errno+0xc>)
   d7498:	681b      	ldr	r3, [r3, #0]
   d749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d749c:	9301      	str	r3, [sp, #4]
   d749e:	bd08      	pop	{r3, pc}
   d74a0:	0003021c 	.word	0x0003021c

000d74a4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d74a4:	b508      	push	{r3, lr}
   d74a6:	4b02      	ldr	r3, [pc, #8]	; (d74b0 <newlib_impure_ptr_callback+0xc>)
   d74a8:	681b      	ldr	r3, [r3, #0]
   d74aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d74ac:	9301      	str	r3, [sp, #4]
   d74ae:	bd08      	pop	{r3, pc}
   d74b0:	0003021c 	.word	0x0003021c

000d74b4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d74b4:	b508      	push	{r3, lr}
   d74b6:	4b02      	ldr	r3, [pc, #8]	; (d74c0 <strftime+0xc>)
   d74b8:	681b      	ldr	r3, [r3, #0]
   d74ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d74bc:	9301      	str	r3, [sp, #4]
   d74be:	bd08      	pop	{r3, pc}
   d74c0:	0003021c 	.word	0x0003021c

000d74c4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d74c4:	b508      	push	{r3, lr}
   d74c6:	4b02      	ldr	r3, [pc, #8]	; (d74d0 <localtime_r+0xc>)
   d74c8:	681b      	ldr	r3, [r3, #0]
   d74ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d74cc:	9301      	str	r3, [sp, #4]
   d74ce:	bd08      	pop	{r3, pc}
   d74d0:	0003021c 	.word	0x0003021c

000d74d4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d74d4:	b508      	push	{r3, lr}
   d74d6:	4b02      	ldr	r3, [pc, #8]	; (d74e0 <gmtime_r+0xc>)
   d74d8:	681b      	ldr	r3, [r3, #0]
   d74da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d74dc:	9301      	str	r3, [sp, #4]
   d74de:	bd08      	pop	{r3, pc}
   d74e0:	0003021c 	.word	0x0003021c

000d74e4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d74e4:	b508      	push	{r3, lr}
   d74e6:	4b02      	ldr	r3, [pc, #8]	; (d74f0 <mktime+0xc>)
   d74e8:	681b      	ldr	r3, [r3, #0]
   d74ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d74ec:	9301      	str	r3, [sp, #4]
   d74ee:	bd08      	pop	{r3, pc}
   d74f0:	0003021c 	.word	0x0003021c

000d74f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d74f4:	2100      	movs	r1, #0
   d74f6:	f7ff be7f 	b.w	d71f8 <system_delay_ms>

000d74fa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d74fa:	b510      	push	{r4, lr}
      if (_M_empty())
   d74fc:	6883      	ldr	r3, [r0, #8]
   d74fe:	4604      	mov	r4, r0
   d7500:	b90b      	cbnz	r3, d7506 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7502:	f001 fafe 	bl	d8b02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7506:	68c3      	ldr	r3, [r0, #12]
   d7508:	4798      	blx	r3
      if (_M_manager)
   d750a:	68a3      	ldr	r3, [r4, #8]
   d750c:	b11b      	cbz	r3, d7516 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d750e:	2203      	movs	r2, #3
   d7510:	4621      	mov	r1, r4
   d7512:	4620      	mov	r0, r4
   d7514:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7516:	4620      	mov	r0, r4
   d7518:	2110      	movs	r1, #16
}
   d751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d751e:	f001 baea 	b.w	d8af6 <_ZdlPvj>

000d7522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7522:	b510      	push	{r4, lr}
          _M_dispose();
   d7524:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7526:	4604      	mov	r4, r0
          _M_dispose();
   d7528:	689b      	ldr	r3, [r3, #8]
   d752a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d752c:	68a3      	ldr	r3, [r4, #8]
   d752e:	3b01      	subs	r3, #1
   d7530:	60a3      	str	r3, [r4, #8]
   d7532:	b92b      	cbnz	r3, d7540 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7534:	6823      	ldr	r3, [r4, #0]
   d7536:	4620      	mov	r0, r4
   d7538:	68db      	ldr	r3, [r3, #12]
    }
   d753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d753e:	4718      	bx	r3
    }
   d7540:	bd10      	pop	{r4, pc}

000d7542 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7542:	b510      	push	{r4, lr}
   d7544:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7546:	6800      	ldr	r0, [r0, #0]
   d7548:	b108      	cbz	r0, d754e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d754a:	f7ff fc9d 	bl	d6e88 <os_mutex_recursive_destroy>
    }
   d754e:	4620      	mov	r0, r4
   d7550:	bd10      	pop	{r4, pc}

000d7552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7552:	680b      	ldr	r3, [r1, #0]
   d7554:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7556:	b113      	cbz	r3, d755e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7558:	685a      	ldr	r2, [r3, #4]
   d755a:	3201      	adds	r2, #1
   d755c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d755e:	4770      	bx	lr

000d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7560:	b510      	push	{r4, lr}
   d7562:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7564:	6800      	ldr	r0, [r0, #0]
   d7566:	b128      	cbz	r0, d7574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7568:	6843      	ldr	r3, [r0, #4]
   d756a:	3b01      	subs	r3, #1
   d756c:	6043      	str	r3, [r0, #4]
   d756e:	b90b      	cbnz	r3, d7574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7570:	f7ff ffd7 	bl	d7522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7574:	4620      	mov	r0, r4
   d7576:	bd10      	pop	{r4, pc}

000d7578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7578:	b513      	push	{r0, r1, r4, lr}
   d757a:	460b      	mov	r3, r1
   d757c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d757e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7582:	466c      	mov	r4, sp
   d7584:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7588:	e893 0003 	ldmia.w	r3, {r0, r1}
   d758c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7590:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7594:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7598:	b002      	add	sp, #8
   d759a:	bd10      	pop	{r4, pc}

000d759c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d759c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d759e:	4c06      	ldr	r4, [pc, #24]	; (d75b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d75a0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d75a2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d75a4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d75a6:	f7ff fc67 	bl	d6e78 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d75aa:	4620      	mov	r0, r4
   d75ac:	4a03      	ldr	r2, [pc, #12]	; (d75bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d75ae:	4904      	ldr	r1, [pc, #16]	; (d75c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d75b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d75b4:	f001 ba9a 	b.w	d8aec <__aeabi_atexit>
   d75b8:	2003e5e0 	.word	0x2003e5e0
   d75bc:	2003d9f8 	.word	0x2003d9f8
   d75c0:	000d7543 	.word	0x000d7543

000d75c4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d75c4:	2200      	movs	r2, #0
   d75c6:	6840      	ldr	r0, [r0, #4]
   d75c8:	4611      	mov	r1, r2
   d75ca:	f7ff bee3 	b.w	d7394 <network_ready>

000d75ce <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d75ce:	2200      	movs	r2, #0
   d75d0:	6840      	ldr	r0, [r0, #4]
   d75d2:	4611      	mov	r1, r2
   d75d4:	f7ff befe 	b.w	d73d4 <network_listening>

000d75d8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d75d8:	2200      	movs	r2, #0
   d75da:	6840      	ldr	r0, [r0, #4]
   d75dc:	4611      	mov	r1, r2
   d75de:	f7ff bf09 	b.w	d73f4 <network_get_listen_timeout>

000d75e2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d75e2:	6840      	ldr	r0, [r0, #4]
   d75e4:	2200      	movs	r2, #0
   d75e6:	f7ff befd 	b.w	d73e4 <network_set_listen_timeout>

000d75ea <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d75ea:	6840      	ldr	r0, [r0, #4]
   d75ec:	2200      	movs	r2, #0
   d75ee:	f081 0101 	eor.w	r1, r1, #1
   d75f2:	f7ff bee7 	b.w	d73c4 <network_listen>

000d75f6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d75f6:	2300      	movs	r3, #0
   d75f8:	6840      	ldr	r0, [r0, #4]
   d75fa:	461a      	mov	r2, r3
   d75fc:	4619      	mov	r1, r3
   d75fe:	f7ff bed9 	b.w	d73b4 <network_off>

000d7602 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7602:	2300      	movs	r3, #0
   d7604:	6840      	ldr	r0, [r0, #4]
   d7606:	461a      	mov	r2, r3
   d7608:	4619      	mov	r1, r3
   d760a:	f7ff becb 	b.w	d73a4 <network_on>

000d760e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d760e:	2200      	movs	r2, #0
   d7610:	6840      	ldr	r0, [r0, #4]
   d7612:	4611      	mov	r1, r2
   d7614:	f7ff beae 	b.w	d7374 <network_connecting>

000d7618 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7618:	6840      	ldr	r0, [r0, #4]
   d761a:	2200      	movs	r2, #0
   d761c:	2102      	movs	r1, #2
   d761e:	f7ff beb1 	b.w	d7384 <network_disconnect>

000d7622 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7622:	2300      	movs	r3, #0
   d7624:	6840      	ldr	r0, [r0, #4]
   d7626:	461a      	mov	r2, r3
   d7628:	f7ff be9c 	b.w	d7364 <network_connect>

000d762c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d762c:	4b08      	ldr	r3, [pc, #32]	; (d7650 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d762e:	b510      	push	{r4, lr}
   d7630:	2428      	movs	r4, #40	; 0x28
   d7632:	4622      	mov	r2, r4
   d7634:	4618      	mov	r0, r3
   d7636:	2100      	movs	r1, #0
   d7638:	f002 f8fa 	bl	d9830 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d763c:	4b05      	ldr	r3, [pc, #20]	; (d7654 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d763e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7644:	6042      	str	r2, [r0, #4]
   d7646:	2204      	movs	r2, #4
   d7648:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d764a:	4a03      	ldr	r2, [pc, #12]	; (d7658 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d764c:	601a      	str	r2, [r3, #0]
   d764e:	bd10      	pop	{r4, pc}
   d7650:	2003e5ec 	.word	0x2003e5ec
   d7654:	2003e5e4 	.word	0x2003e5e4
   d7658:	000dc164 	.word	0x000dc164

000d765c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d765c:	4770      	bx	lr

000d765e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d765e:	2000      	movs	r0, #0
   d7660:	4770      	bx	lr

000d7662 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7662:	b510      	push	{r4, lr}
   d7664:	2110      	movs	r1, #16
   d7666:	4604      	mov	r4, r0
   d7668:	f001 fa45 	bl	d8af6 <_ZdlPvj>
   d766c:	4620      	mov	r0, r4
   d766e:	bd10      	pop	{r4, pc}

000d7670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7670:	b508      	push	{r3, lr}
      { delete this; }
   d7672:	f7ff fff6 	bl	d7662 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7676:	bd08      	pop	{r3, pc}

000d7678 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7678:	b530      	push	{r4, r5, lr}
        type_(type) {
   d767a:	2200      	movs	r2, #0
   d767c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7680:	6002      	str	r2, [r0, #0]
   d7682:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7684:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7686:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7688:	680c      	ldr	r4, [r1, #0]
   d768a:	8085      	strh	r5, [r0, #4]
   d768c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d768e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7690:	bd30      	pop	{r4, r5, pc}

000d7692 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7692:	b510      	push	{r4, lr}
   d7694:	4604      	mov	r4, r0
    free((void*)msg_);
   d7696:	6800      	ldr	r0, [r0, #0]
   d7698:	f7ff fecc 	bl	d7434 <free>
}
   d769c:	4620      	mov	r0, r4
   d769e:	bd10      	pop	{r4, pc}

000d76a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d76a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d76a2:	68c4      	ldr	r4, [r0, #12]
   d76a4:	b1f4      	cbz	r4, d76e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d76a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d76a8:	2b02      	cmp	r3, #2
   d76aa:	d103      	bne.n	d76b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d76ac:	f104 000c 	add.w	r0, r4, #12
   d76b0:	f7ff ffef 	bl	d7692 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d76b4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d76b6:	b135      	cbz	r5, d76c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d76b8:	4628      	mov	r0, r5
   d76ba:	f7fc fdf1 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d76be:	2110      	movs	r1, #16
   d76c0:	4628      	mov	r0, r5
   d76c2:	f001 fa18 	bl	d8af6 <_ZdlPvj>
   d76c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d76c8:	b135      	cbz	r5, d76d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d76ca:	4628      	mov	r0, r5
   d76cc:	f7fc fde8 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d76d0:	2110      	movs	r1, #16
   d76d2:	4628      	mov	r0, r5
   d76d4:	f001 fa0f 	bl	d8af6 <_ZdlPvj>
   d76d8:	4620      	mov	r0, r4
   d76da:	2114      	movs	r1, #20
   d76dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d76e0:	f001 ba09 	b.w	d8af6 <_ZdlPvj>
   d76e4:	bd38      	pop	{r3, r4, r5, pc}

000d76e6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d76e6:	b510      	push	{r4, lr}
   d76e8:	b088      	sub	sp, #32
   d76ea:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d76ec:	4668      	mov	r0, sp
   d76ee:	f000 fd54 	bl	d819a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d76f2:	4669      	mov	r1, sp
   d76f4:	a804      	add	r0, sp, #16
   d76f6:	f000 fd73 	bl	d81e0 <_ZN6StringC1ERKS_>
   d76fa:	a804      	add	r0, sp, #16
   d76fc:	47a0      	blx	r4
   d76fe:	4604      	mov	r4, r0
   d7700:	a804      	add	r0, sp, #16
   d7702:	f000 fcff 	bl	d8104 <_ZN6StringD1Ev>
    String p(param);
   d7706:	4668      	mov	r0, sp
   d7708:	f000 fcfc 	bl	d8104 <_ZN6StringD1Ev>
}
   d770c:	4620      	mov	r0, r4
   d770e:	b008      	add	sp, #32
   d7710:	bd10      	pop	{r4, pc}

000d7712 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7712:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7714:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7716:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d771a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d771c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d771e:	461a      	mov	r2, r3
   d7720:	4669      	mov	r1, sp
   d7722:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7724:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7728:	f8ad 4000 	strh.w	r4, [sp]
   d772c:	f7ff fdba 	bl	d72a4 <spark_function>
}
   d7730:	b004      	add	sp, #16
   d7732:	bd10      	pop	{r4, pc}

000d7734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7734:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7736:	460e      	mov	r6, r1
   d7738:	4604      	mov	r4, r0
   d773a:	f856 3b04 	ldr.w	r3, [r6], #4
   d773e:	9300      	str	r3, [sp, #0]
   d7740:	460d      	mov	r5, r1
   d7742:	a801      	add	r0, sp, #4
   d7744:	4631      	mov	r1, r6
   d7746:	f7ff ff04 	bl	d7552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d774a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d774c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d774e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7750:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7752:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7754:	2300      	movs	r3, #0
   d7756:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7758:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d775a:	f7ff ff01 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d775e:	4630      	mov	r0, r6
   d7760:	f7ff fefe 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7764:	4628      	mov	r0, r5
   d7766:	2108      	movs	r1, #8
   d7768:	f001 f9c5 	bl	d8af6 <_ZdlPvj>
        return p;
    }
   d776c:	4620      	mov	r0, r4
   d776e:	b002      	add	sp, #8
   d7770:	bd70      	pop	{r4, r5, r6, pc}

000d7772 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7772:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7774:	b510      	push	{r4, lr}
      if (_M_empty())
   d7776:	b90a      	cbnz	r2, d777c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7778:	f001 f9c3 	bl	d8b02 <_ZSt25__throw_bad_function_callv>
    }
   d777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7780:	68c3      	ldr	r3, [r0, #12]
   d7782:	4718      	bx	r3

000d7784 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7784:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7786:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7788:	f100 0110 	add.w	r1, r0, #16
   d778c:	f7ff fff1 	bl	d7772 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7790:	bd08      	pop	{r3, pc}

000d7792 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7792:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7794:	b510      	push	{r4, lr}
      if (_M_empty())
   d7796:	b90a      	cbnz	r2, d779c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7798:	f001 f9b3 	bl	d8b02 <_ZSt25__throw_bad_function_callv>
    }
   d779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77a0:	68c3      	ldr	r3, [r0, #12]
   d77a2:	4718      	bx	r3

000d77a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d77a4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d77a6:	6800      	ldr	r0, [r0, #0]
   d77a8:	f100 0110 	add.w	r1, r0, #16
   d77ac:	f7ff fff1 	bl	d7792 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d77b0:	bd08      	pop	{r3, pc}
	...

000d77b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d77b4:	b538      	push	{r3, r4, r5, lr}
   d77b6:	2300      	movs	r3, #0
   d77b8:	4604      	mov	r4, r0
   d77ba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77bc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d77be:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77c0:	f7fc fc69 	bl	d4096 <_Znwj>
   d77c4:	b128      	cbz	r0, d77d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d77c6:	2301      	movs	r3, #1
   d77c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d77cc:	4b02      	ldr	r3, [pc, #8]	; (d77d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d77ce:	6003      	str	r3, [r0, #0]
   d77d0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77d2:	6020      	str	r0, [r4, #0]
	}
   d77d4:	4620      	mov	r0, r4
   d77d6:	bd38      	pop	{r3, r4, r5, pc}
   d77d8:	000dc1a0 	.word	0x000dc1a0

000d77dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d77dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d77de:	2300      	movs	r3, #0
   d77e0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d77e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d77e4:	4604      	mov	r4, r0
   d77e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d77e8:	b12b      	cbz	r3, d77f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d77ea:	2202      	movs	r2, #2
   d77ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d77ee:	68eb      	ldr	r3, [r5, #12]
   d77f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d77f2:	68ab      	ldr	r3, [r5, #8]
   d77f4:	60a3      	str	r3, [r4, #8]
    }
   d77f6:	4620      	mov	r0, r4
   d77f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d77fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d77fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d77fe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7800:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7802:	4668      	mov	r0, sp
   d7804:	f7ff ff38 	bl	d7678 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7808:	f04f 0302 	mov.w	r3, #2
   d780c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7810:	2a00      	cmp	r2, #0
   d7812:	d103      	bne.n	d781c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7814:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7818:	2900      	cmp	r1, #0
   d781a:	d1f7      	bne.n	d780c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d781c:	d125      	bne.n	d786a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d781e:	f104 050c 	add.w	r5, r4, #12
   d7822:	4669      	mov	r1, sp
   d7824:	4628      	mov	r0, r5
   d7826:	f7ff ff27 	bl	d7678 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d782a:	f3bf 8f5b 	dmb	ish
   d782e:	2301      	movs	r3, #1
   d7830:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7832:	2000      	movs	r0, #0
   d7834:	f104 0308 	add.w	r3, r4, #8
   d7838:	f3bf 8f5b 	dmb	ish
   d783c:	e853 6f00 	ldrex	r6, [r3]
   d7840:	e843 0200 	strex	r2, r0, [r3]
   d7844:	2a00      	cmp	r2, #0
   d7846:	d1f9      	bne.n	d783c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7848:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d784c:	b16e      	cbz	r6, d786a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d784e:	f7ff fce3 	bl	d7218 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7852:	b178      	cbz	r0, d7874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7854:	4629      	mov	r1, r5
   d7856:	4630      	mov	r0, r6
   d7858:	f7ff ff8b 	bl	d7772 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d785c:	4630      	mov	r0, r6
   d785e:	f7fc fd1f 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7862:	2110      	movs	r1, #16
   d7864:	4630      	mov	r0, r6
   d7866:	f001 f946 	bl	d8af6 <_ZdlPvj>
        p_->setError(std::move(error));
   d786a:	4668      	mov	r0, sp
   d786c:	f7ff ff11 	bl	d7692 <_ZN8particle5ErrorD1Ev>
    }
   d7870:	b009      	add	sp, #36	; 0x24
   d7872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7874:	4631      	mov	r1, r6
   d7876:	a802      	add	r0, sp, #8
   d7878:	f7ff ffb0 	bl	d77dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d787c:	68e0      	ldr	r0, [r4, #12]
   d787e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7882:	b108      	cbz	r0, d7888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7884:	f002 f812 	bl	d98ac <strdup>
        type_(type) {
   d7888:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d788a:	2010      	movs	r0, #16
   d788c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7890:	f7fc fc01 	bl	d4096 <_Znwj>
   d7894:	4605      	mov	r5, r0
   d7896:	b1e8      	cbz	r0, d78d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7898:	2700      	movs	r7, #0
   d789a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d789c:	2018      	movs	r0, #24
   d789e:	f7fc fbfa 	bl	d4096 <_Znwj>
   d78a2:	4604      	mov	r4, r0
   d78a4:	b188      	cbz	r0, d78ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d78a6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d78a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d78aa:	a802      	add	r0, sp, #8
   d78ac:	f7ff fe64 	bl	d7578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78b2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d78b8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d78ba:	a906      	add	r1, sp, #24
   d78bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78be:	60e3      	str	r3, [r4, #12]
   d78c0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d78c4:	9205      	str	r2, [sp, #20]
   d78c6:	f7ff fed7 	bl	d7678 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d78ca:	4b08      	ldr	r3, [pc, #32]	; (d78ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d78cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d78ce:	4b08      	ldr	r3, [pc, #32]	; (d78f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78d0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d78d2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d78d4:	a806      	add	r0, sp, #24
   d78d6:	f7ff fedc 	bl	d7692 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d78da:	a802      	add	r0, sp, #8
   d78dc:	f7fc fce0 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d78e0:	2200      	movs	r2, #0
   d78e2:	4629      	mov	r1, r5
   d78e4:	4803      	ldr	r0, [pc, #12]	; (d78f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d78e6:	f7ff fc9f 	bl	d7228 <application_thread_invoke>
   d78ea:	e7b7      	b.n	d785c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d78ec:	000d7785 	.word	0x000d7785
   d78f0:	000d7a1d 	.word	0x000d7a1d
   d78f4:	000d74fb 	.word	0x000d74fb

000d78f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d78f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78fc:	b08a      	sub	sp, #40	; 0x28
   d78fe:	4605      	mov	r5, r0
   d7900:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7904:	460c      	mov	r4, r1
   d7906:	4617      	mov	r7, r2
   d7908:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d790a:	f7ff fce3 	bl	d72d4 <spark_cloud_flag_connected>
   d790e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7910:	4682      	mov	sl, r0
   d7912:	bb38      	cbnz	r0, d7964 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7914:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7918:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d791a:	a905      	add	r1, sp, #20
   d791c:	4630      	mov	r0, r6
   d791e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7922:	f7ff fea9 	bl	d7678 <_ZN8particle5ErrorC1EOS0_>
   d7926:	2014      	movs	r0, #20
   d7928:	f7fc fbb5 	bl	d4096 <_Znwj>
   d792c:	4604      	mov	r4, r0
   d792e:	b148      	cbz	r0, d7944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7930:	2302      	movs	r3, #2
   d7932:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7934:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7936:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d793a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d793c:	4631      	mov	r1, r6
   d793e:	300c      	adds	r0, #12
   d7940:	f7ff fe9a 	bl	d7678 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7944:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7946:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7948:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d794c:	f7ff ff32 	bl	d77b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7950:	4630      	mov	r0, r6
   d7952:	f7ff fe9e 	bl	d7692 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7956:	a805      	add	r0, sp, #20
   d7958:	f7ff fe9b 	bl	d7692 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d795c:	4628      	mov	r0, r5
   d795e:	b00a      	add	sp, #40	; 0x28
   d7960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7964:	230c      	movs	r3, #12
   d7966:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d796a:	2014      	movs	r0, #20
   d796c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7970:	9307      	str	r3, [sp, #28]
   d7972:	f7fc fb90 	bl	d4096 <_Znwj>
   d7976:	4601      	mov	r1, r0
   d7978:	b128      	cbz	r0, d7986 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d797a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d797e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7982:	f880 a001 	strb.w	sl, [r0, #1]
   d7986:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7988:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d798a:	f7ff ff13 	bl	d77b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d798e:	4b22      	ldr	r3, [pc, #136]	; (d7a18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7990:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7992:	2008      	movs	r0, #8
   d7994:	f7fc fb7f 	bl	d4096 <_Znwj>
   d7998:	4682      	mov	sl, r0
   d799a:	b128      	cbz	r0, d79a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d799c:	9b03      	ldr	r3, [sp, #12]
   d799e:	f840 3b04 	str.w	r3, [r0], #4
   d79a2:	a904      	add	r1, sp, #16
   d79a4:	f7ff fdd5 	bl	d7552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d79a8:	9600      	str	r6, [sp, #0]
   d79aa:	fa5f f389 	uxtb.w	r3, r9
   d79ae:	4642      	mov	r2, r8
   d79b0:	4639      	mov	r1, r7
   d79b2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d79b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d79b8:	f7ff fc9c 	bl	d72f4 <spark_send_event>
   d79bc:	b9b8      	cbnz	r0, d79ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d79be:	9b03      	ldr	r3, [sp, #12]
   d79c0:	785b      	ldrb	r3, [r3, #1]
   d79c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d79c6:	b993      	cbnz	r3, d79ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d79c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d79cc:	a905      	add	r1, sp, #20
   d79ce:	a803      	add	r0, sp, #12
   d79d0:	9205      	str	r2, [sp, #20]
   d79d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d79d6:	f7ff ff11 	bl	d77fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d79da:	a805      	add	r0, sp, #20
   d79dc:	f7ff fe59 	bl	d7692 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d79e0:	a805      	add	r0, sp, #20
   d79e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d79e4:	f7ff fea6 	bl	d7734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d79e8:	a806      	add	r0, sp, #24
   d79ea:	f7ff fdb9 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79ee:	9b03      	ldr	r3, [sp, #12]
   d79f0:	9305      	str	r3, [sp, #20]
   d79f2:	a904      	add	r1, sp, #16
   d79f4:	a806      	add	r0, sp, #24
   d79f6:	f7ff fdac 	bl	d7552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79fa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79fc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79fe:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7a00:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7a02:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7a04:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7a06:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7a08:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7a0a:	f7ff fda9 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a0e:	a804      	add	r0, sp, #16
   d7a10:	f7ff fda6 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7a14:	e7a2      	b.n	d795c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7a16:	bf00      	nop
   d7a18:	000d7ae1 	.word	0x000d7ae1

000d7a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7a1c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a20:	4605      	mov	r5, r0
	  switch (__op)
   d7a22:	d007      	beq.n	d7a34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7a24:	2a03      	cmp	r2, #3
   d7a26:	d018      	beq.n	d7a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7a28:	2a01      	cmp	r2, #1
   d7a2a:	d101      	bne.n	d7a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7a2c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7a2e:	6003      	str	r3, [r0, #0]
	}
   d7a30:	2000      	movs	r0, #0
   d7a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a34:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7a36:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a38:	f7fc fb2d 	bl	d4096 <_Znwj>
   d7a3c:	4604      	mov	r4, r0
   d7a3e:	b150      	cbz	r0, d7a56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7a40:	4631      	mov	r1, r6
   d7a42:	f7ff fecb 	bl	d77dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7a46:	6930      	ldr	r0, [r6, #16]
   d7a48:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7a4c:	b108      	cbz	r0, d7a52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7a4e:	f001 ff2d 	bl	d98ac <strdup>
        type_(type) {
   d7a52:	6120      	str	r0, [r4, #16]
   d7a54:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7a56:	602c      	str	r4, [r5, #0]
	}
   d7a58:	e7ea      	b.n	d7a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7a5a:	6804      	ldr	r4, [r0, #0]
   d7a5c:	2c00      	cmp	r4, #0
   d7a5e:	d0e7      	beq.n	d7a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7a60:	f104 0010 	add.w	r0, r4, #16
   d7a64:	f7ff fe15 	bl	d7692 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7a68:	4620      	mov	r0, r4
   d7a6a:	f7fc fc19 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7a6e:	2118      	movs	r1, #24
   d7a70:	4620      	mov	r0, r4
   d7a72:	f001 f840 	bl	d8af6 <_ZdlPvj>
   d7a76:	e7db      	b.n	d7a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7a78 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7a78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7a7a:	2300      	movs	r3, #0
   d7a7c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7a7e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7a80:	4604      	mov	r4, r0
   d7a82:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7a84:	b12b      	cbz	r3, d7a92 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a86:	2202      	movs	r2, #2
   d7a88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a8a:	68eb      	ldr	r3, [r5, #12]
   d7a8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a8e:	68ab      	ldr	r3, [r5, #8]
   d7a90:	60a3      	str	r3, [r4, #8]
    }
   d7a92:	4620      	mov	r0, r4
   d7a94:	bd38      	pop	{r3, r4, r5, pc}

000d7a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7a96:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7a98:	b570      	push	{r4, r5, r6, lr}
   d7a9a:	4604      	mov	r4, r0
	  switch (__op)
   d7a9c:	d007      	beq.n	d7aae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7a9e:	2a03      	cmp	r2, #3
   d7aa0:	d012      	beq.n	d7ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7aa2:	2a01      	cmp	r2, #1
   d7aa4:	d101      	bne.n	d7aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7aa6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7aa8:	6003      	str	r3, [r0, #0]
	}
   d7aaa:	2000      	movs	r0, #0
   d7aac:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7aae:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7ab0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7ab2:	f7fc faf0 	bl	d4096 <_Znwj>
   d7ab6:	4605      	mov	r5, r0
   d7ab8:	b120      	cbz	r0, d7ac4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7aba:	4631      	mov	r1, r6
   d7abc:	f7ff ffdc 	bl	d7a78 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7ac0:	7c33      	ldrb	r3, [r6, #16]
   d7ac2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7ac4:	6025      	str	r5, [r4, #0]
	}
   d7ac6:	e7f0      	b.n	d7aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7ac8:	6804      	ldr	r4, [r0, #0]
   d7aca:	2c00      	cmp	r4, #0
   d7acc:	d0ed      	beq.n	d7aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7ace:	4620      	mov	r0, r4
   d7ad0:	f7fc fbe6 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7ad4:	2114      	movs	r1, #20
   d7ad6:	4620      	mov	r0, r4
   d7ad8:	f001 f80d 	bl	d8af6 <_ZdlPvj>
   d7adc:	e7e5      	b.n	d7aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7ae0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ae2:	b089      	sub	sp, #36	; 0x24
   d7ae4:	4604      	mov	r4, r0
   d7ae6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7ae8:	a801      	add	r0, sp, #4
   d7aea:	4611      	mov	r1, r2
   d7aec:	f7ff fe22 	bl	d7734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7af0:	b1a4      	cbz	r4, d7b1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7af2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7af4:	b11d      	cbz	r5, d7afe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7af6:	4628      	mov	r0, r5
   d7af8:	f001 fed8 	bl	d98ac <strdup>
   d7afc:	4605      	mov	r5, r0
   d7afe:	a801      	add	r0, sp, #4
   d7b00:	a903      	add	r1, sp, #12
        type_(type) {
   d7b02:	9503      	str	r5, [sp, #12]
   d7b04:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7b08:	f7ff fe78 	bl	d77fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7b0c:	a803      	add	r0, sp, #12
   d7b0e:	f7ff fdc0 	bl	d7692 <_ZN8particle5ErrorD1Ev>
   d7b12:	a802      	add	r0, sp, #8
   d7b14:	f7ff fd24 	bl	d7560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7b18:	b009      	add	sp, #36	; 0x24
   d7b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7b1c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7b1e:	2301      	movs	r3, #1
   d7b20:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7b24:	2a00      	cmp	r2, #0
   d7b26:	d103      	bne.n	d7b30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7b28:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7b2c:	2900      	cmp	r1, #0
   d7b2e:	d1f7      	bne.n	d7b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7b30:	d1ef      	bne.n	d7b12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7b32:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7b34:	f3bf 8f5b 	dmb	ish
   d7b38:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7b3a:	1d2b      	adds	r3, r5, #4
   d7b3c:	f3bf 8f5b 	dmb	ish
   d7b40:	e853 6f00 	ldrex	r6, [r3]
   d7b44:	e843 4200 	strex	r2, r4, [r3]
   d7b48:	2a00      	cmp	r2, #0
   d7b4a:	d1f9      	bne.n	d7b40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7b4c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7b50:	2e00      	cmp	r6, #0
   d7b52:	d0de      	beq.n	d7b12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7b54:	4620      	mov	r0, r4
   d7b56:	f7ff fb5f 	bl	d7218 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b5a:	4607      	mov	r7, r0
   d7b5c:	b160      	cbz	r0, d7b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7b5e:	f105 010c 	add.w	r1, r5, #12
   d7b62:	4630      	mov	r0, r6
   d7b64:	f7ff fe15 	bl	d7792 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7b68:	4630      	mov	r0, r6
   d7b6a:	f7fc fb99 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7b6e:	2110      	movs	r1, #16
   d7b70:	4630      	mov	r0, r6
   d7b72:	f000 ffc0 	bl	d8af6 <_ZdlPvj>
   d7b76:	e7cc      	b.n	d7b12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7b78:	4631      	mov	r1, r6
   d7b7a:	a803      	add	r0, sp, #12
   d7b7c:	f7ff ff7c 	bl	d7a78 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7b80:	7b2b      	ldrb	r3, [r5, #12]
   d7b82:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7b86:	2010      	movs	r0, #16
   d7b88:	f7fc fa85 	bl	d4096 <_Znwj>
   d7b8c:	4605      	mov	r5, r0
   d7b8e:	b1d0      	cbz	r0, d7bc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7b90:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b92:	2014      	movs	r0, #20
   d7b94:	f7fc fa7f 	bl	d4096 <_Znwj>
   d7b98:	4604      	mov	r4, r0
   d7b9a:	b178      	cbz	r0, d7bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7b9c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7b9e:	4601      	mov	r1, r0
   d7ba0:	a803      	add	r0, sp, #12
   d7ba2:	f7ff fce9 	bl	d7578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ba6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7ba8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7baa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7bae:	9205      	str	r2, [sp, #20]
   d7bb0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bb2:	60e3      	str	r3, [r4, #12]
   d7bb4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7bb8:	9206      	str	r2, [sp, #24]
   d7bba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7bbc:	4b06      	ldr	r3, [pc, #24]	; (d7bd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7bbe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7bc0:	4b06      	ldr	r3, [pc, #24]	; (d7bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7bc2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7bc4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7bc6:	a803      	add	r0, sp, #12
   d7bc8:	f7fc fb6a 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7bcc:	2200      	movs	r2, #0
   d7bce:	4629      	mov	r1, r5
   d7bd0:	4803      	ldr	r0, [pc, #12]	; (d7be0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7bd2:	f7ff fb29 	bl	d7228 <application_thread_invoke>
   d7bd6:	e7c7      	b.n	d7b68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7bd8:	000d77a5 	.word	0x000d77a5
   d7bdc:	000d7a97 	.word	0x000d7a97
   d7be0:	000d74fb 	.word	0x000d74fb

000d7be4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7be4:	2200      	movs	r2, #0
   d7be6:	6840      	ldr	r0, [r0, #4]
   d7be8:	4611      	mov	r1, r2
   d7bea:	f7ff bbf3 	b.w	d73d4 <network_listening>

000d7bee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7bee:	2200      	movs	r2, #0
   d7bf0:	6840      	ldr	r0, [r0, #4]
   d7bf2:	4611      	mov	r1, r2
   d7bf4:	f7ff bbfe 	b.w	d73f4 <network_get_listen_timeout>

000d7bf8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7bf8:	6840      	ldr	r0, [r0, #4]
   d7bfa:	2200      	movs	r2, #0
   d7bfc:	f7ff bbf2 	b.w	d73e4 <network_set_listen_timeout>

000d7c00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c00:	6840      	ldr	r0, [r0, #4]
   d7c02:	2200      	movs	r2, #0
   d7c04:	f081 0101 	eor.w	r1, r1, #1
   d7c08:	f7ff bbdc 	b.w	d73c4 <network_listen>

000d7c0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7c0c:	2300      	movs	r3, #0
   d7c0e:	6840      	ldr	r0, [r0, #4]
   d7c10:	461a      	mov	r2, r3
   d7c12:	4619      	mov	r1, r3
   d7c14:	f7ff bbce 	b.w	d73b4 <network_off>

000d7c18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7c18:	2300      	movs	r3, #0
   d7c1a:	6840      	ldr	r0, [r0, #4]
   d7c1c:	461a      	mov	r2, r3
   d7c1e:	4619      	mov	r1, r3
   d7c20:	f7ff bbc0 	b.w	d73a4 <network_on>

000d7c24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7c24:	2200      	movs	r2, #0
   d7c26:	6840      	ldr	r0, [r0, #4]
   d7c28:	4611      	mov	r1, r2
   d7c2a:	f7ff bbb3 	b.w	d7394 <network_ready>

000d7c2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7c2e:	2200      	movs	r2, #0
   d7c30:	6840      	ldr	r0, [r0, #4]
   d7c32:	4611      	mov	r1, r2
   d7c34:	f7ff bb9e 	b.w	d7374 <network_connecting>

000d7c38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c38:	6840      	ldr	r0, [r0, #4]
   d7c3a:	2200      	movs	r2, #0
   d7c3c:	2102      	movs	r1, #2
   d7c3e:	f7ff bba1 	b.w	d7384 <network_disconnect>

000d7c42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7c42:	2300      	movs	r3, #0
   d7c44:	6840      	ldr	r0, [r0, #4]
   d7c46:	461a      	mov	r2, r3
   d7c48:	f7ff bb8c 	b.w	d7364 <network_connect>

000d7c4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7c4c:	4b02      	ldr	r3, [pc, #8]	; (d7c58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7c4e:	2203      	movs	r2, #3
   d7c50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7c52:	4a02      	ldr	r2, [pc, #8]	; (d7c5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7c54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7c56:	4770      	bx	lr
   d7c58:	2003e614 	.word	0x2003e614
   d7c5c:	000dc1bc 	.word	0x000dc1bc

000d7c60 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7c60:	4770      	bx	lr

000d7c62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c64:	4606      	mov	r6, r0
   d7c66:	4615      	mov	r5, r2
   d7c68:	460c      	mov	r4, r1
   d7c6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c6c:	42bc      	cmp	r4, r7
   d7c6e:	d006      	beq.n	d7c7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7c70:	6833      	ldr	r3, [r6, #0]
   d7c72:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c76:	689b      	ldr	r3, [r3, #8]
   d7c78:	4630      	mov	r0, r6
   d7c7a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7c7c:	e7f6      	b.n	d7c6c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7c7e:	4628      	mov	r0, r5
   d7c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c82 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7c82:	7c00      	ldrb	r0, [r0, #16]
   d7c84:	2200      	movs	r2, #0
   d7c86:	f7ff b9af 	b.w	d6fe8 <hal_i2c_write>

000d7c8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7c8a:	7c00      	ldrb	r0, [r0, #16]
   d7c8c:	2100      	movs	r1, #0
   d7c8e:	f7ff b9b3 	b.w	d6ff8 <hal_i2c_available>

000d7c92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7c92:	7c00      	ldrb	r0, [r0, #16]
   d7c94:	2100      	movs	r1, #0
   d7c96:	f7ff b9b7 	b.w	d7008 <hal_i2c_read>

000d7c9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7c9a:	7c00      	ldrb	r0, [r0, #16]
   d7c9c:	2100      	movs	r1, #0
   d7c9e:	f7ff b9bb 	b.w	d7018 <hal_i2c_peek>

000d7ca2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7ca2:	7c00      	ldrb	r0, [r0, #16]
   d7ca4:	2100      	movs	r1, #0
   d7ca6:	f7ff b9bf 	b.w	d7028 <hal_i2c_flush>

000d7caa <_ZN7TwoWireD0Ev>:
   d7caa:	b510      	push	{r4, lr}
   d7cac:	2114      	movs	r1, #20
   d7cae:	4604      	mov	r4, r0
   d7cb0:	f000 ff21 	bl	d8af6 <_ZdlPvj>
   d7cb4:	4620      	mov	r0, r4
   d7cb6:	bd10      	pop	{r4, pc}

000d7cb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7cb8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7cbe:	4604      	mov	r4, r0
   d7cc0:	4608      	mov	r0, r1
   d7cc2:	2100      	movs	r1, #0
   d7cc4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7cc8:	4b03      	ldr	r3, [pc, #12]	; (d7cd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7cca:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7ccc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7cce:	4611      	mov	r1, r2
   d7cd0:	f7ff f9ba 	bl	d7048 <hal_i2c_init>
}
   d7cd4:	4620      	mov	r0, r4
   d7cd6:	bd10      	pop	{r4, pc}
   d7cd8:	000dc1f8 	.word	0x000dc1f8

000d7cdc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7cdc:	2300      	movs	r3, #0
   d7cde:	7c00      	ldrb	r0, [r0, #16]
   d7ce0:	461a      	mov	r2, r3
   d7ce2:	4619      	mov	r1, r3
   d7ce4:	f7ff b968 	b.w	d6fb8 <hal_i2c_begin>

000d7ce8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7cea:	2200      	movs	r2, #0
   d7cec:	2314      	movs	r3, #20
   d7cee:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7cf2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7cf6:	780b      	ldrb	r3, [r1, #0]
   d7cf8:	f88d 3008 	strb.w	r3, [sp, #8]
   d7cfc:	684b      	ldr	r3, [r1, #4]
   d7cfe:	9303      	str	r3, [sp, #12]
   d7d00:	68cb      	ldr	r3, [r1, #12]
   d7d02:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7d04:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7d06:	7a0b      	ldrb	r3, [r1, #8]
   d7d08:	9305      	str	r3, [sp, #20]
   d7d0a:	a901      	add	r1, sp, #4
   d7d0c:	f7ff f9b4 	bl	d7078 <hal_i2c_request_ex>
}
   d7d10:	b007      	add	sp, #28
   d7d12:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d16 <_ZN7TwoWire11requestFromEhjh>:
{
   d7d16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7d18:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7d1a:	f88d 1000 	strb.w	r1, [sp]
   d7d1e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7d22:	9103      	str	r1, [sp, #12]
   d7d24:	bf18      	it	ne
   d7d26:	2301      	movne	r3, #1
   d7d28:	4669      	mov	r1, sp
    size_ = size;
   d7d2a:	9201      	str	r2, [sp, #4]
   d7d2c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7d30:	f7ff ffda 	bl	d7ce8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7d34:	b005      	add	sp, #20
   d7d36:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d3a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7d3a:	7c00      	ldrb	r0, [r0, #16]
   d7d3c:	2200      	movs	r2, #0
   d7d3e:	f7ff b943 	b.w	d6fc8 <hal_i2c_begin_transmission>

000d7d42 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7d42:	b2c9      	uxtb	r1, r1
   d7d44:	f7ff bff9 	b.w	d7d3a <_ZN7TwoWire17beginTransmissionEh>

000d7d48 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7d48:	7c00      	ldrb	r0, [r0, #16]
   d7d4a:	2200      	movs	r2, #0
   d7d4c:	f7ff b944 	b.w	d6fd8 <hal_i2c_end_transmission>

000d7d50 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7d50:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7d52:	2100      	movs	r1, #0
   d7d54:	7c00      	ldrb	r0, [r0, #16]
   d7d56:	f7ff f97f 	bl	d7058 <hal_i2c_lock>
}
   d7d5a:	fab0 f080 	clz	r0, r0
   d7d5e:	0940      	lsrs	r0, r0, #5
   d7d60:	bd08      	pop	{r3, pc}

000d7d62 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7d62:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7d64:	2100      	movs	r1, #0
   d7d66:	7c00      	ldrb	r0, [r0, #16]
   d7d68:	f7ff f97e 	bl	d7068 <hal_i2c_unlock>
}
   d7d6c:	fab0 f080 	clz	r0, r0
   d7d70:	0940      	lsrs	r0, r0, #5
   d7d72:	bd08      	pop	{r3, pc}

000d7d74 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7d74:	4700      	bx	r0
	...

000d7d78 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7d78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7d7c:	2400      	movs	r4, #0
{
   d7d7e:	461d      	mov	r5, r3
   d7d80:	460f      	mov	r7, r1
   d7d82:	4690      	mov	r8, r2
   d7d84:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7d86:	f7ff f907 	bl	d6f98 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7d8a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7d8c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7d90:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7d94:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7d98:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7d9c:	bfa2      	ittt	ge
   d7d9e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7da2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7da6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7da8:	4907      	ldr	r1, [pc, #28]	; (d7dc8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7daa:	9400      	str	r4, [sp, #0]
   d7dac:	4643      	mov	r3, r8
   d7dae:	463a      	mov	r2, r7
   d7db0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7db2:	bfa8      	it	ge
   d7db4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7db8:	f7ff f8e6 	bl	d6f88 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7dbc:	fab0 f080 	clz	r0, r0
   d7dc0:	0940      	lsrs	r0, r0, #5
   d7dc2:	b004      	add	sp, #16
   d7dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7dc8:	000d7d75 	.word	0x000d7d75

000d7dcc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7dcc:	4770      	bx	lr

000d7dce <_ZN9IPAddressD0Ev>:
   d7dce:	b510      	push	{r4, lr}
   d7dd0:	2118      	movs	r1, #24
   d7dd2:	4604      	mov	r4, r0
   d7dd4:	f000 fe8f 	bl	d8af6 <_ZdlPvj>
   d7dd8:	4620      	mov	r0, r4
   d7dda:	bd10      	pop	{r4, pc}

000d7ddc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7dde:	7d03      	ldrb	r3, [r0, #20]
   d7de0:	2b06      	cmp	r3, #6
{
   d7de2:	b08d      	sub	sp, #52	; 0x34
   d7de4:	460e      	mov	r6, r1
   d7de6:	f100 0704 	add.w	r7, r0, #4
   d7dea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7dee:	d012      	beq.n	d7e16 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7df0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7df4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7df8:	220a      	movs	r2, #10
   d7dfa:	4630      	mov	r0, r6
   d7dfc:	f000 f945 	bl	d808a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7e00:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7e02:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7e04:	d019      	beq.n	d7e3a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7e06:	2c00      	cmp	r4, #0
   d7e08:	d0f4      	beq.n	d7df4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7e0a:	212e      	movs	r1, #46	; 0x2e
   d7e0c:	4630      	mov	r0, r6
   d7e0e:	f000 f939 	bl	d8084 <_ZN5Print5printEc>
   d7e12:	4404      	add	r4, r0
   d7e14:	e7ee      	b.n	d7df4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7e16:	232f      	movs	r3, #47	; 0x2f
   d7e18:	466a      	mov	r2, sp
   d7e1a:	4639      	mov	r1, r7
   d7e1c:	200a      	movs	r0, #10
		buf[0] = 0;
   d7e1e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7e22:	f7ff f931 	bl	d7088 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7e26:	4668      	mov	r0, sp
   d7e28:	f001 fd5d 	bl	d98e6 <strlen>
   d7e2c:	6833      	ldr	r3, [r6, #0]
   d7e2e:	4602      	mov	r2, r0
   d7e30:	68db      	ldr	r3, [r3, #12]
   d7e32:	4669      	mov	r1, sp
   d7e34:	4630      	mov	r0, r6
   d7e36:	4798      	blx	r3
   d7e38:	4604      	mov	r4, r0
    }
    return n;
}
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	b00d      	add	sp, #52	; 0x34
   d7e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e40 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7e40:	b510      	push	{r4, lr}
   d7e42:	4b05      	ldr	r3, [pc, #20]	; (d7e58 <_ZN9IPAddressC1Ev+0x18>)
   d7e44:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7e46:	2211      	movs	r2, #17
   d7e48:	f840 3b04 	str.w	r3, [r0], #4
   d7e4c:	2100      	movs	r1, #0
   d7e4e:	f001 fcef 	bl	d9830 <memset>
}
   d7e52:	4620      	mov	r0, r4
   d7e54:	bd10      	pop	{r4, pc}
   d7e56:	bf00      	nop
   d7e58:	000dc220 	.word	0x000dc220

000d7e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7e5c:	4603      	mov	r3, r0
   d7e5e:	4a07      	ldr	r2, [pc, #28]	; (d7e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7e60:	b510      	push	{r4, lr}
   d7e62:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7e66:	f101 0210 	add.w	r2, r1, #16
   d7e6a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7e6e:	f843 4b04 	str.w	r4, [r3], #4
   d7e72:	4291      	cmp	r1, r2
   d7e74:	d1f9      	bne.n	d7e6a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7e76:	780a      	ldrb	r2, [r1, #0]
   d7e78:	701a      	strb	r2, [r3, #0]
}
   d7e7a:	bd10      	pop	{r4, pc}
   d7e7c:	000dc220 	.word	0x000dc220

000d7e80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7e80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7e82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7e86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7e8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7e8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7e92:	2304      	movs	r3, #4
   d7e94:	6041      	str	r1, [r0, #4]
   d7e96:	7503      	strb	r3, [r0, #20]
}
   d7e98:	bd10      	pop	{r4, pc}
	...

000d7e9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7e9c:	b513      	push	{r0, r1, r4, lr}
   d7e9e:	4b05      	ldr	r3, [pc, #20]	; (d7eb4 <_ZN9IPAddressC1EPKh+0x18>)
   d7ea0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7ea2:	78cb      	ldrb	r3, [r1, #3]
   d7ea4:	9300      	str	r3, [sp, #0]
   d7ea6:	788b      	ldrb	r3, [r1, #2]
   d7ea8:	784a      	ldrb	r2, [r1, #1]
   d7eaa:	7809      	ldrb	r1, [r1, #0]
   d7eac:	f7ff ffe8 	bl	d7e80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7eb0:	b002      	add	sp, #8
   d7eb2:	bd10      	pop	{r4, pc}
   d7eb4:	000dc220 	.word	0x000dc220

000d7eb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7eb8:	4b01      	ldr	r3, [pc, #4]	; (d7ec0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7eba:	4a02      	ldr	r2, [pc, #8]	; (d7ec4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7ebc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7ebe:	4770      	bx	lr
   d7ec0:	2003e61c 	.word	0x2003e61c
   d7ec4:	000dc22c 	.word	0x000dc22c

000d7ec8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7ec8:	2300      	movs	r3, #0
   d7eca:	6840      	ldr	r0, [r0, #4]
   d7ecc:	461a      	mov	r2, r3
   d7ece:	f7ff ba49 	b.w	d7364 <network_connect>

000d7ed2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ed2:	6840      	ldr	r0, [r0, #4]
   d7ed4:	2200      	movs	r2, #0
   d7ed6:	2102      	movs	r1, #2
   d7ed8:	f7ff ba54 	b.w	d7384 <network_disconnect>

000d7edc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7edc:	2200      	movs	r2, #0
   d7ede:	6840      	ldr	r0, [r0, #4]
   d7ee0:	4611      	mov	r1, r2
   d7ee2:	f7ff ba47 	b.w	d7374 <network_connecting>

000d7ee6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	6840      	ldr	r0, [r0, #4]
   d7eea:	4611      	mov	r1, r2
   d7eec:	f7ff ba52 	b.w	d7394 <network_ready>

000d7ef0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ef0:	2300      	movs	r3, #0
   d7ef2:	6840      	ldr	r0, [r0, #4]
   d7ef4:	461a      	mov	r2, r3
   d7ef6:	4619      	mov	r1, r3
   d7ef8:	f7ff ba54 	b.w	d73a4 <network_on>

000d7efc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7efc:	2300      	movs	r3, #0
   d7efe:	6840      	ldr	r0, [r0, #4]
   d7f00:	461a      	mov	r2, r3
   d7f02:	4619      	mov	r1, r3
   d7f04:	f7ff ba56 	b.w	d73b4 <network_off>

000d7f08 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7f08:	6840      	ldr	r0, [r0, #4]
   d7f0a:	2100      	movs	r1, #0
   d7f0c:	f7ff ba7a 	b.w	d7404 <network_is_on>

000d7f10 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7f10:	6840      	ldr	r0, [r0, #4]
   d7f12:	2100      	movs	r1, #0
   d7f14:	f7ff ba7e 	b.w	d7414 <network_is_off>

000d7f18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f18:	6840      	ldr	r0, [r0, #4]
   d7f1a:	2200      	movs	r2, #0
   d7f1c:	f081 0101 	eor.w	r1, r1, #1
   d7f20:	f7ff ba50 	b.w	d73c4 <network_listen>

000d7f24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f24:	6840      	ldr	r0, [r0, #4]
   d7f26:	2200      	movs	r2, #0
   d7f28:	f7ff ba5c 	b.w	d73e4 <network_set_listen_timeout>

000d7f2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f2c:	2200      	movs	r2, #0
   d7f2e:	6840      	ldr	r0, [r0, #4]
   d7f30:	4611      	mov	r1, r2
   d7f32:	f7ff ba5f 	b.w	d73f4 <network_get_listen_timeout>

000d7f36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f36:	2200      	movs	r2, #0
   d7f38:	6840      	ldr	r0, [r0, #4]
   d7f3a:	4611      	mov	r1, r2
   d7f3c:	f7ff ba4a 	b.w	d73d4 <network_listening>

000d7f40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f44:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7f46:	b095      	sub	sp, #84	; 0x54
   d7f48:	4616      	mov	r6, r2
   d7f4a:	460d      	mov	r5, r1
   d7f4c:	4607      	mov	r7, r0
    IPAddress addr;
   d7f4e:	f7ff ff77 	bl	d7e40 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7f52:	4621      	mov	r1, r4
   d7f54:	2218      	movs	r2, #24
   d7f56:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7f58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f5a:	f001 fc69 	bl	d9830 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f5e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7f60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f64:	4621      	mov	r1, r4
   d7f66:	466b      	mov	r3, sp
   d7f68:	aa0c      	add	r2, sp, #48	; 0x30
   d7f6a:	4630      	mov	r0, r6
   d7f6c:	f7ff f89c 	bl	d70a8 <netdb_getaddrinfo>
    if (!r) {
   d7f70:	4604      	mov	r4, r0
   d7f72:	2800      	cmp	r0, #0
   d7f74:	d14c      	bne.n	d8010 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f76:	4602      	mov	r2, r0
   d7f78:	2101      	movs	r1, #1
   d7f7a:	6868      	ldr	r0, [r5, #4]
   d7f7c:	f7ff fa0a 	bl	d7394 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f80:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f84:	4622      	mov	r2, r4
   d7f86:	6868      	ldr	r0, [r5, #4]
   d7f88:	f7ff fa04 	bl	d7394 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f8c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f8e:	4681      	mov	r9, r0
        bool ok = false;
   d7f90:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f92:	2e00      	cmp	r6, #0
   d7f94:	d03c      	beq.n	d8010 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7f96:	2900      	cmp	r1, #0
   d7f98:	d13a      	bne.n	d8010 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f9a:	6873      	ldr	r3, [r6, #4]
   d7f9c:	2b02      	cmp	r3, #2
   d7f9e:	d003      	beq.n	d7fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7fa0:	2b0a      	cmp	r3, #10
   d7fa2:	d011      	beq.n	d7fc8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fa4:	69f6      	ldr	r6, [r6, #28]
   d7fa6:	e7f4      	b.n	d7f92 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7fa8:	f1b8 0f00 	cmp.w	r8, #0
   d7fac:	d00a      	beq.n	d7fc4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7fae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7fb0:	a806      	add	r0, sp, #24
   d7fb2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7fb4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7fb6:	f7ff ff71 	bl	d7e9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fbc:	1d3c      	adds	r4, r7, #4
   d7fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fc0:	682b      	ldr	r3, [r5, #0]
   d7fc2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7fc4:	4641      	mov	r1, r8
   d7fc6:	e7ed      	b.n	d7fa4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7fc8:	f1b9 0f00 	cmp.w	r9, #0
   d7fcc:	d101      	bne.n	d7fd2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7fce:	4649      	mov	r1, r9
   d7fd0:	e7e8      	b.n	d7fa4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7fd2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7fd4:	2210      	movs	r2, #16
   d7fd6:	a801      	add	r0, sp, #4
   d7fd8:	f001 fc2a 	bl	d9830 <memset>
                    a.v = 6;
   d7fdc:	2306      	movs	r3, #6
   d7fde:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7fe2:	ad01      	add	r5, sp, #4
   d7fe4:	f104 0308 	add.w	r3, r4, #8
   d7fe8:	3418      	adds	r4, #24
   d7fea:	6818      	ldr	r0, [r3, #0]
   d7fec:	6859      	ldr	r1, [r3, #4]
   d7fee:	462a      	mov	r2, r5
   d7ff0:	c203      	stmia	r2!, {r0, r1}
   d7ff2:	3308      	adds	r3, #8
   d7ff4:	42a3      	cmp	r3, r4
   d7ff6:	4615      	mov	r5, r2
   d7ff8:	d1f7      	bne.n	d7fea <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7ffa:	a901      	add	r1, sp, #4
   d7ffc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7ffe:	ad07      	add	r5, sp, #28
   d8000:	f7ff ff2c 	bl	d7e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8006:	1d3c      	adds	r4, r7, #4
   d8008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d800a:	682b      	ldr	r3, [r5, #0]
   d800c:	7023      	strb	r3, [r4, #0]
   d800e:	e7de      	b.n	d7fce <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8010:	9800      	ldr	r0, [sp, #0]
   d8012:	f7ff f841 	bl	d7098 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8016:	4638      	mov	r0, r7
   d8018:	b015      	add	sp, #84	; 0x54
   d801a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8020 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8020:	4b02      	ldr	r3, [pc, #8]	; (d802c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8022:	4a03      	ldr	r2, [pc, #12]	; (d8030 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8024:	601a      	str	r2, [r3, #0]
   d8026:	2200      	movs	r2, #0
   d8028:	605a      	str	r2, [r3, #4]

} // spark
   d802a:	4770      	bx	lr
   d802c:	2003e620 	.word	0x2003e620
   d8030:	000dc238 	.word	0x000dc238

000d8034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8036:	4606      	mov	r6, r0
   d8038:	460d      	mov	r5, r1
  size_t n = 0;
   d803a:	188f      	adds	r7, r1, r2
   d803c:	2400      	movs	r4, #0
  while (size--) {
   d803e:	42bd      	cmp	r5, r7
   d8040:	d00c      	beq.n	d805c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8042:	6833      	ldr	r3, [r6, #0]
   d8044:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8048:	689b      	ldr	r3, [r3, #8]
   d804a:	4630      	mov	r0, r6
   d804c:	4798      	blx	r3
     if (chunk>=0)
   d804e:	1e03      	subs	r3, r0, #0
   d8050:	db01      	blt.n	d8056 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8052:	441c      	add	r4, r3
  while (size--) {
   d8054:	e7f3      	b.n	d803e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8056:	2c00      	cmp	r4, #0
   d8058:	bf08      	it	eq
   d805a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d805c:	4620      	mov	r0, r4
   d805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8060 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d8060:	b513      	push	{r0, r1, r4, lr}
   d8062:	4604      	mov	r4, r0
    }
   d8064:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8066:	b159      	cbz	r1, d8080 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8068:	9101      	str	r1, [sp, #4]
   d806a:	f001 fc3c 	bl	d98e6 <strlen>
   d806e:	6823      	ldr	r3, [r4, #0]
   d8070:	9901      	ldr	r1, [sp, #4]
   d8072:	68db      	ldr	r3, [r3, #12]
   d8074:	4602      	mov	r2, r0
   d8076:	4620      	mov	r0, r4
    }
   d8078:	b002      	add	sp, #8
   d807a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d807e:	4718      	bx	r3
    }
   d8080:	b002      	add	sp, #8
   d8082:	bd10      	pop	{r4, pc}

000d8084 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8084:	6803      	ldr	r3, [r0, #0]
   d8086:	689b      	ldr	r3, [r3, #8]
   d8088:	4718      	bx	r3

000d808a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d808a:	b530      	push	{r4, r5, lr}
   d808c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d808e:	2300      	movs	r3, #0
   d8090:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8094:	2a01      	cmp	r2, #1
   d8096:	bf98      	it	ls
   d8098:	220a      	movls	r2, #10
   d809a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d809c:	460d      	mov	r5, r1
   d809e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d80a2:	fb01 5312 	mls	r3, r1, r2, r5
   d80a6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d80aa:	2b09      	cmp	r3, #9
   d80ac:	bf94      	ite	ls
   d80ae:	3330      	addls	r3, #48	; 0x30
   d80b0:	3337      	addhi	r3, #55	; 0x37
   d80b2:	b2db      	uxtb	r3, r3
  } while(n);
   d80b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d80b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d80ba:	d9ef      	bls.n	d809c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d80bc:	4621      	mov	r1, r4
   d80be:	f7ff ffcf 	bl	d8060 <_ZN5Print5writeEPKc>
}
   d80c2:	b00b      	add	sp, #44	; 0x2c
   d80c4:	bd30      	pop	{r4, r5, pc}

000d80c6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d80c6:	b510      	push	{r4, lr}
   d80c8:	4604      	mov	r4, r0
   d80ca:	f7fc f8e9 	bl	d42a0 <_ZNSt14_Function_baseD1Ev>
   d80ce:	4620      	mov	r0, r4
   d80d0:	bd10      	pop	{r4, pc}
	...

000d80d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d80d4:	4803      	ldr	r0, [pc, #12]	; (d80e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d80d6:	4a04      	ldr	r2, [pc, #16]	; (d80e8 <_GLOBAL__sub_I_RGB+0x14>)
   d80d8:	4904      	ldr	r1, [pc, #16]	; (d80ec <_GLOBAL__sub_I_RGB+0x18>)
   d80da:	2300      	movs	r3, #0
   d80dc:	6083      	str	r3, [r0, #8]
   d80de:	f000 bd05 	b.w	d8aec <__aeabi_atexit>
   d80e2:	bf00      	nop
   d80e4:	2003e628 	.word	0x2003e628
   d80e8:	2003d9f8 	.word	0x2003d9f8
   d80ec:	000d80c7 	.word	0x000d80c7

000d80f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d80f0:	b510      	push	{r4, lr}
   d80f2:	4604      	mov	r4, r0
   d80f4:	4608      	mov	r0, r1
{
    _spi = spi;
   d80f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d80f8:	f7fe ffde 	bl	d70b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d80fc:	2300      	movs	r3, #0
   d80fe:	6063      	str	r3, [r4, #4]
}
   d8100:	4620      	mov	r0, r4
   d8102:	bd10      	pop	{r4, pc}

000d8104 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8104:	b510      	push	{r4, lr}
   d8106:	4604      	mov	r4, r0
{
	free(buffer);
   d8108:	6800      	ldr	r0, [r0, #0]
   d810a:	f7ff f993 	bl	d7434 <free>
}
   d810e:	4620      	mov	r0, r4
   d8110:	bd10      	pop	{r4, pc}

000d8112 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8112:	b510      	push	{r4, lr}
   d8114:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8116:	6800      	ldr	r0, [r0, #0]
   d8118:	b108      	cbz	r0, d811e <_ZN6String10invalidateEv+0xc>
   d811a:	f7ff f98b 	bl	d7434 <free>
	buffer = NULL;
   d811e:	2300      	movs	r3, #0
	capacity = len = 0;
   d8120:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8124:	6023      	str	r3, [r4, #0]
}
   d8126:	bd10      	pop	{r4, pc}

000d8128 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8128:	b538      	push	{r3, r4, r5, lr}
   d812a:	4604      	mov	r4, r0
   d812c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d812e:	6800      	ldr	r0, [r0, #0]
   d8130:	3101      	adds	r1, #1
   d8132:	f7ff f987 	bl	d7444 <realloc>
	if (newbuffer) {
   d8136:	b110      	cbz	r0, d813e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8138:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d813c:	2001      	movs	r0, #1
	}
	return 0;
}
   d813e:	bd38      	pop	{r3, r4, r5, pc}

000d8140 <_ZN6String7reserveEj>:
{
   d8140:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8142:	6803      	ldr	r3, [r0, #0]
{
   d8144:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8146:	b123      	cbz	r3, d8152 <_ZN6String7reserveEj+0x12>
   d8148:	6843      	ldr	r3, [r0, #4]
   d814a:	428b      	cmp	r3, r1
   d814c:	d301      	bcc.n	d8152 <_ZN6String7reserveEj+0x12>
   d814e:	2001      	movs	r0, #1
}
   d8150:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8152:	4620      	mov	r0, r4
   d8154:	f7ff ffe8 	bl	d8128 <_ZN6String12changeBufferEj>
   d8158:	2800      	cmp	r0, #0
   d815a:	d0f9      	beq.n	d8150 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d815c:	68a3      	ldr	r3, [r4, #8]
   d815e:	2b00      	cmp	r3, #0
   d8160:	d1f5      	bne.n	d814e <_ZN6String7reserveEj+0xe>
   d8162:	6822      	ldr	r2, [r4, #0]
   d8164:	7013      	strb	r3, [r2, #0]
   d8166:	e7f2      	b.n	d814e <_ZN6String7reserveEj+0xe>

000d8168 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d816a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d816c:	4611      	mov	r1, r2
   d816e:	9201      	str	r2, [sp, #4]
{
   d8170:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8172:	f7ff ffe5 	bl	d8140 <_ZN6String7reserveEj>
   d8176:	9a01      	ldr	r2, [sp, #4]
   d8178:	b928      	cbnz	r0, d8186 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d817a:	4620      	mov	r0, r4
   d817c:	f7ff ffc9 	bl	d8112 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8180:	4620      	mov	r0, r4
   d8182:	b003      	add	sp, #12
   d8184:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8186:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8188:	4629      	mov	r1, r5
   d818a:	6820      	ldr	r0, [r4, #0]
   d818c:	f001 fb28 	bl	d97e0 <memcpy>
	buffer[len] = 0;
   d8190:	6822      	ldr	r2, [r4, #0]
   d8192:	68a3      	ldr	r3, [r4, #8]
   d8194:	2100      	movs	r1, #0
   d8196:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8198:	e7f2      	b.n	d8180 <_ZN6String4copyEPKcj+0x18>

000d819a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d819a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d819c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d819e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d81a2:	4604      	mov	r4, r0
	len = 0;
   d81a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d81a6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d81a8:	b141      	cbz	r1, d81bc <_ZN6StringC1EPKc+0x22>
   d81aa:	4608      	mov	r0, r1
   d81ac:	9101      	str	r1, [sp, #4]
   d81ae:	f001 fb9a 	bl	d98e6 <strlen>
   d81b2:	9901      	ldr	r1, [sp, #4]
   d81b4:	4602      	mov	r2, r0
   d81b6:	4620      	mov	r0, r4
   d81b8:	f7ff ffd6 	bl	d8168 <_ZN6String4copyEPKcj>
}
   d81bc:	4620      	mov	r0, r4
   d81be:	b002      	add	sp, #8
   d81c0:	bd10      	pop	{r4, pc}

000d81c2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d81c2:	4288      	cmp	r0, r1
{
   d81c4:	b510      	push	{r4, lr}
   d81c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d81c8:	d005      	beq.n	d81d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d81ca:	680b      	ldr	r3, [r1, #0]
   d81cc:	b12b      	cbz	r3, d81da <_ZN6StringaSERKS_+0x18>
   d81ce:	688a      	ldr	r2, [r1, #8]
   d81d0:	4619      	mov	r1, r3
   d81d2:	f7ff ffc9 	bl	d8168 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d81d6:	4620      	mov	r0, r4
   d81d8:	bd10      	pop	{r4, pc}
	else invalidate();
   d81da:	f7ff ff9a 	bl	d8112 <_ZN6String10invalidateEv>
   d81de:	e7fa      	b.n	d81d6 <_ZN6StringaSERKS_+0x14>

000d81e0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d81e0:	b510      	push	{r4, lr}
	buffer = NULL;
   d81e2:	2300      	movs	r3, #0
String::String(const String &value)
   d81e4:	4604      	mov	r4, r0
	capacity = 0;
   d81e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d81ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d81ec:	7303      	strb	r3, [r0, #12]
	*this = value;
   d81ee:	f7ff ffe8 	bl	d81c2 <_ZN6StringaSERKS_>
}
   d81f2:	4620      	mov	r0, r4
   d81f4:	bd10      	pop	{r4, pc}

000d81f6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d81f6:	b570      	push	{r4, r5, r6, lr}
   d81f8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d81fa:	460e      	mov	r6, r1
   d81fc:	b909      	cbnz	r1, d8202 <_ZN6String6concatEPKcj+0xc>
   d81fe:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8200:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8202:	b16a      	cbz	r2, d8220 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d8204:	6884      	ldr	r4, [r0, #8]
   d8206:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d8208:	4621      	mov	r1, r4
   d820a:	f7ff ff99 	bl	d8140 <_ZN6String7reserveEj>
   d820e:	2800      	cmp	r0, #0
   d8210:	d0f5      	beq.n	d81fe <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8212:	6828      	ldr	r0, [r5, #0]
   d8214:	68ab      	ldr	r3, [r5, #8]
   d8216:	4631      	mov	r1, r6
   d8218:	4418      	add	r0, r3
   d821a:	f001 fb3f 	bl	d989c <strcpy>
	len = newlen;
   d821e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d8220:	2001      	movs	r0, #1
   d8222:	e7ed      	b.n	d8200 <_ZN6String6concatEPKcj+0xa>

000d8224 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d8224:	b513      	push	{r0, r1, r4, lr}
   d8226:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8228:	b929      	cbnz	r1, d8236 <_ZplRK15StringSumHelperPKc+0x12>
   d822a:	4620      	mov	r0, r4
   d822c:	f7ff ff71 	bl	d8112 <_ZN6String10invalidateEv>
	return a;
}
   d8230:	4620      	mov	r0, r4
   d8232:	b002      	add	sp, #8
   d8234:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8236:	4608      	mov	r0, r1
   d8238:	9101      	str	r1, [sp, #4]
   d823a:	f001 fb54 	bl	d98e6 <strlen>
   d823e:	9901      	ldr	r1, [sp, #4]
   d8240:	4602      	mov	r2, r0
   d8242:	4620      	mov	r0, r4
   d8244:	f7ff ffd7 	bl	d81f6 <_ZN6String6concatEPKcj>
   d8248:	2800      	cmp	r0, #0
   d824a:	d0ee      	beq.n	d822a <_ZplRK15StringSumHelperPKc+0x6>
   d824c:	e7f0      	b.n	d8230 <_ZplRK15StringSumHelperPKc+0xc>

000d824e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d824e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8250:	6882      	ldr	r2, [r0, #8]
   d8252:	b93a      	cbnz	r2, d8264 <_ZNK6String6equalsEPKc+0x16>
   d8254:	b121      	cbz	r1, d8260 <_ZNK6String6equalsEPKc+0x12>
   d8256:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d8258:	fab0 f080 	clz	r0, r0
   d825c:	0940      	lsrs	r0, r0, #5
   d825e:	e000      	b.n	d8262 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8260:	2001      	movs	r0, #1
}
   d8262:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8264:	6800      	ldr	r0, [r0, #0]
   d8266:	b909      	cbnz	r1, d826c <_ZNK6String6equalsEPKc+0x1e>
   d8268:	7800      	ldrb	r0, [r0, #0]
   d826a:	e7f5      	b.n	d8258 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d826c:	f001 fb0c 	bl	d9888 <strcmp>
   d8270:	e7f2      	b.n	d8258 <_ZNK6String6equalsEPKc+0xa>
	...

000d8274 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d8274:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d8276:	6800      	ldr	r0, [r0, #0]
   d8278:	b140      	cbz	r0, d828c <_ZNK6String7toFloatEv+0x18>
   d827a:	f001 fa89 	bl	d9790 <atof>
   d827e:	ec51 0b10 	vmov	r0, r1, d0
   d8282:	f001 f9f1 	bl	d9668 <__aeabi_d2f>
   d8286:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d828a:	bd08      	pop	{r3, pc}
	return 0;
   d828c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8294 <_ZNK6String7toFloatEv+0x20>
   d8290:	e7fb      	b.n	d828a <_ZNK6String7toFloatEv+0x16>
   d8292:	bf00      	nop
   d8294:	00000000 	.word	0x00000000

000d8298 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d8298:	b507      	push	{r0, r1, r2, lr}
   d829a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d829c:	2100      	movs	r1, #0
{
   d829e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d82a0:	9100      	str	r1, [sp, #0]
   d82a2:	2001      	movs	r0, #1
   d82a4:	218c      	movs	r1, #140	; 0x8c
   d82a6:	f7fe ffeb 	bl	d7280 <system_reset>
}
   d82aa:	b003      	add	sp, #12
   d82ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d82b0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d82b0:	4601      	mov	r1, r0
    reset(0, flags);
   d82b2:	2000      	movs	r0, #0
   d82b4:	f7ff bff0 	b.w	d8298 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d82b8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d82b8:	2000      	movs	r0, #0
   d82ba:	f7ff bff9 	b.w	d82b0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d82c0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d82c0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d82c2:	4b09      	ldr	r3, [pc, #36]	; (d82e8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d82c4:	4c09      	ldr	r4, [pc, #36]	; (d82ec <_GLOBAL__sub_I_System+0x2c>)
   d82c6:	2202      	movs	r2, #2
   d82c8:	2000      	movs	r0, #0
   d82ca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d82cc:	4b08      	ldr	r3, [pc, #32]	; (d82f0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d82ce:	6020      	str	r0, [r4, #0]
   d82d0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d82d2:	71a0      	strb	r0, [r4, #6]
   d82d4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d82d6:	f7fe ff87 	bl	d71e8 <set_system_mode>
SystemClass System;
   d82da:	4620      	mov	r0, r4
   d82dc:	4a05      	ldr	r2, [pc, #20]	; (d82f4 <_GLOBAL__sub_I_System+0x34>)
   d82de:	4906      	ldr	r1, [pc, #24]	; (d82f8 <_GLOBAL__sub_I_System+0x38>)
   d82e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d82e4:	f000 bc02 	b.w	d8aec <__aeabi_atexit>
   d82e8:	2003e644 	.word	0x2003e644
   d82ec:	2003e638 	.word	0x2003e638
   d82f0:	ffff0000 	.word	0xffff0000
   d82f4:	2003d9f8 	.word	0x2003d9f8
   d82f8:	000d4237 	.word	0x000d4237

000d82fc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d82fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d8300:	4a15      	ldr	r2, [pc, #84]	; (d8358 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8302:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8364 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d8306:	e9d2 3200 	ldrd	r3, r2, [r2]
   d830a:	18c0      	adds	r0, r0, r3
   d830c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d8310:	4a12      	ldr	r2, [pc, #72]	; (d835c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d8312:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8316:	18c6      	adds	r6, r0, r3
   d8318:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d831c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d8320:	42bb      	cmp	r3, r7
   d8322:	bf08      	it	eq
   d8324:	42b2      	cmpeq	r2, r6
{
   d8326:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d8328:	d013      	beq.n	d8352 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d832a:	a903      	add	r1, sp, #12
   d832c:	4668      	mov	r0, sp
   d832e:	e9cd 6700 	strd	r6, r7, [sp]
   d8332:	f7ff f8c7 	bl	d74c4 <localtime_r>
	calendar_time.tm_year += 1900;
   d8336:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8338:	4d09      	ldr	r5, [pc, #36]	; (d8360 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d833a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d833e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8340:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d834a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d834e:	6823      	ldr	r3, [r4, #0]
   d8350:	602b      	str	r3, [r5, #0]
    }
}
   d8352:	b00c      	add	sp, #48	; 0x30
   d8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8358:	2003e680 	.word	0x2003e680
   d835c:	2003e678 	.word	0x2003e678
   d8360:	2003e650 	.word	0x2003e650
   d8364:	2003e688 	.word	0x2003e688

000d8368 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8368:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d836a:	2000      	movs	r0, #0
   d836c:	f7fe ffda 	bl	d7324 <spark_sync_time_pending>
   d8370:	b128      	cbz	r0, d837e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8372:	f7fe ffaf 	bl	d72d4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8376:	f080 0001 	eor.w	r0, r0, #1
   d837a:	b2c0      	uxtb	r0, r0
    }
   d837c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d837e:	2001      	movs	r0, #1
   d8380:	e7fc      	b.n	d837c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8382 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8382:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8384:	4602      	mov	r2, r0
   d8386:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8388:	4668      	mov	r0, sp
    struct timeval tv = {
   d838a:	2100      	movs	r1, #0
    };
   d838c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8390:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8394:	f7fe fdd0 	bl	d6f38 <hal_rtc_set_time>
   d8398:	4602      	mov	r2, r0
   d839a:	b910      	cbnz	r0, d83a2 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d839c:	4601      	mov	r1, r0
   d839e:	f7fe ff53 	bl	d7248 <system_notify_time_changed>
    }
}
   d83a2:	b005      	add	sp, #20
   d83a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d83a8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d83a8:	b530      	push	{r4, r5, lr}
   d83aa:	4604      	mov	r4, r0
    t += time_zone_cache;
   d83ac:	4818      	ldr	r0, [pc, #96]	; (d8410 <_ZN9TimeClass7timeStrEx+0x68>)
   d83ae:	e9d0 1000 	ldrd	r1, r0, [r0]
   d83b2:	1852      	adds	r2, r2, r1
   d83b4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d83b8:	4816      	ldr	r0, [pc, #88]	; (d8414 <_ZN9TimeClass7timeStrEx+0x6c>)
   d83ba:	e9d0 1000 	ldrd	r1, r0, [r0]
   d83be:	1852      	adds	r2, r2, r1
{
   d83c0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d83c2:	eb40 0303 	adc.w	r3, r0, r3
   d83c6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d83ca:	2224      	movs	r2, #36	; 0x24
   d83cc:	eb0d 0002 	add.w	r0, sp, r2
   d83d0:	2100      	movs	r1, #0
   d83d2:	f001 fa2d 	bl	d9830 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d83d6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d83d8:	a909      	add	r1, sp, #36	; 0x24
   d83da:	4668      	mov	r0, sp
   d83dc:	f7ff f872 	bl	d74c4 <localtime_r>
    char ascstr[26] = {};
   d83e0:	2216      	movs	r2, #22
   d83e2:	4629      	mov	r1, r5
   d83e4:	a803      	add	r0, sp, #12
   d83e6:	9502      	str	r5, [sp, #8]
   d83e8:	f001 fa22 	bl	d9830 <memset>
    asctime_r(&calendar_time, ascstr);
   d83ec:	a902      	add	r1, sp, #8
   d83ee:	a809      	add	r0, sp, #36	; 0x24
   d83f0:	f001 f9a8 	bl	d9744 <asctime_r>
    int len = strlen(ascstr);
   d83f4:	a802      	add	r0, sp, #8
   d83f6:	f001 fa76 	bl	d98e6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d83fa:	ab12      	add	r3, sp, #72	; 0x48
   d83fc:	4418      	add	r0, r3
    return String(ascstr);
   d83fe:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d8400:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d8404:	4620      	mov	r0, r4
   d8406:	f7ff fec8 	bl	d819a <_ZN6StringC1EPKc>
}
   d840a:	4620      	mov	r0, r4
   d840c:	b013      	add	sp, #76	; 0x4c
   d840e:	bd30      	pop	{r4, r5, pc}
   d8410:	2003e680 	.word	0x2003e680
   d8414:	2003e678 	.word	0x2003e678

000d8418 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d841c:	b0a5      	sub	sp, #148	; 0x94
   d841e:	4607      	mov	r7, r0
   d8420:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8422:	a814      	add	r0, sp, #80	; 0x50
{
   d8424:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8426:	223f      	movs	r2, #63	; 0x3f
{
   d8428:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d842a:	f001 fa76 	bl	d991a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d842e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8430:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8432:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8436:	f001 fa56 	bl	d98e6 <strlen>
   d843a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d843c:	bb5d      	cbnz	r5, d8496 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d843e:	492a      	ldr	r1, [pc, #168]	; (d84e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8440:	a803      	add	r0, sp, #12
   d8442:	f001 fa2b 	bl	d989c <strcpy>
   d8446:	ae14      	add	r6, sp, #80	; 0x50
{
   d8448:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d844a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d844e:	45ab      	cmp	fp, r5
   d8450:	d936      	bls.n	d84c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8452:	46b1      	mov	r9, r6
   d8454:	f105 0a01 	add.w	sl, r5, #1
   d8458:	f819 3b01 	ldrb.w	r3, [r9], #1
   d845c:	2b25      	cmp	r3, #37	; 0x25
   d845e:	d117      	bne.n	d8490 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8460:	7873      	ldrb	r3, [r6, #1]
   d8462:	2b7a      	cmp	r3, #122	; 0x7a
   d8464:	d114      	bne.n	d8490 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d8466:	a803      	add	r0, sp, #12
   d8468:	f001 fa3d 	bl	d98e6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d846c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d846e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8470:	1828      	adds	r0, r5, r0
   d8472:	4418      	add	r0, r3
   d8474:	ebab 0205 	sub.w	r2, fp, r5
   d8478:	1cb1      	adds	r1, r6, #2
   d847a:	f001 f9b1 	bl	d97e0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d847e:	4622      	mov	r2, r4
   d8480:	a903      	add	r1, sp, #12
   d8482:	4630      	mov	r0, r6
   d8484:	f001 f9ac 	bl	d97e0 <memcpy>
            len = strlen(format_str);
   d8488:	a814      	add	r0, sp, #80	; 0x50
   d848a:	f001 fa2c 	bl	d98e6 <strlen>
   d848e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8490:	464e      	mov	r6, r9
   d8492:	4655      	mov	r5, sl
   d8494:	e7d9      	b.n	d844a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8496:	213c      	movs	r1, #60	; 0x3c
   d8498:	fb95 f3f1 	sdiv	r3, r5, r1
   d849c:	2b00      	cmp	r3, #0
   d849e:	bfb8      	it	lt
   d84a0:	425b      	neglt	r3, r3
   d84a2:	fbb3 f2f1 	udiv	r2, r3, r1
   d84a6:	fb01 3312 	mls	r3, r1, r2, r3
   d84aa:	9300      	str	r3, [sp, #0]
   d84ac:	4a0f      	ldr	r2, [pc, #60]	; (d84ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d84ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d84b2:	2110      	movs	r1, #16
   d84b4:	a803      	add	r0, sp, #12
   d84b6:	fb95 f3f3 	sdiv	r3, r5, r3
   d84ba:	f7fe ffd3 	bl	d7464 <snprintf>
   d84be:	e7c2      	b.n	d8446 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d84c0:	2100      	movs	r1, #0
   d84c2:	222e      	movs	r2, #46	; 0x2e
   d84c4:	a808      	add	r0, sp, #32
   d84c6:	9107      	str	r1, [sp, #28]
   d84c8:	f001 f9b2 	bl	d9830 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d84cc:	4643      	mov	r3, r8
   d84ce:	aa14      	add	r2, sp, #80	; 0x50
   d84d0:	2132      	movs	r1, #50	; 0x32
   d84d2:	a807      	add	r0, sp, #28
   d84d4:	f7fe ffee 	bl	d74b4 <strftime>
    return String(buf);
   d84d8:	a907      	add	r1, sp, #28
   d84da:	4638      	mov	r0, r7
   d84dc:	f7ff fe5d 	bl	d819a <_ZN6StringC1EPKc>
}
   d84e0:	4638      	mov	r0, r7
   d84e2:	b025      	add	sp, #148	; 0x94
   d84e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84e8:	000dc26c 	.word	0x000dc26c
   d84ec:	000dc26e 	.word	0x000dc26e

000d84f0 <_ZN9TimeClass6formatExPKc>:
{
   d84f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d84f2:	b08d      	sub	sp, #52	; 0x34
   d84f4:	e9cd 2300 	strd	r2, r3, [sp]
   d84f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d84fa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d84fc:	b915      	cbnz	r5, d8504 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d84fe:	4b19      	ldr	r3, [pc, #100]	; (d8564 <_ZN9TimeClass6formatExPKc+0x74>)
   d8500:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d8502:	b12d      	cbz	r5, d8510 <_ZN9TimeClass6formatExPKc+0x20>
   d8504:	4b18      	ldr	r3, [pc, #96]	; (d8568 <_ZN9TimeClass6formatExPKc+0x78>)
   d8506:	4628      	mov	r0, r5
   d8508:	6819      	ldr	r1, [r3, #0]
   d850a:	f001 f9bd 	bl	d9888 <strcmp>
   d850e:	b938      	cbnz	r0, d8520 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d8510:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8514:	4620      	mov	r0, r4
   d8516:	f7ff ff47 	bl	d83a8 <_ZN9TimeClass7timeStrEx>
}
   d851a:	4620      	mov	r0, r4
   d851c:	b00d      	add	sp, #52	; 0x34
   d851e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d8520:	4e12      	ldr	r6, [pc, #72]	; (d856c <_ZN9TimeClass6formatExPKc+0x7c>)
   d8522:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d8524:	4f12      	ldr	r7, [pc, #72]	; (d8570 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d8526:	e9d6 3200 	ldrd	r3, r2, [r6]
   d852a:	185b      	adds	r3, r3, r1
   d852c:	9901      	ldr	r1, [sp, #4]
   d852e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8532:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8536:	181b      	adds	r3, r3, r0
   d8538:	eb41 0202 	adc.w	r2, r1, r2
   d853c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d8540:	2100      	movs	r1, #0
   d8542:	2224      	movs	r2, #36	; 0x24
   d8544:	a803      	add	r0, sp, #12
   d8546:	f001 f973 	bl	d9830 <memset>
    localtime_r(&t, &calendar_time);
   d854a:	a903      	add	r1, sp, #12
   d854c:	4668      	mov	r0, sp
   d854e:	f7fe ffb9 	bl	d74c4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8552:	6832      	ldr	r2, [r6, #0]
   d8554:	683b      	ldr	r3, [r7, #0]
   d8556:	a903      	add	r1, sp, #12
   d8558:	4413      	add	r3, r2
   d855a:	4620      	mov	r0, r4
   d855c:	462a      	mov	r2, r5
   d855e:	f7ff ff5b 	bl	d8418 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8562:	e7da      	b.n	d851a <_ZN9TimeClass6formatExPKc+0x2a>
   d8564:	2003e64c 	.word	0x2003e64c
   d8568:	2003d818 	.word	0x2003d818
   d856c:	2003e680 	.word	0x2003e680
   d8570:	2003e678 	.word	0x2003e678

000d8574 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8574:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8576:	2000      	movs	r0, #0
   d8578:	f7fe fcc6 	bl	d6f08 <hal_rtc_time_is_valid>
    if (rtcstate)
   d857c:	4604      	mov	r4, r0
   d857e:	b9a0      	cbnz	r0, d85aa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8580:	f7fe fe2a 	bl	d71d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8584:	2801      	cmp	r0, #1
   d8586:	d110      	bne.n	d85aa <_ZN9TimeClass7isValidEv+0x36>
   d8588:	4620      	mov	r0, r4
   d858a:	f7fe fe55 	bl	d7238 <system_thread_get_state>
   d858e:	b960      	cbnz	r0, d85aa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8590:	f7ff feea 	bl	d8368 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8594:	b910      	cbnz	r0, d859c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8596:	f7fe fe8d 	bl	d72b4 <spark_process>
        while (_while() && !_condition()) {
   d859a:	e7f9      	b.n	d8590 <_ZN9TimeClass7isValidEv+0x1c>
   d859c:	f7ff fee4 	bl	d8368 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d85a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d85a4:	2000      	movs	r0, #0
   d85a6:	f7fe bcaf 	b.w	d6f08 <hal_rtc_time_is_valid>
}
   d85aa:	4620      	mov	r0, r4
   d85ac:	bd10      	pop	{r4, pc}

000d85ae <_ZN9TimeClass3nowEv>:
{
   d85ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d85b0:	f7ff ffe0 	bl	d8574 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d85b4:	2210      	movs	r2, #16
   d85b6:	2100      	movs	r1, #0
   d85b8:	4668      	mov	r0, sp
   d85ba:	f001 f939 	bl	d9830 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d85be:	2100      	movs	r1, #0
   d85c0:	4668      	mov	r0, sp
   d85c2:	f7fe fcb1 	bl	d6f28 <hal_rtc_get_time>
}
   d85c6:	9800      	ldr	r0, [sp, #0]
   d85c8:	b005      	add	sp, #20
   d85ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85d0 <_ZN9TimeClass4hourEv>:
{
   d85d0:	b508      	push	{r3, lr}
	return hour(now());
   d85d2:	f7ff ffec 	bl	d85ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d85d6:	17c1      	asrs	r1, r0, #31
   d85d8:	f7ff fe90 	bl	d82fc <_ZL22Refresh_UnixTime_Cachex>
}
   d85dc:	4b01      	ldr	r3, [pc, #4]	; (d85e4 <_ZN9TimeClass4hourEv+0x14>)
   d85de:	6898      	ldr	r0, [r3, #8]
   d85e0:	bd08      	pop	{r3, pc}
   d85e2:	bf00      	nop
   d85e4:	2003e650 	.word	0x2003e650

000d85e8 <_ZN9TimeClass4yearEv>:
{
   d85e8:	b508      	push	{r3, lr}
	return year(now());
   d85ea:	f7ff ffe0 	bl	d85ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d85ee:	17c1      	asrs	r1, r0, #31
   d85f0:	f7ff fe84 	bl	d82fc <_ZL22Refresh_UnixTime_Cachex>
}
   d85f4:	4b01      	ldr	r3, [pc, #4]	; (d85fc <_ZN9TimeClass4yearEv+0x14>)
   d85f6:	6958      	ldr	r0, [r3, #20]
   d85f8:	bd08      	pop	{r3, pc}
   d85fa:	bf00      	nop
   d85fc:	2003e650 	.word	0x2003e650

000d8600 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8600:	4b02      	ldr	r3, [pc, #8]	; (d860c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8602:	681a      	ldr	r2, [r3, #0]
   d8604:	4b02      	ldr	r3, [pc, #8]	; (d8610 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8606:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8608:	4770      	bx	lr
   d860a:	bf00      	nop
   d860c:	2003d818 	.word	0x2003d818
   d8610:	2003e64c 	.word	0x2003e64c

000d8614 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8614:	4770      	bx	lr

000d8616 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8616:	7441      	strb	r1, [r0, #17]
}
   d8618:	4770      	bx	lr

000d861a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d861a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d861c:	7c00      	ldrb	r0, [r0, #16]
   d861e:	f7fe fd93 	bl	d7148 <hal_usart_available_data_for_write>
}
   d8622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8626:	bd08      	pop	{r3, pc}

000d8628 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8628:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d862a:	7c00      	ldrb	r0, [r0, #16]
   d862c:	f7fe fd64 	bl	d70f8 <hal_usart_available>
}
   d8630:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8634:	bd08      	pop	{r3, pc}

000d8636 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8636:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8638:	7c00      	ldrb	r0, [r0, #16]
   d863a:	f7fe fd6d 	bl	d7118 <hal_usart_peek>
}
   d863e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8642:	bd08      	pop	{r3, pc}

000d8644 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8644:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8646:	7c00      	ldrb	r0, [r0, #16]
   d8648:	f7fe fd5e 	bl	d7108 <hal_usart_read>
}
   d864c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8650:	bd08      	pop	{r3, pc}

000d8652 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8652:	7c00      	ldrb	r0, [r0, #16]
   d8654:	f7fe bd68 	b.w	d7128 <hal_usart_flush>

000d8658 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8658:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d865a:	7c45      	ldrb	r5, [r0, #17]
{
   d865c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d865e:	b12d      	cbz	r5, d866c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8660:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8662:	b003      	add	sp, #12
   d8664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8668:	f7fe bd3e 	b.w	d70e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d866c:	7c00      	ldrb	r0, [r0, #16]
   d866e:	9101      	str	r1, [sp, #4]
   d8670:	f7fe fd6a 	bl	d7148 <hal_usart_available_data_for_write>
   d8674:	2800      	cmp	r0, #0
   d8676:	9901      	ldr	r1, [sp, #4]
   d8678:	dcf2      	bgt.n	d8660 <_ZN11USARTSerial5writeEh+0x8>
}
   d867a:	4628      	mov	r0, r5
   d867c:	b003      	add	sp, #12
   d867e:	bd30      	pop	{r4, r5, pc}

000d8680 <_ZN11USARTSerialD0Ev>:
   d8680:	b510      	push	{r4, lr}
   d8682:	2114      	movs	r1, #20
   d8684:	4604      	mov	r4, r0
   d8686:	f000 fa36 	bl	d8af6 <_ZdlPvj>
   d868a:	4620      	mov	r0, r4
   d868c:	bd10      	pop	{r4, pc}
	...

000d8690 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8690:	b510      	push	{r4, lr}
   d8692:	f04f 0c00 	mov.w	ip, #0
   d8696:	4604      	mov	r4, r0
   d8698:	4608      	mov	r0, r1
   d869a:	4611      	mov	r1, r2
   d869c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86a0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d86a4:	4a04      	ldr	r2, [pc, #16]	; (d86b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d86a6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d86a8:	2201      	movs	r2, #1
  _serial = serial;
   d86aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d86ac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d86ae:	461a      	mov	r2, r3
   d86b0:	f7fe fd12 	bl	d70d8 <hal_usart_init>
}
   d86b4:	4620      	mov	r0, r4
   d86b6:	bd10      	pop	{r4, pc}
   d86b8:	000dc2a0 	.word	0x000dc2a0

000d86bc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d86bc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d86be:	4c0e      	ldr	r4, [pc, #56]	; (d86f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d86c0:	7821      	ldrb	r1, [r4, #0]
   d86c2:	f3bf 8f5b 	dmb	ish
   d86c6:	f011 0101 	ands.w	r1, r1, #1
   d86ca:	d112      	bne.n	d86f2 <_Z22__fetch_global_Serial1v+0x36>
   d86cc:	4620      	mov	r0, r4
   d86ce:	9101      	str	r1, [sp, #4]
   d86d0:	f7fb fcf2 	bl	d40b8 <__cxa_guard_acquire>
   d86d4:	9901      	ldr	r1, [sp, #4]
   d86d6:	b160      	cbz	r0, d86f2 <_Z22__fetch_global_Serial1v+0x36>
   d86d8:	4a08      	ldr	r2, [pc, #32]	; (d86fc <_Z22__fetch_global_Serial1v+0x40>)
   d86da:	4b09      	ldr	r3, [pc, #36]	; (d8700 <_Z22__fetch_global_Serial1v+0x44>)
   d86dc:	4809      	ldr	r0, [pc, #36]	; (d8704 <_Z22__fetch_global_Serial1v+0x48>)
   d86de:	f7ff ffd7 	bl	d8690 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d86e2:	4620      	mov	r0, r4
   d86e4:	f7fb fced 	bl	d40c2 <__cxa_guard_release>
   d86e8:	4a07      	ldr	r2, [pc, #28]	; (d8708 <_Z22__fetch_global_Serial1v+0x4c>)
   d86ea:	4908      	ldr	r1, [pc, #32]	; (d870c <_Z22__fetch_global_Serial1v+0x50>)
   d86ec:	4805      	ldr	r0, [pc, #20]	; (d8704 <_Z22__fetch_global_Serial1v+0x48>)
   d86ee:	f000 f9fd 	bl	d8aec <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d86f2:	4804      	ldr	r0, [pc, #16]	; (d8704 <_Z22__fetch_global_Serial1v+0x48>)
   d86f4:	b002      	add	sp, #8
   d86f6:	bd10      	pop	{r4, pc}
   d86f8:	2003e690 	.word	0x2003e690
   d86fc:	2003e694 	.word	0x2003e694
   d8700:	2003e718 	.word	0x2003e718
   d8704:	2003e79c 	.word	0x2003e79c
   d8708:	2003d9f8 	.word	0x2003d9f8
   d870c:	000d8615 	.word	0x000d8615

000d8710 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8710:	7441      	strb	r1, [r0, #17]
}
   d8712:	4770      	bx	lr

000d8714 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8714:	4770      	bx	lr

000d8716 <_ZN9USBSerial4readEv>:
{
   d8716:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8718:	2100      	movs	r1, #0
   d871a:	7c00      	ldrb	r0, [r0, #16]
   d871c:	f7fe fd34 	bl	d7188 <HAL_USB_USART_Receive_Data>
}
   d8720:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8724:	bd08      	pop	{r3, pc}

000d8726 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8726:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8728:	2101      	movs	r1, #1
   d872a:	7c00      	ldrb	r0, [r0, #16]
   d872c:	f7fe fd2c 	bl	d7188 <HAL_USB_USART_Receive_Data>
}
   d8730:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8734:	bd08      	pop	{r3, pc}

000d8736 <_ZN9USBSerial17availableForWriteEv>:
{
   d8736:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8738:	7c00      	ldrb	r0, [r0, #16]
   d873a:	f7fe fd1d 	bl	d7178 <HAL_USB_USART_Available_Data_For_Write>
}
   d873e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8742:	bd08      	pop	{r3, pc}

000d8744 <_ZN9USBSerial9availableEv>:
{
   d8744:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8746:	7c00      	ldrb	r0, [r0, #16]
   d8748:	f7fe fd0e 	bl	d7168 <HAL_USB_USART_Available_Data>
}
   d874c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8750:	bd08      	pop	{r3, pc}

000d8752 <_ZN9USBSerial5writeEh>:
{
   d8752:	b513      	push	{r0, r1, r4, lr}
   d8754:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8756:	7c00      	ldrb	r0, [r0, #16]
{
   d8758:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d875a:	f7fe fd0d 	bl	d7178 <HAL_USB_USART_Available_Data_For_Write>
   d875e:	2800      	cmp	r0, #0
   d8760:	9901      	ldr	r1, [sp, #4]
   d8762:	dc01      	bgt.n	d8768 <_ZN9USBSerial5writeEh+0x16>
   d8764:	7c60      	ldrb	r0, [r4, #17]
   d8766:	b120      	cbz	r0, d8772 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8768:	7c20      	ldrb	r0, [r4, #16]
   d876a:	f7fe fd15 	bl	d7198 <HAL_USB_USART_Send_Data>
   d876e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8772:	b002      	add	sp, #8
   d8774:	bd10      	pop	{r4, pc}

000d8776 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8776:	7c00      	ldrb	r0, [r0, #16]
   d8778:	f7fe bd16 	b.w	d71a8 <HAL_USB_USART_Flush_Data>

000d877c <_ZN9USBSerialD0Ev>:
   d877c:	b510      	push	{r4, lr}
   d877e:	2114      	movs	r1, #20
   d8780:	4604      	mov	r4, r0
   d8782:	f000 f9b8 	bl	d8af6 <_ZdlPvj>
   d8786:	4620      	mov	r0, r4
   d8788:	bd10      	pop	{r4, pc}
	...

000d878c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d878c:	b510      	push	{r4, lr}
   d878e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8792:	4604      	mov	r4, r0
   d8794:	4608      	mov	r0, r1
   d8796:	2100      	movs	r1, #0
   d8798:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d879c:	4b04      	ldr	r3, [pc, #16]	; (d87b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d879e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d87a0:	2301      	movs	r3, #1
  _serial = serial;
   d87a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d87a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d87a6:	4611      	mov	r1, r2
   d87a8:	f7fe fcd6 	bl	d7158 <HAL_USB_USART_Init>
}
   d87ac:	4620      	mov	r0, r4
   d87ae:	bd10      	pop	{r4, pc}
   d87b0:	000dc2d0 	.word	0x000dc2d0

000d87b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d87b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d87b6:	2214      	movs	r2, #20
{
   d87b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d87ba:	2100      	movs	r1, #0
   d87bc:	f001 f838 	bl	d9830 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d87c0:	4620      	mov	r0, r4
   d87c2:	bd10      	pop	{r4, pc}

000d87c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d87c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87c6:	4c10      	ldr	r4, [pc, #64]	; (d8808 <_Z16_fetch_usbserialv+0x44>)
{
   d87c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d87ca:	a803      	add	r0, sp, #12
   d87cc:	f7ff fff2 	bl	d87b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87d0:	7821      	ldrb	r1, [r4, #0]
   d87d2:	f3bf 8f5b 	dmb	ish
   d87d6:	f011 0101 	ands.w	r1, r1, #1
   d87da:	d111      	bne.n	d8800 <_Z16_fetch_usbserialv+0x3c>
   d87dc:	4620      	mov	r0, r4
   d87de:	9101      	str	r1, [sp, #4]
   d87e0:	f7fb fc6a 	bl	d40b8 <__cxa_guard_acquire>
   d87e4:	9901      	ldr	r1, [sp, #4]
   d87e6:	b158      	cbz	r0, d8800 <_Z16_fetch_usbserialv+0x3c>
   d87e8:	aa03      	add	r2, sp, #12
   d87ea:	4808      	ldr	r0, [pc, #32]	; (d880c <_Z16_fetch_usbserialv+0x48>)
   d87ec:	f7ff ffce 	bl	d878c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d87f0:	4620      	mov	r0, r4
   d87f2:	f7fb fc66 	bl	d40c2 <__cxa_guard_release>
   d87f6:	4a06      	ldr	r2, [pc, #24]	; (d8810 <_Z16_fetch_usbserialv+0x4c>)
   d87f8:	4906      	ldr	r1, [pc, #24]	; (d8814 <_Z16_fetch_usbserialv+0x50>)
   d87fa:	4804      	ldr	r0, [pc, #16]	; (d880c <_Z16_fetch_usbserialv+0x48>)
   d87fc:	f000 f976 	bl	d8aec <__aeabi_atexit>
	return _usbserial;
}
   d8800:	4802      	ldr	r0, [pc, #8]	; (d880c <_Z16_fetch_usbserialv+0x48>)
   d8802:	b008      	add	sp, #32
   d8804:	bd10      	pop	{r4, pc}
   d8806:	bf00      	nop
   d8808:	2003e7b0 	.word	0x2003e7b0
   d880c:	2003e7b4 	.word	0x2003e7b4
   d8810:	2003d9f8 	.word	0x2003d9f8
   d8814:	000d8715 	.word	0x000d8715

000d8818 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8818:	4b01      	ldr	r3, [pc, #4]	; (d8820 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d881a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d881c:	4770      	bx	lr
   d881e:	bf00      	nop
   d8820:	2003d820 	.word	0x2003d820

000d8824 <serialEventRun>:
{
   d8824:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8826:	4b0b      	ldr	r3, [pc, #44]	; (d8854 <serialEventRun+0x30>)
   d8828:	b143      	cbz	r3, d883c <serialEventRun+0x18>
   d882a:	f7ff ffcb 	bl	d87c4 <_Z16_fetch_usbserialv>
   d882e:	6803      	ldr	r3, [r0, #0]
   d8830:	691b      	ldr	r3, [r3, #16]
   d8832:	4798      	blx	r3
   d8834:	2800      	cmp	r0, #0
   d8836:	dd01      	ble.n	d883c <serialEventRun+0x18>
        serialEvent();
   d8838:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d883c:	4b06      	ldr	r3, [pc, #24]	; (d8858 <serialEventRun+0x34>)
   d883e:	b143      	cbz	r3, d8852 <serialEventRun+0x2e>
   d8840:	f7ff ff3c 	bl	d86bc <_Z22__fetch_global_Serial1v>
   d8844:	6803      	ldr	r3, [r0, #0]
   d8846:	691b      	ldr	r3, [r3, #16]
   d8848:	4798      	blx	r3
   d884a:	2800      	cmp	r0, #0
   d884c:	dd01      	ble.n	d8852 <serialEventRun+0x2e>
        serialEvent1();
   d884e:	f3af 8000 	nop.w
}
   d8852:	bd08      	pop	{r3, pc}
	...

000d885c <_post_loop>:
{
   d885c:	b508      	push	{r3, lr}
	serialEventRun();
   d885e:	f7ff ffe1 	bl	d8824 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8862:	f7fe fb49 	bl	d6ef8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8866:	4b01      	ldr	r3, [pc, #4]	; (d886c <_post_loop+0x10>)
   d8868:	6018      	str	r0, [r3, #0]
}
   d886a:	bd08      	pop	{r3, pc}
   d886c:	2003e7dc 	.word	0x2003e7dc

000d8870 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8870:	4802      	ldr	r0, [pc, #8]	; (d887c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8872:	4a03      	ldr	r2, [pc, #12]	; (d8880 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8874:	4903      	ldr	r1, [pc, #12]	; (d8884 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8876:	1a12      	subs	r2, r2, r0
   d8878:	f000 bfb2 	b.w	d97e0 <memcpy>
   d887c:	2003f400 	.word	0x2003f400
   d8880:	2003fc04 	.word	0x2003fc04
   d8884:	000dc600 	.word	0x000dc600

000d8888 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8888:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d888a:	2300      	movs	r3, #0
   d888c:	9300      	str	r3, [sp, #0]
   d888e:	461a      	mov	r2, r3
   d8890:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8894:	f7fe fcea 	bl	d726c <system_ctrl_set_result>
}
   d8898:	b003      	add	sp, #12
   d889a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d88a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d88a2:	8843      	ldrh	r3, [r0, #2]
   d88a4:	2b0a      	cmp	r3, #10
   d88a6:	d008      	beq.n	d88ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d88a8:	2b50      	cmp	r3, #80	; 0x50
   d88aa:	d10b      	bne.n	d88c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d88ac:	4b09      	ldr	r3, [pc, #36]	; (d88d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d88ae:	681b      	ldr	r3, [r3, #0]
   d88b0:	b14b      	cbz	r3, d88c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d88b2:	b003      	add	sp, #12
   d88b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d88b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d88ba:	f7ff ffe5 	bl	d8888 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d88be:	b003      	add	sp, #12
   d88c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d88c4:	2300      	movs	r3, #0
   d88c6:	9300      	str	r3, [sp, #0]
   d88c8:	461a      	mov	r2, r3
   d88ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d88ce:	f7fe fccd 	bl	d726c <system_ctrl_set_result>
}
   d88d2:	e7f4      	b.n	d88be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d88d4:	2003e7cc 	.word	0x2003e7cc

000d88d8 <module_user_init_hook>:
{
   d88d8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d88da:	4c12      	ldr	r4, [pc, #72]	; (d8924 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d88dc:	4812      	ldr	r0, [pc, #72]	; (d8928 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d88de:	4d13      	ldr	r5, [pc, #76]	; (d892c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d88e0:	2100      	movs	r1, #0
   d88e2:	f7fe fddf 	bl	d74a4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d88e6:	6823      	ldr	r3, [r4, #0]
   d88e8:	42ab      	cmp	r3, r5
   d88ea:	4b11      	ldr	r3, [pc, #68]	; (d8930 <module_user_init_hook+0x58>)
   d88ec:	bf0c      	ite	eq
   d88ee:	2201      	moveq	r2, #1
   d88f0:	2200      	movne	r2, #0
   d88f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d88f4:	d002      	beq.n	d88fc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d88f6:	f7ff ffbb 	bl	d8870 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d88fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d88fc:	f7fe fae4 	bl	d6ec8 <HAL_RNG_GetRandomNumber>
   d8900:	4604      	mov	r4, r0
    srand(seed);
   d8902:	f000 ff9d 	bl	d9840 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8906:	4b0b      	ldr	r3, [pc, #44]	; (d8934 <module_user_init_hook+0x5c>)
   d8908:	b113      	cbz	r3, d8910 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d890a:	4620      	mov	r0, r4
   d890c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8910:	2100      	movs	r1, #0
   d8912:	4808      	ldr	r0, [pc, #32]	; (d8934 <module_user_init_hook+0x5c>)
   d8914:	f7fe fd1e 	bl	d7354 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d891c:	4806      	ldr	r0, [pc, #24]	; (d8938 <module_user_init_hook+0x60>)
   d891e:	2100      	movs	r1, #0
   d8920:	f7fe bc9a 	b.w	d7258 <system_ctrl_set_app_request_handler>
   d8924:	2003fc00 	.word	0x2003fc00
   d8928:	000d8819 	.word	0x000d8819
   d892c:	9a271c1e 	.word	0x9a271c1e
   d8930:	2003e7c8 	.word	0x2003e7c8
   d8934:	00000000 	.word	0x00000000
   d8938:	000d88a1 	.word	0x000d88a1

000d893c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d893c:	b508      	push	{r3, lr}
   d893e:	4b02      	ldr	r3, [pc, #8]	; (d8948 <spark_protocol_instance+0xc>)
   d8940:	681b      	ldr	r3, [r3, #0]
   d8942:	681b      	ldr	r3, [r3, #0]
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	bd08      	pop	{r3, pc}
   d8948:	0003025c 	.word	0x0003025c

000d894c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d894c:	b508      	push	{r3, lr}
   d894e:	4b02      	ldr	r3, [pc, #8]	; (d8958 <spark_protocol_set_product_id+0xc>)
   d8950:	681b      	ldr	r3, [r3, #0]
   d8952:	685b      	ldr	r3, [r3, #4]
   d8954:	9301      	str	r3, [sp, #4]
   d8956:	bd08      	pop	{r3, pc}
   d8958:	0003025c 	.word	0x0003025c

000d895c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d895c:	b508      	push	{r3, lr}
   d895e:	4b02      	ldr	r3, [pc, #8]	; (d8968 <spark_protocol_set_product_firmware_version+0xc>)
   d8960:	681b      	ldr	r3, [r3, #0]
   d8962:	689b      	ldr	r3, [r3, #8]
   d8964:	9301      	str	r3, [sp, #4]
   d8966:	bd08      	pop	{r3, pc}
   d8968:	0003025c 	.word	0x0003025c

000d896c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d896c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d896e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8970:	d902      	bls.n	d8978 <pinAvailable+0xc>
    return false;
   d8972:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8974:	b002      	add	sp, #8
   d8976:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8978:	f1a0 030b 	sub.w	r3, r0, #11
   d897c:	2b02      	cmp	r3, #2
   d897e:	d81a      	bhi.n	d89b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8980:	4c17      	ldr	r4, [pc, #92]	; (d89e0 <pinAvailable+0x74>)
   d8982:	7821      	ldrb	r1, [r4, #0]
   d8984:	f3bf 8f5b 	dmb	ish
   d8988:	f011 0101 	ands.w	r1, r1, #1
   d898c:	d10b      	bne.n	d89a6 <pinAvailable+0x3a>
   d898e:	4620      	mov	r0, r4
   d8990:	9101      	str	r1, [sp, #4]
   d8992:	f7fb fb91 	bl	d40b8 <__cxa_guard_acquire>
   d8996:	9901      	ldr	r1, [sp, #4]
   d8998:	b128      	cbz	r0, d89a6 <pinAvailable+0x3a>
   d899a:	4812      	ldr	r0, [pc, #72]	; (d89e4 <pinAvailable+0x78>)
   d899c:	f7ff fba8 	bl	d80f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d89a0:	4620      	mov	r0, r4
   d89a2:	f7fb fb8e 	bl	d40c2 <__cxa_guard_release>
   d89a6:	4b0f      	ldr	r3, [pc, #60]	; (d89e4 <pinAvailable+0x78>)
   d89a8:	7818      	ldrb	r0, [r3, #0]
   d89aa:	f7fe fb8d 	bl	d70c8 <hal_spi_is_enabled>
   d89ae:	2800      	cmp	r0, #0
   d89b0:	d1df      	bne.n	d8972 <pinAvailable+0x6>
  return true; // 'pin' is available
   d89b2:	2001      	movs	r0, #1
   d89b4:	e7de      	b.n	d8974 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d89b6:	2801      	cmp	r0, #1
   d89b8:	d809      	bhi.n	d89ce <pinAvailable+0x62>
   d89ba:	f000 f86f 	bl	d8a9c <_Z19__fetch_global_Wirev>
   d89be:	2100      	movs	r1, #0
   d89c0:	7c00      	ldrb	r0, [r0, #16]
   d89c2:	f7fe fb39 	bl	d7038 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d89c6:	f080 0001 	eor.w	r0, r0, #1
   d89ca:	b2c0      	uxtb	r0, r0
   d89cc:	e7d2      	b.n	d8974 <pinAvailable+0x8>
   d89ce:	3809      	subs	r0, #9
   d89d0:	2801      	cmp	r0, #1
   d89d2:	d8ee      	bhi.n	d89b2 <pinAvailable+0x46>
   d89d4:	f7ff fe72 	bl	d86bc <_Z22__fetch_global_Serial1v>
   d89d8:	7c00      	ldrb	r0, [r0, #16]
   d89da:	f7fe fbad 	bl	d7138 <hal_usart_is_enabled>
   d89de:	e7f2      	b.n	d89c6 <pinAvailable+0x5a>
   d89e0:	2003e7d0 	.word	0x2003e7d0
   d89e4:	2003e7d4 	.word	0x2003e7d4

000d89e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d89e8:	2823      	cmp	r0, #35	; 0x23
{
   d89ea:	b538      	push	{r3, r4, r5, lr}
   d89ec:	4604      	mov	r4, r0
   d89ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d89f0:	d80a      	bhi.n	d8a08 <pinMode+0x20>
   d89f2:	29ff      	cmp	r1, #255	; 0xff
   d89f4:	d008      	beq.n	d8a08 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d89f6:	f7ff ffb9 	bl	d896c <pinAvailable>
   d89fa:	b128      	cbz	r0, d8a08 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d89fc:	4629      	mov	r1, r5
   d89fe:	4620      	mov	r0, r4
}
   d8a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8a04:	f7fe baa8 	b.w	d6f58 <HAL_Pin_Mode>
}
   d8a08:	bd38      	pop	{r3, r4, r5, pc}

000d8a0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8a0a:	b538      	push	{r3, r4, r5, lr}
   d8a0c:	4604      	mov	r4, r0
   d8a0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8a10:	f7fe faaa 	bl	d6f68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8a14:	28ff      	cmp	r0, #255	; 0xff
   d8a16:	d010      	beq.n	d8a3a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8a18:	2806      	cmp	r0, #6
   d8a1a:	d804      	bhi.n	d8a26 <digitalWrite+0x1c>
   d8a1c:	234d      	movs	r3, #77	; 0x4d
   d8a1e:	fa23 f000 	lsr.w	r0, r3, r0
   d8a22:	07c3      	lsls	r3, r0, #31
   d8a24:	d409      	bmi.n	d8a3a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8a26:	4620      	mov	r0, r4
   d8a28:	f7ff ffa0 	bl	d896c <pinAvailable>
   d8a2c:	b128      	cbz	r0, d8a3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8a2e:	4629      	mov	r1, r5
   d8a30:	4620      	mov	r0, r4
}
   d8a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8a36:	f7fe ba9f 	b.w	d6f78 <HAL_GPIO_Write>
}
   d8a3a:	bd38      	pop	{r3, r4, r5, pc}

000d8a3c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8a3c:	280d      	cmp	r0, #13
{
   d8a3e:	b510      	push	{r4, lr}
   d8a40:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8a42:	bf9c      	itt	ls
   d8a44:	340e      	addls	r4, #14
   d8a46:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8a48:	4620      	mov	r0, r4
   d8a4a:	f7ff ff8f 	bl	d896c <pinAvailable>
   d8a4e:	b150      	cbz	r0, d8a66 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8a50:	2103      	movs	r1, #3
   d8a52:	4620      	mov	r0, r4
   d8a54:	f7fe fa78 	bl	d6f48 <HAL_Validate_Pin_Function>
   d8a58:	2803      	cmp	r0, #3
   d8a5a:	d104      	bne.n	d8a66 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8a5c:	4620      	mov	r0, r4
}
   d8a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8a62:	f7fe baa1 	b.w	d6fa8 <hal_adc_read>
}
   d8a66:	2000      	movs	r0, #0
   d8a68:	bd10      	pop	{r4, pc}
	...

000d8a6c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8a6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8a6e:	2300      	movs	r3, #0
   d8a70:	2520      	movs	r5, #32
   d8a72:	8043      	strh	r3, [r0, #2]
   d8a74:	2314      	movs	r3, #20
{
   d8a76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8a78:	8003      	strh	r3, [r0, #0]
   d8a7a:	6085      	str	r5, [r0, #8]
   d8a7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a7e:	4906      	ldr	r1, [pc, #24]	; (d8a98 <_Z17acquireWireBufferv+0x2c>)
   d8a80:	4628      	mov	r0, r5
   d8a82:	f000 f83c 	bl	d8afe <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a86:	4904      	ldr	r1, [pc, #16]	; (d8a98 <_Z17acquireWireBufferv+0x2c>)
	};
   d8a88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a8a:	4628      	mov	r0, r5
   d8a8c:	f000 f837 	bl	d8afe <_ZnajRKSt9nothrow_t>
	};
   d8a90:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8a92:	4620      	mov	r0, r4
   d8a94:	bd38      	pop	{r3, r4, r5, pc}
   d8a96:	bf00      	nop
   d8a98:	000dc2f8 	.word	0x000dc2f8

000d8a9c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8a9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a9e:	4d0f      	ldr	r5, [pc, #60]	; (d8adc <_Z19__fetch_global_Wirev+0x40>)
   d8aa0:	7829      	ldrb	r1, [r5, #0]
   d8aa2:	f3bf 8f5b 	dmb	ish
   d8aa6:	f011 0401 	ands.w	r4, r1, #1
{
   d8aaa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8aac:	d113      	bne.n	d8ad6 <_Z19__fetch_global_Wirev+0x3a>
   d8aae:	4628      	mov	r0, r5
   d8ab0:	f7fb fb02 	bl	d40b8 <__cxa_guard_acquire>
   d8ab4:	b178      	cbz	r0, d8ad6 <_Z19__fetch_global_Wirev+0x3a>
   d8ab6:	a801      	add	r0, sp, #4
   d8ab8:	f7ff ffd8 	bl	d8a6c <_Z17acquireWireBufferv>
   d8abc:	aa01      	add	r2, sp, #4
   d8abe:	4621      	mov	r1, r4
   d8ac0:	4807      	ldr	r0, [pc, #28]	; (d8ae0 <_Z19__fetch_global_Wirev+0x44>)
   d8ac2:	f7ff f8f9 	bl	d7cb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8ac6:	4628      	mov	r0, r5
   d8ac8:	f7fb fafb 	bl	d40c2 <__cxa_guard_release>
   d8acc:	4a05      	ldr	r2, [pc, #20]	; (d8ae4 <_Z19__fetch_global_Wirev+0x48>)
   d8ace:	4906      	ldr	r1, [pc, #24]	; (d8ae8 <_Z19__fetch_global_Wirev+0x4c>)
   d8ad0:	4803      	ldr	r0, [pc, #12]	; (d8ae0 <_Z19__fetch_global_Wirev+0x44>)
   d8ad2:	f000 f80b 	bl	d8aec <__aeabi_atexit>
	return wire;
}
   d8ad6:	4802      	ldr	r0, [pc, #8]	; (d8ae0 <_Z19__fetch_global_Wirev+0x44>)
   d8ad8:	b007      	add	sp, #28
   d8ada:	bd30      	pop	{r4, r5, pc}
   d8adc:	2003e7e0 	.word	0x2003e7e0
   d8ae0:	2003e7e4 	.word	0x2003e7e4
   d8ae4:	2003d9f8 	.word	0x2003d9f8
   d8ae8:	000d7c61 	.word	0x000d7c61

000d8aec <__aeabi_atexit>:
   d8aec:	460b      	mov	r3, r1
   d8aee:	4601      	mov	r1, r0
   d8af0:	4618      	mov	r0, r3
   d8af2:	f000 be55 	b.w	d97a0 <__cxa_atexit>

000d8af6 <_ZdlPvj>:
   d8af6:	f7fb bad2 	b.w	d409e <_ZdlPv>

000d8afa <_ZnwjRKSt9nothrow_t>:
   d8afa:	f7fb bacc 	b.w	d4096 <_Znwj>

000d8afe <_ZnajRKSt9nothrow_t>:
   d8afe:	f7fb bacc 	b.w	d409a <_Znaj>

000d8b02 <_ZSt25__throw_bad_function_callv>:
   d8b02:	b508      	push	{r3, lr}
   d8b04:	f7fe fcb6 	bl	d7474 <abort>

000d8b08 <sqrt>:
   d8b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b0c:	ed2d 8b02 	vpush	{d8}
   d8b10:	b08b      	sub	sp, #44	; 0x2c
   d8b12:	ec55 4b10 	vmov	r4, r5, d0
   d8b16:	f000 f855 	bl	d8bc4 <__ieee754_sqrt>
   d8b1a:	4b28      	ldr	r3, [pc, #160]	; (d8bbc <sqrt+0xb4>)
   d8b1c:	eeb0 8a40 	vmov.f32	s16, s0
   d8b20:	eef0 8a60 	vmov.f32	s17, s1
   d8b24:	f993 7000 	ldrsb.w	r7, [r3]
   d8b28:	1c7b      	adds	r3, r7, #1
   d8b2a:	d012      	beq.n	d8b52 <sqrt+0x4a>
   d8b2c:	4622      	mov	r2, r4
   d8b2e:	462b      	mov	r3, r5
   d8b30:	4620      	mov	r0, r4
   d8b32:	4629      	mov	r1, r5
   d8b34:	f000 fd62 	bl	d95fc <__aeabi_dcmpun>
   d8b38:	4606      	mov	r6, r0
   d8b3a:	b950      	cbnz	r0, d8b52 <sqrt+0x4a>
   d8b3c:	f04f 0800 	mov.w	r8, #0
   d8b40:	f04f 0900 	mov.w	r9, #0
   d8b44:	4620      	mov	r0, r4
   d8b46:	4629      	mov	r1, r5
   d8b48:	4642      	mov	r2, r8
   d8b4a:	464b      	mov	r3, r9
   d8b4c:	f000 fd2e 	bl	d95ac <__aeabi_dcmplt>
   d8b50:	b940      	cbnz	r0, d8b64 <sqrt+0x5c>
   d8b52:	eeb0 0a48 	vmov.f32	s0, s16
   d8b56:	eef0 0a68 	vmov.f32	s1, s17
   d8b5a:	b00b      	add	sp, #44	; 0x2c
   d8b5c:	ecbd 8b02 	vpop	{d8}
   d8b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8b64:	4b16      	ldr	r3, [pc, #88]	; (d8bc0 <sqrt+0xb8>)
   d8b66:	9608      	str	r6, [sp, #32]
   d8b68:	2201      	movs	r2, #1
   d8b6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8b6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8b72:	9200      	str	r2, [sp, #0]
   d8b74:	9301      	str	r3, [sp, #4]
   d8b76:	b197      	cbz	r7, d8b9e <sqrt+0x96>
   d8b78:	4642      	mov	r2, r8
   d8b7a:	464b      	mov	r3, r9
   d8b7c:	4640      	mov	r0, r8
   d8b7e:	4649      	mov	r1, r9
   d8b80:	f000 fbcc 	bl	d931c <__aeabi_ddiv>
   d8b84:	2f02      	cmp	r7, #2
   d8b86:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8b8a:	d10a      	bne.n	d8ba2 <sqrt+0x9a>
   d8b8c:	f7fe fc82 	bl	d7494 <__errno>
   d8b90:	2321      	movs	r3, #33	; 0x21
   d8b92:	6003      	str	r3, [r0, #0]
   d8b94:	9b08      	ldr	r3, [sp, #32]
   d8b96:	b963      	cbnz	r3, d8bb2 <sqrt+0xaa>
   d8b98:	ed9d 8b06 	vldr	d8, [sp, #24]
   d8b9c:	e7d9      	b.n	d8b52 <sqrt+0x4a>
   d8b9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8ba2:	4668      	mov	r0, sp
   d8ba4:	f000 f8d2 	bl	d8d4c <matherr>
   d8ba8:	2800      	cmp	r0, #0
   d8baa:	d0ef      	beq.n	d8b8c <sqrt+0x84>
   d8bac:	9b08      	ldr	r3, [sp, #32]
   d8bae:	2b00      	cmp	r3, #0
   d8bb0:	d0f2      	beq.n	d8b98 <sqrt+0x90>
   d8bb2:	f7fe fc6f 	bl	d7494 <__errno>
   d8bb6:	9b08      	ldr	r3, [sp, #32]
   d8bb8:	6003      	str	r3, [r0, #0]
   d8bba:	e7ed      	b.n	d8b98 <sqrt+0x90>
   d8bbc:	2003d81c 	.word	0x2003d81c
   d8bc0:	000dc2fc 	.word	0x000dc2fc

000d8bc4 <__ieee754_sqrt>:
   d8bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8bc8:	4a5f      	ldr	r2, [pc, #380]	; (d8d48 <__ieee754_sqrt+0x184>)
   d8bca:	ec57 6b10 	vmov	r6, r7, d0
   d8bce:	43ba      	bics	r2, r7
   d8bd0:	f000 8098 	beq.w	d8d04 <__ieee754_sqrt+0x140>
   d8bd4:	2f00      	cmp	r7, #0
   d8bd6:	ee10 4a10 	vmov	r4, s0
   d8bda:	463b      	mov	r3, r7
   d8bdc:	dd4e      	ble.n	d8c7c <__ieee754_sqrt+0xb8>
   d8bde:	1539      	asrs	r1, r7, #20
   d8be0:	d05b      	beq.n	d8c9a <__ieee754_sqrt+0xd6>
   d8be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8be6:	07ca      	lsls	r2, r1, #31
   d8be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8bec:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8bf0:	d403      	bmi.n	d8bfa <__ieee754_sqrt+0x36>
   d8bf2:	005b      	lsls	r3, r3, #1
   d8bf4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8bf8:	0064      	lsls	r4, r4, #1
   d8bfa:	0fe2      	lsrs	r2, r4, #31
   d8bfc:	f04f 0c00 	mov.w	ip, #0
   d8c00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8c04:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8c08:	0064      	lsls	r4, r4, #1
   d8c0a:	4666      	mov	r6, ip
   d8c0c:	2516      	movs	r5, #22
   d8c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8c12:	18b1      	adds	r1, r6, r2
   d8c14:	4299      	cmp	r1, r3
   d8c16:	dc02      	bgt.n	d8c1e <__ieee754_sqrt+0x5a>
   d8c18:	1a5b      	subs	r3, r3, r1
   d8c1a:	188e      	adds	r6, r1, r2
   d8c1c:	4494      	add	ip, r2
   d8c1e:	005b      	lsls	r3, r3, #1
   d8c20:	3d01      	subs	r5, #1
   d8c22:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c26:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c2a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c2e:	d1f0      	bne.n	d8c12 <__ieee754_sqrt+0x4e>
   d8c30:	462f      	mov	r7, r5
   d8c32:	2020      	movs	r0, #32
   d8c34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8c38:	e009      	b.n	d8c4e <__ieee754_sqrt+0x8a>
   d8c3a:	d03e      	beq.n	d8cba <__ieee754_sqrt+0xf6>
   d8c3c:	0fe1      	lsrs	r1, r4, #31
   d8c3e:	3801      	subs	r0, #1
   d8c40:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c44:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8c48:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c4c:	d03e      	beq.n	d8ccc <__ieee754_sqrt+0x108>
   d8c4e:	42b3      	cmp	r3, r6
   d8c50:	eb02 0105 	add.w	r1, r2, r5
   d8c54:	ddf1      	ble.n	d8c3a <__ieee754_sqrt+0x76>
   d8c56:	2900      	cmp	r1, #0
   d8c58:	eb01 0502 	add.w	r5, r1, r2
   d8c5c:	db09      	blt.n	d8c72 <__ieee754_sqrt+0xae>
   d8c5e:	46b0      	mov	r8, r6
   d8c60:	1b9b      	subs	r3, r3, r6
   d8c62:	42a1      	cmp	r1, r4
   d8c64:	bf88      	it	hi
   d8c66:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8c6a:	1a64      	subs	r4, r4, r1
   d8c6c:	4417      	add	r7, r2
   d8c6e:	4646      	mov	r6, r8
   d8c70:	e7e4      	b.n	d8c3c <__ieee754_sqrt+0x78>
   d8c72:	2d00      	cmp	r5, #0
   d8c74:	dbf3      	blt.n	d8c5e <__ieee754_sqrt+0x9a>
   d8c76:	f106 0801 	add.w	r8, r6, #1
   d8c7a:	e7f1      	b.n	d8c60 <__ieee754_sqrt+0x9c>
   d8c7c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8c80:	4332      	orrs	r2, r6
   d8c82:	d036      	beq.n	d8cf2 <__ieee754_sqrt+0x12e>
   d8c84:	2f00      	cmp	r7, #0
   d8c86:	d14d      	bne.n	d8d24 <__ieee754_sqrt+0x160>
   d8c88:	4639      	mov	r1, r7
   d8c8a:	0ae2      	lsrs	r2, r4, #11
   d8c8c:	3915      	subs	r1, #21
   d8c8e:	0564      	lsls	r4, r4, #21
   d8c90:	4613      	mov	r3, r2
   d8c92:	2a00      	cmp	r2, #0
   d8c94:	d0f9      	beq.n	d8c8a <__ieee754_sqrt+0xc6>
   d8c96:	02d7      	lsls	r7, r2, #11
   d8c98:	d451      	bmi.n	d8d3e <__ieee754_sqrt+0x17a>
   d8c9a:	2000      	movs	r0, #0
   d8c9c:	005b      	lsls	r3, r3, #1
   d8c9e:	02de      	lsls	r6, r3, #11
   d8ca0:	4605      	mov	r5, r0
   d8ca2:	f100 0001 	add.w	r0, r0, #1
   d8ca6:	d5f9      	bpl.n	d8c9c <__ieee754_sqrt+0xd8>
   d8ca8:	461a      	mov	r2, r3
   d8caa:	4623      	mov	r3, r4
   d8cac:	4084      	lsls	r4, r0
   d8cae:	f1c0 0020 	rsb	r0, r0, #32
   d8cb2:	40c3      	lsrs	r3, r0
   d8cb4:	4313      	orrs	r3, r2
   d8cb6:	1b49      	subs	r1, r1, r5
   d8cb8:	e793      	b.n	d8be2 <__ieee754_sqrt+0x1e>
   d8cba:	42a1      	cmp	r1, r4
   d8cbc:	d8be      	bhi.n	d8c3c <__ieee754_sqrt+0x78>
   d8cbe:	2900      	cmp	r1, #0
   d8cc0:	eb01 0502 	add.w	r5, r1, r2
   d8cc4:	dbd5      	blt.n	d8c72 <__ieee754_sqrt+0xae>
   d8cc6:	4698      	mov	r8, r3
   d8cc8:	2300      	movs	r3, #0
   d8cca:	e7ce      	b.n	d8c6a <__ieee754_sqrt+0xa6>
   d8ccc:	4323      	orrs	r3, r4
   d8cce:	d112      	bne.n	d8cf6 <__ieee754_sqrt+0x132>
   d8cd0:	0878      	lsrs	r0, r7, #1
   d8cd2:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8cd6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8cda:	f01c 0f01 	tst.w	ip, #1
   d8cde:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8ce2:	bf18      	it	ne
   d8ce4:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8ce8:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8cec:	4602      	mov	r2, r0
   d8cee:	ec43 2b10 	vmov	d0, r2, r3
   d8cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8cf6:	1c7b      	adds	r3, r7, #1
   d8cf8:	bf16      	itet	ne
   d8cfa:	1c78      	addne	r0, r7, #1
   d8cfc:	f10c 0c01 	addeq.w	ip, ip, #1
   d8d00:	0840      	lsrne	r0, r0, #1
   d8d02:	e7e6      	b.n	d8cd2 <__ieee754_sqrt+0x10e>
   d8d04:	ee10 2a10 	vmov	r2, s0
   d8d08:	ee10 0a10 	vmov	r0, s0
   d8d0c:	463b      	mov	r3, r7
   d8d0e:	4639      	mov	r1, r7
   d8d10:	f000 f9da 	bl	d90c8 <__aeabi_dmul>
   d8d14:	4632      	mov	r2, r6
   d8d16:	463b      	mov	r3, r7
   d8d18:	f000 f820 	bl	d8d5c <__adddf3>
   d8d1c:	ec41 0b10 	vmov	d0, r0, r1
   d8d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d24:	ee10 2a10 	vmov	r2, s0
   d8d28:	4630      	mov	r0, r6
   d8d2a:	4639      	mov	r1, r7
   d8d2c:	f000 f814 	bl	d8d58 <__aeabi_dsub>
   d8d30:	4602      	mov	r2, r0
   d8d32:	460b      	mov	r3, r1
   d8d34:	f000 faf2 	bl	d931c <__aeabi_ddiv>
   d8d38:	ec41 0b10 	vmov	d0, r0, r1
   d8d3c:	e7d9      	b.n	d8cf2 <__ieee754_sqrt+0x12e>
   d8d3e:	4623      	mov	r3, r4
   d8d40:	2020      	movs	r0, #32
   d8d42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8d46:	e7b4      	b.n	d8cb2 <__ieee754_sqrt+0xee>
   d8d48:	7ff00000 	.word	0x7ff00000

000d8d4c <matherr>:
   d8d4c:	2000      	movs	r0, #0
   d8d4e:	4770      	bx	lr

000d8d50 <__aeabi_drsub>:
   d8d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8d54:	e002      	b.n	d8d5c <__adddf3>
   d8d56:	bf00      	nop

000d8d58 <__aeabi_dsub>:
   d8d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8d5c <__adddf3>:
   d8d5c:	b530      	push	{r4, r5, lr}
   d8d5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8d62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8d66:	ea94 0f05 	teq	r4, r5
   d8d6a:	bf08      	it	eq
   d8d6c:	ea90 0f02 	teqeq	r0, r2
   d8d70:	bf1f      	itttt	ne
   d8d72:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8d76:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8d7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8d7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8d82:	f000 80e2 	beq.w	d8f4a <__adddf3+0x1ee>
   d8d86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8d8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8d8e:	bfb8      	it	lt
   d8d90:	426d      	neglt	r5, r5
   d8d92:	dd0c      	ble.n	d8dae <__adddf3+0x52>
   d8d94:	442c      	add	r4, r5
   d8d96:	ea80 0202 	eor.w	r2, r0, r2
   d8d9a:	ea81 0303 	eor.w	r3, r1, r3
   d8d9e:	ea82 0000 	eor.w	r0, r2, r0
   d8da2:	ea83 0101 	eor.w	r1, r3, r1
   d8da6:	ea80 0202 	eor.w	r2, r0, r2
   d8daa:	ea81 0303 	eor.w	r3, r1, r3
   d8dae:	2d36      	cmp	r5, #54	; 0x36
   d8db0:	bf88      	it	hi
   d8db2:	bd30      	pophi	{r4, r5, pc}
   d8db4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8db8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8dbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8dc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8dc4:	d002      	beq.n	d8dcc <__adddf3+0x70>
   d8dc6:	4240      	negs	r0, r0
   d8dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8dcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8dd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8dd8:	d002      	beq.n	d8de0 <__adddf3+0x84>
   d8dda:	4252      	negs	r2, r2
   d8ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8de0:	ea94 0f05 	teq	r4, r5
   d8de4:	f000 80a7 	beq.w	d8f36 <__adddf3+0x1da>
   d8de8:	f1a4 0401 	sub.w	r4, r4, #1
   d8dec:	f1d5 0e20 	rsbs	lr, r5, #32
   d8df0:	db0d      	blt.n	d8e0e <__adddf3+0xb2>
   d8df2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8df6:	fa22 f205 	lsr.w	r2, r2, r5
   d8dfa:	1880      	adds	r0, r0, r2
   d8dfc:	f141 0100 	adc.w	r1, r1, #0
   d8e00:	fa03 f20e 	lsl.w	r2, r3, lr
   d8e04:	1880      	adds	r0, r0, r2
   d8e06:	fa43 f305 	asr.w	r3, r3, r5
   d8e0a:	4159      	adcs	r1, r3
   d8e0c:	e00e      	b.n	d8e2c <__adddf3+0xd0>
   d8e0e:	f1a5 0520 	sub.w	r5, r5, #32
   d8e12:	f10e 0e20 	add.w	lr, lr, #32
   d8e16:	2a01      	cmp	r2, #1
   d8e18:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8e1c:	bf28      	it	cs
   d8e1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8e22:	fa43 f305 	asr.w	r3, r3, r5
   d8e26:	18c0      	adds	r0, r0, r3
   d8e28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e30:	d507      	bpl.n	d8e42 <__adddf3+0xe6>
   d8e32:	f04f 0e00 	mov.w	lr, #0
   d8e36:	f1dc 0c00 	rsbs	ip, ip, #0
   d8e3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8e3e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8e42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8e46:	d31b      	bcc.n	d8e80 <__adddf3+0x124>
   d8e48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8e4c:	d30c      	bcc.n	d8e68 <__adddf3+0x10c>
   d8e4e:	0849      	lsrs	r1, r1, #1
   d8e50:	ea5f 0030 	movs.w	r0, r0, rrx
   d8e54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8e58:	f104 0401 	add.w	r4, r4, #1
   d8e5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8e60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8e64:	f080 809a 	bcs.w	d8f9c <__adddf3+0x240>
   d8e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8e6c:	bf08      	it	eq
   d8e6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8e72:	f150 0000 	adcs.w	r0, r0, #0
   d8e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e7a:	ea41 0105 	orr.w	r1, r1, r5
   d8e7e:	bd30      	pop	{r4, r5, pc}
   d8e80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8e84:	4140      	adcs	r0, r0
   d8e86:	eb41 0101 	adc.w	r1, r1, r1
   d8e8a:	3c01      	subs	r4, #1
   d8e8c:	bf28      	it	cs
   d8e8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8e92:	d2e9      	bcs.n	d8e68 <__adddf3+0x10c>
   d8e94:	f091 0f00 	teq	r1, #0
   d8e98:	bf04      	itt	eq
   d8e9a:	4601      	moveq	r1, r0
   d8e9c:	2000      	moveq	r0, #0
   d8e9e:	fab1 f381 	clz	r3, r1
   d8ea2:	bf08      	it	eq
   d8ea4:	3320      	addeq	r3, #32
   d8ea6:	f1a3 030b 	sub.w	r3, r3, #11
   d8eaa:	f1b3 0220 	subs.w	r2, r3, #32
   d8eae:	da0c      	bge.n	d8eca <__adddf3+0x16e>
   d8eb0:	320c      	adds	r2, #12
   d8eb2:	dd08      	ble.n	d8ec6 <__adddf3+0x16a>
   d8eb4:	f102 0c14 	add.w	ip, r2, #20
   d8eb8:	f1c2 020c 	rsb	r2, r2, #12
   d8ebc:	fa01 f00c 	lsl.w	r0, r1, ip
   d8ec0:	fa21 f102 	lsr.w	r1, r1, r2
   d8ec4:	e00c      	b.n	d8ee0 <__adddf3+0x184>
   d8ec6:	f102 0214 	add.w	r2, r2, #20
   d8eca:	bfd8      	it	le
   d8ecc:	f1c2 0c20 	rsble	ip, r2, #32
   d8ed0:	fa01 f102 	lsl.w	r1, r1, r2
   d8ed4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8ed8:	bfdc      	itt	le
   d8eda:	ea41 010c 	orrle.w	r1, r1, ip
   d8ede:	4090      	lslle	r0, r2
   d8ee0:	1ae4      	subs	r4, r4, r3
   d8ee2:	bfa2      	ittt	ge
   d8ee4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8ee8:	4329      	orrge	r1, r5
   d8eea:	bd30      	popge	{r4, r5, pc}
   d8eec:	ea6f 0404 	mvn.w	r4, r4
   d8ef0:	3c1f      	subs	r4, #31
   d8ef2:	da1c      	bge.n	d8f2e <__adddf3+0x1d2>
   d8ef4:	340c      	adds	r4, #12
   d8ef6:	dc0e      	bgt.n	d8f16 <__adddf3+0x1ba>
   d8ef8:	f104 0414 	add.w	r4, r4, #20
   d8efc:	f1c4 0220 	rsb	r2, r4, #32
   d8f00:	fa20 f004 	lsr.w	r0, r0, r4
   d8f04:	fa01 f302 	lsl.w	r3, r1, r2
   d8f08:	ea40 0003 	orr.w	r0, r0, r3
   d8f0c:	fa21 f304 	lsr.w	r3, r1, r4
   d8f10:	ea45 0103 	orr.w	r1, r5, r3
   d8f14:	bd30      	pop	{r4, r5, pc}
   d8f16:	f1c4 040c 	rsb	r4, r4, #12
   d8f1a:	f1c4 0220 	rsb	r2, r4, #32
   d8f1e:	fa20 f002 	lsr.w	r0, r0, r2
   d8f22:	fa01 f304 	lsl.w	r3, r1, r4
   d8f26:	ea40 0003 	orr.w	r0, r0, r3
   d8f2a:	4629      	mov	r1, r5
   d8f2c:	bd30      	pop	{r4, r5, pc}
   d8f2e:	fa21 f004 	lsr.w	r0, r1, r4
   d8f32:	4629      	mov	r1, r5
   d8f34:	bd30      	pop	{r4, r5, pc}
   d8f36:	f094 0f00 	teq	r4, #0
   d8f3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8f3e:	bf06      	itte	eq
   d8f40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8f44:	3401      	addeq	r4, #1
   d8f46:	3d01      	subne	r5, #1
   d8f48:	e74e      	b.n	d8de8 <__adddf3+0x8c>
   d8f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8f4e:	bf18      	it	ne
   d8f50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8f54:	d029      	beq.n	d8faa <__adddf3+0x24e>
   d8f56:	ea94 0f05 	teq	r4, r5
   d8f5a:	bf08      	it	eq
   d8f5c:	ea90 0f02 	teqeq	r0, r2
   d8f60:	d005      	beq.n	d8f6e <__adddf3+0x212>
   d8f62:	ea54 0c00 	orrs.w	ip, r4, r0
   d8f66:	bf04      	itt	eq
   d8f68:	4619      	moveq	r1, r3
   d8f6a:	4610      	moveq	r0, r2
   d8f6c:	bd30      	pop	{r4, r5, pc}
   d8f6e:	ea91 0f03 	teq	r1, r3
   d8f72:	bf1e      	ittt	ne
   d8f74:	2100      	movne	r1, #0
   d8f76:	2000      	movne	r0, #0
   d8f78:	bd30      	popne	{r4, r5, pc}
   d8f7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8f7e:	d105      	bne.n	d8f8c <__adddf3+0x230>
   d8f80:	0040      	lsls	r0, r0, #1
   d8f82:	4149      	adcs	r1, r1
   d8f84:	bf28      	it	cs
   d8f86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8f8a:	bd30      	pop	{r4, r5, pc}
   d8f8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8f90:	bf3c      	itt	cc
   d8f92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8f96:	bd30      	popcc	{r4, r5, pc}
   d8f98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8fa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8fa4:	f04f 0000 	mov.w	r0, #0
   d8fa8:	bd30      	pop	{r4, r5, pc}
   d8faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8fae:	bf1a      	itte	ne
   d8fb0:	4619      	movne	r1, r3
   d8fb2:	4610      	movne	r0, r2
   d8fb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8fb8:	bf1c      	itt	ne
   d8fba:	460b      	movne	r3, r1
   d8fbc:	4602      	movne	r2, r0
   d8fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8fc2:	bf06      	itte	eq
   d8fc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8fc8:	ea91 0f03 	teqeq	r1, r3
   d8fcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8fd0:	bd30      	pop	{r4, r5, pc}
   d8fd2:	bf00      	nop

000d8fd4 <__aeabi_ui2d>:
   d8fd4:	f090 0f00 	teq	r0, #0
   d8fd8:	bf04      	itt	eq
   d8fda:	2100      	moveq	r1, #0
   d8fdc:	4770      	bxeq	lr
   d8fde:	b530      	push	{r4, r5, lr}
   d8fe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8fe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8fe8:	f04f 0500 	mov.w	r5, #0
   d8fec:	f04f 0100 	mov.w	r1, #0
   d8ff0:	e750      	b.n	d8e94 <__adddf3+0x138>
   d8ff2:	bf00      	nop

000d8ff4 <__aeabi_i2d>:
   d8ff4:	f090 0f00 	teq	r0, #0
   d8ff8:	bf04      	itt	eq
   d8ffa:	2100      	moveq	r1, #0
   d8ffc:	4770      	bxeq	lr
   d8ffe:	b530      	push	{r4, r5, lr}
   d9000:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9004:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9008:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d900c:	bf48      	it	mi
   d900e:	4240      	negmi	r0, r0
   d9010:	f04f 0100 	mov.w	r1, #0
   d9014:	e73e      	b.n	d8e94 <__adddf3+0x138>
   d9016:	bf00      	nop

000d9018 <__aeabi_f2d>:
   d9018:	0042      	lsls	r2, r0, #1
   d901a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d901e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9022:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9026:	bf1f      	itttt	ne
   d9028:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d902c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9030:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9034:	4770      	bxne	lr
   d9036:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d903a:	bf08      	it	eq
   d903c:	4770      	bxeq	lr
   d903e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9042:	bf04      	itt	eq
   d9044:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9048:	4770      	bxeq	lr
   d904a:	b530      	push	{r4, r5, lr}
   d904c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9058:	e71c      	b.n	d8e94 <__adddf3+0x138>
   d905a:	bf00      	nop

000d905c <__aeabi_ul2d>:
   d905c:	ea50 0201 	orrs.w	r2, r0, r1
   d9060:	bf08      	it	eq
   d9062:	4770      	bxeq	lr
   d9064:	b530      	push	{r4, r5, lr}
   d9066:	f04f 0500 	mov.w	r5, #0
   d906a:	e00a      	b.n	d9082 <__aeabi_l2d+0x16>

000d906c <__aeabi_l2d>:
   d906c:	ea50 0201 	orrs.w	r2, r0, r1
   d9070:	bf08      	it	eq
   d9072:	4770      	bxeq	lr
   d9074:	b530      	push	{r4, r5, lr}
   d9076:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d907a:	d502      	bpl.n	d9082 <__aeabi_l2d+0x16>
   d907c:	4240      	negs	r0, r0
   d907e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9082:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9086:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d908a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d908e:	f43f aed8 	beq.w	d8e42 <__adddf3+0xe6>
   d9092:	f04f 0203 	mov.w	r2, #3
   d9096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d909a:	bf18      	it	ne
   d909c:	3203      	addne	r2, #3
   d909e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d90a2:	bf18      	it	ne
   d90a4:	3203      	addne	r2, #3
   d90a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d90aa:	f1c2 0320 	rsb	r3, r2, #32
   d90ae:	fa00 fc03 	lsl.w	ip, r0, r3
   d90b2:	fa20 f002 	lsr.w	r0, r0, r2
   d90b6:	fa01 fe03 	lsl.w	lr, r1, r3
   d90ba:	ea40 000e 	orr.w	r0, r0, lr
   d90be:	fa21 f102 	lsr.w	r1, r1, r2
   d90c2:	4414      	add	r4, r2
   d90c4:	e6bd      	b.n	d8e42 <__adddf3+0xe6>
   d90c6:	bf00      	nop

000d90c8 <__aeabi_dmul>:
   d90c8:	b570      	push	{r4, r5, r6, lr}
   d90ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d90ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d90d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d90d6:	bf1d      	ittte	ne
   d90d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d90dc:	ea94 0f0c 	teqne	r4, ip
   d90e0:	ea95 0f0c 	teqne	r5, ip
   d90e4:	f000 f8de 	bleq	d92a4 <__aeabi_dmul+0x1dc>
   d90e8:	442c      	add	r4, r5
   d90ea:	ea81 0603 	eor.w	r6, r1, r3
   d90ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d90f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d90f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d90fa:	bf18      	it	ne
   d90fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9108:	d038      	beq.n	d917c <__aeabi_dmul+0xb4>
   d910a:	fba0 ce02 	umull	ip, lr, r0, r2
   d910e:	f04f 0500 	mov.w	r5, #0
   d9112:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9116:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d911a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d911e:	f04f 0600 	mov.w	r6, #0
   d9122:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9126:	f09c 0f00 	teq	ip, #0
   d912a:	bf18      	it	ne
   d912c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9130:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9134:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9138:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d913c:	d204      	bcs.n	d9148 <__aeabi_dmul+0x80>
   d913e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9142:	416d      	adcs	r5, r5
   d9144:	eb46 0606 	adc.w	r6, r6, r6
   d9148:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d914c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9150:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9154:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9158:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d915c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9160:	bf88      	it	hi
   d9162:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9166:	d81e      	bhi.n	d91a6 <__aeabi_dmul+0xde>
   d9168:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d916c:	bf08      	it	eq
   d916e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9172:	f150 0000 	adcs.w	r0, r0, #0
   d9176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d917a:	bd70      	pop	{r4, r5, r6, pc}
   d917c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9180:	ea46 0101 	orr.w	r1, r6, r1
   d9184:	ea40 0002 	orr.w	r0, r0, r2
   d9188:	ea81 0103 	eor.w	r1, r1, r3
   d918c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9190:	bfc2      	ittt	gt
   d9192:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9196:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d919a:	bd70      	popgt	{r4, r5, r6, pc}
   d919c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d91a0:	f04f 0e00 	mov.w	lr, #0
   d91a4:	3c01      	subs	r4, #1
   d91a6:	f300 80ab 	bgt.w	d9300 <__aeabi_dmul+0x238>
   d91aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d91ae:	bfde      	ittt	le
   d91b0:	2000      	movle	r0, #0
   d91b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d91b6:	bd70      	pople	{r4, r5, r6, pc}
   d91b8:	f1c4 0400 	rsb	r4, r4, #0
   d91bc:	3c20      	subs	r4, #32
   d91be:	da35      	bge.n	d922c <__aeabi_dmul+0x164>
   d91c0:	340c      	adds	r4, #12
   d91c2:	dc1b      	bgt.n	d91fc <__aeabi_dmul+0x134>
   d91c4:	f104 0414 	add.w	r4, r4, #20
   d91c8:	f1c4 0520 	rsb	r5, r4, #32
   d91cc:	fa00 f305 	lsl.w	r3, r0, r5
   d91d0:	fa20 f004 	lsr.w	r0, r0, r4
   d91d4:	fa01 f205 	lsl.w	r2, r1, r5
   d91d8:	ea40 0002 	orr.w	r0, r0, r2
   d91dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d91e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d91e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d91e8:	fa21 f604 	lsr.w	r6, r1, r4
   d91ec:	eb42 0106 	adc.w	r1, r2, r6
   d91f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d91f4:	bf08      	it	eq
   d91f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d91fa:	bd70      	pop	{r4, r5, r6, pc}
   d91fc:	f1c4 040c 	rsb	r4, r4, #12
   d9200:	f1c4 0520 	rsb	r5, r4, #32
   d9204:	fa00 f304 	lsl.w	r3, r0, r4
   d9208:	fa20 f005 	lsr.w	r0, r0, r5
   d920c:	fa01 f204 	lsl.w	r2, r1, r4
   d9210:	ea40 0002 	orr.w	r0, r0, r2
   d9214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d921c:	f141 0100 	adc.w	r1, r1, #0
   d9220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9224:	bf08      	it	eq
   d9226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d922a:	bd70      	pop	{r4, r5, r6, pc}
   d922c:	f1c4 0520 	rsb	r5, r4, #32
   d9230:	fa00 f205 	lsl.w	r2, r0, r5
   d9234:	ea4e 0e02 	orr.w	lr, lr, r2
   d9238:	fa20 f304 	lsr.w	r3, r0, r4
   d923c:	fa01 f205 	lsl.w	r2, r1, r5
   d9240:	ea43 0302 	orr.w	r3, r3, r2
   d9244:	fa21 f004 	lsr.w	r0, r1, r4
   d9248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d924c:	fa21 f204 	lsr.w	r2, r1, r4
   d9250:	ea20 0002 	bic.w	r0, r0, r2
   d9254:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d925c:	bf08      	it	eq
   d925e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9262:	bd70      	pop	{r4, r5, r6, pc}
   d9264:	f094 0f00 	teq	r4, #0
   d9268:	d10f      	bne.n	d928a <__aeabi_dmul+0x1c2>
   d926a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d926e:	0040      	lsls	r0, r0, #1
   d9270:	eb41 0101 	adc.w	r1, r1, r1
   d9274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9278:	bf08      	it	eq
   d927a:	3c01      	subeq	r4, #1
   d927c:	d0f7      	beq.n	d926e <__aeabi_dmul+0x1a6>
   d927e:	ea41 0106 	orr.w	r1, r1, r6
   d9282:	f095 0f00 	teq	r5, #0
   d9286:	bf18      	it	ne
   d9288:	4770      	bxne	lr
   d928a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d928e:	0052      	lsls	r2, r2, #1
   d9290:	eb43 0303 	adc.w	r3, r3, r3
   d9294:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9298:	bf08      	it	eq
   d929a:	3d01      	subeq	r5, #1
   d929c:	d0f7      	beq.n	d928e <__aeabi_dmul+0x1c6>
   d929e:	ea43 0306 	orr.w	r3, r3, r6
   d92a2:	4770      	bx	lr
   d92a4:	ea94 0f0c 	teq	r4, ip
   d92a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d92ac:	bf18      	it	ne
   d92ae:	ea95 0f0c 	teqne	r5, ip
   d92b2:	d00c      	beq.n	d92ce <__aeabi_dmul+0x206>
   d92b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d92b8:	bf18      	it	ne
   d92ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d92be:	d1d1      	bne.n	d9264 <__aeabi_dmul+0x19c>
   d92c0:	ea81 0103 	eor.w	r1, r1, r3
   d92c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d92c8:	f04f 0000 	mov.w	r0, #0
   d92cc:	bd70      	pop	{r4, r5, r6, pc}
   d92ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d92d2:	bf06      	itte	eq
   d92d4:	4610      	moveq	r0, r2
   d92d6:	4619      	moveq	r1, r3
   d92d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d92dc:	d019      	beq.n	d9312 <__aeabi_dmul+0x24a>
   d92de:	ea94 0f0c 	teq	r4, ip
   d92e2:	d102      	bne.n	d92ea <__aeabi_dmul+0x222>
   d92e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d92e8:	d113      	bne.n	d9312 <__aeabi_dmul+0x24a>
   d92ea:	ea95 0f0c 	teq	r5, ip
   d92ee:	d105      	bne.n	d92fc <__aeabi_dmul+0x234>
   d92f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d92f4:	bf1c      	itt	ne
   d92f6:	4610      	movne	r0, r2
   d92f8:	4619      	movne	r1, r3
   d92fa:	d10a      	bne.n	d9312 <__aeabi_dmul+0x24a>
   d92fc:	ea81 0103 	eor.w	r1, r1, r3
   d9300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9304:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d930c:	f04f 0000 	mov.w	r0, #0
   d9310:	bd70      	pop	{r4, r5, r6, pc}
   d9312:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9316:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d931a:	bd70      	pop	{r4, r5, r6, pc}

000d931c <__aeabi_ddiv>:
   d931c:	b570      	push	{r4, r5, r6, lr}
   d931e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d932a:	bf1d      	ittte	ne
   d932c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9330:	ea94 0f0c 	teqne	r4, ip
   d9334:	ea95 0f0c 	teqne	r5, ip
   d9338:	f000 f8a7 	bleq	d948a <__aeabi_ddiv+0x16e>
   d933c:	eba4 0405 	sub.w	r4, r4, r5
   d9340:	ea81 0e03 	eor.w	lr, r1, r3
   d9344:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9348:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d934c:	f000 8088 	beq.w	d9460 <__aeabi_ddiv+0x144>
   d9350:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9354:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9358:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d935c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9360:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9364:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9368:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d936c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9370:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9374:	429d      	cmp	r5, r3
   d9376:	bf08      	it	eq
   d9378:	4296      	cmpeq	r6, r2
   d937a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d937e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9382:	d202      	bcs.n	d938a <__aeabi_ddiv+0x6e>
   d9384:	085b      	lsrs	r3, r3, #1
   d9386:	ea4f 0232 	mov.w	r2, r2, rrx
   d938a:	1ab6      	subs	r6, r6, r2
   d938c:	eb65 0503 	sbc.w	r5, r5, r3
   d9390:	085b      	lsrs	r3, r3, #1
   d9392:	ea4f 0232 	mov.w	r2, r2, rrx
   d9396:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d939a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d939e:	ebb6 0e02 	subs.w	lr, r6, r2
   d93a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93a6:	bf22      	ittt	cs
   d93a8:	1ab6      	subcs	r6, r6, r2
   d93aa:	4675      	movcs	r5, lr
   d93ac:	ea40 000c 	orrcs.w	r0, r0, ip
   d93b0:	085b      	lsrs	r3, r3, #1
   d93b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d93b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d93ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93be:	bf22      	ittt	cs
   d93c0:	1ab6      	subcs	r6, r6, r2
   d93c2:	4675      	movcs	r5, lr
   d93c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d93c8:	085b      	lsrs	r3, r3, #1
   d93ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d93ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d93d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93d6:	bf22      	ittt	cs
   d93d8:	1ab6      	subcs	r6, r6, r2
   d93da:	4675      	movcs	r5, lr
   d93dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d93e0:	085b      	lsrs	r3, r3, #1
   d93e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d93e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d93ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93ee:	bf22      	ittt	cs
   d93f0:	1ab6      	subcs	r6, r6, r2
   d93f2:	4675      	movcs	r5, lr
   d93f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d93f8:	ea55 0e06 	orrs.w	lr, r5, r6
   d93fc:	d018      	beq.n	d9430 <__aeabi_ddiv+0x114>
   d93fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9402:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9406:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d940a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d940e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9412:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9416:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d941a:	d1c0      	bne.n	d939e <__aeabi_ddiv+0x82>
   d941c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9420:	d10b      	bne.n	d943a <__aeabi_ddiv+0x11e>
   d9422:	ea41 0100 	orr.w	r1, r1, r0
   d9426:	f04f 0000 	mov.w	r0, #0
   d942a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d942e:	e7b6      	b.n	d939e <__aeabi_ddiv+0x82>
   d9430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9434:	bf04      	itt	eq
   d9436:	4301      	orreq	r1, r0
   d9438:	2000      	moveq	r0, #0
   d943a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d943e:	bf88      	it	hi
   d9440:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9444:	f63f aeaf 	bhi.w	d91a6 <__aeabi_dmul+0xde>
   d9448:	ebb5 0c03 	subs.w	ip, r5, r3
   d944c:	bf04      	itt	eq
   d944e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9456:	f150 0000 	adcs.w	r0, r0, #0
   d945a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d945e:	bd70      	pop	{r4, r5, r6, pc}
   d9460:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9464:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9468:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d946c:	bfc2      	ittt	gt
   d946e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9472:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9476:	bd70      	popgt	{r4, r5, r6, pc}
   d9478:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d947c:	f04f 0e00 	mov.w	lr, #0
   d9480:	3c01      	subs	r4, #1
   d9482:	e690      	b.n	d91a6 <__aeabi_dmul+0xde>
   d9484:	ea45 0e06 	orr.w	lr, r5, r6
   d9488:	e68d      	b.n	d91a6 <__aeabi_dmul+0xde>
   d948a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d948e:	ea94 0f0c 	teq	r4, ip
   d9492:	bf08      	it	eq
   d9494:	ea95 0f0c 	teqeq	r5, ip
   d9498:	f43f af3b 	beq.w	d9312 <__aeabi_dmul+0x24a>
   d949c:	ea94 0f0c 	teq	r4, ip
   d94a0:	d10a      	bne.n	d94b8 <__aeabi_ddiv+0x19c>
   d94a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d94a6:	f47f af34 	bne.w	d9312 <__aeabi_dmul+0x24a>
   d94aa:	ea95 0f0c 	teq	r5, ip
   d94ae:	f47f af25 	bne.w	d92fc <__aeabi_dmul+0x234>
   d94b2:	4610      	mov	r0, r2
   d94b4:	4619      	mov	r1, r3
   d94b6:	e72c      	b.n	d9312 <__aeabi_dmul+0x24a>
   d94b8:	ea95 0f0c 	teq	r5, ip
   d94bc:	d106      	bne.n	d94cc <__aeabi_ddiv+0x1b0>
   d94be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d94c2:	f43f aefd 	beq.w	d92c0 <__aeabi_dmul+0x1f8>
   d94c6:	4610      	mov	r0, r2
   d94c8:	4619      	mov	r1, r3
   d94ca:	e722      	b.n	d9312 <__aeabi_dmul+0x24a>
   d94cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d94d0:	bf18      	it	ne
   d94d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d94d6:	f47f aec5 	bne.w	d9264 <__aeabi_dmul+0x19c>
   d94da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d94de:	f47f af0d 	bne.w	d92fc <__aeabi_dmul+0x234>
   d94e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d94e6:	f47f aeeb 	bne.w	d92c0 <__aeabi_dmul+0x1f8>
   d94ea:	e712      	b.n	d9312 <__aeabi_dmul+0x24a>

000d94ec <__gedf2>:
   d94ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d94f0:	e006      	b.n	d9500 <__cmpdf2+0x4>
   d94f2:	bf00      	nop

000d94f4 <__ledf2>:
   d94f4:	f04f 0c01 	mov.w	ip, #1
   d94f8:	e002      	b.n	d9500 <__cmpdf2+0x4>
   d94fa:	bf00      	nop

000d94fc <__cmpdf2>:
   d94fc:	f04f 0c01 	mov.w	ip, #1
   d9500:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d950c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9510:	bf18      	it	ne
   d9512:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9516:	d01b      	beq.n	d9550 <__cmpdf2+0x54>
   d9518:	b001      	add	sp, #4
   d951a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d951e:	bf0c      	ite	eq
   d9520:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9524:	ea91 0f03 	teqne	r1, r3
   d9528:	bf02      	ittt	eq
   d952a:	ea90 0f02 	teqeq	r0, r2
   d952e:	2000      	moveq	r0, #0
   d9530:	4770      	bxeq	lr
   d9532:	f110 0f00 	cmn.w	r0, #0
   d9536:	ea91 0f03 	teq	r1, r3
   d953a:	bf58      	it	pl
   d953c:	4299      	cmppl	r1, r3
   d953e:	bf08      	it	eq
   d9540:	4290      	cmpeq	r0, r2
   d9542:	bf2c      	ite	cs
   d9544:	17d8      	asrcs	r0, r3, #31
   d9546:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d954a:	f040 0001 	orr.w	r0, r0, #1
   d954e:	4770      	bx	lr
   d9550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9558:	d102      	bne.n	d9560 <__cmpdf2+0x64>
   d955a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d955e:	d107      	bne.n	d9570 <__cmpdf2+0x74>
   d9560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9568:	d1d6      	bne.n	d9518 <__cmpdf2+0x1c>
   d956a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d956e:	d0d3      	beq.n	d9518 <__cmpdf2+0x1c>
   d9570:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9574:	4770      	bx	lr
   d9576:	bf00      	nop

000d9578 <__aeabi_cdrcmple>:
   d9578:	4684      	mov	ip, r0
   d957a:	4610      	mov	r0, r2
   d957c:	4662      	mov	r2, ip
   d957e:	468c      	mov	ip, r1
   d9580:	4619      	mov	r1, r3
   d9582:	4663      	mov	r3, ip
   d9584:	e000      	b.n	d9588 <__aeabi_cdcmpeq>
   d9586:	bf00      	nop

000d9588 <__aeabi_cdcmpeq>:
   d9588:	b501      	push	{r0, lr}
   d958a:	f7ff ffb7 	bl	d94fc <__cmpdf2>
   d958e:	2800      	cmp	r0, #0
   d9590:	bf48      	it	mi
   d9592:	f110 0f00 	cmnmi.w	r0, #0
   d9596:	bd01      	pop	{r0, pc}

000d9598 <__aeabi_dcmpeq>:
   d9598:	f84d ed08 	str.w	lr, [sp, #-8]!
   d959c:	f7ff fff4 	bl	d9588 <__aeabi_cdcmpeq>
   d95a0:	bf0c      	ite	eq
   d95a2:	2001      	moveq	r0, #1
   d95a4:	2000      	movne	r0, #0
   d95a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d95aa:	bf00      	nop

000d95ac <__aeabi_dcmplt>:
   d95ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95b0:	f7ff ffea 	bl	d9588 <__aeabi_cdcmpeq>
   d95b4:	bf34      	ite	cc
   d95b6:	2001      	movcc	r0, #1
   d95b8:	2000      	movcs	r0, #0
   d95ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d95be:	bf00      	nop

000d95c0 <__aeabi_dcmple>:
   d95c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95c4:	f7ff ffe0 	bl	d9588 <__aeabi_cdcmpeq>
   d95c8:	bf94      	ite	ls
   d95ca:	2001      	movls	r0, #1
   d95cc:	2000      	movhi	r0, #0
   d95ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d95d2:	bf00      	nop

000d95d4 <__aeabi_dcmpge>:
   d95d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95d8:	f7ff ffce 	bl	d9578 <__aeabi_cdrcmple>
   d95dc:	bf94      	ite	ls
   d95de:	2001      	movls	r0, #1
   d95e0:	2000      	movhi	r0, #0
   d95e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d95e6:	bf00      	nop

000d95e8 <__aeabi_dcmpgt>:
   d95e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95ec:	f7ff ffc4 	bl	d9578 <__aeabi_cdrcmple>
   d95f0:	bf34      	ite	cc
   d95f2:	2001      	movcc	r0, #1
   d95f4:	2000      	movcs	r0, #0
   d95f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d95fa:	bf00      	nop

000d95fc <__aeabi_dcmpun>:
   d95fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9604:	d102      	bne.n	d960c <__aeabi_dcmpun+0x10>
   d9606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d960a:	d10a      	bne.n	d9622 <__aeabi_dcmpun+0x26>
   d960c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9614:	d102      	bne.n	d961c <__aeabi_dcmpun+0x20>
   d9616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d961a:	d102      	bne.n	d9622 <__aeabi_dcmpun+0x26>
   d961c:	f04f 0000 	mov.w	r0, #0
   d9620:	4770      	bx	lr
   d9622:	f04f 0001 	mov.w	r0, #1
   d9626:	4770      	bx	lr

000d9628 <__aeabi_d2uiz>:
   d9628:	004a      	lsls	r2, r1, #1
   d962a:	d211      	bcs.n	d9650 <__aeabi_d2uiz+0x28>
   d962c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9630:	d211      	bcs.n	d9656 <__aeabi_d2uiz+0x2e>
   d9632:	d50d      	bpl.n	d9650 <__aeabi_d2uiz+0x28>
   d9634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d963c:	d40e      	bmi.n	d965c <__aeabi_d2uiz+0x34>
   d963e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d964a:	fa23 f002 	lsr.w	r0, r3, r2
   d964e:	4770      	bx	lr
   d9650:	f04f 0000 	mov.w	r0, #0
   d9654:	4770      	bx	lr
   d9656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d965a:	d102      	bne.n	d9662 <__aeabi_d2uiz+0x3a>
   d965c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9660:	4770      	bx	lr
   d9662:	f04f 0000 	mov.w	r0, #0
   d9666:	4770      	bx	lr

000d9668 <__aeabi_d2f>:
   d9668:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d966c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9670:	bf24      	itt	cs
   d9672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d967a:	d90d      	bls.n	d9698 <__aeabi_d2f+0x30>
   d967c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9688:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d968c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9690:	bf08      	it	eq
   d9692:	f020 0001 	biceq.w	r0, r0, #1
   d9696:	4770      	bx	lr
   d9698:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d969c:	d121      	bne.n	d96e2 <__aeabi_d2f+0x7a>
   d969e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d96a2:	bfbc      	itt	lt
   d96a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d96a8:	4770      	bxlt	lr
   d96aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d96ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d96b2:	f1c2 0218 	rsb	r2, r2, #24
   d96b6:	f1c2 0c20 	rsb	ip, r2, #32
   d96ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d96be:	fa20 f002 	lsr.w	r0, r0, r2
   d96c2:	bf18      	it	ne
   d96c4:	f040 0001 	orrne.w	r0, r0, #1
   d96c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d96cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d96d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d96d4:	ea40 000c 	orr.w	r0, r0, ip
   d96d8:	fa23 f302 	lsr.w	r3, r3, r2
   d96dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d96e0:	e7cc      	b.n	d967c <__aeabi_d2f+0x14>
   d96e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d96e6:	d107      	bne.n	d96f8 <__aeabi_d2f+0x90>
   d96e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d96ec:	bf1e      	ittt	ne
   d96ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d96f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d96f6:	4770      	bxne	lr
   d96f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d96fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9704:	4770      	bx	lr
   d9706:	bf00      	nop

000d9708 <__aeabi_d2ulz>:
   d9708:	b5d0      	push	{r4, r6, r7, lr}
   d970a:	4b0c      	ldr	r3, [pc, #48]	; (d973c <__aeabi_d2ulz+0x34>)
   d970c:	2200      	movs	r2, #0
   d970e:	4606      	mov	r6, r0
   d9710:	460f      	mov	r7, r1
   d9712:	f7ff fcd9 	bl	d90c8 <__aeabi_dmul>
   d9716:	f7ff ff87 	bl	d9628 <__aeabi_d2uiz>
   d971a:	4604      	mov	r4, r0
   d971c:	f7ff fc5a 	bl	d8fd4 <__aeabi_ui2d>
   d9720:	4b07      	ldr	r3, [pc, #28]	; (d9740 <__aeabi_d2ulz+0x38>)
   d9722:	2200      	movs	r2, #0
   d9724:	f7ff fcd0 	bl	d90c8 <__aeabi_dmul>
   d9728:	4602      	mov	r2, r0
   d972a:	460b      	mov	r3, r1
   d972c:	4630      	mov	r0, r6
   d972e:	4639      	mov	r1, r7
   d9730:	f7ff fb12 	bl	d8d58 <__aeabi_dsub>
   d9734:	f7ff ff78 	bl	d9628 <__aeabi_d2uiz>
   d9738:	4621      	mov	r1, r4
   d973a:	bdd0      	pop	{r4, r6, r7, pc}
   d973c:	3df00000 	.word	0x3df00000
   d9740:	41f00000 	.word	0x41f00000

000d9744 <asctime_r>:
   d9744:	b510      	push	{r4, lr}
   d9746:	460c      	mov	r4, r1
   d9748:	6941      	ldr	r1, [r0, #20]
   d974a:	6903      	ldr	r3, [r0, #16]
   d974c:	6982      	ldr	r2, [r0, #24]
   d974e:	b086      	sub	sp, #24
   d9750:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9754:	9104      	str	r1, [sp, #16]
   d9756:	6801      	ldr	r1, [r0, #0]
   d9758:	9103      	str	r1, [sp, #12]
   d975a:	6841      	ldr	r1, [r0, #4]
   d975c:	9102      	str	r1, [sp, #8]
   d975e:	6881      	ldr	r1, [r0, #8]
   d9760:	9101      	str	r1, [sp, #4]
   d9762:	68c1      	ldr	r1, [r0, #12]
   d9764:	9100      	str	r1, [sp, #0]
   d9766:	4907      	ldr	r1, [pc, #28]	; (d9784 <asctime_r+0x40>)
   d9768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d976c:	440b      	add	r3, r1
   d976e:	4906      	ldr	r1, [pc, #24]	; (d9788 <asctime_r+0x44>)
   d9770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9774:	440a      	add	r2, r1
   d9776:	4620      	mov	r0, r4
   d9778:	4904      	ldr	r1, [pc, #16]	; (d978c <asctime_r+0x48>)
   d977a:	f7fd fe6b 	bl	d7454 <siprintf>
   d977e:	4620      	mov	r0, r4
   d9780:	b006      	add	sp, #24
   d9782:	bd10      	pop	{r4, pc}
   d9784:	000dc336 	.word	0x000dc336
   d9788:	000dc321 	.word	0x000dc321
   d978c:	000dc301 	.word	0x000dc301

000d9790 <atof>:
   d9790:	2100      	movs	r1, #0
   d9792:	f000 befb 	b.w	da58c <strtod>

000d9796 <atoi>:
   d9796:	220a      	movs	r2, #10
   d9798:	2100      	movs	r1, #0
   d979a:	f000 bf7d 	b.w	da698 <strtol>
	...

000d97a0 <__cxa_atexit>:
   d97a0:	b510      	push	{r4, lr}
   d97a2:	4c05      	ldr	r4, [pc, #20]	; (d97b8 <__cxa_atexit+0x18>)
   d97a4:	4613      	mov	r3, r2
   d97a6:	b12c      	cbz	r4, d97b4 <__cxa_atexit+0x14>
   d97a8:	460a      	mov	r2, r1
   d97aa:	4601      	mov	r1, r0
   d97ac:	2002      	movs	r0, #2
   d97ae:	f3af 8000 	nop.w
   d97b2:	bd10      	pop	{r4, pc}
   d97b4:	4620      	mov	r0, r4
   d97b6:	e7fc      	b.n	d97b2 <__cxa_atexit+0x12>
   d97b8:	00000000 	.word	0x00000000

000d97bc <gmtime>:
   d97bc:	b538      	push	{r3, r4, r5, lr}
   d97be:	4b07      	ldr	r3, [pc, #28]	; (d97dc <gmtime+0x20>)
   d97c0:	681d      	ldr	r5, [r3, #0]
   d97c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d97c4:	4604      	mov	r4, r0
   d97c6:	b91b      	cbnz	r3, d97d0 <gmtime+0x14>
   d97c8:	2024      	movs	r0, #36	; 0x24
   d97ca:	f7fd fe2b 	bl	d7424 <malloc>
   d97ce:	63e8      	str	r0, [r5, #60]	; 0x3c
   d97d0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d97d2:	4620      	mov	r0, r4
   d97d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d97d8:	f7fd be7c 	b.w	d74d4 <gmtime_r>
   d97dc:	2003d820 	.word	0x2003d820

000d97e0 <memcpy>:
   d97e0:	440a      	add	r2, r1
   d97e2:	4291      	cmp	r1, r2
   d97e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d97e8:	d100      	bne.n	d97ec <memcpy+0xc>
   d97ea:	4770      	bx	lr
   d97ec:	b510      	push	{r4, lr}
   d97ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d97f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d97f6:	4291      	cmp	r1, r2
   d97f8:	d1f9      	bne.n	d97ee <memcpy+0xe>
   d97fa:	bd10      	pop	{r4, pc}

000d97fc <memmove>:
   d97fc:	4288      	cmp	r0, r1
   d97fe:	b510      	push	{r4, lr}
   d9800:	eb01 0402 	add.w	r4, r1, r2
   d9804:	d902      	bls.n	d980c <memmove+0x10>
   d9806:	4284      	cmp	r4, r0
   d9808:	4623      	mov	r3, r4
   d980a:	d807      	bhi.n	d981c <memmove+0x20>
   d980c:	1e43      	subs	r3, r0, #1
   d980e:	42a1      	cmp	r1, r4
   d9810:	d008      	beq.n	d9824 <memmove+0x28>
   d9812:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9816:	f803 2f01 	strb.w	r2, [r3, #1]!
   d981a:	e7f8      	b.n	d980e <memmove+0x12>
   d981c:	4402      	add	r2, r0
   d981e:	4601      	mov	r1, r0
   d9820:	428a      	cmp	r2, r1
   d9822:	d100      	bne.n	d9826 <memmove+0x2a>
   d9824:	bd10      	pop	{r4, pc}
   d9826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d982a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d982e:	e7f7      	b.n	d9820 <memmove+0x24>

000d9830 <memset>:
   d9830:	4402      	add	r2, r0
   d9832:	4603      	mov	r3, r0
   d9834:	4293      	cmp	r3, r2
   d9836:	d100      	bne.n	d983a <memset+0xa>
   d9838:	4770      	bx	lr
   d983a:	f803 1b01 	strb.w	r1, [r3], #1
   d983e:	e7f9      	b.n	d9834 <memset+0x4>

000d9840 <srand>:
   d9840:	b538      	push	{r3, r4, r5, lr}
   d9842:	4b0d      	ldr	r3, [pc, #52]	; (d9878 <srand+0x38>)
   d9844:	681d      	ldr	r5, [r3, #0]
   d9846:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9848:	4604      	mov	r4, r0
   d984a:	b97b      	cbnz	r3, d986c <srand+0x2c>
   d984c:	2018      	movs	r0, #24
   d984e:	f7fd fde9 	bl	d7424 <malloc>
   d9852:	4a0a      	ldr	r2, [pc, #40]	; (d987c <srand+0x3c>)
   d9854:	4b0a      	ldr	r3, [pc, #40]	; (d9880 <srand+0x40>)
   d9856:	63a8      	str	r0, [r5, #56]	; 0x38
   d9858:	e9c0 2300 	strd	r2, r3, [r0]
   d985c:	4b09      	ldr	r3, [pc, #36]	; (d9884 <srand+0x44>)
   d985e:	6083      	str	r3, [r0, #8]
   d9860:	230b      	movs	r3, #11
   d9862:	8183      	strh	r3, [r0, #12]
   d9864:	2201      	movs	r2, #1
   d9866:	2300      	movs	r3, #0
   d9868:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d986c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d986e:	2200      	movs	r2, #0
   d9870:	611c      	str	r4, [r3, #16]
   d9872:	615a      	str	r2, [r3, #20]
   d9874:	bd38      	pop	{r3, r4, r5, pc}
   d9876:	bf00      	nop
   d9878:	2003d820 	.word	0x2003d820
   d987c:	abcd330e 	.word	0xabcd330e
   d9880:	e66d1234 	.word	0xe66d1234
   d9884:	0005deec 	.word	0x0005deec

000d9888 <strcmp>:
   d9888:	f810 2b01 	ldrb.w	r2, [r0], #1
   d988c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9890:	2a01      	cmp	r2, #1
   d9892:	bf28      	it	cs
   d9894:	429a      	cmpcs	r2, r3
   d9896:	d0f7      	beq.n	d9888 <strcmp>
   d9898:	1ad0      	subs	r0, r2, r3
   d989a:	4770      	bx	lr

000d989c <strcpy>:
   d989c:	4603      	mov	r3, r0
   d989e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d98a2:	f803 2b01 	strb.w	r2, [r3], #1
   d98a6:	2a00      	cmp	r2, #0
   d98a8:	d1f9      	bne.n	d989e <strcpy+0x2>
   d98aa:	4770      	bx	lr

000d98ac <strdup>:
   d98ac:	4b02      	ldr	r3, [pc, #8]	; (d98b8 <strdup+0xc>)
   d98ae:	4601      	mov	r1, r0
   d98b0:	6818      	ldr	r0, [r3, #0]
   d98b2:	f000 b803 	b.w	d98bc <_strdup_r>
   d98b6:	bf00      	nop
   d98b8:	2003d820 	.word	0x2003d820

000d98bc <_strdup_r>:
   d98bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d98be:	4604      	mov	r4, r0
   d98c0:	4608      	mov	r0, r1
   d98c2:	460d      	mov	r5, r1
   d98c4:	f000 f80f 	bl	d98e6 <strlen>
   d98c8:	1c42      	adds	r2, r0, #1
   d98ca:	4611      	mov	r1, r2
   d98cc:	4620      	mov	r0, r4
   d98ce:	9201      	str	r2, [sp, #4]
   d98d0:	f7fd fdd8 	bl	d7484 <_malloc_r>
   d98d4:	4604      	mov	r4, r0
   d98d6:	b118      	cbz	r0, d98e0 <_strdup_r+0x24>
   d98d8:	9a01      	ldr	r2, [sp, #4]
   d98da:	4629      	mov	r1, r5
   d98dc:	f7ff ff80 	bl	d97e0 <memcpy>
   d98e0:	4620      	mov	r0, r4
   d98e2:	b003      	add	sp, #12
   d98e4:	bd30      	pop	{r4, r5, pc}

000d98e6 <strlen>:
   d98e6:	4603      	mov	r3, r0
   d98e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d98ec:	2a00      	cmp	r2, #0
   d98ee:	d1fb      	bne.n	d98e8 <strlen+0x2>
   d98f0:	1a18      	subs	r0, r3, r0
   d98f2:	3801      	subs	r0, #1
   d98f4:	4770      	bx	lr

000d98f6 <strncmp>:
   d98f6:	b510      	push	{r4, lr}
   d98f8:	b16a      	cbz	r2, d9916 <strncmp+0x20>
   d98fa:	3901      	subs	r1, #1
   d98fc:	1884      	adds	r4, r0, r2
   d98fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9902:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d9906:	4293      	cmp	r3, r2
   d9908:	d103      	bne.n	d9912 <strncmp+0x1c>
   d990a:	42a0      	cmp	r0, r4
   d990c:	d001      	beq.n	d9912 <strncmp+0x1c>
   d990e:	2b00      	cmp	r3, #0
   d9910:	d1f5      	bne.n	d98fe <strncmp+0x8>
   d9912:	1a98      	subs	r0, r3, r2
   d9914:	bd10      	pop	{r4, pc}
   d9916:	4610      	mov	r0, r2
   d9918:	e7fc      	b.n	d9914 <strncmp+0x1e>

000d991a <strncpy>:
   d991a:	b510      	push	{r4, lr}
   d991c:	3901      	subs	r1, #1
   d991e:	4603      	mov	r3, r0
   d9920:	b132      	cbz	r2, d9930 <strncpy+0x16>
   d9922:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9926:	f803 4b01 	strb.w	r4, [r3], #1
   d992a:	3a01      	subs	r2, #1
   d992c:	2c00      	cmp	r4, #0
   d992e:	d1f7      	bne.n	d9920 <strncpy+0x6>
   d9930:	441a      	add	r2, r3
   d9932:	2100      	movs	r1, #0
   d9934:	4293      	cmp	r3, r2
   d9936:	d100      	bne.n	d993a <strncpy+0x20>
   d9938:	bd10      	pop	{r4, pc}
   d993a:	f803 1b01 	strb.w	r1, [r3], #1
   d993e:	e7f9      	b.n	d9934 <strncpy+0x1a>

000d9940 <sulp>:
   d9940:	b570      	push	{r4, r5, r6, lr}
   d9942:	4604      	mov	r4, r0
   d9944:	460d      	mov	r5, r1
   d9946:	ec45 4b10 	vmov	d0, r4, r5
   d994a:	4616      	mov	r6, r2
   d994c:	f001 fd1a 	bl	db384 <__ulp>
   d9950:	ec51 0b10 	vmov	r0, r1, d0
   d9954:	b17e      	cbz	r6, d9976 <sulp+0x36>
   d9956:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d995a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d995e:	2b00      	cmp	r3, #0
   d9960:	dd09      	ble.n	d9976 <sulp+0x36>
   d9962:	051b      	lsls	r3, r3, #20
   d9964:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9968:	2400      	movs	r4, #0
   d996a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d996e:	4622      	mov	r2, r4
   d9970:	462b      	mov	r3, r5
   d9972:	f7ff fba9 	bl	d90c8 <__aeabi_dmul>
   d9976:	bd70      	pop	{r4, r5, r6, pc}

000d9978 <_strtod_l>:
   d9978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d997c:	b0a3      	sub	sp, #140	; 0x8c
   d997e:	461f      	mov	r7, r3
   d9980:	2300      	movs	r3, #0
   d9982:	931e      	str	r3, [sp, #120]	; 0x78
   d9984:	4ba4      	ldr	r3, [pc, #656]	; (d9c18 <_strtod_l+0x2a0>)
   d9986:	9219      	str	r2, [sp, #100]	; 0x64
   d9988:	681b      	ldr	r3, [r3, #0]
   d998a:	9307      	str	r3, [sp, #28]
   d998c:	4604      	mov	r4, r0
   d998e:	4618      	mov	r0, r3
   d9990:	4688      	mov	r8, r1
   d9992:	f7ff ffa8 	bl	d98e6 <strlen>
   d9996:	f04f 0a00 	mov.w	sl, #0
   d999a:	4605      	mov	r5, r0
   d999c:	f04f 0b00 	mov.w	fp, #0
   d99a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d99a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99a6:	781a      	ldrb	r2, [r3, #0]
   d99a8:	2a2b      	cmp	r2, #43	; 0x2b
   d99aa:	d04c      	beq.n	d9a46 <_strtod_l+0xce>
   d99ac:	d839      	bhi.n	d9a22 <_strtod_l+0xaa>
   d99ae:	2a0d      	cmp	r2, #13
   d99b0:	d832      	bhi.n	d9a18 <_strtod_l+0xa0>
   d99b2:	2a08      	cmp	r2, #8
   d99b4:	d832      	bhi.n	d9a1c <_strtod_l+0xa4>
   d99b6:	2a00      	cmp	r2, #0
   d99b8:	d03c      	beq.n	d9a34 <_strtod_l+0xbc>
   d99ba:	2300      	movs	r3, #0
   d99bc:	930e      	str	r3, [sp, #56]	; 0x38
   d99be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d99c0:	7833      	ldrb	r3, [r6, #0]
   d99c2:	2b30      	cmp	r3, #48	; 0x30
   d99c4:	f040 80b4 	bne.w	d9b30 <_strtod_l+0x1b8>
   d99c8:	7873      	ldrb	r3, [r6, #1]
   d99ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d99ce:	2b58      	cmp	r3, #88	; 0x58
   d99d0:	d16c      	bne.n	d9aac <_strtod_l+0x134>
   d99d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d99d4:	9301      	str	r3, [sp, #4]
   d99d6:	ab1e      	add	r3, sp, #120	; 0x78
   d99d8:	9702      	str	r7, [sp, #8]
   d99da:	9300      	str	r3, [sp, #0]
   d99dc:	4a8f      	ldr	r2, [pc, #572]	; (d9c1c <_strtod_l+0x2a4>)
   d99de:	ab1f      	add	r3, sp, #124	; 0x7c
   d99e0:	a91d      	add	r1, sp, #116	; 0x74
   d99e2:	4620      	mov	r0, r4
   d99e4:	f000 feca 	bl	da77c <__gethex>
   d99e8:	f010 0707 	ands.w	r7, r0, #7
   d99ec:	4605      	mov	r5, r0
   d99ee:	d005      	beq.n	d99fc <_strtod_l+0x84>
   d99f0:	2f06      	cmp	r7, #6
   d99f2:	d12a      	bne.n	d9a4a <_strtod_l+0xd2>
   d99f4:	3601      	adds	r6, #1
   d99f6:	2300      	movs	r3, #0
   d99f8:	961d      	str	r6, [sp, #116]	; 0x74
   d99fa:	930e      	str	r3, [sp, #56]	; 0x38
   d99fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d99fe:	2b00      	cmp	r3, #0
   d9a00:	f040 8596 	bne.w	da530 <_strtod_l+0xbb8>
   d9a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9a06:	b1db      	cbz	r3, d9a40 <_strtod_l+0xc8>
   d9a08:	4652      	mov	r2, sl
   d9a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9a0e:	ec43 2b10 	vmov	d0, r2, r3
   d9a12:	b023      	add	sp, #140	; 0x8c
   d9a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a18:	2a20      	cmp	r2, #32
   d9a1a:	d1ce      	bne.n	d99ba <_strtod_l+0x42>
   d9a1c:	3301      	adds	r3, #1
   d9a1e:	931d      	str	r3, [sp, #116]	; 0x74
   d9a20:	e7c0      	b.n	d99a4 <_strtod_l+0x2c>
   d9a22:	2a2d      	cmp	r2, #45	; 0x2d
   d9a24:	d1c9      	bne.n	d99ba <_strtod_l+0x42>
   d9a26:	2201      	movs	r2, #1
   d9a28:	920e      	str	r2, [sp, #56]	; 0x38
   d9a2a:	1c5a      	adds	r2, r3, #1
   d9a2c:	921d      	str	r2, [sp, #116]	; 0x74
   d9a2e:	785b      	ldrb	r3, [r3, #1]
   d9a30:	2b00      	cmp	r3, #0
   d9a32:	d1c4      	bne.n	d99be <_strtod_l+0x46>
   d9a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9a36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9a3a:	2b00      	cmp	r3, #0
   d9a3c:	f040 8576 	bne.w	da52c <_strtod_l+0xbb4>
   d9a40:	4652      	mov	r2, sl
   d9a42:	465b      	mov	r3, fp
   d9a44:	e7e3      	b.n	d9a0e <_strtod_l+0x96>
   d9a46:	2200      	movs	r2, #0
   d9a48:	e7ee      	b.n	d9a28 <_strtod_l+0xb0>
   d9a4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9a4c:	b13a      	cbz	r2, d9a5e <_strtod_l+0xe6>
   d9a4e:	2135      	movs	r1, #53	; 0x35
   d9a50:	a820      	add	r0, sp, #128	; 0x80
   d9a52:	f001 fd96 	bl	db582 <__copybits>
   d9a56:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a58:	4620      	mov	r0, r4
   d9a5a:	f001 f9cb 	bl	dadf4 <_Bfree>
   d9a5e:	3f01      	subs	r7, #1
   d9a60:	2f05      	cmp	r7, #5
   d9a62:	d807      	bhi.n	d9a74 <_strtod_l+0xfc>
   d9a64:	e8df f007 	tbb	[pc, r7]
   d9a68:	1d180b0e 	.word	0x1d180b0e
   d9a6c:	030e      	.short	0x030e
   d9a6e:	f04f 0b00 	mov.w	fp, #0
   d9a72:	46da      	mov	sl, fp
   d9a74:	0728      	lsls	r0, r5, #28
   d9a76:	d5c1      	bpl.n	d99fc <_strtod_l+0x84>
   d9a78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9a7c:	e7be      	b.n	d99fc <_strtod_l+0x84>
   d9a7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9a82:	e7f7      	b.n	d9a74 <_strtod_l+0xfc>
   d9a84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9a88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9a8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9a8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9a92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9a96:	e7ed      	b.n	d9a74 <_strtod_l+0xfc>
   d9a98:	f8df b184 	ldr.w	fp, [pc, #388]	; d9c20 <_strtod_l+0x2a8>
   d9a9c:	f04f 0a00 	mov.w	sl, #0
   d9aa0:	e7e8      	b.n	d9a74 <_strtod_l+0xfc>
   d9aa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9aa6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9aaa:	e7e3      	b.n	d9a74 <_strtod_l+0xfc>
   d9aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9aae:	1c5a      	adds	r2, r3, #1
   d9ab0:	921d      	str	r2, [sp, #116]	; 0x74
   d9ab2:	785b      	ldrb	r3, [r3, #1]
   d9ab4:	2b30      	cmp	r3, #48	; 0x30
   d9ab6:	d0f9      	beq.n	d9aac <_strtod_l+0x134>
   d9ab8:	2b00      	cmp	r3, #0
   d9aba:	d09f      	beq.n	d99fc <_strtod_l+0x84>
   d9abc:	2301      	movs	r3, #1
   d9abe:	f04f 0900 	mov.w	r9, #0
   d9ac2:	9304      	str	r3, [sp, #16]
   d9ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ac6:	930a      	str	r3, [sp, #40]	; 0x28
   d9ac8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d9acc:	464f      	mov	r7, r9
   d9ace:	220a      	movs	r2, #10
   d9ad0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d9ad2:	7806      	ldrb	r6, [r0, #0]
   d9ad4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9ad8:	b2d9      	uxtb	r1, r3
   d9ada:	2909      	cmp	r1, #9
   d9adc:	d92a      	bls.n	d9b34 <_strtod_l+0x1bc>
   d9ade:	9907      	ldr	r1, [sp, #28]
   d9ae0:	462a      	mov	r2, r5
   d9ae2:	f7ff ff08 	bl	d98f6 <strncmp>
   d9ae6:	b398      	cbz	r0, d9b50 <_strtod_l+0x1d8>
   d9ae8:	2000      	movs	r0, #0
   d9aea:	4633      	mov	r3, r6
   d9aec:	463d      	mov	r5, r7
   d9aee:	9007      	str	r0, [sp, #28]
   d9af0:	4602      	mov	r2, r0
   d9af2:	2b65      	cmp	r3, #101	; 0x65
   d9af4:	d001      	beq.n	d9afa <_strtod_l+0x182>
   d9af6:	2b45      	cmp	r3, #69	; 0x45
   d9af8:	d118      	bne.n	d9b2c <_strtod_l+0x1b4>
   d9afa:	b91d      	cbnz	r5, d9b04 <_strtod_l+0x18c>
   d9afc:	9b04      	ldr	r3, [sp, #16]
   d9afe:	4303      	orrs	r3, r0
   d9b00:	d098      	beq.n	d9a34 <_strtod_l+0xbc>
   d9b02:	2500      	movs	r5, #0
   d9b04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d9b08:	f108 0301 	add.w	r3, r8, #1
   d9b0c:	931d      	str	r3, [sp, #116]	; 0x74
   d9b0e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d9b12:	2b2b      	cmp	r3, #43	; 0x2b
   d9b14:	d075      	beq.n	d9c02 <_strtod_l+0x28a>
   d9b16:	2b2d      	cmp	r3, #45	; 0x2d
   d9b18:	d07b      	beq.n	d9c12 <_strtod_l+0x29a>
   d9b1a:	f04f 0c00 	mov.w	ip, #0
   d9b1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9b22:	2909      	cmp	r1, #9
   d9b24:	f240 8082 	bls.w	d9c2c <_strtod_l+0x2b4>
   d9b28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9b2c:	2600      	movs	r6, #0
   d9b2e:	e09d      	b.n	d9c6c <_strtod_l+0x2f4>
   d9b30:	2300      	movs	r3, #0
   d9b32:	e7c4      	b.n	d9abe <_strtod_l+0x146>
   d9b34:	2f08      	cmp	r7, #8
   d9b36:	bfd8      	it	le
   d9b38:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9b3a:	f100 0001 	add.w	r0, r0, #1
   d9b3e:	bfda      	itte	le
   d9b40:	fb02 3301 	mlale	r3, r2, r1, r3
   d9b44:	9309      	strle	r3, [sp, #36]	; 0x24
   d9b46:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9b4a:	3701      	adds	r7, #1
   d9b4c:	901d      	str	r0, [sp, #116]	; 0x74
   d9b4e:	e7bf      	b.n	d9ad0 <_strtod_l+0x158>
   d9b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9b52:	195a      	adds	r2, r3, r5
   d9b54:	921d      	str	r2, [sp, #116]	; 0x74
   d9b56:	5d5b      	ldrb	r3, [r3, r5]
   d9b58:	2f00      	cmp	r7, #0
   d9b5a:	d037      	beq.n	d9bcc <_strtod_l+0x254>
   d9b5c:	9007      	str	r0, [sp, #28]
   d9b5e:	463d      	mov	r5, r7
   d9b60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9b64:	2a09      	cmp	r2, #9
   d9b66:	d912      	bls.n	d9b8e <_strtod_l+0x216>
   d9b68:	2201      	movs	r2, #1
   d9b6a:	e7c2      	b.n	d9af2 <_strtod_l+0x17a>
   d9b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9b6e:	1c5a      	adds	r2, r3, #1
   d9b70:	921d      	str	r2, [sp, #116]	; 0x74
   d9b72:	785b      	ldrb	r3, [r3, #1]
   d9b74:	3001      	adds	r0, #1
   d9b76:	2b30      	cmp	r3, #48	; 0x30
   d9b78:	d0f8      	beq.n	d9b6c <_strtod_l+0x1f4>
   d9b7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9b7e:	2a08      	cmp	r2, #8
   d9b80:	f200 84db 	bhi.w	da53a <_strtod_l+0xbc2>
   d9b84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9b86:	9007      	str	r0, [sp, #28]
   d9b88:	2000      	movs	r0, #0
   d9b8a:	920a      	str	r2, [sp, #40]	; 0x28
   d9b8c:	4605      	mov	r5, r0
   d9b8e:	3b30      	subs	r3, #48	; 0x30
   d9b90:	f100 0201 	add.w	r2, r0, #1
   d9b94:	d014      	beq.n	d9bc0 <_strtod_l+0x248>
   d9b96:	9907      	ldr	r1, [sp, #28]
   d9b98:	4411      	add	r1, r2
   d9b9a:	9107      	str	r1, [sp, #28]
   d9b9c:	462a      	mov	r2, r5
   d9b9e:	eb00 0e05 	add.w	lr, r0, r5
   d9ba2:	210a      	movs	r1, #10
   d9ba4:	4572      	cmp	r2, lr
   d9ba6:	d113      	bne.n	d9bd0 <_strtod_l+0x258>
   d9ba8:	182a      	adds	r2, r5, r0
   d9baa:	2a08      	cmp	r2, #8
   d9bac:	f105 0501 	add.w	r5, r5, #1
   d9bb0:	4405      	add	r5, r0
   d9bb2:	dc1c      	bgt.n	d9bee <_strtod_l+0x276>
   d9bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9bb6:	220a      	movs	r2, #10
   d9bb8:	fb02 3301 	mla	r3, r2, r1, r3
   d9bbc:	9309      	str	r3, [sp, #36]	; 0x24
   d9bbe:	2200      	movs	r2, #0
   d9bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9bc2:	1c59      	adds	r1, r3, #1
   d9bc4:	911d      	str	r1, [sp, #116]	; 0x74
   d9bc6:	785b      	ldrb	r3, [r3, #1]
   d9bc8:	4610      	mov	r0, r2
   d9bca:	e7c9      	b.n	d9b60 <_strtod_l+0x1e8>
   d9bcc:	4638      	mov	r0, r7
   d9bce:	e7d2      	b.n	d9b76 <_strtod_l+0x1fe>
   d9bd0:	2a08      	cmp	r2, #8
   d9bd2:	dc04      	bgt.n	d9bde <_strtod_l+0x266>
   d9bd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9bd6:	434e      	muls	r6, r1
   d9bd8:	9609      	str	r6, [sp, #36]	; 0x24
   d9bda:	3201      	adds	r2, #1
   d9bdc:	e7e2      	b.n	d9ba4 <_strtod_l+0x22c>
   d9bde:	f102 0c01 	add.w	ip, r2, #1
   d9be2:	f1bc 0f10 	cmp.w	ip, #16
   d9be6:	bfd8      	it	le
   d9be8:	fb01 f909 	mulle.w	r9, r1, r9
   d9bec:	e7f5      	b.n	d9bda <_strtod_l+0x262>
   d9bee:	2d10      	cmp	r5, #16
   d9bf0:	bfdc      	itt	le
   d9bf2:	220a      	movle	r2, #10
   d9bf4:	fb02 3909 	mlale	r9, r2, r9, r3
   d9bf8:	e7e1      	b.n	d9bbe <_strtod_l+0x246>
   d9bfa:	2300      	movs	r3, #0
   d9bfc:	9307      	str	r3, [sp, #28]
   d9bfe:	2201      	movs	r2, #1
   d9c00:	e77c      	b.n	d9afc <_strtod_l+0x184>
   d9c02:	f04f 0c00 	mov.w	ip, #0
   d9c06:	f108 0302 	add.w	r3, r8, #2
   d9c0a:	931d      	str	r3, [sp, #116]	; 0x74
   d9c0c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9c10:	e785      	b.n	d9b1e <_strtod_l+0x1a6>
   d9c12:	f04f 0c01 	mov.w	ip, #1
   d9c16:	e7f6      	b.n	d9c06 <_strtod_l+0x28e>
   d9c18:	000dc4bc 	.word	0x000dc4bc
   d9c1c:	000dc368 	.word	0x000dc368
   d9c20:	7ff00000 	.word	0x7ff00000
   d9c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c26:	1c59      	adds	r1, r3, #1
   d9c28:	911d      	str	r1, [sp, #116]	; 0x74
   d9c2a:	785b      	ldrb	r3, [r3, #1]
   d9c2c:	2b30      	cmp	r3, #48	; 0x30
   d9c2e:	d0f9      	beq.n	d9c24 <_strtod_l+0x2ac>
   d9c30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9c34:	2908      	cmp	r1, #8
   d9c36:	f63f af79 	bhi.w	d9b2c <_strtod_l+0x1b4>
   d9c3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9c3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c40:	9308      	str	r3, [sp, #32]
   d9c42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c44:	1c59      	adds	r1, r3, #1
   d9c46:	911d      	str	r1, [sp, #116]	; 0x74
   d9c48:	785b      	ldrb	r3, [r3, #1]
   d9c4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9c4e:	2e09      	cmp	r6, #9
   d9c50:	d937      	bls.n	d9cc2 <_strtod_l+0x34a>
   d9c52:	9e08      	ldr	r6, [sp, #32]
   d9c54:	1b89      	subs	r1, r1, r6
   d9c56:	2908      	cmp	r1, #8
   d9c58:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9c5c:	dc02      	bgt.n	d9c64 <_strtod_l+0x2ec>
   d9c5e:	4576      	cmp	r6, lr
   d9c60:	bfa8      	it	ge
   d9c62:	4676      	movge	r6, lr
   d9c64:	f1bc 0f00 	cmp.w	ip, #0
   d9c68:	d000      	beq.n	d9c6c <_strtod_l+0x2f4>
   d9c6a:	4276      	negs	r6, r6
   d9c6c:	2d00      	cmp	r5, #0
   d9c6e:	d14f      	bne.n	d9d10 <_strtod_l+0x398>
   d9c70:	9904      	ldr	r1, [sp, #16]
   d9c72:	4301      	orrs	r1, r0
   d9c74:	f47f aec2 	bne.w	d99fc <_strtod_l+0x84>
   d9c78:	2a00      	cmp	r2, #0
   d9c7a:	f47f aedb 	bne.w	d9a34 <_strtod_l+0xbc>
   d9c7e:	2b69      	cmp	r3, #105	; 0x69
   d9c80:	d027      	beq.n	d9cd2 <_strtod_l+0x35a>
   d9c82:	dc24      	bgt.n	d9cce <_strtod_l+0x356>
   d9c84:	2b49      	cmp	r3, #73	; 0x49
   d9c86:	d024      	beq.n	d9cd2 <_strtod_l+0x35a>
   d9c88:	2b4e      	cmp	r3, #78	; 0x4e
   d9c8a:	f47f aed3 	bne.w	d9a34 <_strtod_l+0xbc>
   d9c8e:	499e      	ldr	r1, [pc, #632]	; (d9f08 <_strtod_l+0x590>)
   d9c90:	a81d      	add	r0, sp, #116	; 0x74
   d9c92:	f000 ffb9 	bl	dac08 <__match>
   d9c96:	2800      	cmp	r0, #0
   d9c98:	f43f aecc 	beq.w	d9a34 <_strtod_l+0xbc>
   d9c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c9e:	781b      	ldrb	r3, [r3, #0]
   d9ca0:	2b28      	cmp	r3, #40	; 0x28
   d9ca2:	d12d      	bne.n	d9d00 <_strtod_l+0x388>
   d9ca4:	4999      	ldr	r1, [pc, #612]	; (d9f0c <_strtod_l+0x594>)
   d9ca6:	aa20      	add	r2, sp, #128	; 0x80
   d9ca8:	a81d      	add	r0, sp, #116	; 0x74
   d9caa:	f000 ffc1 	bl	dac30 <__hexnan>
   d9cae:	2805      	cmp	r0, #5
   d9cb0:	d126      	bne.n	d9d00 <_strtod_l+0x388>
   d9cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9cb4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9cb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9cbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9cc0:	e69c      	b.n	d99fc <_strtod_l+0x84>
   d9cc2:	210a      	movs	r1, #10
   d9cc4:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9cc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9ccc:	e7b9      	b.n	d9c42 <_strtod_l+0x2ca>
   d9cce:	2b6e      	cmp	r3, #110	; 0x6e
   d9cd0:	e7db      	b.n	d9c8a <_strtod_l+0x312>
   d9cd2:	498f      	ldr	r1, [pc, #572]	; (d9f10 <_strtod_l+0x598>)
   d9cd4:	a81d      	add	r0, sp, #116	; 0x74
   d9cd6:	f000 ff97 	bl	dac08 <__match>
   d9cda:	2800      	cmp	r0, #0
   d9cdc:	f43f aeaa 	beq.w	d9a34 <_strtod_l+0xbc>
   d9ce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ce2:	498c      	ldr	r1, [pc, #560]	; (d9f14 <_strtod_l+0x59c>)
   d9ce4:	3b01      	subs	r3, #1
   d9ce6:	a81d      	add	r0, sp, #116	; 0x74
   d9ce8:	931d      	str	r3, [sp, #116]	; 0x74
   d9cea:	f000 ff8d 	bl	dac08 <__match>
   d9cee:	b910      	cbnz	r0, d9cf6 <_strtod_l+0x37e>
   d9cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9cf2:	3301      	adds	r3, #1
   d9cf4:	931d      	str	r3, [sp, #116]	; 0x74
   d9cf6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9f24 <_strtod_l+0x5ac>
   d9cfa:	f04f 0a00 	mov.w	sl, #0
   d9cfe:	e67d      	b.n	d99fc <_strtod_l+0x84>
   d9d00:	4885      	ldr	r0, [pc, #532]	; (d9f18 <_strtod_l+0x5a0>)
   d9d02:	f001 fc91 	bl	db628 <nan>
   d9d06:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9d0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9d0e:	e675      	b.n	d99fc <_strtod_l+0x84>
   d9d10:	9b07      	ldr	r3, [sp, #28]
   d9d12:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9d14:	1af3      	subs	r3, r6, r3
   d9d16:	2f00      	cmp	r7, #0
   d9d18:	bf08      	it	eq
   d9d1a:	462f      	moveq	r7, r5
   d9d1c:	2d10      	cmp	r5, #16
   d9d1e:	9308      	str	r3, [sp, #32]
   d9d20:	46a8      	mov	r8, r5
   d9d22:	bfa8      	it	ge
   d9d24:	f04f 0810 	movge.w	r8, #16
   d9d28:	f7ff f954 	bl	d8fd4 <__aeabi_ui2d>
   d9d2c:	2d09      	cmp	r5, #9
   d9d2e:	4682      	mov	sl, r0
   d9d30:	468b      	mov	fp, r1
   d9d32:	dd13      	ble.n	d9d5c <_strtod_l+0x3e4>
   d9d34:	4b79      	ldr	r3, [pc, #484]	; (d9f1c <_strtod_l+0x5a4>)
   d9d36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9d3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9d3e:	f7ff f9c3 	bl	d90c8 <__aeabi_dmul>
   d9d42:	4682      	mov	sl, r0
   d9d44:	4648      	mov	r0, r9
   d9d46:	468b      	mov	fp, r1
   d9d48:	f7ff f944 	bl	d8fd4 <__aeabi_ui2d>
   d9d4c:	4602      	mov	r2, r0
   d9d4e:	460b      	mov	r3, r1
   d9d50:	4650      	mov	r0, sl
   d9d52:	4659      	mov	r1, fp
   d9d54:	f7ff f802 	bl	d8d5c <__adddf3>
   d9d58:	4682      	mov	sl, r0
   d9d5a:	468b      	mov	fp, r1
   d9d5c:	2d0f      	cmp	r5, #15
   d9d5e:	dc38      	bgt.n	d9dd2 <_strtod_l+0x45a>
   d9d60:	9b08      	ldr	r3, [sp, #32]
   d9d62:	2b00      	cmp	r3, #0
   d9d64:	f43f ae4a 	beq.w	d99fc <_strtod_l+0x84>
   d9d68:	dd24      	ble.n	d9db4 <_strtod_l+0x43c>
   d9d6a:	2b16      	cmp	r3, #22
   d9d6c:	dc0b      	bgt.n	d9d86 <_strtod_l+0x40e>
   d9d6e:	4d6b      	ldr	r5, [pc, #428]	; (d9f1c <_strtod_l+0x5a4>)
   d9d70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9d74:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9d78:	4652      	mov	r2, sl
   d9d7a:	465b      	mov	r3, fp
   d9d7c:	f7ff f9a4 	bl	d90c8 <__aeabi_dmul>
   d9d80:	4682      	mov	sl, r0
   d9d82:	468b      	mov	fp, r1
   d9d84:	e63a      	b.n	d99fc <_strtod_l+0x84>
   d9d86:	9a08      	ldr	r2, [sp, #32]
   d9d88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9d8c:	4293      	cmp	r3, r2
   d9d8e:	db20      	blt.n	d9dd2 <_strtod_l+0x45a>
   d9d90:	4c62      	ldr	r4, [pc, #392]	; (d9f1c <_strtod_l+0x5a4>)
   d9d92:	f1c5 050f 	rsb	r5, r5, #15
   d9d96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9d9a:	4652      	mov	r2, sl
   d9d9c:	465b      	mov	r3, fp
   d9d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9da2:	f7ff f991 	bl	d90c8 <__aeabi_dmul>
   d9da6:	9b08      	ldr	r3, [sp, #32]
   d9da8:	1b5d      	subs	r5, r3, r5
   d9daa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9dae:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9db2:	e7e3      	b.n	d9d7c <_strtod_l+0x404>
   d9db4:	9b08      	ldr	r3, [sp, #32]
   d9db6:	3316      	adds	r3, #22
   d9db8:	db0b      	blt.n	d9dd2 <_strtod_l+0x45a>
   d9dba:	9b07      	ldr	r3, [sp, #28]
   d9dbc:	4a57      	ldr	r2, [pc, #348]	; (d9f1c <_strtod_l+0x5a4>)
   d9dbe:	1b9e      	subs	r6, r3, r6
   d9dc0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9dc8:	4650      	mov	r0, sl
   d9dca:	4659      	mov	r1, fp
   d9dcc:	f7ff faa6 	bl	d931c <__aeabi_ddiv>
   d9dd0:	e7d6      	b.n	d9d80 <_strtod_l+0x408>
   d9dd2:	9b08      	ldr	r3, [sp, #32]
   d9dd4:	eba5 0808 	sub.w	r8, r5, r8
   d9dd8:	4498      	add	r8, r3
   d9dda:	f1b8 0f00 	cmp.w	r8, #0
   d9dde:	dd71      	ble.n	d9ec4 <_strtod_l+0x54c>
   d9de0:	f018 030f 	ands.w	r3, r8, #15
   d9de4:	d00a      	beq.n	d9dfc <_strtod_l+0x484>
   d9de6:	494d      	ldr	r1, [pc, #308]	; (d9f1c <_strtod_l+0x5a4>)
   d9de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9dec:	4652      	mov	r2, sl
   d9dee:	465b      	mov	r3, fp
   d9df0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9df4:	f7ff f968 	bl	d90c8 <__aeabi_dmul>
   d9df8:	4682      	mov	sl, r0
   d9dfa:	468b      	mov	fp, r1
   d9dfc:	f038 080f 	bics.w	r8, r8, #15
   d9e00:	d04d      	beq.n	d9e9e <_strtod_l+0x526>
   d9e02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9e06:	dd22      	ble.n	d9e4e <_strtod_l+0x4d6>
   d9e08:	2500      	movs	r5, #0
   d9e0a:	462e      	mov	r6, r5
   d9e0c:	9509      	str	r5, [sp, #36]	; 0x24
   d9e0e:	9507      	str	r5, [sp, #28]
   d9e10:	2322      	movs	r3, #34	; 0x22
   d9e12:	f8df b110 	ldr.w	fp, [pc, #272]	; d9f24 <_strtod_l+0x5ac>
   d9e16:	6023      	str	r3, [r4, #0]
   d9e18:	f04f 0a00 	mov.w	sl, #0
   d9e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9e1e:	2b00      	cmp	r3, #0
   d9e20:	f43f adec 	beq.w	d99fc <_strtod_l+0x84>
   d9e24:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9e26:	4620      	mov	r0, r4
   d9e28:	f000 ffe4 	bl	dadf4 <_Bfree>
   d9e2c:	9907      	ldr	r1, [sp, #28]
   d9e2e:	4620      	mov	r0, r4
   d9e30:	f000 ffe0 	bl	dadf4 <_Bfree>
   d9e34:	4631      	mov	r1, r6
   d9e36:	4620      	mov	r0, r4
   d9e38:	f000 ffdc 	bl	dadf4 <_Bfree>
   d9e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9e3e:	4620      	mov	r0, r4
   d9e40:	f000 ffd8 	bl	dadf4 <_Bfree>
   d9e44:	4629      	mov	r1, r5
   d9e46:	4620      	mov	r0, r4
   d9e48:	f000 ffd4 	bl	dadf4 <_Bfree>
   d9e4c:	e5d6      	b.n	d99fc <_strtod_l+0x84>
   d9e4e:	2300      	movs	r3, #0
   d9e50:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9e54:	4650      	mov	r0, sl
   d9e56:	4659      	mov	r1, fp
   d9e58:	4699      	mov	r9, r3
   d9e5a:	f1b8 0f01 	cmp.w	r8, #1
   d9e5e:	dc21      	bgt.n	d9ea4 <_strtod_l+0x52c>
   d9e60:	b10b      	cbz	r3, d9e66 <_strtod_l+0x4ee>
   d9e62:	4682      	mov	sl, r0
   d9e64:	468b      	mov	fp, r1
   d9e66:	4b2e      	ldr	r3, [pc, #184]	; (d9f20 <_strtod_l+0x5a8>)
   d9e68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9e6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9e70:	4652      	mov	r2, sl
   d9e72:	465b      	mov	r3, fp
   d9e74:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9e78:	f7ff f926 	bl	d90c8 <__aeabi_dmul>
   d9e7c:	4b29      	ldr	r3, [pc, #164]	; (d9f24 <_strtod_l+0x5ac>)
   d9e7e:	460a      	mov	r2, r1
   d9e80:	400b      	ands	r3, r1
   d9e82:	4929      	ldr	r1, [pc, #164]	; (d9f28 <_strtod_l+0x5b0>)
   d9e84:	428b      	cmp	r3, r1
   d9e86:	4682      	mov	sl, r0
   d9e88:	d8be      	bhi.n	d9e08 <_strtod_l+0x490>
   d9e8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9e8e:	428b      	cmp	r3, r1
   d9e90:	bf86      	itte	hi
   d9e92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9f2c <_strtod_l+0x5b4>
   d9e96:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9e9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9e9e:	2300      	movs	r3, #0
   d9ea0:	9304      	str	r3, [sp, #16]
   d9ea2:	e081      	b.n	d9fa8 <_strtod_l+0x630>
   d9ea4:	f018 0f01 	tst.w	r8, #1
   d9ea8:	d007      	beq.n	d9eba <_strtod_l+0x542>
   d9eaa:	4b1d      	ldr	r3, [pc, #116]	; (d9f20 <_strtod_l+0x5a8>)
   d9eac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9eb4:	f7ff f908 	bl	d90c8 <__aeabi_dmul>
   d9eb8:	2301      	movs	r3, #1
   d9eba:	f109 0901 	add.w	r9, r9, #1
   d9ebe:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9ec2:	e7ca      	b.n	d9e5a <_strtod_l+0x4e2>
   d9ec4:	d0eb      	beq.n	d9e9e <_strtod_l+0x526>
   d9ec6:	f1c8 0800 	rsb	r8, r8, #0
   d9eca:	f018 020f 	ands.w	r2, r8, #15
   d9ece:	d00a      	beq.n	d9ee6 <_strtod_l+0x56e>
   d9ed0:	4b12      	ldr	r3, [pc, #72]	; (d9f1c <_strtod_l+0x5a4>)
   d9ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9ed6:	4650      	mov	r0, sl
   d9ed8:	4659      	mov	r1, fp
   d9eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ede:	f7ff fa1d 	bl	d931c <__aeabi_ddiv>
   d9ee2:	4682      	mov	sl, r0
   d9ee4:	468b      	mov	fp, r1
   d9ee6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9eea:	d0d8      	beq.n	d9e9e <_strtod_l+0x526>
   d9eec:	f1b8 0f1f 	cmp.w	r8, #31
   d9ef0:	dd1e      	ble.n	d9f30 <_strtod_l+0x5b8>
   d9ef2:	2500      	movs	r5, #0
   d9ef4:	462e      	mov	r6, r5
   d9ef6:	9509      	str	r5, [sp, #36]	; 0x24
   d9ef8:	9507      	str	r5, [sp, #28]
   d9efa:	2322      	movs	r3, #34	; 0x22
   d9efc:	f04f 0a00 	mov.w	sl, #0
   d9f00:	f04f 0b00 	mov.w	fp, #0
   d9f04:	6023      	str	r3, [r4, #0]
   d9f06:	e789      	b.n	d9e1c <_strtod_l+0x4a4>
   d9f08:	000dc363 	.word	0x000dc363
   d9f0c:	000dc37c 	.word	0x000dc37c
   d9f10:	000dc35a 	.word	0x000dc35a
   d9f14:	000dc35d 	.word	0x000dc35d
   d9f18:	000dc320 	.word	0x000dc320
   d9f1c:	000dc4f8 	.word	0x000dc4f8
   d9f20:	000dc4d0 	.word	0x000dc4d0
   d9f24:	7ff00000 	.word	0x7ff00000
   d9f28:	7ca00000 	.word	0x7ca00000
   d9f2c:	7fefffff 	.word	0x7fefffff
   d9f30:	f018 0310 	ands.w	r3, r8, #16
   d9f34:	bf18      	it	ne
   d9f36:	236a      	movne	r3, #106	; 0x6a
   d9f38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; da2f0 <_strtod_l+0x978>
   d9f3c:	9304      	str	r3, [sp, #16]
   d9f3e:	4650      	mov	r0, sl
   d9f40:	4659      	mov	r1, fp
   d9f42:	2300      	movs	r3, #0
   d9f44:	f018 0f01 	tst.w	r8, #1
   d9f48:	d004      	beq.n	d9f54 <_strtod_l+0x5dc>
   d9f4a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9f4e:	f7ff f8bb 	bl	d90c8 <__aeabi_dmul>
   d9f52:	2301      	movs	r3, #1
   d9f54:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9f58:	f109 0908 	add.w	r9, r9, #8
   d9f5c:	d1f2      	bne.n	d9f44 <_strtod_l+0x5cc>
   d9f5e:	b10b      	cbz	r3, d9f64 <_strtod_l+0x5ec>
   d9f60:	4682      	mov	sl, r0
   d9f62:	468b      	mov	fp, r1
   d9f64:	9b04      	ldr	r3, [sp, #16]
   d9f66:	b1bb      	cbz	r3, d9f98 <_strtod_l+0x620>
   d9f68:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9f6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9f70:	2b00      	cmp	r3, #0
   d9f72:	4659      	mov	r1, fp
   d9f74:	dd10      	ble.n	d9f98 <_strtod_l+0x620>
   d9f76:	2b1f      	cmp	r3, #31
   d9f78:	f340 8128 	ble.w	da1cc <_strtod_l+0x854>
   d9f7c:	2b34      	cmp	r3, #52	; 0x34
   d9f7e:	bfde      	ittt	le
   d9f80:	3b20      	suble	r3, #32
   d9f82:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9f86:	fa02 f303 	lslle.w	r3, r2, r3
   d9f8a:	f04f 0a00 	mov.w	sl, #0
   d9f8e:	bfcc      	ite	gt
   d9f90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9f94:	ea03 0b01 	andle.w	fp, r3, r1
   d9f98:	2200      	movs	r2, #0
   d9f9a:	2300      	movs	r3, #0
   d9f9c:	4650      	mov	r0, sl
   d9f9e:	4659      	mov	r1, fp
   d9fa0:	f7ff fafa 	bl	d9598 <__aeabi_dcmpeq>
   d9fa4:	2800      	cmp	r0, #0
   d9fa6:	d1a4      	bne.n	d9ef2 <_strtod_l+0x57a>
   d9fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9faa:	9300      	str	r3, [sp, #0]
   d9fac:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9fae:	462b      	mov	r3, r5
   d9fb0:	463a      	mov	r2, r7
   d9fb2:	4620      	mov	r0, r4
   d9fb4:	f000 ff73 	bl	dae9e <__s2b>
   d9fb8:	9009      	str	r0, [sp, #36]	; 0x24
   d9fba:	2800      	cmp	r0, #0
   d9fbc:	f43f af24 	beq.w	d9e08 <_strtod_l+0x490>
   d9fc0:	9b07      	ldr	r3, [sp, #28]
   d9fc2:	1b9e      	subs	r6, r3, r6
   d9fc4:	9b08      	ldr	r3, [sp, #32]
   d9fc6:	2b00      	cmp	r3, #0
   d9fc8:	bfb4      	ite	lt
   d9fca:	4633      	movlt	r3, r6
   d9fcc:	2300      	movge	r3, #0
   d9fce:	9310      	str	r3, [sp, #64]	; 0x40
   d9fd0:	9b08      	ldr	r3, [sp, #32]
   d9fd2:	2500      	movs	r5, #0
   d9fd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9fd8:	9318      	str	r3, [sp, #96]	; 0x60
   d9fda:	462e      	mov	r6, r5
   d9fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9fde:	4620      	mov	r0, r4
   d9fe0:	6859      	ldr	r1, [r3, #4]
   d9fe2:	f000 fed3 	bl	dad8c <_Balloc>
   d9fe6:	9007      	str	r0, [sp, #28]
   d9fe8:	2800      	cmp	r0, #0
   d9fea:	f43f af11 	beq.w	d9e10 <_strtod_l+0x498>
   d9fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9ff0:	691a      	ldr	r2, [r3, #16]
   d9ff2:	3202      	adds	r2, #2
   d9ff4:	f103 010c 	add.w	r1, r3, #12
   d9ff8:	0092      	lsls	r2, r2, #2
   d9ffa:	300c      	adds	r0, #12
   d9ffc:	f7ff fbf0 	bl	d97e0 <memcpy>
   da000:	ec4b ab10 	vmov	d0, sl, fp
   da004:	aa20      	add	r2, sp, #128	; 0x80
   da006:	a91f      	add	r1, sp, #124	; 0x7c
   da008:	4620      	mov	r0, r4
   da00a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   da00e:	f001 fa35 	bl	db47c <__d2b>
   da012:	901e      	str	r0, [sp, #120]	; 0x78
   da014:	2800      	cmp	r0, #0
   da016:	f43f aefb 	beq.w	d9e10 <_strtod_l+0x498>
   da01a:	2101      	movs	r1, #1
   da01c:	4620      	mov	r0, r4
   da01e:	f000 ffcc 	bl	dafba <__i2b>
   da022:	4606      	mov	r6, r0
   da024:	2800      	cmp	r0, #0
   da026:	f43f aef3 	beq.w	d9e10 <_strtod_l+0x498>
   da02a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   da02c:	9904      	ldr	r1, [sp, #16]
   da02e:	2b00      	cmp	r3, #0
   da030:	bfab      	itete	ge
   da032:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   da034:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   da036:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   da038:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   da03c:	bfac      	ite	ge
   da03e:	eb03 0902 	addge.w	r9, r3, r2
   da042:	1ad7      	sublt	r7, r2, r3
   da044:	9a20      	ldr	r2, [sp, #128]	; 0x80
   da046:	eba3 0801 	sub.w	r8, r3, r1
   da04a:	4490      	add	r8, r2
   da04c:	4ba3      	ldr	r3, [pc, #652]	; (da2dc <_strtod_l+0x964>)
   da04e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da052:	4598      	cmp	r8, r3
   da054:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   da058:	f280 80cc 	bge.w	da1f4 <_strtod_l+0x87c>
   da05c:	eba3 0308 	sub.w	r3, r3, r8
   da060:	2b1f      	cmp	r3, #31
   da062:	eba2 0203 	sub.w	r2, r2, r3
   da066:	f04f 0101 	mov.w	r1, #1
   da06a:	f300 80b6 	bgt.w	da1da <_strtod_l+0x862>
   da06e:	fa01 f303 	lsl.w	r3, r1, r3
   da072:	9311      	str	r3, [sp, #68]	; 0x44
   da074:	2300      	movs	r3, #0
   da076:	930c      	str	r3, [sp, #48]	; 0x30
   da078:	eb09 0802 	add.w	r8, r9, r2
   da07c:	9b04      	ldr	r3, [sp, #16]
   da07e:	45c1      	cmp	r9, r8
   da080:	4417      	add	r7, r2
   da082:	441f      	add	r7, r3
   da084:	464b      	mov	r3, r9
   da086:	bfa8      	it	ge
   da088:	4643      	movge	r3, r8
   da08a:	42bb      	cmp	r3, r7
   da08c:	bfa8      	it	ge
   da08e:	463b      	movge	r3, r7
   da090:	2b00      	cmp	r3, #0
   da092:	bfc2      	ittt	gt
   da094:	eba8 0803 	subgt.w	r8, r8, r3
   da098:	1aff      	subgt	r7, r7, r3
   da09a:	eba9 0903 	subgt.w	r9, r9, r3
   da09e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da0a0:	2b00      	cmp	r3, #0
   da0a2:	dd17      	ble.n	da0d4 <_strtod_l+0x75c>
   da0a4:	4631      	mov	r1, r6
   da0a6:	461a      	mov	r2, r3
   da0a8:	4620      	mov	r0, r4
   da0aa:	f001 f82b 	bl	db104 <__pow5mult>
   da0ae:	4606      	mov	r6, r0
   da0b0:	2800      	cmp	r0, #0
   da0b2:	f43f aead 	beq.w	d9e10 <_strtod_l+0x498>
   da0b6:	4601      	mov	r1, r0
   da0b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   da0ba:	4620      	mov	r0, r4
   da0bc:	f000 ff86 	bl	dafcc <__multiply>
   da0c0:	900f      	str	r0, [sp, #60]	; 0x3c
   da0c2:	2800      	cmp	r0, #0
   da0c4:	f43f aea4 	beq.w	d9e10 <_strtod_l+0x498>
   da0c8:	991e      	ldr	r1, [sp, #120]	; 0x78
   da0ca:	4620      	mov	r0, r4
   da0cc:	f000 fe92 	bl	dadf4 <_Bfree>
   da0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da0d2:	931e      	str	r3, [sp, #120]	; 0x78
   da0d4:	f1b8 0f00 	cmp.w	r8, #0
   da0d8:	f300 8091 	bgt.w	da1fe <_strtod_l+0x886>
   da0dc:	9b08      	ldr	r3, [sp, #32]
   da0de:	2b00      	cmp	r3, #0
   da0e0:	dd08      	ble.n	da0f4 <_strtod_l+0x77c>
   da0e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da0e4:	9907      	ldr	r1, [sp, #28]
   da0e6:	4620      	mov	r0, r4
   da0e8:	f001 f80c 	bl	db104 <__pow5mult>
   da0ec:	9007      	str	r0, [sp, #28]
   da0ee:	2800      	cmp	r0, #0
   da0f0:	f43f ae8e 	beq.w	d9e10 <_strtod_l+0x498>
   da0f4:	2f00      	cmp	r7, #0
   da0f6:	dd08      	ble.n	da10a <_strtod_l+0x792>
   da0f8:	9907      	ldr	r1, [sp, #28]
   da0fa:	463a      	mov	r2, r7
   da0fc:	4620      	mov	r0, r4
   da0fe:	f001 f84f 	bl	db1a0 <__lshift>
   da102:	9007      	str	r0, [sp, #28]
   da104:	2800      	cmp	r0, #0
   da106:	f43f ae83 	beq.w	d9e10 <_strtod_l+0x498>
   da10a:	f1b9 0f00 	cmp.w	r9, #0
   da10e:	dd08      	ble.n	da122 <_strtod_l+0x7aa>
   da110:	4631      	mov	r1, r6
   da112:	464a      	mov	r2, r9
   da114:	4620      	mov	r0, r4
   da116:	f001 f843 	bl	db1a0 <__lshift>
   da11a:	4606      	mov	r6, r0
   da11c:	2800      	cmp	r0, #0
   da11e:	f43f ae77 	beq.w	d9e10 <_strtod_l+0x498>
   da122:	9a07      	ldr	r2, [sp, #28]
   da124:	991e      	ldr	r1, [sp, #120]	; 0x78
   da126:	4620      	mov	r0, r4
   da128:	f001 f8b5 	bl	db296 <__mdiff>
   da12c:	4605      	mov	r5, r0
   da12e:	2800      	cmp	r0, #0
   da130:	f43f ae6e 	beq.w	d9e10 <_strtod_l+0x498>
   da134:	68c3      	ldr	r3, [r0, #12]
   da136:	930f      	str	r3, [sp, #60]	; 0x3c
   da138:	2300      	movs	r3, #0
   da13a:	60c3      	str	r3, [r0, #12]
   da13c:	4631      	mov	r1, r6
   da13e:	f001 f88e 	bl	db25e <__mcmp>
   da142:	2800      	cmp	r0, #0
   da144:	da65      	bge.n	da212 <_strtod_l+0x89a>
   da146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da148:	ea53 030a 	orrs.w	r3, r3, sl
   da14c:	f040 8087 	bne.w	da25e <_strtod_l+0x8e6>
   da150:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da154:	2b00      	cmp	r3, #0
   da156:	f040 8082 	bne.w	da25e <_strtod_l+0x8e6>
   da15a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da15e:	0d1b      	lsrs	r3, r3, #20
   da160:	051b      	lsls	r3, r3, #20
   da162:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da166:	d97a      	bls.n	da25e <_strtod_l+0x8e6>
   da168:	696b      	ldr	r3, [r5, #20]
   da16a:	b913      	cbnz	r3, da172 <_strtod_l+0x7fa>
   da16c:	692b      	ldr	r3, [r5, #16]
   da16e:	2b01      	cmp	r3, #1
   da170:	dd75      	ble.n	da25e <_strtod_l+0x8e6>
   da172:	4629      	mov	r1, r5
   da174:	2201      	movs	r2, #1
   da176:	4620      	mov	r0, r4
   da178:	f001 f812 	bl	db1a0 <__lshift>
   da17c:	4631      	mov	r1, r6
   da17e:	4605      	mov	r5, r0
   da180:	f001 f86d 	bl	db25e <__mcmp>
   da184:	2800      	cmp	r0, #0
   da186:	dd6a      	ble.n	da25e <_strtod_l+0x8e6>
   da188:	9904      	ldr	r1, [sp, #16]
   da18a:	4a55      	ldr	r2, [pc, #340]	; (da2e0 <_strtod_l+0x968>)
   da18c:	465b      	mov	r3, fp
   da18e:	2900      	cmp	r1, #0
   da190:	f000 8085 	beq.w	da29e <_strtod_l+0x926>
   da194:	ea02 010b 	and.w	r1, r2, fp
   da198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   da19c:	dc7f      	bgt.n	da29e <_strtod_l+0x926>
   da19e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   da1a2:	f77f aeaa 	ble.w	d9efa <_strtod_l+0x582>
   da1a6:	4a4f      	ldr	r2, [pc, #316]	; (da2e4 <_strtod_l+0x96c>)
   da1a8:	2300      	movs	r3, #0
   da1aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   da1ae:	4650      	mov	r0, sl
   da1b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   da1b4:	4659      	mov	r1, fp
   da1b6:	f7fe ff87 	bl	d90c8 <__aeabi_dmul>
   da1ba:	460b      	mov	r3, r1
   da1bc:	4303      	orrs	r3, r0
   da1be:	bf08      	it	eq
   da1c0:	2322      	moveq	r3, #34	; 0x22
   da1c2:	4682      	mov	sl, r0
   da1c4:	468b      	mov	fp, r1
   da1c6:	bf08      	it	eq
   da1c8:	6023      	streq	r3, [r4, #0]
   da1ca:	e62b      	b.n	d9e24 <_strtod_l+0x4ac>
   da1cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da1d0:	fa02 f303 	lsl.w	r3, r2, r3
   da1d4:	ea03 0a0a 	and.w	sl, r3, sl
   da1d8:	e6de      	b.n	d9f98 <_strtod_l+0x620>
   da1da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   da1de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   da1e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   da1e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   da1ea:	fa01 f308 	lsl.w	r3, r1, r8
   da1ee:	930c      	str	r3, [sp, #48]	; 0x30
   da1f0:	9111      	str	r1, [sp, #68]	; 0x44
   da1f2:	e741      	b.n	da078 <_strtod_l+0x700>
   da1f4:	2300      	movs	r3, #0
   da1f6:	930c      	str	r3, [sp, #48]	; 0x30
   da1f8:	2301      	movs	r3, #1
   da1fa:	9311      	str	r3, [sp, #68]	; 0x44
   da1fc:	e73c      	b.n	da078 <_strtod_l+0x700>
   da1fe:	991e      	ldr	r1, [sp, #120]	; 0x78
   da200:	4642      	mov	r2, r8
   da202:	4620      	mov	r0, r4
   da204:	f000 ffcc 	bl	db1a0 <__lshift>
   da208:	901e      	str	r0, [sp, #120]	; 0x78
   da20a:	2800      	cmp	r0, #0
   da20c:	f47f af66 	bne.w	da0dc <_strtod_l+0x764>
   da210:	e5fe      	b.n	d9e10 <_strtod_l+0x498>
   da212:	465f      	mov	r7, fp
   da214:	d16e      	bne.n	da2f4 <_strtod_l+0x97c>
   da216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da218:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da21c:	b342      	cbz	r2, da270 <_strtod_l+0x8f8>
   da21e:	4a32      	ldr	r2, [pc, #200]	; (da2e8 <_strtod_l+0x970>)
   da220:	4293      	cmp	r3, r2
   da222:	d128      	bne.n	da276 <_strtod_l+0x8fe>
   da224:	9b04      	ldr	r3, [sp, #16]
   da226:	4650      	mov	r0, sl
   da228:	b1eb      	cbz	r3, da266 <_strtod_l+0x8ee>
   da22a:	4a2d      	ldr	r2, [pc, #180]	; (da2e0 <_strtod_l+0x968>)
   da22c:	403a      	ands	r2, r7
   da22e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   da232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   da236:	d819      	bhi.n	da26c <_strtod_l+0x8f4>
   da238:	0d12      	lsrs	r2, r2, #20
   da23a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   da23e:	fa01 f303 	lsl.w	r3, r1, r3
   da242:	4298      	cmp	r0, r3
   da244:	d117      	bne.n	da276 <_strtod_l+0x8fe>
   da246:	4b29      	ldr	r3, [pc, #164]	; (da2ec <_strtod_l+0x974>)
   da248:	429f      	cmp	r7, r3
   da24a:	d102      	bne.n	da252 <_strtod_l+0x8da>
   da24c:	3001      	adds	r0, #1
   da24e:	f43f addf 	beq.w	d9e10 <_strtod_l+0x498>
   da252:	4b23      	ldr	r3, [pc, #140]	; (da2e0 <_strtod_l+0x968>)
   da254:	403b      	ands	r3, r7
   da256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da25a:	f04f 0a00 	mov.w	sl, #0
   da25e:	9b04      	ldr	r3, [sp, #16]
   da260:	2b00      	cmp	r3, #0
   da262:	d1a0      	bne.n	da1a6 <_strtod_l+0x82e>
   da264:	e5de      	b.n	d9e24 <_strtod_l+0x4ac>
   da266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da26a:	e7ea      	b.n	da242 <_strtod_l+0x8ca>
   da26c:	460b      	mov	r3, r1
   da26e:	e7e8      	b.n	da242 <_strtod_l+0x8ca>
   da270:	ea53 030a 	orrs.w	r3, r3, sl
   da274:	d088      	beq.n	da188 <_strtod_l+0x810>
   da276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da278:	b1db      	cbz	r3, da2b2 <_strtod_l+0x93a>
   da27a:	423b      	tst	r3, r7
   da27c:	d0ef      	beq.n	da25e <_strtod_l+0x8e6>
   da27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da280:	9a04      	ldr	r2, [sp, #16]
   da282:	4650      	mov	r0, sl
   da284:	4659      	mov	r1, fp
   da286:	b1c3      	cbz	r3, da2ba <_strtod_l+0x942>
   da288:	f7ff fb5a 	bl	d9940 <sulp>
   da28c:	4602      	mov	r2, r0
   da28e:	460b      	mov	r3, r1
   da290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da294:	f7fe fd62 	bl	d8d5c <__adddf3>
   da298:	4682      	mov	sl, r0
   da29a:	468b      	mov	fp, r1
   da29c:	e7df      	b.n	da25e <_strtod_l+0x8e6>
   da29e:	4013      	ands	r3, r2
   da2a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da2a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da2a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da2ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da2b0:	e7d5      	b.n	da25e <_strtod_l+0x8e6>
   da2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da2b4:	ea13 0f0a 	tst.w	r3, sl
   da2b8:	e7e0      	b.n	da27c <_strtod_l+0x904>
   da2ba:	f7ff fb41 	bl	d9940 <sulp>
   da2be:	4602      	mov	r2, r0
   da2c0:	460b      	mov	r3, r1
   da2c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da2c6:	f7fe fd47 	bl	d8d58 <__aeabi_dsub>
   da2ca:	2200      	movs	r2, #0
   da2cc:	2300      	movs	r3, #0
   da2ce:	4682      	mov	sl, r0
   da2d0:	468b      	mov	fp, r1
   da2d2:	f7ff f961 	bl	d9598 <__aeabi_dcmpeq>
   da2d6:	2800      	cmp	r0, #0
   da2d8:	d0c1      	beq.n	da25e <_strtod_l+0x8e6>
   da2da:	e60e      	b.n	d9efa <_strtod_l+0x582>
   da2dc:	fffffc02 	.word	0xfffffc02
   da2e0:	7ff00000 	.word	0x7ff00000
   da2e4:	39500000 	.word	0x39500000
   da2e8:	000fffff 	.word	0x000fffff
   da2ec:	7fefffff 	.word	0x7fefffff
   da2f0:	000dc390 	.word	0x000dc390
   da2f4:	4631      	mov	r1, r6
   da2f6:	4628      	mov	r0, r5
   da2f8:	f001 f910 	bl	db51c <__ratio>
   da2fc:	ec59 8b10 	vmov	r8, r9, d0
   da300:	ee10 0a10 	vmov	r0, s0
   da304:	2200      	movs	r2, #0
   da306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da30a:	4649      	mov	r1, r9
   da30c:	f7ff f958 	bl	d95c0 <__aeabi_dcmple>
   da310:	2800      	cmp	r0, #0
   da312:	d07c      	beq.n	da40e <_strtod_l+0xa96>
   da314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da316:	2b00      	cmp	r3, #0
   da318:	d04c      	beq.n	da3b4 <_strtod_l+0xa3c>
   da31a:	4b95      	ldr	r3, [pc, #596]	; (da570 <_strtod_l+0xbf8>)
   da31c:	2200      	movs	r2, #0
   da31e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da322:	f8df 924c 	ldr.w	r9, [pc, #588]	; da570 <_strtod_l+0xbf8>
   da326:	f04f 0800 	mov.w	r8, #0
   da32a:	4b92      	ldr	r3, [pc, #584]	; (da574 <_strtod_l+0xbfc>)
   da32c:	403b      	ands	r3, r7
   da32e:	9311      	str	r3, [sp, #68]	; 0x44
   da330:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da332:	4b91      	ldr	r3, [pc, #580]	; (da578 <_strtod_l+0xc00>)
   da334:	429a      	cmp	r2, r3
   da336:	f040 80b2 	bne.w	da49e <_strtod_l+0xb26>
   da33a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da342:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   da346:	ec4b ab10 	vmov	d0, sl, fp
   da34a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   da34e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da352:	f001 f817 	bl	db384 <__ulp>
   da356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da35a:	ec53 2b10 	vmov	r2, r3, d0
   da35e:	f7fe feb3 	bl	d90c8 <__aeabi_dmul>
   da362:	4652      	mov	r2, sl
   da364:	465b      	mov	r3, fp
   da366:	f7fe fcf9 	bl	d8d5c <__adddf3>
   da36a:	460b      	mov	r3, r1
   da36c:	4981      	ldr	r1, [pc, #516]	; (da574 <_strtod_l+0xbfc>)
   da36e:	4a83      	ldr	r2, [pc, #524]	; (da57c <_strtod_l+0xc04>)
   da370:	4019      	ands	r1, r3
   da372:	4291      	cmp	r1, r2
   da374:	4682      	mov	sl, r0
   da376:	d95e      	bls.n	da436 <_strtod_l+0xabe>
   da378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da37a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   da37e:	4293      	cmp	r3, r2
   da380:	d103      	bne.n	da38a <_strtod_l+0xa12>
   da382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da384:	3301      	adds	r3, #1
   da386:	f43f ad43 	beq.w	d9e10 <_strtod_l+0x498>
   da38a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da588 <_strtod_l+0xc10>
   da38e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da392:	991e      	ldr	r1, [sp, #120]	; 0x78
   da394:	4620      	mov	r0, r4
   da396:	f000 fd2d 	bl	dadf4 <_Bfree>
   da39a:	9907      	ldr	r1, [sp, #28]
   da39c:	4620      	mov	r0, r4
   da39e:	f000 fd29 	bl	dadf4 <_Bfree>
   da3a2:	4631      	mov	r1, r6
   da3a4:	4620      	mov	r0, r4
   da3a6:	f000 fd25 	bl	dadf4 <_Bfree>
   da3aa:	4629      	mov	r1, r5
   da3ac:	4620      	mov	r0, r4
   da3ae:	f000 fd21 	bl	dadf4 <_Bfree>
   da3b2:	e613      	b.n	d9fdc <_strtod_l+0x664>
   da3b4:	f1ba 0f00 	cmp.w	sl, #0
   da3b8:	d11b      	bne.n	da3f2 <_strtod_l+0xa7a>
   da3ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da3be:	b9f3      	cbnz	r3, da3fe <_strtod_l+0xa86>
   da3c0:	4b6b      	ldr	r3, [pc, #428]	; (da570 <_strtod_l+0xbf8>)
   da3c2:	2200      	movs	r2, #0
   da3c4:	4640      	mov	r0, r8
   da3c6:	4649      	mov	r1, r9
   da3c8:	f7ff f8f0 	bl	d95ac <__aeabi_dcmplt>
   da3cc:	b9d0      	cbnz	r0, da404 <_strtod_l+0xa8c>
   da3ce:	4640      	mov	r0, r8
   da3d0:	4649      	mov	r1, r9
   da3d2:	4b6b      	ldr	r3, [pc, #428]	; (da580 <_strtod_l+0xc08>)
   da3d4:	2200      	movs	r2, #0
   da3d6:	f7fe fe77 	bl	d90c8 <__aeabi_dmul>
   da3da:	4680      	mov	r8, r0
   da3dc:	4689      	mov	r9, r1
   da3de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da3e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da3e6:	931b      	str	r3, [sp, #108]	; 0x6c
   da3e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da3ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da3f0:	e79b      	b.n	da32a <_strtod_l+0x9b2>
   da3f2:	f1ba 0f01 	cmp.w	sl, #1
   da3f6:	d102      	bne.n	da3fe <_strtod_l+0xa86>
   da3f8:	2f00      	cmp	r7, #0
   da3fa:	f43f ad7e 	beq.w	d9efa <_strtod_l+0x582>
   da3fe:	4b61      	ldr	r3, [pc, #388]	; (da584 <_strtod_l+0xc0c>)
   da400:	2200      	movs	r2, #0
   da402:	e78c      	b.n	da31e <_strtod_l+0x9a6>
   da404:	f8df 9178 	ldr.w	r9, [pc, #376]	; da580 <_strtod_l+0xc08>
   da408:	f04f 0800 	mov.w	r8, #0
   da40c:	e7e7      	b.n	da3de <_strtod_l+0xa66>
   da40e:	4b5c      	ldr	r3, [pc, #368]	; (da580 <_strtod_l+0xc08>)
   da410:	4640      	mov	r0, r8
   da412:	4649      	mov	r1, r9
   da414:	2200      	movs	r2, #0
   da416:	f7fe fe57 	bl	d90c8 <__aeabi_dmul>
   da41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da41c:	4680      	mov	r8, r0
   da41e:	4689      	mov	r9, r1
   da420:	b933      	cbnz	r3, da430 <_strtod_l+0xab8>
   da422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da426:	9012      	str	r0, [sp, #72]	; 0x48
   da428:	9313      	str	r3, [sp, #76]	; 0x4c
   da42a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da42e:	e7dd      	b.n	da3ec <_strtod_l+0xa74>
   da430:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da434:	e7f9      	b.n	da42a <_strtod_l+0xab2>
   da436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da43a:	9b04      	ldr	r3, [sp, #16]
   da43c:	2b00      	cmp	r3, #0
   da43e:	d1a8      	bne.n	da392 <_strtod_l+0xa1a>
   da440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da444:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da446:	0d1b      	lsrs	r3, r3, #20
   da448:	051b      	lsls	r3, r3, #20
   da44a:	429a      	cmp	r2, r3
   da44c:	d1a1      	bne.n	da392 <_strtod_l+0xa1a>
   da44e:	4640      	mov	r0, r8
   da450:	4649      	mov	r1, r9
   da452:	f001 f8ff 	bl	db654 <__aeabi_d2lz>
   da456:	f7fe fe09 	bl	d906c <__aeabi_l2d>
   da45a:	4602      	mov	r2, r0
   da45c:	460b      	mov	r3, r1
   da45e:	4640      	mov	r0, r8
   da460:	4649      	mov	r1, r9
   da462:	f7fe fc79 	bl	d8d58 <__aeabi_dsub>
   da466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da468:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da46c:	ea43 030a 	orr.w	r3, r3, sl
   da470:	4313      	orrs	r3, r2
   da472:	4680      	mov	r8, r0
   da474:	4689      	mov	r9, r1
   da476:	d053      	beq.n	da520 <_strtod_l+0xba8>
   da478:	a335      	add	r3, pc, #212	; (adr r3, da550 <_strtod_l+0xbd8>)
   da47a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da47e:	f7ff f895 	bl	d95ac <__aeabi_dcmplt>
   da482:	2800      	cmp	r0, #0
   da484:	f47f acce 	bne.w	d9e24 <_strtod_l+0x4ac>
   da488:	a333      	add	r3, pc, #204	; (adr r3, da558 <_strtod_l+0xbe0>)
   da48a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da48e:	4640      	mov	r0, r8
   da490:	4649      	mov	r1, r9
   da492:	f7ff f8a9 	bl	d95e8 <__aeabi_dcmpgt>
   da496:	2800      	cmp	r0, #0
   da498:	f43f af7b 	beq.w	da392 <_strtod_l+0xa1a>
   da49c:	e4c2      	b.n	d9e24 <_strtod_l+0x4ac>
   da49e:	9b04      	ldr	r3, [sp, #16]
   da4a0:	b333      	cbz	r3, da4f0 <_strtod_l+0xb78>
   da4a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da4a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da4a8:	d822      	bhi.n	da4f0 <_strtod_l+0xb78>
   da4aa:	a32d      	add	r3, pc, #180	; (adr r3, da560 <_strtod_l+0xbe8>)
   da4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4b0:	4640      	mov	r0, r8
   da4b2:	4649      	mov	r1, r9
   da4b4:	f7ff f884 	bl	d95c0 <__aeabi_dcmple>
   da4b8:	b1a0      	cbz	r0, da4e4 <_strtod_l+0xb6c>
   da4ba:	4649      	mov	r1, r9
   da4bc:	4640      	mov	r0, r8
   da4be:	f7ff f8b3 	bl	d9628 <__aeabi_d2uiz>
   da4c2:	2801      	cmp	r0, #1
   da4c4:	bf38      	it	cc
   da4c6:	2001      	movcc	r0, #1
   da4c8:	f7fe fd84 	bl	d8fd4 <__aeabi_ui2d>
   da4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da4ce:	4680      	mov	r8, r0
   da4d0:	4689      	mov	r9, r1
   da4d2:	bb13      	cbnz	r3, da51a <_strtod_l+0xba2>
   da4d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da4d8:	9014      	str	r0, [sp, #80]	; 0x50
   da4da:	9315      	str	r3, [sp, #84]	; 0x54
   da4dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da4e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da4e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da4e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da4ec:	1a9b      	subs	r3, r3, r2
   da4ee:	930d      	str	r3, [sp, #52]	; 0x34
   da4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da4f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da4f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da4fc:	f000 ff42 	bl	db384 <__ulp>
   da500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da504:	ec53 2b10 	vmov	r2, r3, d0
   da508:	f7fe fdde 	bl	d90c8 <__aeabi_dmul>
   da50c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da510:	f7fe fc24 	bl	d8d5c <__adddf3>
   da514:	4682      	mov	sl, r0
   da516:	468b      	mov	fp, r1
   da518:	e78f      	b.n	da43a <_strtod_l+0xac2>
   da51a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da51e:	e7dd      	b.n	da4dc <_strtod_l+0xb64>
   da520:	a311      	add	r3, pc, #68	; (adr r3, da568 <_strtod_l+0xbf0>)
   da522:	e9d3 2300 	ldrd	r2, r3, [r3]
   da526:	f7ff f841 	bl	d95ac <__aeabi_dcmplt>
   da52a:	e7b4      	b.n	da496 <_strtod_l+0xb1e>
   da52c:	2300      	movs	r3, #0
   da52e:	930e      	str	r3, [sp, #56]	; 0x38
   da530:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da532:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da534:	6013      	str	r3, [r2, #0]
   da536:	f7ff ba65 	b.w	d9a04 <_strtod_l+0x8c>
   da53a:	2b65      	cmp	r3, #101	; 0x65
   da53c:	f43f ab5d 	beq.w	d9bfa <_strtod_l+0x282>
   da540:	2b45      	cmp	r3, #69	; 0x45
   da542:	f43f ab5a 	beq.w	d9bfa <_strtod_l+0x282>
   da546:	2201      	movs	r2, #1
   da548:	f7ff bb92 	b.w	d9c70 <_strtod_l+0x2f8>
   da54c:	f3af 8000 	nop.w
   da550:	94a03595 	.word	0x94a03595
   da554:	3fdfffff 	.word	0x3fdfffff
   da558:	35afe535 	.word	0x35afe535
   da55c:	3fe00000 	.word	0x3fe00000
   da560:	ffc00000 	.word	0xffc00000
   da564:	41dfffff 	.word	0x41dfffff
   da568:	94a03595 	.word	0x94a03595
   da56c:	3fcfffff 	.word	0x3fcfffff
   da570:	3ff00000 	.word	0x3ff00000
   da574:	7ff00000 	.word	0x7ff00000
   da578:	7fe00000 	.word	0x7fe00000
   da57c:	7c9fffff 	.word	0x7c9fffff
   da580:	3fe00000 	.word	0x3fe00000
   da584:	bff00000 	.word	0xbff00000
   da588:	7fefffff 	.word	0x7fefffff

000da58c <strtod>:
   da58c:	460a      	mov	r2, r1
   da58e:	4601      	mov	r1, r0
   da590:	4802      	ldr	r0, [pc, #8]	; (da59c <strtod+0x10>)
   da592:	4b03      	ldr	r3, [pc, #12]	; (da5a0 <strtod+0x14>)
   da594:	6800      	ldr	r0, [r0, #0]
   da596:	f7ff b9ef 	b.w	d9978 <_strtod_l>
   da59a:	bf00      	nop
   da59c:	2003d820 	.word	0x2003d820
   da5a0:	2003d888 	.word	0x2003d888

000da5a4 <_strtol_l.isra.0>:
   da5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da5a8:	4e3a      	ldr	r6, [pc, #232]	; (da694 <_strtol_l.isra.0+0xf0>)
   da5aa:	4686      	mov	lr, r0
   da5ac:	468c      	mov	ip, r1
   da5ae:	4660      	mov	r0, ip
   da5b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da5b4:	5da5      	ldrb	r5, [r4, r6]
   da5b6:	f015 0508 	ands.w	r5, r5, #8
   da5ba:	d1f8      	bne.n	da5ae <_strtol_l.isra.0+0xa>
   da5bc:	2c2d      	cmp	r4, #45	; 0x2d
   da5be:	d133      	bne.n	da628 <_strtol_l.isra.0+0x84>
   da5c0:	f89c 4000 	ldrb.w	r4, [ip]
   da5c4:	f04f 0801 	mov.w	r8, #1
   da5c8:	f100 0c02 	add.w	ip, r0, #2
   da5cc:	2b00      	cmp	r3, #0
   da5ce:	d05c      	beq.n	da68a <_strtol_l.isra.0+0xe6>
   da5d0:	2b10      	cmp	r3, #16
   da5d2:	d10c      	bne.n	da5ee <_strtol_l.isra.0+0x4a>
   da5d4:	2c30      	cmp	r4, #48	; 0x30
   da5d6:	d10a      	bne.n	da5ee <_strtol_l.isra.0+0x4a>
   da5d8:	f89c 0000 	ldrb.w	r0, [ip]
   da5dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da5e0:	2858      	cmp	r0, #88	; 0x58
   da5e2:	d14d      	bne.n	da680 <_strtol_l.isra.0+0xdc>
   da5e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da5e8:	2310      	movs	r3, #16
   da5ea:	f10c 0c02 	add.w	ip, ip, #2
   da5ee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da5f2:	3f01      	subs	r7, #1
   da5f4:	2600      	movs	r6, #0
   da5f6:	fbb7 f9f3 	udiv	r9, r7, r3
   da5fa:	4630      	mov	r0, r6
   da5fc:	fb03 7a19 	mls	sl, r3, r9, r7
   da600:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da604:	2d09      	cmp	r5, #9
   da606:	d818      	bhi.n	da63a <_strtol_l.isra.0+0x96>
   da608:	462c      	mov	r4, r5
   da60a:	42a3      	cmp	r3, r4
   da60c:	dd24      	ble.n	da658 <_strtol_l.isra.0+0xb4>
   da60e:	1c75      	adds	r5, r6, #1
   da610:	d007      	beq.n	da622 <_strtol_l.isra.0+0x7e>
   da612:	4581      	cmp	r9, r0
   da614:	d31d      	bcc.n	da652 <_strtol_l.isra.0+0xae>
   da616:	d101      	bne.n	da61c <_strtol_l.isra.0+0x78>
   da618:	45a2      	cmp	sl, r4
   da61a:	db1a      	blt.n	da652 <_strtol_l.isra.0+0xae>
   da61c:	fb00 4003 	mla	r0, r0, r3, r4
   da620:	2601      	movs	r6, #1
   da622:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da626:	e7eb      	b.n	da600 <_strtol_l.isra.0+0x5c>
   da628:	2c2b      	cmp	r4, #43	; 0x2b
   da62a:	bf08      	it	eq
   da62c:	f89c 4000 	ldrbeq.w	r4, [ip]
   da630:	46a8      	mov	r8, r5
   da632:	bf08      	it	eq
   da634:	f100 0c02 	addeq.w	ip, r0, #2
   da638:	e7c8      	b.n	da5cc <_strtol_l.isra.0+0x28>
   da63a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da63e:	2d19      	cmp	r5, #25
   da640:	d801      	bhi.n	da646 <_strtol_l.isra.0+0xa2>
   da642:	3c37      	subs	r4, #55	; 0x37
   da644:	e7e1      	b.n	da60a <_strtol_l.isra.0+0x66>
   da646:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da64a:	2d19      	cmp	r5, #25
   da64c:	d804      	bhi.n	da658 <_strtol_l.isra.0+0xb4>
   da64e:	3c57      	subs	r4, #87	; 0x57
   da650:	e7db      	b.n	da60a <_strtol_l.isra.0+0x66>
   da652:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da656:	e7e4      	b.n	da622 <_strtol_l.isra.0+0x7e>
   da658:	1c73      	adds	r3, r6, #1
   da65a:	d106      	bne.n	da66a <_strtol_l.isra.0+0xc6>
   da65c:	2322      	movs	r3, #34	; 0x22
   da65e:	f8ce 3000 	str.w	r3, [lr]
   da662:	4638      	mov	r0, r7
   da664:	b942      	cbnz	r2, da678 <_strtol_l.isra.0+0xd4>
   da666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da66a:	f1b8 0f00 	cmp.w	r8, #0
   da66e:	d000      	beq.n	da672 <_strtol_l.isra.0+0xce>
   da670:	4240      	negs	r0, r0
   da672:	2a00      	cmp	r2, #0
   da674:	d0f7      	beq.n	da666 <_strtol_l.isra.0+0xc2>
   da676:	b10e      	cbz	r6, da67c <_strtol_l.isra.0+0xd8>
   da678:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da67c:	6011      	str	r1, [r2, #0]
   da67e:	e7f2      	b.n	da666 <_strtol_l.isra.0+0xc2>
   da680:	2430      	movs	r4, #48	; 0x30
   da682:	2b00      	cmp	r3, #0
   da684:	d1b3      	bne.n	da5ee <_strtol_l.isra.0+0x4a>
   da686:	2308      	movs	r3, #8
   da688:	e7b1      	b.n	da5ee <_strtol_l.isra.0+0x4a>
   da68a:	2c30      	cmp	r4, #48	; 0x30
   da68c:	d0a4      	beq.n	da5d8 <_strtol_l.isra.0+0x34>
   da68e:	230a      	movs	r3, #10
   da690:	e7ad      	b.n	da5ee <_strtol_l.isra.0+0x4a>
   da692:	bf00      	nop
   da694:	000dc3b9 	.word	0x000dc3b9

000da698 <strtol>:
   da698:	4613      	mov	r3, r2
   da69a:	460a      	mov	r2, r1
   da69c:	4601      	mov	r1, r0
   da69e:	4802      	ldr	r0, [pc, #8]	; (da6a8 <strtol+0x10>)
   da6a0:	6800      	ldr	r0, [r0, #0]
   da6a2:	f7ff bf7f 	b.w	da5a4 <_strtol_l.isra.0>
   da6a6:	bf00      	nop
   da6a8:	2003d820 	.word	0x2003d820

000da6ac <rshift>:
   da6ac:	6903      	ldr	r3, [r0, #16]
   da6ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da6b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da6b6:	ea4f 1261 	mov.w	r2, r1, asr #5
   da6ba:	f100 0414 	add.w	r4, r0, #20
   da6be:	dd45      	ble.n	da74c <rshift+0xa0>
   da6c0:	f011 011f 	ands.w	r1, r1, #31
   da6c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da6c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da6cc:	d10c      	bne.n	da6e8 <rshift+0x3c>
   da6ce:	f100 0710 	add.w	r7, r0, #16
   da6d2:	4629      	mov	r1, r5
   da6d4:	42b1      	cmp	r1, r6
   da6d6:	d334      	bcc.n	da742 <rshift+0x96>
   da6d8:	1a9b      	subs	r3, r3, r2
   da6da:	009b      	lsls	r3, r3, #2
   da6dc:	1eea      	subs	r2, r5, #3
   da6de:	4296      	cmp	r6, r2
   da6e0:	bf38      	it	cc
   da6e2:	2300      	movcc	r3, #0
   da6e4:	4423      	add	r3, r4
   da6e6:	e015      	b.n	da714 <rshift+0x68>
   da6e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da6ec:	f1c1 0820 	rsb	r8, r1, #32
   da6f0:	40cf      	lsrs	r7, r1
   da6f2:	f105 0e04 	add.w	lr, r5, #4
   da6f6:	46a1      	mov	r9, r4
   da6f8:	4576      	cmp	r6, lr
   da6fa:	46f4      	mov	ip, lr
   da6fc:	d815      	bhi.n	da72a <rshift+0x7e>
   da6fe:	1a9b      	subs	r3, r3, r2
   da700:	009a      	lsls	r2, r3, #2
   da702:	3a04      	subs	r2, #4
   da704:	3501      	adds	r5, #1
   da706:	42ae      	cmp	r6, r5
   da708:	bf38      	it	cc
   da70a:	2200      	movcc	r2, #0
   da70c:	18a3      	adds	r3, r4, r2
   da70e:	50a7      	str	r7, [r4, r2]
   da710:	b107      	cbz	r7, da714 <rshift+0x68>
   da712:	3304      	adds	r3, #4
   da714:	1b1a      	subs	r2, r3, r4
   da716:	42a3      	cmp	r3, r4
   da718:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da71c:	bf08      	it	eq
   da71e:	2300      	moveq	r3, #0
   da720:	6102      	str	r2, [r0, #16]
   da722:	bf08      	it	eq
   da724:	6143      	streq	r3, [r0, #20]
   da726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da72a:	f8dc c000 	ldr.w	ip, [ip]
   da72e:	fa0c fc08 	lsl.w	ip, ip, r8
   da732:	ea4c 0707 	orr.w	r7, ip, r7
   da736:	f849 7b04 	str.w	r7, [r9], #4
   da73a:	f85e 7b04 	ldr.w	r7, [lr], #4
   da73e:	40cf      	lsrs	r7, r1
   da740:	e7da      	b.n	da6f8 <rshift+0x4c>
   da742:	f851 cb04 	ldr.w	ip, [r1], #4
   da746:	f847 cf04 	str.w	ip, [r7, #4]!
   da74a:	e7c3      	b.n	da6d4 <rshift+0x28>
   da74c:	4623      	mov	r3, r4
   da74e:	e7e1      	b.n	da714 <rshift+0x68>

000da750 <__hexdig_fun>:
   da750:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da754:	2b09      	cmp	r3, #9
   da756:	d802      	bhi.n	da75e <__hexdig_fun+0xe>
   da758:	3820      	subs	r0, #32
   da75a:	b2c0      	uxtb	r0, r0
   da75c:	4770      	bx	lr
   da75e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da762:	2b05      	cmp	r3, #5
   da764:	d801      	bhi.n	da76a <__hexdig_fun+0x1a>
   da766:	3847      	subs	r0, #71	; 0x47
   da768:	e7f7      	b.n	da75a <__hexdig_fun+0xa>
   da76a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da76e:	2b05      	cmp	r3, #5
   da770:	d801      	bhi.n	da776 <__hexdig_fun+0x26>
   da772:	3827      	subs	r0, #39	; 0x27
   da774:	e7f1      	b.n	da75a <__hexdig_fun+0xa>
   da776:	2000      	movs	r0, #0
   da778:	4770      	bx	lr
	...

000da77c <__gethex>:
   da77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da780:	ed2d 8b02 	vpush	{d8}
   da784:	b089      	sub	sp, #36	; 0x24
   da786:	ee08 0a10 	vmov	s16, r0
   da78a:	9304      	str	r3, [sp, #16]
   da78c:	4bbc      	ldr	r3, [pc, #752]	; (daa80 <__gethex+0x304>)
   da78e:	681b      	ldr	r3, [r3, #0]
   da790:	9301      	str	r3, [sp, #4]
   da792:	4618      	mov	r0, r3
   da794:	468b      	mov	fp, r1
   da796:	4690      	mov	r8, r2
   da798:	f7ff f8a5 	bl	d98e6 <strlen>
   da79c:	9b01      	ldr	r3, [sp, #4]
   da79e:	f8db 2000 	ldr.w	r2, [fp]
   da7a2:	4403      	add	r3, r0
   da7a4:	4682      	mov	sl, r0
   da7a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da7aa:	9305      	str	r3, [sp, #20]
   da7ac:	1c93      	adds	r3, r2, #2
   da7ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da7b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da7b6:	32fe      	adds	r2, #254	; 0xfe
   da7b8:	18d1      	adds	r1, r2, r3
   da7ba:	461f      	mov	r7, r3
   da7bc:	f813 0b01 	ldrb.w	r0, [r3], #1
   da7c0:	9100      	str	r1, [sp, #0]
   da7c2:	2830      	cmp	r0, #48	; 0x30
   da7c4:	d0f8      	beq.n	da7b8 <__gethex+0x3c>
   da7c6:	f7ff ffc3 	bl	da750 <__hexdig_fun>
   da7ca:	4604      	mov	r4, r0
   da7cc:	2800      	cmp	r0, #0
   da7ce:	d13a      	bne.n	da846 <__gethex+0xca>
   da7d0:	9901      	ldr	r1, [sp, #4]
   da7d2:	4652      	mov	r2, sl
   da7d4:	4638      	mov	r0, r7
   da7d6:	f7ff f88e 	bl	d98f6 <strncmp>
   da7da:	4605      	mov	r5, r0
   da7dc:	2800      	cmp	r0, #0
   da7de:	d168      	bne.n	da8b2 <__gethex+0x136>
   da7e0:	f817 000a 	ldrb.w	r0, [r7, sl]
   da7e4:	eb07 060a 	add.w	r6, r7, sl
   da7e8:	f7ff ffb2 	bl	da750 <__hexdig_fun>
   da7ec:	2800      	cmp	r0, #0
   da7ee:	d062      	beq.n	da8b6 <__gethex+0x13a>
   da7f0:	4633      	mov	r3, r6
   da7f2:	7818      	ldrb	r0, [r3, #0]
   da7f4:	2830      	cmp	r0, #48	; 0x30
   da7f6:	461f      	mov	r7, r3
   da7f8:	f103 0301 	add.w	r3, r3, #1
   da7fc:	d0f9      	beq.n	da7f2 <__gethex+0x76>
   da7fe:	f7ff ffa7 	bl	da750 <__hexdig_fun>
   da802:	2301      	movs	r3, #1
   da804:	fab0 f480 	clz	r4, r0
   da808:	0964      	lsrs	r4, r4, #5
   da80a:	4635      	mov	r5, r6
   da80c:	9300      	str	r3, [sp, #0]
   da80e:	463a      	mov	r2, r7
   da810:	4616      	mov	r6, r2
   da812:	3201      	adds	r2, #1
   da814:	7830      	ldrb	r0, [r6, #0]
   da816:	f7ff ff9b 	bl	da750 <__hexdig_fun>
   da81a:	2800      	cmp	r0, #0
   da81c:	d1f8      	bne.n	da810 <__gethex+0x94>
   da81e:	9901      	ldr	r1, [sp, #4]
   da820:	4652      	mov	r2, sl
   da822:	4630      	mov	r0, r6
   da824:	f7ff f867 	bl	d98f6 <strncmp>
   da828:	b980      	cbnz	r0, da84c <__gethex+0xd0>
   da82a:	b94d      	cbnz	r5, da840 <__gethex+0xc4>
   da82c:	eb06 050a 	add.w	r5, r6, sl
   da830:	462a      	mov	r2, r5
   da832:	4616      	mov	r6, r2
   da834:	3201      	adds	r2, #1
   da836:	7830      	ldrb	r0, [r6, #0]
   da838:	f7ff ff8a 	bl	da750 <__hexdig_fun>
   da83c:	2800      	cmp	r0, #0
   da83e:	d1f8      	bne.n	da832 <__gethex+0xb6>
   da840:	1bad      	subs	r5, r5, r6
   da842:	00ad      	lsls	r5, r5, #2
   da844:	e004      	b.n	da850 <__gethex+0xd4>
   da846:	2400      	movs	r4, #0
   da848:	4625      	mov	r5, r4
   da84a:	e7e0      	b.n	da80e <__gethex+0x92>
   da84c:	2d00      	cmp	r5, #0
   da84e:	d1f7      	bne.n	da840 <__gethex+0xc4>
   da850:	7833      	ldrb	r3, [r6, #0]
   da852:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da856:	2b50      	cmp	r3, #80	; 0x50
   da858:	d13b      	bne.n	da8d2 <__gethex+0x156>
   da85a:	7873      	ldrb	r3, [r6, #1]
   da85c:	2b2b      	cmp	r3, #43	; 0x2b
   da85e:	d02c      	beq.n	da8ba <__gethex+0x13e>
   da860:	2b2d      	cmp	r3, #45	; 0x2d
   da862:	d02e      	beq.n	da8c2 <__gethex+0x146>
   da864:	1c71      	adds	r1, r6, #1
   da866:	f04f 0900 	mov.w	r9, #0
   da86a:	7808      	ldrb	r0, [r1, #0]
   da86c:	f7ff ff70 	bl	da750 <__hexdig_fun>
   da870:	1e43      	subs	r3, r0, #1
   da872:	b2db      	uxtb	r3, r3
   da874:	2b18      	cmp	r3, #24
   da876:	d82c      	bhi.n	da8d2 <__gethex+0x156>
   da878:	f1a0 0210 	sub.w	r2, r0, #16
   da87c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da880:	f7ff ff66 	bl	da750 <__hexdig_fun>
   da884:	1e43      	subs	r3, r0, #1
   da886:	b2db      	uxtb	r3, r3
   da888:	2b18      	cmp	r3, #24
   da88a:	d91d      	bls.n	da8c8 <__gethex+0x14c>
   da88c:	f1b9 0f00 	cmp.w	r9, #0
   da890:	d000      	beq.n	da894 <__gethex+0x118>
   da892:	4252      	negs	r2, r2
   da894:	4415      	add	r5, r2
   da896:	f8cb 1000 	str.w	r1, [fp]
   da89a:	b1e4      	cbz	r4, da8d6 <__gethex+0x15a>
   da89c:	9b00      	ldr	r3, [sp, #0]
   da89e:	2b00      	cmp	r3, #0
   da8a0:	bf14      	ite	ne
   da8a2:	2700      	movne	r7, #0
   da8a4:	2706      	moveq	r7, #6
   da8a6:	4638      	mov	r0, r7
   da8a8:	b009      	add	sp, #36	; 0x24
   da8aa:	ecbd 8b02 	vpop	{d8}
   da8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da8b2:	463e      	mov	r6, r7
   da8b4:	4625      	mov	r5, r4
   da8b6:	2401      	movs	r4, #1
   da8b8:	e7ca      	b.n	da850 <__gethex+0xd4>
   da8ba:	f04f 0900 	mov.w	r9, #0
   da8be:	1cb1      	adds	r1, r6, #2
   da8c0:	e7d3      	b.n	da86a <__gethex+0xee>
   da8c2:	f04f 0901 	mov.w	r9, #1
   da8c6:	e7fa      	b.n	da8be <__gethex+0x142>
   da8c8:	230a      	movs	r3, #10
   da8ca:	fb03 0202 	mla	r2, r3, r2, r0
   da8ce:	3a10      	subs	r2, #16
   da8d0:	e7d4      	b.n	da87c <__gethex+0x100>
   da8d2:	4631      	mov	r1, r6
   da8d4:	e7df      	b.n	da896 <__gethex+0x11a>
   da8d6:	1bf3      	subs	r3, r6, r7
   da8d8:	3b01      	subs	r3, #1
   da8da:	4621      	mov	r1, r4
   da8dc:	2b07      	cmp	r3, #7
   da8de:	dc52      	bgt.n	da986 <__gethex+0x20a>
   da8e0:	ee18 0a10 	vmov	r0, s16
   da8e4:	f000 fa52 	bl	dad8c <_Balloc>
   da8e8:	f04f 0b00 	mov.w	fp, #0
   da8ec:	f100 0914 	add.w	r9, r0, #20
   da8f0:	f1ca 0301 	rsb	r3, sl, #1
   da8f4:	4604      	mov	r4, r0
   da8f6:	f8cd 9008 	str.w	r9, [sp, #8]
   da8fa:	f8cd b000 	str.w	fp, [sp]
   da8fe:	9306      	str	r3, [sp, #24]
   da900:	42b7      	cmp	r7, r6
   da902:	d343      	bcc.n	da98c <__gethex+0x210>
   da904:	9802      	ldr	r0, [sp, #8]
   da906:	9b00      	ldr	r3, [sp, #0]
   da908:	f840 3b04 	str.w	r3, [r0], #4
   da90c:	eba0 0009 	sub.w	r0, r0, r9
   da910:	1080      	asrs	r0, r0, #2
   da912:	0146      	lsls	r6, r0, #5
   da914:	6120      	str	r0, [r4, #16]
   da916:	4618      	mov	r0, r3
   da918:	f000 faff 	bl	daf1a <__hi0bits>
   da91c:	1a30      	subs	r0, r6, r0
   da91e:	f8d8 6000 	ldr.w	r6, [r8]
   da922:	42b0      	cmp	r0, r6
   da924:	dd66      	ble.n	da9f4 <__gethex+0x278>
   da926:	1b87      	subs	r7, r0, r6
   da928:	4639      	mov	r1, r7
   da92a:	4620      	mov	r0, r4
   da92c:	f000 fe4c 	bl	db5c8 <__any_on>
   da930:	4682      	mov	sl, r0
   da932:	b1a8      	cbz	r0, da960 <__gethex+0x1e4>
   da934:	1e7b      	subs	r3, r7, #1
   da936:	1159      	asrs	r1, r3, #5
   da938:	f003 021f 	and.w	r2, r3, #31
   da93c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da940:	f04f 0a01 	mov.w	sl, #1
   da944:	fa0a f202 	lsl.w	r2, sl, r2
   da948:	420a      	tst	r2, r1
   da94a:	d009      	beq.n	da960 <__gethex+0x1e4>
   da94c:	4553      	cmp	r3, sl
   da94e:	dd05      	ble.n	da95c <__gethex+0x1e0>
   da950:	1eb9      	subs	r1, r7, #2
   da952:	4620      	mov	r0, r4
   da954:	f000 fe38 	bl	db5c8 <__any_on>
   da958:	2800      	cmp	r0, #0
   da95a:	d148      	bne.n	da9ee <__gethex+0x272>
   da95c:	f04f 0a02 	mov.w	sl, #2
   da960:	4639      	mov	r1, r7
   da962:	4620      	mov	r0, r4
   da964:	f7ff fea2 	bl	da6ac <rshift>
   da968:	443d      	add	r5, r7
   da96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da96e:	42ab      	cmp	r3, r5
   da970:	da4f      	bge.n	daa12 <__gethex+0x296>
   da972:	ee18 0a10 	vmov	r0, s16
   da976:	4621      	mov	r1, r4
   da978:	f000 fa3c 	bl	dadf4 <_Bfree>
   da97c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da97e:	2300      	movs	r3, #0
   da980:	6013      	str	r3, [r2, #0]
   da982:	27a3      	movs	r7, #163	; 0xa3
   da984:	e78f      	b.n	da8a6 <__gethex+0x12a>
   da986:	3101      	adds	r1, #1
   da988:	105b      	asrs	r3, r3, #1
   da98a:	e7a7      	b.n	da8dc <__gethex+0x160>
   da98c:	1e73      	subs	r3, r6, #1
   da98e:	9a05      	ldr	r2, [sp, #20]
   da990:	9303      	str	r3, [sp, #12]
   da992:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da996:	4293      	cmp	r3, r2
   da998:	d019      	beq.n	da9ce <__gethex+0x252>
   da99a:	f1bb 0f20 	cmp.w	fp, #32
   da99e:	d107      	bne.n	da9b0 <__gethex+0x234>
   da9a0:	9b02      	ldr	r3, [sp, #8]
   da9a2:	9a00      	ldr	r2, [sp, #0]
   da9a4:	f843 2b04 	str.w	r2, [r3], #4
   da9a8:	9302      	str	r3, [sp, #8]
   da9aa:	2300      	movs	r3, #0
   da9ac:	9300      	str	r3, [sp, #0]
   da9ae:	469b      	mov	fp, r3
   da9b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da9b4:	f7ff fecc 	bl	da750 <__hexdig_fun>
   da9b8:	9b00      	ldr	r3, [sp, #0]
   da9ba:	f000 000f 	and.w	r0, r0, #15
   da9be:	fa00 f00b 	lsl.w	r0, r0, fp
   da9c2:	4303      	orrs	r3, r0
   da9c4:	9300      	str	r3, [sp, #0]
   da9c6:	f10b 0b04 	add.w	fp, fp, #4
   da9ca:	9b03      	ldr	r3, [sp, #12]
   da9cc:	e00d      	b.n	da9ea <__gethex+0x26e>
   da9ce:	9b03      	ldr	r3, [sp, #12]
   da9d0:	9a06      	ldr	r2, [sp, #24]
   da9d2:	4413      	add	r3, r2
   da9d4:	42bb      	cmp	r3, r7
   da9d6:	d3e0      	bcc.n	da99a <__gethex+0x21e>
   da9d8:	4618      	mov	r0, r3
   da9da:	9901      	ldr	r1, [sp, #4]
   da9dc:	9307      	str	r3, [sp, #28]
   da9de:	4652      	mov	r2, sl
   da9e0:	f7fe ff89 	bl	d98f6 <strncmp>
   da9e4:	9b07      	ldr	r3, [sp, #28]
   da9e6:	2800      	cmp	r0, #0
   da9e8:	d1d7      	bne.n	da99a <__gethex+0x21e>
   da9ea:	461e      	mov	r6, r3
   da9ec:	e788      	b.n	da900 <__gethex+0x184>
   da9ee:	f04f 0a03 	mov.w	sl, #3
   da9f2:	e7b5      	b.n	da960 <__gethex+0x1e4>
   da9f4:	da0a      	bge.n	daa0c <__gethex+0x290>
   da9f6:	1a37      	subs	r7, r6, r0
   da9f8:	4621      	mov	r1, r4
   da9fa:	ee18 0a10 	vmov	r0, s16
   da9fe:	463a      	mov	r2, r7
   daa00:	f000 fbce 	bl	db1a0 <__lshift>
   daa04:	1bed      	subs	r5, r5, r7
   daa06:	4604      	mov	r4, r0
   daa08:	f100 0914 	add.w	r9, r0, #20
   daa0c:	f04f 0a00 	mov.w	sl, #0
   daa10:	e7ab      	b.n	da96a <__gethex+0x1ee>
   daa12:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daa16:	42a8      	cmp	r0, r5
   daa18:	dd6d      	ble.n	daaf6 <__gethex+0x37a>
   daa1a:	1b45      	subs	r5, r0, r5
   daa1c:	42ae      	cmp	r6, r5
   daa1e:	dc31      	bgt.n	daa84 <__gethex+0x308>
   daa20:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daa24:	2b02      	cmp	r3, #2
   daa26:	d023      	beq.n	daa70 <__gethex+0x2f4>
   daa28:	2b03      	cmp	r3, #3
   daa2a:	d025      	beq.n	daa78 <__gethex+0x2fc>
   daa2c:	2b01      	cmp	r3, #1
   daa2e:	d115      	bne.n	daa5c <__gethex+0x2e0>
   daa30:	42ae      	cmp	r6, r5
   daa32:	d113      	bne.n	daa5c <__gethex+0x2e0>
   daa34:	2e01      	cmp	r6, #1
   daa36:	d10b      	bne.n	daa50 <__gethex+0x2d4>
   daa38:	9a04      	ldr	r2, [sp, #16]
   daa3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daa3e:	6013      	str	r3, [r2, #0]
   daa40:	2301      	movs	r3, #1
   daa42:	6123      	str	r3, [r4, #16]
   daa44:	f8c9 3000 	str.w	r3, [r9]
   daa48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daa4a:	2762      	movs	r7, #98	; 0x62
   daa4c:	601c      	str	r4, [r3, #0]
   daa4e:	e72a      	b.n	da8a6 <__gethex+0x12a>
   daa50:	1e71      	subs	r1, r6, #1
   daa52:	4620      	mov	r0, r4
   daa54:	f000 fdb8 	bl	db5c8 <__any_on>
   daa58:	2800      	cmp	r0, #0
   daa5a:	d1ed      	bne.n	daa38 <__gethex+0x2bc>
   daa5c:	ee18 0a10 	vmov	r0, s16
   daa60:	4621      	mov	r1, r4
   daa62:	f000 f9c7 	bl	dadf4 <_Bfree>
   daa66:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daa68:	2300      	movs	r3, #0
   daa6a:	6013      	str	r3, [r2, #0]
   daa6c:	2750      	movs	r7, #80	; 0x50
   daa6e:	e71a      	b.n	da8a6 <__gethex+0x12a>
   daa70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa72:	2b00      	cmp	r3, #0
   daa74:	d1f2      	bne.n	daa5c <__gethex+0x2e0>
   daa76:	e7df      	b.n	daa38 <__gethex+0x2bc>
   daa78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daa7a:	2b00      	cmp	r3, #0
   daa7c:	d1dc      	bne.n	daa38 <__gethex+0x2bc>
   daa7e:	e7ed      	b.n	daa5c <__gethex+0x2e0>
   daa80:	000dc4bc 	.word	0x000dc4bc
   daa84:	1e6f      	subs	r7, r5, #1
   daa86:	f1ba 0f00 	cmp.w	sl, #0
   daa8a:	d131      	bne.n	daaf0 <__gethex+0x374>
   daa8c:	b127      	cbz	r7, daa98 <__gethex+0x31c>
   daa8e:	4639      	mov	r1, r7
   daa90:	4620      	mov	r0, r4
   daa92:	f000 fd99 	bl	db5c8 <__any_on>
   daa96:	4682      	mov	sl, r0
   daa98:	117b      	asrs	r3, r7, #5
   daa9a:	2101      	movs	r1, #1
   daa9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   daaa0:	f007 071f 	and.w	r7, r7, #31
   daaa4:	fa01 f707 	lsl.w	r7, r1, r7
   daaa8:	421f      	tst	r7, r3
   daaaa:	4629      	mov	r1, r5
   daaac:	4620      	mov	r0, r4
   daaae:	bf18      	it	ne
   daab0:	f04a 0a02 	orrne.w	sl, sl, #2
   daab4:	1b76      	subs	r6, r6, r5
   daab6:	f7ff fdf9 	bl	da6ac <rshift>
   daaba:	f8d8 5004 	ldr.w	r5, [r8, #4]
   daabe:	2702      	movs	r7, #2
   daac0:	f1ba 0f00 	cmp.w	sl, #0
   daac4:	d048      	beq.n	dab58 <__gethex+0x3dc>
   daac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daaca:	2b02      	cmp	r3, #2
   daacc:	d015      	beq.n	daafa <__gethex+0x37e>
   daace:	2b03      	cmp	r3, #3
   daad0:	d017      	beq.n	dab02 <__gethex+0x386>
   daad2:	2b01      	cmp	r3, #1
   daad4:	d109      	bne.n	daaea <__gethex+0x36e>
   daad6:	f01a 0f02 	tst.w	sl, #2
   daada:	d006      	beq.n	daaea <__gethex+0x36e>
   daadc:	f8d9 0000 	ldr.w	r0, [r9]
   daae0:	ea4a 0a00 	orr.w	sl, sl, r0
   daae4:	f01a 0f01 	tst.w	sl, #1
   daae8:	d10e      	bne.n	dab08 <__gethex+0x38c>
   daaea:	f047 0710 	orr.w	r7, r7, #16
   daaee:	e033      	b.n	dab58 <__gethex+0x3dc>
   daaf0:	f04f 0a01 	mov.w	sl, #1
   daaf4:	e7d0      	b.n	daa98 <__gethex+0x31c>
   daaf6:	2701      	movs	r7, #1
   daaf8:	e7e2      	b.n	daac0 <__gethex+0x344>
   daafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daafc:	f1c3 0301 	rsb	r3, r3, #1
   dab00:	9315      	str	r3, [sp, #84]	; 0x54
   dab02:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab04:	2b00      	cmp	r3, #0
   dab06:	d0f0      	beq.n	daaea <__gethex+0x36e>
   dab08:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dab0c:	f104 0314 	add.w	r3, r4, #20
   dab10:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dab14:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dab18:	f04f 0c00 	mov.w	ip, #0
   dab1c:	4618      	mov	r0, r3
   dab1e:	f853 2b04 	ldr.w	r2, [r3], #4
   dab22:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dab26:	d01c      	beq.n	dab62 <__gethex+0x3e6>
   dab28:	3201      	adds	r2, #1
   dab2a:	6002      	str	r2, [r0, #0]
   dab2c:	2f02      	cmp	r7, #2
   dab2e:	f104 0314 	add.w	r3, r4, #20
   dab32:	d13a      	bne.n	dabaa <__gethex+0x42e>
   dab34:	f8d8 2000 	ldr.w	r2, [r8]
   dab38:	3a01      	subs	r2, #1
   dab3a:	42b2      	cmp	r2, r6
   dab3c:	d10a      	bne.n	dab54 <__gethex+0x3d8>
   dab3e:	1171      	asrs	r1, r6, #5
   dab40:	2201      	movs	r2, #1
   dab42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dab46:	f006 061f 	and.w	r6, r6, #31
   dab4a:	fa02 f606 	lsl.w	r6, r2, r6
   dab4e:	421e      	tst	r6, r3
   dab50:	bf18      	it	ne
   dab52:	4617      	movne	r7, r2
   dab54:	f047 0720 	orr.w	r7, r7, #32
   dab58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dab5a:	601c      	str	r4, [r3, #0]
   dab5c:	9b04      	ldr	r3, [sp, #16]
   dab5e:	601d      	str	r5, [r3, #0]
   dab60:	e6a1      	b.n	da8a6 <__gethex+0x12a>
   dab62:	4299      	cmp	r1, r3
   dab64:	f843 cc04 	str.w	ip, [r3, #-4]
   dab68:	d8d8      	bhi.n	dab1c <__gethex+0x3a0>
   dab6a:	68a3      	ldr	r3, [r4, #8]
   dab6c:	4599      	cmp	r9, r3
   dab6e:	db14      	blt.n	dab9a <__gethex+0x41e>
   dab70:	6861      	ldr	r1, [r4, #4]
   dab72:	ee18 0a10 	vmov	r0, s16
   dab76:	3101      	adds	r1, #1
   dab78:	f000 f908 	bl	dad8c <_Balloc>
   dab7c:	6922      	ldr	r2, [r4, #16]
   dab7e:	3202      	adds	r2, #2
   dab80:	f104 010c 	add.w	r1, r4, #12
   dab84:	4682      	mov	sl, r0
   dab86:	0092      	lsls	r2, r2, #2
   dab88:	300c      	adds	r0, #12
   dab8a:	f7fe fe29 	bl	d97e0 <memcpy>
   dab8e:	4621      	mov	r1, r4
   dab90:	ee18 0a10 	vmov	r0, s16
   dab94:	f000 f92e 	bl	dadf4 <_Bfree>
   dab98:	4654      	mov	r4, sl
   dab9a:	6923      	ldr	r3, [r4, #16]
   dab9c:	1c5a      	adds	r2, r3, #1
   dab9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   daba2:	6122      	str	r2, [r4, #16]
   daba4:	2201      	movs	r2, #1
   daba6:	615a      	str	r2, [r3, #20]
   daba8:	e7c0      	b.n	dab2c <__gethex+0x3b0>
   dabaa:	6922      	ldr	r2, [r4, #16]
   dabac:	454a      	cmp	r2, r9
   dabae:	dd0b      	ble.n	dabc8 <__gethex+0x44c>
   dabb0:	2101      	movs	r1, #1
   dabb2:	4620      	mov	r0, r4
   dabb4:	f7ff fd7a 	bl	da6ac <rshift>
   dabb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dabbc:	3501      	adds	r5, #1
   dabbe:	42ab      	cmp	r3, r5
   dabc0:	f6ff aed7 	blt.w	da972 <__gethex+0x1f6>
   dabc4:	2701      	movs	r7, #1
   dabc6:	e7c5      	b.n	dab54 <__gethex+0x3d8>
   dabc8:	f016 061f 	ands.w	r6, r6, #31
   dabcc:	d0fa      	beq.n	dabc4 <__gethex+0x448>
   dabce:	449b      	add	fp, r3
   dabd0:	f1c6 0620 	rsb	r6, r6, #32
   dabd4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dabd8:	f000 f99f 	bl	daf1a <__hi0bits>
   dabdc:	42b0      	cmp	r0, r6
   dabde:	dbe7      	blt.n	dabb0 <__gethex+0x434>
   dabe0:	e7f0      	b.n	dabc4 <__gethex+0x448>
   dabe2:	bf00      	nop

000dabe4 <L_shift>:
   dabe4:	f1c2 0208 	rsb	r2, r2, #8
   dabe8:	0092      	lsls	r2, r2, #2
   dabea:	b570      	push	{r4, r5, r6, lr}
   dabec:	f1c2 0620 	rsb	r6, r2, #32
   dabf0:	6843      	ldr	r3, [r0, #4]
   dabf2:	6804      	ldr	r4, [r0, #0]
   dabf4:	fa03 f506 	lsl.w	r5, r3, r6
   dabf8:	432c      	orrs	r4, r5
   dabfa:	40d3      	lsrs	r3, r2
   dabfc:	6004      	str	r4, [r0, #0]
   dabfe:	f840 3f04 	str.w	r3, [r0, #4]!
   dac02:	4288      	cmp	r0, r1
   dac04:	d3f4      	bcc.n	dabf0 <L_shift+0xc>
   dac06:	bd70      	pop	{r4, r5, r6, pc}

000dac08 <__match>:
   dac08:	b530      	push	{r4, r5, lr}
   dac0a:	6803      	ldr	r3, [r0, #0]
   dac0c:	3301      	adds	r3, #1
   dac0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dac12:	b914      	cbnz	r4, dac1a <__match+0x12>
   dac14:	6003      	str	r3, [r0, #0]
   dac16:	2001      	movs	r0, #1
   dac18:	bd30      	pop	{r4, r5, pc}
   dac1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dac22:	2d19      	cmp	r5, #25
   dac24:	bf98      	it	ls
   dac26:	3220      	addls	r2, #32
   dac28:	42a2      	cmp	r2, r4
   dac2a:	d0f0      	beq.n	dac0e <__match+0x6>
   dac2c:	2000      	movs	r0, #0
   dac2e:	e7f3      	b.n	dac18 <__match+0x10>

000dac30 <__hexnan>:
   dac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac34:	680b      	ldr	r3, [r1, #0]
   dac36:	6801      	ldr	r1, [r0, #0]
   dac38:	115e      	asrs	r6, r3, #5
   dac3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dac3e:	f013 031f 	ands.w	r3, r3, #31
   dac42:	b087      	sub	sp, #28
   dac44:	bf18      	it	ne
   dac46:	3604      	addne	r6, #4
   dac48:	2500      	movs	r5, #0
   dac4a:	1f37      	subs	r7, r6, #4
   dac4c:	4682      	mov	sl, r0
   dac4e:	4690      	mov	r8, r2
   dac50:	9301      	str	r3, [sp, #4]
   dac52:	f846 5c04 	str.w	r5, [r6, #-4]
   dac56:	46b9      	mov	r9, r7
   dac58:	463c      	mov	r4, r7
   dac5a:	9502      	str	r5, [sp, #8]
   dac5c:	46ab      	mov	fp, r5
   dac5e:	784a      	ldrb	r2, [r1, #1]
   dac60:	1c4b      	adds	r3, r1, #1
   dac62:	9303      	str	r3, [sp, #12]
   dac64:	b342      	cbz	r2, dacb8 <__hexnan+0x88>
   dac66:	4610      	mov	r0, r2
   dac68:	9105      	str	r1, [sp, #20]
   dac6a:	9204      	str	r2, [sp, #16]
   dac6c:	f7ff fd70 	bl	da750 <__hexdig_fun>
   dac70:	2800      	cmp	r0, #0
   dac72:	d14f      	bne.n	dad14 <__hexnan+0xe4>
   dac74:	9a04      	ldr	r2, [sp, #16]
   dac76:	9905      	ldr	r1, [sp, #20]
   dac78:	2a20      	cmp	r2, #32
   dac7a:	d818      	bhi.n	dacae <__hexnan+0x7e>
   dac7c:	9b02      	ldr	r3, [sp, #8]
   dac7e:	459b      	cmp	fp, r3
   dac80:	dd13      	ble.n	dacaa <__hexnan+0x7a>
   dac82:	454c      	cmp	r4, r9
   dac84:	d206      	bcs.n	dac94 <__hexnan+0x64>
   dac86:	2d07      	cmp	r5, #7
   dac88:	dc04      	bgt.n	dac94 <__hexnan+0x64>
   dac8a:	462a      	mov	r2, r5
   dac8c:	4649      	mov	r1, r9
   dac8e:	4620      	mov	r0, r4
   dac90:	f7ff ffa8 	bl	dabe4 <L_shift>
   dac94:	4544      	cmp	r4, r8
   dac96:	d950      	bls.n	dad3a <__hexnan+0x10a>
   dac98:	2300      	movs	r3, #0
   dac9a:	f1a4 0904 	sub.w	r9, r4, #4
   dac9e:	f844 3c04 	str.w	r3, [r4, #-4]
   daca2:	f8cd b008 	str.w	fp, [sp, #8]
   daca6:	464c      	mov	r4, r9
   daca8:	461d      	mov	r5, r3
   dacaa:	9903      	ldr	r1, [sp, #12]
   dacac:	e7d7      	b.n	dac5e <__hexnan+0x2e>
   dacae:	2a29      	cmp	r2, #41	; 0x29
   dacb0:	d156      	bne.n	dad60 <__hexnan+0x130>
   dacb2:	3102      	adds	r1, #2
   dacb4:	f8ca 1000 	str.w	r1, [sl]
   dacb8:	f1bb 0f00 	cmp.w	fp, #0
   dacbc:	d050      	beq.n	dad60 <__hexnan+0x130>
   dacbe:	454c      	cmp	r4, r9
   dacc0:	d206      	bcs.n	dacd0 <__hexnan+0xa0>
   dacc2:	2d07      	cmp	r5, #7
   dacc4:	dc04      	bgt.n	dacd0 <__hexnan+0xa0>
   dacc6:	462a      	mov	r2, r5
   dacc8:	4649      	mov	r1, r9
   dacca:	4620      	mov	r0, r4
   daccc:	f7ff ff8a 	bl	dabe4 <L_shift>
   dacd0:	4544      	cmp	r4, r8
   dacd2:	d934      	bls.n	dad3e <__hexnan+0x10e>
   dacd4:	f1a8 0204 	sub.w	r2, r8, #4
   dacd8:	4623      	mov	r3, r4
   dacda:	f853 1b04 	ldr.w	r1, [r3], #4
   dacde:	f842 1f04 	str.w	r1, [r2, #4]!
   dace2:	429f      	cmp	r7, r3
   dace4:	d2f9      	bcs.n	dacda <__hexnan+0xaa>
   dace6:	1b3b      	subs	r3, r7, r4
   dace8:	f023 0303 	bic.w	r3, r3, #3
   dacec:	3304      	adds	r3, #4
   dacee:	3401      	adds	r4, #1
   dacf0:	3e03      	subs	r6, #3
   dacf2:	42b4      	cmp	r4, r6
   dacf4:	bf88      	it	hi
   dacf6:	2304      	movhi	r3, #4
   dacf8:	4443      	add	r3, r8
   dacfa:	2200      	movs	r2, #0
   dacfc:	f843 2b04 	str.w	r2, [r3], #4
   dad00:	429f      	cmp	r7, r3
   dad02:	d2fb      	bcs.n	dacfc <__hexnan+0xcc>
   dad04:	683b      	ldr	r3, [r7, #0]
   dad06:	b91b      	cbnz	r3, dad10 <__hexnan+0xe0>
   dad08:	4547      	cmp	r7, r8
   dad0a:	d127      	bne.n	dad5c <__hexnan+0x12c>
   dad0c:	2301      	movs	r3, #1
   dad0e:	603b      	str	r3, [r7, #0]
   dad10:	2005      	movs	r0, #5
   dad12:	e026      	b.n	dad62 <__hexnan+0x132>
   dad14:	3501      	adds	r5, #1
   dad16:	2d08      	cmp	r5, #8
   dad18:	f10b 0b01 	add.w	fp, fp, #1
   dad1c:	dd06      	ble.n	dad2c <__hexnan+0xfc>
   dad1e:	4544      	cmp	r4, r8
   dad20:	d9c3      	bls.n	dacaa <__hexnan+0x7a>
   dad22:	2300      	movs	r3, #0
   dad24:	f844 3c04 	str.w	r3, [r4, #-4]
   dad28:	2501      	movs	r5, #1
   dad2a:	3c04      	subs	r4, #4
   dad2c:	6822      	ldr	r2, [r4, #0]
   dad2e:	f000 000f 	and.w	r0, r0, #15
   dad32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dad36:	6022      	str	r2, [r4, #0]
   dad38:	e7b7      	b.n	dacaa <__hexnan+0x7a>
   dad3a:	2508      	movs	r5, #8
   dad3c:	e7b5      	b.n	dacaa <__hexnan+0x7a>
   dad3e:	9b01      	ldr	r3, [sp, #4]
   dad40:	2b00      	cmp	r3, #0
   dad42:	d0df      	beq.n	dad04 <__hexnan+0xd4>
   dad44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dad48:	f1c3 0320 	rsb	r3, r3, #32
   dad4c:	fa22 f303 	lsr.w	r3, r2, r3
   dad50:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dad54:	401a      	ands	r2, r3
   dad56:	f846 2c04 	str.w	r2, [r6, #-4]
   dad5a:	e7d3      	b.n	dad04 <__hexnan+0xd4>
   dad5c:	3f04      	subs	r7, #4
   dad5e:	e7d1      	b.n	dad04 <__hexnan+0xd4>
   dad60:	2004      	movs	r0, #4
   dad62:	b007      	add	sp, #28
   dad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dad68 <__ascii_mbtowc>:
   dad68:	b082      	sub	sp, #8
   dad6a:	b901      	cbnz	r1, dad6e <__ascii_mbtowc+0x6>
   dad6c:	a901      	add	r1, sp, #4
   dad6e:	b142      	cbz	r2, dad82 <__ascii_mbtowc+0x1a>
   dad70:	b14b      	cbz	r3, dad86 <__ascii_mbtowc+0x1e>
   dad72:	7813      	ldrb	r3, [r2, #0]
   dad74:	600b      	str	r3, [r1, #0]
   dad76:	7812      	ldrb	r2, [r2, #0]
   dad78:	1e10      	subs	r0, r2, #0
   dad7a:	bf18      	it	ne
   dad7c:	2001      	movne	r0, #1
   dad7e:	b002      	add	sp, #8
   dad80:	4770      	bx	lr
   dad82:	4610      	mov	r0, r2
   dad84:	e7fb      	b.n	dad7e <__ascii_mbtowc+0x16>
   dad86:	f06f 0001 	mvn.w	r0, #1
   dad8a:	e7f8      	b.n	dad7e <__ascii_mbtowc+0x16>

000dad8c <_Balloc>:
   dad8c:	b570      	push	{r4, r5, r6, lr}
   dad8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dad90:	4604      	mov	r4, r0
   dad92:	460d      	mov	r5, r1
   dad94:	b93e      	cbnz	r6, dada6 <_Balloc+0x1a>
   dad96:	2010      	movs	r0, #16
   dad98:	f7fc fb44 	bl	d7424 <malloc>
   dad9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dada0:	6260      	str	r0, [r4, #36]	; 0x24
   dada2:	6006      	str	r6, [r0, #0]
   dada4:	60c6      	str	r6, [r0, #12]
   dada6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dada8:	68f3      	ldr	r3, [r6, #12]
   dadaa:	b183      	cbz	r3, dadce <_Balloc+0x42>
   dadac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dadae:	68db      	ldr	r3, [r3, #12]
   dadb0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dadb4:	b9b8      	cbnz	r0, dade6 <_Balloc+0x5a>
   dadb6:	2101      	movs	r1, #1
   dadb8:	fa01 f605 	lsl.w	r6, r1, r5
   dadbc:	1d72      	adds	r2, r6, #5
   dadbe:	0092      	lsls	r2, r2, #2
   dadc0:	4620      	mov	r0, r4
   dadc2:	f000 fc22 	bl	db60a <_calloc_r>
   dadc6:	b160      	cbz	r0, dade2 <_Balloc+0x56>
   dadc8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dadcc:	e00e      	b.n	dadec <_Balloc+0x60>
   dadce:	2221      	movs	r2, #33	; 0x21
   dadd0:	2104      	movs	r1, #4
   dadd2:	4620      	mov	r0, r4
   dadd4:	f000 fc19 	bl	db60a <_calloc_r>
   dadd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dadda:	60f0      	str	r0, [r6, #12]
   daddc:	68db      	ldr	r3, [r3, #12]
   dadde:	2b00      	cmp	r3, #0
   dade0:	d1e4      	bne.n	dadac <_Balloc+0x20>
   dade2:	2000      	movs	r0, #0
   dade4:	bd70      	pop	{r4, r5, r6, pc}
   dade6:	6802      	ldr	r2, [r0, #0]
   dade8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dadec:	2300      	movs	r3, #0
   dadee:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dadf2:	e7f7      	b.n	dade4 <_Balloc+0x58>

000dadf4 <_Bfree>:
   dadf4:	b570      	push	{r4, r5, r6, lr}
   dadf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dadf8:	4605      	mov	r5, r0
   dadfa:	460c      	mov	r4, r1
   dadfc:	b93e      	cbnz	r6, dae0e <_Bfree+0x1a>
   dadfe:	2010      	movs	r0, #16
   dae00:	f7fc fb10 	bl	d7424 <malloc>
   dae04:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dae08:	6268      	str	r0, [r5, #36]	; 0x24
   dae0a:	6006      	str	r6, [r0, #0]
   dae0c:	60c6      	str	r6, [r0, #12]
   dae0e:	b13c      	cbz	r4, dae20 <_Bfree+0x2c>
   dae10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dae12:	6862      	ldr	r2, [r4, #4]
   dae14:	68db      	ldr	r3, [r3, #12]
   dae16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dae1a:	6021      	str	r1, [r4, #0]
   dae1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dae20:	bd70      	pop	{r4, r5, r6, pc}

000dae22 <__multadd>:
   dae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dae26:	690e      	ldr	r6, [r1, #16]
   dae28:	4607      	mov	r7, r0
   dae2a:	4698      	mov	r8, r3
   dae2c:	460c      	mov	r4, r1
   dae2e:	f101 0014 	add.w	r0, r1, #20
   dae32:	2300      	movs	r3, #0
   dae34:	6805      	ldr	r5, [r0, #0]
   dae36:	b2a9      	uxth	r1, r5
   dae38:	fb02 8101 	mla	r1, r2, r1, r8
   dae3c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dae40:	0c2d      	lsrs	r5, r5, #16
   dae42:	fb02 c505 	mla	r5, r2, r5, ip
   dae46:	b289      	uxth	r1, r1
   dae48:	3301      	adds	r3, #1
   dae4a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dae4e:	429e      	cmp	r6, r3
   dae50:	f840 1b04 	str.w	r1, [r0], #4
   dae54:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dae58:	dcec      	bgt.n	dae34 <__multadd+0x12>
   dae5a:	f1b8 0f00 	cmp.w	r8, #0
   dae5e:	d01b      	beq.n	dae98 <__multadd+0x76>
   dae60:	68a3      	ldr	r3, [r4, #8]
   dae62:	42b3      	cmp	r3, r6
   dae64:	dc12      	bgt.n	dae8c <__multadd+0x6a>
   dae66:	6861      	ldr	r1, [r4, #4]
   dae68:	4638      	mov	r0, r7
   dae6a:	3101      	adds	r1, #1
   dae6c:	f7ff ff8e 	bl	dad8c <_Balloc>
   dae70:	6922      	ldr	r2, [r4, #16]
   dae72:	3202      	adds	r2, #2
   dae74:	f104 010c 	add.w	r1, r4, #12
   dae78:	4605      	mov	r5, r0
   dae7a:	0092      	lsls	r2, r2, #2
   dae7c:	300c      	adds	r0, #12
   dae7e:	f7fe fcaf 	bl	d97e0 <memcpy>
   dae82:	4621      	mov	r1, r4
   dae84:	4638      	mov	r0, r7
   dae86:	f7ff ffb5 	bl	dadf4 <_Bfree>
   dae8a:	462c      	mov	r4, r5
   dae8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dae90:	3601      	adds	r6, #1
   dae92:	f8c3 8014 	str.w	r8, [r3, #20]
   dae96:	6126      	str	r6, [r4, #16]
   dae98:	4620      	mov	r0, r4
   dae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dae9e <__s2b>:
   dae9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daea2:	460c      	mov	r4, r1
   daea4:	4615      	mov	r5, r2
   daea6:	461f      	mov	r7, r3
   daea8:	2209      	movs	r2, #9
   daeaa:	3308      	adds	r3, #8
   daeac:	4606      	mov	r6, r0
   daeae:	fb93 f3f2 	sdiv	r3, r3, r2
   daeb2:	2100      	movs	r1, #0
   daeb4:	2201      	movs	r2, #1
   daeb6:	429a      	cmp	r2, r3
   daeb8:	db20      	blt.n	daefc <__s2b+0x5e>
   daeba:	4630      	mov	r0, r6
   daebc:	f7ff ff66 	bl	dad8c <_Balloc>
   daec0:	9b08      	ldr	r3, [sp, #32]
   daec2:	6143      	str	r3, [r0, #20]
   daec4:	2d09      	cmp	r5, #9
   daec6:	f04f 0301 	mov.w	r3, #1
   daeca:	6103      	str	r3, [r0, #16]
   daecc:	dd19      	ble.n	daf02 <__s2b+0x64>
   daece:	f104 0909 	add.w	r9, r4, #9
   daed2:	46c8      	mov	r8, r9
   daed4:	442c      	add	r4, r5
   daed6:	f818 3b01 	ldrb.w	r3, [r8], #1
   daeda:	4601      	mov	r1, r0
   daedc:	3b30      	subs	r3, #48	; 0x30
   daede:	220a      	movs	r2, #10
   daee0:	4630      	mov	r0, r6
   daee2:	f7ff ff9e 	bl	dae22 <__multadd>
   daee6:	45a0      	cmp	r8, r4
   daee8:	d1f5      	bne.n	daed6 <__s2b+0x38>
   daeea:	f1a5 0408 	sub.w	r4, r5, #8
   daeee:	444c      	add	r4, r9
   daef0:	1b2d      	subs	r5, r5, r4
   daef2:	1963      	adds	r3, r4, r5
   daef4:	42bb      	cmp	r3, r7
   daef6:	db07      	blt.n	daf08 <__s2b+0x6a>
   daef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daefc:	0052      	lsls	r2, r2, #1
   daefe:	3101      	adds	r1, #1
   daf00:	e7d9      	b.n	daeb6 <__s2b+0x18>
   daf02:	340a      	adds	r4, #10
   daf04:	2509      	movs	r5, #9
   daf06:	e7f3      	b.n	daef0 <__s2b+0x52>
   daf08:	f814 3b01 	ldrb.w	r3, [r4], #1
   daf0c:	4601      	mov	r1, r0
   daf0e:	3b30      	subs	r3, #48	; 0x30
   daf10:	220a      	movs	r2, #10
   daf12:	4630      	mov	r0, r6
   daf14:	f7ff ff85 	bl	dae22 <__multadd>
   daf18:	e7eb      	b.n	daef2 <__s2b+0x54>

000daf1a <__hi0bits>:
   daf1a:	0c03      	lsrs	r3, r0, #16
   daf1c:	041b      	lsls	r3, r3, #16
   daf1e:	b9d3      	cbnz	r3, daf56 <__hi0bits+0x3c>
   daf20:	0400      	lsls	r0, r0, #16
   daf22:	2310      	movs	r3, #16
   daf24:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   daf28:	bf04      	itt	eq
   daf2a:	0200      	lsleq	r0, r0, #8
   daf2c:	3308      	addeq	r3, #8
   daf2e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   daf32:	bf04      	itt	eq
   daf34:	0100      	lsleq	r0, r0, #4
   daf36:	3304      	addeq	r3, #4
   daf38:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   daf3c:	bf04      	itt	eq
   daf3e:	0080      	lsleq	r0, r0, #2
   daf40:	3302      	addeq	r3, #2
   daf42:	2800      	cmp	r0, #0
   daf44:	db05      	blt.n	daf52 <__hi0bits+0x38>
   daf46:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   daf4a:	f103 0301 	add.w	r3, r3, #1
   daf4e:	bf08      	it	eq
   daf50:	2320      	moveq	r3, #32
   daf52:	4618      	mov	r0, r3
   daf54:	4770      	bx	lr
   daf56:	2300      	movs	r3, #0
   daf58:	e7e4      	b.n	daf24 <__hi0bits+0xa>

000daf5a <__lo0bits>:
   daf5a:	6803      	ldr	r3, [r0, #0]
   daf5c:	f013 0207 	ands.w	r2, r3, #7
   daf60:	4601      	mov	r1, r0
   daf62:	d00b      	beq.n	daf7c <__lo0bits+0x22>
   daf64:	07da      	lsls	r2, r3, #31
   daf66:	d424      	bmi.n	dafb2 <__lo0bits+0x58>
   daf68:	0798      	lsls	r0, r3, #30
   daf6a:	bf49      	itett	mi
   daf6c:	085b      	lsrmi	r3, r3, #1
   daf6e:	089b      	lsrpl	r3, r3, #2
   daf70:	2001      	movmi	r0, #1
   daf72:	600b      	strmi	r3, [r1, #0]
   daf74:	bf5c      	itt	pl
   daf76:	600b      	strpl	r3, [r1, #0]
   daf78:	2002      	movpl	r0, #2
   daf7a:	4770      	bx	lr
   daf7c:	b298      	uxth	r0, r3
   daf7e:	b9b0      	cbnz	r0, dafae <__lo0bits+0x54>
   daf80:	0c1b      	lsrs	r3, r3, #16
   daf82:	2010      	movs	r0, #16
   daf84:	f013 0fff 	tst.w	r3, #255	; 0xff
   daf88:	bf04      	itt	eq
   daf8a:	0a1b      	lsreq	r3, r3, #8
   daf8c:	3008      	addeq	r0, #8
   daf8e:	071a      	lsls	r2, r3, #28
   daf90:	bf04      	itt	eq
   daf92:	091b      	lsreq	r3, r3, #4
   daf94:	3004      	addeq	r0, #4
   daf96:	079a      	lsls	r2, r3, #30
   daf98:	bf04      	itt	eq
   daf9a:	089b      	lsreq	r3, r3, #2
   daf9c:	3002      	addeq	r0, #2
   daf9e:	07da      	lsls	r2, r3, #31
   dafa0:	d403      	bmi.n	dafaa <__lo0bits+0x50>
   dafa2:	085b      	lsrs	r3, r3, #1
   dafa4:	f100 0001 	add.w	r0, r0, #1
   dafa8:	d005      	beq.n	dafb6 <__lo0bits+0x5c>
   dafaa:	600b      	str	r3, [r1, #0]
   dafac:	4770      	bx	lr
   dafae:	4610      	mov	r0, r2
   dafb0:	e7e8      	b.n	daf84 <__lo0bits+0x2a>
   dafb2:	2000      	movs	r0, #0
   dafb4:	4770      	bx	lr
   dafb6:	2020      	movs	r0, #32
   dafb8:	4770      	bx	lr

000dafba <__i2b>:
   dafba:	b510      	push	{r4, lr}
   dafbc:	460c      	mov	r4, r1
   dafbe:	2101      	movs	r1, #1
   dafc0:	f7ff fee4 	bl	dad8c <_Balloc>
   dafc4:	2201      	movs	r2, #1
   dafc6:	6144      	str	r4, [r0, #20]
   dafc8:	6102      	str	r2, [r0, #16]
   dafca:	bd10      	pop	{r4, pc}

000dafcc <__multiply>:
   dafcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dafd0:	4615      	mov	r5, r2
   dafd2:	690a      	ldr	r2, [r1, #16]
   dafd4:	692b      	ldr	r3, [r5, #16]
   dafd6:	429a      	cmp	r2, r3
   dafd8:	bfb8      	it	lt
   dafda:	460b      	movlt	r3, r1
   dafdc:	460c      	mov	r4, r1
   dafde:	bfbc      	itt	lt
   dafe0:	462c      	movlt	r4, r5
   dafe2:	461d      	movlt	r5, r3
   dafe4:	6927      	ldr	r7, [r4, #16]
   dafe6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dafea:	68a3      	ldr	r3, [r4, #8]
   dafec:	6861      	ldr	r1, [r4, #4]
   dafee:	eb07 0609 	add.w	r6, r7, r9
   daff2:	42b3      	cmp	r3, r6
   daff4:	bfb8      	it	lt
   daff6:	3101      	addlt	r1, #1
   daff8:	b085      	sub	sp, #20
   daffa:	f7ff fec7 	bl	dad8c <_Balloc>
   daffe:	f100 0114 	add.w	r1, r0, #20
   db002:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   db006:	460b      	mov	r3, r1
   db008:	2200      	movs	r2, #0
   db00a:	4543      	cmp	r3, r8
   db00c:	d31d      	bcc.n	db04a <__multiply+0x7e>
   db00e:	f104 0314 	add.w	r3, r4, #20
   db012:	f105 0214 	add.w	r2, r5, #20
   db016:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   db01a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db01e:	9302      	str	r3, [sp, #8]
   db020:	1b3b      	subs	r3, r7, r4
   db022:	3b15      	subs	r3, #21
   db024:	f023 0303 	bic.w	r3, r3, #3
   db028:	3304      	adds	r3, #4
   db02a:	f104 0515 	add.w	r5, r4, #21
   db02e:	42af      	cmp	r7, r5
   db030:	bf38      	it	cc
   db032:	2304      	movcc	r3, #4
   db034:	9301      	str	r3, [sp, #4]
   db036:	9b02      	ldr	r3, [sp, #8]
   db038:	9203      	str	r2, [sp, #12]
   db03a:	4293      	cmp	r3, r2
   db03c:	d808      	bhi.n	db050 <__multiply+0x84>
   db03e:	2e00      	cmp	r6, #0
   db040:	dc5a      	bgt.n	db0f8 <__multiply+0x12c>
   db042:	6106      	str	r6, [r0, #16]
   db044:	b005      	add	sp, #20
   db046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db04a:	f843 2b04 	str.w	r2, [r3], #4
   db04e:	e7dc      	b.n	db00a <__multiply+0x3e>
   db050:	f8b2 a000 	ldrh.w	sl, [r2]
   db054:	f1ba 0f00 	cmp.w	sl, #0
   db058:	d024      	beq.n	db0a4 <__multiply+0xd8>
   db05a:	f104 0e14 	add.w	lr, r4, #20
   db05e:	4689      	mov	r9, r1
   db060:	f04f 0c00 	mov.w	ip, #0
   db064:	f85e 5b04 	ldr.w	r5, [lr], #4
   db068:	f8d9 b000 	ldr.w	fp, [r9]
   db06c:	b2ab      	uxth	r3, r5
   db06e:	fa1f fb8b 	uxth.w	fp, fp
   db072:	fb0a b303 	mla	r3, sl, r3, fp
   db076:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   db07a:	f8d9 5000 	ldr.w	r5, [r9]
   db07e:	4463      	add	r3, ip
   db080:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db084:	fb0a c50b 	mla	r5, sl, fp, ip
   db088:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   db08c:	b29b      	uxth	r3, r3
   db08e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   db092:	4577      	cmp	r7, lr
   db094:	f849 3b04 	str.w	r3, [r9], #4
   db098:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db09c:	d8e2      	bhi.n	db064 <__multiply+0x98>
   db09e:	9b01      	ldr	r3, [sp, #4]
   db0a0:	f841 c003 	str.w	ip, [r1, r3]
   db0a4:	9b03      	ldr	r3, [sp, #12]
   db0a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   db0aa:	3204      	adds	r2, #4
   db0ac:	f1b9 0f00 	cmp.w	r9, #0
   db0b0:	d020      	beq.n	db0f4 <__multiply+0x128>
   db0b2:	680b      	ldr	r3, [r1, #0]
   db0b4:	f104 0c14 	add.w	ip, r4, #20
   db0b8:	468e      	mov	lr, r1
   db0ba:	f04f 0a00 	mov.w	sl, #0
   db0be:	f8bc 5000 	ldrh.w	r5, [ip]
   db0c2:	f8be b002 	ldrh.w	fp, [lr, #2]
   db0c6:	fb09 b505 	mla	r5, r9, r5, fp
   db0ca:	44aa      	add	sl, r5
   db0cc:	b29b      	uxth	r3, r3
   db0ce:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   db0d2:	f84e 3b04 	str.w	r3, [lr], #4
   db0d6:	f85c 3b04 	ldr.w	r3, [ip], #4
   db0da:	f8be 5000 	ldrh.w	r5, [lr]
   db0de:	0c1b      	lsrs	r3, r3, #16
   db0e0:	fb09 5303 	mla	r3, r9, r3, r5
   db0e4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   db0e8:	4567      	cmp	r7, ip
   db0ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   db0ee:	d8e6      	bhi.n	db0be <__multiply+0xf2>
   db0f0:	9d01      	ldr	r5, [sp, #4]
   db0f2:	514b      	str	r3, [r1, r5]
   db0f4:	3104      	adds	r1, #4
   db0f6:	e79e      	b.n	db036 <__multiply+0x6a>
   db0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   db0fc:	2b00      	cmp	r3, #0
   db0fe:	d1a0      	bne.n	db042 <__multiply+0x76>
   db100:	3e01      	subs	r6, #1
   db102:	e79c      	b.n	db03e <__multiply+0x72>

000db104 <__pow5mult>:
   db104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db108:	4615      	mov	r5, r2
   db10a:	f012 0203 	ands.w	r2, r2, #3
   db10e:	4606      	mov	r6, r0
   db110:	460f      	mov	r7, r1
   db112:	d007      	beq.n	db124 <__pow5mult+0x20>
   db114:	4c21      	ldr	r4, [pc, #132]	; (db19c <__pow5mult+0x98>)
   db116:	3a01      	subs	r2, #1
   db118:	2300      	movs	r3, #0
   db11a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db11e:	f7ff fe80 	bl	dae22 <__multadd>
   db122:	4607      	mov	r7, r0
   db124:	10ad      	asrs	r5, r5, #2
   db126:	d035      	beq.n	db194 <__pow5mult+0x90>
   db128:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db12a:	b93c      	cbnz	r4, db13c <__pow5mult+0x38>
   db12c:	2010      	movs	r0, #16
   db12e:	f7fc f979 	bl	d7424 <malloc>
   db132:	e9c0 4401 	strd	r4, r4, [r0, #4]
   db136:	6270      	str	r0, [r6, #36]	; 0x24
   db138:	6004      	str	r4, [r0, #0]
   db13a:	60c4      	str	r4, [r0, #12]
   db13c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db140:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db144:	b94c      	cbnz	r4, db15a <__pow5mult+0x56>
   db146:	f240 2171 	movw	r1, #625	; 0x271
   db14a:	4630      	mov	r0, r6
   db14c:	f7ff ff35 	bl	dafba <__i2b>
   db150:	2300      	movs	r3, #0
   db152:	f8c8 0008 	str.w	r0, [r8, #8]
   db156:	4604      	mov	r4, r0
   db158:	6003      	str	r3, [r0, #0]
   db15a:	f04f 0900 	mov.w	r9, #0
   db15e:	07eb      	lsls	r3, r5, #31
   db160:	d50a      	bpl.n	db178 <__pow5mult+0x74>
   db162:	4639      	mov	r1, r7
   db164:	4622      	mov	r2, r4
   db166:	4630      	mov	r0, r6
   db168:	f7ff ff30 	bl	dafcc <__multiply>
   db16c:	4639      	mov	r1, r7
   db16e:	4680      	mov	r8, r0
   db170:	4630      	mov	r0, r6
   db172:	f7ff fe3f 	bl	dadf4 <_Bfree>
   db176:	4647      	mov	r7, r8
   db178:	106d      	asrs	r5, r5, #1
   db17a:	d00b      	beq.n	db194 <__pow5mult+0x90>
   db17c:	6820      	ldr	r0, [r4, #0]
   db17e:	b938      	cbnz	r0, db190 <__pow5mult+0x8c>
   db180:	4622      	mov	r2, r4
   db182:	4621      	mov	r1, r4
   db184:	4630      	mov	r0, r6
   db186:	f7ff ff21 	bl	dafcc <__multiply>
   db18a:	6020      	str	r0, [r4, #0]
   db18c:	f8c0 9000 	str.w	r9, [r0]
   db190:	4604      	mov	r4, r0
   db192:	e7e4      	b.n	db15e <__pow5mult+0x5a>
   db194:	4638      	mov	r0, r7
   db196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db19a:	bf00      	nop
   db19c:	000dc5c0 	.word	0x000dc5c0

000db1a0 <__lshift>:
   db1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db1a4:	460c      	mov	r4, r1
   db1a6:	6849      	ldr	r1, [r1, #4]
   db1a8:	6923      	ldr	r3, [r4, #16]
   db1aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
   db1ae:	68a3      	ldr	r3, [r4, #8]
   db1b0:	4607      	mov	r7, r0
   db1b2:	4691      	mov	r9, r2
   db1b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db1b8:	f108 0601 	add.w	r6, r8, #1
   db1bc:	42b3      	cmp	r3, r6
   db1be:	db3f      	blt.n	db240 <__lshift+0xa0>
   db1c0:	4638      	mov	r0, r7
   db1c2:	f7ff fde3 	bl	dad8c <_Balloc>
   db1c6:	2300      	movs	r3, #0
   db1c8:	4605      	mov	r5, r0
   db1ca:	f100 0114 	add.w	r1, r0, #20
   db1ce:	f100 0210 	add.w	r2, r0, #16
   db1d2:	4618      	mov	r0, r3
   db1d4:	4553      	cmp	r3, sl
   db1d6:	db36      	blt.n	db246 <__lshift+0xa6>
   db1d8:	6920      	ldr	r0, [r4, #16]
   db1da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   db1de:	f104 0314 	add.w	r3, r4, #20
   db1e2:	f019 091f 	ands.w	r9, r9, #31
   db1e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   db1ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   db1ee:	d02e      	beq.n	db24e <__lshift+0xae>
   db1f0:	f1c9 0e20 	rsb	lr, r9, #32
   db1f4:	468a      	mov	sl, r1
   db1f6:	2200      	movs	r2, #0
   db1f8:	6818      	ldr	r0, [r3, #0]
   db1fa:	fa00 f009 	lsl.w	r0, r0, r9
   db1fe:	4302      	orrs	r2, r0
   db200:	f84a 2b04 	str.w	r2, [sl], #4
   db204:	f853 2b04 	ldr.w	r2, [r3], #4
   db208:	459c      	cmp	ip, r3
   db20a:	fa22 f20e 	lsr.w	r2, r2, lr
   db20e:	d8f3      	bhi.n	db1f8 <__lshift+0x58>
   db210:	ebac 0304 	sub.w	r3, ip, r4
   db214:	3b15      	subs	r3, #21
   db216:	f023 0303 	bic.w	r3, r3, #3
   db21a:	3304      	adds	r3, #4
   db21c:	f104 0015 	add.w	r0, r4, #21
   db220:	4560      	cmp	r0, ip
   db222:	bf88      	it	hi
   db224:	2304      	movhi	r3, #4
   db226:	50ca      	str	r2, [r1, r3]
   db228:	b10a      	cbz	r2, db22e <__lshift+0x8e>
   db22a:	f108 0602 	add.w	r6, r8, #2
   db22e:	3e01      	subs	r6, #1
   db230:	4638      	mov	r0, r7
   db232:	612e      	str	r6, [r5, #16]
   db234:	4621      	mov	r1, r4
   db236:	f7ff fddd 	bl	dadf4 <_Bfree>
   db23a:	4628      	mov	r0, r5
   db23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db240:	3101      	adds	r1, #1
   db242:	005b      	lsls	r3, r3, #1
   db244:	e7ba      	b.n	db1bc <__lshift+0x1c>
   db246:	f842 0f04 	str.w	r0, [r2, #4]!
   db24a:	3301      	adds	r3, #1
   db24c:	e7c2      	b.n	db1d4 <__lshift+0x34>
   db24e:	3904      	subs	r1, #4
   db250:	f853 2b04 	ldr.w	r2, [r3], #4
   db254:	f841 2f04 	str.w	r2, [r1, #4]!
   db258:	459c      	cmp	ip, r3
   db25a:	d8f9      	bhi.n	db250 <__lshift+0xb0>
   db25c:	e7e7      	b.n	db22e <__lshift+0x8e>

000db25e <__mcmp>:
   db25e:	b530      	push	{r4, r5, lr}
   db260:	6902      	ldr	r2, [r0, #16]
   db262:	690c      	ldr	r4, [r1, #16]
   db264:	1b12      	subs	r2, r2, r4
   db266:	d10e      	bne.n	db286 <__mcmp+0x28>
   db268:	f100 0314 	add.w	r3, r0, #20
   db26c:	3114      	adds	r1, #20
   db26e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   db272:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   db276:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   db27a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   db27e:	42a5      	cmp	r5, r4
   db280:	d003      	beq.n	db28a <__mcmp+0x2c>
   db282:	d305      	bcc.n	db290 <__mcmp+0x32>
   db284:	2201      	movs	r2, #1
   db286:	4610      	mov	r0, r2
   db288:	bd30      	pop	{r4, r5, pc}
   db28a:	4283      	cmp	r3, r0
   db28c:	d3f3      	bcc.n	db276 <__mcmp+0x18>
   db28e:	e7fa      	b.n	db286 <__mcmp+0x28>
   db290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db294:	e7f7      	b.n	db286 <__mcmp+0x28>

000db296 <__mdiff>:
   db296:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db29a:	460c      	mov	r4, r1
   db29c:	4606      	mov	r6, r0
   db29e:	4611      	mov	r1, r2
   db2a0:	4620      	mov	r0, r4
   db2a2:	4617      	mov	r7, r2
   db2a4:	f7ff ffdb 	bl	db25e <__mcmp>
   db2a8:	1e05      	subs	r5, r0, #0
   db2aa:	d108      	bne.n	db2be <__mdiff+0x28>
   db2ac:	4629      	mov	r1, r5
   db2ae:	4630      	mov	r0, r6
   db2b0:	f7ff fd6c 	bl	dad8c <_Balloc>
   db2b4:	2301      	movs	r3, #1
   db2b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   db2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db2be:	bfa4      	itt	ge
   db2c0:	463b      	movge	r3, r7
   db2c2:	4627      	movge	r7, r4
   db2c4:	4630      	mov	r0, r6
   db2c6:	6879      	ldr	r1, [r7, #4]
   db2c8:	bfa6      	itte	ge
   db2ca:	461c      	movge	r4, r3
   db2cc:	2500      	movge	r5, #0
   db2ce:	2501      	movlt	r5, #1
   db2d0:	f7ff fd5c 	bl	dad8c <_Balloc>
   db2d4:	693e      	ldr	r6, [r7, #16]
   db2d6:	60c5      	str	r5, [r0, #12]
   db2d8:	6925      	ldr	r5, [r4, #16]
   db2da:	f107 0114 	add.w	r1, r7, #20
   db2de:	f104 0914 	add.w	r9, r4, #20
   db2e2:	f100 0e14 	add.w	lr, r0, #20
   db2e6:	f107 0210 	add.w	r2, r7, #16
   db2ea:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   db2ee:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   db2f2:	46f2      	mov	sl, lr
   db2f4:	2700      	movs	r7, #0
   db2f6:	f859 3b04 	ldr.w	r3, [r9], #4
   db2fa:	f852 bf04 	ldr.w	fp, [r2, #4]!
   db2fe:	fa1f f883 	uxth.w	r8, r3
   db302:	fa17 f78b 	uxtah	r7, r7, fp
   db306:	0c1b      	lsrs	r3, r3, #16
   db308:	eba7 0808 	sub.w	r8, r7, r8
   db30c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   db310:	eb03 4328 	add.w	r3, r3, r8, asr #16
   db314:	fa1f f888 	uxth.w	r8, r8
   db318:	141f      	asrs	r7, r3, #16
   db31a:	454d      	cmp	r5, r9
   db31c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   db320:	f84a 3b04 	str.w	r3, [sl], #4
   db324:	d8e7      	bhi.n	db2f6 <__mdiff+0x60>
   db326:	1b2b      	subs	r3, r5, r4
   db328:	3b15      	subs	r3, #21
   db32a:	f023 0303 	bic.w	r3, r3, #3
   db32e:	3304      	adds	r3, #4
   db330:	3415      	adds	r4, #21
   db332:	42a5      	cmp	r5, r4
   db334:	bf38      	it	cc
   db336:	2304      	movcc	r3, #4
   db338:	4419      	add	r1, r3
   db33a:	4473      	add	r3, lr
   db33c:	469e      	mov	lr, r3
   db33e:	460d      	mov	r5, r1
   db340:	4565      	cmp	r5, ip
   db342:	d30e      	bcc.n	db362 <__mdiff+0xcc>
   db344:	f10c 0203 	add.w	r2, ip, #3
   db348:	1a52      	subs	r2, r2, r1
   db34a:	f022 0203 	bic.w	r2, r2, #3
   db34e:	3903      	subs	r1, #3
   db350:	458c      	cmp	ip, r1
   db352:	bf38      	it	cc
   db354:	2200      	movcc	r2, #0
   db356:	441a      	add	r2, r3
   db358:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db35c:	b17b      	cbz	r3, db37e <__mdiff+0xe8>
   db35e:	6106      	str	r6, [r0, #16]
   db360:	e7ab      	b.n	db2ba <__mdiff+0x24>
   db362:	f855 8b04 	ldr.w	r8, [r5], #4
   db366:	fa17 f488 	uxtah	r4, r7, r8
   db36a:	1422      	asrs	r2, r4, #16
   db36c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db370:	b2a4      	uxth	r4, r4
   db372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db376:	f84e 4b04 	str.w	r4, [lr], #4
   db37a:	1417      	asrs	r7, r2, #16
   db37c:	e7e0      	b.n	db340 <__mdiff+0xaa>
   db37e:	3e01      	subs	r6, #1
   db380:	e7ea      	b.n	db358 <__mdiff+0xc2>
	...

000db384 <__ulp>:
   db384:	b082      	sub	sp, #8
   db386:	ed8d 0b00 	vstr	d0, [sp]
   db38a:	9b01      	ldr	r3, [sp, #4]
   db38c:	4912      	ldr	r1, [pc, #72]	; (db3d8 <__ulp+0x54>)
   db38e:	4019      	ands	r1, r3
   db390:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db394:	2900      	cmp	r1, #0
   db396:	dd05      	ble.n	db3a4 <__ulp+0x20>
   db398:	2200      	movs	r2, #0
   db39a:	460b      	mov	r3, r1
   db39c:	ec43 2b10 	vmov	d0, r2, r3
   db3a0:	b002      	add	sp, #8
   db3a2:	4770      	bx	lr
   db3a4:	4249      	negs	r1, r1
   db3a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db3aa:	ea4f 5021 	mov.w	r0, r1, asr #20
   db3ae:	f04f 0200 	mov.w	r2, #0
   db3b2:	f04f 0300 	mov.w	r3, #0
   db3b6:	da04      	bge.n	db3c2 <__ulp+0x3e>
   db3b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db3bc:	fa41 f300 	asr.w	r3, r1, r0
   db3c0:	e7ec      	b.n	db39c <__ulp+0x18>
   db3c2:	f1a0 0114 	sub.w	r1, r0, #20
   db3c6:	291e      	cmp	r1, #30
   db3c8:	bfda      	itte	le
   db3ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db3ce:	fa20 f101 	lsrle.w	r1, r0, r1
   db3d2:	2101      	movgt	r1, #1
   db3d4:	460a      	mov	r2, r1
   db3d6:	e7e1      	b.n	db39c <__ulp+0x18>
   db3d8:	7ff00000 	.word	0x7ff00000

000db3dc <__b2d>:
   db3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db3de:	6905      	ldr	r5, [r0, #16]
   db3e0:	f100 0714 	add.w	r7, r0, #20
   db3e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db3e8:	1f2e      	subs	r6, r5, #4
   db3ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db3ee:	4620      	mov	r0, r4
   db3f0:	f7ff fd93 	bl	daf1a <__hi0bits>
   db3f4:	f1c0 0320 	rsb	r3, r0, #32
   db3f8:	280a      	cmp	r0, #10
   db3fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; db478 <__b2d+0x9c>
   db3fe:	600b      	str	r3, [r1, #0]
   db400:	dc14      	bgt.n	db42c <__b2d+0x50>
   db402:	f1c0 0e0b 	rsb	lr, r0, #11
   db406:	fa24 f10e 	lsr.w	r1, r4, lr
   db40a:	42b7      	cmp	r7, r6
   db40c:	ea41 030c 	orr.w	r3, r1, ip
   db410:	bf34      	ite	cc
   db412:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db416:	2100      	movcs	r1, #0
   db418:	3015      	adds	r0, #21
   db41a:	fa04 f000 	lsl.w	r0, r4, r0
   db41e:	fa21 f10e 	lsr.w	r1, r1, lr
   db422:	ea40 0201 	orr.w	r2, r0, r1
   db426:	ec43 2b10 	vmov	d0, r2, r3
   db42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db42c:	42b7      	cmp	r7, r6
   db42e:	bf3a      	itte	cc
   db430:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db434:	f1a5 0608 	subcc.w	r6, r5, #8
   db438:	2100      	movcs	r1, #0
   db43a:	380b      	subs	r0, #11
   db43c:	d017      	beq.n	db46e <__b2d+0x92>
   db43e:	f1c0 0c20 	rsb	ip, r0, #32
   db442:	fa04 f500 	lsl.w	r5, r4, r0
   db446:	42be      	cmp	r6, r7
   db448:	fa21 f40c 	lsr.w	r4, r1, ip
   db44c:	ea45 0504 	orr.w	r5, r5, r4
   db450:	bf8c      	ite	hi
   db452:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db456:	2400      	movls	r4, #0
   db458:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db45c:	fa01 f000 	lsl.w	r0, r1, r0
   db460:	fa24 f40c 	lsr.w	r4, r4, ip
   db464:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db468:	ea40 0204 	orr.w	r2, r0, r4
   db46c:	e7db      	b.n	db426 <__b2d+0x4a>
   db46e:	ea44 030c 	orr.w	r3, r4, ip
   db472:	460a      	mov	r2, r1
   db474:	e7d7      	b.n	db426 <__b2d+0x4a>
   db476:	bf00      	nop
   db478:	3ff00000 	.word	0x3ff00000

000db47c <__d2b>:
   db47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db480:	4689      	mov	r9, r1
   db482:	2101      	movs	r1, #1
   db484:	ec57 6b10 	vmov	r6, r7, d0
   db488:	4690      	mov	r8, r2
   db48a:	f7ff fc7f 	bl	dad8c <_Balloc>
   db48e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db492:	4604      	mov	r4, r0
   db494:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db498:	bb35      	cbnz	r5, db4e8 <__d2b+0x6c>
   db49a:	2e00      	cmp	r6, #0
   db49c:	9301      	str	r3, [sp, #4]
   db49e:	d028      	beq.n	db4f2 <__d2b+0x76>
   db4a0:	4668      	mov	r0, sp
   db4a2:	9600      	str	r6, [sp, #0]
   db4a4:	f7ff fd59 	bl	daf5a <__lo0bits>
   db4a8:	9900      	ldr	r1, [sp, #0]
   db4aa:	b300      	cbz	r0, db4ee <__d2b+0x72>
   db4ac:	9a01      	ldr	r2, [sp, #4]
   db4ae:	f1c0 0320 	rsb	r3, r0, #32
   db4b2:	fa02 f303 	lsl.w	r3, r2, r3
   db4b6:	430b      	orrs	r3, r1
   db4b8:	40c2      	lsrs	r2, r0
   db4ba:	6163      	str	r3, [r4, #20]
   db4bc:	9201      	str	r2, [sp, #4]
   db4be:	9b01      	ldr	r3, [sp, #4]
   db4c0:	61a3      	str	r3, [r4, #24]
   db4c2:	2b00      	cmp	r3, #0
   db4c4:	bf14      	ite	ne
   db4c6:	2202      	movne	r2, #2
   db4c8:	2201      	moveq	r2, #1
   db4ca:	6122      	str	r2, [r4, #16]
   db4cc:	b1d5      	cbz	r5, db504 <__d2b+0x88>
   db4ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db4d2:	4405      	add	r5, r0
   db4d4:	f8c9 5000 	str.w	r5, [r9]
   db4d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db4dc:	f8c8 0000 	str.w	r0, [r8]
   db4e0:	4620      	mov	r0, r4
   db4e2:	b003      	add	sp, #12
   db4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db4e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db4ec:	e7d5      	b.n	db49a <__d2b+0x1e>
   db4ee:	6161      	str	r1, [r4, #20]
   db4f0:	e7e5      	b.n	db4be <__d2b+0x42>
   db4f2:	a801      	add	r0, sp, #4
   db4f4:	f7ff fd31 	bl	daf5a <__lo0bits>
   db4f8:	9b01      	ldr	r3, [sp, #4]
   db4fa:	6163      	str	r3, [r4, #20]
   db4fc:	2201      	movs	r2, #1
   db4fe:	6122      	str	r2, [r4, #16]
   db500:	3020      	adds	r0, #32
   db502:	e7e3      	b.n	db4cc <__d2b+0x50>
   db504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db50c:	f8c9 0000 	str.w	r0, [r9]
   db510:	6918      	ldr	r0, [r3, #16]
   db512:	f7ff fd02 	bl	daf1a <__hi0bits>
   db516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db51a:	e7df      	b.n	db4dc <__d2b+0x60>

000db51c <__ratio>:
   db51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db520:	4688      	mov	r8, r1
   db522:	4669      	mov	r1, sp
   db524:	4681      	mov	r9, r0
   db526:	f7ff ff59 	bl	db3dc <__b2d>
   db52a:	a901      	add	r1, sp, #4
   db52c:	4640      	mov	r0, r8
   db52e:	ec55 4b10 	vmov	r4, r5, d0
   db532:	f7ff ff53 	bl	db3dc <__b2d>
   db536:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db53a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db53e:	eba3 0c02 	sub.w	ip, r3, r2
   db542:	e9dd 3200 	ldrd	r3, r2, [sp]
   db546:	1a9b      	subs	r3, r3, r2
   db548:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db54c:	ec51 0b10 	vmov	r0, r1, d0
   db550:	2b00      	cmp	r3, #0
   db552:	bfd6      	itet	le
   db554:	460a      	movle	r2, r1
   db556:	462a      	movgt	r2, r5
   db558:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db55c:	468b      	mov	fp, r1
   db55e:	462f      	mov	r7, r5
   db560:	bfd4      	ite	le
   db562:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db566:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db56a:	4620      	mov	r0, r4
   db56c:	ee10 2a10 	vmov	r2, s0
   db570:	465b      	mov	r3, fp
   db572:	4639      	mov	r1, r7
   db574:	f7fd fed2 	bl	d931c <__aeabi_ddiv>
   db578:	ec41 0b10 	vmov	d0, r0, r1
   db57c:	b003      	add	sp, #12
   db57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db582 <__copybits>:
   db582:	3901      	subs	r1, #1
   db584:	b570      	push	{r4, r5, r6, lr}
   db586:	1149      	asrs	r1, r1, #5
   db588:	6914      	ldr	r4, [r2, #16]
   db58a:	3101      	adds	r1, #1
   db58c:	f102 0314 	add.w	r3, r2, #20
   db590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db594:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db598:	1f05      	subs	r5, r0, #4
   db59a:	42a3      	cmp	r3, r4
   db59c:	d30c      	bcc.n	db5b8 <__copybits+0x36>
   db59e:	1aa3      	subs	r3, r4, r2
   db5a0:	3b11      	subs	r3, #17
   db5a2:	f023 0303 	bic.w	r3, r3, #3
   db5a6:	3211      	adds	r2, #17
   db5a8:	42a2      	cmp	r2, r4
   db5aa:	bf88      	it	hi
   db5ac:	2300      	movhi	r3, #0
   db5ae:	4418      	add	r0, r3
   db5b0:	2300      	movs	r3, #0
   db5b2:	4288      	cmp	r0, r1
   db5b4:	d305      	bcc.n	db5c2 <__copybits+0x40>
   db5b6:	bd70      	pop	{r4, r5, r6, pc}
   db5b8:	f853 6b04 	ldr.w	r6, [r3], #4
   db5bc:	f845 6f04 	str.w	r6, [r5, #4]!
   db5c0:	e7eb      	b.n	db59a <__copybits+0x18>
   db5c2:	f840 3b04 	str.w	r3, [r0], #4
   db5c6:	e7f4      	b.n	db5b2 <__copybits+0x30>

000db5c8 <__any_on>:
   db5c8:	f100 0214 	add.w	r2, r0, #20
   db5cc:	6900      	ldr	r0, [r0, #16]
   db5ce:	114b      	asrs	r3, r1, #5
   db5d0:	4298      	cmp	r0, r3
   db5d2:	b510      	push	{r4, lr}
   db5d4:	db11      	blt.n	db5fa <__any_on+0x32>
   db5d6:	dd0a      	ble.n	db5ee <__any_on+0x26>
   db5d8:	f011 011f 	ands.w	r1, r1, #31
   db5dc:	d007      	beq.n	db5ee <__any_on+0x26>
   db5de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db5e2:	fa24 f001 	lsr.w	r0, r4, r1
   db5e6:	fa00 f101 	lsl.w	r1, r0, r1
   db5ea:	428c      	cmp	r4, r1
   db5ec:	d10b      	bne.n	db606 <__any_on+0x3e>
   db5ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db5f2:	4293      	cmp	r3, r2
   db5f4:	d803      	bhi.n	db5fe <__any_on+0x36>
   db5f6:	2000      	movs	r0, #0
   db5f8:	bd10      	pop	{r4, pc}
   db5fa:	4603      	mov	r3, r0
   db5fc:	e7f7      	b.n	db5ee <__any_on+0x26>
   db5fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db602:	2900      	cmp	r1, #0
   db604:	d0f5      	beq.n	db5f2 <__any_on+0x2a>
   db606:	2001      	movs	r0, #1
   db608:	e7f6      	b.n	db5f8 <__any_on+0x30>

000db60a <_calloc_r>:
   db60a:	b513      	push	{r0, r1, r4, lr}
   db60c:	434a      	muls	r2, r1
   db60e:	4611      	mov	r1, r2
   db610:	9201      	str	r2, [sp, #4]
   db612:	f7fb ff37 	bl	d7484 <_malloc_r>
   db616:	4604      	mov	r4, r0
   db618:	b118      	cbz	r0, db622 <_calloc_r+0x18>
   db61a:	9a01      	ldr	r2, [sp, #4]
   db61c:	2100      	movs	r1, #0
   db61e:	f7fe f907 	bl	d9830 <memset>
   db622:	4620      	mov	r0, r4
   db624:	b002      	add	sp, #8
   db626:	bd10      	pop	{r4, pc}

000db628 <nan>:
   db628:	ed9f 0b01 	vldr	d0, [pc, #4]	; db630 <nan+0x8>
   db62c:	4770      	bx	lr
   db62e:	bf00      	nop
   db630:	00000000 	.word	0x00000000
   db634:	7ff80000 	.word	0x7ff80000

000db638 <__ascii_wctomb>:
   db638:	b149      	cbz	r1, db64e <__ascii_wctomb+0x16>
   db63a:	2aff      	cmp	r2, #255	; 0xff
   db63c:	bf85      	ittet	hi
   db63e:	238a      	movhi	r3, #138	; 0x8a
   db640:	6003      	strhi	r3, [r0, #0]
   db642:	700a      	strbls	r2, [r1, #0]
   db644:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db648:	bf98      	it	ls
   db64a:	2001      	movls	r0, #1
   db64c:	4770      	bx	lr
   db64e:	4608      	mov	r0, r1
   db650:	4770      	bx	lr
	...

000db654 <__aeabi_d2lz>:
   db654:	b538      	push	{r3, r4, r5, lr}
   db656:	2200      	movs	r2, #0
   db658:	2300      	movs	r3, #0
   db65a:	4604      	mov	r4, r0
   db65c:	460d      	mov	r5, r1
   db65e:	f7fd ffa5 	bl	d95ac <__aeabi_dcmplt>
   db662:	b928      	cbnz	r0, db670 <__aeabi_d2lz+0x1c>
   db664:	4620      	mov	r0, r4
   db666:	4629      	mov	r1, r5
   db668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db66c:	f7fe b84c 	b.w	d9708 <__aeabi_d2ulz>
   db670:	4620      	mov	r0, r4
   db672:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db676:	f7fe f847 	bl	d9708 <__aeabi_d2ulz>
   db67a:	4240      	negs	r0, r0
   db67c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db680:	bd38      	pop	{r3, r4, r5, pc}
   db682:	bf00      	nop

000db684 <dynalib_user>:
   db684:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db694:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   db6a4:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   db6b4:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   db6c4:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   db6d4:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   db6e4:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   db6f4:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   db704:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   db714:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   db724:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   db734:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   db744:	726f 5320 7869 2a00 4e00 206f 6144 6174     or Six.*.No Data
   db754:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   db764:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   db774:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   db784:	6255 6469 746f 2073 6f48 6b6f 5300 7465     Ubidots Hook.Set
   db794:	7420 206f 7233 2064 6150 7472 2079 6953      to 3rd Party Si
   db7a4:	006d 0030 6553 2074 6f74 5020 7261 6974     m.0.Set to Parti
   db7b4:	6c63 2065 6953 006d 654b 7065 4120 696c     cle Sim.Keep Ali
   db7c4:	6576 7320 7465 7420 206f 6925 7320 6365     ve set to %i sec
   db7d4:	4b00 6565 2070 6c41 7669 0065 6552 6f70     .Keep Alive.Repo
   db7e4:	7472 6e69 2067 6954 656d 5320 7465 7420     rting Time Set t
   db7f4:	206f 7325 4d20 6e69 7475 7365 002e 6553     o %s Minutes..Se
   db804:	2074 6556 6272 736f 2065 6f4d 6564 4300     t Verbose Mode.C
   db814:	656c 7261 6465 5620 7265 6f62 6573 4d20     leared Verbose M
   db824:	646f 0065 6944 6173 6c62 6465 5320 6e65     ode.Disabled Sen
   db834:	6f73 2072 6e4f 0065 6553 736e 726f 5320     sor One.Sensor S
   db844:	6174 7574 0073 6944 6173 6c62 6465 5320     tatus.Disabled S
   db854:	6e65 6f73 2072 7754 006f 6944 6173 6c62     ensor Two.Disabl
   db864:	6465 5320 6e65 6f73 2072 6854 6572 0065     ed Sensor Three.
   db874:	6944 6173 6c62 6465 5320 6e65 6f73 2072     Disabled Sensor 
   db884:	6f46 7275 4400 7369 6261 656c 2064 6553     Four.Disabled Se
   db894:	736e 726f 4620 7669 0065 6944 6173 6c62     nsor Five.Disabl
   db8a4:	6465 5320 6e65 6f73 2072 6953 0078 704f     ed Sensor Six.Op
   db8b4:	7265 7461 6f69 206e 6f4d 6564 2520 0069     eration Mode %i.
   db8c4:	6544 6976 6563 5220 7365 7465 5320 6375     Device Reset Suc
   db8d4:	6563 7373 4c00 616f 6964 676e 5320 7379     cess.Loading Sys
   db8e4:	6574 206d 6544 6166 6c75 7374 4c00 616f     tem Defaults.Loa
   db8f4:	6964 676e 4320 6e6f 7473 6e61 2074 6544     ding Constant De
   db904:	6166 6c75 7374 3920 2e30 0039 6550 7474     faults 90.9.Pett
   db914:	6465 5700 7461 6863 6f64 0067 227b 6573     ed.Watchdog.{"se
   db924:	736e 726f 6e4f 2265 253a 2e34 6631 202c     nsorOne":%4.1f, 
   db934:	7322 6e65 6f73 5472 6f77 3a22 3425 312e     "sensorTwo":%4.1
   db944:	2c66 2020 7322 6e65 6f73 5472 7268 6565     f,  "sensorThree
   db954:	3a22 3425 312e 2c66 2020 7322 6e65 6f73     ":%4.1f,  "senso
   db964:	4672 756f 2272 253a 2e34 6631 202c 2220     rFour":%4.1f,  "
   db974:	6573 736e 726f 6946 6576 3a22 3425 312e     sensorFive":%4.1
   db984:	2c66 7322 6e65 6f73 5372 7869 3a22 3425     f,"sensorSix":%4
   db994:	312e 2c66 4d22 646f 2265 313a 007d 227b     .1f,"Mode":1}.{"
   db9a4:	6553 736e 726f 6e4f 5265 3a22 3425 312e     SensorOneR":%4.1
   db9b4:	2c66 2220 6553 736e 726f 6e4f 5365 3a22     f, "SensorOneS":
   db9c4:	3425 312e 2c66 2020 5322 6e65 6f73 4f72     %4.1f,  "SensorO
   db9d4:	656e 2254 253a 2e34 6631 202c 2220 6573     neT":%4.1f,  "se
   db9e4:	736e 726f 7754 526f 3a22 3425 312e 2c66     nsorTwoR":%4.1f,
   db9f4:	2020 7322 6e65 6f73 5472 6f77 2253 253a       "sensorTwoS":%
   dba04:	2e34 6631 222c 6573 736e 726f 7754 546f     4.1f,"sensorTwoT
   dba14:	3a22 3425 312e 2c66 4d22 646f 2265 323a     ":%4.1f,"Mode":2
   dba24:	007d 227b 6553 736e 726f 6e4f 5265 3a22     }.{"SensorOneR":
   dba34:	3425 312e 2c66 2220 6553 736e 726f 6e4f     %4.1f, "SensorOn
   dba44:	5365 3a22 3425 312e 2c66 2020 5322 6e65     eS":%4.1f,  "Sen
   dba54:	6f73 4f72 656e 2254 253a 2e34 6631 202c     sorOneT":%4.1f, 
   dba64:	2220 6573 736e 726f 6f46 7275 3a22 3425      "sensorFour":%4
   dba74:	312e 2c66 2020 7322 6e65 6f73 4672 7669     .1f,  "sensorFiv
   dba84:	2265 253a 2e34 6631 222c 6573 736e 726f     e":%4.1f,"sensor
   dba94:	6953 2278 253a 2e34 6631 222c 6f4d 6564     Six":%4.1f,"Mode
   dbaa4:	3a22 7d33 7b00 5322 6e65 6f73 4f72 656e     ":3}.{"SensorOne
   dbab4:	2252 253a 2e34 6631 202c 5322 6e65 6f73     R":%4.1f, "Senso
   dbac4:	4f72 656e 2253 253a 2e34 6631 202c 2220     rOneS":%4.1f,  "
   dbad4:	6553 736e 726f 6e4f 5465 3a22 3425 312e     SensorOneT":%4.1
   dbae4:	2c66 2020 5322 6e65 6f73 4f72 656e 224e     f,  "SensorOneN"
   dbaf4:	253a 2e34 6631 202c 2220 6573 736e 726f     :%4.1f,  "sensor
   dbb04:	6946 6576 3a22 3425 312e 2c66 7322 6e65     Five":%4.1f,"sen
   dbb14:	6f73 5372 7869 3a22 3425 312e 2c66 4d22     sorSix":%4.1f,"M
   dbb24:	646f 2265 343a 007d 6f70 6577 6d72 6e6f     ode":4}.powermon
   dbb34:	7469 726f 6e69 5f67 6f68 6b6f 4600 6f72     itoring_hook.Fro
   dbb44:	206d 7325 7420 206f 7325 5300 6174 6574     m %s to %s.State
   dbb54:	5420 6172 736e 7469 6f69 006e 7073 7261      Transition.spar
   dbb64:	2f6b 6564 6976 6563 732f 7365 6973 6e6f     k/device/session
   dbb74:	652f 646e 4500 7272 726f 5320 6174 6574     /end.Error State
   dbb84:	2d20 5220 7365 7465 5300 6174 6574 4300      - Reset.State.C
   dbb94:	2054 6e4f 3a65 2520 2e33 6631 4300 2054     T One: %3.1f.CT 
   dbba4:	7754 206f 3325 312e 0066 5443 5420 7268     Two %3.1f.CT Thr
   dbbb4:	6565 203a 3325 312e 0066 6553 736e 726f     ee: %3.1f.Sensor
   dbbc4:	4620 756f 2072 6f43 736e 6174 746e 3a20      Four Constant :
   dbbd4:	2520 2e33 6631 5300 6e65 6f73 2072 6946      %3.1f.Sensor Fi
   dbbe4:	6576 4320 6e6f 7473 6e61 2074 203a 3325     ve Constant : %3
   dbbf4:	312e 0066 6553 736e 726f 5320 7869 4320     .1f.Sensor Six C
   dbc04:	6e6f 7473 6e61 2074 203a 3325 312e 0066     onstant : %3.1f.
   dbc14:	6f43 736e 6174 746e 4f20 656e 5620 6c61     Constant One Val
   dbc24:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   dbc34:	6e61 2074 7754 206f 6156 756c 2065 6573     ant Two Value se
   dbc44:	2074 6f74 0020 6f43 736e 6174 746e 5420     t to .Constant T
   dbc54:	7268 6565 5620 6c61 6575 7320 7465 7420     hree Value set t
   dbc64:	206f 4300 6e6f 7473 6e61 2074 6f46 7275     o .Constant Four
   dbc74:	5620 6c61 6575 7320 7465 7420 206f 4300      Value set to .C
   dbc84:	6e6f 7473 6e61 2074 6946 6576 5620 6c61     onstant Five Val
   dbc94:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   dbca4:	6e61 2074 6953 2078 6156 756c 2065 6573     ant Six Value se
   dbcb4:	2074 6f74 0020 682f 6f6f 2d6b 6572 7073     t to ./hook-resp
   dbcc4:	6e6f 6573 702f 776f 7265 6f6d 696e 6f74     onse/powermonito
   dbcd4:	6972 676e 685f 6f6f 2f6b 5200 6c65 6165     ring_hook/.Relea
   dbce4:	6573 4200 7461 6574 7972 4200 7461 6574     se.Battery.Batte
   dbcf4:	7972 6f43 746e 7865 0074 654b 7065 4120     ryContext.Keep A
   dbd04:	696c 6576 5320 6365 5200 7065 726f 6974     live Sec.Reporti
   dbd14:	676e 4420 7275 7461 6f69 006e 704f 7265     ng Duration.Oper
   dbd24:	7461 6f69 206e 6f4d 6564 4d00 6165 7573     ation Mode.Measu
   dbd34:	6572 4e2d 776f 5600 7265 6f62 6573 4d2d     re-Now.Verbose-M
   dbd44:	646f 0065 6553 2074 6f43 736e 6174 746e     ode.Set Constant
   dbd54:	4f20 656e 5300 7465 4320 6e6f 7473 6e61      One.Set Constan
   dbd64:	2074 7754 006f 6553 2074 6f43 736e 6174     t Two.Set Consta
   dbd74:	746e 5420 7268 6565 5300 7465 4320 6e6f     nt Three.Set Con
   dbd84:	7473 6e61 2074 6f46 7275 5300 7465 4320     stant Four.Set C
   dbd94:	6e6f 7473 6e61 2074 6946 6576 5300 7465     onstant Five.Set
   dbda4:	4320 6e6f 7473 6e61 2074 6953 0078 6e45      Constant Six.En
   dbdb4:	6261 656c 5320 6e65 6f73 0072 6944 6173     able Sensor.Disa
   dbdc4:	6c62 2065 6553 736e 726f 4f00 6570 6172     ble Sensor.Opera
   dbdd4:	6974 676e 4d20 646f 0065 6552 6f70 7472     ting Mode.Report
   dbde4:	6e69 2067 7544 6172 6974 6e6f 4d28 4e49     ing Duration(MIN
   dbdf4:	5455 5345 0029 6552 6f62 746f 4420 7665     UTES).Reboot Dev
   dbe04:	6369 0065 6553 7574 2070 6f4c 706f 4c00     ice.Setup Loop.L
   dbe14:	616f 6964 676e 4420 6665 7561 746c 0073     oading Defaults.
   dbe24:	6f4c 6461 6e69 2067 7246 6d6f 4620 4152     Loading From FRA
   dbe34:	004d 7453 7261 7574 0070 0000               M.Startup...

000dbe40 <_ZTV5Timer>:
	...
   dbe48:	42b5 000d 4309 000d 41a1 000d               .B...C...A..

000dbe54 <_ZTV17PublishQueueAsync>:
	...
   dbe5c:	41ad 000d 41c1 000d 6865 000d 69f1 000d     .A...A..eh...i..
   dbe6c:	69b1 000d 698f 000d 6b37 000d 69d7 000d     .i...i..7k...i..

000dbe7c <_ZTV8MB85RC64>:
	...
   dbe84:	41d5 000d 41e9 000d 5e5d 000d 5ef3 000d     .A...A..]^...^..
   dbe94:	5f75 000d b698 000d b6a0 000d b6a4 000d     u_..............
   dbea4:	b6ad 000d b6b5 000d b6c1 000d b6c7 000d     ................
   dbeb4:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dbec4:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dbef4 <_ZL13releaseNumber>:
   dbef4:	2e39 3030 0000 0000                         9.00....

000dbefc <_ZL17FRAMversionNumber>:
   dbefc:	0016 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dbf0c:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dbf1c:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dbf2c <_ZTV6MB85RC>:
	...
   dbf34:	5d7d 000d 5d7f 000d 5e5d 000d 5ef3 000d     }]...]..]^...^..
   dbf44:	5f75 000d 6564 6976 6563 6552 6461 6620     u_..deviceRead f
   dbf54:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbf64:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dbf74:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dbf84:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbf94:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dbfa4:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dbfb4:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dbfc4:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dbfd4:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dbfe4:	0063 0000                                   c...

000dbfe8 <_ZTV12MCP79410SRAM>:
	...
   dbff0:	6035 000d 604b 000d 6025 000d 6029 000d     5`..K`..%`..)`..
   dc000:	6075 000d 635d 000d 657d 000d               u`..]c..}e..

000dc00c <_ZTV12MCP79410Time>:
	...
   dc014:	6039 000d 603d 000d                         9`..=`..

000dc01c <_ZTV14MCP79410EEPROM>:
	...
   dc024:	6037 000d 6059 000d 602d 000d 6031 000d     7`..Y`..-`..1`..
   dc034:	6075 000d 6397 000d 67bd 000d               u`...c...g..

000dc040 <_ZTV8MCP79410>:
	...
   dc048:	603b 000d 6067 000d 7550 6c62 7369 5168     ;`..g`..PublishQ
   dc058:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dc068:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dc078:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dc088:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dc098:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dc0a8:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dc0b8:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dc0c8:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dc0d8:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dc0e8:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dc0f8:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dc108:	7162 0000                                   bq..

000dc10c <_ZTV21PublishQueueAsyncBase>:
	...
   dc11c:	6865 000d 40a5 000d 40a5 000d 40a5 000d     eh...@...@...@..
   dc12c:	40a5 000d 40a5 000d                         .@...@..

000dc134 <_ZTV25PublishQueueAsyncRetained>:
	...
   dc13c:	694d 000d 6961 000d 6865 000d 69f1 000d     Mi..ai..eh...i..
   dc14c:	69b1 000d 698f 000d 6b37 000d 69d7 000d     .i...i..7k...i..

000dc15c <_ZTVN5spark13CellularClassE>:
	...
   dc164:	7623 000d 7619 000d 760f 000d 75c5 000d     #v...v...v...u..
   dc174:	7603 000d 75f7 000d 7f09 000d 7f11 000d     .v...u..........
   dc184:	75eb 000d 75e3 000d 75d9 000d 75cf 000d     .u...u...u...u..
   dc194:	7f41 000d                                   A...

000dc198 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc1a0:	765d 000d 7663 000d 76a1 000d 7671 000d     ]v..cv...v..qv..
   dc1b0:	765f 000d                                   _v..

000dc1b4 <_ZTVN5spark13EthernetClassE>:
	...
   dc1bc:	7c43 000d 7c39 000d 7c2f 000d 7c25 000d     C|..9|../|..%|..
   dc1cc:	7c19 000d 7c0d 000d 7f09 000d 7f11 000d     .|...|..........
   dc1dc:	7c01 000d 7bf9 000d 7bef 000d 7be5 000d     .|...{...{...{..
   dc1ec:	7f41 000d                                   A...

000dc1f0 <_ZTV7TwoWire>:
	...
   dc1f8:	7c61 000d 7cab 000d 7c83 000d 7c63 000d     a|...|...|..c|..
   dc208:	7c8b 000d 7c93 000d 7c9b 000d 7ca3 000d     .|...|...|...|..

000dc218 <_ZTV9IPAddress>:
	...
   dc220:	7ddd 000d 7dcd 000d 7dcf 000d 7061 0070     .}...}...}..app.

000dc230 <_ZTVN5spark12NetworkClassE>:
	...
   dc238:	7ec9 000d 7ed3 000d 7edd 000d 7ee7 000d     .~...~...~...~..
   dc248:	7ef1 000d 7efd 000d 7f09 000d 7f11 000d     .~...~..........
   dc258:	7f19 000d 7f25 000d 7f2d 000d 7f37 000d     ....%...-...7...
   dc268:	7f41 000d 005a 2b25 3330 3a64 3025 7532     A...Z.%+03d:%02u
   dc278:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   dc288:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000dc298 <_ZTV11USARTSerial>:
	...
   dc2a0:	8615 000d 8681 000d 8659 000d 8035 000d     ........Y...5...
   dc2b0:	8629 000d 8645 000d 8637 000d 8653 000d     )...E...7...S...
   dc2c0:	8617 000d 861b 000d                         ........

000dc2c8 <_ZTV9USBSerial>:
	...
   dc2d0:	8715 000d 877d 000d 8753 000d 8035 000d     ....}...S...5...
   dc2e0:	8745 000d 8717 000d 8727 000d 8777 000d     E.......'...w...
   dc2f0:	8737 000d 8711 000d                         7.......

000dc2f8 <_ZSt7nothrow>:
   dc2f8:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   dc308:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   dc318:	2e25 6432 2520 0a64                          %.2d %d..

000dc321 <day_name.6145>:
   dc321:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc331:	6972 6153                                    riSat

000dc336 <mon_name.6146>:
   dc336:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc346:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc356:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dc368 <fpi.7566>:
   dc368:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc378:	0000 0000                                   ....

000dc37c <fpinan.7602>:
   dc37c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc38c:	0000 0000                                   ....

000dc390 <tinytens>:
   dc390:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc3a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc3b0:	6f43 64ac 0628 1168                         Co.d(.h.

000dc3b8 <_ctype_>:
   dc3b8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc3c8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc3d8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc3e8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc3f8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc408:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc418:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc428:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc438:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc4bc <_C_numeric_locale>:
   dc4bc:	b800 000d c320 000d d884 2003 0043 4f50     .... ...... C.PO
   dc4cc:	4953 0058                                   SIX.

000dc4d0 <__mprec_bigtens>:
   dc4d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc4e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc4f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc4f8 <__mprec_tens>:
   dc4f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc508:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc518:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc528:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc538:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc548:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc558:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc568:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc578:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc588:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc598:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc5a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc5b8:	9db4 79d9 7843 44ea                         ...yCx.D

000dc5c0 <p05.7490>:
   dc5c0:	0005 0000 0019 0000 007d 0000               ........}...

000dc5cc <link_const_variable_data_end>:
   dc5cc:	000d5925 	.word	0x000d5925
   dc5d0:	000d67ed 	.word	0x000d67ed
   dc5d4:	000d6dc9 	.word	0x000d6dc9
   dc5d8:	000d759d 	.word	0x000d759d
   dc5dc:	000d762d 	.word	0x000d762d
   dc5e0:	000d7c4d 	.word	0x000d7c4d
   dc5e4:	000d7eb9 	.word	0x000d7eb9
   dc5e8:	000d8021 	.word	0x000d8021
   dc5ec:	000d80d5 	.word	0x000d80d5
   dc5f0:	000d82c1 	.word	0x000d82c1
   dc5f4:	000d8601 	.word	0x000d8601

000dc5f8 <link_constructors_end>:
	...
